	.file	"insn-attrtab.c.bc"
	.text
	.globl	insn_current_length
	.align	16, 0x90
	.type	insn_current_length,@function
insn_current_length:                    # @insn_current_length
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp2:
	.cfi_def_cfa_offset 16
.Ltmp3:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB0_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB0_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB0_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB0_5
.LBB0_4:                                # %sw.default
	xorq	%rax, %rax
	popq	%rbx
	retq
.LBB0_5:                                # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.insn_current_length, %rcx
	movq	$29, %rdx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp4:
	.size	insn_current_length, .Ltmp4-insn_current_length
	.cfi_endproc

	.globl	insn_variable_length_p
	.align	16, 0x90
	.type	insn_variable_length_p,@function
insn_variable_length_p:                 # @insn_variable_length_p
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp7:
	.cfi_def_cfa_offset 16
.Ltmp8:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB1_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB1_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB1_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB1_5
.LBB1_4:                                # %sw.default
	xorq	%rax, %rax
	popq	%rbx
	retq
.LBB1_5:                                # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.insn_variable_length_p, %rcx
	movq	$46, %rdx
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp9:
	.size	insn_variable_length_p, .Ltmp9-insn_variable_length_p
	.cfi_endproc

	.globl	insn_default_length
	.align	16, 0x90
	.type	insn_default_length,@function
insn_default_length:                    # @insn_default_length
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp16:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp17:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp18:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp19:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp20:
	.cfi_def_cfa_offset 48
	subq	$16, %rsp
.Ltmp21:
	.cfi_def_cfa_offset 64
.Ltmp22:
	.cfi_offset %rbx, -48
.Ltmp23:
	.cfi_offset %r12, -40
.Ltmp24:
	.cfi_offset %r13, -32
.Ltmp25:
	.cfi_offset %r14, -24
.Ltmp26:
	.cfi_offset %r15, -16
	movq	%rdi, %r13
	movslq	40(%r13), %rax
	testq	%rax, %rax
	jns	.LBB2_2
# BB#1:                                 # %cond.false
	movq	%r13, %rdi
	callq	recog_memoized_1
.LBB2_2:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$804, %rdx              # imm = 0x324
	jg	.LBB2_107
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$17, %rdx
	jg	.LBB2_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB2_24
# BB#5:                                 # %sw.bb254
	movq	32(%r13), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	movq	$128, %rbx
	je	.LBB2_113
# BB#6:                                 # %land.lhs.true258
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB2_113
# BB#7:                                 # %if.then264
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.insn_default_length, %rcx
	movq	$356, %rdx              # imm = 0x164
	jmp	.LBB2_71
.LBB2_107:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$805, %rax              # imm = 0x325
	jne	.LBB2_24
# BB#108:                               # %sw.bb265
	movq	$135, %rbx
	jmp	.LBB2_113
.LBB2_8:                                # %cond.end
	movq	$16, %rbx
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$672, %rdx              # imm = 0x2A0
	jg	.LBB2_94
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$618, %rdx              # imm = 0x26A
	jg	.LBB2_36
# BB#10:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$75, %rdx
	jg	.LBB2_16
# BB#11:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$31, %rax
	ja	.LBB2_24
# BB#12:                                # %cond.end
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$910426112, %rdx        # imm = 0x36440000
	jne	.LBB2_113
# BB#13:                                # %cond.end
	cmpq	$30, %rax
	je	.LBB2_112
# BB#14:                                # %cond.end
	cmpq	$31, %rax
	jne	.LBB2_24
	jmp	.LBB2_15
.LBB2_94:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$673, %rax              # imm = 0x2A1
	jne	.LBB2_24
	jmp	.LBB2_95
.LBB2_36:                               # %cond.end
	addq	$-619, %rax             # imm = 0xFFFFFFFFFFFFFD95
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$39, %rax
	ja	.LBB2_24
# BB#37:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$825707228592, %rcx     # imm = 0xC03FFC6DB0
	testq	%rcx, %rsi
	jne	.LBB2_113
# BB#38:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$3221225472, %rcx       # imm = 0xC0000000
	testq	%rcx, %rdx
	je	.LBB2_39
# BB#109:                               # %sw.bb266
	movq	$5, %rbx
	jmp	.LBB2_113
.LBB2_16:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$229, %rdx
	jg	.LBB2_19
# BB#17:                                # %cond.end
	addq	$-76, %rax
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$109, %rax
	ja	.LBB2_24
# BB#18:                                # %cond.end
	jmpq	*.LJTI2_1(,%rax,8)
.LBB2_105:                              # %sw.bb235
	movq	%r13, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB2_113
	jmp	.LBB2_41
.LBB2_95:                               # %sw.bb215
	movq	%r13, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jb	.LBB2_113
# BB#96:                                # %if.else220
	movq	%r13, %rdi
	callq	get_attr_modrm
	movq	%rax, %rbx
	movq	%r13, %rdi
	callq	get_attr_prefix_0f
	movq	%rax, %r14
	movq	%r13, %rdi
	callq	get_attr_i387
	movslq	40(%r13), %rcx
	movq	%rax, %r15
	testq	%rcx, %rcx
	jns	.LBB2_98
# BB#97:                                # %cond.false.i614
	movq	%r13, %rdi
	callq	recog_memoized_1
	movq	%rax, %rcx
.LBB2_98:                               # %cond.end.i616
	movq	%r15, (%rsp)            # 8-byte Spill
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	$1, %r14
	leaq	-602(%rcx), %rdx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	$11, %rdx
	jb	.LBB2_104
# BB#99:                                # %cond.end.i616
	leaq	-590(%rcx), %rdx
	andq	%rax, %rdx
	cmpq	$5, %rdx
	jae	.LBB2_100
.LBB2_104:                              # %get_attr_prefix_rep.exit629
	movq	%r13, %rdi
	callq	get_attr_prefix_data16
	movq	%r13, %r12
	movq	%rax, %r13
	movq	%r12, %rdi
	callq	get_attr_length_immediate
	movq	%rax, %r15
	movq	%r12, %rdi
	callq	get_attr_length_address
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	%rcx, %rbx
	movq	(%rsp), %rcx            # 8-byte Reload
	addq	%rcx, %rbx
	addq	%r14, %rbx
.LBB2_50:                               # %return
	addq	%r13, %rbx
	addq	%r15, %rbx
	leaq	1(%rax,%rbx), %rbx
	jmp	.LBB2_113
.LBB2_19:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$267, %rdx              # imm = 0x10B
	jg	.LBB2_21
# BB#20:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$230, %rax
	jne	.LBB2_24
	jmp	.LBB2_113
.LBB2_21:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$343, %rdx              # imm = 0x157
	jg	.LBB2_34
# BB#22:                                # %cond.end
	addq	$-268, %rax             # imm = 0xFFFFFFFFFFFFFEF4
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$21, %rcx
	ja	.LBB2_24
# BB#23:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$3146459, %rax          # imm = 0x3002DB
	jne	.LBB2_113
	jmp	.LBB2_24
.LBB2_34:                               # %cond.end
	addq	$-344, %rax             # imm = 0xFFFFFFFFFFFFFEA8
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$180, %rax
	ja	.LBB2_24
# BB#35:                                # %cond.end
	jmpq	*.LJTI2_0(,%rax,8)
.LBB2_61:                               # %sw.bb38
	movq	%r13, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	jmp	.LBB2_62
.LBB2_112:                              # %sw.bb270
	movq	$2, %rbx
	jmp	.LBB2_113
.LBB2_100:                              # %cond.end.i616
	andq	%rax, %rcx
	cmpq	%rax, %rcx
	jne	.LBB2_103
# BB#101:                               # %sw.bb4.i622
	movq	32(%r13), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB2_103
# BB#102:                               # %land.lhs.true.i625
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB2_70
.LBB2_103:                              # %sw.default.i627
	xorq	%r14, %r14
	jmp	.LBB2_104
.LBB2_39:                               # %cond.end
	testq	%rax, %rax
	jne	.LBB2_24
# BB#40:                                # %sw.bb
	movq	%r13, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	je	.LBB2_113
.LBB2_41:                               # %if.else
	movq	%r13, %rdi
	callq	get_attr_modrm
	movq	%rax, %rbx
	movq	%r13, %rdi
	callq	get_attr_prefix_0f
	movq	%rax, %r15
	movq	%r13, %rdi
	callq	get_attr_i387
	movslq	40(%r13), %rcx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	testq	%rcx, %rcx
	jns	.LBB2_43
# BB#42:                                # %cond.false.i
	movq	%r13, %rdi
	callq	recog_memoized_1
	movq	%rax, %rcx
.LBB2_43:                               # %cond.end.i
	movq	%r15, (%rsp)            # 8-byte Spill
	movq	$1, %r12
	leaq	-602(%rcx), %rax
	andq	%r14, %rax
	cmpq	$11, %rax
	jb	.LBB2_49
# BB#44:                                # %cond.end.i
	leaq	-590(%rcx), %rax
	andq	%r14, %rax
	cmpq	$5, %rax
	jae	.LBB2_45
.LBB2_49:                               # %get_attr_prefix_rep.exit
	movq	%r13, %rdi
	callq	get_attr_prefix_data16
	movq	%r13, %r14
	movq	%rax, %r13
	movq	%r14, %rdi
	callq	get_attr_length_immediate
	movq	%rax, %r15
	movq	%r14, %rdi
	callq	get_attr_length_address
	movq	(%rsp), %rcx            # 8-byte Reload
	addq	%rcx, %rbx
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	%rcx, %rbx
	addq	%r12, %rbx
	jmp	.LBB2_50
.LBB2_24:                               # %sw.default
	movq	%r13, %rdi
	callq	get_attr_modrm
	movq	%rax, %rbx
	movq	%r13, %rdi
	callq	get_attr_prefix_0f
	movq	%rax, %r14
	movq	%r13, %rdi
	callq	get_attr_i387
	movslq	40(%r13), %rcx
	movq	%rax, %r15
	testq	%rcx, %rcx
	jns	.LBB2_26
# BB#25:                                # %cond.false.i654
	movq	%r13, %rdi
	callq	recog_memoized_1
	movq	%rax, %rcx
.LBB2_26:                               # %cond.end.i656
	movq	%r15, (%rsp)            # 8-byte Spill
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movq	$1, %r15
	leaq	-602(%rcx), %rdx
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	$11, %rdx
	jb	.LBB2_32
# BB#27:                                # %cond.end.i656
	leaq	-590(%rcx), %rdx
	andq	%rax, %rdx
	cmpq	$5, %rdx
	jae	.LBB2_28
.LBB2_32:                               # %get_attr_prefix_rep.exit669
	movq	%r13, %rdi
	callq	get_attr_prefix_data16
	movq	%r13, %r12
	movq	%rax, %r13
	movq	%r12, %rdi
	callq	get_attr_length_immediate
	movq	%rax, %r14
	movq	%r12, %rdi
	callq	get_attr_length_address
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	%rcx, %rbx
	movq	(%rsp), %rcx            # 8-byte Reload
	addq	%rcx, %rbx
	addq	%r15, %rbx
	addq	%r13, %rbx
	addq	%r14, %rbx
	leaq	1(%rax,%rbx), %rbx
.LBB2_113:                              # %return
	movq	%rbx, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB2_28:                               # %cond.end.i656
	andq	%rax, %rcx
	cmpq	%rax, %rcx
	jne	.LBB2_31
# BB#29:                                # %sw.bb4.i662
	movq	32(%r13), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB2_31
# BB#30:                                # %land.lhs.true.i665
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB2_70
.LBB2_31:                               # %sw.default.i667
	xorq	%r15, %r15
	jmp	.LBB2_32
.LBB2_15:                               # %sw.bb267
	movq	$1, %rbx
	jmp	.LBB2_113
.LBB2_88:                               # %sw.bb134
	movq	%r13, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r14, %rax
	cmpq	$2, %rax
	jae	.LBB2_78
	jmp	.LBB2_113
.LBB2_77:                               # %sw.bb94
	movq	%r13, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB2_113
.LBB2_78:                               # %if.else97
	movq	%r13, %rdi
	callq	get_attr_modrm
	movq	%rax, %r15
	movq	%r13, %rdi
	callq	get_attr_prefix_0f
	movq	%rax, %rbx
	movq	%r13, %rdi
	callq	get_attr_i387
	movslq	40(%r13), %rcx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	testq	%rcx, %rcx
	jns	.LBB2_80
# BB#79:                                # %cond.false.i494
	movq	%r13, %rdi
	callq	recog_memoized_1
	movq	%rax, %rcx
.LBB2_80:                               # %cond.end.i496
	movq	%rbx, (%rsp)            # 8-byte Spill
	movq	$1, %r12
	leaq	-602(%rcx), %rax
	andq	%r14, %rax
	cmpq	$11, %rax
	jb	.LBB2_86
# BB#81:                                # %cond.end.i496
	leaq	-590(%rcx), %rax
	andq	%r14, %rax
	cmpq	$5, %rax
	jb	.LBB2_86
# BB#82:                                # %cond.end.i496
	movq	%r13, %rbx
	andq	%r14, %rcx
	cmpq	%r14, %rcx
	jne	.LBB2_85
# BB#83:                                # %sw.bb4.i502
	movq	32(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB2_85
# BB#84:                                # %land.lhs.true.i505
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB2_89
.LBB2_85:                               # %sw.default.i507
	xorq	%r12, %r12
	movq	%rbx, %r13
.LBB2_86:                               # %get_attr_prefix_rep.exit509
	movq	%r13, %rdi
	callq	get_attr_prefix_data16
	movq	%r13, %r14
	movq	%rax, %r13
	movq	%r14, %rdi
	callq	get_attr_length_immediate
	movq	%rax, %rbx
	movq	%r14, %rdi
	callq	get_attr_length_address
	movq	(%rsp), %rcx            # 8-byte Reload
	addq	%rcx, %r15
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	%rcx, %r15
	addq	%r12, %r15
	addq	%r13, %r15
	addq	%rbx, %r15
	leaq	1(%rax,%r15), %rbx
	jmp	.LBB2_113
.LBB2_92:                               # %sw.bb179
	movq	%r13, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB2_63
	jmp	.LBB2_113
.LBB2_90:                               # %sw.bb154
	movq	%r13, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB2_63
# BB#91:                                # %sw.bb154
	addq	$-3, %rax
	andq	%r14, %rax
	cmpq	$2, %rax
	jb	.LBB2_113
	jmp	.LBB2_63
.LBB2_74:                               # %sw.bb56
	movq	%r13, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$4, %rsi
.LBB2_62:                               # %sw.bb38
	callq	register_operand
	testq	%r14, %rax
	movq	$2, %rbx
	jne	.LBB2_113
	jmp	.LBB2_63
.LBB2_93:                               # %sw.bb197
	movq	%r13, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB2_63
	jmp	.LBB2_113
.LBB2_87:                               # %sw.bb112
	movq	%r13, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	decq	%rax
	andq	%r14, %rax
	cmpq	$3, %rax
	jb	.LBB2_113
.LBB2_63:                               # %if.else41
	movq	%r13, %rdi
	callq	get_attr_modrm
	movq	%rax, %r15
	movq	%r13, %rdi
	callq	get_attr_prefix_0f
	movq	%rax, %r12
	movq	%r13, %rdi
	callq	get_attr_i387
	movslq	40(%r13), %rcx
	movq	%rax, %rbx
	testq	%rcx, %rcx
	jns	.LBB2_65
# BB#64:                                # %cond.false.i434
	movq	%r13, %rdi
	callq	recog_memoized_1
	movq	%rax, %rcx
.LBB2_65:                               # %cond.end.i436
	movq	$1, 8(%rsp)             # 8-byte Folded Spill
	leaq	-602(%rcx), %rax
	andq	%r14, %rax
	cmpq	$11, %rax
	jb	.LBB2_73
# BB#66:                                # %cond.end.i436
	leaq	-590(%rcx), %rax
	andq	%r14, %rax
	cmpq	$5, %rax
	jb	.LBB2_73
# BB#67:                                # %cond.end.i436
	andq	%r14, %rcx
	cmpq	%r14, %rcx
	jne	.LBB2_72
# BB#68:                                # %sw.bb4.i442
	movq	32(%r13), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB2_72
# BB#69:                                # %land.lhs.true.i445
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB2_70
.LBB2_72:                               # %sw.default.i447
	movq	$0, 8(%rsp)             # 8-byte Folded Spill
.LBB2_73:                               # %get_attr_prefix_rep.exit449
	movq	%r13, %rdi
	callq	get_attr_prefix_data16
	movq	%rax, %r14
	movq	%r13, %rdi
	callq	get_attr_length_immediate
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	%r13, %rdi
	callq	get_attr_length_address
	addq	%r12, %r15
	addq	%rbx, %r15
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	%rcx, %r15
	addq	%r14, %r15
	movq	(%rsp), %rcx            # 8-byte Reload
	addq	%rcx, %r15
	leaq	1(%rax,%r15), %rbx
	jmp	.LBB2_113
.LBB2_75:                               # %sw.bb75
	movq	%r13, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$5, %rsi
	callq	register_operand
	testq	%r14, %rax
	movq	$2, %rbx
	jne	.LBB2_113
	jmp	.LBB2_52
.LBB2_45:                               # %cond.end.i
	movq	%r13, %r15
	andq	%r14, %rcx
	cmpq	%r14, %rcx
	jne	.LBB2_48
# BB#46:                                # %sw.bb4.i
	movq	32(%r15), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB2_48
# BB#47:                                # %land.lhs.true.i
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB2_106
.LBB2_48:                               # %sw.default.i
	xorq	%r12, %r12
	movq	%r15, %r13
	jmp	.LBB2_49
.LBB2_51:                               # %sw.bb19
	movq	%r13, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB2_113
.LBB2_52:                               # %if.else23
	movq	%r13, %rdi
	callq	get_attr_modrm
	movq	%rax, %rbx
	movq	%r13, %rdi
	callq	get_attr_prefix_0f
	movq	%rax, %r15
	movq	%r13, %rdi
	callq	get_attr_i387
	movslq	40(%r13), %rcx
	movq	%r13, 8(%rsp)           # 8-byte Spill
	movq	%rax, %r12
	testq	%rcx, %rcx
	jns	.LBB2_54
# BB#53:                                # %cond.false.i414
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	recog_memoized_1
	movq	%rax, %rcx
.LBB2_54:                               # %cond.end.i416
	movq	$1, %r13
	leaq	-602(%rcx), %rax
	andq	%r14, %rax
	cmpq	$11, %rax
	jb	.LBB2_60
# BB#55:                                # %cond.end.i416
	leaq	-590(%rcx), %rax
	andq	%r14, %rax
	cmpq	$5, %rax
	jb	.LBB2_60
# BB#56:                                # %cond.end.i416
	andq	%r14, %rcx
	cmpq	%r14, %rcx
	jne	.LBB2_59
# BB#57:                                # %sw.bb4.i422
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	32(%rax), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB2_59
# BB#58:                                # %land.lhs.true.i425
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB2_76
.LBB2_59:                               # %sw.default.i427
	xorq	%r13, %r13
.LBB2_60:                               # %get_attr_prefix_rep.exit429
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_prefix_data16
	movq	%rax, %r14
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_length_immediate
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	get_attr_length_address
	addq	%r15, %rbx
	addq	%r12, %rbx
	addq	%r13, %rbx
	addq	%r14, %rbx
	movq	(%rsp), %rcx            # 8-byte Reload
	addq	%rcx, %rbx
	leaq	1(%rax,%rbx), %rbx
	jmp	.LBB2_113
.LBB2_111:                              # %sw.bb269
	xorq	%rbx, %rbx
	jmp	.LBB2_113
.LBB2_110:                              # %sw.bb268
	movq	$3, %rbx
	jmp	.LBB2_113
.LBB2_89:                               # %if.then.i506
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_prefix_rep, %rcx
	movq	$20358, %rdx            # imm = 0x4F86
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB2_70:                               # %if.then.i446
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_prefix_rep, %rcx
	movq	$20358, %rdx            # imm = 0x4F86
.LBB2_71:                               # %if.then.i446
	movq	%r13, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB2_106:                              # %if.then.i
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_prefix_rep, %rcx
	movq	$20358, %rdx            # imm = 0x4F86
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB2_76:                               # %if.then.i426
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_prefix_rep, %rcx
	movq	$20358, %rdx            # imm = 0x4F86
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp27:
	.size	insn_default_length, .Ltmp27-insn_default_length
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI2_0:
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_75
	.quad	.LBB2_24
	.quad	.LBB2_75
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_74
	.quad	.LBB2_112
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_74
	.quad	.LBB2_112
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_75
	.quad	.LBB2_24
	.quad	.LBB2_75
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_74
	.quad	.LBB2_112
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_74
	.quad	.LBB2_112
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_74
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_74
	.quad	.LBB2_24
	.quad	.LBB2_75
	.quad	.LBB2_24
	.quad	.LBB2_74
	.quad	.LBB2_112
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_75
	.quad	.LBB2_24
	.quad	.LBB2_74
	.quad	.LBB2_74
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_61
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_51
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_111
	.quad	.LBB2_15
	.quad	.LBB2_110
	.quad	.LBB2_24
	.quad	.LBB2_15
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_15
	.quad	.LBB2_15
	.quad	.LBB2_113
.LJTI2_1:
	.quad	.LBB2_113
	.quad	.LBB2_105
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_95
	.quad	.LBB2_93
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_92
	.quad	.LBB2_92
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_90
	.quad	.LBB2_90
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_88
	.quad	.LBB2_88
	.quad	.LBB2_88
	.quad	.LBB2_88
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_105
	.quad	.LBB2_87
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_105
	.quad	.LBB2_24
	.quad	.LBB2_105
	.quad	.LBB2_24
	.quad	.LBB2_105
	.quad	.LBB2_24
	.quad	.LBB2_105
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_24
	.quad	.LBB2_24
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_113
	.quad	.LBB2_112
	.quad	.LBB2_112
	.quad	.LBB2_105
	.quad	.LBB2_77
	.quad	.LBB2_24
	.quad	.LBB2_105
	.quad	.LBB2_77
	.quad	.LBB2_24
	.quad	.LBB2_105
	.quad	.LBB2_77
	.quad	.LBB2_24
	.quad	.LBB2_105
	.quad	.LBB2_77
	.quad	.LBB2_24
	.quad	.LBB2_105
	.quad	.LBB2_105
	.quad	.LBB2_105
	.quad	.LBB2_105
	.quad	.LBB2_105
	.quad	.LBB2_105
	.quad	.LBB2_113

	.text
	.globl	get_attr_modrm
	.align	16, 0x90
	.type	get_attr_modrm,@function
get_attr_modrm:                         # @get_attr_modrm
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp32:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp33:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp34:
	.cfi_def_cfa_offset 32
.Ltmp35:
	.cfi_offset %rbx, -32
.Ltmp36:
	.cfi_offset %r14, -24
.Ltmp37:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB3_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB3_2:                                # %cond.end
	xorq	%r14, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$804, %rdx              # imm = 0x324
	jg	.LBB3_105
# BB#3:                                 # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$637, %rax              # imm = 0x27D
	ja	.LBB3_106
# BB#4:                                 # %cond.end
	jmpq	*.LJTI3_0(,%rax,8)
.LBB3_99:                               # %sw.bb417
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_100
# BB#101:                               # %sw.bb417
	movabsq	$1, %r14
	jmp	.LBB3_107
.LBB3_105:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$805, %rax              # imm = 0x325
	je	.LBB3_107
	jmp	.LBB3_106
.LBB3_14:                               # %sw.bb25
	movq	%rbx, %rdi
	callq	get_attr_i387
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB3_15
# BB#16:                                # %sw.bb25
	movabsq	$1, %r14
	jmp	.LBB3_107
.LBB3_100:
	movabsq	$0, %r14
	jmp	.LBB3_107
.LBB3_15:
	movabsq	$0, %r14
	jmp	.LBB3_107
.LBB3_90:                               # %sw.bb392
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB3_91
# BB#92:                                # %sw.bb392
	movabsq	$1, %r14
	jmp	.LBB3_107
.LBB3_80:                               # %sw.bb330
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB3_8
	jmp	.LBB3_107
.LBB3_44:                               # %sw.bb145
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB3_45
# BB#46:                                # %sw.bb145
	movabsq	$1, %r14
	jmp	.LBB3_107
.LBB3_29:                               # %sw.bb86
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB3_22
.LBB3_26:                               # %sw.bb62
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB3_28:                               # %land.lhs.true75
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	jmp	.LBB3_22
.LBB3_20:                               # %sw.bb38
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB3_21:                               # %sw.bb38
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	jmp	.LBB3_22
.LBB3_74:                               # %sw.bb290
	movq	%rbx, %rdi
	callq	extract_insn_cached
	jmp	.LBB3_8
.LBB3_87:                               # %sw.bb387
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB3_88
# BB#89:                                # %sw.bb387
	movabsq	$1, %r14
	jmp	.LBB3_107
.LBB3_35:                               # %sw.bb123
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB3_36
# BB#37:                                # %sw.bb123
	movabsq	$1, %r14
	jmp	.LBB3_107
.LBB3_30:                               # %sw.bb97
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB3_22:                               # %sw.bb38
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB3_23
	jmp	.LBB3_106
.LBB3_91:
	movabsq	$0, %r14
	jmp	.LBB3_107
.LBB3_66:                               # %sw.bb241
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB3_77:                               # %if.then305
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB3_8
	jmp	.LBB3_106
.LBB3_38:                               # %sw.bb129
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r14
	je	.LBB3_40
# BB#39:                                # %sw.bb129
	movq	%rcx, %r14
.LBB3_40:                               # %sw.bb129
	movl	which_alternative(%rip), %edx
	testq	%rdx, %rdx
	jne	.LBB3_42
# BB#41:                                # %sw.bb129
	movq	%rcx, %rax
.LBB3_42:                               # %sw.bb129
	andq	%rax, %r14
	notq	%r14
	andq	$1, %r14
	jmp	.LBB3_107
.LBB3_31:                               # %sw.bb108
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	jne	.LBB3_106
.LBB3_23:                               # %land.lhs.true41
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	register_operand
	testq	%r15, %rax
	jne	.LBB3_107
# BB#24:                                # %lor.lhs.false44
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	register_operand
	jmp	.LBB3_11
.LBB3_45:
	movabsq	$0, %r14
	jmp	.LBB3_107
.LBB3_49:                               # %sw.bb171
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB3_106
	jmp	.LBB3_50
.LBB3_96:                               # %sw.bb410
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_97
# BB#98:                                # %sw.bb410
	movabsq	$1, %r14
	jmp	.LBB3_107
.LBB3_88:
	movabsq	$0, %r14
	jmp	.LBB3_107
.LBB3_36:
	movabsq	$0, %r14
	jmp	.LBB3_107
.LBB3_102:                              # %sw.bb422
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB3_106
# BB#103:                               # %land.lhs.true426
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB3_106
# BB#104:                               # %if.then432
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_modrm, %rcx
	movq	$16766, %rdx            # imm = 0x417E
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB3_81:                               # %sw.bb341
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$9, %rax
	ja	.LBB3_85
# BB#82:                                # %sw.bb341
	jmpq	*.LJTI3_1(,%rax,8)
.LBB3_83:                               # %if.then346
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_60
# BB#84:                                # %lor.lhs.false348
	movq	recog_data+8(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	jmp	.LBB3_59
.LBB3_75:                               # %sw.bb298
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_107
# BB#76:                                # %if.else301
	leaq	-1(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jbe	.LBB3_77
# BB#78:                                # %if.else316
	cmpq	$3, %rax
	je	.LBB3_107
# BB#79:                                # %if.else319
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB3_73
	jmp	.LBB3_106
.LBB3_67:                               # %sw.bb252
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB3_106
# BB#68:                                # %sw.bb252
	cmpq	$3, %rax
	jne	.LBB3_71
# BB#69:                                # %land.lhs.true254
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB3_73
# BB#70:                                # %lor.lhs.false258
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB3_106
	jmp	.LBB3_73
.LBB3_64:                               # %sw.bb228
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB3_106
# BB#65:                                # %land.lhs.true231
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB3_106
	jmp	.LBB3_8
.LBB3_63:                               # %sw.bb221
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB3_106
.LBB3_50:                               # %land.lhs.true173
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB3_106
	jmp	.LBB3_107
.LBB3_51:                               # %sw.bb178
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_52
# BB#55:                                # %if.else193
	leaq	-1(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jb	.LBB3_107
# BB#56:                                # %if.else198
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB3_106
# BB#57:                                # %land.lhs.true208
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_60
# BB#58:                                # %lor.lhs.false210
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
.LBB3_59:                               # %lor.lhs.false210
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB3_106
.LBB3_60:                               # %land.lhs.true213
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	movq	%rax, %rdi
	jmp	.LBB3_61
.LBB3_47:                               # %sw.bb153
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB3_107
# BB#48:                                # %lor.lhs.false159
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jbe	.LBB3_8
	jmp	.LBB3_106
.LBB3_43:                               # %sw.bb135
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB3_8
	jmp	.LBB3_106
.LBB3_32:                               # %sw.bb119
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB3_33
# BB#34:                                # %sw.bb119
	movabsq	$1, %r14
	jmp	.LBB3_107
.LBB3_27:                               # %sw.bb73
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB3_106
	jmp	.LBB3_28
.LBB3_25:                               # %sw.bb49
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB3_21
	jmp	.LBB3_106
.LBB3_93:                               # %sw.bb397
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_107
# BB#94:                                # %sw.bb397
	cmpq	$2, %rax
	je	.LBB3_107
# BB#95:                                # %sw.bb397
	cmpq	$1, %rax
	jmp	.LBB3_106
.LBB3_17:                               # %sw.bb30
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_18
# BB#19:                                # %sw.bb30
	movabsq	$1, %r14
	jmp	.LBB3_107
.LBB3_12:                               # %sw.bb12
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB3_106
# BB#13:                                # %land.lhs.true14
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB3_7
.LBB3_5:                                # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB3_106
# BB#6:                                 # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB3_7:                                # %land.lhs.true
	callq	const0_operand
	testq	%r15, %rax
	jne	.LBB3_8
	jmp	.LBB3_106
.LBB3_97:
	movabsq	$0, %r14
	jmp	.LBB3_107
.LBB3_85:                               # %land.lhs.true374
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_8
# BB#86:                                # %lor.lhs.false376
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB3_54
.LBB3_33:
	movabsq	$0, %r14
	jmp	.LBB3_107
.LBB3_18:
	movabsq	$0, %r14
	jmp	.LBB3_107
.LBB3_52:                               # %if.then180
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB3_8
# BB#53:                                # %lor.lhs.false182
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
.LBB3_54:                               # %lor.lhs.false182
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB3_106
.LBB3_8:                                # %land.lhs.true6
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	callq	register_operand
	testq	%r15, %rax
	je	.LBB3_106
# BB#9:                                 # %land.lhs.true9
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
.LBB3_10:                               # %land.lhs.true9
	callq	immediate_operand
.LBB3_11:                               # %land.lhs.true9
	testq	%r15, %rax
	jne	.LBB3_107
	jmp	.LBB3_106
.LBB3_71:                               # %land.lhs.true276
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB3_73
# BB#72:                                # %land.lhs.true276
	cmpq	$2, %rax
	je	.LBB3_106
.LBB3_73:                               # %land.lhs.true282
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	xorq	%r14, %r14
.LBB3_61:                               # %land.lhs.true213
	callq	register_operand
	testq	%r15, %rax
	je	.LBB3_106
# BB#62:                                # %land.lhs.true216
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	jmp	.LBB3_10
.LBB3_106:                              # %sw.default
	movq	$1, %r14
.LBB3_107:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp38:
	.size	get_attr_modrm, .Ltmp38-get_attr_modrm
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI3_0:
	.quad	.LBB3_102
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_90
	.quad	.LBB3_90
	.quad	.LBB3_90
	.quad	.LBB3_87
	.quad	.LBB3_87
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_81
	.quad	.LBB3_80
	.quad	.LBB3_80
	.quad	.LBB3_107
	.quad	.LBB3_90
	.quad	.LBB3_90
	.quad	.LBB3_75
	.quad	.LBB3_80
	.quad	.LBB3_80
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_74
	.quad	.LBB3_106
	.quad	.LBB3_90
	.quad	.LBB3_90
	.quad	.LBB3_67
	.quad	.LBB3_107
	.quad	.LBB3_74
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_66
	.quad	.LBB3_66
	.quad	.LBB3_80
	.quad	.LBB3_80
	.quad	.LBB3_106
	.quad	.LBB3_66
	.quad	.LBB3_64
	.quad	.LBB3_74
	.quad	.LBB3_74
	.quad	.LBB3_74
	.quad	.LBB3_106
	.quad	.LBB3_63
	.quad	.LBB3_90
	.quad	.LBB3_87
	.quad	.LBB3_87
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_51
	.quad	.LBB3_80
	.quad	.LBB3_80
	.quad	.LBB3_107
	.quad	.LBB3_49
	.quad	.LBB3_49
	.quad	.LBB3_47
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_44
	.quad	.LBB3_44
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_44
	.quad	.LBB3_44
	.quad	.LBB3_44
	.quad	.LBB3_44
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_43
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_38
	.quad	.LBB3_38
	.quad	.LBB3_38
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_35
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_32
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_99
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_31
	.quad	.LBB3_30
	.quad	.LBB3_30
	.quad	.LBB3_30
	.quad	.LBB3_30
	.quad	.LBB3_31
	.quad	.LBB3_31
	.quad	.LBB3_29
	.quad	.LBB3_29
	.quad	.LBB3_29
	.quad	.LBB3_29
	.quad	.LBB3_29
	.quad	.LBB3_29
	.quad	.LBB3_27
	.quad	.LBB3_26
	.quad	.LBB3_26
	.quad	.LBB3_26
	.quad	.LBB3_26
	.quad	.LBB3_26
	.quad	.LBB3_25
	.quad	.LBB3_20
	.quad	.LBB3_20
	.quad	.LBB3_20
	.quad	.LBB3_26
	.quad	.LBB3_20
	.quad	.LBB3_20
	.quad	.LBB3_20
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_93
	.quad	.LBB3_96
	.quad	.LBB3_96
	.quad	.LBB3_17
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_99
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_106
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_106
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_14
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_99
	.quad	.LBB3_106
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_35
	.quad	.LBB3_35
	.quad	.LBB3_35
	.quad	.LBB3_107
	.quad	.LBB3_107
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_12
	.quad	.LBB3_5
.LJTI3_1:
	.quad	.LBB3_107
	.quad	.LBB3_83
	.quad	.LBB3_107
	.quad	.LBB3_85
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106
	.quad	.LBB3_106

	.text
	.globl	get_attr_prefix_0f
	.align	16, 0x90
	.type	get_attr_prefix_0f,@function
get_attr_prefix_0f:                     # @get_attr_prefix_0f
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp43:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp44:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp45:
	.cfi_def_cfa_offset 32
.Ltmp46:
	.cfi_offset %rbx, -32
.Ltmp47:
	.cfi_offset %r14, -24
.Ltmp48:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB4_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB4_2:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$32, %rdx
	jg	.LBB4_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB4_45
# BB#4:                                 # %sw.bb343
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB4_45
# BB#5:                                 # %land.lhs.true350
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB4_45
# BB#6:                                 # %if.then356
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_prefix_0f, %rcx
	movq	$20323, %rdx            # imm = 0x4F63
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB4_7:                                # %cond.end
	movq	$1, %rbx
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$613, %rdx              # imm = 0x265
	jg	.LBB4_77
# BB#8:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$558, %rdx              # imm = 0x22E
	jg	.LBB4_75
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$523, %rdx              # imm = 0x20B
	jg	.LBB4_69
# BB#10:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$485, %rdx              # imm = 0x1E5
	jg	.LBB4_55
# BB#11:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$424, %rdx              # imm = 0x1A8
	jg	.LBB4_52
# BB#12:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$417, %rdx              # imm = 0x1A1
	jg	.LBB4_88
# BB#13:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$406, %rdx              # imm = 0x196
	jg	.LBB4_51
# BB#14:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$289, %rdx              # imm = 0x121
	jg	.LBB4_46
# BB#15:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$248, %rdx
	jg	.LBB4_93
# BB#16:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$44, %rdx
	jg	.LBB4_19
# BB#17:                                # %cond.end
	addq	$-33, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$4, %rcx
	ja	.LBB4_45
# BB#18:                                # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI4_4(,%rcx,8)
.LBB4_77:                               # %cond.end
	addq	$-614, %rax             # imm = 0xFFFFFFFFFFFFFD9A
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$219, %rcx
	ja	.LBB4_45
# BB#78:                                # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI4_0(,%rcx,8)
.LBB4_82:                               # %sw.bb13
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	je	.LBB4_84
# BB#83:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_75:                               # %cond.end
	addq	$-559, %rax             # imm = 0xFFFFFFFFFFFFFDD1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$4, %rcx
	ja	.LBB4_45
# BB#76:                                # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI4_1(,%rcx,8)
.LBB4_137:                              # %sw.bb231
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB4_138
# BB#139:                               # %sw.bb231
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_69:                               # %cond.end
	addq	$-524, %rax             # imm = 0xFFFFFFFFFFFFFDF4
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$16, %rcx
	ja	.LBB4_45
# BB#70:                                # %cond.end
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$67657, %rdx            # imm = 0x10849
	movq	$1, %rbx
	jne	.LBB4_146
# BB#71:                                # %cond.end
	shlq	%cl, %rax
	testq	$36, %rax
	je	.LBB4_72
# BB#85:                                # %sw.bb23
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB4_86
# BB#87:                                # %sw.bb23
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_55:                               # %cond.end
	leaq	-486(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$4, %rdx
	jb	.LBB4_146
# BB#56:                                # %cond.end
	andq	%rcx, %rax
	cmpq	$490, %rax              # imm = 0x1EA
	je	.LBB4_58
# BB#57:                                # %cond.end
	cmpq	$491, %rax              # imm = 0x1EB
	jne	.LBB4_45
.LBB4_58:                               # %sw.bb241
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	insn_addresses_(%rip), %rax
	xorq	%rbx, %rbx
	testq	%rax, %rax
	je	.LBB4_62
# BB#59:                                # %cond.true243
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB4_61
# BB#60:                                # %cond.true245
	movq	8(%rcx), %rcx
.LBB4_61:                               # %cond.end249
	movslq	8(%rcx), %rcx
	movl	32(%rax,%rcx,4), %ebx
.LBB4_62:                               # %cond.end256
	movq	%r14, %rdi
	callq	insn_current_reference_address
	subq	%rax, %rbx
	movq	$32, %rcx
	shlq	%cl, %rbx
	movq	$32, %rcx
	sarq	%cl, %rbx
	cmpq	$-128, %rbx
	jl	.LBB4_68
# BB#63:                                # %land.lhs.true260
	movq	insn_addresses_(%rip), %rax
	xorq	%rbx, %rbx
	testq	%rax, %rax
	movabsq	$0, %r15
	je	.LBB4_67
# BB#64:                                # %cond.true262
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB4_66
# BB#65:                                # %cond.true266
	movq	8(%rcx), %rcx
.LBB4_66:                               # %cond.end271
	movslq	8(%rcx), %rcx
	movl	32(%rax,%rcx,4), %r15d
.LBB4_67:                               # %cond.end281
	movq	%r14, %rdi
	callq	insn_current_reference_address
	subq	%rax, %r15
	movq	$32, %rcx
	shlq	%cl, %r15
	movq	$32, %rcx
	sarq	%cl, %r15
	cmpq	$124, %r15
	jl	.LBB4_146
.LBB4_68:                               # %if.else287
	movq	$1, %rbx
	jmp	.LBB4_146
.LBB4_52:                               # %cond.end
	leaq	-426(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$2, %rdx
	jb	.LBB4_89
# BB#53:                                # %cond.end
	andq	%rcx, %rax
	cmpq	$425, %rax              # imm = 0x1A9
	jmp	.LBB4_54
.LBB4_138:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_88:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$418, %rax              # imm = 0x1A2
	jne	.LBB4_45
.LBB4_89:                               # %sw.bb27
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	xorq	%rbx, %rbx
	jmp	.LBB4_146
.LBB4_72:                               # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$33792, %rax            # imm = 0x8400
	je	.LBB4_45
# BB#73:                                # %sw.bb19
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB4_74
.LBB4_84:                               # %sw.bb19
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_51:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$407, %rax              # imm = 0x197
.LBB4_54:                               # %cond.end
	movq	$1, %rbx
	jne	.LBB4_45
	jmp	.LBB4_146
.LBB4_86:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_74:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_46:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$290, %rax              # imm = 0x122
	je	.LBB4_90
# BB#47:                                # %cond.end
	cmpq	$292, %rax              # imm = 0x124
	je	.LBB4_49
# BB#48:                                # %cond.end
	cmpq	$296, %rax              # imm = 0x128
	jne	.LBB4_45
	jmp	.LBB4_49
.LBB4_93:                               # %cond.end
	addq	$-249, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$4, %rcx
	jae	.LBB4_45
# BB#94:                                # %sw.bb39
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB4_95
# BB#96:                                # %sw.bb39
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_79:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB4_80
# BB#81:                                # %sw.bb
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_90:                               # %sw.bb31
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB4_91
# BB#92:                                # %sw.bb31
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_19:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$167, %rdx
	jg	.LBB4_41
# BB#20:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$154, %rdx
	jg	.LBB4_39
# BB#21:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$50, %rdx
	jg	.LBB4_24
# BB#22:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$45, %rax
	jne	.LBB4_45
# BB#23:                                # %sw.bb211
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%rbx, %rax
	cmpq	$6, %rax
	sbbq	%rbx, %rbx
	jmp	.LBB4_145
.LBB4_95:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_80:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_91:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_41:                               # %cond.end
	addq	$-168, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$10, %rcx
	ja	.LBB4_45
# BB#42:                                # %cond.end
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$585, %rdx              # imm = 0x249
	jne	.LBB4_49
# BB#43:                                # %cond.end
	shlq	%cl, %rax
	testq	$1170, %rax             # imm = 0x492
	jmp	.LBB4_44
.LBB4_39:                               # %cond.end
	addq	$-155, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$6, %rcx
	ja	.LBB4_45
# BB#40:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$99, %rax
.LBB4_44:                               # %cond.end
	movq	$1, %rbx
	jne	.LBB4_146
	jmp	.LBB4_45
.LBB4_24:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$59, %rdx
	jg	.LBB4_34
# BB#25:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$51, %rax
	jne	.LBB4_45
# BB#26:                                # %sw.bb176
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB4_29
# BB#27:                                # %lor.lhs.false180
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB4_45
# BB#28:                                # %land.lhs.true184
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB4_45
.LBB4_29:                               # %land.lhs.true188
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB4_31
# BB#30:                                # %lor.lhs.false194
	movq	recog_data+8(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB4_45
.LBB4_31:                               # %land.lhs.true197
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB4_45
# BB#32:                                # %land.lhs.true201
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB4_45
# BB#33:                                # %land.lhs.true201
	cmpq	$2, %rax
	jne	.LBB4_146
	jmp	.LBB4_45
.LBB4_34:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$82, %rdx
	jg	.LBB4_37
# BB#35:                                # %cond.end
	addq	$-60, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$12, %rax
	ja	.LBB4_45
# BB#36:                                # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI4_3(,%rax,8)
.LBB4_126:                              # %sw.bb149
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	jne	.LBB4_127
# BB#128:                               # %sw.bb149
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_37:                               # %cond.end
	addq	$-83, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$60, %rax
	ja	.LBB4_45
# BB#38:                                # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI4_2(,%rax,8)
.LBB4_100:                              # %sw.bb61
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB4_101
# BB#102:                               # %sw.bb61
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_49:                               # %sw.bb55
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB4_99
# BB#50:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_129:                              # %sw.bb154
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	movq	$1, %rbx
	je	.LBB4_146
# BB#130:                               # %sw.bb154
	cmpq	$3, %rax
	jne	.LBB4_135
# BB#131:                               # %lor.lhs.false156
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB4_45
# BB#132:                               # %land.lhs.true160
	movl	x86_qimode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB4_45
# BB#133:                               # %land.lhs.true164
	movq	$1, %rbx
	cmpq	$3, %rax
	je	.LBB4_146
# BB#134:                               # %land.lhs.true164
	cmpq	$5, %rax
	je	.LBB4_146
.LBB4_135:                              # %lor.lhs.false168
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB4_45
# BB#136:                               # %lor.lhs.false168
	cmpq	$2, %rax
	je	.LBB4_146
.LBB4_45:                               # %sw.default
	xorq	%rbx, %rbx
.LBB4_146:                              # %return
	movq	%rbx, %rax
.LBB4_147:                              # %return
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB4_122:                              # %sw.bb143
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r15, %rax
	movq	$1, %rbx
	je	.LBB4_146
# BB#123:                               # %lor.lhs.false145
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB4_124
# BB#125:                               # %lor.lhs.false145
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_127:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_115:                              # %sw.bb123
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jb	.LBB4_117
# BB#116:                               # %sw.bb123
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	movq	$1, %rbx
	jb	.LBB4_146
.LBB4_117:                              # %lor.lhs.false133
	cmpq	$1, %rax
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	jbe	.LBB4_119
# BB#118:                               # %lor.lhs.false133
	movq	%rsi, %rdx
.LBB4_119:                              # %lor.lhs.false133
	movabsq	$4294967294, %rdi       # imm = 0xFFFFFFFE
	andq	%rdi, %rax
	cmpq	$2, %rax
	jne	.LBB4_121
# BB#120:                               # %lor.lhs.false133
	movq	%rsi, %rcx
.LBB4_121:                              # %lor.lhs.false133
	andq	%rcx, %rdx
	movq	%rdx, %rax
	jmp	.LBB4_147
.LBB4_113:                              # %sw.bb109
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-5, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %rbx
	jb	.LBB4_146
# BB#114:                               # %land.lhs.true113
	cmpq	$4, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	jmp	.LBB4_147
.LBB4_107:                              # %sw.bb81
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB4_109
# BB#108:                               # %sw.bb81
	leaq	-5(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	movq	$1, %rbx
	jb	.LBB4_146
.LBB4_109:                              # %lor.lhs.false95
	cmpq	$2, %rax
	jbe	.LBB4_110
# BB#111:                               # %lor.lhs.false95
	movabsq	$1, %rcx
	jmp	.LBB4_112
.LBB4_103:                              # %sw.bb65
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB4_104
# BB#105:                               # %sw.bb65
	movabsq	$1, %rcx
	jmp	.LBB4_106
.LBB4_140:                              # %sw.bb235
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rbx
	je	.LBB4_142
# BB#141:                               # %sw.bb235
	movq	%rcx, %rbx
.LBB4_142:                              # %sw.bb235
	movl	which_alternative(%rip), %edx
	testq	%rdx, %rdx
	jne	.LBB4_144
# BB#143:                               # %sw.bb235
	movq	%rcx, %rax
.LBB4_144:                              # %sw.bb235
	andq	%rax, %rbx
	notq	%rbx
.LBB4_145:                              # %return
	andq	$1, %rbx
	jmp	.LBB4_146
.LBB4_97:                               # %sw.bb45
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jbe	.LBB4_98
.LBB4_99:                               # %sw.bb55
	movabsq	$1, %rbx
	jmp	.LBB4_146
.LBB4_101:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_124:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.LBB4_110:
	movabsq	$0, %rcx
.LBB4_112:                              # %lor.lhs.false95
	addq	$-9, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	sbbq	%rbx, %rbx
	andq	%rcx, %rbx
	jmp	.LBB4_146
.LBB4_104:
	movabsq	$0, %rcx
.LBB4_106:                              # %sw.bb65
	addq	$-5, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	sbbq	%rax, %rax
	andq	%rcx, %rax
	jmp	.LBB4_147
.LBB4_98:
	movabsq	$0, %rbx
	jmp	.LBB4_146
.Ltmp49:
	.size	get_attr_prefix_0f, .Ltmp49-get_attr_prefix_0f
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI4_0:
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_82
	.quad	.LBB4_45
	.quad	.LBB4_82
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_79
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_146
.LJTI4_1:
	.quad	.LBB4_137
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_137
	.quad	.LBB4_146
.LJTI4_2:
	.quad	.LBB4_115
	.quad	.LBB4_113
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_107
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_103
	.quad	.LBB4_103
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_100
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_100
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_100
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_140
	.quad	.LBB4_140
	.quad	.LBB4_140
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_49
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_97
	.quad	.LBB4_100
	.quad	.LBB4_45
	.quad	.LBB4_146
.LJTI4_3:
	.quad	.LBB4_129
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_146
	.quad	.LBB4_126
	.quad	.LBB4_126
	.quad	.LBB4_45
	.quad	.LBB4_45
	.quad	.LBB4_146
	.quad	.LBB4_126
	.quad	.LBB4_122
.LJTI4_4:
	.quad	.LBB4_137
	.quad	.LBB4_146
	.quad	.LBB4_45
	.quad	.LBB4_137
	.quad	.LBB4_146

	.text
	.globl	get_attr_i387
	.align	16, 0x90
	.type	get_attr_i387,@function
get_attr_i387:                          # @get_attr_i387
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp54:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp55:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp56:
	.cfi_def_cfa_offset 32
.Ltmp57:
	.cfi_offset %rbx, -32
.Ltmp58:
	.cfi_offset %r14, -24
.Ltmp59:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB5_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB5_2:                                # %cond.end
	movq	$1, %rbx
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB5_23
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB5_21
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$364, %rdx              # imm = 0x16C
	jg	.LBB5_18
# BB#5:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB5_10
# BB#6:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB5_20
# BB#7:                                 # %sw.bb91
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB5_20
# BB#8:                                 # %land.lhs.true95
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB5_20
# BB#9:                                 # %if.then101
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_i387, %rcx
	movq	$13438, %rdx            # imm = 0x347E
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB5_23:                               # %cond.end
	leaq	-618(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$3, %rdx
	jb	.LBB5_55
# BB#24:                                # %cond.end
	addq	$-621, %rax             # imm = 0xFFFFFFFFFFFFFD93
	andq	%rcx, %rax
	cmpq	$2, %rax
	jb	.LBB5_59
	jmp	.LBB5_20
.LBB5_21:                               # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$56, %rax
	ja	.LBB5_20
# BB#22:                                # %cond.end
	jmpq	*.LJTI5_0(,%rax,8)
.LBB5_31:                               # %sw.bb10
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB5_59
# BB#32:                                # %lor.lhs.false13
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB5_59
# BB#33:                                # %lor.lhs.false16
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB5_58
# BB#34:
	movabsq	$0, %rbx
	movq	%rbx, %rax
	jmp	.LBB5_30
.LBB5_18:                               # %cond.end
	addq	$-365, %rax             # imm = 0xFFFFFFFFFFFFFE93
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$27, %rcx
	ja	.LBB5_20
# BB#19:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$267911679, %rax        # imm = 0xFF801FF
	jne	.LBB5_59
	jmp	.LBB5_20
.LBB5_10:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB5_16
# BB#11:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$36, %rax
	ja	.LBB5_20
# BB#12:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$39891501056, %rcx      # imm = 0x949B80000
	testq	%rcx, %rsi
	jne	.LBB5_59
# BB#13:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	jne	.LBB5_14
	jmp	.LBB5_20
.LBB5_16:                               # %cond.end
	addq	$-90, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$94, %rcx
	ja	.LBB5_20
# BB#17:                                # %cond.end
	jmpq	*.LJTI5_1(,%rcx,8)
.LBB5_14:                               # %sw.bb86
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB5_58
# BB#15:
	movabsq	$0, %rbx
	movq	%rbx, %rax
	jmp	.LBB5_30
.LBB5_20:                               # %sw.default
	xorq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB5_30
.LBB5_55:                               # %sw.bb72
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
.LBB5_56:                               # %return
	sbbq	%rbx, %rbx
	andq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB5_30
.LBB5_25:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB5_59
# BB#26:                                # %lor.lhs.false
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB5_59
# BB#27:                                # %lor.lhs.false7
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB5_28
# BB#29:                                # %lor.lhs.false7
	movabsq	$1, %rax
	jmp	.LBB5_30
.LBB5_40:                               # %sw.bb33
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB5_59
# BB#41:                                # %lor.lhs.false36
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB5_59
# BB#42:                                # %lor.lhs.false39
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB5_58
# BB#43:
	movabsq	$0, %rbx
	movq	%rbx, %rax
	jmp	.LBB5_30
.LBB5_49:                               # %sw.bb57
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB5_59
# BB#50:                                # %lor.lhs.false60
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB5_59
# BB#51:                                # %lor.lhs.false63
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB5_58
# BB#52:
	movabsq	$0, %rbx
	movq	%rbx, %rax
	jmp	.LBB5_30
.LBB5_44:                               # %sw.bb44
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB5_59
# BB#45:                                # %lor.lhs.false47
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB5_47
# BB#46:                                # %land.lhs.true49
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB5_59
.LBB5_47:                               # %lor.lhs.false52
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB5_58
# BB#48:
	movabsq	$0, %rbx
	movq	%rbx, %rax
	jmp	.LBB5_30
.LBB5_35:                               # %sw.bb21
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB5_59
# BB#36:                                # %lor.lhs.false24
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB5_38
# BB#37:                                # %land.lhs.true
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB5_59
.LBB5_38:                               # %lor.lhs.false28
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB5_58
# BB#39:
	movabsq	$0, %rbx
	movq	%rbx, %rax
	jmp	.LBB5_30
.LBB5_57:                               # %sw.bb78
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jmp	.LBB5_56
.LBB5_28:
	movabsq	$0, %rax
	jmp	.LBB5_30
.LBB5_53:                               # %sw.bb68
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB5_54
.LBB5_58:                               # %sw.bb86
	movabsq	$1, %rbx
.LBB5_59:                               # %return
	movq	%rbx, %rax
.LBB5_30:                               # %lor.lhs.false7
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB5_54:
	movabsq	$0, %rbx
	movq	%rbx, %rax
	jmp	.LBB5_30
.Ltmp60:
	.size	get_attr_i387, .Ltmp60-get_attr_i387
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI5_0:
	.quad	.LBB5_59
	.quad	.LBB5_14
	.quad	.LBB5_20
	.quad	.LBB5_59
	.quad	.LBB5_14
	.quad	.LBB5_20
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_49
	.quad	.LBB5_44
	.quad	.LBB5_20
	.quad	.LBB5_49
	.quad	.LBB5_49
	.quad	.LBB5_40
	.quad	.LBB5_35
	.quad	.LBB5_20
	.quad	.LBB5_40
	.quad	.LBB5_40
	.quad	.LBB5_40
	.quad	.LBB5_40
	.quad	.LBB5_31
	.quad	.LBB5_25
	.quad	.LBB5_31
	.quad	.LBB5_25
	.quad	.LBB5_31
	.quad	.LBB5_25
	.quad	.LBB5_31
	.quad	.LBB5_25
	.quad	.LBB5_31
	.quad	.LBB5_25
	.quad	.LBB5_31
	.quad	.LBB5_25
	.quad	.LBB5_31
	.quad	.LBB5_25
	.quad	.LBB5_14
	.quad	.LBB5_20
	.quad	.LBB5_59
	.quad	.LBB5_14
	.quad	.LBB5_20
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
.LJTI5_1:
	.quad	.LBB5_57
	.quad	.LBB5_59
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_57
	.quad	.LBB5_57
	.quad	.LBB5_59
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_57
	.quad	.LBB5_57
	.quad	.LBB5_57
	.quad	.LBB5_57
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_55
	.quad	.LBB5_20
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_14
	.quad	.LBB5_14
	.quad	.LBB5_53
	.quad	.LBB5_59
	.quad	.LBB5_20
	.quad	.LBB5_14
	.quad	.LBB5_59
	.quad	.LBB5_14
	.quad	.LBB5_59
	.quad	.LBB5_14
	.quad	.LBB5_59
	.quad	.LBB5_14
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_20
	.quad	.LBB5_20
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_59
	.quad	.LBB5_14
	.quad	.LBB5_14
	.quad	.LBB5_20
	.quad	.LBB5_14
	.quad	.LBB5_14
	.quad	.LBB5_20
	.quad	.LBB5_14
	.quad	.LBB5_14
	.quad	.LBB5_20
	.quad	.LBB5_14
	.quad	.LBB5_14
	.quad	.LBB5_20
	.quad	.LBB5_14
	.quad	.LBB5_14
	.quad	.LBB5_14
	.quad	.LBB5_14
	.quad	.LBB5_14
	.quad	.LBB5_14

	.text
	.globl	get_attr_prefix_rep
	.align	16, 0x90
	.type	get_attr_prefix_rep,@function
get_attr_prefix_rep:                    # @get_attr_prefix_rep
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp63:
	.cfi_def_cfa_offset 16
.Ltmp64:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB6_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB6_2:                                # %cond.end
	movq	$1, %rcx
	leaq	-602(%rax), %rsi
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %rsi
	cmpq	$11, %rsi
	jb	.LBB6_8
# BB#3:                                 # %cond.end
	leaq	-590(%rax), %rsi
	andq	%rdx, %rsi
	cmpq	$5, %rsi
	jae	.LBB6_4
.LBB6_8:                                # %return
	movq	%rcx, %rax
	popq	%rbx
	retq
.LBB6_4:                                # %cond.end
	andq	%rdx, %rax
	cmpq	%rdx, %rax
	jne	.LBB6_7
# BB#5:                                 # %sw.bb4
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB6_7
# BB#6:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB6_9
.LBB6_7:                                # %sw.default
	xorq	%rcx, %rcx
	jmp	.LBB6_8
.LBB6_9:                                # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_prefix_rep, %rcx
	movq	$20358, %rdx            # imm = 0x4F86
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp65:
	.size	get_attr_prefix_rep, .Ltmp65-get_attr_prefix_rep
	.cfi_endproc

	.globl	get_attr_prefix_data16
	.align	16, 0x90
	.type	get_attr_prefix_data16,@function
get_attr_prefix_data16:                 # @get_attr_prefix_data16
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp69:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp70:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp71:
	.cfi_def_cfa_offset 32
.Ltmp72:
	.cfi_offset %rbx, -24
.Ltmp73:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rdx
	testq	%rdx, %rdx
	jns	.LBB7_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	%rax, %rdx
.LBB7_2:                                # %cond.end
	movq	$1, %rax
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$616, %rsi              # imm = 0x268
	jg	.LBB7_58
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$5, %rsi
	jg	.LBB7_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	andq	%rax, %rdx
	cmpq	%rax, %rdx
	jne	.LBB7_61
# BB#5:                                 # %sw.bb16
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB7_61
# BB#6:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB7_61
# BB#7:                                 # %if.then25
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_prefix_data16, %rcx
	movq	$20460, %rdx            # imm = 0x4FEC
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB7_58:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jne	.LBB7_61
	jmp	.LBB7_62
.LBB7_8:                                # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$48, %rsi
	jg	.LBB7_11
# BB#9:                                 # %cond.end
	addq	$-6, %rdx
.LBB7_10:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$3, %rcx
	jb	.LBB7_62
	jmp	.LBB7_61
.LBB7_11:                               # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$108, %rsi
	jg	.LBB7_17
# BB#12:                                # %cond.end
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rdx
	cmpq	$58, %rdx
	ja	.LBB7_61
# BB#13:                                # %cond.end
	movq	$1, %rsi
	movq	%rdx, %rcx
	shlq	%cl, %rsi
	movabsq	$536491305610510336, %rcx # imm = 0x772000000000000
	testq	%rcx, %rsi
	jne	.LBB7_62
# BB#14:                                # %cond.end
	cmpq	$51, %rdx
	jne	.LBB7_61
# BB#15:                                # %sw.bb11
	movq	%rbx, %rdi
	callq	get_attr_mode
	andq	%r14, %rax
	cmpq	$3, %rax
	je	.LBB7_59
# BB#16:
	movabsq	$0, %rax
	jmp	.LBB7_62
.LBB7_17:                               # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$597, %rsi              # imm = 0x255
	jg	.LBB7_57
# BB#18:                                # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$585, %rsi              # imm = 0x249
	jg	.LBB7_56
# BB#19:                                # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$482, %rsi              # imm = 0x1E2
	jg	.LBB7_55
# BB#20:                                # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$472, %rsi              # imm = 0x1D8
	jg	.LBB7_60
# BB#21:                                # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$124, %rsi
	jg	.LBB7_23
# BB#22:                                # %cond.end
	addq	$-109, %rdx
	jmp	.LBB7_10
.LBB7_57:                               # %cond.end
	addq	$-598, %rdx             # imm = 0xFFFFFFFFFFFFFDAA
	jmp	.LBB7_27
.LBB7_56:                               # %cond.end
	addq	$-586, %rdx             # imm = 0xFFFFFFFFFFFFFDB6
.LBB7_27:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$2, %rcx
	jb	.LBB7_62
	jmp	.LBB7_61
.LBB7_55:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$483, %rdx              # imm = 0x1E3
	jne	.LBB7_61
	jmp	.LBB7_62
.LBB7_60:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$473, %rdx              # imm = 0x1D9
	je	.LBB7_62
	jmp	.LBB7_61
.LBB7_23:                               # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$164, %rsi
	jg	.LBB7_25
# BB#24:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$125, %rdx
	jne	.LBB7_61
	jmp	.LBB7_62
.LBB7_25:                               # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$214, %rsi
	jg	.LBB7_28
# BB#26:                                # %cond.end
	addq	$-165, %rdx
	jmp	.LBB7_27
.LBB7_28:                               # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$242, %rsi
	jg	.LBB7_32
# BB#29:                                # %cond.end
	leaq	-216(%rdx), %rsi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rsi
	cmpq	$3, %rsi
	jb	.LBB7_62
# BB#30:                                # %cond.end
	andq	%rcx, %rdx
	cmpq	$215, %rdx
	je	.LBB7_44
# BB#31:                                # %cond.end
	cmpq	$220, %rdx
	jne	.LBB7_61
	jmp	.LBB7_62
.LBB7_32:                               # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$251, %rsi
	jg	.LBB7_34
# BB#33:                                # %cond.end
	addq	$-243, %rdx
	jmp	.LBB7_10
.LBB7_34:                               # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$278, %rsi              # imm = 0x116
	jg	.LBB7_36
# BB#35:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$252, %rdx
	jne	.LBB7_61
	jmp	.LBB7_62
.LBB7_36:                               # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$458, %rsi              # imm = 0x1CA
	jg	.LBB7_53
# BB#37:                                # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$436, %rsi              # imm = 0x1B4
	jg	.LBB7_51
# BB#38:                                # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$411, %rsi              # imm = 0x19B
	jg	.LBB7_47
# BB#39:                                # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$398, %rsi              # imm = 0x18E
	jg	.LBB7_46
# BB#40:                                # %cond.end
	movq	$32, %rcx
	movq	%rdx, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$350, %rsi              # imm = 0x15E
	jg	.LBB7_45
# BB#41:                                # %cond.end
	addq	$-279, %rdx             # imm = 0xFFFFFFFFFFFFFEE9
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rdx, %rcx
	cmpq	$58, %rcx
	ja	.LBB7_61
# BB#42:                                # %cond.end
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$504405082411106313, %rsi # imm = 0x70001C000040009
	testq	%rsi, %rdx
	jne	.LBB7_62
# BB#43:                                # %cond.end
	cmpq	$17, %rcx
	jne	.LBB7_61
.LBB7_44:                               # %sw.bb5
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	jmp	.LBB7_62
.LBB7_53:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$459, %rdx              # imm = 0x1CB
	je	.LBB7_62
# BB#54:                                # %cond.end
	cmpq	$461, %rdx              # imm = 0x1CD
	jne	.LBB7_61
	jmp	.LBB7_62
.LBB7_51:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$437, %rdx              # imm = 0x1B5
	je	.LBB7_62
# BB#52:                                # %cond.end
	cmpq	$439, %rdx              # imm = 0x1B7
	jne	.LBB7_61
	jmp	.LBB7_62
.LBB7_47:                               # %cond.end
	leaq	-413(%rdx), %rsi
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rsi
	cmpq	$2, %rsi
	jb	.LBB7_62
# BB#48:                                # %cond.end
	andq	%rcx, %rdx
	cmpq	$412, %rdx              # imm = 0x19C
	jne	.LBB7_61
# BB#49:                                # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB7_50
.LBB7_59:                               # %sw.bb11
	movabsq	$1, %rax
	jmp	.LBB7_62
.LBB7_61:                               # %sw.default
	xorq	%rax, %rax
.LBB7_62:                               # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB7_46:                               # %cond.end
	addq	$-399, %rdx             # imm = 0xFFFFFFFFFFFFFE71
	jmp	.LBB7_27
.LBB7_45:                               # %cond.end
	addq	$-351, %rdx             # imm = 0xFFFFFFFFFFFFFEA1
	jmp	.LBB7_27
.LBB7_50:
	movabsq	$0, %rax
	jmp	.LBB7_62
.Ltmp74:
	.size	get_attr_prefix_data16, .Ltmp74-get_attr_prefix_data16
	.cfi_endproc

	.globl	get_attr_length_immediate
	.align	16, 0x90
	.type	get_attr_length_immediate,@function
get_attr_length_immediate:              # @get_attr_length_immediate
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp80:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp81:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp82:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp83:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp84:
	.cfi_def_cfa_offset 48
.Ltmp85:
	.cfi_offset %rbx, -40
.Ltmp86:
	.cfi_offset %r12, -32
.Ltmp87:
	.cfi_offset %r14, -24
.Ltmp88:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB8_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB8_2:                                # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$674, %rax              # imm = 0x2A2
	ja	.LBB8_172
# BB#3:                                 # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI8_0(,%rax,8)
.LBB8_162:                              # %sw.bb605
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
.LBB8_14:                               # %if.then29
	movq	$1, %rsi
.LBB8_15:                               # %if.then29
	movq	%r14, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	jmp	ix86_attr_length_immediate_default  # TAILCALL
.LBB8_22:                               # %sw.bb52
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_i387
	andq	%r15, %rax
	xorq	%rbx, %rbx
	cmpq	$1, %rax
	je	.LBB8_173
# BB#23:                                # %if.else56
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$13899, %rsi            # imm = 0x364B
	jmp	.LBB8_21
.LBB8_150:                              # %sw.bb548
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	xorq	%rsi, %rsi
	jmp	.LBB8_15
.LBB8_64:                               # %sw.bb189
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB8_58
.LBB8_61:                               # %sw.bb175
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	jmp	.LBB8_58
.LBB8_57:                               # %sw.bb161
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	jmp	.LBB8_58
.LBB8_48:                               # %sw.bb124
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB8_14
# BB#49:                                # %lor.lhs.false127
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB8_14
# BB#50:                                # %if.else132
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$13995, %rsi            # imm = 0x36AB
	jmp	.LBB8_21
.LBB8_5:                                # %sw.bb17
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	je	.LBB8_7
# BB#6:
	movabsq	$0, %rbx
	jmp	.LBB8_8
.LBB8_24:                               # %sw.bb57
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	jne	.LBB8_25
.LBB8_7:                                # %sw.bb17
	movabsq	$1, %rbx
	jmp	.LBB8_8
.LBB8_163:                              # %sw.bb607
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB8_164
# BB#165:                               # %sw.bb607
	movabsq	$1, %rbx
	jmp	.LBB8_173
.LBB8_151:                              # %sw.bb550
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	testq	%rax, %rax
	jne	.LBB8_160
	jmp	.LBB8_173
.LBB8_75:                               # %sw.bb225
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB8_58:                               # %sw.bb161
	callq	incdec_operand
	xorq	%rbx, %rbx
	testq	%r15, %rax
	jne	.LBB8_173
	jmp	.LBB8_14
.LBB8_123:                              # %sw.bb441
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	je	.LBB8_14
# BB#124:                               # %if.else446
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB8_160
# BB#125:                               # %if.else451
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14312, %rsi            # imm = 0x37E8
	jmp	.LBB8_21
.LBB8_51:                               # %sw.bb133
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	cmpq	$1, %rax
	je	.LBB8_173
# BB#52:                                # %if.else136
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB8_14
# BB#53:                                # %lor.lhs.false139
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB8_14
# BB#54:                                # %if.else144
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14012, %rsi            # imm = 0x36BC
	jmp	.LBB8_21
.LBB8_29:                               # %sw.bb70
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	testq	%rax, %rax
	jne	.LBB8_14
	jmp	.LBB8_173
.LBB8_25:
	movabsq	$0, %rbx
.LBB8_8:                                # %sw.bb17
	xorq	$1, %rbx
	movq	$2, %rcx
	shlq	%cl, %rbx
	jmp	.LBB8_173
.LBB8_97:                               # %sw.bb338
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	cmpq	$1, %rax
	je	.LBB8_14
	jmp	.LBB8_173
.LBB8_82:                               # %sw.bb266
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB8_83
# BB#84:                                # %sw.bb266
	movabsq	$1, %rcx
	jmp	.LBB8_85
.LBB8_55:                               # %sw.bb145
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	cmpq	$1, %rax
	jbe	.LBB8_14
	jmp	.LBB8_173
.LBB8_18:                               # %sw.bb45
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	cmpq	$2, %rax
	je	.LBB8_173
# BB#19:                                # %lor.lhs.false47
	movq	%r14, %rdi
	callq	get_attr_i387
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB8_173
# BB#20:                                # %if.else51
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$13867, %rsi            # imm = 0x362B
	jmp	.LBB8_21
.LBB8_164:
	movabsq	$0, %rbx
	jmp	.LBB8_173
.LBB8_168:                              # %sw.bb614
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB8_172
# BB#169:                               # %land.lhs.true618
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB8_172
# BB#170:                               # %if.then624
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14632, %rdx            # imm = 0x3928
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB8_152:                              # %sw.bb555
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %ecx
	movl	which_alternative(%rip), %eax
	testq	%rcx, %rcx
	je	.LBB8_156
# BB#153:                               # %sw.bb555
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$6, %rcx
	jb	.LBB8_156
# BB#154:                               # %land.lhs.true569
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	xorq	%rbx, %rbx
	testq	%r15, %rax
	jne	.LBB8_173
# BB#155:                               # %land.lhs.true569.lor.lhs.false572_crit_edge
	movl	which_alternative(%rip), %eax
.LBB8_156:                              # %lor.lhs.false572
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	xorq	%rbx, %rbx
	cmpq	$6, %rcx
	jb	.LBB8_173
# BB#157:                               # %if.else591
	addq	$-7, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jb	.LBB8_161
# BB#158:                               # %land.lhs.true597
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB8_160
# BB#159:                               # %lor.lhs.false599
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB8_160
.LBB8_161:                              # %if.else604
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14391, %rsi            # imm = 0x3837
	jmp	.LBB8_21
.LBB8_140:                              # %sw.bb507
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB8_143
# BB#141:                               # %lor.lhs.false511
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB8_148
# BB#142:                               # %land.lhs.true515
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB8_148
.LBB8_143:                              # %land.lhs.true519
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB8_145
# BB#144:                               # %lor.lhs.false525
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB8_148
.LBB8_145:                              # %land.lhs.true528
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB8_148
# BB#146:                               # %land.lhs.true532
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB8_148
# BB#147:                               # %land.lhs.true532
	cmpq	$2, %rax
	jne	.LBB8_14
.LBB8_148:                              # %if.else542
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB8_160
# BB#149:                               # %if.else547
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14342, %rsi            # imm = 0x3806
	jmp	.LBB8_21
.LBB8_126:                              # %sw.bb452
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB8_129
# BB#127:                               # %lor.lhs.false454
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB8_134
# BB#128:                               # %land.lhs.true458
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB8_133
.LBB8_129:                              # %land.lhs.true462
	cmpq	$3, %rax
	je	.LBB8_14
# BB#130:                               # %land.lhs.true462
	cmpq	$5, %rax
	je	.LBB8_14
# BB#131:                               # %lor.lhs.false466
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB8_133
# BB#132:                               # %lor.lhs.false466
	cmpq	$2, %rax
	je	.LBB8_14
.LBB8_133:                              # %if.else474
	cmpq	$3, %rax
	jne	.LBB8_136
.LBB8_134:                              # %land.lhs.true476
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB8_160
# BB#135:                               # %lor.lhs.false480
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	je	.LBB8_160
	jmp	.LBB8_139
.LBB8_121:                              # %sw.bb430
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB8_14
# BB#122:                               # %lor.lhs.false433
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB8_14
	jmp	.LBB8_160
.LBB8_120:                              # %sw.bb425
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	testq	%rax, %rax
	jne	.LBB8_173
	jmp	.LBB8_14
.LBB8_115:                              # %sw.bb401
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rbx, %rbx
	cmpq	$6, %rcx
	ja	.LBB8_117
# BB#116:                               # %sw.bb401
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$115, %rax
	jne	.LBB8_173
.LBB8_117:                              # %lor.lhs.false415
	cmpq	$2, %rcx
	jb	.LBB8_119
# BB#118:                               # %lor.lhs.false415
	movabsq	$4294967294, %rax       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	je	.LBB8_173
.LBB8_119:                              # %if.else424
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14273, %rsi            # imm = 0x37C1
	jmp	.LBB8_21
.LBB8_98:                               # %sw.bb343
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB8_103
# BB#99:                                # %sw.bb343
	movq	$4, %rbx
	cmpq	$1, %rax
	je	.LBB8_173
# BB#100:                               # %sw.bb343
	testq	%rax, %rax
	jne	.LBB8_104
# BB#101:                               # %if.then345
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB8_160
# BB#102:                               # %land.lhs.true347
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	xorq	%rbx, %rbx
	testq	%r15, %rax
	jne	.LBB8_173
	jmp	.LBB8_160
.LBB8_89:                               # %sw.bb298
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB8_90
# BB#91:                                # %sw.bb298
	movabsq	$1, %rcx
	jmp	.LBB8_92
.LBB8_81:                               # %sw.bb260
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB8_160
	jmp	.LBB8_14
.LBB8_171:                              # %sw.bb246
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
.LBB8_172:                              # %sw.default
	xorq	%rbx, %rbx
.LBB8_173:                              # %return
	movq	%rbx, %rax
.LBB8_174:                              # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB8_76:                               # %sw.bb231
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	xorq	%rbx, %rbx
	cmpq	$10, %rax
	je	.LBB8_173
# BB#77:                                # %sw.bb231
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB8_173
# BB#78:                                # %lor.lhs.false236
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB8_173
# BB#79:                                # %if.else240
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB8_14
# BB#80:                                # %if.else245
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14164, %rsi            # imm = 0x3754
	jmp	.LBB8_21
.LBB8_70:                               # %sw.bb210
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	xorq	%rbx, %rbx
	cmpq	$10, %rax
	je	.LBB8_173
# BB#71:                                # %sw.bb210
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB8_173
# BB#72:                                # %lor.lhs.false215
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB8_173
# BB#73:                                # %if.else219
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB8_14
# BB#74:                                # %if.else224
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14135, %rsi            # imm = 0x3737
	jmp	.LBB8_21
.LBB8_65:                               # %sw.bb195
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	xorq	%rbx, %rbx
	cmpq	$10, %rax
	je	.LBB8_173
# BB#66:                                # %sw.bb195
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB8_173
# BB#67:                                # %lor.lhs.false200
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB8_173
# BB#68:                                # %if.else204
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB8_14
# BB#69:                                # %if.else209
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14120, %rsi            # imm = 0x3728
	jmp	.LBB8_21
.LBB8_62:                               # %sw.bb181
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	xorq	%rbx, %rbx
	testq	%r15, %rax
	jne	.LBB8_173
# BB#63:                                # %sw.bb181
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB8_14
	jmp	.LBB8_173
.LBB8_59:                               # %sw.bb167
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	xorq	%rbx, %rbx
	testq	%r15, %rax
	jne	.LBB8_173
# BB#60:                                # %sw.bb167
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB8_14
	jmp	.LBB8_173
.LBB8_56:                               # %sw.bb152
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	cmpq	$2, %rax
	jbe	.LBB8_14
	jmp	.LBB8_173
.LBB8_40:                               # %sw.bb102
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	cmpq	$1, %rax
	je	.LBB8_173
# BB#41:                                # %sw.bb102
	testq	%rax, %rax
	jne	.LBB8_47
# BB#42:                                # %land.lhs.true107
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB8_45
# BB#43:                                # %land.lhs.true111
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB8_14
# BB#44:                                # %land.lhs.true111.lor.lhs.false114_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB8_45:                               # %lor.lhs.false114
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB8_14
# BB#46:                                # %lor.lhs.false118
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB8_14
.LBB8_47:                               # %if.else123
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$13979, %rsi            # imm = 0x369B
	jmp	.LBB8_21
.LBB8_34:                               # %sw.bb87
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB8_37
# BB#35:                                # %land.lhs.true89
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB8_14
# BB#36:                                # %land.lhs.true89.lor.lhs.false92_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB8_37:                               # %lor.lhs.false92
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB8_14
# BB#38:                                # %lor.lhs.false96
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB8_14
# BB#39:                                # %if.else101
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$13964, %rsi            # imm = 0x368C
	jmp	.LBB8_21
.LBB8_30:                               # %sw.bb75
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	cmpq	$2, %rax
	je	.LBB8_173
# BB#31:                                # %if.else78
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB8_14
# BB#32:                                # %lor.lhs.false81
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB8_14
# BB#33:                                # %if.else86
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$13953, %rsi            # imm = 0x3681
	jmp	.LBB8_21
.LBB8_26:                               # %sw.bb62
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	xorq	%rbx, %rbx
	cmpq	$14, %rax
	je	.LBB8_173
# BB#27:                                # %lor.lhs.false65
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB8_173
# BB#28:                                # %if.else69
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$13925, %rsi            # imm = 0x3665
	jmp	.LBB8_21
.LBB8_166:                              # %sw.bb612
	movq	$2, %rbx
	jmp	.LBB8_173
.LBB8_167:                              # %sw.bb613
	movq	$4, %rbx
	jmp	.LBB8_173
.LBB8_16:                               # %sw.bb33
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB8_13
# BB#17:                                # %land.lhs.true35
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB8_11
.LBB8_9:                                # %sw.bb21
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB8_13
# BB#10:                                # %land.lhs.true23
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB8_11:                               # %land.lhs.true23
	callq	const0_operand
	xorq	%rbx, %rbx
	testq	%r15, %rax
	je	.LBB8_173
# BB#12:                                # %if.else27thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB8_13:                               # %if.else27
	testq	%r15, %rax
	jne	.LBB8_160
	jmp	.LBB8_14
.LBB8_4:                                # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	xorq	%rax, %rax
	jmp	.LBB8_174
.LBB8_83:
	movabsq	$0, %rcx
.LBB8_85:                               # %sw.bb266
	leaq	-3(%rax), %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	sbbq	%rsi, %rsi
	cmpq	$3, %rax
	sbbq	%rdx, %rdx
	xorq	%rbx, %rbx
	testq	%rcx, %rsi
	jne	.LBB8_173
# BB#86:                                # %sw.bb266
	andq	$1, %rdx
	jne	.LBB8_173
# BB#87:                                # %sw.bb266
	addq	$-5, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	jb	.LBB8_173
# BB#88:                                # %if.else297
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14198, %rsi            # imm = 0x3776
	jmp	.LBB8_21
.LBB8_90:
	movabsq	$0, %rcx
.LBB8_92:                               # %sw.bb298
	leaq	-5(%rax), %rdx
	andq	%r15, %rdx
	cmpq	$4, %rdx
	sbbq	%rsi, %rsi
	cmpq	$3, %rax
	sbbq	%rdx, %rdx
	xorq	%rbx, %rbx
	testq	%rcx, %rsi
	jne	.LBB8_173
# BB#93:                                # %sw.bb298
	andq	$1, %rdx
	jne	.LBB8_173
# BB#94:                                # %sw.bb298
	leaq	-9(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jb	.LBB8_173
# BB#95:                                # %if.else331
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB8_96
.LBB8_160:                              # %if.else31
	xorq	%rsi, %rsi
	jmp	.LBB8_15
.LBB8_103:                              # %if.then358
	movq	$8, %rbx
	jmp	.LBB8_173
.LBB8_104:                              # %if.else359
	movl	flag_pic(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB8_109
# BB#105:                               # %switch.early.test
	leaq	-5(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jb	.LBB8_110
# BB#106:                               # %switch.early.test
	xorq	%rbx, %rbx
	cmpq	$4, %rax
	je	.LBB8_173
# BB#107:                               # %land.lhs.true371
	movq	recog_data+8(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB8_173
# BB#108:                               # %land.lhs.true371
	movl	which_alternative(%rip), %eax
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jne	.LBB8_110
	jmp	.LBB8_173
.LBB8_136:                              # %land.lhs.true494
	cmpq	$5, %rax
	je	.LBB8_139
# BB#137:                               # %land.lhs.true498
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB8_160
# BB#138:                               # %land.lhs.true498
	cmpq	$2, %rax
	jne	.LBB8_160
.LBB8_139:                              # %if.else506
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14327, %rsi            # imm = 0x37F7
	jmp	.LBB8_21
.LBB8_109:                              # %lor.lhs.false374
	xorq	%rbx, %rbx
	cmpq	$4, %rax
	je	.LBB8_173
.LBB8_110:                              # %lor.lhs.false376
	leaq	-5(%rax), %rcx
	andq	%r15, %rcx
	xorq	%rbx, %rbx
	cmpq	$4, %rcx
	jb	.LBB8_173
# BB#111:                               # %if.else389
	addq	$-7, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB8_114
# BB#112:                               # %land.lhs.true393
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB8_160
# BB#113:                               # %lor.lhs.false395
	movq	recog_data+8(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB8_160
.LBB8_114:                              # %if.else400
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14261, %rsi            # imm = 0x37B5
	jmp	.LBB8_21
.LBB8_96:                               # %if.else337
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_immediate, %rcx
	movq	$14213, %rsi            # imm = 0x3785
.LBB8_21:                               # %if.else51
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp89:
	.size	get_attr_length_immediate, .Ltmp89-get_attr_length_immediate
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI8_0:
	.quad	.LBB8_168
	.quad	.LBB8_163
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_163
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_163
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_163
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_173
	.quad	.LBB8_152
	.quad	.LBB8_151
	.quad	.LBB8_172
	.quad	.LBB8_150
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_140
	.quad	.LBB8_151
	.quad	.LBB8_172
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_126
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_123
	.quad	.LBB8_123
	.quad	.LBB8_151
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_123
	.quad	.LBB8_121
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_172
	.quad	.LBB8_120
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_173
	.quad	.LBB8_115
	.quad	.LBB8_98
	.quad	.LBB8_151
	.quad	.LBB8_172
	.quad	.LBB8_150
	.quad	.LBB8_97
	.quad	.LBB8_97
	.quad	.LBB8_89
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_82
	.quad	.LBB8_82
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_81
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_171
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_76
	.quad	.LBB8_75
	.quad	.LBB8_75
	.quad	.LBB8_75
	.quad	.LBB8_75
	.quad	.LBB8_70
	.quad	.LBB8_65
	.quad	.LBB8_64
	.quad	.LBB8_64
	.quad	.LBB8_64
	.quad	.LBB8_64
	.quad	.LBB8_64
	.quad	.LBB8_64
	.quad	.LBB8_62
	.quad	.LBB8_61
	.quad	.LBB8_61
	.quad	.LBB8_61
	.quad	.LBB8_61
	.quad	.LBB8_61
	.quad	.LBB8_59
	.quad	.LBB8_57
	.quad	.LBB8_57
	.quad	.LBB8_57
	.quad	.LBB8_61
	.quad	.LBB8_57
	.quad	.LBB8_57
	.quad	.LBB8_57
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_173
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_150
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_56
	.quad	.LBB8_162
	.quad	.LBB8_55
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_55
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_173
	.quad	.LBB8_173
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_51
	.quad	.LBB8_48
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_51
	.quad	.LBB8_40
	.quad	.LBB8_48
	.quad	.LBB8_34
	.quad	.LBB8_51
	.quad	.LBB8_48
	.quad	.LBB8_48
	.quad	.LBB8_30
	.quad	.LBB8_48
	.quad	.LBB8_48
	.quad	.LBB8_29
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_29
	.quad	.LBB8_29
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_162
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_26
	.quad	.LBB8_24
	.quad	.LBB8_24
	.quad	.LBB8_24
	.quad	.LBB8_24
	.quad	.LBB8_24
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_166
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_167
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_22
	.quad	.LBB8_18
	.quad	.LBB8_172
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_18
	.quad	.LBB8_172
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_22
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_16
	.quad	.LBB8_9
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_5
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_172
	.quad	.LBB8_4

	.text
	.globl	get_attr_length_address
	.align	16, 0x90
	.type	get_attr_length_address,@function
get_attr_length_address:                # @get_attr_length_address
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp94:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp95:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp96:
	.cfi_def_cfa_offset 32
.Ltmp97:
	.cfi_offset %rbx, -32
.Ltmp98:
	.cfi_offset %r14, -24
.Ltmp99:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB9_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB9_2:                                # %cond.end
	xorq	%r14, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$804, %rdx              # imm = 0x324
	jg	.LBB9_55
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$17, %rdx
	jg	.LBB9_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB9_56
# BB#5:                                 # %sw.bb84
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB9_58
# BB#6:                                 # %land.lhs.true88
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB9_58
# BB#7:                                 # %if.then94
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_length_address, %rcx
	movq	$13642, %rdx            # imm = 0x354A
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB9_55:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$805, %rax              # imm = 0x325
	je	.LBB9_58
	jmp	.LBB9_56
.LBB9_8:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$672, %rdx              # imm = 0x2A0
	jg	.LBB9_48
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$581, %rdx              # imm = 0x245
	jg	.LBB9_34
# BB#10:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$491, %rdx              # imm = 0x1EB
	jg	.LBB9_29
# BB#11:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$447, %rdx              # imm = 0x1BF
	jg	.LBB9_28
# BB#12:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$422, %rdx              # imm = 0x1A6
	jg	.LBB9_27
# BB#13:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$404, %rdx              # imm = 0x194
	jg	.LBB9_26
# BB#14:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$343, %rdx              # imm = 0x157
	jg	.LBB9_24
# BB#15:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$287, %rdx              # imm = 0x11F
	jg	.LBB9_22
# BB#16:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$267, %rdx              # imm = 0x10B
	jg	.LBB9_20
# BB#17:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$229, %rdx
	jg	.LBB9_57
# BB#18:                                # %cond.end
	addq	$-18, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$167, %rax
	ja	.LBB9_56
# BB#19:                                # %cond.end
	jmpq	*.LJTI9_1(,%rax,8)
.LBB9_50:                               # %sw.bb68
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB9_58
	jmp	.LBB9_37
.LBB9_48:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$673, %rax              # imm = 0x2A1
	jne	.LBB9_56
.LBB9_49:                               # %sw.bb61
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
.LBB9_45:                               # %sw.bb39
	cmpq	$2, %rax
	jb	.LBB9_58
	jmp	.LBB9_37
.LBB9_34:                               # %cond.end
	addq	$-582, %rax             # imm = 0xFFFFFFFFFFFFFDBA
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$76, %rcx
	ja	.LBB9_56
# BB#35:                                # %cond.end
	jmpq	*.LJTI9_0(,%rcx,8)
.LBB9_36:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	je	.LBB9_58
	jmp	.LBB9_37
.LBB9_29:                               # %cond.end
	addq	$-492, %rax             # imm = 0xFFFFFFFFFFFFFE14
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$32, %rax
	ja	.LBB9_56
# BB#30:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$8503952383, %rcx       # imm = 0x1FAE003FF
	testq	%rcx, %rsi
	jne	.LBB9_58
# BB#31:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$2031616, %rdx          # imm = 0x1F0000
	je	.LBB9_32
.LBB9_38:                               # %sw.bb7
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	callq	constant_call_address_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB9_58
	jmp	.LBB9_37
.LBB9_28:                               # %cond.end
	addq	$-448, %rax             # imm = 0xFFFFFFFFFFFFFE40
	jmp	.LBB9_23
.LBB9_27:                               # %cond.end
	addq	$-423, %rax             # imm = 0xFFFFFFFFFFFFFE59
	jmp	.LBB9_23
.LBB9_26:                               # %cond.end
	addq	$-405, %rax             # imm = 0xFFFFFFFFFFFFFE6B
	jmp	.LBB9_23
.LBB9_24:                               # %cond.end
	addq	$-344, %rax             # imm = 0xFFFFFFFFFFFFFEA8
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$39, %rcx
	ja	.LBB9_56
# BB#25:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$1098439981057, %rcx    # imm = 0xFFC01FF801
	testq	%rcx, %rax
	jne	.LBB9_58
	jmp	.LBB9_56
.LBB9_22:                               # %cond.end
	addq	$-288, %rax             # imm = 0xFFFFFFFFFFFFFEE0
.LBB9_23:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jb	.LBB9_58
	jmp	.LBB9_56
.LBB9_32:                               # %cond.end
	cmpq	$15, %rax
	jne	.LBB9_56
# BB#33:                                # %sw.bb12
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	jmp	.LBB9_40
.LBB9_20:                               # %cond.end
	addq	$-268, %rax             # imm = 0xFFFFFFFFFFFFFEF4
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$9, %rcx
	ja	.LBB9_56
# BB#21:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$731, %rax              # imm = 0x2DB
	jne	.LBB9_58
	jmp	.LBB9_56
.LBB9_57:                               # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$230, %rax
	je	.LBB9_58
.LBB9_56:                               # %sw.default
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
.LBB9_37:                               # %if.else
	movq	%rbx, %rdi
	popq	%rbx
	popq	%r14
	popq	%r15
	jmp	ix86_attr_length_address_default  # TAILCALL
.LBB9_51:                               # %sw.bb73
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$8, %r14
	je	.LBB9_58
# BB#52:                                # %select.mid
	xorq	%r14, %r14
	jmp	.LBB9_58
.LBB9_53:                               # %sw.bb80
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$8, %r14
	je	.LBB9_58
# BB#54:                                # %select.mid2
	xorq	%r14, %r14
	jmp	.LBB9_58
.LBB9_47:                               # %sw.bb56
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB9_37
	jmp	.LBB9_58
.LBB9_46:                               # %sw.bb51
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB9_37
	jmp	.LBB9_58
.LBB9_43:                               # %sw.bb39
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jae	.LBB9_44
	jmp	.LBB9_37
.LBB9_42:                               # %sw.bb32
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
.LBB9_44:                               # %sw.bb39
	addq	$-3, %rax
	andq	%r15, %rax
	jmp	.LBB9_45
.LBB9_41:                               # %sw.bb23
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	decq	%rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jae	.LBB9_37
	jmp	.LBB9_58
.LBB9_39:                               # %sw.bb18
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
.LBB9_40:                               # %sw.bb18
	cmpq	$1, %rax
	jne	.LBB9_37
.LBB9_58:                               # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp100:
	.size	get_attr_length_address, .Ltmp100-get_attr_length_address
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI9_0:
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_36
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_38
	.quad	.LBB9_38
	.quad	.LBB9_38
	.quad	.LBB9_38
	.quad	.LBB9_38
	.quad	.LBB9_38
	.quad	.LBB9_58
	.quad	.LBB9_58
.LJTI9_1:
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_51
	.quad	.LBB9_53
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_51
	.quad	.LBB9_53
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_51
	.quad	.LBB9_53
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_50
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_49
	.quad	.LBB9_47
	.quad	.LBB9_53
	.quad	.LBB9_53
	.quad	.LBB9_56
	.quad	.LBB9_46
	.quad	.LBB9_46
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_43
	.quad	.LBB9_43
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_42
	.quad	.LBB9_42
	.quad	.LBB9_42
	.quad	.LBB9_42
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_50
	.quad	.LBB9_41
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_50
	.quad	.LBB9_56
	.quad	.LBB9_50
	.quad	.LBB9_56
	.quad	.LBB9_50
	.quad	.LBB9_56
	.quad	.LBB9_50
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_56
	.quad	.LBB9_58
	.quad	.LBB9_58
	.quad	.LBB9_50
	.quad	.LBB9_39
	.quad	.LBB9_56
	.quad	.LBB9_50
	.quad	.LBB9_39
	.quad	.LBB9_56
	.quad	.LBB9_50
	.quad	.LBB9_39
	.quad	.LBB9_56
	.quad	.LBB9_50
	.quad	.LBB9_39
	.quad	.LBB9_56
	.quad	.LBB9_50
	.quad	.LBB9_50
	.quad	.LBB9_50
	.quad	.LBB9_50
	.quad	.LBB9_50
	.quad	.LBB9_50
	.quad	.LBB9_58

	.text
	.globl	get_attr_type
	.align	16, 0x90
	.type	get_attr_type,@function
get_attr_type:                          # @get_attr_type
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp105:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp106:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp107:
	.cfi_def_cfa_offset 32
.Ltmp108:
	.cfi_offset %rbx, -32
.Ltmp109:
	.cfi_offset %r14, -24
.Ltmp110:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB10_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB10_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$834, %rax              # imm = 0x342
	ja	.LBB10_272
# BB#3:                                 # %cond.end
	movq	$35, %r14
	jmpq	*.LJTI10_0(,%rax,8)
.LBB10_241:                             # %sw.bb705
	movq	$34, %r14
	jmp	.LBB10_273
.LBB10_271:                             # %sw.bb747
	xorq	%r14, %r14
	jmp	.LBB10_273
.LBB10_265:                             # %sw.bb729
	movq	$4, %r14
	jmp	.LBB10_273
.LBB10_259:                             # %sw.bb723
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_243:                             # %sw.bb707
	movq	$31, %r14
	jmp	.LBB10_273
.LBB10_247:                             # %sw.bb711
	movq	$27, %r14
	jmp	.LBB10_273
.LBB10_267:                             # %sw.bb731
	movq	$2, %r14
	jmp	.LBB10_273
.LBB10_262:                             # %sw.bb726
	movq	$7, %r14
	jmp	.LBB10_273
.LBB10_248:                             # %sw.bb712
	movq	$24, %r14
	jmp	.LBB10_273
.LBB10_258:                             # %sw.bb722
	movq	$12, %r14
	jmp	.LBB10_273
.LBB10_261:                             # %sw.bb725
	movq	$8, %r14
	jmp	.LBB10_273
.LBB10_266:                             # %sw.bb730
	movq	$3, %r14
	jmp	.LBB10_273
.LBB10_264:                             # %sw.bb728
	movq	$5, %r14
	jmp	.LBB10_273
.LBB10_115:                             # %sw.bb355
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$21, %r14
	je	.LBB10_273
# BB#116:                               # %select.mid30
	movq	$1, %r14
	jmp	.LBB10_273
.LBB10_260:                             # %sw.bb724
	movq	$9, %r14
	jmp	.LBB10_273
.LBB10_263:                             # %sw.bb727
	movq	$6, %r14
	jmp	.LBB10_273
.LBB10_249:                             # %sw.bb713
	movq	$21, %r14
	jmp	.LBB10_273
.LBB10_245:                             # %sw.bb709
	movq	$29, %r14
	jmp	.LBB10_273
.LBB10_254:                             # %sw.bb718
	movq	$16, %r14
	jmp	.LBB10_273
.LBB10_256:                             # %sw.bb720
	movq	$14, %r14
	jmp	.LBB10_273
.LBB10_257:                             # %sw.bb721
	movq	$13, %r14
	jmp	.LBB10_273
.LBB10_223:                             # %sw.bb666
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$25, %r14
	jne	.LBB10_273
# BB#224:                               # %if.else670
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	div_operator
	testq	%r15, %rax
	je	.LBB10_211
# BB#225:
	movabsq	$0, %rax
	jmp	.LBB10_212
.LBB10_226:                             # %sw.bb675
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$25, %r14
	jne	.LBB10_273
# BB#227:                               # %if.else679
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	div_operator
	testq	%r15, %rax
	je	.LBB10_211
# BB#228:
	movabsq	$0, %rax
	jmp	.LBB10_212
.LBB10_119:                             # %sw.bb364
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	movq	$4, %r14
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB10_273
# BB#120:                               # %sw.bb364
	movq	$10, %r14
	jmp	.LBB10_273
.LBB10_127:                             # %sw.bb385
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movq	$4, %r14
	je	.LBB10_273
# BB#128:                               # %sw.bb385
	movq	$10, %r14
	jmp	.LBB10_273
.LBB10_129:                             # %sw.bb390
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movq	$4, %r14
	je	.LBB10_273
# BB#130:                               # %sw.bb390
	movq	$10, %r14
	jmp	.LBB10_273
.LBB10_251:                             # %sw.bb715
	movq	$19, %r14
	jmp	.LBB10_273
.LBB10_31:                              # %sw.bb86
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$21, %r14
	je	.LBB10_273
# BB#32:                                # %select.mid10
	movq	$1, %r14
	jmp	.LBB10_273
.LBB10_252:                             # %sw.bb716
	movq	$18, %r14
	jmp	.LBB10_273
.LBB10_220:                             # %sw.bb657
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$25, %r14
	jne	.LBB10_273
# BB#221:                               # %if.else661
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	div_operator
	testq	%r15, %rax
	je	.LBB10_211
# BB#222:
	movabsq	$0, %rax
	jmp	.LBB10_212
.LBB10_70:                              # %sw.bb231
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$6, %r14
	je	.LBB10_273
# BB#71:                                # %select.mid16
	movq	$5, %r14
	jmp	.LBB10_273
.LBB10_253:                             # %sw.bb717
	movq	$17, %r14
	jmp	.LBB10_273
.LBB10_244:                             # %sw.bb708
	movq	$30, %r14
	jmp	.LBB10_273
.LBB10_35:                              # %sw.bb101
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$21, %r14
	jb	.LBB10_273
# BB#36:                                # %select.mid14
	movq	$1, %r14
	jmp	.LBB10_273
.LBB10_112:                             # %sw.bb348
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movq	$21, %r14
	testq	%rax, %rax
	je	.LBB10_273
# BB#113:                               # %sw.bb348
	cmpq	$1, %rax
	jne	.LBB10_272
# BB#114:                               # %if.then353
	movq	$1, %r14
	jmp	.LBB10_273
.LBB10_272:                             # %sw.default
	movq	$33, %r14
.LBB10_273:                             # %return
	movq	%r14, %rax
.LBB10_274:                             # %return
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB10_117:                             # %sw.bb359
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movq	$4, %r14
	je	.LBB10_273
# BB#118:                               # %sw.bb359
	movq	$10, %r14
	jmp	.LBB10_273
.LBB10_182:                             # %sw.bb548
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$8, %r14
	je	.LBB10_273
# BB#183:                               # %select.mid32
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_213:                             # %sw.bb636
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$25, %r14
	jne	.LBB10_273
# BB#214:                               # %if.else640
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	div_operator
	testq	%r15, %rax
	je	.LBB10_211
# BB#215:
	movabsq	$0, %rax
	jmp	.LBB10_212
.LBB10_250:                             # %sw.bb714
	movq	$20, %r14
	jmp	.LBB10_273
.LBB10_72:                              # %sw.bb235
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$29, %r14
	je	.LBB10_273
# BB#73:                                # %select.mid18
	movq	$33, %r14
	jmp	.LBB10_273
.LBB10_104:                             # %sw.bb329
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$16, %r14
	je	.LBB10_273
# BB#105:                               # %select.mid22
	movq	$1, %r14
	jmp	.LBB10_273
.LBB10_37:                              # %sw.bb112
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$21, %r14
	jb	.LBB10_273
# BB#38:                                # %if.else119
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %r14
	jb	.LBB10_273
# BB#39:                                # %if.else119
	movq	$33, %r14
	jmp	.LBB10_273
.LBB10_106:                             # %sw.bb336
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$8, %r14
	je	.LBB10_273
# BB#107:                               # %select.mid24
	movq	$2, %r14
	jmp	.LBB10_273
.LBB10_10:                              # %sw.bb29
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$4, %r14
	jb	.LBB10_273
# BB#11:                                # %select.mid6
	movq	$8, %r14
	jmp	.LBB10_273
.LBB10_255:                             # %sw.bb719
	movq	$15, %r14
	jmp	.LBB10_273
.LBB10_196:                             # %sw.bb601
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB10_198
# BB#197:
	movabsq	$0, %rax
	jmp	.LBB10_199
.LBB10_200:                             # %sw.bb606
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$33, %r14
	je	.LBB10_273
# BB#201:                               # %if.else609
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB10_198
# BB#202:
	movabsq	$0, %rax
	jmp	.LBB10_199
.LBB10_229:                             # %sw.bb684
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$27, %r14
	je	.LBB10_273
# BB#230:                               # %select.mid34
	movq	$33, %r14
	jmp	.LBB10_273
.LBB10_8:                               # %sw.bb20
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$28, %r14
	jb	.LBB10_273
# BB#9:                                 # %select.mid4
	movq	$20, %r14
	jmp	.LBB10_273
.LBB10_246:                             # %sw.bb710
	movq	$28, %r14
	jmp	.LBB10_273
.LBB10_268:                             # %sw.bb732
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB10_270
# BB#269:                               # %land.lhs.true739
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB10_275
.LBB10_270:                             # %sw.bb746
	movq	$1, %r14
	jmp	.LBB10_273
.LBB10_74:                              # %sw.bb239
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	movq	$34, %r14
	jb	.LBB10_273
# BB#75:                                # %if.else246
	addq	$-7, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$33, %r14
	jb	.LBB10_273
# BB#76:                                # %if.else253
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB10_78
# BB#77:                                # %land.lhs.true255
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	movq	$9, %r14
	jne	.LBB10_273
.LBB10_78:                              # %if.else259
	movq	$7, %r14
	jmp	.LBB10_273
.LBB10_61:                              # %sw.bb195
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB10_64
# BB#62:                                # %land.lhs.true199
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	movq	$7, %r14
	je	.LBB10_273
# BB#63:                                # %lor.lhs.false203
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB10_273
.LBB10_64:                              # %lor.lhs.false207
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB10_66
# BB#65:                                # %land.lhs.true213
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	movq	$7, %r14
	jne	.LBB10_273
.LBB10_66:                              # %if.else217
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_69
# BB#67:                                # %land.lhs.true221
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB10_69
# BB#68:                                # %land.lhs.true221
	movq	$8, %r14
	cmpq	$2, %rax
	jne	.LBB10_273
.LBB10_69:                              # %if.else230
	movq	$7, %r14
	jmp	.LBB10_273
.LBB10_48:                              # %sw.bb175
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %edx
	cmpq	$5, %rdx
	jne	.LBB10_50
# BB#49:
	movq	$8, %r14
	jmp	.LBB10_273
.LBB10_79:                              # %sw.bb260
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_82
# BB#80:                                # %land.lhs.true263
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	movq	$8, %r14
	je	.LBB10_273
# BB#81:                                # %lor.lhs.false266
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB10_273
.LBB10_82:                              # %if.else271
	movq	$7, %r14
	jmp	.LBB10_273
.LBB10_83:                              # %sw.bb272
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_86
# BB#84:                                # %land.lhs.true275
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	movq	$8, %r14
	je	.LBB10_273
# BB#85:                                # %lor.lhs.false278
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB10_273
.LBB10_86:                              # %if.else283
	movq	$7, %r14
	jmp	.LBB10_273
.LBB10_87:                              # %sw.bb284
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_90
# BB#88:                                # %land.lhs.true287
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	movq	$8, %r14
	je	.LBB10_273
# BB#89:                                # %lor.lhs.false290
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB10_273
.LBB10_90:                              # %if.else295
	movq	$7, %r14
	jmp	.LBB10_273
.LBB10_91:                              # %sw.bb296
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	movq	$8, %r14
	je	.LBB10_273
# BB#92:                                # %lor.lhs.false299
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB10_93
# BB#94:                                # %lor.lhs.false299
	movabsq	$1, %r14
	jmp	.LBB10_95
.LBB10_96:                              # %sw.bb305
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$16, %r14
	je	.LBB10_273
# BB#97:                                # %select.mid20
	movq	$1, %r14
	jmp	.LBB10_273
.LBB10_43:                              # %sw.bb159
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$2, %rax
	jb	.LBB10_273
# BB#44:                                # %if.else164
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rcx, %rax
	cmpq	$2, %rax
	jne	.LBB10_45
# BB#46:                                # %if.else164
	movabsq	$1, %r14
	addq	$33, %r14
	jmp	.LBB10_273
.LBB10_98:                              # %sw.bb309
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	leaq	-5(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	movq	$34, %r14
	jb	.LBB10_273
# BB#99:                                # %if.else314
	leaq	-7(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	movq	$33, %r14
	jb	.LBB10_273
# BB#100:                               # %if.else319
	andq	%r15, %rax
	movq	$1, %r14
	cmpq	$4, %rax
	je	.LBB10_273
# BB#101:                               # %if.else322
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB10_103
# BB#102:                               # %land.lhs.true324
	movq	recog_data+8(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	testq	%r15, %rax
	movq	$9, %r14
	jne	.LBB10_273
.LBB10_103:                             # %if.else328
	movq	$7, %r14
	jmp	.LBB10_273
.LBB10_40:                              # %sw.bb132
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$21, %r14
	jb	.LBB10_273
# BB#41:                                # %if.else139
	leaq	-3(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	movq	$7, %r14
	jb	.LBB10_273
# BB#42:                                # %if.else144
	addq	$-5, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	sbbq	%r14, %r14
	notq	%r14
	andq	$1, %r14
	addq	$33, %r14
	jmp	.LBB10_273
.LBB10_108:                             # %sw.bb340
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$8, %r14
	je	.LBB10_273
# BB#109:                               # %select.mid26
	movq	$7, %r14
	jmp	.LBB10_273
.LBB10_33:                              # %sw.bb95
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$21, %r14
	jb	.LBB10_273
# BB#34:                                # %select.mid12
	movq	$33, %r14
	jmp	.LBB10_273
.LBB10_28:                              # %sw.bb75
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$21, %r14
	je	.LBB10_273
# BB#29:                                # %if.else78
	decq	%rax
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jb	.LBB10_273
# BB#30:                                # %if.else78
	movq	$33, %r14
	jmp	.LBB10_273
.LBB10_110:                             # %sw.bb344
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$33, %r14
	je	.LBB10_273
# BB#111:                               # %select.mid28
	movq	$21, %r14
	jmp	.LBB10_273
.LBB10_24:                              # %sw.bb64
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$9, %r14
	je	.LBB10_273
# BB#25:                                # %lor.lhs.false66
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB10_273
# BB#26:                                # %if.else70
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movq	$4, %r14
	je	.LBB10_273
# BB#27:                                # %if.else70
	movq	$10, %r14
	jmp	.LBB10_273
.LBB10_19:                              # %sw.bb53
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$9, %r14
	je	.LBB10_273
# BB#20:                                # %lor.lhs.false55
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	movq	$4, %rbx
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB10_273
# BB#21:                                # %if.else59
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB10_23
# BB#22:                                # %if.else59
	movq	$10, %rbx
.LBB10_23:                              # %if.else59
	movq	%rbx, %r14
	jmp	.LBB10_273
.LBB10_14:                              # %sw.bb43
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$9, %r14
	jne	.LBB10_273
# BB#15:                                # %lor.lhs.false45
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	movq	$4, %rbx
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB10_273
# BB#16:                                # %if.else48
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB10_18
# BB#17:                                # %if.else48
	movq	$10, %rbx
.LBB10_18:                              # %if.else48
	movq	%rbx, %r14
	jmp	.LBB10_273
.LBB10_121:                             # %sw.bb369
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$9, %r14
	je	.LBB10_273
# BB#122:                               # %if.else372
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movq	$4, %r14
	je	.LBB10_273
# BB#123:                               # %if.else372
	movq	$10, %r14
	jmp	.LBB10_273
.LBB10_124:                             # %sw.bb377
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$9, %r14
	je	.LBB10_273
# BB#125:                               # %if.else380
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movq	$4, %r14
	je	.LBB10_273
# BB#126:                               # %if.else380
	movq	$10, %r14
	jmp	.LBB10_273
.LBB10_12:                              # %sw.bb35
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$4, %r14
	jb	.LBB10_273
# BB#13:                                # %select.mid8
	movq	$8, %r14
	jmp	.LBB10_273
.LBB10_131:                             # %sw.bb395
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$9, %r14
	je	.LBB10_273
# BB#132:                               # %if.else398
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_135
# BB#133:                               # %land.lhs.true402
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_135
# BB#134:                               # %land.lhs.true405
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_135:                             # %if.else409
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_136:                             # %sw.bb410
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_139
# BB#137:                               # %land.lhs.true414
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_139
# BB#138:                               # %land.lhs.true417
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_139:                             # %if.else421
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_140:                             # %sw.bb422
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$9, %r14
	je	.LBB10_273
# BB#141:                               # %if.else425
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_144
# BB#142:                               # %land.lhs.true429
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_144
# BB#143:                               # %land.lhs.true432
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_144:                             # %if.else436
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_145:                             # %sw.bb437
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$9, %r14
	je	.LBB10_273
# BB#146:                               # %if.else440
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_148
# BB#147:                               # %land.lhs.true444
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_148:                             # %if.else448
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_149:                             # %sw.bb449
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_152
# BB#150:                               # %land.lhs.true453
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_152
# BB#151:                               # %land.lhs.true456
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_152:                             # %if.else460
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_153:                             # %sw.bb461
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_155
# BB#154:                               # %land.lhs.true465
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_155:                             # %if.else469
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_156:                             # %sw.bb470
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$9, %r14
	je	.LBB10_273
# BB#157:                               # %if.else473
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_160
# BB#158:                               # %land.lhs.true477
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_160
# BB#159:                               # %land.lhs.true480
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_160:                             # %if.else484
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_161:                             # %sw.bb485
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_164
# BB#162:                               # %land.lhs.true489
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_164
# BB#163:                               # %land.lhs.true492
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_164:                             # %if.else496
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_165:                             # %sw.bb497
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_168
# BB#166:                               # %land.lhs.true501
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_168
# BB#167:                               # %land.lhs.true504
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_168:                             # %if.else508
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_169:                             # %sw.bb509
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$9, %r14
	je	.LBB10_273
# BB#170:                               # %if.else512
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_173
# BB#171:                               # %land.lhs.true516
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_173
# BB#172:                               # %land.lhs.true519
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_173:                             # %if.else523
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_174:                             # %sw.bb524
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_177
# BB#175:                               # %land.lhs.true528
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_177
# BB#176:                               # %land.lhs.true531
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_177:                             # %if.else535
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_178:                             # %sw.bb536
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB10_181
# BB#179:                               # %land.lhs.true540
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB10_181
# BB#180:                               # %land.lhs.true543
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	movq	$4, %r14
	jne	.LBB10_273
.LBB10_181:                             # %if.else547
	movq	$11, %r14
	jmp	.LBB10_273
.LBB10_184:                             # %sw.bb552
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB10_195
# BB#185:                               # %land.lhs.true554
	movq	insn_addresses_(%rip), %rax
	xorq	%r14, %r14
	testq	%rax, %rax
	je	.LBB10_189
# BB#186:                               # %cond.true556
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB10_188
# BB#187:                               # %cond.true558
	movq	8(%rcx), %rcx
.LBB10_188:                             # %cond.end562
	movslq	8(%rcx), %rcx
	movl	32(%rax,%rcx,4), %r14d
.LBB10_189:                             # %cond.end569
	movq	%rbx, %rdi
	callq	insn_current_reference_address
	subq	%rax, %r14
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	cmpq	$-128, %r14
	jl	.LBB10_195
# BB#190:                               # %land.lhs.true573
	movq	insn_addresses_(%rip), %rax
	xorq	%r14, %r14
	testq	%rax, %rax
	je	.LBB10_194
# BB#191:                               # %cond.true575
	movq	recog_data(%rip), %rcx
	movzbl	(%rcx), %edx
	cmpq	$67, %rdx
	jne	.LBB10_193
# BB#192:                               # %cond.true579
	movq	8(%rcx), %rcx
.LBB10_193:                             # %cond.end584
	movslq	8(%rcx), %rcx
	movl	32(%rax,%rcx,4), %r14d
.LBB10_194:                             # %cond.end594
	movq	%rbx, %rdi
	callq	insn_current_reference_address
	subq	%rax, %r14
	movq	$32, %rcx
	shlq	%cl, %r14
	movq	$32, %rcx
	sarq	%cl, %r14
	cmpq	$124, %r14
	movq	$14, %r14
	jl	.LBB10_273
.LBB10_195:                             # %if.else600
	movq	$1, %r14
	jmp	.LBB10_273
.LBB10_203:                             # %sw.bb614
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB10_198
# BB#204:
	movabsq	$0, %rax
	jmp	.LBB10_199
.LBB10_205:                             # %sw.bb619
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB10_206
.LBB10_198:                             # %sw.bb601
	movabsq	$1, %rax
	jmp	.LBB10_199
.LBB10_207:                             # %sw.bb624
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$33, %r14
	je	.LBB10_273
# BB#208:                               # %if.else627
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$25, %r14
	jne	.LBB10_273
# BB#209:                               # %if.else631
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	div_operator
	testq	%r15, %rax
	je	.LBB10_211
# BB#210:
	movabsq	$0, %rax
	jmp	.LBB10_212
.LBB10_216:                             # %sw.bb645
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$33, %r14
	je	.LBB10_273
# BB#217:                               # %if.else648
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$25, %r14
	jne	.LBB10_273
# BB#218:                               # %if.else652
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	div_operator
	testq	%r15, %rax
	jne	.LBB10_219
.LBB10_211:                             # %if.else631
	movabsq	$1, %rax
.LBB10_212:                             # %if.else631
	xorq	$1, %rax
	leaq	22(,%rax,4), %r14
	jmp	.LBB10_273
.LBB10_242:                             # %sw.bb706
	movq	$32, %r14
	jmp	.LBB10_273
.LBB10_6:                               # %sw.bb11
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$28, %r14
	jb	.LBB10_273
# BB#7:                                 # %select.mid2
	movq	$1, %r14
	jmp	.LBB10_273
.LBB10_231:                             # %sw.bb688
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$4, %r14
	je	.LBB10_273
# BB#232:                               # %if.else691
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	testq	%r15, %rax
	jne	.LBB10_233
# BB#234:                               # %if.else691
	movabsq	$1, %rax
	leaq	7(%rax,%rax), %r14
	jmp	.LBB10_273
.LBB10_236:                             # %sw.bb696
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$4, %r14
	je	.LBB10_273
# BB#237:                               # %if.else699
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	testq	%r15, %rax
	jne	.LBB10_238
# BB#239:                               # %if.else699
	movabsq	$1, %rax
	leaq	7(%rax,%rax), %r14
	jmp	.LBB10_273
.LBB10_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$2, %rax
	jb	.LBB10_273
# BB#5:                                 # %select.mid
	movq	$33, %r14
	jmp	.LBB10_273
.LBB10_50:                              # %sw.bb175
	cmpq	$3, %rdx
	jne	.LBB10_56
# BB#51:                                # %land.lhs.true
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rsi
	testq	%r15, %rsi
	movq	$7, %r14
	je	.LBB10_273
# BB#52:                                # %lor.lhs.false178
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	je	.LBB10_273
# BB#53:                                # %if.else183
	cmpq	$3, %rdx
	jne	.LBB10_55
# BB#54:
	movq	$8, %r14
	jmp	.LBB10_273
.LBB10_206:
	movabsq	$0, %rax
.LBB10_199:                             # %sw.bb601
	xorq	$1, %rax
	leaq	22(%rax,%rax,2), %r14
	jmp	.LBB10_273
.LBB10_93:
	movabsq	$0, %r14
.LBB10_95:                              # %lor.lhs.false299
	xorq	$1, %r14
	addq	$7, %r14
	jmp	.LBB10_273
.LBB10_233:
	movabsq	$0, %rax
	leaq	7(%rax,%rax), %r14
	jmp	.LBB10_273
.LBB10_238:
	movabsq	$0, %rax
	leaq	7(%rax,%rax), %r14
	jmp	.LBB10_273
.LBB10_45:
	movabsq	$0, %r14
	addq	$33, %r14
	jmp	.LBB10_273
.LBB10_275:                             # %if.then745
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_type, %rcx
	movq	$21978, %rdx            # imm = 0x55DA
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB10_219:
	movabsq	$0, %rax
	jmp	.LBB10_212
.LBB10_55:                              # %if.else183
	cmpq	$5, %rdx
	movq	$8, %r14
	je	.LBB10_273
.LBB10_56:                              # %lor.lhs.false187
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	testq	%r15, %rsi
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rax
	je	.LBB10_58
# BB#57:                                # %lor.lhs.false187
	movq	%rsi, %rax
.LBB10_58:                              # %lor.lhs.false187
	cmpq	$2, %rdx
	jne	.LBB10_60
# BB#59:                                # %lor.lhs.false187
	movq	%rsi, %rcx
.LBB10_60:                              # %lor.lhs.false187
	andq	%rcx, %rax
	addq	$7, %rax
	jmp	.LBB10_274
.Ltmp111:
	.size	get_attr_type, .Ltmp111-get_attr_type
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI10_0:
	.quad	.LBB10_268
	.quad	.LBB10_70
	.quad	.LBB10_264
	.quad	.LBB10_264
	.quad	.LBB10_70
	.quad	.LBB10_264
	.quad	.LBB10_264
	.quad	.LBB10_70
	.quad	.LBB10_264
	.quad	.LBB10_264
	.quad	.LBB10_70
	.quad	.LBB10_264
	.quad	.LBB10_264
	.quad	.LBB10_264
	.quad	.LBB10_264
	.quad	.LBB10_263
	.quad	.LBB10_264
	.quad	.LBB10_264
	.quad	.LBB10_264
	.quad	.LBB10_270
	.quad	.LBB10_245
	.quad	.LBB10_245
	.quad	.LBB10_245
	.quad	.LBB10_270
	.quad	.LBB10_245
	.quad	.LBB10_245
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_245
	.quad	.LBB10_270
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_245
	.quad	.LBB10_72
	.quad	.LBB10_272
	.quad	.LBB10_245
	.quad	.LBB10_72
	.quad	.LBB10_272
	.quad	.LBB10_254
	.quad	.LBB10_254
	.quad	.LBB10_254
	.quad	.LBB10_253
	.quad	.LBB10_253
	.quad	.LBB10_267
	.quad	.LBB10_267
	.quad	.LBB10_74
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_254
	.quad	.LBB10_254
	.quad	.LBB10_61
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_267
	.quad	.LBB10_254
	.quad	.LBB10_254
	.quad	.LBB10_48
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_267
	.quad	.LBB10_261
	.quad	.LBB10_261
	.quad	.LBB10_79
	.quad	.LBB10_83
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_261
	.quad	.LBB10_87
	.quad	.LBB10_91
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_271
	.quad	.LBB10_96
	.quad	.LBB10_254
	.quad	.LBB10_253
	.quad	.LBB10_253
	.quad	.LBB10_267
	.quad	.LBB10_267
	.quad	.LBB10_43
	.quad	.LBB10_98
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_262
	.quad	.LBB10_104
	.quad	.LBB10_104
	.quad	.LBB10_40
	.quad	.LBB10_244
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_37
	.quad	.LBB10_37
	.quad	.LBB10_244
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_35
	.quad	.LBB10_35
	.quad	.LBB10_35
	.quad	.LBB10_35
	.quad	.LBB10_244
	.quad	.LBB10_244
	.quad	.LBB10_267
	.quad	.LBB10_261
	.quad	.LBB10_267
	.quad	.LBB10_106
	.quad	.LBB10_261
	.quad	.LBB10_267
	.quad	.LBB10_106
	.quad	.LBB10_261
	.quad	.LBB10_271
	.quad	.LBB10_108
	.quad	.LBB10_261
	.quad	.LBB10_261
	.quad	.LBB10_271
	.quad	.LBB10_261
	.quad	.LBB10_261
	.quad	.LBB10_261
	.quad	.LBB10_261
	.quad	.LBB10_261
	.quad	.LBB10_261
	.quad	.LBB10_261
	.quad	.LBB10_261
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_33
	.quad	.LBB10_272
	.quad	.LBB10_249
	.quad	.LBB10_249
	.quad	.LBB10_249
	.quad	.LBB10_249
	.quad	.LBB10_31
	.quad	.LBB10_28
	.quad	.LBB10_110
	.quad	.LBB10_249
	.quad	.LBB10_272
	.quad	.LBB10_31
	.quad	.LBB10_249
	.quad	.LBB10_31
	.quad	.LBB10_249
	.quad	.LBB10_31
	.quad	.LBB10_249
	.quad	.LBB10_31
	.quad	.LBB10_249
	.quad	.LBB10_273
	.quad	.LBB10_273
	.quad	.LBB10_273
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_273
	.quad	.LBB10_273
	.quad	.LBB10_273
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_273
	.quad	.LBB10_273
	.quad	.LBB10_273
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_115
	.quad	.LBB10_112
	.quad	.LBB10_272
	.quad	.LBB10_115
	.quad	.LBB10_112
	.quad	.LBB10_272
	.quad	.LBB10_115
	.quad	.LBB10_112
	.quad	.LBB10_272
	.quad	.LBB10_115
	.quad	.LBB10_112
	.quad	.LBB10_272
	.quad	.LBB10_115
	.quad	.LBB10_115
	.quad	.LBB10_115
	.quad	.LBB10_115
	.quad	.LBB10_115
	.quad	.LBB10_115
	.quad	.LBB10_271
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_260
	.quad	.LBB10_260
	.quad	.LBB10_260
	.quad	.LBB10_260
	.quad	.LBB10_260
	.quad	.LBB10_260
	.quad	.LBB10_260
	.quad	.LBB10_260
	.quad	.LBB10_260
	.quad	.LBB10_260
	.quad	.LBB10_24
	.quad	.LBB10_117
	.quad	.LBB10_117
	.quad	.LBB10_117
	.quad	.LBB10_117
	.quad	.LBB10_19
	.quad	.LBB10_14
	.quad	.LBB10_119
	.quad	.LBB10_119
	.quad	.LBB10_119
	.quad	.LBB10_119
	.quad	.LBB10_119
	.quad	.LBB10_119
	.quad	.LBB10_121
	.quad	.LBB10_127
	.quad	.LBB10_127
	.quad	.LBB10_127
	.quad	.LBB10_127
	.quad	.LBB10_127
	.quad	.LBB10_124
	.quad	.LBB10_129
	.quad	.LBB10_129
	.quad	.LBB10_129
	.quad	.LBB10_127
	.quad	.LBB10_129
	.quad	.LBB10_129
	.quad	.LBB10_129
	.quad	.LBB10_265
	.quad	.LBB10_271
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_258
	.quad	.LBB10_257
	.quad	.LBB10_257
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_257
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_257
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_257
	.quad	.LBB10_270
	.quad	.LBB10_257
	.quad	.LBB10_257
	.quad	.LBB10_263
	.quad	.LBB10_263
	.quad	.LBB10_263
	.quad	.LBB10_263
	.quad	.LBB10_263
	.quad	.LBB10_263
	.quad	.LBB10_263
	.quad	.LBB10_263
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_12
	.quad	.LBB10_265
	.quad	.LBB10_10
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_10
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_267
	.quad	.LBB10_265
	.quad	.LBB10_267
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_267
	.quad	.LBB10_265
	.quad	.LBB10_267
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_265
	.quad	.LBB10_271
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_248
	.quad	.LBB10_266
	.quad	.LBB10_267
	.quad	.LBB10_266
	.quad	.LBB10_266
	.quad	.LBB10_267
	.quad	.LBB10_267
	.quad	.LBB10_266
	.quad	.LBB10_267
	.quad	.LBB10_266
	.quad	.LBB10_267
	.quad	.LBB10_131
	.quad	.LBB10_136
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_259
	.quad	.LBB10_140
	.quad	.LBB10_145
	.quad	.LBB10_149
	.quad	.LBB10_153
	.quad	.LBB10_156
	.quad	.LBB10_161
	.quad	.LBB10_165
	.quad	.LBB10_169
	.quad	.LBB10_174
	.quad	.LBB10_178
	.quad	.LBB10_182
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_259
	.quad	.LBB10_182
	.quad	.LBB10_182
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_259
	.quad	.LBB10_255
	.quad	.LBB10_255
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_256
	.quad	.LBB10_256
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_256
	.quad	.LBB10_256
	.quad	.LBB10_256
	.quad	.LBB10_256
	.quad	.LBB10_256
	.quad	.LBB10_184
	.quad	.LBB10_252
	.quad	.LBB10_252
	.quad	.LBB10_252
	.quad	.LBB10_252
	.quad	.LBB10_252
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_256
	.quad	.LBB10_271
	.quad	.LBB10_265
	.quad	.LBB10_270
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_196
	.quad	.LBB10_200
	.quad	.LBB10_272
	.quad	.LBB10_196
	.quad	.LBB10_200
	.quad	.LBB10_272
	.quad	.LBB10_203
	.quad	.LBB10_205
	.quad	.LBB10_213
	.quad	.LBB10_207
	.quad	.LBB10_272
	.quad	.LBB10_213
	.quad	.LBB10_213
	.quad	.LBB10_220
	.quad	.LBB10_216
	.quad	.LBB10_272
	.quad	.LBB10_220
	.quad	.LBB10_220
	.quad	.LBB10_220
	.quad	.LBB10_220
	.quad	.LBB10_223
	.quad	.LBB10_226
	.quad	.LBB10_223
	.quad	.LBB10_226
	.quad	.LBB10_223
	.quad	.LBB10_226
	.quad	.LBB10_223
	.quad	.LBB10_226
	.quad	.LBB10_223
	.quad	.LBB10_226
	.quad	.LBB10_223
	.quad	.LBB10_226
	.quad	.LBB10_223
	.quad	.LBB10_226
	.quad	.LBB10_229
	.quad	.LBB10_272
	.quad	.LBB10_247
	.quad	.LBB10_229
	.quad	.LBB10_272
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_247
	.quad	.LBB10_242
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_243
	.quad	.LBB10_265
	.quad	.LBB10_250
	.quad	.LBB10_265
	.quad	.LBB10_250
	.quad	.LBB10_250
	.quad	.LBB10_8
	.quad	.LBB10_6
	.quad	.LBB10_8
	.quad	.LBB10_246
	.quad	.LBB10_246
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_272
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_272
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_272
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_272
	.quad	.LBB10_231
	.quad	.LBB10_236
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_270
	.quad	.LBB10_270
	.quad	.LBB10_251
	.quad	.LBB10_251
	.quad	.LBB10_251
	.quad	.LBB10_251
	.quad	.LBB10_251
	.quad	.LBB10_251
	.quad	.LBB10_271
	.quad	.LBB10_271
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_272
	.quad	.LBB10_4
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_272
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_272
	.quad	.LBB10_271
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_241
	.quad	.LBB10_272
	.quad	.LBB10_241

	.text
	.globl	result_ready_cost
	.align	16, 0x90
	.type	result_ready_cost,@function
result_ready_cost:                      # @result_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp116:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp117:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp118:
	.cfi_def_cfa_offset 32
.Ltmp119:
	.cfi_offset %rbx, -32
.Ltmp120:
	.cfi_offset %r14, -24
.Ltmp121:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB11_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB11_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$806, %rax              # imm = 0x326
	ja	.LBB11_1097
# BB#3:                                 # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI11_0(,%rax,8)
.LBB11_861:                             # %sw.bb2076
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_865
# BB#862:                               # %land.lhs.true2078
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#863:                               # %lor.lhs.false2081
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#864:                               # %lor.lhs.false2084thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_865:                             # %lor.lhs.false2084
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_870
# BB#866:                               # %land.lhs.true2086
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_868
# BB#867:                               # %land.lhs.true2089
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_868:                             # %lor.lhs.false2092
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_870
# BB#869:                               # %land.lhs.true2095
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_870:                             # %if.else2099
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_877
# BB#871:                               # %land.lhs.true2101
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_874
# BB#872:                               # %land.lhs.true2104
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#873:                               # %lor.lhs.false2107
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_874:                             # %lor.lhs.false2110
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_877
# BB#875:                               # %land.lhs.true2113
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#876:                               # %lor.lhs.false2116
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_877:                             # %if.else2120
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_1097:                            # %sw.default
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_1100
# BB#1098:                              # %land.lhs.true2638
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#1099:                              # %lor.lhs.false2641
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
.LBB11_1100:                            # %if.else2645
	movq	$1, %rbx
.LBB11_1101:                            # %return
	movq	%rbx, %rax
.LBB11_1102:                            # %return
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB11_404:                             # %sw.bb857
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_408
# BB#405:                               # %land.lhs.true859
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#406:                               # %lor.lhs.false862
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#407:                               # %lor.lhs.false865thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_408:                             # %lor.lhs.false865
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_415
# BB#409:                               # %land.lhs.true867
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_411
# BB#410:                               # %lor.lhs.false870
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB11_412
.LBB11_411:                             # %land.lhs.true873
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_412:                             # %lor.lhs.false876
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_415
# BB#413:                               # %land.lhs.true879
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB11_415
# BB#414:                               # %land.lhs.true882
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_415:                             # %if.else886
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_424
# BB#416:                               # %land.lhs.true888
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_418
# BB#417:                               # %lor.lhs.false891
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB11_420
.LBB11_418:                             # %land.lhs.true894
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#419:                               # %lor.lhs.false897
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_420:                             # %lor.lhs.false900
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_424
# BB#421:                               # %land.lhs.true903
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB11_424
# BB#422:                               # %land.lhs.true906
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#423:                               # %lor.lhs.false909
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_424:                             # %if.else913
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_1090:                            # %sw.bb2618
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_1092
# BB#1091:                              # %land.lhs.true2620
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_1092:                            # %if.else2624
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_92:                              # %sw.bb204
	movl	ix86_cpu(%rip), %eax
	movq	$100, %rbx
	cmpq	$5, %rax
	je	.LBB11_1101
# BB#93:                                # %sw.bb204
	cmpq	$2, %rax
	jne	.LBB11_95
# BB#94:                                # %if.then209
	movq	$70, %rbx
	jmp	.LBB11_1101
.LBB11_1056:                            # %sw.bb2549
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_1059
# BB#1057:                              # %land.lhs.true2551
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %rbx
	jne	.LBB11_1101
# BB#1058:                              # %lor.lhs.false2554thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_1059:                            # %lor.lhs.false2554
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_1063
# BB#1060:                              # %land.lhs.true2556
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %rbx
	jne	.LBB11_1101
# BB#1061:                              # %if.else2560
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_1063
# BB#1062:                              # %land.lhs.true2562
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$2, %rbx
	je	.LBB11_1101
.LBB11_1063:                            # %if.else2566
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_600:                             # %sw.bb1385
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#601:                               # %if.else1388
	movq	$2, %rbx
	cmpq	$2, %rax
	je	.LBB11_1101
# BB#602:                               # %if.else1388
	cmpq	$5, %rax
	je	.LBB11_1101
# BB#603:                               # %if.else1393
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_78:                              # %sw.bb177
	movl	ix86_cpu(%rip), %eax
	movq	$15, %rbx
	cmpq	$5, %rax
	je	.LBB11_1101
# BB#79:                                # %sw.bb177
	cmpq	$4, %rax
	jne	.LBB11_80
# BB#82:                                # %if.then185
	movq	$10, %rbx
	jmp	.LBB11_1101
.LBB11_657:                             # %sw.bb1548
	movl	ix86_cpu(%rip), %eax
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jbe	.LBB11_658
# BB#662:                               # %if.else1560
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_604:                             # %sw.bb1394
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_607
# BB#605:                               # %land.lhs.true1396
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %rbx
	jne	.LBB11_1101
# BB#606:                               # %lor.lhs.false1399thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_607:                             # %lor.lhs.false1399
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_609
# BB#608:                               # %land.lhs.true1401
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %rbx
	jne	.LBB11_1101
.LBB11_609:                             # %if.else1405
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_931:                             # %sw.bb2236
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %esi
	cmpq	$3, %rsi
	jne	.LBB11_935
# BB#932:                               # %land.lhs.true2238
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#933:                               # %lor.lhs.false2241
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#934:                               # %lor.lhs.false2241.if.else2245_crit_edge
	movl	ix86_cpu(%rip), %esi
.LBB11_935:                             # %if.else2245
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rax
	jne	.LBB11_937
# BB#936:                               # %if.else2245
	movq	%rdx, %rax
.LBB11_937:                             # %if.else2245
	andq	%rsi, %r15
	movabsq	$4294967294, %rdi       # imm = 0xFFFFFFFE
	andq	%rsi, %rdi
	cmpq	$4, %rdi
	movq	%rcx, %rbx
	jne	.LBB11_939
# BB#938:                               # %if.else2245
	movq	%rdx, %rbx
.LBB11_939:                             # %if.else2245
	cmpq	$2, %r15
	jne	.LBB11_941
# BB#940:                               # %if.else2245
	movq	%rdx, %rcx
.LBB11_941:                             # %if.else2245
	orq	%rcx, %rbx
	andq	%rax, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_84:                              # %sw.bb187
	movl	ix86_cpu(%rip), %eax
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jbe	.LBB11_85
# BB#89:                                # %if.else199
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_1064:                            # %sw.bb2567
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#1065:                              # %select.mid4
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_859:                             # %sw.bb2072
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#860:                               # %select.mid2
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_908:                             # %sw.bb2186
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$4, %rbx
	je	.LBB11_1101
# BB#909:                               # %if.else2189
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$3, %rbx
	je	.LBB11_1101
# BB#910:                               # %if.else2194
	cmpq	$4, %rax
	jne	.LBB11_911
# BB#912:                               # %if.else2194
	movabsq	$1, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_658:                             # %sw.bb1548
	movq	$11, %rbx
	jmpq	*.LJTI11_1(,%rax,8)
.LBB11_660:                             # %if.then1556
	movq	$4, %rbx
	jmp	.LBB11_1101
.LBB11_1082:                            # %sw.bb2601
	movl	ix86_cpu(%rip), %eax
	movq	$3, %rbx
	cmpq	$5, %rax
	je	.LBB11_1101
# BB#1083:                              # %sw.bb2601
	cmpq	$3, %rax
	jne	.LBB11_1087
# BB#1084:                              # %land.lhs.true2605
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#1085:                              # %lor.lhs.false2608
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#1086:                              # %if.else2612thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_1087:                            # %if.else2612
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
# BB#1088:                              # %if.else2612
	cmpq	$4, %rax
	je	.LBB11_1101
# BB#1089:                              # %if.else2617
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_1066:                            # %sw.bb2571
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_1068
# BB#1067:                              # %land.lhs.true2573
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %rbx
	jne	.LBB11_1101
.LBB11_1068:                            # %if.else2577
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_878:                             # %sw.bb2121
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_882
# BB#879:                               # %land.lhs.true2123
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#880:                               # %lor.lhs.false2126
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#881:                               # %lor.lhs.false2129thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_882:                             # %lor.lhs.false2129
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_887
# BB#883:                               # %land.lhs.true2131
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#884:                               # %if.else2135
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_887
# BB#885:                               # %land.lhs.true2137
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#886:                               # %lor.lhs.false2140
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_887:                             # %if.else2144
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_401:                             # %sw.bb850
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_403
# BB#402:                               # %land.lhs.true852
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %rbx
	jne	.LBB11_1101
.LBB11_403:                             # %if.else856
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_652:                             # %sw.bb1536
	movl	ix86_cpu(%rip), %eax
	movq	$46, %rbx
	cmpq	$2, %rax
	je	.LBB11_1101
# BB#653:                               # %sw.bb1536
	cmpq	$5, %rax
	jne	.LBB11_655
# BB#654:                               # %if.then1541
	movq	$42, %rbx
	jmp	.LBB11_1101
.LBB11_145:                             # %sw.bb321
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_148
# BB#146:                               # %land.lhs.true323
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#147:                               # %lor.lhs.false326thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_148:                             # %lor.lhs.false326
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_151
# BB#149:                               # %land.lhs.true328
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#150:                               # %land.lhs.true328.if.else332_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_151:                             # %if.else332
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_154
# BB#152:                               # %land.lhs.true334
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %rbx
	je	.LBB11_1101
# BB#153:                               # %if.else338thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_154:                             # %if.else338
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_157
# BB#155:                               # %land.lhs.true340
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$24, %rbx
	je	.LBB11_1101
# BB#156:                               # %land.lhs.true340.if.else344_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_157:                             # %if.else344
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_160
# BB#158:                               # %land.lhs.true346
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#159:                               # %if.else350thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_160:                             # %if.else350
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_164
# BB#161:                               # %land.lhs.true352
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$4, %rbx
	je	.LBB11_1101
# BB#162:                               # %lor.lhs.false355
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#163:                               # %lor.lhs.false355.if.else359_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_164:                             # %if.else359
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_169
# BB#165:                               # %land.lhs.true361
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#166:                               # %lor.lhs.false364
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#167:                               # %lor.lhs.false367
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
# BB#168:                               # %lor.lhs.false370thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_169:                             # %lor.lhs.false370
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_173
# BB#170:                               # %land.lhs.true372
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#171:                               # %lor.lhs.false375
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#172:                               # %lor.lhs.false375.if.else379_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_173:                             # %if.else379
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jne	.LBB11_177
# BB#174:                               # %land.lhs.true381
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#175:                               # %lor.lhs.false384
	movq	recog_data+24(%rip), %rax
	movq	$17, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#176:                               # %lor.lhs.false387thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_177:                             # %lor.lhs.false387
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_180
# BB#178:                               # %land.lhs.true389
	movq	recog_data+24(%rip), %rax
	movq	$17, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB11_1101
# BB#179:                               # %lor.lhs.false392
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
.LBB11_180:                             # %if.else396
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_109:                             # %sw.bb245
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_112
# BB#110:                               # %land.lhs.true247
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#111:                               # %lor.lhs.false250thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_112:                             # %lor.lhs.false250
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_115
# BB#113:                               # %land.lhs.true252
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#114:                               # %land.lhs.true252.if.else256_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_115:                             # %if.else256
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_118
# BB#116:                               # %land.lhs.true258
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %rbx
	je	.LBB11_1101
# BB#117:                               # %if.else262thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_118:                             # %if.else262
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_121
# BB#119:                               # %land.lhs.true264
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$24, %rbx
	je	.LBB11_1101
# BB#120:                               # %land.lhs.true264.if.else268_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_121:                             # %if.else268
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_124
# BB#122:                               # %land.lhs.true270
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#123:                               # %if.else274thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_124:                             # %if.else274
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_128
# BB#125:                               # %land.lhs.true276
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$4, %rbx
	je	.LBB11_1101
# BB#126:                               # %lor.lhs.false279
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#127:                               # %lor.lhs.false279.if.else283_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_128:                             # %if.else283
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_133
# BB#129:                               # %land.lhs.true285
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#130:                               # %lor.lhs.false288
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#131:                               # %lor.lhs.false291
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
# BB#132:                               # %lor.lhs.false294thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_133:                             # %lor.lhs.false294
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_137
# BB#134:                               # %land.lhs.true296
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#135:                               # %lor.lhs.false299
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#136:                               # %lor.lhs.false299.if.else303_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_137:                             # %if.else303
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jne	.LBB11_141
# BB#138:                               # %land.lhs.true305
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#139:                               # %lor.lhs.false308
	movq	recog_data+24(%rip), %rax
	movq	$18, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#140:                               # %lor.lhs.false311thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_141:                             # %lor.lhs.false311
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_144
# BB#142:                               # %land.lhs.true313
	movq	recog_data+24(%rip), %rax
	movq	$18, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB11_1101
# BB#143:                               # %lor.lhs.false316
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
.LBB11_144:                             # %if.else320
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_888:                             # %sw.bb2145
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	jne	.LBB11_892
# BB#889:                               # %sw.bb2145
	movl	which_alternative(%rip), %ecx
	testq	%r15, %rcx
	jne	.LBB11_892
# BB#890:                               # %land.lhs.true2149
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$10, %rbx
	je	.LBB11_1101
# BB#891:                               # %if.else2153thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_892:                             # %if.else2153
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_896
# BB#893:                               # %land.lhs.true2155
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#894:                               # %lor.lhs.false2158
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#895:                               # %lor.lhs.false2158.lor.lhs.false2161_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_896:                             # %lor.lhs.false2161
	movl	which_alternative(%rip), %ecx
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB11_901
# BB#897:                               # %lor.lhs.false2161
	testq	%r15, %rcx
	jne	.LBB11_901
# BB#898:                               # %land.lhs.true2165
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#899:                               # %lor.lhs.false2168
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
# BB#900:                               # %lor.lhs.false2168.if.else2172_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB11_901:                             # %if.else2172
	testq	%r15, %rcx
	movabsq	$0, %rdx
	movabsq	$1, %rsi
	movq	%rdx, %rcx
	jne	.LBB11_903
# BB#902:                               # %if.else2172
	movq	%rsi, %rcx
.LBB11_903:                             # %if.else2172
	andq	%rax, %r15
	movabsq	$4294967294, %rdi       # imm = 0xFFFFFFFE
	andq	%rax, %rdi
	cmpq	$4, %rdi
	movq	%rdx, %rbx
	jne	.LBB11_905
# BB#904:                               # %if.else2172
	movq	%rsi, %rbx
.LBB11_905:                             # %if.else2172
	cmpq	$2, %r15
	jne	.LBB11_907
# BB#906:                               # %if.else2172
	movq	%rsi, %rdx
.LBB11_907:                             # %if.else2172
	orq	%rdx, %rbx
	andq	%rcx, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_752:                             # %sw.bb1796
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_756
# BB#753:                               # %land.lhs.true1798
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#754:                               # %lor.lhs.false1801
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#755:                               # %lor.lhs.false1804thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_756:                             # %lor.lhs.false1804
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_762
# BB#757:                               # %land.lhs.true1806
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_762
# BB#758:                               # %land.lhs.true1809
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_760
# BB#759:                               # %land.lhs.true1812
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_760:                             # %lor.lhs.false1815
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_762
# BB#761:                               # %land.lhs.true1818
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_762:                             # %if.else1822
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_770
# BB#763:                               # %land.lhs.true1824
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_770
# BB#764:                               # %land.lhs.true1827
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_767
# BB#765:                               # %land.lhs.true1830
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#766:                               # %lor.lhs.false1833
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_767:                             # %lor.lhs.false1836
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_770
# BB#768:                               # %land.lhs.true1839
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#769:                               # %lor.lhs.false1842
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_770:                             # %if.else1846
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_705:                             # %sw.bb1671
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_709
# BB#706:                               # %land.lhs.true1673
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#707:                               # %lor.lhs.false1676
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#708:                               # %lor.lhs.false1679thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_709:                             # %lor.lhs.false1679
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_715
# BB#710:                               # %land.lhs.true1681
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_715
# BB#711:                               # %land.lhs.true1684
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_713
# BB#712:                               # %land.lhs.true1687
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_713:                             # %lor.lhs.false1690
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_715
# BB#714:                               # %land.lhs.true1693
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_715:                             # %if.else1697
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_723
# BB#716:                               # %land.lhs.true1699
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_723
# BB#717:                               # %land.lhs.true1702
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_720
# BB#718:                               # %land.lhs.true1705
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#719:                               # %lor.lhs.false1708
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_720:                             # %lor.lhs.false1711
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_723
# BB#721:                               # %land.lhs.true1714
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#722:                               # %lor.lhs.false1717
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_723:                             # %if.else1721
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_663:                             # %sw.bb1561
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_667
# BB#664:                               # %land.lhs.true1563
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#665:                               # %lor.lhs.false1566
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#666:                               # %lor.lhs.false1569thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_667:                             # %lor.lhs.false1569
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_673
# BB#668:                               # %land.lhs.true1571
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_673
# BB#669:                               # %land.lhs.true1574
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_671
# BB#670:                               # %land.lhs.true1577
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_671:                             # %lor.lhs.false1580
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_673
# BB#672:                               # %land.lhs.true1583
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_673:                             # %if.else1587
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_681
# BB#674:                               # %land.lhs.true1589
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_681
# BB#675:                               # %land.lhs.true1592
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_678
# BB#676:                               # %land.lhs.true1595
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#677:                               # %lor.lhs.false1598
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_678:                             # %lor.lhs.false1601
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_681
# BB#679:                               # %land.lhs.true1604
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#680:                               # %lor.lhs.false1607
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_681:                             # %if.else1611
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_546:                             # %sw.bb1237
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_550
# BB#547:                               # %land.lhs.true1239
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#548:                               # %lor.lhs.false1242
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#549:                               # %lor.lhs.false1245thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_550:                             # %lor.lhs.false1245
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_559
# BB#551:                               # %land.lhs.true1247
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB11_553
# BB#552:                               # %lor.lhs.false1250
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB11_559
.LBB11_553:                             # %land.lhs.true1253
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_555
# BB#554:                               # %land.lhs.true1256
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_555:                             # %lor.lhs.false1259
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_557
# BB#556:                               # %land.lhs.true1262
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_557:                             # %lor.lhs.false1265
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_559
# BB#558:                               # %land.lhs.true1268
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_559:                             # %if.else1272
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_571
# BB#560:                               # %land.lhs.true1274
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB11_562
# BB#561:                               # %lor.lhs.false1277
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB11_571
.LBB11_562:                             # %land.lhs.true1280
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_565
# BB#563:                               # %land.lhs.true1283
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#564:                               # %lor.lhs.false1286
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_565:                             # %lor.lhs.false1289
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_568
# BB#566:                               # %land.lhs.true1292
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#567:                               # %lor.lhs.false1295
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_568:                             # %lor.lhs.false1298
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_571
# BB#569:                               # %land.lhs.true1301
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#570:                               # %lor.lhs.false1304
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_571:                             # %if.else1308
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_4:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_6
# BB#5:                                 # %land.lhs.true
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_6:                               # %if.else
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_80:                              # %sw.bb177
	cmpq	$2, %rax
	jne	.LBB11_83
# BB#81:                                # %if.then182
	movq	$12, %rbx
	jmp	.LBB11_1101
.LBB11_85:                              # %sw.bb187
	movq	$15, %rbx
	jmpq	*.LJTI11_2(,%rax,8)
.LBB11_86:                              # %if.then192
	movq	$12, %rbx
	jmp	.LBB11_1101
.LBB11_914:                             # %sw.bb2198
	movl	ix86_cpu(%rip), %ecx
	cmpq	$3, %rcx
	jne	.LBB11_918
# BB#915:                               # %land.lhs.true2200
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#916:                               # %lor.lhs.false2203
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#917:                               # %if.else2207thread-pre-split
	movl	ix86_cpu(%rip), %ecx
.LBB11_918:                             # %if.else2207
	andq	%r15, %rcx
	cmpq	$5, %rcx
	ja	.LBB11_920
# BB#919:                               # %if.else2207
	movq	$2, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$52, %rax
	jne	.LBB11_1101
.LBB11_920:                             # %if.else2214
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_398:                             # %sw.bb843
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_400
# BB#399:                               # %land.lhs.true845
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_400:                             # %if.else849
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_220:                             # %sw.bb483
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_223
# BB#221:                               # %land.lhs.true485
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#222:                               # %lor.lhs.false488thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_223:                             # %lor.lhs.false488
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_226
# BB#224:                               # %land.lhs.true490
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#225:                               # %land.lhs.true490.if.else494_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_226:                             # %if.else494
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_229
# BB#227:                               # %land.lhs.true496
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %rbx
	je	.LBB11_1101
# BB#228:                               # %if.else500thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_229:                             # %if.else500
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_232
# BB#230:                               # %land.lhs.true502
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$24, %rbx
	je	.LBB11_1101
# BB#231:                               # %land.lhs.true502.if.else506_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_232:                             # %if.else506
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_235
# BB#233:                               # %land.lhs.true508
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#234:                               # %if.else512thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_235:                             # %if.else512
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_239
# BB#236:                               # %land.lhs.true514
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$4, %rbx
	je	.LBB11_1101
# BB#237:                               # %lor.lhs.false517
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#238:                               # %lor.lhs.false517.if.else521_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_239:                             # %if.else521
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_244
# BB#240:                               # %land.lhs.true523
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#241:                               # %lor.lhs.false526
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#242:                               # %lor.lhs.false529
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
# BB#243:                               # %lor.lhs.false532thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_244:                             # %lor.lhs.false532
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_248
# BB#245:                               # %land.lhs.true534
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#246:                               # %lor.lhs.false537
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#247:                               # %lor.lhs.false537.if.else541_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_248:                             # %if.else541
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jne	.LBB11_252
# BB#249:                               # %land.lhs.true543
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#250:                               # %lor.lhs.false546
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#251:                               # %lor.lhs.false549thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_252:                             # %lor.lhs.false549
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_255
# BB#253:                               # %land.lhs.true551
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB11_1101
# BB#254:                               # %lor.lhs.false554
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
.LBB11_255:                             # %if.else558
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_95:                              # %if.else210
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$56, %rbx
	jb	.LBB11_1101
# BB#96:                                # %if.else210
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_992:                             # %sw.bb2377
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	jne	.LBB11_996
# BB#993:                               # %sw.bb2377
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	ja	.LBB11_996
# BB#994:                               # %land.lhs.true2385
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$10, %rbx
	je	.LBB11_1101
# BB#995:                               # %if.else2389thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_996:                             # %if.else2389
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_1000
# BB#997:                               # %land.lhs.true2391
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#998:                               # %lor.lhs.false2394
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#999:                               # %lor.lhs.false2394.lor.lhs.false2397_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_1000:                            # %lor.lhs.false2397
	movl	which_alternative(%rip), %ecx
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB11_1005
# BB#1001:                              # %lor.lhs.false2397
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB11_1005
# BB#1002:                              # %land.lhs.true2405
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#1003:                              # %lor.lhs.false2408
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
# BB#1004:                              # %lor.lhs.false2408.if.else2412_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB11_1005:                            # %if.else2412
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	andq	%rax, %rdx
	cmpq	$4, %rdx
	jne	.LBB11_1007
# BB#1006:                              # %if.else2412
	movq	$2, %rbx
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$3, %rdx
	jb	.LBB11_1101
.LBB11_1007:                            # %lor.lhs.false2428
	andq	%r15, %rcx
	cmpq	$3, %rcx
	sbbq	%rbx, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_1008
# BB#1009:                              # %lor.lhs.false2428
	movabsq	$1, %rax
	jmp	.LBB11_1010
.LBB11_942:                             # %sw.bb2259
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	cmpq	$5, %rcx
	jne	.LBB11_946
# BB#943:                               # %sw.bb2259
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_946
# BB#944:                               # %land.lhs.true2263
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$10, %rbx
	je	.LBB11_1101
# BB#945:                               # %if.else2267thread-pre-split
	movl	ix86_cpu(%rip), %ecx
.LBB11_946:                             # %if.else2267
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_950
# BB#947:                               # %land.lhs.true2269
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#948:                               # %lor.lhs.false2272
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#949:                               # %lor.lhs.false2272.lor.lhs.false2275_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB11_950:                             # %lor.lhs.false2275
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_955
# BB#951:                               # %lor.lhs.false2275
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_955
# BB#952:                               # %land.lhs.true2279
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#953:                               # %lor.lhs.false2282
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
# BB#954:                               # %if.else2286thread-pre-split
	movl	ix86_cpu(%rip), %ecx
.LBB11_955:                             # %if.else2286
	andq	%r15, %rcx
	cmpq	$5, %rcx
	ja	.LBB11_957
# BB#956:                               # %if.else2286
	movq	$2, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$52, %rax
	jne	.LBB11_1101
.LBB11_957:                             # %if.else2293
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_817:                             # %sw.bb1963
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_821
# BB#818:                               # %land.lhs.true1965
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#819:                               # %lor.lhs.false1968
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#820:                               # %lor.lhs.false1971thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_821:                             # %lor.lhs.false1971
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_827
# BB#822:                               # %land.lhs.true1973
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_827
# BB#823:                               # %land.lhs.true1976
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_825
# BB#824:                               # %land.lhs.true1979
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_825:                             # %lor.lhs.false1982
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_827
# BB#826:                               # %land.lhs.true1985
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_827:                             # %if.else1989
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_835
# BB#828:                               # %land.lhs.true1991
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_835
# BB#829:                               # %land.lhs.true1994
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_832
# BB#830:                               # %land.lhs.true1997
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#831:                               # %lor.lhs.false2000
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_832:                             # %lor.lhs.false2003
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_835
# BB#833:                               # %land.lhs.true2006
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#834:                               # %lor.lhs.false2009
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_835:                             # %if.else2013
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_1011:                            # %sw.bb2438
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_1015
# BB#1012:                              # %land.lhs.true2440
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#1013:                              # %lor.lhs.false2443
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#1014:                              # %lor.lhs.false2443.if.else2447_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_1015:                            # %if.else2447
	movl	which_alternative(%rip), %ecx
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	andq	%rax, %rdx
	cmpq	$4, %rdx
	jne	.LBB11_1017
# BB#1016:                              # %if.else2447
	movq	$2, %rbx
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$3, %rdx
	jb	.LBB11_1101
.LBB11_1017:                            # %lor.lhs.false2463
	andq	%r15, %rcx
	cmpq	$3, %rcx
	sbbq	%rbx, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_1018
# BB#1019:                              # %lor.lhs.false2463
	movabsq	$1, %rax
	jmp	.LBB11_1020
.LBB11_572:                             # %sw.bb1309
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_576
# BB#573:                               # %land.lhs.true1311
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#574:                               # %lor.lhs.false1314
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#575:                               # %lor.lhs.false1317thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_576:                             # %lor.lhs.false1317
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_585
# BB#577:                               # %land.lhs.true1319
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB11_579
# BB#578:                               # %lor.lhs.false1322
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB11_585
.LBB11_579:                             # %land.lhs.true1325
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_581
# BB#580:                               # %land.lhs.true1328
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_581:                             # %lor.lhs.false1331
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_583
# BB#582:                               # %land.lhs.true1334
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_583:                             # %lor.lhs.false1337
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_585
# BB#584:                               # %land.lhs.true1340
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_585:                             # %if.else1344
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$2, %rbx
	jne	.LBB11_587
# BB#586:                               # %if.else1344
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	je	.LBB11_1101
.LBB11_587:                             # %lor.lhs.false1348
	cmpq	$2, %rax
	jne	.LBB11_599
# BB#588:                               # %land.lhs.true1350
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB11_590
# BB#589:                               # %lor.lhs.false1353
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB11_599
.LBB11_590:                             # %land.lhs.true1356
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_593
# BB#591:                               # %land.lhs.true1359
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#592:                               # %lor.lhs.false1362
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_593:                             # %lor.lhs.false1365
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_596
# BB#594:                               # %land.lhs.true1368
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#595:                               # %lor.lhs.false1371
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_596:                             # %lor.lhs.false1374
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_599
# BB#597:                               # %land.lhs.true1377
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#598:                               # %lor.lhs.false1380
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_599:                             # %if.else1384
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_425:                             # %sw.bb914
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_429
# BB#426:                               # %land.lhs.true916
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#427:                               # %lor.lhs.false919
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#428:                               # %lor.lhs.false922thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_429:                             # %lor.lhs.false922
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_438
# BB#430:                               # %land.lhs.true924
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB11_434
# BB#431:                               # %land.lhs.true926
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_433
# BB#432:                               # %lor.lhs.false929
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB11_434
.LBB11_433:                             # %land.lhs.true932
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_434:                             # %lor.lhs.false935
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_438
# BB#435:                               # %lor.lhs.false935
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_438
# BB#436:                               # %land.lhs.true940
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB11_438
# BB#437:                               # %land.lhs.true943
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_438:                             # %if.else947
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_449
# BB#439:                               # %land.lhs.true949
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB11_444
# BB#440:                               # %land.lhs.true951
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_442
# BB#441:                               # %lor.lhs.false954
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB11_444
.LBB11_442:                             # %land.lhs.true957
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#443:                               # %lor.lhs.false960
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_444:                             # %lor.lhs.false963
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_449
# BB#445:                               # %lor.lhs.false963
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_449
# BB#446:                               # %land.lhs.true968
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB11_449
# BB#447:                               # %land.lhs.true971
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#448:                               # %lor.lhs.false974
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_449:                             # %if.else978
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_295:                             # %sw.bb645
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_298
# BB#296:                               # %land.lhs.true647
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#297:                               # %lor.lhs.false650thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_298:                             # %lor.lhs.false650
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_301
# BB#299:                               # %land.lhs.true652
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#300:                               # %land.lhs.true652.if.else656_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_301:                             # %if.else656
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_304
# BB#302:                               # %land.lhs.true658
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %rbx
	je	.LBB11_1101
# BB#303:                               # %if.else662thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_304:                             # %if.else662
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_307
# BB#305:                               # %land.lhs.true664
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$24, %rbx
	je	.LBB11_1101
# BB#306:                               # %land.lhs.true664.if.else668_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_307:                             # %if.else668
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_310
# BB#308:                               # %land.lhs.true670
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#309:                               # %if.else674thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_310:                             # %if.else674
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_314
# BB#311:                               # %land.lhs.true676
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$4, %rbx
	je	.LBB11_1101
# BB#312:                               # %lor.lhs.false679
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#313:                               # %lor.lhs.false679.if.else683_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_314:                             # %if.else683
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_319
# BB#315:                               # %land.lhs.true685
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#316:                               # %lor.lhs.false688
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#317:                               # %lor.lhs.false691
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
# BB#318:                               # %lor.lhs.false694thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_319:                             # %lor.lhs.false694
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_323
# BB#320:                               # %land.lhs.true696
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#321:                               # %lor.lhs.false699
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#322:                               # %lor.lhs.false699.if.else703_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_323:                             # %if.else703
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jne	.LBB11_327
# BB#324:                               # %land.lhs.true705
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#325:                               # %lor.lhs.false708
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#326:                               # %lor.lhs.false711thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_327:                             # %lor.lhs.false711
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_330
# BB#328:                               # %land.lhs.true713
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB11_1101
# BB#329:                               # %lor.lhs.false716
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
.LBB11_330:                             # %if.else720
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_83:                              # %if.else186
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_661:                             # %if.then1559
	movq	$2, %rbx
	jmp	.LBB11_1101
.LBB11_659:                             # %if.then1553
	movq	$5, %rbx
	jmp	.LBB11_1101
.LBB11_1069:                            # %sw.bb2578
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$5, %rax
	movq	$3, %rbx
	jne	.LBB11_1071
# BB#1070:                              # %sw.bb2578
	testq	%r15, %rcx
	je	.LBB11_1101
.LBB11_1071:                            # %lor.lhs.false2582
	cmpq	$3, %rax
	jne	.LBB11_1075
# BB#1072:                              # %land.lhs.true2584
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#1073:                              # %lor.lhs.false2587
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#1074:                              # %lor.lhs.false2587.if.else2591_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB11_1075:                            # %if.else2591
	andq	%r15, %rax
	cmpq	$4, %rax
	movabsq	$0, %rdx
	movabsq	$1, %rsi
	movq	%rdx, %rbx
	jne	.LBB11_1077
# BB#1076:                              # %if.else2591
	movq	%rsi, %rbx
.LBB11_1077:                            # %if.else2591
	testq	%r15, %rcx
	movq	%rdx, %rcx
	jne	.LBB11_1079
# BB#1078:                              # %if.else2591
	movq	%rsi, %rcx
.LBB11_1079:                            # %if.else2591
	cmpq	$2, %rax
	jne	.LBB11_1081
# BB#1080:                              # %if.else2591
	movq	%rsi, %rdx
.LBB11_1081:                            # %if.else2591
	orq	%rdx, %rbx
	andq	%rcx, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_1021:                            # %sw.bb2473
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_1024
# BB#1022:                              # %sw.bb2473
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_1024
# BB#1023:                              # %land.lhs.true2477
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %rbx
	jne	.LBB11_1101
.LBB11_1024:                            # %if.else2481
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_979:                             # %sw.bb2349
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_983
# BB#980:                               # %land.lhs.true2351
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#981:                               # %lor.lhs.false2354
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#982:                               # %lor.lhs.false2354.lor.lhs.false2357_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_983:                             # %lor.lhs.false2357
	movl	which_alternative(%rip), %ecx
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB11_987
# BB#984:                               # %lor.lhs.false2357
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB11_987
# BB#985:                               # %land.lhs.true2361
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#986:                               # %land.lhs.true2361.if.else2365_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB11_987:                             # %if.else2365
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_991
# BB#988:                               # %if.else2365
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB11_991
# BB#989:                               # %land.lhs.true2369
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#990:                               # %lor.lhs.false2372
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_991:                             # %if.else2376
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_610:                             # %sw.bb1406
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_614
# BB#611:                               # %land.lhs.true1408
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#612:                               # %lor.lhs.false1411
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#613:                               # %lor.lhs.false1411.lor.lhs.false1414_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_614:                             # %lor.lhs.false1414
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_621
# BB#615:                               # %lor.lhs.false1414
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB11_621
# BB#616:                               # %land.lhs.true1420
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_618
# BB#617:                               # %land.lhs.true1420
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB11_619
.LBB11_618:                             # %land.lhs.true1427
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_619:                             # %lor.lhs.false1430
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_621
# BB#620:                               # %land.lhs.true1433
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_621:                             # %if.else1437
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_630
# BB#622:                               # %if.else1437
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB11_630
# BB#623:                               # %land.lhs.true1443
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_625
# BB#624:                               # %land.lhs.true1443
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB11_627
.LBB11_625:                             # %land.lhs.true1450
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#626:                               # %lor.lhs.false1453
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_627:                             # %lor.lhs.false1456
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_630
# BB#628:                               # %land.lhs.true1459
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#629:                               # %lor.lhs.false1462
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_630:                             # %if.else1466
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_383:                             # %sw.bb816
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_386
# BB#384:                               # %land.lhs.true818
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#385:                               # %if.else822thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_386:                             # %if.else822
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB11_393
# BB#387:                               # %if.else822
	movq	$4, %rbx
	cmpq	$5, %rcx
	je	.LBB11_1101
# BB#388:                               # %if.else822
	cmpq	$3, %rcx
	jne	.LBB11_394
# BB#389:                               # %land.lhs.true827
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_393
# BB#390:                               # %lor.lhs.false830
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_393
# BB#391:                               # %lor.lhs.false833
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB11_393
# BB#392:                               # %lor.lhs.false833
	movl	ix86_cpu(%rip), %eax
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB11_393
.LBB11_394:                             # %if.else839
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_395
# BB#396:                               # %if.else839
	movabsq	$1, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_361:                             # %sw.bb775
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rcx
	jne	.LBB11_365
# BB#362:                               # %sw.bb775
	testq	%r15, %rax
	jne	.LBB11_365
# BB#363:                               # %land.lhs.true779
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#364:                               # %if.else783thread-pre-split
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB11_365:                             # %if.else783
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_367
# BB#366:                               # %if.else783
	movq	$4, %rbx
	testq	%r15, %rax
	je	.LBB11_1101
.LBB11_367:                             # %if.else788
	cmpq	$3, %rcx
	jne	.LBB11_374
# BB#368:                               # %land.lhs.true790
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#369:                               # %lor.lhs.false793
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#370:                               # %lor.lhs.false796
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB11_372
# BB#371:                               # %lor.lhs.false801.thread
	movl	ix86_cpu(%rip), %edx
	xorq	%rcx, %rcx
	jmp	.LBB11_379
.LBB11_97:                              # %sw.bb216
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$5, %rax
	jne	.LBB11_99
# BB#98:                                # %sw.bb216
	movq	$100, %rbx
	testq	%r15, %rcx
	je	.LBB11_1101
.LBB11_99:                              # %if.else221
	cmpq	$2, %rax
	jne	.LBB11_101
# BB#100:                               # %if.else221
	movq	$70, %rbx
	testq	%r15, %rcx
	je	.LBB11_1101
.LBB11_101:                             # %if.else226
	cmpq	$4, %rax
	movq	$56, %rbx
	jne	.LBB11_103
# BB#102:                               # %if.else226
	testq	%r15, %rcx
	je	.LBB11_1101
.LBB11_103:                             # %lor.lhs.false230
	cmpq	$3, %rax
	jne	.LBB11_105
# BB#104:                               # %lor.lhs.false230
	testq	%r15, %rcx
	je	.LBB11_1101
.LBB11_105:                             # %if.else235
	cmpq	$3, %rax
	jne	.LBB11_108
# BB#106:                               # %land.lhs.true237
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#107:                               # %lor.lhs.false240
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
.LBB11_108:                             # %if.else244
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_66:                              # %sw.bb147
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$5, %rax
	jne	.LBB11_68
# BB#67:                                # %sw.bb147
	movq	$7, %rbx
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jb	.LBB11_1101
.LBB11_68:                              # %if.else154
	cmpq	$3, %rax
	jne	.LBB11_69
# BB#70:                                # %land.lhs.true156
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#71:                                # %lor.lhs.false159
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#72:                                # %if.else163
	movl	which_alternative(%rip), %edx
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rdx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	cmpq	$3, %rax
	jne	.LBB11_74
# BB#73:                                # %if.else163
	movq	$2, %rbx
	cmpq	$2, %rdx
	jb	.LBB11_1101
	jmp	.LBB11_74
.LBB11_53:                              # %sw.bb117
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$7, %rbx
	je	.LBB11_1101
# BB#54:                                # %if.else120
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rcx, %rax
	cmpq	$2, %rax
	jne	.LBB11_55
# BB#56:                                # %if.else120
	movabsq	$1, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_655:                             # %if.else1542
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$17, %rbx
	jb	.LBB11_1101
# BB#656:                               # %if.else1542
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_88:                              # %if.then198
	movq	$3, %rbx
	jmp	.LBB11_1101
.LBB11_87:                              # %if.then195
	movq	$10, %rbx
	jmp	.LBB11_1101
.LBB11_911:
	movabsq	$0, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_1093:                            # %sw.bb2625
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB11_1095
# BB#1094:
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_1042:                            # %sw.bb2519
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_1046
# BB#1043:                              # %land.lhs.true2521
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#1044:                              # %lor.lhs.false2524
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#1045:                              # %lor.lhs.false2524.if.else2528_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_1046:                            # %if.else2528
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_1055
# BB#1047:                              # %if.else2528
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB11_1055
# BB#1048:                              # %if.else2528
	cmpq	$5, %rax
	je	.LBB11_1055
# BB#1049:                              # %if.else2528
	cmpq	$6, %rax
	je	.LBB11_1055
# BB#1050:                              # %if.else2528
	cmpq	$7, %rax
	je	.LBB11_1055
# BB#1051:                              # %if.else2528
	cmpq	$8, %rax
	je	.LBB11_1055
# BB#1052:                              # %if.else2528
	cmpq	$9, %rax
	je	.LBB11_1055
# BB#1053:                              # %if.else2528
	movl	flag_pic(%rip), %eax
	testq	%r15, %rax
	je	.LBB11_1055
# BB#1054:                              # %land.lhs.true2544
	movq	recog_data+8(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB11_1101
.LBB11_1055:                            # %if.else2548
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_1038:                            # %sw.bb2510
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_1041
# BB#1039:                              # %sw.bb2510
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB11_1041
# BB#1040:                              # %land.lhs.true2514
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %rbx
	jne	.LBB11_1101
.LBB11_1041:                            # %if.else2518
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_1025:                            # %sw.bb2482
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_1029
# BB#1026:                              # %land.lhs.true2484
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#1027:                              # %lor.lhs.false2487
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#1028:                              # %lor.lhs.false2487.if.else2491_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_1029:                            # %if.else2491
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_1037
# BB#1030:                              # %if.else2491
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB11_1037
# BB#1031:                              # %if.else2491
	cmpq	$6, %rax
	je	.LBB11_1037
# BB#1032:                              # %if.else2491
	cmpq	$7, %rax
	je	.LBB11_1037
# BB#1033:                              # %if.else2491
	cmpq	$8, %rax
	je	.LBB11_1037
# BB#1034:                              # %if.else2491
	cmpq	$4, %rax
	je	.LBB11_1037
# BB#1035:                              # %if.else2491
	movl	flag_pic(%rip), %eax
	testq	%r15, %rax
	je	.LBB11_1037
# BB#1036:                              # %land.lhs.true2505
	movq	recog_data+8(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB11_1101
.LBB11_1037:                            # %if.else2509
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_958:                             # %sw.bb2294
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$5, %rax
	jne	.LBB11_963
# BB#959:                               # %sw.bb2294
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	ja	.LBB11_963
# BB#960:                               # %land.lhs.true2300
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_962
# BB#961:                               # %land.lhs.true2300
	movq	$10, %rbx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
.LBB11_962:                             # %if.else2306thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_963:                             # %if.else2306
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$3, %rdx
	jne	.LBB11_967
# BB#964:                               # %land.lhs.true2308
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#965:                               # %lor.lhs.false2311
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#966:                               # %lor.lhs.false2311.lor.lhs.false2314_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB11_967:                             # %lor.lhs.false2314
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_973
# BB#968:                               # %lor.lhs.false2314
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB11_973
# BB#969:                               # %land.lhs.true2320
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_970
# BB#972:                               # %land.lhs.true2326
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	movq	$3, %rbx
	je	.LBB11_1101
	jmp	.LBB11_973
.LBB11_921:                             # %sw.bb2215
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_925
# BB#922:                               # %land.lhs.true2217
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#923:                               # %lor.lhs.false2220
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#924:                               # %if.else2224thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_925:                             # %if.else2224
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$5, %rax
	movq	$2, %rbx
	jne	.LBB11_927
# BB#926:                               # %if.else2224
	testq	%r15, %rcx
	jne	.LBB11_1101
.LBB11_927:                             # %lor.lhs.false2228
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB11_930
# BB#928:                               # %land.lhs.true2230
	cmpq	$2, %rax
	je	.LBB11_1101
# BB#929:                               # %land.lhs.true2230
	cmpq	$4, %rax
	je	.LBB11_1101
.LBB11_930:                             # %if.else2235
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_836:                             # %sw.bb2014
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_840
# BB#837:                               # %land.lhs.true2016
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#838:                               # %lor.lhs.false2019
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#839:                               # %lor.lhs.false2022thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_840:                             # %lor.lhs.false2022
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_846
# BB#841:                               # %land.lhs.true2024
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_846
# BB#842:                               # %land.lhs.true2027
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_844
# BB#843:                               # %land.lhs.true2030
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_844:                             # %lor.lhs.false2033
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_846
# BB#845:                               # %land.lhs.true2036
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_846:                             # %if.else2040
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_850
# BB#847:                               # %land.lhs.true2042
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#848:                               # %lor.lhs.false2044
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#849:                               # %lor.lhs.false2047thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_850:                             # %lor.lhs.false2047
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_858
# BB#851:                               # %land.lhs.true2049
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_858
# BB#852:                               # %land.lhs.true2052
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_855
# BB#853:                               # %land.lhs.true2055
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#854:                               # %lor.lhs.false2058
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_855:                             # %lor.lhs.false2061
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_858
# BB#856:                               # %land.lhs.true2064
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#857:                               # %lor.lhs.false2067
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_858:                             # %if.else2071
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_794:                             # %sw.bb1905
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_798
# BB#795:                               # %land.lhs.true1907
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#796:                               # %lor.lhs.false1910
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#797:                               # %lor.lhs.false1913thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_798:                             # %lor.lhs.false1913
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_804
# BB#799:                               # %land.lhs.true1915
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_804
# BB#800:                               # %land.lhs.true1918
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_802
# BB#801:                               # %land.lhs.true1921
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_802:                             # %lor.lhs.false1924
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_804
# BB#803:                               # %land.lhs.true1927
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_804:                             # %if.else1931
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_808
# BB#805:                               # %land.lhs.true1933
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#806:                               # %lor.lhs.false1935
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#807:                               # %lor.lhs.false1938thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_808:                             # %lor.lhs.false1938
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_816
# BB#809:                               # %land.lhs.true1940
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_816
# BB#810:                               # %land.lhs.true1943
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_813
# BB#811:                               # %land.lhs.true1946
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#812:                               # %lor.lhs.false1949
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_813:                             # %lor.lhs.false1952
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_816
# BB#814:                               # %land.lhs.true1955
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#815:                               # %lor.lhs.false1958
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_816:                             # %if.else1962
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_771:                             # %sw.bb1847
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_775
# BB#772:                               # %land.lhs.true1849
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#773:                               # %lor.lhs.false1852
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#774:                               # %lor.lhs.false1855thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_775:                             # %lor.lhs.false1855
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_781
# BB#776:                               # %land.lhs.true1857
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_781
# BB#777:                               # %land.lhs.true1860
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_779
# BB#778:                               # %land.lhs.true1863
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_779:                             # %lor.lhs.false1866
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_781
# BB#780:                               # %land.lhs.true1869
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_781:                             # %if.else1873
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_785
# BB#782:                               # %land.lhs.true1875
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %rbx
	jne	.LBB11_1101
# BB#783:                               # %lor.lhs.false1877
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB11_1101
# BB#784:                               # %lor.lhs.false1880thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_785:                             # %lor.lhs.false1880
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_793
# BB#786:                               # %land.lhs.true1882
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_793
# BB#787:                               # %land.lhs.true1885
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_790
# BB#788:                               # %land.lhs.true1888
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#789:                               # %lor.lhs.false1891
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_790:                             # %lor.lhs.false1894
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_793
# BB#791:                               # %land.lhs.true1897
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#792:                               # %lor.lhs.false1900
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_793:                             # %if.else1904
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_724:                             # %sw.bb1722
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_728
# BB#725:                               # %land.lhs.true1724
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#726:                               # %lor.lhs.false1727
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#727:                               # %lor.lhs.false1727.lor.lhs.false1730_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_728:                             # %lor.lhs.false1730
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_737
# BB#729:                               # %lor.lhs.false1730
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_737
# BB#730:                               # %land.lhs.true1734
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_737
# BB#731:                               # %land.lhs.true1737
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_733
# BB#732:                               # %land.lhs.true1740
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_733:                             # %lor.lhs.false1743
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_735
# BB#734:                               # %land.lhs.true1746
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_735:                             # %lor.lhs.false1749
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_737
# BB#736:                               # %land.lhs.true1752
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_737:                             # %if.else1756
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rcx
	movq	$2, %rbx
	jne	.LBB11_739
# BB#738:                               # %if.else1756
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	je	.LBB11_1101
.LBB11_739:                             # %lor.lhs.false1760
	cmpq	$2, %rcx
	jne	.LBB11_751
# BB#740:                               # %lor.lhs.false1760
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_751
# BB#741:                               # %land.lhs.true1764
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_751
# BB#742:                               # %land.lhs.true1767
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_745
# BB#743:                               # %land.lhs.true1770
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#744:                               # %lor.lhs.false1773
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_745:                             # %lor.lhs.false1776
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_748
# BB#746:                               # %land.lhs.true1779
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#747:                               # %lor.lhs.false1782
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_748:                             # %lor.lhs.false1785
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_751
# BB#749:                               # %land.lhs.true1788
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#750:                               # %lor.lhs.false1791
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_751:                             # %if.else1795
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_682:                             # %sw.bb1612
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_686
# BB#683:                               # %land.lhs.true1614
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#684:                               # %lor.lhs.false1617
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#685:                               # %lor.lhs.false1617.lor.lhs.false1620_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_686:                             # %lor.lhs.false1620
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_693
# BB#687:                               # %lor.lhs.false1620
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_693
# BB#688:                               # %land.lhs.true1624
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_693
# BB#689:                               # %land.lhs.true1627
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_691
# BB#690:                               # %land.lhs.true1630
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_691:                             # %lor.lhs.false1633
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_693
# BB#692:                               # %land.lhs.true1636
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_693:                             # %if.else1640
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rcx
	jne	.LBB11_695
# BB#694:                               # %if.else1640
	movq	$2, %rbx
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$3, %rdx
	je	.LBB11_1101
.LBB11_695:                             # %lor.lhs.false1644
	cmpq	$2, %rcx
	jne	.LBB11_704
# BB#696:                               # %lor.lhs.false1644
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_704
# BB#697:                               # %land.lhs.true1648
	movq	recog_data+16(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB11_704
# BB#698:                               # %land.lhs.true1651
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_701
# BB#699:                               # %land.lhs.true1654
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#700:                               # %lor.lhs.false1657
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_701:                             # %lor.lhs.false1660
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_704
# BB#702:                               # %land.lhs.true1663
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#703:                               # %lor.lhs.false1666
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_704:                             # %if.else1670
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_631:                             # %sw.bb1467
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_635
# BB#632:                               # %land.lhs.true1469
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#633:                               # %lor.lhs.false1472
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#634:                               # %lor.lhs.false1472.lor.lhs.false1475_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_635:                             # %lor.lhs.false1475
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_642
# BB#636:                               # %lor.lhs.false1475
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB11_642
# BB#637:                               # %land.lhs.true1483
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_639
# BB#638:                               # %land.lhs.true1483
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	jb	.LBB11_640
.LBB11_639:                             # %land.lhs.true1492
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_640:                             # %lor.lhs.false1495
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_642
# BB#641:                               # %land.lhs.true1498
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_642:                             # %if.else1502
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_651
# BB#643:                               # %if.else1502
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB11_651
# BB#644:                               # %land.lhs.true1510
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_646
# BB#645:                               # %land.lhs.true1510
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	jb	.LBB11_648
.LBB11_646:                             # %land.lhs.true1519
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#647:                               # %lor.lhs.false1522
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_648:                             # %lor.lhs.false1525
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_651
# BB#649:                               # %land.lhs.true1528
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#650:                               # %lor.lhs.false1531
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_651:                             # %if.else1535
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_510:                             # %sw.bb1141
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_514
# BB#511:                               # %land.lhs.true1143
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#512:                               # %lor.lhs.false1146
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#513:                               # %lor.lhs.false1146.lor.lhs.false1149_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_514:                             # %lor.lhs.false1149
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_527
# BB#515:                               # %lor.lhs.false1149
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB11_527
# BB#516:                               # %land.lhs.true1153
	movl	x86_double_with_add(%rip), %ebx
	testq	$4, %rbx
	movq	$2, %rcx
	je	.LBB11_519
# BB#517:                               # %land.lhs.true1157
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB11_521
# BB#518:                               # %land.lhs.true1157.lor.lhs.false1160_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB11_519:                             # %lor.lhs.false1160
	movq	$1, %rax
	shlq	%cl, %rax
	testq	%rbx, %rax
	je	.LBB11_521
# BB#520:                               # %lor.lhs.false1164
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB11_527
.LBB11_521:                             # %land.lhs.true1167
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_523
# BB#522:                               # %land.lhs.true1170
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_523:                             # %lor.lhs.false1173
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_525
# BB#524:                               # %land.lhs.true1176
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_525:                             # %lor.lhs.false1179
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_527
# BB#526:                               # %land.lhs.true1182
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_527:                             # %if.else1186
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rcx
	jne	.LBB11_529
# BB#528:                               # %if.else1186
	movq	$2, %rbx
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	je	.LBB11_1101
.LBB11_529:                             # %lor.lhs.false1190
	cmpq	$2, %rcx
	jne	.LBB11_545
# BB#530:                               # %lor.lhs.false1190
	testq	%r15, %rax
	jne	.LBB11_545
# BB#531:                               # %land.lhs.true1194
	movl	x86_double_with_add(%rip), %ebx
	testq	$4, %rbx
	movq	$2, %rax
	je	.LBB11_534
# BB#532:                               # %land.lhs.true1198
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB11_536
# BB#533:                               # %land.lhs.true1198.lor.lhs.false1201_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_534:                             # %lor.lhs.false1201
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	%rbx, %rdx
	je	.LBB11_536
# BB#535:                               # %lor.lhs.false1205
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB11_545
.LBB11_536:                             # %land.lhs.true1208
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_539
# BB#537:                               # %land.lhs.true1211
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#538:                               # %lor.lhs.false1214
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_539:                             # %lor.lhs.false1217
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_542
# BB#540:                               # %land.lhs.true1220
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#541:                               # %lor.lhs.false1223
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_542:                             # %lor.lhs.false1226
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_545
# BB#543:                               # %land.lhs.true1229
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#544:                               # %lor.lhs.false1232
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_545:                             # %if.else1236
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_478:                             # %sw.bb1055
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_482
# BB#479:                               # %land.lhs.true1057
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#480:                               # %lor.lhs.false1060
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#481:                               # %lor.lhs.false1063thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_482:                             # %lor.lhs.false1063
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_494
# BB#483:                               # %land.lhs.true1065
	movl	x86_double_with_add(%rip), %ebx
	testq	$4, %rbx
	movq	$2, %rcx
	je	.LBB11_486
# BB#484:                               # %land.lhs.true1067
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB11_488
# BB#485:                               # %land.lhs.true1067.lor.lhs.false1070_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB11_486:                             # %lor.lhs.false1070
	movq	$1, %rax
	shlq	%cl, %rax
	testq	%rbx, %rax
	je	.LBB11_488
# BB#487:                               # %lor.lhs.false1074
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB11_494
.LBB11_488:                             # %land.lhs.true1077
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_490
# BB#489:                               # %land.lhs.true1080
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_490:                             # %lor.lhs.false1083
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_492
# BB#491:                               # %land.lhs.true1086
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_492:                             # %lor.lhs.false1089
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_494
# BB#493:                               # %land.lhs.true1092
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_494:                             # %if.else1096
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB11_509
# BB#495:                               # %land.lhs.true1098
	movl	x86_double_with_add(%rip), %ebx
	testq	$4, %rbx
	movq	$2, %rax
	je	.LBB11_498
# BB#496:                               # %land.lhs.true1102
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB11_500
# BB#497:                               # %land.lhs.true1102.lor.lhs.false1105_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_498:                             # %lor.lhs.false1105
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	%rbx, %rdx
	je	.LBB11_500
# BB#499:                               # %lor.lhs.false1109
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB11_509
.LBB11_500:                             # %land.lhs.true1112
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_503
# BB#501:                               # %land.lhs.true1115
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#502:                               # %lor.lhs.false1118
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_503:                             # %lor.lhs.false1121
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_506
# BB#504:                               # %land.lhs.true1124
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#505:                               # %lor.lhs.false1127
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_506:                             # %lor.lhs.false1130
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_509
# BB#507:                               # %land.lhs.true1133
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#508:                               # %lor.lhs.false1136
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_509:                             # %if.else1140
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_450:                             # %sw.bb979
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_454
# BB#451:                               # %land.lhs.true981
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#452:                               # %lor.lhs.false984
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#453:                               # %lor.lhs.false987thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_454:                             # %lor.lhs.false987
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_463
# BB#455:                               # %land.lhs.true989
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB11_457
# BB#456:                               # %lor.lhs.false992
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB11_463
.LBB11_457:                             # %land.lhs.true995
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_459
# BB#458:                               # %land.lhs.true998
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_459:                             # %lor.lhs.false1001
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_461
# BB#460:                               # %land.lhs.true1004
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_461:                             # %lor.lhs.false1007
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_463
# BB#462:                               # %land.lhs.true1010
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_463:                             # %if.else1014
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$2, %rbx
	jne	.LBB11_465
# BB#464:                               # %if.else1014
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB11_1101
.LBB11_465:                             # %lor.lhs.false1018
	cmpq	$2, %rax
	jne	.LBB11_477
# BB#466:                               # %land.lhs.true1020
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB11_468
# BB#467:                               # %lor.lhs.false1023
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB11_477
.LBB11_468:                             # %land.lhs.true1026
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_471
# BB#469:                               # %land.lhs.true1029
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#470:                               # %lor.lhs.false1032
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_471:                             # %lor.lhs.false1035
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB11_474
# BB#472:                               # %land.lhs.true1038
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#473:                               # %lor.lhs.false1041
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_474:                             # %lor.lhs.false1044
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_477
# BB#475:                               # %land.lhs.true1047
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
# BB#476:                               # %lor.lhs.false1050
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_477:                             # %if.else1054
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_346:                             # %sw.bb748
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_349
# BB#347:                               # %land.lhs.true750
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#348:                               # %if.else754thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_349:                             # %if.else754
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB11_356
# BB#350:                               # %if.else754
	movq	$4, %rbx
	cmpq	$5, %rcx
	je	.LBB11_1101
# BB#351:                               # %if.else754
	cmpq	$3, %rcx
	jne	.LBB11_357
# BB#352:                               # %land.lhs.true759
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_356
# BB#353:                               # %lor.lhs.false762
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_356
# BB#354:                               # %lor.lhs.false765
	movq	recog_data+24(%rip), %rax
	movq	$17, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB11_356
# BB#355:                               # %lor.lhs.false765
	movl	ix86_cpu(%rip), %eax
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB11_356
.LBB11_357:                             # %if.else771
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_358
# BB#359:                               # %if.else771
	movabsq	$1, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_331:                             # %sw.bb721
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_334
# BB#332:                               # %land.lhs.true723
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#333:                               # %if.else727thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_334:                             # %if.else727
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB11_341
# BB#335:                               # %if.else727
	movq	$4, %rbx
	cmpq	$5, %rcx
	je	.LBB11_1101
# BB#336:                               # %if.else727
	cmpq	$3, %rcx
	jne	.LBB11_342
# BB#337:                               # %land.lhs.true732
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_341
# BB#338:                               # %lor.lhs.false735
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_341
# BB#339:                               # %lor.lhs.false738
	movq	recog_data+24(%rip), %rax
	movq	$18, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB11_341
# BB#340:                               # %lor.lhs.false738
	movl	ix86_cpu(%rip), %eax
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB11_341
.LBB11_342:                             # %if.else744
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB11_343
# BB#344:                               # %if.else744
	movabsq	$1, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_256:                             # %sw.bb559
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_259
# BB#257:                               # %land.lhs.true561
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#258:                               # %lor.lhs.false564thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_259:                             # %lor.lhs.false564
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_262
# BB#260:                               # %land.lhs.true566
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#261:                               # %land.lhs.true566.if.else570_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_262:                             # %if.else570
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_265
# BB#263:                               # %land.lhs.true572
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %rbx
	je	.LBB11_1101
# BB#264:                               # %if.else576thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_265:                             # %if.else576
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_268
# BB#266:                               # %land.lhs.true578
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$24, %rbx
	je	.LBB11_1101
# BB#267:                               # %land.lhs.true578.if.else582_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_268:                             # %if.else582
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_272
# BB#269:                               # %if.else582
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB11_272
# BB#270:                               # %land.lhs.true586
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#271:                               # %if.else590thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_272:                             # %if.else590
	andq	%r15, %rax
	cmpq	$5, %rax
	jne	.LBB11_276
# BB#273:                               # %land.lhs.true592
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$4, %rbx
	je	.LBB11_1101
# BB#274:                               # %lor.lhs.false595
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB11_276
# BB#275:                               # %land.lhs.true597
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
.LBB11_276:                             # %if.else601
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_281
# BB#277:                               # %land.lhs.true603
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#278:                               # %lor.lhs.false606
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#279:                               # %lor.lhs.false609
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
# BB#280:                               # %lor.lhs.false612thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_281:                             # %lor.lhs.false612
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_285
# BB#282:                               # %land.lhs.true614
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#283:                               # %lor.lhs.false617
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB11_285
# BB#284:                               # %land.lhs.true619
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
.LBB11_285:                             # %if.else623
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_290
# BB#286:                               # %land.lhs.true625
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#287:                               # %lor.lhs.false628
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB11_289
# BB#288:                               # %land.lhs.true630
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
.LBB11_289:                             # %lor.lhs.false633thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_290:                             # %lor.lhs.false633
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_294
# BB#291:                               # %land.lhs.true635
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB11_293
# BB#292:                               # %land.lhs.true637
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB11_1101
.LBB11_293:                             # %lor.lhs.false640
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB11_1101
.LBB11_294:                             # %if.else644
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_181:                             # %sw.bb397
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_184
# BB#182:                               # %land.lhs.true399
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#183:                               # %lor.lhs.false402thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_184:                             # %lor.lhs.false402
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_187
# BB#185:                               # %land.lhs.true404
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %rbx
	je	.LBB11_1101
# BB#186:                               # %land.lhs.true404.if.else408_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_187:                             # %if.else408
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_190
# BB#188:                               # %land.lhs.true410
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %rbx
	je	.LBB11_1101
# BB#189:                               # %if.else414thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_190:                             # %if.else414
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB11_193
# BB#191:                               # %land.lhs.true416
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$24, %rbx
	je	.LBB11_1101
# BB#192:                               # %land.lhs.true416.if.else420_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_193:                             # %if.else420
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB11_197
# BB#194:                               # %if.else420
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB11_197
# BB#195:                               # %land.lhs.true424
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %rbx
	jne	.LBB11_1101
# BB#196:                               # %if.else428thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_197:                             # %if.else428
	andq	%r15, %rax
	cmpq	$5, %rax
	jne	.LBB11_201
# BB#198:                               # %land.lhs.true430
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$4, %rbx
	je	.LBB11_1101
# BB#199:                               # %lor.lhs.false433
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB11_201
# BB#200:                               # %land.lhs.true435
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
.LBB11_201:                             # %if.else439
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_206
# BB#202:                               # %land.lhs.true441
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#203:                               # %lor.lhs.false444
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#204:                               # %lor.lhs.false447
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB11_1101
# BB#205:                               # %lor.lhs.false450thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_206:                             # %lor.lhs.false450
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_210
# BB#207:                               # %land.lhs.true452
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#208:                               # %lor.lhs.false455
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB11_210
# BB#209:                               # %land.lhs.true457
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
.LBB11_210:                             # %if.else461
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB11_215
# BB#211:                               # %land.lhs.true463
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#212:                               # %lor.lhs.false466
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB11_214
# BB#213:                               # %land.lhs.true468
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB11_1101
.LBB11_214:                             # %lor.lhs.false471thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB11_215:                             # %lor.lhs.false471
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_219
# BB#216:                               # %land.lhs.true473
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB11_218
# BB#217:                               # %land.lhs.true475
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB11_1101
.LBB11_218:                             # %lor.lhs.false478
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB11_1101
.LBB11_219:                             # %if.else482
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_90:                              # %sw.bb200
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#91:                                # %select.mid
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_58:                              # %sw.bb126
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rcx
	jne	.LBB11_60
# BB#59:                                # %sw.bb126
	movq	$7, %rbx
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jb	.LBB11_1101
.LBB11_60:                              # %if.else133
	cmpq	$3, %rcx
	jne	.LBB11_62
# BB#61:                                # %if.else133
	movq	$2, %rbx
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jb	.LBB11_1101
.LBB11_62:                              # %lor.lhs.false139
	andq	%r15, %rax
	cmpq	$2, %rax
	sbbq	%rax, %rax
	cmpq	$2, %rcx
	jne	.LBB11_63
# BB#64:                                # %lor.lhs.false139
	movabsq	$1, %rcx
	jmp	.LBB11_65
.LBB11_30:                              # %sw.bb61
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_34
# BB#31:                                # %land.lhs.true63
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#32:                                # %lor.lhs.false66
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#33:                                # %lor.lhs.false66.lor.lhs.false69_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_34:                              # %lor.lhs.false69
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_40
# BB#35:                                # %lor.lhs.false69
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB11_40
# BB#36:                                # %land.lhs.true73
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_38
# BB#37:                                # %land.lhs.true76
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_38:                              # %lor.lhs.false79
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_40
# BB#39:                                # %land.lhs.true82
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_40:                              # %if.else86
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rcx
	jne	.LBB11_44
# BB#41:                                # %if.else86
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB11_44
# BB#42:                                # %land.lhs.true90
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	const0_operand
	testq	%r15, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#43:                                # %land.lhs.true90.lor.lhs.false93_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB11_44:                              # %lor.lhs.false93
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_52
# BB#45:                                # %lor.lhs.false93
	testq	%r15, %rax
	jne	.LBB11_52
# BB#46:                                # %land.lhs.true97
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_49
# BB#47:                                # %land.lhs.true100
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#48:                                # %lor.lhs.false103
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_49:                              # %lor.lhs.false106
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_52
# BB#50:                                # %land.lhs.true109
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#51:                                # %lor.lhs.false112
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_52:                              # %if.else116
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_7:                               # %sw.bb6
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB11_11
# BB#8:                                 # %land.lhs.true8
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB11_1101
# BB#9:                                 # %lor.lhs.false
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB11_1101
# BB#10:                                # %lor.lhs.false.lor.lhs.false13_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB11_11:                              # %lor.lhs.false13
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_17
# BB#12:                                # %lor.lhs.false13
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB11_17
# BB#13:                                # %land.lhs.true17
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_15
# BB#14:                                # %land.lhs.true20
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_15:                              # %lor.lhs.false23
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_17
# BB#16:                                # %land.lhs.true26
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB11_1101
.LBB11_17:                              # %if.else30
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rcx
	jne	.LBB11_21
# BB#18:                                # %if.else30
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB11_21
# BB#19:                                # %land.lhs.true34
	movq	recog_data+16(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	const0_operand
	testq	%r15, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#20:                                # %land.lhs.true34.lor.lhs.false37_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB11_21:                              # %lor.lhs.false37
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB11_29
# BB#22:                                # %lor.lhs.false37
	testq	%r15, %rax
	jne	.LBB11_29
# BB#23:                                # %land.lhs.true41
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB11_26
# BB#24:                                # %land.lhs.true44
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#25:                                # %lor.lhs.false47
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_26:                              # %lor.lhs.false50
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_29
# BB#27:                                # %land.lhs.true53
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB11_1101
# BB#28:                                # %lor.lhs.false56
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB11_1101
.LBB11_29:                              # %if.else60
	movq	$1, %rbx
	jmp	.LBB11_1101
.LBB11_1018:
	movabsq	$0, %rax
.LBB11_1020:                            # %lor.lhs.false2463
	andq	%rax, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_393:                             # %if.then838
	movq	$3, %rbx
	jmp	.LBB11_1101
.LBB11_69:                              # %if.else163.thread
	andq	%r15, %rcx
	cmpq	$2, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
.LBB11_74:                              # %lor.lhs.false169
	cmpq	$2, %rax
	jne	.LBB11_75
# BB#76:                                # %lor.lhs.false169
	movabsq	$1, %rbx
	jmp	.LBB11_77
.LBB11_55:
	movabsq	$0, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_1095:                            # %land.lhs.true2629
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %rbx
	jns	.LBB11_1101
# BB#1096:                              # %if.then2635
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.result_ready_cost, %rcx
	movq	$1990, %rdx             # imm = 0x7C6
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB11_1008:
	movabsq	$0, %rax
.LBB11_1010:                            # %lor.lhs.false2428
	andq	%rax, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_75:
	movabsq	$0, %rbx
.LBB11_77:                              # %lor.lhs.false169
	andq	%rcx, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_356:                             # %if.then770
	movq	$3, %rbx
	jmp	.LBB11_1101
.LBB11_341:                             # %if.then743
	movq	$3, %rbx
	jmp	.LBB11_1101
.LBB11_395:
	movabsq	$0, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_970:                             # %lor.lhs.false2323
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB11_973
# BB#971:                               # %lor.lhs.false2323
	movq	$3, %rbx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB11_1101
.LBB11_973:                             # %if.else2329
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	andq	%rax, %rdx
	cmpq	$4, %rdx
	jne	.LBB11_975
# BB#974:                               # %if.else2329
	movq	$2, %rbx
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jb	.LBB11_1101
.LBB11_975:                             # %lor.lhs.false2341
	andq	%r15, %rcx
	cmpq	$2, %rcx
	sbbq	%rbx, %rbx
	cmpq	$2, %rax
	jne	.LBB11_976
# BB#977:                               # %lor.lhs.false2341
	movabsq	$1, %rax
	jmp	.LBB11_978
.LBB11_63:
	movabsq	$0, %rcx
.LBB11_65:                              # %lor.lhs.false139
	andq	%rcx, %rax
	incq	%rax
	jmp	.LBB11_1102
.LBB11_372:                             # %land.lhs.true798
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB11_1101
# BB#373:                               # %land.lhs.true798.lor.lhs.false801_crit_edge
	movl	which_alternative(%rip), %eax
.LBB11_374:                             # %lor.lhs.false801
	movl	ix86_cpu(%rip), %edx
	testq	%r15, %rax
	jne	.LBB11_375
# BB#376:                               # %lor.lhs.false801
	movabsq	$1, %rcx
	jmp	.LBB11_377
.LBB11_375:
	movabsq	$0, %rcx
.LBB11_377:                             # %lor.lhs.false801
	cmpq	$2, %rdx
	jne	.LBB11_379
# BB#378:                               # %lor.lhs.false801
	movq	$3, %rbx
	testq	%r15, %rax
	je	.LBB11_1101
.LBB11_379:                             # %if.else806
	andq	%r15, %rdx
	cmpq	$4, %rdx
	jne	.LBB11_380
# BB#381:                               # %if.else806
	movabsq	$1, %rbx
	jmp	.LBB11_382
.LBB11_380:
	movabsq	$0, %rbx
.LBB11_382:                             # %if.else806
	andq	%rcx, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_358:
	movabsq	$0, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_343:
	movabsq	$0, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.LBB11_976:
	movabsq	$0, %rax
.LBB11_978:                             # %lor.lhs.false2341
	andq	%rax, %rbx
	incq	%rbx
	jmp	.LBB11_1101
.Ltmp122:
	.size	result_ready_cost, .Ltmp122-result_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI11_0:
	.quad	.LBB11_1093
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1101
	.quad	.LBB11_1082
	.quad	.LBB11_1082
	.quad	.LBB11_1082
	.quad	.LBB11_1101
	.quad	.LBB11_1082
	.quad	.LBB11_1082
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1082
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1082
	.quad	.LBB11_1069
	.quad	.LBB11_1097
	.quad	.LBB11_1082
	.quad	.LBB11_1069
	.quad	.LBB11_1097
	.quad	.LBB11_1066
	.quad	.LBB11_1066
	.quad	.LBB11_1066
	.quad	.LBB11_1064
	.quad	.LBB11_1064
	.quad	.LBB11_1056
	.quad	.LBB11_1056
	.quad	.LBB11_1042
	.quad	.LBB11_1101
	.quad	.LBB11_1064
	.quad	.LBB11_1097
	.quad	.LBB11_1066
	.quad	.LBB11_1066
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1064
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1056
	.quad	.LBB11_1066
	.quad	.LBB11_1066
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1056
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1064
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1038
	.quad	.LBB11_1066
	.quad	.LBB11_1064
	.quad	.LBB11_1064
	.quad	.LBB11_1056
	.quad	.LBB11_1056
	.quad	.LBB11_1097
	.quad	.LBB11_1025
	.quad	.LBB11_1101
	.quad	.LBB11_1064
	.quad	.LBB11_1097
	.quad	.LBB11_1021
	.quad	.LBB11_1021
	.quad	.LBB11_1011
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1011
	.quad	.LBB11_1011
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_992
	.quad	.LBB11_992
	.quad	.LBB11_992
	.quad	.LBB11_992
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1056
	.quad	.LBB11_1097
	.quad	.LBB11_1056
	.quad	.LBB11_979
	.quad	.LBB11_1097
	.quad	.LBB11_1056
	.quad	.LBB11_979
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_958
	.quad	.LBB11_1097
	.quad	.LBB11_942
	.quad	.LBB11_942
	.quad	.LBB11_942
	.quad	.LBB11_942
	.quad	.LBB11_931
	.quad	.LBB11_931
	.quad	.LBB11_921
	.quad	.LBB11_914
	.quad	.LBB11_1097
	.quad	.LBB11_931
	.quad	.LBB11_914
	.quad	.LBB11_931
	.quad	.LBB11_914
	.quad	.LBB11_931
	.quad	.LBB11_914
	.quad	.LBB11_931
	.quad	.LBB11_914
	.quad	.LBB11_908
	.quad	.LBB11_908
	.quad	.LBB11_908
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_908
	.quad	.LBB11_908
	.quad	.LBB11_908
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_908
	.quad	.LBB11_908
	.quad	.LBB11_908
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_931
	.quad	.LBB11_931
	.quad	.LBB11_1097
	.quad	.LBB11_931
	.quad	.LBB11_931
	.quad	.LBB11_1097
	.quad	.LBB11_931
	.quad	.LBB11_931
	.quad	.LBB11_1097
	.quad	.LBB11_931
	.quad	.LBB11_931
	.quad	.LBB11_1097
	.quad	.LBB11_888
	.quad	.LBB11_888
	.quad	.LBB11_888
	.quad	.LBB11_888
	.quad	.LBB11_888
	.quad	.LBB11_888
	.quad	.LBB11_1101
	.quad	.LBB11_878
	.quad	.LBB11_861
	.quad	.LBB11_878
	.quad	.LBB11_878
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_859
	.quad	.LBB11_859
	.quad	.LBB11_859
	.quad	.LBB11_859
	.quad	.LBB11_859
	.quad	.LBB11_859
	.quad	.LBB11_859
	.quad	.LBB11_859
	.quad	.LBB11_859
	.quad	.LBB11_859
	.quad	.LBB11_836
	.quad	.LBB11_817
	.quad	.LBB11_817
	.quad	.LBB11_817
	.quad	.LBB11_817
	.quad	.LBB11_794
	.quad	.LBB11_771
	.quad	.LBB11_752
	.quad	.LBB11_752
	.quad	.LBB11_752
	.quad	.LBB11_752
	.quad	.LBB11_752
	.quad	.LBB11_752
	.quad	.LBB11_724
	.quad	.LBB11_705
	.quad	.LBB11_705
	.quad	.LBB11_705
	.quad	.LBB11_705
	.quad	.LBB11_705
	.quad	.LBB11_682
	.quad	.LBB11_663
	.quad	.LBB11_663
	.quad	.LBB11_663
	.quad	.LBB11_705
	.quad	.LBB11_663
	.quad	.LBB11_663
	.quad	.LBB11_663
	.quad	.LBB11_861
	.quad	.LBB11_1101
	.quad	.LBB11_878
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_878
	.quad	.LBB11_878
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_657
	.quad	.LBB11_652
	.quad	.LBB11_652
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_652
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_652
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_652
	.quad	.LBB11_1101
	.quad	.LBB11_652
	.quad	.LBB11_652
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1090
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_631
	.quad	.LBB11_861
	.quad	.LBB11_610
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_610
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_1056
	.quad	.LBB11_861
	.quad	.LBB11_1056
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_1056
	.quad	.LBB11_861
	.quad	.LBB11_1056
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_861
	.quad	.LBB11_1101
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_600
	.quad	.LBB11_604
	.quad	.LBB11_1056
	.quad	.LBB11_604
	.quad	.LBB11_604
	.quad	.LBB11_1056
	.quad	.LBB11_1056
	.quad	.LBB11_604
	.quad	.LBB11_1056
	.quad	.LBB11_604
	.quad	.LBB11_1056
	.quad	.LBB11_572
	.quad	.LBB11_546
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_878
	.quad	.LBB11_572
	.quad	.LBB11_510
	.quad	.LBB11_546
	.quad	.LBB11_478
	.quad	.LBB11_572
	.quad	.LBB11_546
	.quad	.LBB11_546
	.quad	.LBB11_450
	.quad	.LBB11_546
	.quad	.LBB11_546
	.quad	.LBB11_425
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_878
	.quad	.LBB11_425
	.quad	.LBB11_425
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_404
	.quad	.LBB11_1064
	.quad	.LBB11_1064
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_401
	.quad	.LBB11_401
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_401
	.quad	.LBB11_401
	.quad	.LBB11_401
	.quad	.LBB11_401
	.quad	.LBB11_401
	.quad	.LBB11_1097
	.quad	.LBB11_398
	.quad	.LBB11_398
	.quad	.LBB11_398
	.quad	.LBB11_398
	.quad	.LBB11_398
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_401
	.quad	.LBB11_1101
	.quad	.LBB11_861
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_383
	.quad	.LBB11_361
	.quad	.LBB11_1097
	.quad	.LBB11_383
	.quad	.LBB11_361
	.quad	.LBB11_1097
	.quad	.LBB11_346
	.quad	.LBB11_331
	.quad	.LBB11_295
	.quad	.LBB11_256
	.quad	.LBB11_1097
	.quad	.LBB11_295
	.quad	.LBB11_295
	.quad	.LBB11_220
	.quad	.LBB11_181
	.quad	.LBB11_1097
	.quad	.LBB11_220
	.quad	.LBB11_220
	.quad	.LBB11_220
	.quad	.LBB11_220
	.quad	.LBB11_145
	.quad	.LBB11_109
	.quad	.LBB11_145
	.quad	.LBB11_109
	.quad	.LBB11_145
	.quad	.LBB11_109
	.quad	.LBB11_145
	.quad	.LBB11_109
	.quad	.LBB11_145
	.quad	.LBB11_109
	.quad	.LBB11_145
	.quad	.LBB11_109
	.quad	.LBB11_145
	.quad	.LBB11_109
	.quad	.LBB11_97
	.quad	.LBB11_1097
	.quad	.LBB11_92
	.quad	.LBB11_97
	.quad	.LBB11_1097
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_92
	.quad	.LBB11_90
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_84
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_78
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_66
	.quad	.LBB11_58
	.quad	.LBB11_66
	.quad	.LBB11_53
	.quad	.LBB11_53
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_30
	.quad	.LBB11_7
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_4
	.quad	.LBB11_4
	.quad	.LBB11_4
	.quad	.LBB11_4
	.quad	.LBB11_4
	.quad	.LBB11_4
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1097
	.quad	.LBB11_1101
	.quad	.LBB11_1064
	.quad	.LBB11_1101
	.quad	.LBB11_1101
	.quad	.LBB11_1101
.LJTI11_1:
	.quad	.LBB11_1101
	.quad	.LBB11_660
	.quad	.LBB11_661
	.quad	.LBB11_659
.LJTI11_2:
	.quad	.LBB11_86
	.quad	.LBB11_88
	.quad	.LBB11_87
	.quad	.LBB11_1101

	.text
	.globl	get_attr_memory
	.align	16, 0x90
	.type	get_attr_memory,@function
get_attr_memory:                        # @get_attr_memory
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp127:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp128:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp129:
	.cfi_def_cfa_offset 32
.Ltmp130:
	.cfi_offset %rbx, -32
.Ltmp131:
	.cfi_offset %r14, -24
.Ltmp132:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB12_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB12_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$806, %rax              # imm = 0x326
	ja	.LBB12_339
# BB#3:                                 # %cond.end
	movq	$4, %r14
	jmpq	*.LJTI12_0(,%rax,8)
.LBB12_203:                             # %sw.bb647
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_205
# BB#204:                               # %land.lhs.true650
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_205:                             # %if.else654
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#206:                               # %if.else658
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#207:                               # %lor.lhs.false661
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#208:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_339:                             # %sw.default
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_341
# BB#340:                               # %land.lhs.true1135
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_341:                             # %if.else1139
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#342:                               # %if.else1143
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#343:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_338:                             # %sw.bb1132
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_316:                             # %sw.bb1090
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
# BB#317:                               # %if.else1094
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_318
# BB#319:                               # %if.else1094
	movabsq	$1, %r14
	jmp	.LBB12_320
.LBB12_329:                             # %sw.bb1109
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#330:                               # %lor.lhs.false1112
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#331:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_335:                             # %sw.bb1129
	movq	$3, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_336:                             # %sw.bb1130
	movq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_160:                             # %sw.bb485
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB12_345
# BB#161:                               # %if.else488
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_163
# BB#162:                               # %land.lhs.true491
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_163:                             # %if.else495
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#164:                               # %if.else499
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#165:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_325:                             # %sw.bb1104
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_326
# BB#327:                               # %sw.bb1104
	movabsq	$1, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_86:                              # %sw.bb251
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#87:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_318:
	movabsq	$0, %r14
.LBB12_320:                             # %if.else1094
	xorq	$1, %r14
	addq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_321:                             # %sw.bb1099
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_322
# BB#323:                               # %sw.bb1099
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_12:                              # %sw.bb30
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	je	.LBB12_344
# BB#13:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_337:                             # %sw.bb1131
	movq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_172:                             # %sw.bb527
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB12_345
# BB#173:                               # %if.else530
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_175
# BB#174:                               # %land.lhs.true533
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_175:                             # %if.else537
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#176:                               # %if.else541
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#177:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_74:                              # %sw.bb215
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	je	.LBB12_344
# BB#75:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_185:                             # %sw.bb567
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB12_345
# BB#186:                               # %if.else572
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_188
# BB#187:                               # %land.lhs.true575
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_188:                             # %if.else579
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#189:                               # %if.else583
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#190:                               # %lor.lhs.false586
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB12_192
# BB#191:                               # %land.lhs.true592
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_192:                             # %if.else596
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_154:                             # %sw.bb466
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB12_345
# BB#155:                               # %if.else469
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_157
# BB#156:                               # %land.lhs.true472
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_157:                             # %if.else476
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#158:                               # %if.else480
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#159:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_95:                              # %sw.bb277
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$1, %rax
	je	.LBB12_345
# BB#96:                                # %if.else280
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_98
# BB#97:                                # %land.lhs.true283
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_98:                              # %if.else287
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#99:                                # %if.else291
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#100:                               # %lor.lhs.false294
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#101:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_326:
	movabsq	$0, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_259:                             # %sw.bb869
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_261
# BB#260:                               # %land.lhs.true872
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_261:                             # %if.else876
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#262:                               # %if.else880
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#263:                               # %lor.lhs.false883
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB12_266
# BB#264:                               # %land.lhs.true886
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	je	.LBB12_266
# BB#265:                               # %land.lhs.true889
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_266:                             # %if.else893
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_88:                              # %sw.bb256
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_90
# BB#89:                                # %land.lhs.true259
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_90:                              # %if.else263
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#91:                                # %if.else267
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#92:                                # %lor.lhs.false270
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB12_94
# BB#93:                                # %land.lhs.true272
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_94:                              # %if.else276
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_47:                              # %sw.bb132
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_49
# BB#48:                                # %land.lhs.true135
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_49:                              # %if.else139
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#50:                                # %if.else143
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#51:                                # %lor.lhs.false146
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
# BB#52:                                # %lor.lhs.false149
	movq	recog_data+24(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_10
# BB#53:
	movabsq	$0, %rax
	jmp	.LBB12_11
.LBB12_322:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_216:                             # %sw.bb727
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB12_345
# BB#217:                               # %if.else730
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_218
# BB#219:                               # %if.else730
	movabsq	$1, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_193:                             # %sw.bb597
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB12_195
# BB#194:                               # %sw.bb597
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB12_345
.LBB12_195:                             # %if.else608
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_197
# BB#196:                               # %land.lhs.true611
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_197:                             # %if.else615
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#198:                               # %if.else619
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#199:                               # %lor.lhs.false622
	movl	which_alternative(%rip), %eax
	cmpq	$8, %rax
	ja	.LBB12_201
# BB#200:                               # %lor.lhs.false622
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$487, %rdx              # imm = 0x1E7
	jne	.LBB12_202
.LBB12_201:                             # %land.lhs.true642
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_202:                             # %if.else646
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_178:                             # %sw.bb546
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB12_180
# BB#179:                               # %land.lhs.true548
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_180:                             # %lor.lhs.false551
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_182
# BB#181:                               # %land.lhs.true554
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_182:                             # %if.else558
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#183:                               # %if.else562
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#184:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_123:                             # %sw.bb369
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$2, %rax
	je	.LBB12_345
# BB#124:                               # %if.else372
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_126
# BB#125:                               # %land.lhs.true375
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_126:                             # %if.else379
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#127:                               # %if.else383
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#128:                               # %lor.lhs.false386
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#129:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_102:                             # %sw.bb299
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_104
# BB#103:                               # %land.lhs.true302
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_104:                             # %if.else306
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#105:                               # %if.else310
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#106:                               # %lor.lhs.false313
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB12_108
# BB#107:                               # %land.lhs.true317
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_108:                             # %if.else321
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_67:                              # %sw.bb194
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_69
# BB#68:                                # %land.lhs.true197
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_69:                              # %if.else201
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#70:                                # %if.else205
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#71:                                # %lor.lhs.false208
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB12_73
# BB#72:                                # %land.lhs.true210
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_73:                              # %if.else214
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_60:                              # %sw.bb173
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_62
# BB#61:                                # %land.lhs.true176
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_62:                              # %if.else180
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#63:                                # %if.else184
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#64:                                # %lor.lhs.false187
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB12_66
# BB#65:                                # %land.lhs.true189
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_66:                              # %if.else193
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_54:                              # %sw.bb154
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	testq	%rax, %rax
	je	.LBB12_345
# BB#55:                                # %if.else157
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_57
# BB#56:                                # %land.lhs.true160
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_57:                              # %if.else164
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#58:                                # %if.else168
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#59:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_38:                              # %sw.bb101
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$2, %rax
	jb	.LBB12_345
# BB#39:                                # %if.else106
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_41
# BB#40:                                # %land.lhs.true109
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_41:                              # %if.else113
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#42:                                # %if.else117
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#43:                                # %lor.lhs.false120
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
# BB#44:                                # %lor.lhs.false123
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_46
# BB#45:                                # %land.lhs.true127
	movq	recog_data+24(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_46:                              # %if.else131
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_332:                             # %sw.bb1117
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB12_345
# BB#333:                               # %land.lhs.true1121
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB12_345
# BB#334:                               # %if.then1127
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_memory, %rcx
	movq	$15861, %rdx            # imm = 0x3DF5
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB12_302:                             # %sw.bb1018
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB12_305
# BB#303:                               # %sw.bb1018
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB12_305
# BB#304:                               # %land.lhs.true1032
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	xorq	%r14, %r14
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_305:                             # %if.else1036
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_307
# BB#306:                               # %land.lhs.true1039
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_307:                             # %if.else1043
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#308:                               # %if.else1047
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#309:                               # %lor.lhs.false1050
	movl	which_alternative(%rip), %eax
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$6, %rcx
	jb	.LBB12_313
# BB#310:                               # %lor.lhs.false1062
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB12_315
# BB#311:                               # %land.lhs.true1064
	movq	recog_data+8(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB12_315
# BB#312:                               # %land.lhs.true1064.land.lhs.true1067_crit_edge
	movl	which_alternative(%rip), %eax
.LBB12_313:                             # %land.lhs.true1067
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB12_315
# BB#314:                               # %land.lhs.true1085
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_315:                             # %if.else1089
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_287:                             # %sw.bb963
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_289
# BB#288:                               # %land.lhs.true966
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_289:                             # %if.else970
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#290:                               # %if.else974
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#291:                               # %lor.lhs.false977
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB12_301
# BB#292:                               # %land.lhs.true980
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB12_295
# BB#293:                               # %land.lhs.true984
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB12_300
# BB#294:                               # %lor.lhs.false988
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB12_300
.LBB12_295:                             # %lor.lhs.false992
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB12_297
# BB#296:                               # %land.lhs.true998
	movq	recog_data+8(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB12_300
.LBB12_297:                             # %lor.lhs.false1001
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB12_300
# BB#298:                               # %lor.lhs.false1005
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB12_300
# BB#299:                               # %lor.lhs.false1005
	cmpq	$2, %rax
	jne	.LBB12_301
.LBB12_300:                             # %land.lhs.true1013
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_301:                             # %if.else1017
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_267:                             # %sw.bb894
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_269
# BB#268:                               # %land.lhs.true897
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_269:                             # %if.else901
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#270:                               # %if.else905
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#271:                               # %lor.lhs.false908
	movl	which_alternative(%rip), %eax
	movq	$5, %rdx
	cmpq	$5, %rax
	je	.LBB12_281
# BB#272:                               # %lor.lhs.false908
	cmpq	$3, %rax
	jne	.LBB12_277
# BB#273:                               # %lor.lhs.false910
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rdi
	shlq	%cl, %rdi
	movq	%rdi, %rcx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB12_286
# BB#274:                               # %land.lhs.true914
	movl	x86_qimode_math(%rip), %esi
	andq	%rsi, %rdi
	testq	%r15, %rdi
	je	.LBB12_286
# BB#275:                               # %land.lhs.true938
	cmpq	$3, %rax
	jne	.LBB12_276
# BB#279:                               # %land.lhs.true940
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rdi
	shlq	%cl, %rdi
	andq	%rdi, %rdx
	testq	%r15, %rdx
	je	.LBB12_285
# BB#280:                               # %lor.lhs.false944
	andq	%rdi, %rsi
	testq	%r15, %rsi
	movq	%rax, %rdx
	jne	.LBB12_281
	jmp	.LBB12_285
.LBB12_249:                             # %sw.bb838
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_251
# BB#250:                               # %land.lhs.true841
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_251:                             # %if.else845
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#252:                               # %if.else849
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#253:                               # %lor.lhs.false852
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB12_255
# BB#254:                               # %lor.lhs.false855
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB12_258
.LBB12_255:                             # %land.lhs.true857
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB12_258
# BB#256:                               # %land.lhs.true860
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %r14
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	jne	.LBB12_258
# BB#257:                               # %land.lhs.true864
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_258:                             # %if.else868
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_244:                             # %sw.bb830
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB12_345
# BB#245:                               # %if.else833
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_246
# BB#247:                               # %if.else833
	movabsq	$1, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_236:                             # %sw.bb796
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jb	.LBB12_345
# BB#237:                               # %if.else801
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_239
# BB#238:                               # %land.lhs.true804
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_239:                             # %if.else808
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#240:                               # %if.else812
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#241:                               # %lor.lhs.false815
	movl	which_alternative(%rip), %eax
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB12_243
# BB#242:                               # %land.lhs.true825
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_243:                             # %if.else829
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_221:                             # %sw.bb735
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	je	.LBB12_345
# BB#222:                               # %if.else738
	movl	flag_pic(%rip), %ecx
	testq	%rcx, %rcx
	je	.LBB12_225
# BB#223:                               # %if.else738
	addq	$-5, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	jb	.LBB12_225
# BB#224:                               # %land.lhs.true748
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	xorq	%r14, %r14
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_225:                             # %if.else752
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_227
# BB#226:                               # %land.lhs.true755
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_227:                             # %if.else759
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#228:                               # %if.else763
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#229:                               # %lor.lhs.false766
	movl	which_alternative(%rip), %eax
	leaq	-5(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jb	.LBB12_233
# BB#230:                               # %lor.lhs.false774
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB12_235
# BB#231:                               # %land.lhs.true776
	movq	recog_data+8(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB12_235
# BB#232:                               # %land.lhs.true776.land.lhs.true779_crit_edge
	movl	which_alternative(%rip), %eax
.LBB12_233:                             # %land.lhs.true779
	addq	$-5, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	jb	.LBB12_235
# BB#234:                               # %land.lhs.true791
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_235:                             # %if.else795
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_209:                             # %sw.bb666
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_211
# BB#210:                               # %land.lhs.true669
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_211:                             # %if.else673
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#212:                               # %if.else677
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#213:                               # %lor.lhs.false680
	movl	which_alternative(%rip), %eax
	cmpq	$12, %rax
	jb	.LBB12_215
# BB#214:                               # %land.lhs.true722
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_215:                             # %if.else726
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_166:                             # %sw.bb504
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	decq	%rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jb	.LBB12_345
# BB#167:                               # %if.else511
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_169
# BB#168:                               # %land.lhs.true514
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_169:                             # %if.else518
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#170:                               # %if.else522
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#171:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_146:                             # %sw.bb441
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$2, %rax
	je	.LBB12_345
# BB#147:                               # %lor.lhs.false443
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB12_345
# BB#148:                               # %if.else447
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_150
# BB#149:                               # %land.lhs.true450
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_150:                             # %if.else454
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#151:                               # %if.else458
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#152:                               # %lor.lhs.false461
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#153:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_138:                             # %sw.bb416
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$2, %rax
	je	.LBB12_345
# BB#139:                               # %lor.lhs.false418
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB12_345
# BB#140:                               # %if.else422
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_142
# BB#141:                               # %land.lhs.true425
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_142:                             # %if.else429
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#143:                               # %if.else433
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#144:                               # %lor.lhs.false436
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#145:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_130:                             # %sw.bb391
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	testq	%rax, %rax
	jne	.LBB12_345
# BB#131:                               # %lor.lhs.false393
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB12_345
# BB#132:                               # %if.else397
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_134
# BB#133:                               # %land.lhs.true400
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_134:                             # %if.else404
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#135:                               # %if.else408
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#136:                               # %lor.lhs.false411
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#137:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_116:                             # %sw.bb347
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$3, %rax
	je	.LBB12_345
# BB#117:                               # %if.else350
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_119
# BB#118:                               # %land.lhs.true353
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_119:                             # %if.else357
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#120:                               # %if.else361
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#121:                               # %lor.lhs.false364
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_344
# BB#122:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_109:                             # %sw.bb322
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_111
# BB#110:                               # %land.lhs.true325
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_111:                             # %if.else329
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#112:                               # %if.else333
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#113:                               # %lor.lhs.false336
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB12_115
# BB#114:                               # %land.lhs.true342
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_115:                             # %if.else346
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_76:                              # %sw.bb220
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB12_345
# BB#77:                                # %if.else224
	movq	%rbx, %rdi
	callq	get_attr_type
	movq	recog_data(%rip), %rdi
	movq	%rax, %rbx
	andq	%r15, %rbx
	xorq	%rsi, %rsi
	callq	memory_operand
	cmpq	$14, %rbx
	jne	.LBB12_80
# BB#78:                                # %if.then227
	testq	%r15, %rax
	jne	.LBB12_344
# BB#79:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_34:                              # %sw.bb95
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB12_35
# BB#36:                                # %sw.bb95
	movabsq	$1, %r14
	jmp	.LBB12_37
.LBB12_24:                              # %sw.bb65
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB12_26
# BB#25:                                # %land.lhs.true67
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	xorq	%r14, %r14
	testq	%r15, %rax
	je	.LBB12_345
.LBB12_26:                              # %if.else71
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_28
# BB#27:                                # %land.lhs.true74
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_28:                              # %if.else78
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#29:                                # %if.else82
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#30:                                # %lor.lhs.false85
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB12_32
# BB#31:                                # %lor.lhs.false87
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	const0_operand
	testq	%r15, %rax
	jne	.LBB12_33
.LBB12_32:                              # %land.lhs.true90
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_33:                              # %if.else94
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_14:                              # %sw.bb35
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB12_16
# BB#15:                                # %land.lhs.true37
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	xorq	%r14, %r14
	testq	%r15, %rax
	je	.LBB12_345
.LBB12_16:                              # %if.else41
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_18
# BB#17:                                # %land.lhs.true44
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_18:                              # %if.else48
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#19:                                # %if.else52
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#20:                                # %lor.lhs.false55
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB12_22
# BB#21:                                # %lor.lhs.false57
	movq	recog_data+16(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	const0_operand
	testq	%r15, %rax
	jne	.LBB12_23
.LBB12_22:                              # %land.lhs.true60
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_23:                              # %if.else64
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jb	.LBB12_345
# BB#5:                                 # %if.else
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_7
# BB#6:                                 # %land.lhs.true
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_7:                               # %if.else10
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#8:                                 # %if.else14
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_9
.LBB12_10:                              # %if.else14
	movabsq	$1, %rax
	jmp	.LBB12_11
.LBB12_218:
	movabsq	$0, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_35:
	movabsq	$0, %r14
.LBB12_37:                              # %sw.bb95
	movq	$2, %rcx
	shlq	%cl, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_80:                              # %if.else232
	testq	%r15, %rax
	je	.LBB12_82
# BB#81:                                # %land.lhs.true235
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %r14
	jne	.LBB12_345
.LBB12_82:                              # %if.else239
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB12_345
# BB#83:                                # %if.else243
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB12_345
# BB#84:                                # %lor.lhs.false246
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB12_85
.LBB12_344:                             # %if.else1143
	movabsq	$1, %r14
.LBB12_345:                             # %return
	movq	%r14, %rax
.LBB12_11:                              # %if.else14
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB12_246:
	movabsq	$0, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_277:                             # %lor.lhs.false932
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB12_286
# BB#278:                               # %lor.lhs.false932
	movq	$2, %rdx
	cmpq	$2, %rax
	je	.LBB12_283
	jmp	.LBB12_286
.LBB12_276:
	movq	%rax, %rdx
.LBB12_281:                             # %lor.lhs.false948
	cmpq	$3, %rdx
	je	.LBB12_286
# BB#282:                               # %lor.lhs.false948
	cmpq	$5, %rdx
	je	.LBB12_286
.LBB12_283:                             # %land.lhs.true952
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %esi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r15, %rdi
	je	.LBB12_285
# BB#284:                               # %land.lhs.true952
	cmpq	$2, %rdx
	je	.LBB12_286
.LBB12_285:                             # %land.lhs.true958
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB12_345
.LBB12_286:                             # %if.else962
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.LBB12_9:
	movabsq	$0, %rax
	jmp	.LBB12_11
.LBB12_85:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB12_11
.Ltmp133:
	.size	get_attr_memory, .Ltmp133-get_attr_memory
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI12_0:
	.quad	.LBB12_332
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_325
	.quad	.LBB12_325
	.quad	.LBB12_325
	.quad	.LBB12_321
	.quad	.LBB12_321
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_302
	.quad	.LBB12_336
	.quad	.LBB12_337
	.quad	.LBB12_339
	.quad	.LBB12_325
	.quad	.LBB12_325
	.quad	.LBB12_287
	.quad	.LBB12_336
	.quad	.LBB12_337
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_316
	.quad	.LBB12_325
	.quad	.LBB12_325
	.quad	.LBB12_267
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_316
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_259
	.quad	.LBB12_259
	.quad	.LBB12_336
	.quad	.LBB12_337
	.quad	.LBB12_339
	.quad	.LBB12_259
	.quad	.LBB12_249
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_244
	.quad	.LBB12_325
	.quad	.LBB12_321
	.quad	.LBB12_321
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_236
	.quad	.LBB12_221
	.quad	.LBB12_336
	.quad	.LBB12_337
	.quad	.LBB12_339
	.quad	.LBB12_216
	.quad	.LBB12_216
	.quad	.LBB12_209
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_193
	.quad	.LBB12_193
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_185
	.quad	.LBB12_185
	.quad	.LBB12_185
	.quad	.LBB12_185
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_316
	.quad	.LBB12_339
	.quad	.LBB12_316
	.quad	.LBB12_178
	.quad	.LBB12_339
	.quad	.LBB12_316
	.quad	.LBB12_178
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_172
	.quad	.LBB12_166
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_172
	.quad	.LBB12_339
	.quad	.LBB12_172
	.quad	.LBB12_339
	.quad	.LBB12_172
	.quad	.LBB12_339
	.quad	.LBB12_172
	.quad	.LBB12_339
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_160
	.quad	.LBB12_154
	.quad	.LBB12_339
	.quad	.LBB12_160
	.quad	.LBB12_154
	.quad	.LBB12_339
	.quad	.LBB12_160
	.quad	.LBB12_154
	.quad	.LBB12_339
	.quad	.LBB12_160
	.quad	.LBB12_154
	.quad	.LBB12_339
	.quad	.LBB12_160
	.quad	.LBB12_160
	.quad	.LBB12_160
	.quad	.LBB12_160
	.quad	.LBB12_160
	.quad	.LBB12_160
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_146
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_138
	.quad	.LBB12_130
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_123
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_116
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_329
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_109
	.quad	.LBB12_203
	.quad	.LBB12_102
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_102
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_316
	.quad	.LBB12_203
	.quad	.LBB12_316
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_316
	.quad	.LBB12_203
	.quad	.LBB12_316
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_316
	.quad	.LBB12_95
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_95
	.quad	.LBB12_95
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_95
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_123
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_88
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_88
	.quad	.LBB12_88
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_321
	.quad	.LBB12_321
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_86
	.quad	.LBB12_86
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_86
	.quad	.LBB12_86
	.quad	.LBB12_86
	.quad	.LBB12_86
	.quad	.LBB12_86
	.quad	.LBB12_76
	.quad	.LBB12_74
	.quad	.LBB12_74
	.quad	.LBB12_74
	.quad	.LBB12_74
	.quad	.LBB12_74
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_86
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_203
	.quad	.LBB12_67
	.quad	.LBB12_339
	.quad	.LBB12_203
	.quad	.LBB12_67
	.quad	.LBB12_339
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_60
	.quad	.LBB12_339
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_60
	.quad	.LBB12_339
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_203
	.quad	.LBB12_54
	.quad	.LBB12_339
	.quad	.LBB12_338
	.quad	.LBB12_54
	.quad	.LBB12_339
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_335
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_336
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_338
	.quad	.LBB12_47
	.quad	.LBB12_338
	.quad	.LBB12_47
	.quad	.LBB12_47
	.quad	.LBB12_38
	.quad	.LBB12_34
	.quad	.LBB12_38
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_24
	.quad	.LBB12_14
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_12
	.quad	.LBB12_12
	.quad	.LBB12_12
	.quad	.LBB12_12
	.quad	.LBB12_12
	.quad	.LBB12_12
	.quad	.LBB12_345
	.quad	.LBB12_345
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_4
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_338
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_338
	.quad	.LBB12_338
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_339
	.quad	.LBB12_345
	.quad	.LBB12_337
	.quad	.LBB12_336
	.quad	.LBB12_345
	.quad	.LBB12_336

	.text
	.globl	get_attr_imm_disp
	.align	16, 0x90
	.type	get_attr_imm_disp,@function
get_attr_imm_disp:                      # @get_attr_imm_disp
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp138:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp139:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp140:
	.cfi_def_cfa_offset 32
.Ltmp141:
	.cfi_offset %rbx, -32
.Ltmp142:
	.cfi_offset %r14, -24
.Ltmp143:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB13_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB13_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$806, %rax              # imm = 0x326
	ja	.LBB13_15
# BB#3:                                 # %cond.end
	movq	$2, %r14
	jmpq	*.LJTI13_0(,%rax,8)
.LBB13_50:                              # %sw.bb226
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB13_11:                              # %land.lhs.true13
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_displacement_operand
	testq	%r15, %rax
	je	.LBB13_15
# BB#12:                                # %land.lhs.true16
	movq	recog_data+16(%rip), %rdi
	jmp	.LBB13_13
.LBB13_87:                              # %sw.bb419
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB13_55:                              # %land.lhs.true248
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_displacement_operand
	testq	%r15, %rax
	je	.LBB13_15
# BB#56:                                # %land.lhs.true251
	movq	recog_data+8(%rip), %rdi
.LBB13_13:                              # %land.lhs.true16
	xorq	%rsi, %rsi
.LBB13_14:                              # %land.lhs.true16
	callq	immediate_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB13_16
	jmp	.LBB13_15
.LBB13_73:                              # %sw.bb326
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	testq	%rax, %rax
	je	.LBB13_16
# BB#74:                                # %select.mid6
	movq	$2, %r14
	jmp	.LBB13_16
.LBB13_36:                              # %sw.bb105
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB13_11
# BB#37:                                # %lor.lhs.false108
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB13_11
	jmp	.LBB13_15
.LBB13_47:                              # %sw.bb193
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	jmp	.LBB13_10
.LBB13_44:                              # %sw.bb169
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB13_46:                              # %land.lhs.true182
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	jmp	.LBB13_10
.LBB13_40:                              # %sw.bb145
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB13_42:                              # %land.lhs.true158
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	jmp	.LBB13_10
.LBB13_83:                              # %sw.bb383
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB13_15
	jmp	.LBB13_55
.LBB13_57:                              # %sw.bb256
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jmp	.LBB13_53
.LBB13_51:                              # %sw.bb234
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %r14
	jne	.LBB13_15
	jmp	.LBB13_16
.LBB13_48:                              # %sw.bb204
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
.LBB13_10:                              # %lor.lhs.false
	testq	%r15, %rax
	jne	.LBB13_15
	jmp	.LBB13_11
.LBB13_49:                              # %sw.bb215
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB13_11
	jmp	.LBB13_15
.LBB13_28:                              # %sw.bb51
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB13_11
	jmp	.LBB13_15
.LBB13_72:                              # %sw.bb320
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %r14
	jae	.LBB13_15
	jmp	.LBB13_16
.LBB13_64:                              # %sw.bb292
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$1, %rax
	je	.LBB13_16
# BB#65:                                # %select.mid2
	movq	$2, %r14
	jmp	.LBB13_16
.LBB13_58:                              # %sw.bb262
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB13_59
# BB#60:                                # %sw.bb262
	movabsq	$1, %rcx
	jmp	.LBB13_61
.LBB13_38:                              # %sw.bb119
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB13_11
	jmp	.LBB13_15
.LBB13_88:                              # %sw.bb427
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB13_16
# BB#89:                                # %land.lhs.true431
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB13_16
# BB#90:                                # %if.then437
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_imm_disp, %rcx
	movq	$13072, %rdx            # imm = 0x3310
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB13_84:                              # %sw.bb394
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB13_15
# BB#85:                                # %land.lhs.true406
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB13_55
# BB#86:                                # %lor.lhs.false408
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB13_15
	jmp	.LBB13_55
.LBB13_77:                              # %sw.bb345
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB13_15
# BB#78:                                # %sw.bb345
	cmpq	$3, %rax
	jne	.LBB13_81
# BB#79:                                # %land.lhs.true347
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB13_55
# BB#80:                                # %lor.lhs.false351
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB13_15
	jmp	.LBB13_55
.LBB13_75:                              # %sw.bb330
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB13_15
# BB#76:                                # %land.lhs.true333
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB13_15
	jmp	.LBB13_55
.LBB13_66:                              # %sw.bb296
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	leaq	-5(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jb	.LBB13_15
# BB#67:                                # %sw.bb296
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB13_16
# BB#68:                                # %land.lhs.true307
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB13_70
# BB#69:                                # %lor.lhs.false309
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB13_15
.LBB13_70:                              # %land.lhs.true312
	movq	recog_data(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_displacement_operand
	testq	%r15, %rax
	je	.LBB13_15
# BB#71:                                # %land.lhs.true315
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	jmp	.LBB13_14
.LBB13_62:                              # %sw.bb274
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB13_15
# BB#63:                                # %sw.bb274
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jbe	.LBB13_55
	jmp	.LBB13_15
.LBB13_54:                              # %sw.bb246
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB13_15
	jmp	.LBB13_55
.LBB13_52:                              # %sw.bb238
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	decq	%rax
	andq	%r15, %rax
	cmpq	$3, %rax
.LBB13_53:                              # %return
	sbbq	%r14, %r14
	andq	$2, %r14
	jmp	.LBB13_16
.LBB13_45:                              # %sw.bb180
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB13_15
	jmp	.LBB13_46
.LBB13_41:                              # %sw.bb156
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB13_15
	jmp	.LBB13_42
.LBB13_39:                              # %sw.bb131
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB13_11
	jmp	.LBB13_15
.LBB13_35:                              # %sw.bb81
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB13_15
	jmp	.LBB13_30
.LBB13_29:                              # %sw.bb61
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
.LBB13_30:                              # %sw.bb61
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB13_33
# BB#31:                                # %land.lhs.true63
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB13_11
# BB#32:                                # %land.lhs.true63.lor.lhs.false66_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB13_33:                              # %lor.lhs.false66
	shlq	%cl, %rbx
	andq	%r14, %rbx
	testq	%r15, %rbx
	je	.LBB13_11
# BB#34:                                # %lor.lhs.false70
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	jmp	.LBB13_10
.LBB13_24:                              # %sw.bb46
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB13_25
# BB#26:                                # %sw.bb46
	movabsq	$1, %r14
	addq	%r14, %r14
	jmp	.LBB13_16
.LBB13_20:                              # %sw.bb40
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB13_21
# BB#22:                                # %sw.bb40
	movabsq	$1, %r14
	addq	%r14, %r14
	jmp	.LBB13_16
.LBB13_18:                              # %sw.bb19
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB13_10
# BB#19:                                # %land.lhs.true21
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB13_6
.LBB13_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB13_10
# BB#5:                                 # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB13_6:                               # %land.lhs.true
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB13_9
# BB#7:                                 # %land.lhs.true6
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_displacement_operand
	testq	%r15, %rax
	je	.LBB13_9
# BB#8:                                 # %land.lhs.true9
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB13_16
.LBB13_9:                               # %lor.lhs.falsethread-pre-split
	movl	which_alternative(%rip), %eax
	jmp	.LBB13_10
.LBB13_59:
	movabsq	$0, %rcx
.LBB13_61:                              # %sw.bb262
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	sbbq	%rax, %rax
	andq	%rcx, %rax
	addq	%rax, %rax
	jmp	.LBB13_17
.LBB13_25:
	movabsq	$0, %r14
	addq	%r14, %r14
	jmp	.LBB13_16
.LBB13_21:
	movabsq	$0, %r14
	addq	%r14, %r14
	jmp	.LBB13_16
.LBB13_81:                              # %land.lhs.true369
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB13_55
# BB#82:                                # %land.lhs.true369
	cmpq	$2, %rax
	jne	.LBB13_55
.LBB13_15:                              # %sw.default
	xorq	%r14, %r14
.LBB13_16:                              # %return
	movq	%r14, %rax
.LBB13_17:                              # %return
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp144:
	.size	get_attr_imm_disp, .Ltmp144-get_attr_imm_disp
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI13_0:
	.quad	.LBB13_88
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_84
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_83
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_77
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_83
	.quad	.LBB13_83
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_15
	.quad	.LBB13_83
	.quad	.LBB13_75
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_16
	.quad	.LBB13_73
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_72
	.quad	.LBB13_66
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_64
	.quad	.LBB13_64
	.quad	.LBB13_62
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_58
	.quad	.LBB13_58
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_57
	.quad	.LBB13_57
	.quad	.LBB13_57
	.quad	.LBB13_57
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_54
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_73
	.quad	.LBB13_52
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_73
	.quad	.LBB13_15
	.quad	.LBB13_73
	.quad	.LBB13_15
	.quad	.LBB13_73
	.quad	.LBB13_15
	.quad	.LBB13_73
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_73
	.quad	.LBB13_51
	.quad	.LBB13_15
	.quad	.LBB13_73
	.quad	.LBB13_51
	.quad	.LBB13_15
	.quad	.LBB13_73
	.quad	.LBB13_51
	.quad	.LBB13_15
	.quad	.LBB13_73
	.quad	.LBB13_51
	.quad	.LBB13_15
	.quad	.LBB13_73
	.quad	.LBB13_73
	.quad	.LBB13_73
	.quad	.LBB13_73
	.quad	.LBB13_73
	.quad	.LBB13_73
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_49
	.quad	.LBB13_48
	.quad	.LBB13_48
	.quad	.LBB13_48
	.quad	.LBB13_48
	.quad	.LBB13_49
	.quad	.LBB13_49
	.quad	.LBB13_47
	.quad	.LBB13_47
	.quad	.LBB13_47
	.quad	.LBB13_47
	.quad	.LBB13_47
	.quad	.LBB13_47
	.quad	.LBB13_45
	.quad	.LBB13_44
	.quad	.LBB13_44
	.quad	.LBB13_44
	.quad	.LBB13_44
	.quad	.LBB13_44
	.quad	.LBB13_41
	.quad	.LBB13_40
	.quad	.LBB13_40
	.quad	.LBB13_40
	.quad	.LBB13_44
	.quad	.LBB13_40
	.quad	.LBB13_40
	.quad	.LBB13_40
	.quad	.LBB13_50
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_87
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_39
	.quad	.LBB13_50
	.quad	.LBB13_38
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_38
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_15
	.quad	.LBB13_50
	.quad	.LBB13_15
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_15
	.quad	.LBB13_50
	.quad	.LBB13_15
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_36
	.quad	.LBB13_36
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_36
	.quad	.LBB13_35
	.quad	.LBB13_36
	.quad	.LBB13_29
	.quad	.LBB13_36
	.quad	.LBB13_36
	.quad	.LBB13_36
	.quad	.LBB13_36
	.quad	.LBB13_36
	.quad	.LBB13_36
	.quad	.LBB13_28
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_28
	.quad	.LBB13_28
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_50
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_24
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_50
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_20
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_18
	.quad	.LBB13_4
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16
	.quad	.LBB13_16
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_72
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_15
	.quad	.LBB13_16

	.text
	.globl	get_attr_pent_pair
	.align	16, 0x90
	.type	get_attr_pent_pair,@function
get_attr_pent_pair:                     # @get_attr_pent_pair
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp149:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp150:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp151:
	.cfi_def_cfa_offset 32
.Ltmp152:
	.cfi_offset %rbx, -32
.Ltmp153:
	.cfi_offset %r14, -24
.Ltmp154:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB14_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB14_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB14_191
# BB#3:                                 # %cond.end
	movq	$2, %r14
	jmpq	*.LJTI14_0(,%rax,8)
.LBB14_176:                             # %sw.bb520
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB14_177
# BB#178:                               # %sw.bb520
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_16:                              # %sw.bb15
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#17:                                # %if.else19
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB14_18
# BB#19:                                # %if.else19
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_177:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_188:                             # %sw.bb557
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_172:                             # %sw.bb515
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB14_173
# BB#174:                               # %sw.bb515
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_18:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_173:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_187:                             # %sw.bb556
	movq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_170:                             # %sw.bb510
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB14_88
# BB#171:
	movabsq	$0, %rax
	jmp	.LBB14_89
.LBB14_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	jne	.LBB14_5
# BB#6:                                 # %sw.bb
	movabsq	$1, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_8:                               # %sw.bb5
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	jne	.LBB14_9
# BB#10:                                # %sw.bb5
	movabsq	$1, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_168:                             # %sw.bb505
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB14_88
# BB#169:
	movabsq	$0, %rax
	jmp	.LBB14_89
.LBB14_54:                              # %sw.bb121
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#55:                                # %if.else125
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	xorq	%r14, %r14
.LBB14_59:                              # %lor.lhs.false143
	cmpq	$4, %rax
	jne	.LBB14_27
	jmp	.LBB14_192
.LBB14_129:                             # %sw.bb360
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#130:                               # %if.else364
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB14_88
# BB#131:
	movabsq	$0, %rax
	jmp	.LBB14_89
.LBB14_21:                              # %sw.bb24
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#22:                                # %if.else28
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB14_191
	jmp	.LBB14_23
.LBB14_5:
	movabsq	$0, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_9:
	movabsq	$0, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_158:                             # %sw.bb472
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB14_159
# BB#160:                               # %sw.bb472
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_115:                             # %sw.bb307
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB14_191
	jmp	.LBB14_116
.LBB14_182:                             # %sw.bb538
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#183:                               # %select.mid12
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_56:                              # %sw.bb137
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#57:                                # %if.else141
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	testq	%rax, %rax
	jne	.LBB14_192
# BB#58:                                # %lor.lhs.false143
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	jmp	.LBB14_59
.LBB14_28:                              # %sw.bb51
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#29:                                # %if.else55
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	movq	$1, %r14
	je	.LBB14_192
# BB#30:                                # %lor.lhs.false58
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB14_191
# BB#31:                                # %land.lhs.true61
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
.LBB14_124:                             # %land.lhs.true335
	testq	%r15, %rax
	jne	.LBB14_192
	jmp	.LBB14_191
.LBB14_189:                             # %sw.bb558
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB14_191
# BB#190:                               # %land.lhs.true562
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB14_191
# BB#193:                               # %if.then568
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_pent_pair, %rcx
	movq	$19258, %rdx            # imm = 0x4B3A
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB14_162:                             # %sw.bb477
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#163:                               # %if.else481
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB14_191
# BB#164:                               # %land.lhs.true493
	movl	flag_pic(%rip), %eax
	xorq	%r14, %r14
	testq	%rax, %rax
	je	.LBB14_192
# BB#165:                               # %lor.lhs.false495
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB14_192
# BB#166:                               # %lor.lhs.false498
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB14_191
# BB#167:                               # %land.lhs.true500
	movq	recog_data+8(%rip), %rax
	movq	$4, %rsi
	jmp	.LBB14_123
.LBB14_145:                             # %sw.bb426
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#146:                               # %if.else430
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB14_192
# BB#147:                               # %if.then433
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB14_150
# BB#148:                               # %lor.lhs.false437
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB14_155
# BB#149:                               # %land.lhs.true441
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB14_155
.LBB14_150:                             # %land.lhs.true445
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB14_152
# BB#151:                               # %lor.lhs.false451
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB14_155
.LBB14_152:                             # %land.lhs.true454
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %r14
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB14_155
# BB#153:                               # %land.lhs.true458
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB14_155
# BB#154:                               # %land.lhs.true458
	cmpq	$2, %rax
	jne	.LBB14_192
.LBB14_155:                             # %lor.lhs.false466
	movq	%rbx, %rdi
	callq	get_attr_mode
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB14_156
# BB#157:                               # %lor.lhs.false466
	movabsq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_132:                             # %sw.bb369
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#133:                               # %if.else373
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB14_192
# BB#134:                               # %if.else373
	cmpq	$3, %rax
	jne	.LBB14_139
# BB#135:                               # %land.lhs.true375
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	movq	$1, %rax
	movq	%rsi, %rdi
	andq	%rdx, %rdi
	testq	%r15, %rdi
	je	.LBB14_137
# BB#136:                               # %lor.lhs.false379
	movl	x86_qimode_math(%rip), %edi
	andq	%rsi, %rdi
	testq	%r15, %rdi
	jne	.LBB14_192
.LBB14_137:                             # %lor.lhs.false405
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB14_144
# BB#138:                               # %land.lhs.true409
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	movq	$1, %r14
	jne	.LBB14_192
	jmp	.LBB14_144
.LBB14_126:                             # %sw.bb347
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#127:                               # %if.else351
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB14_191
# BB#128:                               # %land.lhs.true354
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	xorq	%r14, %r14
	testq	%r15, %rdx
	jne	.LBB14_191
	jmp	.LBB14_192
.LBB14_125:                             # %sw.bb340
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB14_191
.LBB14_116:                             # %land.lhs.true309
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB14_191
	jmp	.LBB14_192
.LBB14_117:                             # %sw.bb314
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#118:                               # %if.else318
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB14_191
# BB#119:                               # %land.lhs.true328
	movl	flag_pic(%rip), %eax
	xorq	%r14, %r14
	testq	%rax, %rax
	je	.LBB14_192
# BB#120:                               # %lor.lhs.false330
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB14_192
# BB#121:                               # %lor.lhs.false333
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB14_191
# BB#122:                               # %land.lhs.true335
	movq	recog_data+8(%rip), %rax
	movq	$5, %rsi
.LBB14_123:                             # %land.lhs.true335
	movq	%rax, %rdi
	callq	symbolic_operand
	jmp	.LBB14_124
.LBB14_109:                             # %sw.bb291
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#110:                               # %if.else295
	movl	which_alternative(%rip), %edx
	cmpq	$2, %rdx
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rsi
	jbe	.LBB14_112
# BB#111:                               # %if.else295
	movq	%rcx, %rsi
.LBB14_112:                             # %if.else295
	addq	$-3, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	sbbq	%rdx, %rdx
	testq	%rsi, %rdx
	jne	.LBB14_114
# BB#113:                               # %if.else295
	movq	%rcx, %rax
.LBB14_114:                             # %if.else295
	leaq	(%rax,%rax,2), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_107:                             # %sw.bb287
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#108:                               # %select.mid10
	movq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_105:                             # %sw.bb283
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#106:                               # %select.mid8
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_102:                             # %sw.bb275
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#103:                               # %if.else279
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#104:                               # %select.mid6
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_96:                              # %sw.bb258
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#97:                                # %if.else262
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	xorq	%r14, %r14
	cmpq	$4, %rax
	je	.LBB14_192
# BB#98:                                # %if.else262
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB14_192
# BB#99:                                # %lor.lhs.false267
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB14_192
# BB#100:                               # %lor.lhs.false270
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB14_88
# BB#101:
	movabsq	$0, %rax
	jmp	.LBB14_89
.LBB14_90:                              # %sw.bb241
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#91:                                # %if.else245
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	xorq	%r14, %r14
	cmpq	$4, %rax
	je	.LBB14_192
# BB#92:                                # %if.else245
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB14_192
# BB#93:                                # %lor.lhs.false250
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB14_192
# BB#94:                                # %lor.lhs.false253
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB14_88
# BB#95:
	movabsq	$0, %rax
	jmp	.LBB14_89
.LBB14_82:                              # %sw.bb224
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#83:                                # %if.else228
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	xorq	%r14, %r14
	cmpq	$4, %rax
	je	.LBB14_192
# BB#84:                                # %if.else228
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB14_192
# BB#85:                                # %lor.lhs.false233
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB14_192
# BB#86:                                # %lor.lhs.false236
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	jne	.LBB14_87
.LBB14_88:                              # %lor.lhs.false236
	movabsq	$1, %rax
.LBB14_89:                              # %lor.lhs.false236
	xorq	$1, %rax
	leaq	(%rax,%rax,2), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_75:                              # %sw.bb203
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#76:                                # %if.else207
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %rcx
	je	.LBB14_81
# BB#77:                                # %land.lhs.true209
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	movl	which_alternative(%rip), %ecx
	testq	%r15, %rax
	je	.LBB14_81
# BB#78:                                # %land.lhs.true209
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB14_81
# BB#79:                                # %lor.lhs.false214
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	movq	$3, %r14
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB14_192
# BB#80:                                # %lor.lhs.false214.if.then217_crit_edge
	movl	which_alternative(%rip), %ecx
.LBB14_81:                              # %if.then217
	andq	%r15, %rcx
	cmpq	$2, %rcx
	sbbq	%r14, %r14
	andq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_66:                              # %sw.bb187
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#67:                                # %if.else191
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$3, %rax
	je	.LBB14_192
# BB#68:                                # %land.lhs.true193
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB14_192
# BB#69:                                # %land.lhs.true193
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB14_192
# BB#70:                                # %lor.lhs.false198
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB14_71
# BB#72:                                # %lor.lhs.false198
	movabsq	$1, %rax
	jmp	.LBB14_73
.LBB14_180:                             # %sw.bb525
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB14_191
# BB#181:                               # %sw.bb525
	xorq	%r14, %r14
	cmpq	$1, %rax
	je	.LBB14_191
	jmp	.LBB14_192
.LBB14_184:                             # %sw.bb545
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	testq	%rax, %rax
	je	.LBB14_192
# BB#185:                               # %sw.bb545
	cmpq	$2, %rax
	je	.LBB14_192
# BB#186:                               # %sw.bb545
	cmpq	$1, %rax
	jmp	.LBB14_191
.LBB14_64:                              # %sw.bb175
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#65:                                # %if.else179
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$3, %rax
	jae	.LBB14_191
	jmp	.LBB14_192
.LBB14_62:                              # %sw.bb165
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#63:                                # %if.else169
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	cmpq	$2, %rax
	jae	.LBB14_191
	jmp	.LBB14_192
.LBB14_60:                              # %sw.bb155
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#61:                                # %if.else159
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$1, %r14
	jae	.LBB14_191
	jmp	.LBB14_192
.LBB14_46:                              # %sw.bb102
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#47:                                # %if.else106
	movl	which_alternative(%rip), %eax
	xorq	%r14, %r14
	testq	%rax, %rax
	jne	.LBB14_192
# BB#48:                                # %lor.lhs.false108
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB14_50
# BB#49:                                # %land.lhs.true112
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB14_192
.LBB14_50:                              # %if.else116
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB14_51
# BB#52:                                # %if.else116
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_39:                              # %sw.bb87
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#40:                                # %if.else91
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB14_42
# BB#41:                                # %land.lhs.true93
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	xorq	%r14, %r14
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB14_192
.LBB14_42:                              # %if.else97
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB14_43
# BB#44:                                # %if.else97
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_32:                              # %sw.bb66
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#33:                                # %if.else70
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB14_36
# BB#34:                                # %lor.lhs.false72
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB14_27
# BB#35:                                # %lor.lhs.false72.if.then75_crit_edge
	movl	which_alternative(%rip), %eax
.LBB14_36:                              # %if.then75
	testq	%r15, %rax
	jne	.LBB14_37
# BB#38:                                # %if.then75
	movabsq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_24:                              # %sw.bb34
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB14_192
# BB#25:                                # %if.else38
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	xorq	%r14, %r14
	cmpq	$4, %rax
	je	.LBB14_192
# BB#26:                                # %if.else38
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB14_192
.LBB14_27:                              # %if.else43
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB14_191
.LBB14_23:                              # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB14_192
.LBB14_191:                             # %sw.default
	movq	$3, %r14
.LBB14_192:                             # %return
	movq	%r14, %rax
.LBB14_74:                              # %lor.lhs.false198
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB14_12:                              # %sw.bb10
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$14, %rax
	je	.LBB14_13
# BB#14:                                # %sw.bb10
	movabsq	$1, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_159:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_13:
	movabsq	$0, %r14
	orq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_37:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_139:                             # %land.lhs.true397
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB14_141
# BB#140:                               # %land.lhs.true397
	cmpq	$2, %rax
	je	.LBB14_192
.LBB14_141:                             # %land.lhs.true413
	cmpq	$5, %rax
	movq	$1, %r14
	je	.LBB14_192
# BB#142:                               # %lor.lhs.false417
	movq	$1, %r14
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB14_144
# BB#143:                               # %lor.lhs.false417
	cmpq	$2, %rax
	je	.LBB14_192
.LBB14_144:                             # %if.else424
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_43:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_87:
	movabsq	$0, %rax
	jmp	.LBB14_89
.LBB14_71:
	movabsq	$0, %rax
.LBB14_73:                              # %lor.lhs.false198
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB14_74
.LBB14_156:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.LBB14_51:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB14_74
.Ltmp155:
	.size	get_attr_pent_pair, .Ltmp155-get_attr_pent_pair
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI14_0:
	.quad	.LBB14_189
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_170
	.quad	.LBB14_170
	.quad	.LBB14_170
	.quad	.LBB14_168
	.quad	.LBB14_168
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_162
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_158
	.quad	.LBB14_170
	.quad	.LBB14_145
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_172
	.quad	.LBB14_187
	.quad	.LBB14_158
	.quad	.LBB14_170
	.quad	.LBB14_132
	.quad	.LBB14_191
	.quad	.LBB14_176
	.quad	.LBB14_188
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_129
	.quad	.LBB14_129
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_129
	.quad	.LBB14_126
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_125
	.quad	.LBB14_170
	.quad	.LBB14_168
	.quad	.LBB14_168
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_191
	.quad	.LBB14_117
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_115
	.quad	.LBB14_115
	.quad	.LBB14_109
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_188
	.quad	.LBB14_191
	.quad	.LBB14_187
	.quad	.LBB14_107
	.quad	.LBB14_191
	.quad	.LBB14_188
	.quad	.LBB14_105
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_102
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_187
	.quad	.LBB14_176
	.quad	.LBB14_187
	.quad	.LBB14_187
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_96
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_90
	.quad	.LBB14_82
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_75
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_176
	.quad	.LBB14_172
	.quad	.LBB14_66
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_187
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_187
	.quad	.LBB14_187
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_180
	.quad	.LBB14_182
	.quad	.LBB14_182
	.quad	.LBB14_184
	.quad	.LBB14_191
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_64
	.quad	.LBB14_176
	.quad	.LBB14_62
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_60
	.quad	.LBB14_172
	.quad	.LBB14_176
	.quad	.LBB14_188
	.quad	.LBB14_176
	.quad	.LBB14_188
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_176
	.quad	.LBB14_188
	.quad	.LBB14_176
	.quad	.LBB14_188
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_172
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_188
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_188
	.quad	.LBB14_188
	.quad	.LBB14_191
	.quad	.LBB14_187
	.quad	.LBB14_191
	.quad	.LBB14_188
	.quad	.LBB14_56
	.quad	.LBB14_54
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_56
	.quad	.LBB14_46
	.quad	.LBB14_54
	.quad	.LBB14_39
	.quad	.LBB14_32
	.quad	.LBB14_28
	.quad	.LBB14_28
	.quad	.LBB14_24
	.quad	.LBB14_54
	.quad	.LBB14_54
	.quad	.LBB14_21
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_21
	.quad	.LBB14_21
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_16
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_192
	.quad	.LBB14_192
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_192
	.quad	.LBB14_192
	.quad	.LBB14_192
	.quad	.LBB14_192
	.quad	.LBB14_192
	.quad	.LBB14_12
	.quad	.LBB14_8
	.quad	.LBB14_8
	.quad	.LBB14_8
	.quad	.LBB14_8
	.quad	.LBB14_8
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_192
	.quad	.LBB14_191
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_188
	.quad	.LBB14_191
	.quad	.LBB14_188
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_176
	.quad	.LBB14_176
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_191
	.quad	.LBB14_4
	.quad	.LBB14_4
	.quad	.LBB14_4
	.quad	.LBB14_4
	.quad	.LBB14_4
	.quad	.LBB14_4

	.text
	.globl	athlon_load_unit_ready_cost
	.align	16, 0x90
	.type	athlon_load_unit_ready_cost,@function
athlon_load_unit_ready_cost:            # @athlon_load_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp158:
	.cfi_def_cfa_offset 16
.Ltmp159:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB15_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB15_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB15_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB15_5
.LBB15_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB15_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_load_unit_ready_cost, %rcx
	movq	$2135, %rdx             # imm = 0x857
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp160:
	.size	athlon_load_unit_ready_cost, .Ltmp160-athlon_load_unit_ready_cost
	.cfi_endproc

	.globl	athlon_fp_store_unit_ready_cost
	.align	16, 0x90
	.type	athlon_fp_store_unit_ready_cost,@function
athlon_fp_store_unit_ready_cost:        # @athlon_fp_store_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp163:
	.cfi_def_cfa_offset 16
.Ltmp164:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB16_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB16_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB16_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB16_5
.LBB16_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB16_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_fp_store_unit_ready_cost, %rcx
	movq	$2152, %rdx             # imm = 0x868
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp165:
	.size	athlon_fp_store_unit_ready_cost, .Ltmp165-athlon_fp_store_unit_ready_cost
	.cfi_endproc

	.globl	athlon_fp_muladd_unit_ready_cost
	.align	16, 0x90
	.type	athlon_fp_muladd_unit_ready_cost,@function
athlon_fp_muladd_unit_ready_cost:       # @athlon_fp_muladd_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp168:
	.cfi_def_cfa_offset 16
.Ltmp169:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB17_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB17_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB17_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB17_5
.LBB17_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB17_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_fp_muladd_unit_ready_cost, %rcx
	movq	$2169, %rdx             # imm = 0x879
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp170:
	.size	athlon_fp_muladd_unit_ready_cost, .Ltmp170-athlon_fp_muladd_unit_ready_cost
	.cfi_endproc

	.globl	athlon_fp_add_unit_ready_cost
	.align	16, 0x90
	.type	athlon_fp_add_unit_ready_cost,@function
athlon_fp_add_unit_ready_cost:          # @athlon_fp_add_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp173:
	.cfi_def_cfa_offset 16
.Ltmp174:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB18_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB18_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB18_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB18_5
.LBB18_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB18_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_fp_add_unit_ready_cost, %rcx
	movq	$2186, %rdx             # imm = 0x88A
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp175:
	.size	athlon_fp_add_unit_ready_cost, .Ltmp175-athlon_fp_add_unit_ready_cost
	.cfi_endproc

	.globl	athlon_fp_mul_unit_ready_cost
	.align	16, 0x90
	.type	athlon_fp_mul_unit_ready_cost,@function
athlon_fp_mul_unit_ready_cost:          # @athlon_fp_mul_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp178:
	.cfi_def_cfa_offset 16
.Ltmp179:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB19_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB19_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB19_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB19_5
.LBB19_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB19_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_fp_mul_unit_ready_cost, %rcx
	movq	$2203, %rdx             # imm = 0x89B
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp180:
	.size	athlon_fp_mul_unit_ready_cost, .Ltmp180-athlon_fp_mul_unit_ready_cost
	.cfi_endproc

	.globl	athlon_fp_unit_ready_cost
	.align	16, 0x90
	.type	athlon_fp_unit_ready_cost,@function
athlon_fp_unit_ready_cost:              # @athlon_fp_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp186:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp187:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp188:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp189:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp190:
	.cfi_def_cfa_offset 48
.Ltmp191:
	.cfi_offset %rbx, -40
.Ltmp192:
	.cfi_offset %r12, -32
.Ltmp193:
	.cfi_offset %r14, -24
.Ltmp194:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB20_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB20_2:                               # %cond.end
	movq	$100, %r12
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB20_37
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB20_35
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$364, %rdx              # imm = 0x16C
	jg	.LBB20_24
# BB#5:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB20_10
# BB#6:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB20_242
# BB#7:                                 # %sw.bb822
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB20_242
# BB#8:                                 # %land.lhs.true826
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB20_242
# BB#9:                                 # %if.then832
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_fp_unit_ready_cost, %rcx
	movq	$2626, %rdx             # imm = 0xA42
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB20_37:                              # %cond.end
	addq	$-618, %rax             # imm = 0xFFFFFFFFFFFFFD96
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$4, %rax
	ja	.LBB20_242
# BB#38:                                # %cond.end
	jmpq	*.LJTI20_0(,%rax,8)
.LBB20_44:                              # %sw.bb11
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB20_241
# BB#45:                                # %land.lhs.true15
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$1, %rax
	movq	$7, %r12
	jne	.LBB20_47
# BB#46:                                # %land.lhs.true15
	movl	ix86_cpu(%rip), %eax
	andq	%rbx, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_47:                              # %lor.lhs.false20
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB20_241
# BB#48:                                # %lor.lhs.false20
	movl	ix86_cpu(%rip), %eax
	andq	%rbx, %rax
	jmp	.LBB20_21
.LBB20_35:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$33, %rax
	ja	.LBB20_242
# BB#36:                                # %cond.end
	movq	$100, %r12
	jmpq	*.LJTI20_1(,%rax,8)
.LBB20_62:                              # %sw.bb68
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB20_67
# BB#63:                                # %land.lhs.true71
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$24, %r12
	jne	.LBB20_65
# BB#64:                                # %land.lhs.true71
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_65:                              # %lor.lhs.false76
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_67
# BB#66:                                # %lor.lhs.false76
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_67:                              # %if.else82
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB20_55
.LBB20_24:                              # %cond.end
	addq	$-365, %rax             # imm = 0xFFFFFFFFFFFFFE93
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$27, %rcx
	ja	.LBB20_242
# BB#25:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$267911679, %rax        # imm = 0xFF801FF
	je	.LBB20_242
.LBB20_26:                              # %sw.bb445
	movq	%r14, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$1, %rax
	jne	.LBB20_28
# BB#27:                                # %sw.bb445
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r12
	andq	%rbx, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_28:                              # %lor.lhs.false450
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	je	.LBB20_30
# BB#29:                                # %lor.lhs.false450
	movq	%rdx, %rcx
.LBB20_30:                              # %lor.lhs.false450
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB20_32
# BB#31:                                # %lor.lhs.false450
	movq	%rdx, %rax
.LBB20_32:                              # %lor.lhs.false450
	testq	%rax, %rcx
	movq	$2, %rax
	jne	.LBB20_34
# BB#33:                                # %lor.lhs.false450
	movq	$100, %rax
	jmp	.LBB20_34
.LBB20_39:                              # %sw.bb
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$7, %r12
	jne	.LBB20_241
	jmp	.LBB20_242
.LBB20_10:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB20_22
# BB#11:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$36, %rax
	ja	.LBB20_242
# BB#12:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	je	.LBB20_13
# BB#234:                               # %sw.bb810
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_236
# BB#235:                               # %sw.bb810
	movl	ix86_cpu(%rip), %eax
	movq	$3, %r12
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_236:                             # %lor.lhs.false815
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	je	.LBB20_238
# BB#237:                               # %lor.lhs.false815
	movq	%rdx, %rcx
.LBB20_238:                             # %lor.lhs.false815
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB20_240
# BB#239:                               # %lor.lhs.false815
	movq	%rdx, %rax
.LBB20_240:                             # %lor.lhs.false815
	testq	%rax, %rcx
	movq	$3, %r12
	jne	.LBB20_242
	jmp	.LBB20_241
.LBB20_40:                              # %sw.bb5
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	cmpq	$2, %rax
	sbbq	%rax, %rax
	cmpq	$5, %rcx
	jne	.LBB20_41
# BB#42:                                # %sw.bb5
	movabsq	$1, %rcx
	jmp	.LBB20_43
.LBB20_22:                              # %cond.end
	addq	$-90, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$94, %rax
	ja	.LBB20_242
# BB#23:                                # %cond.end
	movq	$100, %r12
	jmpq	*.LJTI20_2(,%rax,8)
.LBB20_136:                             # %sw.bb471
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB20_241
	jmp	.LBB20_135
.LBB20_49:                              # %sw.bb27
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB20_54
# BB#50:                                # %land.lhs.true30
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$24, %r12
	jne	.LBB20_52
# BB#51:                                # %land.lhs.true30
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_52:                              # %lor.lhs.false35
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_54
# BB#53:                                # %lor.lhs.false35
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_54:                              # %if.else41
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	jmp	.LBB20_55
.LBB20_41:
	movabsq	$0, %rcx
.LBB20_43:                              # %sw.bb5
	testq	%rcx, %rax
	movq	$7, %r12
	je	.LBB20_241
	jmp	.LBB20_242
.LBB20_75:                              # %sw.bb154
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB20_74
# BB#76:                                # %land.lhs.true157
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$24, %r12
	jne	.LBB20_78
# BB#77:                                # %land.lhs.true157
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_78:                              # %lor.lhs.false162
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_74
# BB#79:                                # %lor.lhs.false162
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
	jmp	.LBB20_74
.LBB20_87:                              # %sw.bb240
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB20_86
# BB#88:                                # %land.lhs.true243
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$24, %r12
	jne	.LBB20_90
# BB#89:                                # %land.lhs.true243
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_90:                              # %lor.lhs.false248
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_86
# BB#91:                                # %lor.lhs.false248
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
	jmp	.LBB20_86
.LBB20_113:                             # %sw.bb370
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB20_112
# BB#114:                               # %land.lhs.true373
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$4, %r12
	jne	.LBB20_116
# BB#115:                               # %land.lhs.true373
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_116:                             # %lor.lhs.false378
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_112
# BB#117:                               # %lor.lhs.false378
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
	jmp	.LBB20_112
.LBB20_105:                             # %sw.bb338
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB20_241
# BB#106:                               # %land.lhs.true340
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB20_111
# BB#107:                               # %land.lhs.true343
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$4, %r12
	jne	.LBB20_109
# BB#108:                               # %land.lhs.true343
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_109:                             # %lor.lhs.false348
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_111
# BB#110:                               # %lor.lhs.false348
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_111:                             # %lor.lhs.false353
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB20_241
.LBB20_112:                             # %land.lhs.true355
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB20_98
.LBB20_99:                              # %sw.bb310
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB20_104
# BB#100:                               # %land.lhs.true313
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$4, %r12
	jne	.LBB20_102
# BB#101:                               # %land.lhs.true313
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_102:                             # %lor.lhs.false318
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_104
# BB#103:                               # %lor.lhs.false318
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_104:                             # %lor.lhs.false323
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB20_98
.LBB20_92:                              # %sw.bb282
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB20_97
# BB#93:                                # %land.lhs.true285
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$4, %r12
	jne	.LBB20_95
# BB#94:                                # %land.lhs.true285
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_95:                              # %lor.lhs.false290
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_97
# BB#96:                                # %lor.lhs.false290
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_97:                              # %lor.lhs.false295
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
.LBB20_98:                              # %lor.lhs.false295
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB20_241
	jmp	.LBB20_61
.LBB20_80:                              # %sw.bb196
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB20_85
# BB#81:                                # %land.lhs.true199
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$24, %r12
	jne	.LBB20_83
# BB#82:                                # %land.lhs.true199
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_83:                              # %lor.lhs.false204
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_85
# BB#84:                                # %lor.lhs.false204
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_85:                              # %if.else210
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB20_60
.LBB20_86:                              # %land.lhs.true212
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB20_55
.LBB20_68:                              # %sw.bb110
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB20_73
# BB#69:                                # %land.lhs.true113
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$24, %r12
	jne	.LBB20_71
# BB#70:                                # %land.lhs.true113
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_71:                              # %lor.lhs.false118
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_73
# BB#72:                                # %lor.lhs.false118
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_73:                              # %if.else124
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB20_60
.LBB20_74:                              # %land.lhs.true126
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
.LBB20_55:                              # %if.else41
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB20_60
# BB#56:                                # %land.lhs.true43
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$4, %r12
	jne	.LBB20_58
# BB#57:                                # %land.lhs.true43
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_58:                              # %lor.lhs.false48
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_60
# BB#59:                                # %lor.lhs.false48
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_60:                              # %lor.lhs.false53
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	jne	.LBB20_241
.LBB20_61:                              # %land.lhs.true56
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$4, %r12
	je	.LBB20_16
	jmp	.LBB20_17
.LBB20_13:                              # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	je	.LBB20_242
# BB#14:                                # %sw.bb796
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB20_241
# BB#15:                                # %land.lhs.true798
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r12
	je	.LBB20_16
	jmp	.LBB20_17
.LBB20_133:                             # %sw.bb441
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$4, %r12
	jne	.LBB20_241
	jmp	.LBB20_242
.LBB20_118:                             # %sw.bb398
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB20_241
# BB#119:                               # %land.lhs.true400
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_121
# BB#120:                               # %lor.lhs.false403
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB20_123
.LBB20_121:                             # %land.lhs.true406
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_123
# BB#122:                               # %land.lhs.true406
	movl	ix86_cpu(%rip), %eax
	movq	$10, %r12
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_123:                             # %if.else412
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB20_241
# BB#124:                               # %land.lhs.true414
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_126
# BB#125:                               # %lor.lhs.false417
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB20_128
.LBB20_126:                             # %land.lhs.true420
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_128
# BB#127:                               # %land.lhs.true420
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r12
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_128:                             # %if.else426
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB20_241
	jmp	.LBB20_129
.LBB20_204:                             # %sw.bb655
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB20_241
# BB#205:                               # %land.lhs.true661
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB20_208
# BB#206:                               # %lor.lhs.false665
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_208
# BB#207:                               # %lor.lhs.false668
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB20_210
.LBB20_208:                             # %land.lhs.true671
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_210
# BB#209:                               # %land.lhs.true671
	movl	ix86_cpu(%rip), %eax
	movq	$10, %r12
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_210:                             # %if.else677
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB20_241
# BB#211:                               # %land.lhs.true683
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB20_215
# BB#212:                               # %lor.lhs.false687
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_215
# BB#213:                               # %lor.lhs.false690
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB20_214
.LBB20_215:                             # %land.lhs.true693
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %r12
	jne	.LBB20_220
# BB#216:                               # %land.lhs.true693
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	je	.LBB20_220
# BB#217:                               # %land.lhs.true693
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_220
# BB#218:                               # %land.lhs.true693
	cmpq	$2, %rax
	je	.LBB20_220
# BB#219:                               # %land.lhs.true693
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_220:                             # %lor.lhs.false704
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_222
# BB#221:                               # %lor.lhs.false704
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_222:                             # %lor.lhs.false709
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_227
# BB#223:                               # %lor.lhs.false709
	testq	%r15, %rcx
	je	.LBB20_227
# BB#224:                               # %lor.lhs.false709
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_227
# BB#225:                               # %lor.lhs.false709
	cmpq	$2, %rax
	je	.LBB20_227
# BB#226:                               # %lor.lhs.false709
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
	jmp	.LBB20_227
.LBB20_137:                             # %sw.bb485
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB20_160
# BB#138:                               # %land.lhs.true487
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_141
# BB#139:                               # %lor.lhs.false490
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB20_140
.LBB20_141:                             # %land.lhs.true493
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_144
# BB#142:                               # %land.lhs.true493
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_144
# BB#143:                               # %land.lhs.true493
	movl	ix86_cpu(%rip), %eax
	movq	$10, %r12
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
	jmp	.LBB20_144
.LBB20_233:                             # %sw.bb778
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB20_135
	jmp	.LBB20_241
.LBB20_168:                             # %sw.bb562
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB20_241
# BB#169:                               # %land.lhs.true566
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_170
# BB#172:                               # %land.lhs.true572
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	jne	.LBB20_176
	jmp	.LBB20_173
.LBB20_134:                             # %sw.bb457
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB20_241
.LBB20_135:                             # %land.lhs.true459
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %r12
	jne	.LBB20_17
.LBB20_16:                              # %land.lhs.true798
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_17:                              # %lor.lhs.false803
	movq	%r14, %rdi
	callq	get_attr_memory
.LBB20_18:                              # %lor.lhs.false803
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_19
	jmp	.LBB20_241
.LBB20_140:                             # %lor.lhs.false490.if.else501_crit_edge
	movl	which_alternative(%rip), %ecx
.LBB20_144:                             # %if.else501
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB20_160
# BB#145:                               # %land.lhs.true503
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_148
# BB#146:                               # %lor.lhs.false506
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB20_147
.LBB20_148:                             # %land.lhs.true509
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %r12
	jne	.LBB20_151
# BB#149:                               # %land.lhs.true509
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB20_151
# BB#150:                               # %land.lhs.true509
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_151:                             # %lor.lhs.false516
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_154
# BB#152:                               # %lor.lhs.false516
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_154
# BB#153:                               # %lor.lhs.false516
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_154:                             # %lor.lhs.false523
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_157
# BB#155:                               # %lor.lhs.false523
	testq	%r15, %rcx
	jne	.LBB20_157
# BB#156:                               # %lor.lhs.false523
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
	jmp	.LBB20_157
.LBB20_170:                             # %lor.lhs.false569
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB20_176
# BB#171:                               # %lor.lhs.false569
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_176
.LBB20_173:                             # %land.lhs.true574
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_176
# BB#174:                               # %land.lhs.true574
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_176
# BB#175:                               # %land.lhs.true574
	movl	ix86_cpu(%rip), %eax
	movq	$10, %r12
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_176:                             # %if.else582
	andq	%r15, %rcx
	cmpq	$1, %rcx
	ja	.LBB20_241
# BB#177:                               # %land.lhs.true586
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_178
# BB#180:                               # %land.lhs.true592
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	jne	.LBB20_190
	jmp	.LBB20_181
.LBB20_214:                             # %lor.lhs.false690.if.else721_crit_edge
	movl	which_alternative(%rip), %ecx
.LBB20_227:                             # %if.else721
	andq	%r15, %rcx
	cmpq	$2, %rcx
	ja	.LBB20_241
# BB#228:                               # %lor.lhs.false737
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_232
# BB#229:                               # %land.lhs.true740
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB20_232
# BB#230:                               # %land.lhs.true743
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_232
# BB#231:                               # %land.lhs.true743
	movl	ix86_cpu(%rip), %eax
	movq	$10, %r12
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_232:                             # %if.else749
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB20_241
.LBB20_129:                             # %land.lhs.true428
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_241
# BB#130:                               # %land.lhs.true431
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB20_241
# BB#131:                               # %land.lhs.true434
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_241
# BB#132:                               # %land.lhs.true434
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r12
	jmp	.LBB20_20
.LBB20_147:                             # %lor.lhs.false506.if.else531_crit_edge
	movl	which_alternative(%rip), %ecx
.LBB20_157:                             # %if.else531
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB20_160
# BB#158:                               # %lor.lhs.false533
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_241
# BB#159:                               # %land.lhs.true536
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB20_241
.LBB20_160:                             # %land.lhs.true539
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %r12
	jne	.LBB20_163
# BB#161:                               # %land.lhs.true539
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB20_163
# BB#162:                               # %land.lhs.true539
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_163:                             # %lor.lhs.false546
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_166
# BB#164:                               # %lor.lhs.false546
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_166
# BB#165:                               # %lor.lhs.false546
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_166:                             # %lor.lhs.false553
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_241
# BB#167:                               # %lor.lhs.false553
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB20_241
.LBB20_19:                              # %lor.lhs.false803
	movl	ix86_cpu(%rip), %eax
.LBB20_20:                              # %lor.lhs.false803
	andq	%r15, %rax
.LBB20_21:                              # %lor.lhs.false803
	cmpq	$5, %rax
	je	.LBB20_242
	jmp	.LBB20_241
.LBB20_178:                             # %lor.lhs.false589
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB20_190
# BB#179:                               # %lor.lhs.false589
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_190
.LBB20_181:                             # %land.lhs.true594
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %r12
	jne	.LBB20_184
# BB#182:                               # %land.lhs.true594
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_184
# BB#183:                               # %land.lhs.true594
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_184:                             # %lor.lhs.false601
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_187
# BB#185:                               # %lor.lhs.false601
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_187
# BB#186:                               # %lor.lhs.false601
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_187:                             # %lor.lhs.false608
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_190
# BB#188:                               # %lor.lhs.false608
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_190
# BB#189:                               # %lor.lhs.false608
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_190:                             # %if.else616
	andq	%r15, %rcx
	cmpq	$1, %rcx
	ja	.LBB20_241
# BB#191:                               # %lor.lhs.false624
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_192
# BB#194:                               # %lor.lhs.false630
	movl	which_alternative(%rip), %eax
	jmp	.LBB20_195
.LBB20_192:                             # %land.lhs.true627
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB20_196
# BB#193:                               # %land.lhs.true627
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
.LBB20_195:                             # %lor.lhs.false630
	cmpq	$1, %rax
	je	.LBB20_241
.LBB20_196:                             # %land.lhs.true632
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %r12
	jne	.LBB20_199
# BB#197:                               # %land.lhs.true632
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_199
# BB#198:                               # %land.lhs.true632
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_199:                             # %lor.lhs.false639
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_202
# BB#200:                               # %lor.lhs.false639
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB20_202
# BB#201:                               # %lor.lhs.false639
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB20_242
.LBB20_202:                             # %lor.lhs.false646
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB20_241
# BB#203:                               # %lor.lhs.false646
	movl	which_alternative(%rip), %eax
	jmp	.LBB20_18
.LBB20_241:                             # %lor.lhs.false815
	movq	$100, %r12
.LBB20_242:                             # %return
	movq	%r12, %rax
.LBB20_34:                              # %lor.lhs.false450
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.Ltmp195:
	.size	athlon_fp_unit_ready_cost, .Ltmp195-athlon_fp_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI20_0:
	.quad	.LBB20_44
	.quad	.LBB20_40
	.quad	.LBB20_44
	.quad	.LBB20_39
	.quad	.LBB20_39
.LJTI20_1:
	.quad	.LBB20_113
	.quad	.LBB20_105
	.quad	.LBB20_242
	.quad	.LBB20_113
	.quad	.LBB20_105
	.quad	.LBB20_242
	.quad	.LBB20_99
	.quad	.LBB20_92
	.quad	.LBB20_87
	.quad	.LBB20_80
	.quad	.LBB20_242
	.quad	.LBB20_87
	.quad	.LBB20_87
	.quad	.LBB20_75
	.quad	.LBB20_68
	.quad	.LBB20_242
	.quad	.LBB20_75
	.quad	.LBB20_75
	.quad	.LBB20_75
	.quad	.LBB20_75
	.quad	.LBB20_62
	.quad	.LBB20_49
	.quad	.LBB20_62
	.quad	.LBB20_49
	.quad	.LBB20_62
	.quad	.LBB20_49
	.quad	.LBB20_62
	.quad	.LBB20_49
	.quad	.LBB20_62
	.quad	.LBB20_49
	.quad	.LBB20_62
	.quad	.LBB20_49
	.quad	.LBB20_62
	.quad	.LBB20_49
.LJTI20_2:
	.quad	.LBB20_233
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_233
	.quad	.LBB20_233
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_204
	.quad	.LBB20_204
	.quad	.LBB20_204
	.quad	.LBB20_204
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_168
	.quad	.LBB20_242
	.quad	.LBB20_137
	.quad	.LBB20_137
	.quad	.LBB20_137
	.quad	.LBB20_137
	.quad	.LBB20_136
	.quad	.LBB20_136
	.quad	.LBB20_134
	.quad	.LBB20_26
	.quad	.LBB20_242
	.quad	.LBB20_136
	.quad	.LBB20_26
	.quad	.LBB20_136
	.quad	.LBB20_26
	.quad	.LBB20_136
	.quad	.LBB20_26
	.quad	.LBB20_136
	.quad	.LBB20_26
	.quad	.LBB20_133
	.quad	.LBB20_133
	.quad	.LBB20_133
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_133
	.quad	.LBB20_133
	.quad	.LBB20_133
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_133
	.quad	.LBB20_133
	.quad	.LBB20_133
	.quad	.LBB20_242
	.quad	.LBB20_242
	.quad	.LBB20_136
	.quad	.LBB20_136
	.quad	.LBB20_242
	.quad	.LBB20_136
	.quad	.LBB20_136
	.quad	.LBB20_242
	.quad	.LBB20_136
	.quad	.LBB20_136
	.quad	.LBB20_242
	.quad	.LBB20_136
	.quad	.LBB20_136
	.quad	.LBB20_242
	.quad	.LBB20_118
	.quad	.LBB20_118
	.quad	.LBB20_118
	.quad	.LBB20_118
	.quad	.LBB20_118
	.quad	.LBB20_118

	.text
	.globl	athlon_muldiv_unit_ready_cost
	.align	16, 0x90
	.type	athlon_muldiv_unit_ready_cost,@function
athlon_muldiv_unit_ready_cost:          # @athlon_muldiv_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp199:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp200:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp201:
	.cfi_def_cfa_offset 32
.Ltmp202:
	.cfi_offset %rbx, -24
.Ltmp203:
	.cfi_offset %r14, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB21_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB21_2:                               # %cond.end
	movq	$42, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rax, %rdx
	andq	%rcx, %rdx
	cmpq	%rcx, %rdx
	je	.LBB21_6
# BB#3:                                 # %cond.end
	addq	$-249, %rax
	andq	%rcx, %rax
	cmpq	$16, %rax
	ja	.LBB21_8
# BB#4:                                 # %sw.bb
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$5, %rbx
	je	.LBB21_8
# BB#5:                                 # %select.mid
	movq	$42, %rbx
.LBB21_8:                               # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB21_6:                               # %sw.bb5
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB21_8
# BB#7:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB21_8
# BB#9:                                 # %if.then14
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_muldiv_unit_ready_cost, %rcx
	movq	$2669, %rdx             # imm = 0xA6D
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp204:
	.size	athlon_muldiv_unit_ready_cost, .Ltmp204-athlon_muldiv_unit_ready_cost
	.cfi_endproc

	.globl	athlon_muldiv_unit_blockage_range
	.align	16, 0x90
	.type	athlon_muldiv_unit_blockage_range,@function
athlon_muldiv_unit_blockage_range:      # @athlon_muldiv_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp207:
	.cfi_def_cfa_offset 16
.Ltmp208:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB22_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB22_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB22_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB22_5
.LBB22_4:                               # %sw.default
	movq	$65578, %rax            # imm = 0x1002A
	popq	%rbx
	retq
.LBB22_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_muldiv_unit_blockage_range, %rcx
	movq	$2686, %rdx             # imm = 0xA7E
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp209:
	.size	athlon_muldiv_unit_blockage_range, .Ltmp209-athlon_muldiv_unit_blockage_range
	.cfi_endproc

	.globl	athlon_ieu_unit_ready_cost
	.align	16, 0x90
	.type	athlon_ieu_unit_ready_cost,@function
athlon_ieu_unit_ready_cost:             # @athlon_ieu_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp214:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp215:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp216:
	.cfi_def_cfa_offset 32
.Ltmp217:
	.cfi_offset %rbx, -32
.Ltmp218:
	.cfi_offset %r14, -24
.Ltmp219:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB23_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB23_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$42, %r14
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB23_305
# BB#3:                                 # %cond.end
	jmpq	*.LJTI23_0(,%rax,8)
.LBB23_293:                             # %sw.bb570
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$1, %r14
	je	.LBB23_305
# BB#294:                               # %select.mid8
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_39:                              # %sw.bb46
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$15, %r14
	je	.LBB23_305
# BB#40:                                # %select.mid
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_105:                             # %sw.bb189
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$5, %r14
	je	.LBB23_305
# BB#106:                               # %select.mid6
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_295:                             # %sw.bb574
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rcx
	jne	.LBB23_296
# BB#297:                               # %sw.bb574
	movabsq	$1, %rcx
	jmp	.LBB23_298
.LBB23_149:                             # %sw.bb257
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB23_151
# BB#150:                               # %sw.bb257
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_151:                             # %lor.lhs.false262
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_153
# BB#152:                               # %lor.lhs.false262
	movq	%rdx, %rcx
.LBB23_153:                             # %lor.lhs.false262
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_155
# BB#154:                               # %lor.lhs.false262
	movq	%rdx, %rax
.LBB23_155:                             # %lor.lhs.false262
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#156:                               # %lor.lhs.false262
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_128:                             # %sw.bb225
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB23_130
# BB#129:                               # %sw.bb225
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_130:                             # %lor.lhs.false230
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_132
# BB#131:                               # %lor.lhs.false230
	movq	%rdx, %rcx
.LBB23_132:                             # %lor.lhs.false230
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_134
# BB#133:                               # %lor.lhs.false230
	movq	%rdx, %rax
.LBB23_134:                             # %lor.lhs.false230
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#135:                               # %lor.lhs.false230
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_107:                             # %sw.bb193
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB23_109
# BB#108:                               # %sw.bb193
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_109:                             # %lor.lhs.false198
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_111
# BB#110:                               # %lor.lhs.false198
	movq	%rdx, %rcx
.LBB23_111:                             # %lor.lhs.false198
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_113
# BB#112:                               # %lor.lhs.false198
	movq	%rdx, %rax
.LBB23_113:                             # %lor.lhs.false198
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#114:                               # %lor.lhs.false198
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_83:                              # %sw.bb129
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB23_85
# BB#84:                                # %sw.bb129
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_85:                              # %lor.lhs.false134
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_87
# BB#86:                                # %lor.lhs.false134
	movq	%rdx, %rcx
.LBB23_87:                              # %lor.lhs.false134
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_89
# BB#88:                                # %lor.lhs.false134
	movq	%rdx, %rax
.LBB23_89:                              # %lor.lhs.false134
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#90:                                # %lor.lhs.false134
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_181:                             # %sw.bb307
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB23_183
# BB#182:                               # %sw.bb307
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_183:                             # %lor.lhs.false312
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_185
# BB#184:                               # %lor.lhs.false312
	movq	%rdx, %rcx
.LBB23_185:                             # %lor.lhs.false312
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_187
# BB#186:                               # %lor.lhs.false312
	movq	%rdx, %rax
.LBB23_187:                             # %lor.lhs.false312
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#188:                               # %lor.lhs.false312
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_296:
	movabsq	$0, %rcx
.LBB23_298:                             # %sw.bb574
	cmpq	$2, %rax
	sbbq	%rax, %rax
	testq	%rcx, %rax
	movq	$1, %r14
	jne	.LBB23_305
# BB#299:                               # %sw.bb574
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_236:                             # %sw.bb420
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	jne	.LBB23_238
# BB#237:                               # %sw.bb420
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_238:                             # %lor.lhs.false425
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_240
# BB#239:                               # %lor.lhs.false425
	movq	%rdx, %rcx
.LBB23_240:                             # %lor.lhs.false425
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_242
# BB#241:                               # %lor.lhs.false425
	movq	%rdx, %rax
.LBB23_242:                             # %lor.lhs.false425
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#243:                               # %lor.lhs.false425
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_91:                              # %sw.bb141
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$11, %rax
	movq	$1, %r14
	jne	.LBB23_93
# BB#92:                                # %sw.bb141
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_93:                              # %lor.lhs.false146
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB23_95
# BB#94:                                # %lor.lhs.false146
	andq	%r15, %rcx
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_95:                              # %lor.lhs.false150
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_97
# BB#96:                                # %lor.lhs.false150
	movq	%rdx, %rcx
.LBB23_97:                              # %lor.lhs.false150
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_99
# BB#98:                                # %lor.lhs.false150
	movq	%rdx, %rax
.LBB23_99:                              # %lor.lhs.false150
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#100:                               # %lor.lhs.false150
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_47:                              # %sw.bb57
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rcx
	jne	.LBB23_48
# BB#49:                                # %sw.bb57
	movabsq	$1, %rcx
	jmp	.LBB23_50
.LBB23_205:                             # %sw.bb352
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_207
# BB#206:                               # %sw.bb352
	movq	%rdx, %rcx
.LBB23_207:                             # %sw.bb352
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_209
# BB#208:                               # %sw.bb352
	movq	%rdx, %rax
.LBB23_209:                             # %sw.bb352
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#210:                               # %sw.bb352
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_101:                             # %sw.bb157
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$1, %r14
	je	.LBB23_305
# BB#102:                               # %select.mid2
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_33:                              # %sw.bb38
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_35
# BB#34:                                # %sw.bb38
	movq	%rdx, %rcx
.LBB23_35:                              # %sw.bb38
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_37
# BB#36:                                # %sw.bb38
	movq	%rdx, %rax
.LBB23_37:                              # %sw.bb38
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#38:                                # %sw.bb38
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_48:
	movabsq	$0, %rcx
.LBB23_50:                              # %sw.bb57
	cmpq	$2, %rax
	sbbq	%rax, %rax
	testq	%rcx, %rax
	movq	$1, %r14
	jne	.LBB23_305
# BB#51:                                # %sw.bb57
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_300:                             # %sw.bb584
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB23_302
# BB#301:
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_282:                             # %sw.bb530
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %ecx
	movl	which_alternative(%rip), %eax
	testq	%rcx, %rcx
	je	.LBB23_287
# BB#283:                               # %sw.bb530
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$6, %rcx
	jb	.LBB23_287
# BB#284:                               # %land.lhs.true544
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB23_286
# BB#285:                               # %land.lhs.true544
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_286:                             # %land.lhs.true544.lor.lhs.false549_crit_edge
	movl	which_alternative(%rip), %eax
.LBB23_287:                             # %lor.lhs.false549
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB23_292
# BB#288:                               # %land.lhs.true561
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB23_291
# BB#289:                               # %lor.lhs.false563
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB23_292
# BB#290:                               # %lor.lhs.false563
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
	jmp	.LBB23_292
.LBB23_264:                             # %sw.bb488
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB23_267
# BB#265:                               # %lor.lhs.false492
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB23_276
# BB#266:                               # %land.lhs.true496
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB23_276
.LBB23_267:                             # %land.lhs.true500
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB23_269
# BB#268:                               # %lor.lhs.false506
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB23_276
.LBB23_269:                             # %land.lhs.true509
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB23_276
# BB#270:                               # %land.lhs.true513
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	sbbq	%rax, %rax
	andq	$1, %rax
	cmpq	$3, %rsi
	movabsq	$0, %rdx
	movabsq	$1, %r8
	movq	%rdx, %rdi
	jne	.LBB23_272
# BB#271:                               # %land.lhs.true513
	movq	%r8, %rdi
.LBB23_272:                             # %land.lhs.true513
	orq	%rdi, %rax
	cmpq	$4, %rsi
	jne	.LBB23_274
# BB#273:                               # %land.lhs.true513
	movq	%r8, %rdx
.LBB23_274:                             # %land.lhs.true513
	orq	%rdx, %rax
	je	.LBB23_276
# BB#275:                               # %land.lhs.true513
	movq	$1, %r14
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_276:                             # %lor.lhs.false523
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_278
# BB#277:                               # %lor.lhs.false523
	movq	%rdx, %rcx
.LBB23_278:                             # %lor.lhs.false523
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_280
# BB#279:                               # %lor.lhs.false523
	movq	%rdx, %rax
.LBB23_280:                             # %lor.lhs.false523
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#281:                               # %lor.lhs.false523
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_244:                             # %sw.bb432
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB23_247
# BB#245:                               # %lor.lhs.false434
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB23_254
# BB#246:                               # %land.lhs.true438
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB23_253
.LBB23_247:                             # %land.lhs.true442
	cmpq	$3, %rax
	je	.LBB23_252
# BB#248:                               # %land.lhs.true442
	cmpq	$5, %rax
	jne	.LBB23_249
.LBB23_252:                             # %land.lhs.true452
	movl	ix86_cpu(%rip), %ecx
	cmpq	$5, %rcx
	movq	$1, %r14
	je	.LBB23_305
	jmp	.LBB23_253
.LBB23_228:                             # %sw.bb400
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB23_231
# BB#229:                               # %lor.lhs.false403
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %r14
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB23_232
# BB#230:                               # %lor.lhs.false403
	cmpq	$5, %rcx
	je	.LBB23_305
	jmp	.LBB23_232
.LBB23_222:                             # %sw.bb394
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_224
# BB#223:                               # %sw.bb394
	movq	%rdx, %rcx
.LBB23_224:                             # %sw.bb394
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_226
# BB#225:                               # %sw.bb394
	movq	%rdx, %rax
.LBB23_226:                             # %sw.bb394
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#227:                               # %sw.bb394
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_211:                             # %sw.bb358
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %ecx
	movl	which_alternative(%rip), %eax
	testq	%rcx, %rcx
	je	.LBB23_216
# BB#212:                               # %sw.bb358
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jb	.LBB23_216
# BB#213:                               # %land.lhs.true370
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB23_215
# BB#214:                               # %land.lhs.true370
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_215:                             # %land.lhs.true370.lor.lhs.false375_crit_edge
	movl	which_alternative(%rip), %eax
.LBB23_216:                             # %lor.lhs.false375
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB23_221
# BB#217:                               # %land.lhs.true385
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB23_220
# BB#218:                               # %lor.lhs.false387
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB23_221
# BB#219:                               # %lor.lhs.false387
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
	jmp	.LBB23_221
.LBB23_201:                             # %sw.bb338
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB23_204
# BB#202:                               # %land.lhs.true344
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB23_204
# BB#203:                               # %land.lhs.true344
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_204:                             # %if.else351
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_189:                             # %sw.bb319
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$10, %rax
	movq	$1, %r14
	jne	.LBB23_191
# BB#190:                               # %sw.bb319
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_191:                             # %lor.lhs.false324
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB23_192
# BB#194:                               # %land.lhs.true329
	andq	%r15, %rcx
	cmpq	$5, %rcx
	je	.LBB23_305
	jmp	.LBB23_195
.LBB23_169:                             # %sw.bb288
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$10, %rax
	movq	$1, %r14
	jne	.LBB23_171
# BB#170:                               # %sw.bb288
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_171:                             # %lor.lhs.false293
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB23_172
# BB#174:                               # %land.lhs.true298
	andq	%r15, %rcx
	cmpq	$5, %rcx
	je	.LBB23_305
	jmp	.LBB23_175
.LBB23_157:                             # %sw.bb269
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$10, %rax
	movq	$1, %r14
	jne	.LBB23_159
# BB#158:                               # %sw.bb269
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_159:                             # %lor.lhs.false274
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB23_160
# BB#162:                               # %land.lhs.true279
	andq	%r15, %rcx
	cmpq	$5, %rcx
	je	.LBB23_305
	jmp	.LBB23_163
.LBB23_136:                             # %sw.bb237
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB23_138
# BB#137:                               # %sw.bb237.lor.lhs.false244_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	jmp	.LBB23_143
.LBB23_115:                             # %sw.bb205
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB23_117
# BB#116:                               # %sw.bb205.lor.lhs.false212_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	jmp	.LBB23_122
.LBB23_103:                             # %sw.bb171
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$1, %r14
	je	.LBB23_305
# BB#104:                               # %select.mid4
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_70:                              # %sw.bb101
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB23_72
# BB#71:                                # %sw.bb101.lor.lhs.false112_crit_edge
	movl	ix86_cpu(%rip), %ecx
	jmp	.LBB23_76
.LBB23_62:                              # %sw.bb83
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %r14
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB23_65
# BB#63:                                # %lor.lhs.false85
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	movl	ix86_cpu(%rip), %ecx
	testq	%r15, %rax
	jne	.LBB23_66
# BB#64:                                # %lor.lhs.false85
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
	jmp	.LBB23_66
.LBB23_52:                              # %sw.bb67
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$11, %rax
	movq	$1, %r14
	jne	.LBB23_54
# BB#53:                                # %sw.bb67
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_54:                              # %lor.lhs.false72
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB23_56
# BB#55:                                # %lor.lhs.false72
	andq	%r15, %rcx
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_56:                              # %lor.lhs.false76
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_58
# BB#57:                                # %lor.lhs.false76
	movq	%rdx, %rcx
.LBB23_58:                              # %lor.lhs.false76
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_60
# BB#59:                                # %lor.lhs.false76
	movq	%rdx, %rax
.LBB23_60:                              # %lor.lhs.false76
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#61:                                # %lor.lhs.false76
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_41:                              # %sw.bb50
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$14, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_43
# BB#42:                                # %sw.bb50
	movq	%rdx, %rcx
.LBB23_43:                              # %sw.bb50
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_45
# BB#44:                                # %sw.bb50
	movq	%rdx, %rax
.LBB23_45:                              # %sw.bb50
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#46:                                # %sw.bb50
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_19:                              # %sw.bb18
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB23_20
# BB#21:                                # %land.lhs.true20
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	movl	ix86_cpu(%rip), %ecx
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB23_23
# BB#22:                                # %land.lhs.true20
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_23:                              # %lor.lhs.false25
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB23_27
# BB#24:                                # %land.lhs.true27
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	movl	ix86_cpu(%rip), %ecx
	testq	%r15, %rax
	je	.LBB23_26
# BB#25:                                # %land.lhs.true27
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_26:                              # %land.lhs.true27.lor.lhs.false32_crit_edge
	movl	which_alternative(%rip), %eax
	jmp	.LBB23_27
.LBB23_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB23_5
# BB#6:                                 # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	movl	ix86_cpu(%rip), %ecx
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB23_8
# BB#7:                                 # %land.lhs.true
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_8:                               # %lor.lhs.false
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB23_12
# BB#9:                                 # %land.lhs.true9
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	movl	ix86_cpu(%rip), %ecx
	testq	%r15, %rax
	je	.LBB23_11
# BB#10:                                # %land.lhs.true9
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_11:                              # %land.lhs.true9.lor.lhs.false14_crit_edge
	movl	which_alternative(%rip), %eax
	jmp	.LBB23_12
.LBB23_302:                             # %land.lhs.true588
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$42, %r14
	jns	.LBB23_305
# BB#303:                               # %if.then594
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_ieu_unit_ready_cost, %rcx
	movq	$3426, %rdx             # imm = 0xD62
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB23_138:                             # %land.lhs.true239
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	movl	ix86_cpu(%rip), %ecx
	testq	%r15, %rax
	je	.LBB23_140
# BB#139:                               # %land.lhs.true239
	movq	$1, %r14
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_140:                             # %lor.lhs.false244thread-pre-split
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB23_141
# BB#142:                               # %lor.lhs.false244thread-pre-split
	movabsq	$1, %rax
	jmp	.LBB23_143
.LBB23_117:                             # %land.lhs.true207
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	movl	ix86_cpu(%rip), %ecx
	testq	%r15, %rax
	je	.LBB23_119
# BB#118:                               # %land.lhs.true207
	movq	$1, %r14
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_119:                             # %lor.lhs.false212thread-pre-split
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB23_120
# BB#121:                               # %lor.lhs.false212thread-pre-split
	movabsq	$1, %rax
	jmp	.LBB23_122
.LBB23_20:                              # %sw.bb18.lor.lhs.false32_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB23_27:                              # %lor.lhs.false32
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rsi
	movq	%rax, %rdx
	jne	.LBB23_29
# BB#28:                                # %lor.lhs.false32
	movq	%rsi, %rdx
.LBB23_29:                              # %lor.lhs.false32
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB23_31
# BB#30:                                # %lor.lhs.false32
	movq	%rsi, %rax
.LBB23_31:                              # %lor.lhs.false32
	testq	%rax, %rdx
	movq	$1, %r14
	jne	.LBB23_305
# BB#32:                                # %lor.lhs.false32
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_5:                               # %sw.bb.lor.lhs.false14_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB23_12:                              # %lor.lhs.false14
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rsi
	movq	%rax, %rdx
	jne	.LBB23_14
# BB#13:                                # %lor.lhs.false14
	movq	%rsi, %rdx
.LBB23_14:                              # %lor.lhs.false14
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jne	.LBB23_16
# BB#15:                                # %lor.lhs.false14
	movq	%rsi, %rax
.LBB23_16:                              # %lor.lhs.false14
	testq	%rax, %rdx
	movq	$1, %rax
	jne	.LBB23_18
# BB#17:                                # %lor.lhs.false14
	movq	$42, %rax
	jmp	.LBB23_18
.LBB23_231:                             # %land.lhs.true407
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$1, %r14
	je	.LBB23_305
.LBB23_232:                             # %lor.lhs.false409
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB23_235
# BB#233:                               # %land.lhs.true412
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %r14
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB23_235
# BB#234:                               # %land.lhs.true412
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_235:                             # %if.else419
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_72:                              # %land.lhs.true103
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %r14
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB23_304
# BB#73:                                # %lor.lhs.false107
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	movl	ix86_cpu(%rip), %ecx
	testq	%r15, %rax
	jne	.LBB23_75
# BB#74:                                # %lor.lhs.false107
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_75:                              # %lor.lhs.false107.lor.lhs.false112thread-pre-split_crit_edge
	movl	which_alternative(%rip), %eax
.LBB23_76:                              # %lor.lhs.false112
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB23_78
# BB#77:                                # %lor.lhs.false112
	movq	$1, %r14
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$5, %rdx
	je	.LBB23_305
.LBB23_78:                              # %lor.lhs.false116
	testq	%r15, %rax
	jne	.LBB23_82
	jmp	.LBB23_79
.LBB23_65:                              # %land.lhs.true88
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_66:                              # %lor.lhs.false90
	movq	$1, %r14
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB23_69
# BB#67:                                # %land.lhs.true94
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB23_69
# BB#68:                                # %land.lhs.true94
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_69:                              # %if.else100
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_192:                             # %lor.lhs.false326
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB23_195
# BB#193:                               # %lor.lhs.false326
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_195:                             # %lor.lhs.false331
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_197
# BB#196:                               # %lor.lhs.false331
	movq	%rdx, %rcx
.LBB23_197:                             # %lor.lhs.false331
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_199
# BB#198:                               # %lor.lhs.false331
	movq	%rdx, %rax
.LBB23_199:                             # %lor.lhs.false331
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#200:                               # %lor.lhs.false331
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_172:                             # %lor.lhs.false295
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB23_175
# BB#173:                               # %lor.lhs.false295
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_175:                             # %lor.lhs.false300
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_177
# BB#176:                               # %lor.lhs.false300
	movq	%rdx, %rcx
.LBB23_177:                             # %lor.lhs.false300
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_179
# BB#178:                               # %lor.lhs.false300
	movq	%rdx, %rax
.LBB23_179:                             # %lor.lhs.false300
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#180:                               # %lor.lhs.false300
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_249:                             # %lor.lhs.false446
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %r14
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB23_253
# BB#250:                               # %lor.lhs.false446
	cmpq	$2, %rax
	jne	.LBB23_253
# BB#251:                               # %lor.lhs.false446
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_253:                             # %lor.lhs.false454
	cmpq	$3, %rax
	jne	.LBB23_256
.LBB23_254:                             # %land.lhs.true456
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %r14
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB23_262
# BB#255:                               # %lor.lhs.false460
	movl	x86_qimode_math(%rip), %edx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB23_262
	jmp	.LBB23_263
.LBB23_160:                             # %lor.lhs.false276
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB23_163
# BB#161:                               # %lor.lhs.false276
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_163:                             # %lor.lhs.false281
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB23_165
# BB#164:                               # %lor.lhs.false281
	movq	%rdx, %rcx
.LBB23_165:                             # %lor.lhs.false281
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB23_167
# BB#166:                               # %lor.lhs.false281
	movq	%rdx, %rax
.LBB23_167:                             # %lor.lhs.false281
	testq	%rax, %rcx
	movq	$1, %r14
	jne	.LBB23_305
# BB#168:                               # %lor.lhs.false281
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_256:                             # %land.lhs.true474
	cmpq	$5, %rax
	je	.LBB23_263
# BB#257:                               # %land.lhs.true478
	movl	x86_movx(%rip), %edx
	movq	$1, %r14
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	movabsq	$0, %rdx
	movabsq	$1, %rdi
	movq	%rdx, %rsi
	jne	.LBB23_259
# BB#258:                               # %land.lhs.true478
	movq	%rdi, %rsi
.LBB23_259:                             # %land.lhs.true478
	cmpq	$2, %rax
	je	.LBB23_261
# BB#260:                               # %land.lhs.true478
	movq	%rdi, %rdx
.LBB23_261:                             # %land.lhs.true478
	orq	%rdx, %rsi
	je	.LBB23_263
.LBB23_262:                             # %land.lhs.true484
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_263:                             # %if.else487
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_291:                             # %land.lhs.true566
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$1, %r14
	je	.LBB23_305
.LBB23_292:                             # %if.else569
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_220:                             # %land.lhs.true390
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$1, %r14
	je	.LBB23_305
.LBB23_221:                             # %if.else393
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_141:
	movabsq	$0, %rax
.LBB23_143:                             # %lor.lhs.false244
	movq	$1, %r14
	testq	%rax, %rax
	je	.LBB23_145
# BB#144:                               # %lor.lhs.false244
	andq	%r15, %rcx
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_145:                             # %lor.lhs.false248
	testq	%rax, %rax
	jne	.LBB23_148
# BB#146:                               # %land.lhs.true250
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB23_148
# BB#147:                               # %land.lhs.true250
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_148:                             # %if.else256
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_120:
	movabsq	$0, %rax
.LBB23_122:                             # %lor.lhs.false212
	movq	$1, %r14
	testq	%rax, %rax
	je	.LBB23_124
# BB#123:                               # %lor.lhs.false212
	andq	%r15, %rcx
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_124:                             # %lor.lhs.false216
	testq	%rax, %rax
	jne	.LBB23_127
# BB#125:                               # %land.lhs.true218
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB23_127
# BB#126:                               # %land.lhs.true218
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB23_305
.LBB23_127:                             # %if.else224
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.LBB23_304:                             # %land.lhs.true110
	cmpq	$5, %rcx
	je	.LBB23_305
.LBB23_79:                              # %land.lhs.true118
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %r14
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB23_82
# BB#80:                                # %land.lhs.true122
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB23_82
# BB#81:                                # %land.lhs.true122
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$5, %rax
	jne	.LBB23_82
.LBB23_305:                             # %return
	movq	%r14, %rax
.LBB23_18:                              # %lor.lhs.false14
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB23_82:                              # %if.else128
	movq	$42, %r14
	movq	%r14, %rax
	jmp	.LBB23_18
.Ltmp220:
	.size	athlon_ieu_unit_ready_cost, .Ltmp220-athlon_ieu_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI23_0:
	.quad	.LBB23_300
	.quad	.LBB23_295
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_295
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_295
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_295
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_282
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_264
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_244
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_236
	.quad	.LBB23_236
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_236
	.quad	.LBB23_228
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_222
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_211
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_205
	.quad	.LBB23_205
	.quad	.LBB23_201
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_295
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_295
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_295
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_189
	.quad	.LBB23_181
	.quad	.LBB23_181
	.quad	.LBB23_181
	.quad	.LBB23_181
	.quad	.LBB23_169
	.quad	.LBB23_157
	.quad	.LBB23_149
	.quad	.LBB23_149
	.quad	.LBB23_149
	.quad	.LBB23_149
	.quad	.LBB23_149
	.quad	.LBB23_149
	.quad	.LBB23_136
	.quad	.LBB23_128
	.quad	.LBB23_128
	.quad	.LBB23_128
	.quad	.LBB23_128
	.quad	.LBB23_128
	.quad	.LBB23_115
	.quad	.LBB23_107
	.quad	.LBB23_107
	.quad	.LBB23_107
	.quad	.LBB23_128
	.quad	.LBB23_107
	.quad	.LBB23_107
	.quad	.LBB23_107
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_105
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_103
	.quad	.LBB23_293
	.quad	.LBB23_101
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_101
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_91
	.quad	.LBB23_83
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_91
	.quad	.LBB23_70
	.quad	.LBB23_83
	.quad	.LBB23_62
	.quad	.LBB23_91
	.quad	.LBB23_83
	.quad	.LBB23_83
	.quad	.LBB23_52
	.quad	.LBB23_83
	.quad	.LBB23_83
	.quad	.LBB23_47
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_47
	.quad	.LBB23_47
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_41
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_39
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_33
	.quad	.LBB23_305
	.quad	.LBB23_33
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_19
	.quad	.LBB23_4
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_305
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293
	.quad	.LBB23_293

	.text
	.globl	athlon_ieu_unit_blockage_range
	.align	16, 0x90
	.type	athlon_ieu_unit_blockage_range,@function
athlon_ieu_unit_blockage_range:         # @athlon_ieu_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp223:
	.cfi_def_cfa_offset 16
.Ltmp224:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB24_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB24_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB24_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB24_5
.LBB24_4:                               # %sw.default
	movq	$65551, %rax            # imm = 0x1000F
	popq	%rbx
	retq
.LBB24_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_ieu_unit_blockage_range, %rcx
	movq	$3443, %rdx             # imm = 0xD73
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp225:
	.size	athlon_ieu_unit_blockage_range, .Ltmp225-athlon_ieu_unit_blockage_range
	.cfi_endproc

	.globl	athlon_directdec_unit_ready_cost
	.align	16, 0x90
	.type	athlon_directdec_unit_ready_cost,@function
athlon_directdec_unit_ready_cost:       # @athlon_directdec_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp228:
	.cfi_def_cfa_offset 16
.Ltmp229:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB25_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB25_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB25_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB25_5
.LBB25_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB25_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_directdec_unit_ready_cost, %rcx
	movq	$3460, %rdx             # imm = 0xD84
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp230:
	.size	athlon_directdec_unit_ready_cost, .Ltmp230-athlon_directdec_unit_ready_cost
	.cfi_endproc

	.globl	athlon_vectordec_unit_ready_cost
	.align	16, 0x90
	.type	athlon_vectordec_unit_ready_cost,@function
athlon_vectordec_unit_ready_cost:       # @athlon_vectordec_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp233:
	.cfi_def_cfa_offset 16
.Ltmp234:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB26_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB26_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB26_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB26_5
.LBB26_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB26_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_vectordec_unit_ready_cost, %rcx
	movq	$3477, %rdx             # imm = 0xD95
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp235:
	.size	athlon_vectordec_unit_ready_cost, .Ltmp235-athlon_vectordec_unit_ready_cost
	.cfi_endproc

	.globl	athlon_vectordec_unit_blockage_range
	.align	16, 0x90
	.type	athlon_vectordec_unit_blockage_range,@function
athlon_vectordec_unit_blockage_range:   # @athlon_vectordec_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp240:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp241:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp242:
	.cfi_def_cfa_offset 32
.Ltmp243:
	.cfi_offset %rbx, -32
.Ltmp244:
	.cfi_offset %r14, -24
.Ltmp245:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB27_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB27_2:                               # %cond.end
	movq	$65537, %rbx            # imm = 0x10001
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$804, %rdx              # imm = 0x324
	jg	.LBB27_34
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$17, %rdx
	jg	.LBB27_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB27_69
# BB#5:                                 # %sw.bb140
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB27_71
# BB#6:                                 # %land.lhs.true144
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB27_71
# BB#7:                                 # %if.then150
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_vectordec_unit_blockage_range, %rcx
	movq	$3681, %rdx             # imm = 0xE61
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB27_34:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$805, %rax              # imm = 0x325
	jne	.LBB27_69
	jmp	.LBB27_71
.LBB27_8:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$672, %rdx              # imm = 0x2A0
	jg	.LBB27_64
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$571, %rdx              # imm = 0x23B
	jg	.LBB27_32
# BB#10:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$491, %rdx              # imm = 0x1EB
	jg	.LBB27_22
# BB#11:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$447, %rdx              # imm = 0x1BF
	jg	.LBB27_21
# BB#12:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$422, %rdx              # imm = 0x1A6
	jg	.LBB27_19
# BB#13:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$404, %rdx              # imm = 0x194
	jg	.LBB27_68
# BB#14:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$343, %rdx              # imm = 0x157
	jg	.LBB27_17
# BB#15:                                # %cond.end
	addq	$-18, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$271, %rax              # imm = 0x10F
	ja	.LBB27_69
# BB#16:                                # %cond.end
	movq	$65537, %rbx            # imm = 0x10001
	jmpq	*.LJTI27_1(,%rax,8)
.LBB27_46:                              # %sw.bb35
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jmp	.LBB27_47
.LBB27_64:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$673, %rax              # imm = 0x2A1
	jne	.LBB27_69
	jmp	.LBB27_65
.LBB27_32:                              # %cond.end
	addq	$-572, %rax             # imm = 0xFFFFFFFFFFFFFDC4
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$86, %rcx
	ja	.LBB27_69
# BB#33:                                # %cond.end
	movq	$65537, %rbx            # imm = 0x10001
	jmpq	*.LJTI27_0(,%rcx,8)
.LBB27_65:                              # %sw.bb116
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	ja	.LBB27_28
	jmp	.LBB27_29
.LBB27_22:                              # %cond.end
	addq	$-492, %rax             # imm = 0xFFFFFFFFFFFFFE14
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$32, %rax
	ja	.LBB27_69
# BB#23:                                # %cond.end
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$8505983999, %rcx       # imm = 0x1FAFF03FF
	testq	%rcx, %rdx
	jne	.LBB27_71
# BB#24:                                # %cond.end
	cmpq	$15, %rax
	jne	.LBB27_69
# BB#25:                                # %sw.bb
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	jmp	.LBB27_26
.LBB27_21:                              # %cond.end
	addq	$-448, %rax             # imm = 0xFFFFFFFFFFFFFE40
	jmp	.LBB27_20
.LBB27_19:                              # %cond.end
	addq	$-423, %rax             # imm = 0xFFFFFFFFFFFFFE59
.LBB27_20:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jb	.LBB27_71
	jmp	.LBB27_69
.LBB27_68:                              # %cond.end
	addq	$-405, %rax             # imm = 0xFFFFFFFFFFFFFE6B
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jb	.LBB27_71
	jmp	.LBB27_69
.LBB27_17:                              # %cond.end
	addq	$-344, %rax             # imm = 0xFFFFFFFFFFFFFEA8
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$39, %rcx
	ja	.LBB27_69
# BB#18:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$1098439981057, %rcx    # imm = 0xFFC01FF801
	testq	%rcx, %rax
	jne	.LBB27_71
	jmp	.LBB27_69
.LBB27_67:                              # %sw.bb133
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
.LBB27_47:                              # %sw.bb35
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	je	.LBB27_28
	jmp	.LBB27_29
.LBB27_66:                              # %sw.bb124
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB27_70
	jmp	.LBB27_62
.LBB27_63:                              # %sw.bb110
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	jmp	.LBB27_27
.LBB27_61:                              # %sw.bb102
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB27_70
.LBB27_62:                              # %land.lhs.true104
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB27_38
	jmp	.LBB27_70
.LBB27_59:                              # %sw.bb88
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB27_69
# BB#60:                                # %lor.lhs.false94
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jae	.LBB27_38
	jmp	.LBB27_70
.LBB27_57:                              # %sw.bb68
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	leaq	-3(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jb	.LBB27_70
# BB#58:                                # %land.lhs.true72
	andq	%r15, %rax
	cmpq	$2, %rax
	jbe	.LBB27_36
	jmp	.LBB27_69
.LBB27_49:                              # %sw.bb52
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB27_69
# BB#50:                                # %lor.lhs.false56
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB27_51
# BB#56:                                # %lor.lhs.false62
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB27_38
	jmp	.LBB27_70
.LBB27_48:                              # %sw.bb41
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB27_36
.LBB27_69:                              # %sw.default
	movl	ix86_cpu(%rip), %eax
	cmpq	$5, %rax
	movq	$1, %rbx
	je	.LBB27_71
	jmp	.LBB27_70
.LBB27_40:                              # %sw.bb25
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$5, %rax
	je	.LBB27_41
# BB#42:                                # %sw.bb25
	movabsq	$1, %rax
	jmp	.LBB27_43
.LBB27_39:                              # %sw.bb19
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
.LBB27_26:                              # %sw.bb
	cmpq	$1, %rax
.LBB27_27:                              # %sw.bb
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	je	.LBB27_29
.LBB27_28:                              # %sw.bb
	movq	%rdx, %rcx
.LBB27_29:                              # %sw.bb
	movl	ix86_cpu(%rip), %esi
	cmpq	$5, %rsi
	jne	.LBB27_31
# BB#30:                                # %sw.bb
	movq	%rdx, %rax
.LBB27_31:                              # %sw.bb
	testq	%rax, %rcx
	movq	$1, %rbx
	je	.LBB27_70
	jmp	.LBB27_71
.LBB27_35:                              # %sw.bb7
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB27_70
.LBB27_36:                              # %land.lhs.true9
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB27_70
# BB#37:                                # %land.lhs.true12
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB27_38
	jmp	.LBB27_70
.LBB27_51:                              # %land.lhs.true59
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	je	.LBB27_53
# BB#52:                                # %land.lhs.true59
	movq	%rdx, %rcx
.LBB27_53:                              # %land.lhs.true59
	movl	which_alternative(%rip), %esi
	cmpq	$1, %rsi
	je	.LBB27_55
# BB#54:                                # %land.lhs.true59
	movq	%rdx, %rax
.LBB27_55:                              # %land.lhs.true59
	orq	%rax, %rcx
	je	.LBB27_70
.LBB27_38:                              # %land.lhs.true12
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$5, %rax
	je	.LBB27_71
.LBB27_70:                              # %select.mid
	movq	$65537, %rbx            # imm = 0x10001
.LBB27_71:                              # %return
	movq	%rbx, %rax
.LBB27_45:                              # %sw.bb25
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB27_41:
	movabsq	$0, %rax
.LBB27_43:                              # %sw.bb25
	decq	%rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	orq	%rax, %rcx
	movq	$65537, %rax            # imm = 0x10001
	jne	.LBB27_45
# BB#44:                                # %sw.bb25
	movq	$1, %rax
	jmp	.LBB27_45
.Ltmp246:
	.size	athlon_vectordec_unit_blockage_range, .Ltmp246-athlon_vectordec_unit_blockage_range
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI27_0:
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_65
	.quad	.LBB27_71
	.quad	.LBB27_65
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
.LJTI27_1:
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_67
	.quad	.LBB27_67
	.quad	.LBB27_67
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_67
	.quad	.LBB27_67
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_67
	.quad	.LBB27_67
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_66
	.quad	.LBB27_67
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_65
	.quad	.LBB27_63
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_61
	.quad	.LBB27_61
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_59
	.quad	.LBB27_59
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_57
	.quad	.LBB27_57
	.quad	.LBB27_57
	.quad	.LBB27_57
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_49
	.quad	.LBB27_69
	.quad	.LBB27_48
	.quad	.LBB27_48
	.quad	.LBB27_48
	.quad	.LBB27_48
	.quad	.LBB27_46
	.quad	.LBB27_40
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_46
	.quad	.LBB27_69
	.quad	.LBB27_46
	.quad	.LBB27_69
	.quad	.LBB27_46
	.quad	.LBB27_69
	.quad	.LBB27_46
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_46
	.quad	.LBB27_39
	.quad	.LBB27_69
	.quad	.LBB27_46
	.quad	.LBB27_39
	.quad	.LBB27_69
	.quad	.LBB27_46
	.quad	.LBB27_39
	.quad	.LBB27_69
	.quad	.LBB27_46
	.quad	.LBB27_39
	.quad	.LBB27_69
	.quad	.LBB27_35
	.quad	.LBB27_35
	.quad	.LBB27_35
	.quad	.LBB27_35
	.quad	.LBB27_35
	.quad	.LBB27_35
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_71
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_69
	.quad	.LBB27_71
	.quad	.LBB27_71

	.text
	.globl	k6_fpu_unit_ready_cost
	.align	16, 0x90
	.type	k6_fpu_unit_ready_cost,@function
k6_fpu_unit_ready_cost:                 # @k6_fpu_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp251:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp252:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp253:
	.cfi_def_cfa_offset 32
.Ltmp254:
	.cfi_offset %rbx, -32
.Ltmp255:
	.cfi_offset %r14, -24
.Ltmp256:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB28_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB28_2:                               # %cond.end
	movq	$56, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB28_21
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB28_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB28_67
# BB#5:                                 # %sw.bb160
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB28_67
# BB#6:                                 # %land.lhs.true164
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB28_67
# BB#7:                                 # %if.then170
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_fpu_unit_ready_cost, %rcx
	movq	$4136, %rdx             # imm = 0x1028
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB28_21:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$33, %rax
	ja	.LBB28_67
# BB#22:                                # %cond.end
	movq	$56, %r14
	jmpq	*.LJTI28_0(,%rax,8)
.LBB28_32:                              # %sw.bb10
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB28_33
.LBB28_8:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB28_19
# BB#9:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$36, %rax
	ja	.LBB28_67
# BB#10:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	jne	.LBB28_65
# BB#11:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	jne	.LBB28_12
	jmp	.LBB28_67
.LBB28_19:                              # %cond.end
	addq	$-90, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$94, %rcx
	ja	.LBB28_67
# BB#20:                                # %cond.end
	movq	$56, %r14
	jmpq	*.LJTI28_1(,%rcx,8)
.LBB28_12:                              # %sw.bb150
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jmp	.LBB28_13
.LBB28_65:                              # %sw.bb156
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$2, %r14
	je	.LBB28_67
	jmp	.LBB28_66
.LBB28_23:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB28_25
# BB#24:                                # %sw.bb
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r14
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB28_67
.LBB28_25:                              # %lor.lhs.false
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB28_27
# BB#26:                                # %lor.lhs.false
	movq	%rdx, %rcx
.LBB28_27:                              # %lor.lhs.false
	movl	ix86_cpu(%rip), %esi
	cmpq	$4, %rsi
	jne	.LBB28_29
# BB#28:                                # %lor.lhs.false
	movq	%rdx, %rax
.LBB28_29:                              # %lor.lhs.false
	testq	%rax, %rcx
	movq	$2, %rax
	jne	.LBB28_31
# BB#30:                                # %lor.lhs.false
	movq	$56, %rax
	jmp	.LBB28_31
.LBB28_38:                              # %sw.bb36
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB28_37:                              # %land.lhs.true24
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	jmp	.LBB28_33
.LBB28_41:                              # %sw.bb62
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB28_40:                              # %land.lhs.true50
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
.LBB28_33:                              # %sw.bb10
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB28_35
# BB#34:                                # %sw.bb10
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r14
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB28_67
	jmp	.LBB28_35
.LBB28_55:                              # %sw.bb114
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB28_57
# BB#56:                                # %sw.bb114
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r14
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB28_67
.LBB28_57:                              # %lor.lhs.false119
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB28_45
.LBB28_49:                              # %sw.bb98
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB28_66
# BB#50:                                # %land.lhs.true100
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %r14
	je	.LBB28_52
# BB#51:                                # %land.lhs.true100
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB28_67
.LBB28_52:                              # %lor.lhs.false105
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB28_66
# BB#53:                                # %land.lhs.true107
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB28_66
# BB#54:                                # %land.lhs.true107
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB28_67
	jmp	.LBB28_66
.LBB28_63:                              # %sw.bb140
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	cmpq	$3, %rax
	sbbq	%rax, %rax
	cmpq	$4, %rcx
	je	.LBB28_61
# BB#64:
	movabsq	$0, %rcx
	testq	%rcx, %rax
	jmp	.LBB28_18
.LBB28_46:                              # %sw.bb86
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB28_48
# BB#47:                                # %sw.bb86
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r14
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB28_67
.LBB28_48:                              # %lor.lhs.false91
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB28_45
.LBB28_42:                              # %sw.bb74
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB28_44
# BB#43:                                # %sw.bb74
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r14
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB28_67
.LBB28_44:                              # %lor.lhs.false79
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
.LBB28_45:                              # %lor.lhs.false79
	callq	mult_operator
	testq	%r15, %rax
	jmp	.LBB28_13
.LBB28_39:                              # %sw.bb48
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB28_35
	jmp	.LBB28_40
.LBB28_36:                              # %sw.bb22
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB28_37
.LBB28_35:                              # %lor.lhs.false15
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
.LBB28_13:                              # %sw.bb150
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB28_15
# BB#14:                                # %sw.bb150
	movq	%rdx, %rcx
.LBB28_15:                              # %sw.bb150
	movl	ix86_cpu(%rip), %esi
	cmpq	$4, %rsi
	jne	.LBB28_17
# BB#16:                                # %sw.bb150
	movq	%rdx, %rax
.LBB28_17:                              # %sw.bb150
	testq	%rax, %rcx
.LBB28_18:                              # %sw.bb150
	movq	$2, %r14
	jne	.LBB28_67
.LBB28_66:                              # %select.mid
	movq	$56, %r14
.LBB28_67:                              # %return
	movq	%r14, %rax
.LBB28_31:                              # %lor.lhs.false
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB28_59:                              # %sw.bb132
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	cmpq	$2, %rax
	sbbq	%rax, %rax
	cmpq	$4, %rcx
	jne	.LBB28_60
.LBB28_61:                              # %sw.bb132
	movabsq	$1, %rcx
	testq	%rcx, %rax
	jmp	.LBB28_18
.LBB28_58:                              # %sw.bb126
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jmp	.LBB28_13
.LBB28_60:
	movabsq	$0, %rcx
	testq	%rcx, %rax
	jmp	.LBB28_18
.Ltmp257:
	.size	k6_fpu_unit_ready_cost, .Ltmp257-k6_fpu_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI28_0:
	.quad	.LBB28_55
	.quad	.LBB28_49
	.quad	.LBB28_67
	.quad	.LBB28_55
	.quad	.LBB28_49
	.quad	.LBB28_67
	.quad	.LBB28_46
	.quad	.LBB28_42
	.quad	.LBB28_41
	.quad	.LBB28_39
	.quad	.LBB28_67
	.quad	.LBB28_41
	.quad	.LBB28_41
	.quad	.LBB28_38
	.quad	.LBB28_36
	.quad	.LBB28_67
	.quad	.LBB28_38
	.quad	.LBB28_38
	.quad	.LBB28_38
	.quad	.LBB28_38
	.quad	.LBB28_32
	.quad	.LBB28_23
	.quad	.LBB28_32
	.quad	.LBB28_23
	.quad	.LBB28_32
	.quad	.LBB28_23
	.quad	.LBB28_32
	.quad	.LBB28_23
	.quad	.LBB28_32
	.quad	.LBB28_23
	.quad	.LBB28_32
	.quad	.LBB28_23
	.quad	.LBB28_32
	.quad	.LBB28_23
.LJTI28_1:
	.quad	.LBB28_63
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_63
	.quad	.LBB28_63
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_63
	.quad	.LBB28_63
	.quad	.LBB28_63
	.quad	.LBB28_63
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_59
	.quad	.LBB28_67
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_12
	.quad	.LBB28_12
	.quad	.LBB28_58
	.quad	.LBB28_65
	.quad	.LBB28_67
	.quad	.LBB28_12
	.quad	.LBB28_65
	.quad	.LBB28_12
	.quad	.LBB28_65
	.quad	.LBB28_12
	.quad	.LBB28_65
	.quad	.LBB28_12
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_65
	.quad	.LBB28_67
	.quad	.LBB28_67
	.quad	.LBB28_12
	.quad	.LBB28_12
	.quad	.LBB28_67
	.quad	.LBB28_12
	.quad	.LBB28_12
	.quad	.LBB28_67
	.quad	.LBB28_12
	.quad	.LBB28_12
	.quad	.LBB28_67
	.quad	.LBB28_12
	.quad	.LBB28_12
	.quad	.LBB28_67
	.quad	.LBB28_12
	.quad	.LBB28_12
	.quad	.LBB28_12
	.quad	.LBB28_12
	.quad	.LBB28_12
	.quad	.LBB28_12

	.text
	.globl	k6_fpu_unit_blockage_range
	.align	16, 0x90
	.type	k6_fpu_unit_blockage_range,@function
k6_fpu_unit_blockage_range:             # @k6_fpu_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp260:
	.cfi_def_cfa_offset 16
.Ltmp261:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB29_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB29_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB29_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB29_5
.LBB29_4:                               # %sw.default
	movq	$131128, %rax           # imm = 0x20038
	popq	%rbx
	retq
.LBB29_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_fpu_unit_blockage_range, %rcx
	movq	$4153, %rdx             # imm = 0x1039
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp262:
	.size	k6_fpu_unit_blockage_range, .Ltmp262-k6_fpu_unit_blockage_range
	.cfi_endproc

	.globl	k6_store_unit_ready_cost
	.align	16, 0x90
	.type	k6_store_unit_ready_cost,@function
k6_store_unit_ready_cost:               # @k6_store_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp268:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp269:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp270:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp271:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp272:
	.cfi_def_cfa_offset 48
.Ltmp273:
	.cfi_offset %rbx, -40
.Ltmp274:
	.cfi_offset %r12, -32
.Ltmp275:
	.cfi_offset %r14, -24
.Ltmp276:
	.cfi_offset %r15, -16
	movq	%rdi, %r12
	movslq	40(%r12), %rax
	testq	%rax, %rax
	jns	.LBB30_2
# BB#1:                                 # %cond.false
	movq	%r12, %rdi
	callq	recog_memoized_1
.LBB30_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$800, %rdx              # imm = 0x320
	jg	.LBB30_6
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$763, %rdx              # imm = 0x2FB
	jg	.LBB30_212
# BB#4:                                 # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$727, %rax              # imm = 0x2D7
	ja	.LBB30_213
# BB#5:                                 # %cond.end
	movq	$10, %r14
	jmpq	*.LJTI30_0(,%rax,8)
.LBB30_194:                             # %sw.bb470
	movq	%r12, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB30_196
# BB#195:                               # %sw.bb470
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_196:                             # %lor.lhs.false475
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB30_198
# BB#197:                               # %lor.lhs.false475
	movq	%rcx, %rdx
.LBB30_198:                             # %lor.lhs.false475
	movl	ix86_cpu(%rip), %esi
	cmpq	$4, %rsi
	movq	%rax, %rsi
	jne	.LBB30_200
# BB#199:                               # %lor.lhs.false475
	movq	%rcx, %rsi
.LBB30_200:                             # %lor.lhs.false475
	testq	%rsi, %rdx
	jne	.LBB30_202
# BB#201:                               # %lor.lhs.false475
	movq	%rcx, %rax
.LBB30_202:                             # %lor.lhs.false475
	leaq	1(%rax,%rax,8), %rax
	jmp	.LBB30_203
.LBB30_6:                               # %cond.end
	addq	$-801, %rax             # imm = 0xFFFFFFFFFFFFFCDF
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$4, %rcx
	ja	.LBB30_213
# BB#7:                                 # %cond.end
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$11, %rdx
	movq	$10, %r14
	jne	.LBB30_223
# BB#8:                                 # %cond.end
	shlq	%cl, %rax
	testq	$20, %rax
	je	.LBB30_213
.LBB30_9:                               # %sw.bb401
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$1, %r14
	je	.LBB30_223
# BB#10:                                # %select.mid2
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_212:                             # %cond.end
	addq	$-764, %rax             # imm = 0xFFFFFFFFFFFFFD04
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$10, %r14
	jb	.LBB30_223
.LBB30_213:                             # %sw.default
	movq	%r12, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB30_215
# BB#214:                               # %sw.default
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%rbx, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_215:                             # %lor.lhs.false517
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$2, %rax
.LBB30_216:                             # %lor.lhs.false517
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB30_218
	jmp	.LBB30_217
.LBB30_134:                             # %sw.bb308
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$2, %r14
	je	.LBB30_223
# BB#135:                               # %select.mid
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_205:                             # %sw.bb489
	movq	%r12, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB30_207
# BB#206:                               # %sw.bb489
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_207:                             # %lor.lhs.false494
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jmp	.LBB30_216
.LBB30_204:                             # %sw.bb482
	movq	%r12, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB30_218
.LBB30_217:                             # %lor.lhs.false517
	movq	%rcx, %rdx
.LBB30_218:                             # %lor.lhs.false517
	movl	ix86_cpu(%rip), %esi
	cmpq	$4, %rsi
	movq	%rax, %rsi
	jne	.LBB30_220
# BB#219:                               # %lor.lhs.false517
	movq	%rcx, %rsi
.LBB30_220:                             # %lor.lhs.false517
	testq	%rsi, %rdx
	jne	.LBB30_222
# BB#221:                               # %lor.lhs.false517
	movq	%rcx, %rax
.LBB30_222:                             # %lor.lhs.false517
	leaq	1(%rax,%rax,8), %r14
.LBB30_223:                             # %return
	movq	%r14, %rax
.LBB30_203:                             # %lor.lhs.false475
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB30_43:                              # %sw.bb80
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB30_52
# BB#44:                                # %land.lhs.true82
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_46
# BB#45:                                # %land.lhs.true82
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_46:                              # %lor.lhs.false87
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_48
# BB#47:                                # %lor.lhs.false87
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_48:                              # %lor.lhs.false92
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_51
# BB#49:                                # %land.lhs.true95
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_51
# BB#50:                                # %land.lhs.true95
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_51:                              # %if.else101thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB30_52:                              # %if.else101
	testq	%r15, %rax
	jne	.LBB30_57
# BB#53:                                # %land.lhs.true103
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_55
# BB#54:                                # %land.lhs.true103
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_55:                              # %lor.lhs.false108
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_57
# BB#56:                                # %lor.lhs.false108
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_57:                              # %if.else114
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_136:                             # %sw.bb312
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB30_141
# BB#137:                               # %land.lhs.true314
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	je	.LBB30_139
# BB#138:                               # %land.lhs.true314
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_139:                             # %lor.lhs.false319
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB30_141
# BB#140:                               # %lor.lhs.false319
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_141:                             # %if.else325
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_72:                              # %sw.bb150
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB30_81
# BB#73:                                # %land.lhs.true152
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_75
# BB#74:                                # %land.lhs.true152
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_75:                              # %lor.lhs.false157
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_77
# BB#76:                                # %lor.lhs.false157
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_77:                              # %lor.lhs.false162
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_80
# BB#78:                                # %land.lhs.true165
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_80
# BB#79:                                # %land.lhs.true165
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_80:                              # %if.else171
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB30_85
.LBB30_81:                              # %land.lhs.true173
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_83
# BB#82:                                # %land.lhs.true173
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_83:                              # %lor.lhs.false178
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_85
# BB#84:                                # %lor.lhs.false178
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_85:                              # %if.else184
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_208:                             # %sw.bb501
	movq	32(%r12), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB30_210
# BB#209:
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_166:                             # %sw.bb405
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB30_176
# BB#167:                               # %sw.bb405
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB30_176
# BB#168:                               # %land.lhs.true419
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB30_176
# BB#169:                               # %land.lhs.true422
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_171
# BB#170:                               # %land.lhs.true422
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_171:                             # %lor.lhs.false427
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_173
# BB#172:                               # %lor.lhs.false427
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_173:                             # %lor.lhs.false432
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_176
# BB#174:                               # %land.lhs.true435
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_176
# BB#175:                               # %land.lhs.true435
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_176:                             # %if.else441
	movl	which_alternative(%rip), %edx
	movabsq	$4294967294, %rax       # imm = 0xFFFFFFFE
	andq	%rdx, %rax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %r8
	movq	%rax, %rcx
	je	.LBB30_178
# BB#177:                               # %if.else441
	movq	%r8, %rcx
.LBB30_178:                             # %if.else441
	cmpq	$6, %rdx
	movq	%rax, %r9
	je	.LBB30_180
# BB#179:                               # %if.else441
	movq	%r8, %r9
.LBB30_180:                             # %if.else441
	cmpq	$7, %rdx
	movq	%rax, %rsi
	je	.LBB30_182
# BB#181:                               # %if.else441
	movq	%r8, %rsi
.LBB30_182:                             # %if.else441
	cmpq	$8, %rdx
	movq	%rax, %rdi
	je	.LBB30_184
# BB#183:                               # %if.else441
	movq	%r8, %rdi
.LBB30_184:                             # %if.else441
	cmpq	$9, %rdx
	je	.LBB30_186
# BB#185:                               # %if.else441
	movq	%r8, %rax
.LBB30_186:                             # %if.else441
	movl	flag_pic(%rip), %edx
	testq	%rdx, %rdx
	je	.LBB30_189
# BB#187:                               # %if.else441
	andq	%r9, %rcx
	andq	%rsi, %rcx
	andq	%rdi, %rcx
	andq	%rax, %rcx
	je	.LBB30_189
# BB#188:                               # %lor.lhs.false455
	movq	recog_data+8(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB30_193
.LBB30_189:                             # %land.lhs.true458
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_191
# BB#190:                               # %land.lhs.true458
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_191:                             # %lor.lhs.false463
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_193
# BB#192:                               # %lor.lhs.false463
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_193:                             # %if.else469
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_160:                             # %sw.bb387
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB30_165
# BB#161:                               # %land.lhs.true389
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$1, %r14
	je	.LBB30_163
# BB#162:                               # %land.lhs.true389
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_163:                             # %lor.lhs.false394
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB30_165
# BB#164:                               # %lor.lhs.false394
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_165:                             # %if.else400
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_142:                             # %sw.bb326
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB30_152
# BB#143:                               # %sw.bb326
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB30_152
# BB#144:                               # %land.lhs.true338
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB30_152
# BB#145:                               # %land.lhs.true341
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_147
# BB#146:                               # %land.lhs.true341
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_147:                             # %lor.lhs.false346
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_149
# BB#148:                               # %lor.lhs.false346
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_149:                             # %lor.lhs.false351
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_152
# BB#150:                               # %land.lhs.true354
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_152
# BB#151:                               # %land.lhs.true354
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_152:                             # %if.else360
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB30_155
# BB#153:                               # %if.else360
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB30_155
# BB#154:                               # %lor.lhs.false372
	movq	recog_data+8(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB30_159
.LBB30_155:                             # %land.lhs.true375
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_157
# BB#156:                               # %land.lhs.true375
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_157:                             # %lor.lhs.false380
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_159
# BB#158:                               # %lor.lhs.false380
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_159:                             # %if.else386
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_118:                             # %sw.bb267
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB30_120
# BB#119:                               # %lor.lhs.false269
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB30_127
.LBB30_120:                             # %land.lhs.true272
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_122
# BB#121:                               # %land.lhs.true272
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_122:                             # %lor.lhs.false277
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_124
# BB#123:                               # %lor.lhs.false277
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_124:                             # %lor.lhs.false282
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_127
# BB#125:                               # %land.lhs.true285
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_127
# BB#126:                               # %land.lhs.true285
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_127:                             # %if.else291
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB30_133
# BB#128:                               # %land.lhs.true293
	movq	recog_data+16(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB30_133
# BB#129:                               # %land.lhs.true296
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_131
# BB#130:                               # %land.lhs.true296
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_131:                             # %lor.lhs.false301
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_133
# BB#132:                               # %lor.lhs.false301
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_133:                             # %if.else307
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_102:                             # %sw.bb226
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB30_104
# BB#103:                               # %lor.lhs.false228
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB30_111
.LBB30_104:                             # %land.lhs.true231
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_106
# BB#105:                               # %land.lhs.true231
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_106:                             # %lor.lhs.false236
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_108
# BB#107:                               # %lor.lhs.false236
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_108:                             # %lor.lhs.false241
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_111
# BB#109:                               # %land.lhs.true244
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_111
# BB#110:                               # %land.lhs.true244
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_111:                             # %if.else250
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB30_117
# BB#112:                               # %land.lhs.true252
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB30_117
# BB#113:                               # %land.lhs.true255
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_115
# BB#114:                               # %land.lhs.true255
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_115:                             # %lor.lhs.false260
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_117
# BB#116:                               # %lor.lhs.false260
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_117:                             # %if.else266
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_86:                              # %sw.bb185
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB30_88
# BB#87:                                # %lor.lhs.false187
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB30_95
.LBB30_88:                              # %land.lhs.true190
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_90
# BB#89:                                # %land.lhs.true190
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_90:                              # %lor.lhs.false195
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_92
# BB#91:                                # %lor.lhs.false195
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_92:                              # %lor.lhs.false200
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_95
# BB#93:                                # %land.lhs.true203
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_95
# BB#94:                                # %land.lhs.true203
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_95:                              # %if.else209
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB30_101
# BB#96:                                # %land.lhs.true211
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB30_101
# BB#97:                                # %land.lhs.true214
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_99
# BB#98:                                # %land.lhs.true214
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_99:                              # %lor.lhs.false219
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_101
# BB#100:                               # %lor.lhs.false219
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_101:                             # %if.else225
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_58:                              # %sw.bb115
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB30_67
# BB#59:                                # %land.lhs.true117
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_61
# BB#60:                                # %land.lhs.true117
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_61:                              # %lor.lhs.false122
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_63
# BB#62:                                # %lor.lhs.false122
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_63:                              # %lor.lhs.false127
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_66
# BB#64:                                # %land.lhs.true130
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_66
# BB#65:                                # %land.lhs.true130
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_66:                              # %if.else136
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB30_71
.LBB30_67:                              # %land.lhs.true138
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_69
# BB#68:                                # %land.lhs.true138
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_69:                              # %lor.lhs.false143
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_71
# BB#70:                                # %lor.lhs.false143
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_71:                              # %if.else149
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_27:                              # %sw.bb39
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB30_38
# BB#28:                                # %land.lhs.true41
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	testq	%r15, %rax
	jne	.LBB30_36
# BB#29:                                # %land.lhs.true44
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_31
# BB#30:                                # %land.lhs.true44
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_31:                              # %lor.lhs.false49
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_33
# BB#32:                                # %lor.lhs.false49
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_33:                              # %lor.lhs.false54
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_36
# BB#34:                                # %land.lhs.true57
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_36
# BB#35:                                # %land.lhs.true57
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_36:                              # %if.else63
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB30_38
# BB#37:                                # %lor.lhs.false65
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB30_42
.LBB30_38:                              # %land.lhs.true68
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_40
# BB#39:                                # %land.lhs.true68
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_40:                              # %lor.lhs.false73
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_42
# BB#41:                                # %lor.lhs.false73
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_42:                              # %if.else79
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_11:                              # %sw.bb
	movq	%r12, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB30_22
# BB#12:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	testq	%r15, %rax
	jne	.LBB30_20
# BB#13:                                # %land.lhs.true6
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$2, %r14
	jne	.LBB30_15
# BB#14:                                # %land.lhs.true6
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_15:                              # %lor.lhs.false
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_17
# BB#16:                                # %lor.lhs.false
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_17:                              # %lor.lhs.false15
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB30_20
# BB#18:                                # %land.lhs.true18
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB30_20
# BB#19:                                # %land.lhs.true18
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_20:                              # %if.else
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB30_22
# BB#21:                                # %lor.lhs.false24
	movq	recog_data+16(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB30_26
.LBB30_22:                              # %land.lhs.true27
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$1, %r14
	jne	.LBB30_24
# BB#23:                                # %land.lhs.true27
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_24:                              # %lor.lhs.false32
	movq	%r12, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB30_26
# BB#25:                                # %lor.lhs.false32
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB30_223
.LBB30_26:                              # %if.else38
	movq	$10, %r14
	movq	%r14, %rax
	jmp	.LBB30_203
.LBB30_210:                             # %land.lhs.true505
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$10, %r14
	jns	.LBB30_223
# BB#211:                               # %if.then511
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_store_unit_ready_cost, %rcx
	movq	$4467, %rdx             # imm = 0x1173
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp277:
	.size	k6_store_unit_ready_cost, .Ltmp277-k6_store_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI30_0:
	.quad	.LBB30_208
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_205
	.quad	.LBB30_205
	.quad	.LBB30_205
	.quad	.LBB30_204
	.quad	.LBB30_204
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_166
	.quad	.LBB30_9
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_205
	.quad	.LBB30_205
	.quad	.LBB30_213
	.quad	.LBB30_9
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_205
	.quad	.LBB30_205
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_9
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_160
	.quad	.LBB30_205
	.quad	.LBB30_204
	.quad	.LBB30_204
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_213
	.quad	.LBB30_142
	.quad	.LBB30_9
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_136
	.quad	.LBB30_136
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_9
	.quad	.LBB30_9
	.quad	.LBB30_9
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_9
	.quad	.LBB30_9
	.quad	.LBB30_9
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_9
	.quad	.LBB30_9
	.quad	.LBB30_9
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_134
	.quad	.LBB30_134
	.quad	.LBB30_134
	.quad	.LBB30_134
	.quad	.LBB30_134
	.quad	.LBB30_134
	.quad	.LBB30_134
	.quad	.LBB30_134
	.quad	.LBB30_134
	.quad	.LBB30_134
	.quad	.LBB30_118
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_102
	.quad	.LBB30_86
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_72
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_58
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_194
	.quad	.LBB30_43
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_43
	.quad	.LBB30_43
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_43
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_72
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_204
	.quad	.LBB30_204
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_27
	.quad	.LBB30_11
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_223
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_213
	.quad	.LBB30_223

	.text
	.globl	k6_store_unit_blockage_range
	.align	16, 0x90
	.type	k6_store_unit_blockage_range,@function
k6_store_unit_blockage_range:           # @k6_store_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp280:
	.cfi_def_cfa_offset 16
.Ltmp281:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB31_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB31_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB31_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB31_5
.LBB31_4:                               # %sw.default
	movq	$65546, %rax            # imm = 0x1000A
	popq	%rbx
	retq
.LBB31_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_store_unit_blockage_range, %rcx
	movq	$4709, %rdx             # imm = 0x1265
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp282:
	.size	k6_store_unit_blockage_range, .Ltmp282-k6_store_unit_blockage_range
	.cfi_endproc

	.globl	k6_load_unit_ready_cost
	.align	16, 0x90
	.type	k6_load_unit_ready_cost,@function
k6_load_unit_ready_cost:                # @k6_load_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp286:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp287:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp288:
	.cfi_def_cfa_offset 32
.Ltmp289:
	.cfi_offset %rbx, -24
.Ltmp290:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB32_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB32_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$800, %rdx              # imm = 0x320
	jg	.LBB32_8
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$763, %rdx              # imm = 0x2FB
	jg	.LBB32_7
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$725, %rdx              # imm = 0x2D5
	jg	.LBB32_42
# BB#5:                                 # %cond.end
	incq	%rax
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$659, %rax              # imm = 0x293
	ja	.LBB32_43
# BB#6:                                 # %cond.end
	movq	$10, %rcx
	jmpq	*.LJTI32_0(,%rax,8)
.LBB32_37:                              # %sw.bb53
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
.LBB32_18:                              # %sw.bb13
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB32_47
	jmp	.LBB32_48
.LBB32_8:                               # %cond.end
	leaq	-803(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$3, %rdx
	jae	.LBB32_10
# BB#9:
	movq	$10, %rcx
	movq	%rcx, %rax
	jmp	.LBB32_36
.LBB32_7:                               # %cond.end
	addq	$-764, %rax             # imm = 0xFFFFFFFFFFFFFD04
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$10, %rcx
	jb	.LBB32_53
	jmp	.LBB32_43
.LBB32_10:                              # %cond.end
	andq	%rcx, %rax
	cmpq	$801, %rax              # imm = 0x321
	movq	$10, %rcx
	je	.LBB32_53
# BB#11:                                # %cond.end
	cmpq	$802, %rax              # imm = 0x322
	jne	.LBB32_43
.LBB32_12:                              # %sw.bb38
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$1, %rcx
	je	.LBB32_53
# BB#13:                                # %select.mid
	movq	$10, %rcx
	movq	%rcx, %rax
	jmp	.LBB32_36
.LBB32_42:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$726, %rax              # imm = 0x2D6
	movq	$10, %rcx
	je	.LBB32_53
.LBB32_43:                              # %sw.default
	movq	%rbx, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rax
	cmpq	$3, %rax
	jne	.LBB32_45
# BB#44:                                # %sw.default
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rcx
	andq	%r14, %rax
	cmpq	$4, %rax
	je	.LBB32_53
.LBB32_45:                              # %lor.lhs.false83
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r14, %rax
	cmpq	$1, %rax
.LBB32_46:                              # %lor.lhs.false83
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB32_48
.LBB32_47:                              # %lor.lhs.false83
	movq	%rcx, %rdx
.LBB32_48:                              # %lor.lhs.false83
	movl	ix86_cpu(%rip), %esi
	cmpq	$4, %rsi
	movq	%rax, %rsi
	jne	.LBB32_50
# BB#49:                                # %lor.lhs.false83
	movq	%rcx, %rsi
.LBB32_50:                              # %lor.lhs.false83
	testq	%rsi, %rdx
	jne	.LBB32_52
# BB#51:                                # %lor.lhs.false83
	movq	%rcx, %rax
.LBB32_52:                              # %lor.lhs.false83
	leaq	1(%rax,%rax,8), %rcx
.LBB32_53:                              # %return
	movq	%rcx, %rax
.LBB32_36:                              # %lor.lhs.false
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB32_17:                              # %sw.bb13
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	jmp	.LBB32_18
.LBB32_27:                              # %sw.bb42
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB32_29
# BB#28:                                # %sw.bb42
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rcx
	andq	%r14, %rax
	cmpq	$4, %rax
	je	.LBB32_53
.LBB32_29:                              # %lor.lhs.false
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB32_31
# BB#30:                                # %lor.lhs.false
	movq	%rcx, %rdx
.LBB32_31:                              # %lor.lhs.false
	movl	ix86_cpu(%rip), %esi
	cmpq	$4, %rsi
	movq	%rax, %rsi
	jne	.LBB32_33
# BB#32:                                # %lor.lhs.false
	movq	%rcx, %rsi
.LBB32_33:                              # %lor.lhs.false
	testq	%rsi, %rdx
	jne	.LBB32_35
# BB#34:                                # %lor.lhs.false
	movq	%rcx, %rax
.LBB32_35:                              # %lor.lhs.false
	leaq	1(%rax,%rax,8), %rax
	jmp	.LBB32_36
.LBB32_14:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	jmp	.LBB32_15
.LBB32_16:                              # %sw.bb6
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
.LBB32_15:                              # %sw.bb
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r14, %rax
	jmp	.LBB32_46
.LBB32_19:                              # %sw.bb20
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB32_22
# BB#20:                                # %land.lhs.true22
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB32_22
# BB#21:                                # %land.lhs.true22
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rcx
	andq	%r14, %rax
	cmpq	$4, %rax
	je	.LBB32_53
.LBB32_22:                              # %if.else28
	movq	$10, %rcx
	movq	%rcx, %rax
	jmp	.LBB32_36
.LBB32_38:                              # %sw.bb67
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB32_40
# BB#39:
	movq	$10, %rcx
	movq	%rcx, %rax
	jmp	.LBB32_36
.LBB32_23:                              # %sw.bb29
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB32_26
# BB#24:                                # %land.lhs.true31
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	je	.LBB32_26
# BB#25:                                # %land.lhs.true31
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rcx
	andq	%r14, %rax
	cmpq	$4, %rax
	je	.LBB32_53
.LBB32_26:                              # %if.else37
	movq	$10, %rcx
	movq	%rcx, %rax
	jmp	.LBB32_36
.LBB32_40:                              # %land.lhs.true71
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$10, %rcx
	jns	.LBB32_53
# BB#41:                                # %if.then77
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_load_unit_ready_cost, %rcx
	movq	$4923, %rdx             # imm = 0x133B
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp291:
	.size	k6_load_unit_ready_cost, .Ltmp291-k6_load_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI32_0:
	.quad	.LBB32_38
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_27
	.quad	.LBB32_27
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_12
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_12
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_12
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_23
	.quad	.LBB32_37
	.quad	.LBB32_27
	.quad	.LBB32_27
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_12
	.quad	.LBB32_43
	.quad	.LBB32_19
	.quad	.LBB32_19
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_12
	.quad	.LBB32_12
	.quad	.LBB32_12
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_12
	.quad	.LBB32_12
	.quad	.LBB32_12
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_12
	.quad	.LBB32_12
	.quad	.LBB32_12
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_45
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_37
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_27
	.quad	.LBB32_27
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_17
	.quad	.LBB32_17
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_17
	.quad	.LBB32_17
	.quad	.LBB32_17
	.quad	.LBB32_17
	.quad	.LBB32_17
	.quad	.LBB32_43
	.quad	.LBB32_16
	.quad	.LBB32_16
	.quad	.LBB32_16
	.quad	.LBB32_16
	.quad	.LBB32_16
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_17
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_43
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_53
	.quad	.LBB32_14
	.quad	.LBB32_14
	.quad	.LBB32_14
	.quad	.LBB32_14
	.quad	.LBB32_14
	.quad	.LBB32_14
	.quad	.LBB32_53
	.quad	.LBB32_53

	.text
	.globl	k6_load_unit_blockage_range
	.align	16, 0x90
	.type	k6_load_unit_blockage_range,@function
k6_load_unit_blockage_range:            # @k6_load_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp294:
	.cfi_def_cfa_offset 16
.Ltmp295:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB33_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB33_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB33_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB33_5
.LBB33_4:                               # %sw.default
	movq	$65546, %rax            # imm = 0x1000A
	popq	%rbx
	retq
.LBB33_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_load_unit_blockage_range, %rcx
	movq	$5131, %rdx             # imm = 0x140B
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp296:
	.size	k6_load_unit_blockage_range, .Ltmp296-k6_load_unit_blockage_range
	.cfi_endproc

	.globl	k6_branch_unit_ready_cost
	.align	16, 0x90
	.type	k6_branch_unit_ready_cost,@function
k6_branch_unit_ready_cost:              # @k6_branch_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp299:
	.cfi_def_cfa_offset 16
.Ltmp300:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB34_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB34_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB34_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB34_5
.LBB34_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB34_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_branch_unit_ready_cost, %rcx
	movq	$5148, %rdx             # imm = 0x141C
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp301:
	.size	k6_branch_unit_ready_cost, .Ltmp301-k6_branch_unit_ready_cost
	.cfi_endproc

	.globl	k6_alu_unit_ready_cost
	.align	16, 0x90
	.type	k6_alu_unit_ready_cost,@function
k6_alu_unit_ready_cost:                 # @k6_alu_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp308:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp309:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp310:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp311:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp312:
	.cfi_def_cfa_offset 48
.Ltmp313:
	.cfi_offset %rbx, -48
.Ltmp314:
	.cfi_offset %r12, -40
.Ltmp315:
	.cfi_offset %r13, -32
.Ltmp316:
	.cfi_offset %r14, -24
.Ltmp317:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB35_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB35_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$17, %rbx
	cmpq	$637, %rax              # imm = 0x27D
	ja	.LBB35_408
# BB#3:                                 # %cond.end
	jmpq	*.LJTI35_0(,%rax,8)
.LBB35_385:                             # %sw.bb990
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_387
# BB#386:                               # %sw.bb990
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_387:                             # %lor.lhs.false995
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	je	.LBB35_389
# BB#388:                               # %lor.lhs.false995
	movq	%rdx, %rcx
.LBB35_389:                             # %lor.lhs.false995
	movl	ix86_cpu(%rip), %esi
	cmpq	$4, %rsi
	jne	.LBB35_391
# BB#390:                               # %lor.lhs.false995
	movq	%rdx, %rax
.LBB35_391:                             # %lor.lhs.false995
	testq	%rax, %rcx
	movq	$1, %rbx
	jne	.LBB35_408
# BB#392:                               # %lor.lhs.false995
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_140:                             # %sw.bb328
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_142
# BB#141:                               # %sw.bb328
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_142:                             # %lor.lhs.false333
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	je	.LBB35_144
# BB#143:                               # %lor.lhs.false333
	movq	%rdx, %rcx
.LBB35_144:                             # %lor.lhs.false333
	movl	ix86_cpu(%rip), %esi
	cmpq	$4, %rsi
	jne	.LBB35_146
# BB#145:                               # %lor.lhs.false333
	movq	%rdx, %rax
.LBB35_146:                             # %lor.lhs.false333
	testq	%rax, %rcx
	movq	$2, %rax
	jne	.LBB35_148
# BB#147:                               # %lor.lhs.false333
	movq	$17, %rax
	jmp	.LBB35_148
.LBB35_280:                             # %sw.bb669
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$1, %rbx
	je	.LBB35_408
# BB#281:                               # %select.mid
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_366:                             # %sw.bb932
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB35_368
# BB#367:                               # %sw.bb932
	movq	%rdx, %rcx
.LBB35_368:                             # %sw.bb932
	movl	ix86_cpu(%rip), %esi
	cmpq	$4, %rsi
	jne	.LBB35_370
# BB#369:                               # %sw.bb932
	movq	%rdx, %rax
.LBB35_370:                             # %sw.bb932
	testq	%rax, %rcx
	movq	$1, %rbx
	jne	.LBB35_408
# BB#371:                               # %sw.bb932
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_393:                             # %sw.bb1002
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB35_399
# BB#394:                               # %land.lhs.true1004
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_396
# BB#395:                               # %land.lhs.true1004
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_396:                             # %lor.lhs.false1009
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_398
# BB#397:                               # %lor.lhs.false1009
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_398:                             # %lor.lhs.false1014thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB35_399:                             # %lor.lhs.false1014
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB35_404
# BB#400:                               # %land.lhs.true1016
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_402
# BB#401:                               # %land.lhs.true1016
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_402:                             # %lor.lhs.false1021
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_404
# BB#403:                               # %lor.lhs.false1021
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_404:                             # %if.else1027
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_207:                             # %sw.bb484
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB35_212
# BB#208:                               # %land.lhs.true487
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_210
# BB#209:                               # %land.lhs.true487
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_210:                             # %lor.lhs.false492
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_212
# BB#211:                               # %lor.lhs.false492
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_212:                             # %lor.lhs.false497
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB35_217
# BB#213:                               # %land.lhs.true500
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_215
# BB#214:                               # %land.lhs.true500
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_215:                             # %lor.lhs.false505
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_217
# BB#216:                               # %lor.lhs.false505
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_217:                             # %if.else511
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_178:                             # %sw.bb412
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB35_183
# BB#179:                               # %land.lhs.true415
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_181
# BB#180:                               # %land.lhs.true415
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_181:                             # %lor.lhs.false420
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_183
# BB#182:                               # %lor.lhs.false420
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_183:                             # %lor.lhs.false425
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB35_188
# BB#184:                               # %land.lhs.true428
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_186
# BB#185:                               # %land.lhs.true428
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_186:                             # %lor.lhs.false433
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_188
# BB#187:                               # %lor.lhs.false433
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_188:                             # %if.else439
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_149:                             # %sw.bb340
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB35_154
# BB#150:                               # %land.lhs.true343
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_152
# BB#151:                               # %land.lhs.true343
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_152:                             # %lor.lhs.false348
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_154
# BB#153:                               # %lor.lhs.false348
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_154:                             # %lor.lhs.false353
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB35_159
# BB#155:                               # %land.lhs.true356
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_157
# BB#156:                               # %land.lhs.true356
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_157:                             # %lor.lhs.false361
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_159
# BB#158:                               # %lor.lhs.false361
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_159:                             # %if.else367
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_89:                              # %sw.bb202
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB35_94
# BB#90:                                # %land.lhs.true205
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_92
# BB#91:                                # %land.lhs.true205
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_92:                              # %lor.lhs.false210
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_94
# BB#93:                                # %lor.lhs.false210
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_94:                              # %lor.lhs.false215
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB35_99
# BB#95:                                # %land.lhs.true218
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_97
# BB#96:                                # %land.lhs.true218
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_97:                              # %lor.lhs.false223
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_99
# BB#98:                                # %lor.lhs.false223
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_99:                              # %if.else229
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_252:                             # %sw.bb598
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB35_257
# BB#253:                               # %land.lhs.true601
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_255
# BB#254:                               # %land.lhs.true601
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_255:                             # %lor.lhs.false606
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_257
# BB#256:                               # %lor.lhs.false606
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_257:                             # %lor.lhs.false611
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB35_262
# BB#258:                               # %land.lhs.true614
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_260
# BB#259:                               # %land.lhs.true614
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_260:                             # %lor.lhs.false619
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_262
# BB#261:                               # %lor.lhs.false619
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_262:                             # %if.else625
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_321:                             # %sw.bb789
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB35_324
# BB#322:                               # %land.lhs.true792
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_324
# BB#323:                               # %land.lhs.true792
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_324:                             # %lor.lhs.false797
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	jne	.LBB35_329
# BB#325:                               # %land.lhs.true800
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_327
# BB#326:                               # %land.lhs.true800
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_327:                             # %lor.lhs.false805
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_329
# BB#328:                               # %lor.lhs.false805
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_329:                             # %if.else811
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_100:                             # %sw.bb230
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB35_105
# BB#101:                               # %land.lhs.true232
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_103
# BB#102:                               # %land.lhs.true232
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_103:                             # %lor.lhs.false237
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_105
# BB#104:                               # %lor.lhs.false237
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_105:                             # %lor.lhs.false242
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB35_110
# BB#106:                               # %land.lhs.true245
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_108
# BB#107:                               # %land.lhs.true245
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_108:                             # %lor.lhs.false250
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_110
# BB#109:                               # %lor.lhs.false250
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_110:                             # %lor.lhs.false255
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB35_115
# BB#111:                               # %land.lhs.true258
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_113
# BB#112:                               # %land.lhs.true258
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_113:                             # %lor.lhs.false263
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_115
# BB#114:                               # %lor.lhs.false263
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_115:                             # %if.else269
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_116:                             # %sw.bb270
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB35_122
# BB#117:                               # %land.lhs.true272
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_119
# BB#118:                               # %land.lhs.true272
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_119:                             # %lor.lhs.false277
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_121
# BB#120:                               # %lor.lhs.false277
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_121:                             # %lor.lhs.false282thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB35_122:                             # %lor.lhs.false282
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB35_127
# BB#123:                               # %land.lhs.true286
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_125
# BB#124:                               # %land.lhs.true286
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_125:                             # %lor.lhs.false291
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_127
# BB#126:                               # %lor.lhs.false291
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_127:                             # %if.else297
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_405:                             # %sw.bb1028
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB35_407
# BB#406:
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_372:                             # %sw.bb939
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB35_377
# BB#373:                               # %land.lhs.true951
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB35_375
# BB#374:                               # %lor.lhs.false953
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB35_377
.LBB35_375:                             # %land.lhs.true956
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_377
# BB#376:                               # %land.lhs.true956
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_377:                             # %lor.lhs.false961
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB35_384
# BB#378:                               # %lor.lhs.false961
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB35_384
# BB#379:                               # %land.lhs.true975
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB35_384
# BB#380:                               # %land.lhs.true978
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_382
# BB#381:                               # %land.lhs.true978
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_382:                             # %lor.lhs.false983
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_384
# BB#383:                               # %lor.lhs.false983
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_384:                             # %if.else989
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_350:                             # %sw.bb879
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB35_353
# BB#351:                               # %land.lhs.true882
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_353
# BB#352:                               # %land.lhs.true882
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_353:                             # %lor.lhs.false887
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB35_356
# BB#354:                               # %lor.lhs.false891
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB35_365
# BB#355:                               # %land.lhs.true895
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB35_365
.LBB35_356:                             # %land.lhs.true899
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB35_358
# BB#357:                               # %lor.lhs.false905
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB35_365
.LBB35_358:                             # %land.lhs.true908
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB35_365
# BB#359:                               # %land.lhs.true912
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB35_365
# BB#360:                               # %land.lhs.true912
	cmpq	$2, %rax
	je	.LBB35_365
# BB#361:                               # %land.lhs.true920
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_363
# BB#362:                               # %land.lhs.true920
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_363:                             # %lor.lhs.false925
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_365
# BB#364:                               # %lor.lhs.false925
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_365:                             # %if.else931
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_330:                             # %sw.bb812
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %edx
	movq	$5, %rax
	cmpq	$5, %rdx
	je	.LBB35_341
# BB#331:                               # %sw.bb812
	cmpq	$3, %rdx
	jne	.LBB35_334
# BB#332:                               # %land.lhs.true814
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB35_336
# BB#333:                               # %lor.lhs.false818
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB35_339
	jmp	.LBB35_336
.LBB35_310:                             # %sw.bb758
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB35_314
# BB#311:                               # %land.lhs.true761
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB35_314
# BB#312:                               # %land.lhs.true765
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_314
# BB#313:                               # %land.lhs.true765
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_314:                             # %lor.lhs.false770
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB35_316
# BB#315:                               # %lor.lhs.false773
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB35_320
.LBB35_316:                             # %land.lhs.true777
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_318
# BB#317:                               # %land.lhs.true777
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_318:                             # %lor.lhs.false782
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_320
# BB#319:                               # %lor.lhs.false782
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_320:                             # %if.else788
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_297:                             # %sw.bb711
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB35_302
# BB#298:                               # %land.lhs.true721
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB35_300
# BB#299:                               # %lor.lhs.false723
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB35_302
.LBB35_300:                             # %land.lhs.true726
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_302
# BB#301:                               # %land.lhs.true726
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_302:                             # %lor.lhs.false731
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB35_309
# BB#303:                               # %lor.lhs.false731
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB35_309
# BB#304:                               # %land.lhs.true743
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB35_309
# BB#305:                               # %land.lhs.true746
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_307
# BB#306:                               # %land.lhs.true746
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_307:                             # %lor.lhs.false751
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_309
# BB#308:                               # %lor.lhs.false751
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_309:                             # %if.else757
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_292:                             # %sw.bb694
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB35_296
# BB#293:                               # %sw.bb694
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB35_296
# BB#294:                               # %land.lhs.true704
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_296
# BB#295:                               # %land.lhs.true704
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_296:                             # %if.else710
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_282:                             # %sw.bb673
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB35_286
# BB#283:                               # %land.lhs.true675
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_285
# BB#284:                               # %land.lhs.true675
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_285:                             # %lor.lhs.false680thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB35_286:                             # %lor.lhs.false680
	testq	%r15, %rax
	jne	.LBB35_291
# BB#287:                               # %land.lhs.true682
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_289
# BB#288:                               # %land.lhs.true682
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_289:                             # %lor.lhs.false687
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_291
# BB#290:                               # %lor.lhs.false687
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_291:                             # %if.else693
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_263:                             # %sw.bb626
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB35_265
# BB#264:                               # %lor.lhs.false628
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB35_269
.LBB35_265:                             # %land.lhs.true631
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_267
# BB#266:                               # %land.lhs.true631
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_267:                             # %lor.lhs.false636
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_269
# BB#268:                               # %lor.lhs.false636
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_269:                             # %lor.lhs.false641
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	jne	.LBB35_274
# BB#270:                               # %land.lhs.true644
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_272
# BB#271:                               # %land.lhs.true644
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_272:                             # %lor.lhs.false649
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_274
# BB#273:                               # %lor.lhs.false649
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_274:                             # %lor.lhs.false654
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB35_279
# BB#275:                               # %land.lhs.true657
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_277
# BB#276:                               # %land.lhs.true657
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_277:                             # %lor.lhs.false662
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_279
# BB#278:                               # %lor.lhs.false662
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_279:                             # %if.else668
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_235:                             # %sw.bb555
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB35_237
# BB#236:                               # %lor.lhs.false557
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB35_241
.LBB35_237:                             # %land.lhs.true560
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_239
# BB#238:                               # %land.lhs.true560
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_239:                             # %lor.lhs.false565
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_241
# BB#240:                               # %lor.lhs.false565
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_241:                             # %lor.lhs.false570
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	jne	.LBB35_246
# BB#242:                               # %land.lhs.true573
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_244
# BB#243:                               # %land.lhs.true573
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_244:                             # %lor.lhs.false578
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_246
# BB#245:                               # %lor.lhs.false578
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_246:                             # %lor.lhs.false583
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB35_251
# BB#247:                               # %land.lhs.true586
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_249
# BB#248:                               # %land.lhs.true586
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_249:                             # %lor.lhs.false591
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_251
# BB#250:                               # %lor.lhs.false591
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_251:                             # %if.else597
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_218:                             # %sw.bb512
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB35_220
# BB#219:                               # %lor.lhs.false514
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB35_224
.LBB35_220:                             # %land.lhs.true517
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_222
# BB#221:                               # %land.lhs.true517
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_222:                             # %lor.lhs.false522
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_224
# BB#223:                               # %lor.lhs.false522
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_224:                             # %lor.lhs.false527
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	jne	.LBB35_229
# BB#225:                               # %land.lhs.true530
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_227
# BB#226:                               # %land.lhs.true530
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_227:                             # %lor.lhs.false535
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_229
# BB#228:                               # %lor.lhs.false535
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_229:                             # %lor.lhs.false540
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB35_234
# BB#230:                               # %land.lhs.true543
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_232
# BB#231:                               # %land.lhs.true543
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_232:                             # %lor.lhs.false548
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_234
# BB#233:                               # %lor.lhs.false548
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_234:                             # %if.else554
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_189:                             # %sw.bb440
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB35_195
# BB#190:                               # %land.lhs.true442
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_192
# BB#191:                               # %land.lhs.true442
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_192:                             # %lor.lhs.false447
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_194
# BB#193:                               # %lor.lhs.false447
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_194:                             # %lor.lhs.false452
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB35_206
.LBB35_195:                             # %land.lhs.true454
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB35_200
# BB#196:                               # %land.lhs.true457
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_198
# BB#197:                               # %land.lhs.true457
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_198:                             # %lor.lhs.false462
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_200
# BB#199:                               # %lor.lhs.false462
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_200:                             # %lor.lhs.false467
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB35_206
# BB#201:                               # %land.lhs.true469
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB35_206
# BB#202:                               # %land.lhs.true472
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_204
# BB#203:                               # %land.lhs.true472
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_204:                             # %lor.lhs.false477
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_206
# BB#205:                               # %lor.lhs.false477
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_206:                             # %if.else483
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_160:                             # %sw.bb368
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB35_166
# BB#161:                               # %land.lhs.true370
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_163
# BB#162:                               # %land.lhs.true370
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_163:                             # %lor.lhs.false375
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_165
# BB#164:                               # %lor.lhs.false375
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_165:                             # %lor.lhs.false380
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB35_177
.LBB35_166:                             # %land.lhs.true382
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB35_171
# BB#167:                               # %land.lhs.true385
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_169
# BB#168:                               # %land.lhs.true385
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_169:                             # %lor.lhs.false390
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_171
# BB#170:                               # %lor.lhs.false390
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_171:                             # %lor.lhs.false395
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB35_177
# BB#172:                               # %land.lhs.true397
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB35_177
# BB#173:                               # %land.lhs.true400
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_175
# BB#174:                               # %land.lhs.true400
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_175:                             # %lor.lhs.false405
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_177
# BB#176:                               # %lor.lhs.false405
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_177:                             # %if.else411
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_128:                             # %sw.bb298
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB35_134
# BB#129:                               # %land.lhs.true300
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_131
# BB#130:                               # %land.lhs.true300
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_131:                             # %lor.lhs.false305
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_133
# BB#132:                               # %lor.lhs.false305
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_133:                             # %lor.lhs.false310thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB35_134:                             # %lor.lhs.false310
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB35_139
# BB#135:                               # %land.lhs.true316
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_137
# BB#136:                               # %land.lhs.true316
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_137:                             # %lor.lhs.false321
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_139
# BB#138:                               # %lor.lhs.false321
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_139:                             # %if.else327
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_68:                              # %sw.bb150
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB35_74
# BB#69:                                # %land.lhs.true152
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_71
# BB#70:                                # %land.lhs.true152
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_71:                              # %lor.lhs.false157
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_73
# BB#72:                                # %lor.lhs.false157
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_73:                              # %lor.lhs.false162thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB35_74:                              # %lor.lhs.false162
	testq	%r15, %rax
	jne	.LBB35_81
# BB#75:                                # %land.lhs.true164
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB35_81
# BB#76:                                # %land.lhs.true168
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB35_81
# BB#77:                                # %land.lhs.true171
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_79
# BB#78:                                # %land.lhs.true171
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_79:                              # %lor.lhs.false176
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_81
# BB#80:                                # %lor.lhs.false176
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_81:                              # %lor.lhs.false181
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB35_88
# BB#82:                                # %land.lhs.true183
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB35_84
# BB#83:                                # %lor.lhs.false187
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB35_88
.LBB35_84:                              # %land.lhs.true190
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_86
# BB#85:                                # %land.lhs.true190
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_86:                              # %lor.lhs.false195
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_88
# BB#87:                                # %lor.lhs.false195
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_88:                              # %if.else201
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_54:                              # %sw.bb116
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r13d
	movq	$1, %r12
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r13, %rax
	testq	%r15, %rax
	je	.LBB35_61
# BB#55:                                # %land.lhs.true118
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB35_56
# BB#57:                                # %land.lhs.true121
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_59
# BB#58:                                # %land.lhs.true121
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_59:                              # %lor.lhs.false126
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	ix86_cpu(%rip), %ecx
	testq	%r15, %rax
	je	.LBB35_61
# BB#60:                                # %lor.lhs.false126
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
	jmp	.LBB35_61
.LBB35_38:                              # %sw.bb76
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB35_43
# BB#39:                                # %land.lhs.true78
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_41
# BB#40:                                # %land.lhs.true78
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_41:                              # %lor.lhs.false83
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_43
# BB#42:                                # %lor.lhs.false83
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_43:                              # %lor.lhs.false88
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB35_48
# BB#44:                                # %land.lhs.true91
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_46
# BB#45:                                # %land.lhs.true91
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_46:                              # %lor.lhs.false96
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_48
# BB#47:                                # %lor.lhs.false96
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_48:                              # %lor.lhs.false101
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB35_53
# BB#49:                                # %land.lhs.true104
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_51
# BB#50:                                # %land.lhs.true104
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_51:                              # %lor.lhs.false109
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_53
# BB#52:                                # %lor.lhs.false109
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_53:                              # %if.else115
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_21:                              # %sw.bb37
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB35_31
# BB#22:                                # %land.lhs.true39
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB35_25
# BB#23:                                # %land.lhs.true42
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_25
# BB#24:                                # %land.lhs.true42
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_25:                              # %lor.lhs.false47
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB35_32
# BB#26:                                # %land.lhs.true49
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	testq	%r15, %rax
	jne	.LBB35_31
# BB#27:                                # %land.lhs.true52
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_29
# BB#28:                                # %land.lhs.true52
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_29:                              # %lor.lhs.false57
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_31
# BB#30:                                # %lor.lhs.false57
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_31:                              # %lor.lhs.false62thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB35_32:                              # %lor.lhs.false62
	testq	%r15, %rax
	jne	.LBB35_37
# BB#33:                                # %land.lhs.true64
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_35
# BB#34:                                # %land.lhs.true64
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_35:                              # %lor.lhs.false69
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_37
# BB#36:                                # %lor.lhs.false69
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_37:                              # %if.else75
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_4:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB35_14
# BB#5:                                 # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB35_8
# BB#6:                                 # %land.lhs.true6
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_8
# BB#7:                                 # %land.lhs.true6
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_8:                               # %lor.lhs.false
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB35_15
# BB#9:                                 # %land.lhs.true12
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	testq	%r15, %rax
	jne	.LBB35_14
# BB#10:                                # %land.lhs.true15
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_12
# BB#11:                                # %land.lhs.true15
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_12:                              # %lor.lhs.false20
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_14
# BB#13:                                # %lor.lhs.false20
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_14:                              # %lor.lhs.false25thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB35_15:                              # %lor.lhs.false25
	testq	%r15, %rax
	jne	.LBB35_20
# BB#16:                                # %land.lhs.true27
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_18
# BB#17:                                # %land.lhs.true27
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_18:                              # %lor.lhs.false32
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_20
# BB#19:                                # %lor.lhs.false32
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_20:                              # %if.else
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_407:                             # %land.lhs.true1032
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$17, %rbx
	jns	.LBB35_408
# BB#409:                               # %if.then1038
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alu_unit_ready_cost, %rcx
	movq	$5779, %rdx             # imm = 0x1693
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB35_334:                             # %land.lhs.true836
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rax, %rsi
	testq	%r15, %rsi
	je	.LBB35_336
# BB#335:                               # %land.lhs.true836
	movq	$2, %rax
	cmpq	$2, %rdx
	je	.LBB35_343
.LBB35_336:                             # %land.lhs.true842
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB35_338
# BB#337:                               # %land.lhs.true842
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_338:                             # %lor.lhs.false847
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB35_341
.LBB35_339:                             # %lor.lhs.false849
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB35_349
# BB#340:                               # %land.lhs.true853
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	movq	$3, %rax
	je	.LBB35_349
.LBB35_341:                             # %land.lhs.true857
	cmpq	$3, %rax
	je	.LBB35_345
# BB#342:                               # %land.lhs.true857
	cmpq	$5, %rax
	je	.LBB35_345
.LBB35_343:                             # %lor.lhs.false861
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB35_349
# BB#344:                               # %lor.lhs.false861
	cmpq	$2, %rax
	jne	.LBB35_349
.LBB35_345:                             # %land.lhs.true867
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_347
# BB#346:                               # %land.lhs.true867
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_347:                             # %lor.lhs.false872
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_349
# BB#348:                               # %lor.lhs.false872
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_349:                             # %if.else878
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.LBB35_56:                              # %land.lhs.true118.lor.lhs.false131_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB35_61:                              # %lor.lhs.false131
	shlq	%cl, %r12
	andq	%r13, %r12
	testq	%r15, %r12
	je	.LBB35_63
# BB#62:                                # %lor.lhs.false135
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB35_67
.LBB35_63:                              # %land.lhs.true138
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB35_65
# BB#64:                                # %land.lhs.true138
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB35_408
.LBB35_65:                              # %lor.lhs.false143
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB35_67
# BB#66:                                # %lor.lhs.false143
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB35_67
.LBB35_408:                             # %return
	movq	%rbx, %rax
.LBB35_148:                             # %lor.lhs.false333
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB35_67:                              # %if.else149
	movq	$17, %rbx
	movq	%rbx, %rax
	jmp	.LBB35_148
.Ltmp318:
	.size	k6_alu_unit_ready_cost, .Ltmp318-k6_alu_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI35_0:
	.quad	.LBB35_405
	.quad	.LBB35_393
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_393
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_393
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_393
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_372
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_366
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_350
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_366
	.quad	.LBB35_366
	.quad	.LBB35_366
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_330
	.quad	.LBB35_366
	.quad	.LBB35_366
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_321
	.quad	.LBB35_321
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_321
	.quad	.LBB35_310
	.quad	.LBB35_366
	.quad	.LBB35_366
	.quad	.LBB35_366
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_297
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_366
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_292
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_393
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_393
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_282
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_263
	.quad	.LBB35_252
	.quad	.LBB35_252
	.quad	.LBB35_252
	.quad	.LBB35_252
	.quad	.LBB35_235
	.quad	.LBB35_218
	.quad	.LBB35_207
	.quad	.LBB35_207
	.quad	.LBB35_207
	.quad	.LBB35_207
	.quad	.LBB35_207
	.quad	.LBB35_207
	.quad	.LBB35_189
	.quad	.LBB35_178
	.quad	.LBB35_178
	.quad	.LBB35_178
	.quad	.LBB35_178
	.quad	.LBB35_178
	.quad	.LBB35_160
	.quad	.LBB35_149
	.quad	.LBB35_149
	.quad	.LBB35_149
	.quad	.LBB35_178
	.quad	.LBB35_149
	.quad	.LBB35_149
	.quad	.LBB35_149
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_140
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_128
	.quad	.LBB35_385
	.quad	.LBB35_116
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_116
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_100
	.quad	.LBB35_89
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_100
	.quad	.LBB35_68
	.quad	.LBB35_89
	.quad	.LBB35_54
	.quad	.LBB35_100
	.quad	.LBB35_89
	.quad	.LBB35_89
	.quad	.LBB35_38
	.quad	.LBB35_89
	.quad	.LBB35_89
	.quad	.LBB35_393
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_393
	.quad	.LBB35_393
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_385
	.quad	.LBB35_280
	.quad	.LBB35_280
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_385
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_280
	.quad	.LBB35_408
	.quad	.LBB35_280
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_408
	.quad	.LBB35_21
	.quad	.LBB35_4

	.text
	.globl	k6_alu_unit_blockage_range
	.align	16, 0x90
	.type	k6_alu_unit_blockage_range,@function
k6_alu_unit_blockage_range:             # @k6_alu_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp321:
	.cfi_def_cfa_offset 16
.Ltmp322:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB36_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB36_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB36_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB36_5
.LBB36_4:                               # %sw.default
	movq	$65553, %rax            # imm = 0x10011
	popq	%rbx
	retq
.LBB36_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alu_unit_blockage_range, %rcx
	movq	$5796, %rdx             # imm = 0x16A4
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp323:
	.size	k6_alu_unit_blockage_range, .Ltmp323-k6_alu_unit_blockage_range
	.cfi_endproc

	.globl	k6_alux_unit_ready_cost
	.align	16, 0x90
	.type	k6_alux_unit_ready_cost,@function
k6_alux_unit_ready_cost:                # @k6_alux_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp328:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp329:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp330:
	.cfi_def_cfa_offset 32
.Ltmp331:
	.cfi_offset %rbx, -32
.Ltmp332:
	.cfi_offset %r14, -24
.Ltmp333:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB37_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB37_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$17, %r14
	cmpq	$637, %rax              # imm = 0x27D
	ja	.LBB37_88
# BB#3:                                 # %cond.end
	jmpq	*.LJTI37_0(,%rax,8)
.LBB37_82:                              # %sw.bb207
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_84
# BB#83:                                # %land.lhs.true209
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_84:                              # %if.else213
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_80:                              # %sw.bb203
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$1, %r14
	je	.LBB37_88
# BB#81:                                # %select.mid2
	movq	$17, %r14
.LBB37_88:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB37_25:                              # %sw.bb59
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movq	$2, %r14
	je	.LBB37_88
# BB#26:                                # %select.mid
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_20:                              # %sw.bb42
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_24
# BB#21:                                # %land.lhs.true44
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	movq	$1, %r14
	je	.LBB37_88
# BB#22:                                # %lor.lhs.false47
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB37_24
# BB#23:                                # %land.lhs.true50
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	jne	.LBB37_88
.LBB37_24:                              # %if.else54
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_44:                              # %sw.bb103
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_47
# BB#45:                                # %land.lhs.true105
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$1, %r14
	jne	.LBB37_88
# BB#46:                                # %lor.lhs.false107
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	jne	.LBB37_88
.LBB37_47:                              # %if.else111
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_53:                              # %sw.bb126
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_56
# BB#54:                                # %land.lhs.true128
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	jne	.LBB37_56
# BB#55:                                # %land.lhs.true131
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_56:                              # %if.else135
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_40:                              # %sw.bb94
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_43
# BB#41:                                # %sw.bb94
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB37_43
# BB#42:                                # %land.lhs.true98
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_43:                              # %if.else102
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_35:                              # %sw.bb81
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_39
# BB#36:                                # %land.lhs.true83
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB37_38
# BB#37:                                # %lor.lhs.false86
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	jne	.LBB37_39
.LBB37_38:                              # %land.lhs.true89
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_39:                              # %if.else93
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_85:                              # %sw.bb214
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB37_87
# BB#86:
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_68:                              # %sw.bb163
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_79
# BB#69:                                # %land.lhs.true165
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB37_72
# BB#70:                                # %lor.lhs.false169
	movzbl	x86_partial_reg_stall(%rip), %ecx
	testq	$16, %rcx
	je	.LBB37_79
# BB#71:                                # %land.lhs.true173
	movzbl	x86_himode_math(%rip), %ecx
	testq	$16, %rcx
	je	.LBB37_79
.LBB37_72:                              # %land.lhs.true177
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$4, %rcx
	ja	.LBB37_75
# BB#73:                                # %lor.lhs.false183
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB37_79
# BB#74:                                # %lor.lhs.false183.land.lhs.true186_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB37_75:                              # %land.lhs.true186
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB37_79
# BB#76:                                # %land.lhs.true190
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB37_79
# BB#77:                                # %land.lhs.true190
	cmpq	$2, %rax
	je	.LBB37_79
# BB#78:                                # %land.lhs.true198
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_79:                              # %if.else202
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_57:                              # %sw.bb136
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_67
# BB#58:                                # %land.lhs.true138
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB37_66
# BB#59:                                # %land.lhs.true138
	cmpq	$3, %rax
	jne	.LBB37_64
# BB#60:                                # %lor.lhs.false140
	movzbl	x86_partial_reg_stall(%rip), %ecx
	testq	$16, %rcx
	je	.LBB37_67
# BB#61:                                # %land.lhs.true144
	movzbl	x86_qimode_math(%rip), %ecx
	testq	$16, %rcx
	je	.LBB37_67
# BB#62:                                # %land.lhs.true148
	cmpq	$3, %rax
	je	.LBB37_66
# BB#63:                                # %land.lhs.true148
	cmpq	$5, %rax
	je	.LBB37_66
.LBB37_64:                              # %lor.lhs.false152
	movl	x86_movx(%rip), %ecx
	testq	$16, %rcx
	je	.LBB37_67
# BB#65:                                # %lor.lhs.false152
	cmpq	$2, %rax
	jne	.LBB37_67
.LBB37_66:                              # %land.lhs.true158
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_67:                              # %if.else162
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_48:                              # %sw.bb112
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_52
# BB#49:                                # %land.lhs.true114
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB37_51
# BB#50:                                # %lor.lhs.false117
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB37_52
.LBB37_51:                              # %land.lhs.true121
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_52:                              # %if.else125
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_31:                              # %sw.bb72
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_34
# BB#32:                                # %sw.bb72
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB37_34
# BB#33:                                # %land.lhs.true76
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_34:                              # %if.else80
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_27:                              # %sw.bb63
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_30
# BB#28:                                # %sw.bb63
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB37_30
# BB#29:                                # %land.lhs.true67
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_30:                              # %if.else71
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_11:                              # %sw.bb17
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_19
# BB#12:                                # %sw.bb17
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB37_19
# BB#13:                                # %land.lhs.true21
	movl	x86_double_with_add(%rip), %ebx
	testq	$16, %rbx
	movq	$1, %r14
	je	.LBB37_88
# BB#14:                                # %lor.lhs.false25
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB37_88
# BB#15:                                # %lor.lhs.false28
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB37_19
# BB#16:                                # %land.lhs.true30
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	%rbx, %rax
	je	.LBB37_19
# BB#17:                                # %land.lhs.true34
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB37_19
# BB#18:                                # %land.lhs.true37
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_19:                              # %if.else41
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB37_10
# BB#5:                                 # %land.lhs.true
	movl	x86_double_with_add(%rip), %ebx
	testq	$16, %rbx
	movq	$1, %r14
	je	.LBB37_88
# BB#6:                                 # %lor.lhs.false
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB37_88
# BB#7:                                 # %lor.lhs.false7
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	%rbx, %rax
	je	.LBB37_10
# BB#8:                                 # %land.lhs.true11
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB37_10
# BB#9:                                 # %land.lhs.true14
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %r14
	jne	.LBB37_88
.LBB37_10:                              # %if.else
	movq	$17, %r14
	jmp	.LBB37_88
.LBB37_87:                              # %land.lhs.true218
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$17, %r14
	jns	.LBB37_88
# BB#89:                                # %if.then224
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alux_unit_ready_cost, %rcx
	movq	$6263, %rdx             # imm = 0x1877
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp334:
	.size	k6_alux_unit_ready_cost, .Ltmp334-k6_alux_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI37_0:
	.quad	.LBB37_85
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_68
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_57
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_53
	.quad	.LBB37_53
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_82
	.quad	.LBB37_53
	.quad	.LBB37_48
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_82
	.quad	.LBB37_80
	.quad	.LBB37_44
	.quad	.LBB37_82
	.quad	.LBB37_80
	.quad	.LBB37_44
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_40
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_35
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_35
	.quad	.LBB37_35
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_31
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_27
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_25
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_80
	.quad	.LBB37_82
	.quad	.LBB37_80
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_80
	.quad	.LBB37_82
	.quad	.LBB37_80
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_20
	.quad	.LBB37_20
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_20
	.quad	.LBB37_11
	.quad	.LBB37_20
	.quad	.LBB37_4
	.quad	.LBB37_20
	.quad	.LBB37_20
	.quad	.LBB37_20
	.quad	.LBB37_20
	.quad	.LBB37_20
	.quad	.LBB37_20
	.quad	.LBB37_44
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_44
	.quad	.LBB37_44
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_80
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_80
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_82
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_88
	.quad	.LBB37_40
	.quad	.LBB37_40

	.text
	.globl	k6_alux_unit_blockage_range
	.align	16, 0x90
	.type	k6_alux_unit_blockage_range,@function
k6_alux_unit_blockage_range:            # @k6_alux_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp337:
	.cfi_def_cfa_offset 16
.Ltmp338:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB38_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB38_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB38_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB38_5
.LBB38_4:                               # %sw.default
	movq	$65553, %rax            # imm = 0x10011
	popq	%rbx
	retq
.LBB38_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alux_unit_blockage_range, %rcx
	movq	$6280, %rdx             # imm = 0x1888
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp339:
	.size	k6_alux_unit_blockage_range, .Ltmp339-k6_alux_unit_blockage_range
	.cfi_endproc

	.globl	ppro_p34_unit_ready_cost
	.align	16, 0x90
	.type	ppro_p34_unit_ready_cost,@function
ppro_p34_unit_ready_cost:               # @ppro_p34_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp342:
	.cfi_def_cfa_offset 16
.Ltmp343:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB39_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB39_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB39_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB39_5
.LBB39_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB39_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.ppro_p34_unit_ready_cost, %rcx
	movq	$6297, %rdx             # imm = 0x1899
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp344:
	.size	ppro_p34_unit_ready_cost, .Ltmp344-ppro_p34_unit_ready_cost
	.cfi_endproc

	.globl	ppro_p2_unit_ready_cost
	.align	16, 0x90
	.type	ppro_p2_unit_ready_cost,@function
ppro_p2_unit_ready_cost:                # @ppro_p2_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp347:
	.cfi_def_cfa_offset 16
.Ltmp348:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB40_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB40_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB40_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB40_5
.LBB40_4:                               # %sw.default
	movq	$3, %rax
	popq	%rbx
	retq
.LBB40_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.ppro_p2_unit_ready_cost, %rcx
	movq	$6314, %rdx             # imm = 0x18AA
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp349:
	.size	ppro_p2_unit_ready_cost, .Ltmp349-ppro_p2_unit_ready_cost
	.cfi_endproc

	.globl	ppro_p01_unit_ready_cost
	.align	16, 0x90
	.type	ppro_p01_unit_ready_cost,@function
ppro_p01_unit_ready_cost:               # @ppro_p01_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp352:
	.cfi_def_cfa_offset 16
.Ltmp353:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB41_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB41_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB41_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB41_5
.LBB41_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB41_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.ppro_p01_unit_ready_cost, %rcx
	movq	$6331, %rdx             # imm = 0x18BB
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp354:
	.size	ppro_p01_unit_ready_cost, .Ltmp354-ppro_p01_unit_ready_cost
	.cfi_endproc

	.globl	ppro_p0_unit_ready_cost
	.align	16, 0x90
	.type	ppro_p0_unit_ready_cost,@function
ppro_p0_unit_ready_cost:                # @ppro_p0_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp359:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp360:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp361:
	.cfi_def_cfa_offset 32
.Ltmp362:
	.cfi_offset %rbx, -32
.Ltmp363:
	.cfi_offset %r14, -24
.Ltmp364:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB42_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB42_2:                               # %cond.end
	movq	$56, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB42_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB42_96
# BB#4:                                 # %sw.bb353
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB42_96
# BB#5:                                 # %land.lhs.true357
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB42_96
# BB#6:                                 # %if.then363
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.ppro_p0_unit_ready_cost, %rcx
	movq	$6971, %rdx             # imm = 0x1B3B
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB42_7:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$364, %rdx              # imm = 0x16C
	jg	.LBB42_26
# BB#8:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$248, %rdx
	jg	.LBB42_22
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$83, %rdx
	jg	.LBB42_20
# BB#10:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$45, %rax
	ja	.LBB42_96
# BB#11:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	jne	.LBB42_107
# BB#12:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rcx      # imm = 0x1200000000
	testq	%rcx, %rdx
	jne	.LBB42_122
# BB#13:                                # %cond.end
	cmpq	$45, %rax
	jne	.LBB42_96
# BB#14:                                # %sw.bb322
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB42_108
# BB#15:                                # %sw.bb322
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB42_108
# BB#16:                                # %land.lhs.true336
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB42_17
.LBB42_26:                              # %cond.end
	addq	$-365, %rax             # imm = 0xFFFFFFFFFFFFFE93
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$271, %rax              # imm = 0x10F
	ja	.LBB42_96
# BB#27:                                # %cond.end
	movq	$56, %r14
	jmpq	*.LJTI42_0(,%rax,8)
.LBB42_47:                              # %sw.bb41
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB42_39
.LBB42_22:                              # %cond.end
	addq	$-249, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$30, %rcx
	ja	.LBB42_96
# BB#23:                                # %cond.end
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$131071, %rdx           # imm = 0x1FFFF
	je	.LBB42_24
# BB#100:                               # %sw.bb232
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$4, %r14
	je	.LBB42_96
	jmp	.LBB42_108
.LBB42_20:                              # %cond.end
	addq	$-84, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$137, %rax
	ja	.LBB42_96
# BB#21:                                # %cond.end
	movq	$56, %r14
	jmpq	*.LJTI42_1(,%rax,8)
.LBB42_122:                             # %sw.bb343
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jmp	.LBB42_71
.LBB42_111:                             # %sw.bb275
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$3, %r14
	je	.LBB42_96
	jmp	.LBB42_108
.LBB42_24:                              # %cond.end
	shlq	%cl, %rax
	testq	$1764098048, %rax       # imm = 0x69260000
	je	.LBB42_96
# BB#25:                                # %sw.bb228
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$17, %r14
	je	.LBB42_96
	jmp	.LBB42_108
.LBB42_38:                              # %sw.bb28
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	jmp	.LBB42_39
.LBB42_50:                              # %sw.bb69
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB42_49:                              # %land.lhs.true56
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	jmp	.LBB42_39
.LBB42_117:                             # %sw.bb293
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	cmpq	$3, %rax
	sbbq	%rax, %rax
	cmpq	$3, %rcx
	je	.LBB42_115
# BB#118:
	movabsq	$0, %rcx
	testq	%rcx, %rax
	jmp	.LBB42_76
.LBB42_112:                             # %sw.bb279
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jmp	.LBB42_71
.LBB42_97:                              # %sw.bb217
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB42_99
# BB#98:                                # %sw.bb217
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB42_96
.LBB42_99:                              # %sw.bb210
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
.LBB42_71:                              # %sw.bb166
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB42_73
# BB#72:                                # %sw.bb166
	movq	%rdx, %rcx
.LBB42_73:                              # %sw.bb166
	movl	ix86_cpu(%rip), %esi
	cmpq	$3, %rsi
	jne	.LBB42_75
# BB#74:                                # %sw.bb166
	movq	%rdx, %rax
.LBB42_75:                              # %sw.bb166
	testq	%rax, %rcx
.LBB42_76:                              # %sw.bb166
	movq	$1, %r14
	jne	.LBB42_96
	jmp	.LBB42_108
.LBB42_53:                              # %sw.bb97
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB42_52:                              # %land.lhs.true84
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
.LBB42_39:                              # %sw.bb28
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB42_41
# BB#40:                                # %sw.bb28
	movl	ix86_cpu(%rip), %eax
	movq	$5, %r14
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB42_96
	jmp	.LBB42_41
.LBB42_34:                              # %sw.bb21
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	cmpq	$2, %rax
	sbbq	%rax, %rax
	cmpq	$3, %rcx
	jne	.LBB42_35
# BB#36:                                # %sw.bb21
	movabsq	$1, %rcx
	jmp	.LBB42_37
.LBB42_67:                              # %sw.bb153
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB42_69
# BB#68:                                # %sw.bb153
	movl	ix86_cpu(%rip), %eax
	movq	$5, %r14
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB42_96
.LBB42_69:                              # %if.else159
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB42_57
.LBB42_61:                              # %sw.bb136
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB42_108
# BB#62:                                # %land.lhs.true138
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB42_64
# BB#63:                                # %land.lhs.true138
	movl	ix86_cpu(%rip), %eax
	movq	$5, %r14
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB42_96
.LBB42_64:                              # %if.else144
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB42_108
# BB#65:                                # %land.lhs.true146
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB42_108
# BB#66:                                # %land.lhs.true146
	movl	ix86_cpu(%rip), %eax
	movq	$3, %r14
	jmp	.LBB42_89
.LBB42_33:                              # %sw.bb17
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$2, %r14
	je	.LBB42_96
	jmp	.LBB42_108
.LBB42_35:
	movabsq	$0, %rcx
.LBB42_37:                              # %sw.bb21
	testq	%rcx, %rax
	movq	$2, %r14
	jne	.LBB42_96
	jmp	.LBB42_108
.LBB42_90:                              # %sw.bb193
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	cmpq	$1, %rax
	jne	.LBB42_92
# BB#91:                                # %sw.bb193
	movq	$1, %r14
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$3, %rdx
	je	.LBB42_96
.LBB42_92:                              # %lor.lhs.false197
	testq	%rax, %rax
	jne	.LBB42_108
# BB#93:                                # %land.lhs.true199
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %r14
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB42_87
# BB#94:                                # %land.lhs.true206
	andq	%r15, %rcx
	jmp	.LBB42_95
.LBB42_86:                              # %sw.bb184
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %r14
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB42_95
.LBB42_87:                              # %lor.lhs.false186
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB42_108
# BB#88:                                # %lor.lhs.false186
	movl	ix86_cpu(%rip), %eax
	jmp	.LBB42_89
.LBB42_77:                              # %sw.bb173
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB42_79
# BB#78:                                # %sw.bb173
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB42_96
.LBB42_79:                              # %lor.lhs.false177
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB42_81
# BB#80:                                # %lor.lhs.false177
	movq	%rdx, %rcx
.LBB42_81:                              # %lor.lhs.false177
	movl	ix86_cpu(%rip), %esi
	cmpq	$3, %rsi
	jne	.LBB42_83
# BB#82:                                # %lor.lhs.false177
	movq	%rdx, %rax
.LBB42_83:                              # %lor.lhs.false177
	testq	%rax, %rcx
	movq	$1, %rax
	jne	.LBB42_85
# BB#84:                                # %lor.lhs.false177
	movq	$56, %rax
	jmp	.LBB42_85
.LBB42_70:                              # %sw.bb166
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$14, %rax
	jmp	.LBB42_71
.LBB42_58:                              # %sw.bb123
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB42_60
# BB#59:                                # %sw.bb123
	movl	ix86_cpu(%rip), %eax
	movq	$5, %r14
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB42_96
.LBB42_60:                              # %if.else129
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB42_57
.LBB42_54:                              # %sw.bb110
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB42_56
# BB#55:                                # %sw.bb110
	movl	ix86_cpu(%rip), %eax
	movq	$5, %r14
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB42_96
.LBB42_56:                              # %if.else116
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
.LBB42_57:                              # %if.else116
	callq	mult_operator
	testq	%r15, %rax
	jmp	.LBB42_42
.LBB42_51:                              # %sw.bb82
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB42_41
	jmp	.LBB42_52
.LBB42_48:                              # %sw.bb54
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB42_49
.LBB42_41:                              # %if.else34
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
.LBB42_42:                              # %if.else34
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB42_44
# BB#43:                                # %if.else34
	movq	%rdx, %rcx
.LBB42_44:                              # %if.else34
	movl	ix86_cpu(%rip), %esi
	cmpq	$3, %rsi
	jne	.LBB42_46
# BB#45:                                # %if.else34
	movq	%rdx, %rax
.LBB42_46:                              # %if.else34
	testq	%rax, %rcx
	movq	$3, %r14
	jne	.LBB42_96
	jmp	.LBB42_108
.LBB42_31:                              # %sw.bb8
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB42_108
# BB#32:                                # %land.lhs.true10
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB42_30
.LBB42_28:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB42_108
# BB#29:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB42_30:                              # %land.lhs.true
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB42_19
	jmp	.LBB42_108
.LBB42_119:                             # %sw.bb303
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB42_108
# BB#120:                               # %sw.bb303
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB42_108
# BB#121:                               # %land.lhs.true315
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
.LBB42_17:                              # %land.lhs.true336
	callq	symbolic_operand
	jmp	.LBB42_18
.LBB42_113:                             # %sw.bb285
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movl	ix86_cpu(%rip), %ecx
	cmpq	$2, %rax
	sbbq	%rax, %rax
	cmpq	$3, %rcx
	jne	.LBB42_114
.LBB42_115:                             # %sw.bb285
	movabsq	$1, %rcx
	testq	%rcx, %rax
	jmp	.LBB42_76
.LBB42_109:                             # %sw.bb266
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB42_107
# BB#110:                               # %lor.lhs.false268
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	jmp	.LBB42_18
.LBB42_106:                             # %sw.bb257
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB42_104
	jmp	.LBB42_107
.LBB42_103:                             # %sw.bb248
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB42_104
.LBB42_107:                             # %sw.bb349
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$1, %r14
	je	.LBB42_96
	jmp	.LBB42_108
.LBB42_102:                             # %sw.bb242
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jmp	.LBB42_71
.LBB42_101:                             # %sw.bb236
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jmp	.LBB42_71
.LBB42_104:                             # %lor.lhs.false250
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
.LBB42_18:                              # %land.lhs.true336
	testq	%r15, %rax
	je	.LBB42_108
.LBB42_19:                              # %land.lhs.true336
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r14
.LBB42_89:                              # %lor.lhs.false186
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB42_96
	jmp	.LBB42_108
.LBB42_95:                              # %land.lhs.true189
	cmpq	$3, %rcx
	jne	.LBB42_108
.LBB42_96:                              # %return
	movq	%r14, %rax
.LBB42_85:                              # %lor.lhs.false177
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB42_108:                             # %select.mid8
	movq	$56, %r14
	movq	%r14, %rax
	jmp	.LBB42_85
.LBB42_114:
	movabsq	$0, %rcx
	testq	%rcx, %rax
	jmp	.LBB42_76
.Ltmp365:
	.size	ppro_p0_unit_ready_cost, .Ltmp365-ppro_p0_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI42_0:
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_97
	.quad	.LBB42_99
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_107
	.quad	.LBB42_97
	.quad	.LBB42_90
	.quad	.LBB42_99
	.quad	.LBB42_86
	.quad	.LBB42_97
	.quad	.LBB42_99
	.quad	.LBB42_99
	.quad	.LBB42_77
	.quad	.LBB42_99
	.quad	.LBB42_99
	.quad	.LBB42_112
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_107
	.quad	.LBB42_112
	.quad	.LBB42_112
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_70
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_107
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_67
	.quad	.LBB42_61
	.quad	.LBB42_96
	.quad	.LBB42_67
	.quad	.LBB42_61
	.quad	.LBB42_96
	.quad	.LBB42_58
	.quad	.LBB42_54
	.quad	.LBB42_53
	.quad	.LBB42_51
	.quad	.LBB42_96
	.quad	.LBB42_53
	.quad	.LBB42_53
	.quad	.LBB42_50
	.quad	.LBB42_48
	.quad	.LBB42_96
	.quad	.LBB42_50
	.quad	.LBB42_50
	.quad	.LBB42_50
	.quad	.LBB42_50
	.quad	.LBB42_47
	.quad	.LBB42_38
	.quad	.LBB42_47
	.quad	.LBB42_38
	.quad	.LBB42_47
	.quad	.LBB42_38
	.quad	.LBB42_47
	.quad	.LBB42_38
	.quad	.LBB42_47
	.quad	.LBB42_38
	.quad	.LBB42_47
	.quad	.LBB42_38
	.quad	.LBB42_47
	.quad	.LBB42_38
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_107
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_34
	.quad	.LBB42_34
	.quad	.LBB42_34
	.quad	.LBB42_33
	.quad	.LBB42_33
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_31
	.quad	.LBB42_28
.LJTI42_1:
	.quad	.LBB42_119
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_117
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_117
	.quad	.LBB42_117
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_117
	.quad	.LBB42_117
	.quad	.LBB42_117
	.quad	.LBB42_117
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_113
	.quad	.LBB42_96
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_112
	.quad	.LBB42_107
	.quad	.LBB42_96
	.quad	.LBB42_122
	.quad	.LBB42_107
	.quad	.LBB42_122
	.quad	.LBB42_107
	.quad	.LBB42_122
	.quad	.LBB42_107
	.quad	.LBB42_122
	.quad	.LBB42_107
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_111
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_96
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_96
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_96
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_96
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_122
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_107
	.quad	.LBB42_109
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_106
	.quad	.LBB42_103
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_102
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_96
	.quad	.LBB42_101

	.text
	.globl	ppro_p0_unit_blockage_range
	.align	16, 0x90
	.type	ppro_p0_unit_blockage_range,@function
ppro_p0_unit_blockage_range:            # @ppro_p0_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp368:
	.cfi_def_cfa_offset 16
.Ltmp369:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB43_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB43_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB43_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB43_5
.LBB43_4:                               # %sw.default
	movq	$65553, %rax            # imm = 0x10011
	popq	%rbx
	retq
.LBB43_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.ppro_p0_unit_blockage_range, %rcx
	movq	$6988, %rdx             # imm = 0x1B4C
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp370:
	.size	ppro_p0_unit_blockage_range, .Ltmp370-ppro_p0_unit_blockage_range
	.cfi_endproc

	.globl	pent_v_unit_ready_cost
	.align	16, 0x90
	.type	pent_v_unit_ready_cost,@function
pent_v_unit_ready_cost:                 # @pent_v_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp373:
	.cfi_def_cfa_offset 16
.Ltmp374:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB44_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB44_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB44_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB44_5
.LBB44_4:                               # %sw.default
	movq	$1, %rax
	popq	%rbx
	retq
.LBB44_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_v_unit_ready_cost, %rcx
	movq	$7005, %rdx             # imm = 0x1B5D
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp375:
	.size	pent_v_unit_ready_cost, .Ltmp375-pent_v_unit_ready_cost
	.cfi_endproc

	.globl	pent_uv_unit_ready_cost
	.align	16, 0x90
	.type	pent_uv_unit_ready_cost,@function
pent_uv_unit_ready_cost:                # @pent_uv_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp382:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp383:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp384:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp385:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp386:
	.cfi_def_cfa_offset 48
.Ltmp387:
	.cfi_offset %rbx, -48
.Ltmp388:
	.cfi_offset %r12, -40
.Ltmp389:
	.cfi_offset %r13, -32
.Ltmp390:
	.cfi_offset %r14, -24
.Ltmp391:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB45_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB45_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$3, %rbx
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB45_816
# BB#3:                                 # %cond.end
	jmpq	*.LJTI45_0(,%rax,8)
.LBB45_565:                             # %sw.bb1500
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_568
# BB#566:                               # %land.lhs.true1503
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_568
# BB#567:                               # %land.lhs.true1503
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_568:                             # %lor.lhs.false1508
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_571
# BB#569:                               # %land.lhs.true1511
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_571
# BB#570:                               # %land.lhs.true1511
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_571:                             # %if.else1517
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_576
# BB#572:                               # %land.lhs.true1520
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_576
# BB#573:                               # %land.lhs.true1523
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_576
# BB#574:                               # %land.lhs.true1526
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_576
# BB#575:                               # %land.lhs.true1526
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_576:                             # %if.else1532
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_74:                              # %sw.bb143
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_78
# BB#75:                                # %land.lhs.true146
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_78
# BB#76:                                # %land.lhs.true149
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB45_78
# BB#77:                                # %land.lhs.true149
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_78:                              # %lor.lhs.false154
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_82
# BB#79:                                # %land.lhs.true157
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_82
# BB#80:                                # %land.lhs.true160
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB45_82
# BB#81:                                # %land.lhs.true160
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_82:                              # %if.else166
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_88
# BB#83:                                # %land.lhs.true169
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_88
# BB#84:                                # %land.lhs.true172
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_88
# BB#85:                                # %land.lhs.true175
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_88
# BB#86:                                # %land.lhs.true178
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB45_88
# BB#87:                                # %land.lhs.true178
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_88:                              # %if.else184
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_806:                             # %sw.bb2128
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_809
# BB#807:                               # %land.lhs.true2131
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_809
# BB#808:                               # %land.lhs.true2131
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_809:                             # %lor.lhs.false2136
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_812
# BB#810:                               # %land.lhs.true2139
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_812
# BB#811:                               # %land.lhs.true2139
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_812:                             # %if.else2145
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_786:                             # %sw.bb2099
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %rbx
	jne	.LBB45_788
# BB#787:                               # %sw.bb2099
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_788:                             # %lor.lhs.false2104
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB45_791
# BB#789:                               # %land.lhs.true2107
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_791
# BB#790:                               # %land.lhs.true2107
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_791:                             # %if.else2113
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_563:                             # %sw.bb1496
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$1, %rbx
	je	.LBB45_816
# BB#564:                               # %select.mid
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_232:                             # %sw.bb592
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_237
# BB#233:                               # %land.lhs.true595
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB45_237
# BB#234:                               # %land.lhs.true598
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB45_237
# BB#235:                               # %land.lhs.true601
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_237
# BB#236:                               # %land.lhs.true601
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_237:                             # %if.else607
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_244
# BB#238:                               # %land.lhs.true610
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB45_241
# BB#239:                               # %land.lhs.true613
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_241
# BB#240:                               # %land.lhs.true613
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_241:                             # %lor.lhs.false618
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB45_244
# BB#242:                               # %land.lhs.true621
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_244
# BB#243:                               # %land.lhs.true621
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_244:                             # %if.else627
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_249
# BB#245:                               # %land.lhs.true630
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB45_249
# BB#246:                               # %land.lhs.true633
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB45_249
# BB#247:                               # %land.lhs.true636
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_249
# BB#248:                               # %land.lhs.true636
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_249:                             # %if.else642
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_256
# BB#250:                               # %land.lhs.true645
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB45_253
# BB#251:                               # %land.lhs.true648
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_253
# BB#252:                               # %land.lhs.true648
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_253:                             # %lor.lhs.false653
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB45_256
# BB#254:                               # %land.lhs.true656
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_256
# BB#255:                               # %land.lhs.true656
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_256:                             # %if.else662
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_261
# BB#257:                               # %land.lhs.true665
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB45_261
# BB#258:                               # %land.lhs.true668
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB45_261
# BB#259:                               # %land.lhs.true671
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_261
# BB#260:                               # %land.lhs.true671
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_261:                             # %lor.lhs.false676
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_274
# BB#262:                               # %land.lhs.true679
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_274
# BB#263:                               # %land.lhs.true682
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_274
# BB#264:                               # %land.lhs.true685
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB45_267
# BB#265:                               # %land.lhs.true688
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_267
# BB#266:                               # %land.lhs.true688
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_267:                             # %lor.lhs.false693
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB45_270
# BB#268:                               # %land.lhs.true696
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_270
# BB#269:                               # %land.lhs.true696
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_270:                             # %lor.lhs.false701
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB45_274
# BB#271:                               # %land.lhs.true704
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB45_274
# BB#272:                               # %land.lhs.true707
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_274
# BB#273:                               # %land.lhs.true707
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_274:                             # %if.else713
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_799:                             # %sw.bb2121
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB45_801
# BB#800:                               # %sw.bb2121
	movq	%rcx, %rdx
.LBB45_801:                             # %sw.bb2121
	movl	ix86_cpu(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB45_803
# BB#802:                               # %sw.bb2121
	movq	%rcx, %rsi
.LBB45_803:                             # %sw.bb2121
	testq	%rsi, %rdx
	jne	.LBB45_805
# BB#804:                               # %sw.bb2121
	movq	%rcx, %rax
.LBB45_805:                             # %sw.bb2121
	leaq	1(%rax,%rax), %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_764:                             # %sw.bb2052
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB45_766
# BB#765:                               # %sw.bb2052
	movq	%rcx, %rdx
.LBB45_766:                             # %sw.bb2052
	movl	ix86_cpu(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB45_768
# BB#767:                               # %sw.bb2052
	movq	%rcx, %rsi
.LBB45_768:                             # %sw.bb2052
	testq	%rsi, %rdx
	jne	.LBB45_770
# BB#769:                               # %sw.bb2052
	movq	%rcx, %rax
.LBB45_770:                             # %sw.bb2052
	leaq	1(%rax,%rax), %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_64:                              # %sw.bb131
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB45_66
# BB#65:                                # %sw.bb131
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_66:                              # %lor.lhs.false136
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB45_68
# BB#67:                                # %lor.lhs.false136
	movq	%rcx, %rdx
.LBB45_68:                              # %lor.lhs.false136
	movl	ix86_cpu(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB45_70
# BB#69:                                # %lor.lhs.false136
	movq	%rcx, %rsi
.LBB45_70:                              # %lor.lhs.false136
	testq	%rsi, %rdx
	jne	.LBB45_72
# BB#71:                                # %lor.lhs.false136
	movq	%rcx, %rax
.LBB45_72:                              # %lor.lhs.false136
	leaq	1(%rax,%rax), %rax
	jmp	.LBB45_73
.LBB45_577:                             # %sw.bb1533
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$2, %rbx
	jne	.LBB45_579
# BB#578:                               # %sw.bb1533
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_579:                             # %lor.lhs.false1538
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_581
# BB#580:                               # %lor.lhs.false1538
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_581:                             # %if.else1544
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_585
# BB#582:                               # %land.lhs.true1547
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_585
# BB#583:                               # %land.lhs.true1550
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_585
# BB#584:                               # %land.lhs.true1550
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_585:                             # %if.else1556
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_473:                             # %sw.bb1238
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_477
# BB#474:                               # %land.lhs.true1241
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_477
# BB#475:                               # %land.lhs.true1244
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_477
# BB#476:                               # %land.lhs.true1244
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_477:                             # %if.else1250
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_481
# BB#478:                               # %land.lhs.true1253
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_481
# BB#479:                               # %land.lhs.true1256
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_481
# BB#480:                               # %land.lhs.true1256
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_481:                             # %if.else1262
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_485
# BB#482:                               # %land.lhs.true1265
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_485
# BB#483:                               # %land.lhs.true1268
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_485
# BB#484:                               # %land.lhs.true1268
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_485:                             # %if.else1274
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_489
# BB#486:                               # %land.lhs.true1277
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_489
# BB#487:                               # %land.lhs.true1280
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_489
# BB#488:                               # %land.lhs.true1280
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_489:                             # %if.else1286
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_493
# BB#490:                               # %land.lhs.true1289
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_493
# BB#491:                               # %land.lhs.true1292
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_493
# BB#492:                               # %land.lhs.true1292
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_493:                             # %lor.lhs.false1297
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_502
# BB#494:                               # %land.lhs.true1300
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_502
# BB#495:                               # %land.lhs.true1303
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_502
# BB#496:                               # %land.lhs.true1306
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_499
# BB#497:                               # %land.lhs.true1309
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_499
# BB#498:                               # %land.lhs.true1309
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_499:                             # %lor.lhs.false1314
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_502
# BB#500:                               # %land.lhs.true1317
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_502
# BB#501:                               # %land.lhs.true1317
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_502:                             # %if.else1323
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_406:                             # %sw.bb1052
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_410
# BB#407:                               # %land.lhs.true1055
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_410
# BB#408:                               # %land.lhs.true1058
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_410
# BB#409:                               # %land.lhs.true1058
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_410:                             # %if.else1064
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_414
# BB#411:                               # %land.lhs.true1067
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_414
# BB#412:                               # %land.lhs.true1070
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_414
# BB#413:                               # %land.lhs.true1070
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_414:                             # %if.else1076
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_418
# BB#415:                               # %land.lhs.true1079
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_418
# BB#416:                               # %land.lhs.true1082
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_418
# BB#417:                               # %land.lhs.true1082
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_418:                             # %if.else1088
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_422
# BB#419:                               # %land.lhs.true1091
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_422
# BB#420:                               # %land.lhs.true1094
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_422
# BB#421:                               # %land.lhs.true1094
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_422:                             # %if.else1100
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_426
# BB#423:                               # %land.lhs.true1103
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_426
# BB#424:                               # %land.lhs.true1106
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_426
# BB#425:                               # %land.lhs.true1106
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_426:                             # %lor.lhs.false1111
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_435
# BB#427:                               # %land.lhs.true1114
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_435
# BB#428:                               # %land.lhs.true1117
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_435
# BB#429:                               # %land.lhs.true1120
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_432
# BB#430:                               # %land.lhs.true1123
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_432
# BB#431:                               # %land.lhs.true1123
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_432:                             # %lor.lhs.false1128
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_435
# BB#433:                               # %land.lhs.true1131
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_435
# BB#434:                               # %land.lhs.true1131
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_435:                             # %if.else1137
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_339:                             # %sw.bb866
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_343
# BB#340:                               # %land.lhs.true869
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_343
# BB#341:                               # %land.lhs.true872
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_343
# BB#342:                               # %land.lhs.true872
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_343:                             # %if.else878
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_347
# BB#344:                               # %land.lhs.true881
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	movq	$2, %rbx
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_347
# BB#345:                               # %land.lhs.true884
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_347
# BB#346:                               # %land.lhs.true884
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_347:                             # %if.else890
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_351
# BB#348:                               # %land.lhs.true893
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_351
# BB#349:                               # %land.lhs.true896
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_351
# BB#350:                               # %land.lhs.true896
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_351:                             # %if.else902
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_355
# BB#352:                               # %land.lhs.true905
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	movq	$2, %rbx
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_355
# BB#353:                               # %land.lhs.true908
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_355
# BB#354:                               # %land.lhs.true908
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_355:                             # %if.else914
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_359
# BB#356:                               # %land.lhs.true917
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_359
# BB#357:                               # %land.lhs.true920
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_359
# BB#358:                               # %land.lhs.true920
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_359:                             # %lor.lhs.false925
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_368
# BB#360:                               # %land.lhs.true928
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_368
# BB#361:                               # %land.lhs.true931
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_368
# BB#362:                               # %land.lhs.true934
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_365
# BB#363:                               # %land.lhs.true937
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_365
# BB#364:                               # %land.lhs.true937
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_365:                             # %lor.lhs.false942
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_368
# BB#366:                               # %land.lhs.true945
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_368
# BB#367:                               # %land.lhs.true945
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_368:                             # %if.else951
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_4:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB45_6
# BB#5:                                 # %sw.bb
	movq	%rcx, %rdx
.LBB45_6:                               # %sw.bb
	movl	ix86_cpu(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB45_8
# BB#7:                                 # %sw.bb
	movq	%rcx, %rsi
.LBB45_8:                               # %sw.bb
	testq	%rsi, %rdx
	jne	.LBB45_10
# BB#9:                                 # %sw.bb
	movq	%rcx, %rax
.LBB45_10:                              # %sw.bb
	leaq	1(%rax,%rax), %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_730:                             # %sw.bb1960
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_733
# BB#731:                               # %land.lhs.true1963
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_733
# BB#732:                               # %land.lhs.true1963
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_733:                             # %lor.lhs.false1968
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_736
# BB#734:                               # %land.lhs.true1971
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_736
# BB#735:                               # %land.lhs.true1971
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_736:                             # %lor.lhs.false1976
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_739
# BB#737:                               # %land.lhs.true1979
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_739
# BB#738:                               # %land.lhs.true1979
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_739:                             # %lor.lhs.false1984
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_744
# BB#740:                               # %land.lhs.true1987
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_744
# BB#741:                               # %land.lhs.true1990
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_744
# BB#742:                               # %land.lhs.true1993
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_744
# BB#743:                               # %land.lhs.true1993
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_744:                             # %if.else1999
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_42:                              # %sw.bb84
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB45_44
# BB#43:                                # %sw.bb84
	movq	%rcx, %rdx
.LBB45_44:                              # %sw.bb84
	movl	ix86_cpu(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB45_46
# BB#45:                                # %sw.bb84
	movq	%rcx, %rsi
.LBB45_46:                              # %sw.bb84
	testq	%rsi, %rdx
	jne	.LBB45_48
# BB#47:                                # %sw.bb84
	movq	%rcx, %rax
.LBB45_48:                              # %sw.bb84
	leaq	1(%rax,%rax), %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_792:                             # %sw.bb2114
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB45_794
# BB#793:                               # %sw.bb2114
	movq	%rcx, %rdx
.LBB45_794:                             # %sw.bb2114
	movl	ix86_cpu(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB45_796
# BB#795:                               # %sw.bb2114
	movq	%rcx, %rsi
.LBB45_796:                             # %sw.bb2114
	testq	%rsi, %rdx
	jne	.LBB45_798
# BB#797:                               # %sw.bb2114
	movq	%rcx, %rax
.LBB45_798:                             # %sw.bb2114
	leaq	1(%rax,%rax), %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_745:                             # %sw.bb2000
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_749
# BB#746:                               # %land.lhs.true2003
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_749
# BB#747:                               # %land.lhs.true2006
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB45_749
# BB#748:                               # %land.lhs.true2006
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_749:                             # %lor.lhs.false2011
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_753
# BB#750:                               # %land.lhs.true2014
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_753
# BB#751:                               # %land.lhs.true2017
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB45_753
# BB#752:                               # %land.lhs.true2017
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_753:                             # %lor.lhs.false2022
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_757
# BB#754:                               # %land.lhs.true2025
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_757
# BB#755:                               # %land.lhs.true2028
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB45_757
# BB#756:                               # %land.lhs.true2028
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_757:                             # %lor.lhs.false2033
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_763
# BB#758:                               # %land.lhs.true2036
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_763
# BB#759:                               # %land.lhs.true2039
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_763
# BB#760:                               # %land.lhs.true2042
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_763
# BB#761:                               # %land.lhs.true2045
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB45_763
# BB#762:                               # %land.lhs.true2045
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_763:                             # %if.else2051
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_503:                             # %sw.bb1324
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_507
# BB#504:                               # %land.lhs.true1327
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_507
# BB#505:                               # %land.lhs.true1330
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_507
# BB#506:                               # %land.lhs.true1330
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_507:                             # %if.else1336
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_511
# BB#508:                               # %land.lhs.true1339
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_511
# BB#509:                               # %land.lhs.true1342
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_511
# BB#510:                               # %land.lhs.true1342
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_511:                             # %if.else1348
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_515
# BB#512:                               # %land.lhs.true1351
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_515
# BB#513:                               # %land.lhs.true1354
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_515
# BB#514:                               # %land.lhs.true1354
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_515:                             # %if.else1360
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_519
# BB#516:                               # %land.lhs.true1363
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_519
# BB#517:                               # %land.lhs.true1366
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_519
# BB#518:                               # %land.lhs.true1366
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_519:                             # %if.else1372
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_523
# BB#520:                               # %land.lhs.true1375
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_523
# BB#521:                               # %land.lhs.true1378
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_523
# BB#522:                               # %land.lhs.true1378
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_523:                             # %lor.lhs.false1383
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_532
# BB#524:                               # %land.lhs.true1386
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_532
# BB#525:                               # %land.lhs.true1389
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_532
# BB#526:                               # %land.lhs.true1392
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_529
# BB#527:                               # %land.lhs.true1395
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_529
# BB#528:                               # %land.lhs.true1395
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_529:                             # %lor.lhs.false1400
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_532
# BB#530:                               # %land.lhs.true1403
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_532
# BB#531:                               # %land.lhs.true1403
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_532:                             # %if.else1409
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_533:                             # %sw.bb1410
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_537
# BB#534:                               # %land.lhs.true1413
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB45_537
# BB#535:                               # %land.lhs.true1416
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_537
# BB#536:                               # %land.lhs.true1416
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_537:                             # %if.else1422
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_541
# BB#538:                               # %land.lhs.true1425
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB45_541
# BB#539:                               # %land.lhs.true1428
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_541
# BB#540:                               # %land.lhs.true1428
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_541:                             # %if.else1434
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_545
# BB#542:                               # %land.lhs.true1437
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB45_545
# BB#543:                               # %land.lhs.true1440
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_545
# BB#544:                               # %land.lhs.true1440
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_545:                             # %if.else1446
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_549
# BB#546:                               # %land.lhs.true1449
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB45_549
# BB#547:                               # %land.lhs.true1452
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_549
# BB#548:                               # %land.lhs.true1452
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_549:                             # %if.else1458
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_553
# BB#550:                               # %land.lhs.true1461
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB45_553
# BB#551:                               # %land.lhs.true1464
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_553
# BB#552:                               # %land.lhs.true1464
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_553:                             # %lor.lhs.false1469
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_562
# BB#554:                               # %land.lhs.true1472
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_562
# BB#555:                               # %land.lhs.true1475
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_562
# BB#556:                               # %land.lhs.true1478
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB45_559
# BB#557:                               # %land.lhs.true1481
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_559
# BB#558:                               # %land.lhs.true1481
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_559:                             # %lor.lhs.false1486
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB45_562
# BB#560:                               # %land.lhs.true1489
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_562
# BB#561:                               # %land.lhs.true1489
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_562:                             # %if.else1495
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_89:                              # %sw.bb185
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_94
# BB#90:                                # %land.lhs.true188
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_94
# BB#91:                                # %land.lhs.true188
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_94
# BB#92:                                # %land.lhs.true193
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB45_94
# BB#93:                                # %land.lhs.true193
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_94:                              # %lor.lhs.false198
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_99
# BB#95:                                # %land.lhs.true201
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_99
# BB#96:                                # %land.lhs.true201
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_99
# BB#97:                                # %land.lhs.true206
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB45_99
# BB#98:                                # %land.lhs.true206
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_99:                              # %if.else212
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_106
# BB#100:                               # %land.lhs.true215
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_106
# BB#101:                               # %land.lhs.true218
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_106
# BB#102:                               # %land.lhs.true221
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_106
# BB#103:                               # %land.lhs.true221
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_106
# BB#104:                               # %land.lhs.true226
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB45_106
# BB#105:                               # %land.lhs.true226
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_106:                             # %if.else232
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_771:                             # %sw.bb2059
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_774
# BB#772:                               # %land.lhs.true2062
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_774
# BB#773:                               # %land.lhs.true2062
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_774:                             # %lor.lhs.false2067
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_777
# BB#775:                               # %land.lhs.true2070
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_777
# BB#776:                               # %land.lhs.true2070
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_777:                             # %lor.lhs.false2075
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_780
# BB#778:                               # %land.lhs.true2078
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_780
# BB#779:                               # %land.lhs.true2078
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_780:                             # %lor.lhs.false2083
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_785
# BB#781:                               # %land.lhs.true2086
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_785
# BB#782:                               # %land.lhs.true2089
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_785
# BB#783:                               # %land.lhs.true2092
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_785
# BB#784:                               # %land.lhs.true2092
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_785:                             # %if.else2098
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_648:                             # %sw.bb1714
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB45_651
# BB#649:                               # %land.lhs.true1716
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB45_651
# BB#650:                               # %land.lhs.true1716
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_651:                             # %if.else1722
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_605:                             # %sw.bb1605
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %rbx
	jne	.LBB45_608
# BB#606:                               # %sw.bb1605
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_608
# BB#607:                               # %sw.bb1605
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_608:                             # %lor.lhs.false1612
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_611
# BB#609:                               # %lor.lhs.false1612
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_611
# BB#610:                               # %lor.lhs.false1612
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_611:                             # %lor.lhs.false1619
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_616
# BB#612:                               # %land.lhs.true1622
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_616
# BB#613:                               # %land.lhs.true1625
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_616
# BB#614:                               # %land.lhs.true1625
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_616
# BB#615:                               # %land.lhs.true1625
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_616:                             # %if.else1633
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_312:                             # %sw.bb830
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_315
# BB#313:                               # %sw.bb830
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_315
# BB#314:                               # %sw.bb830
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_315:                             # %lor.lhs.false837
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB45_317
# BB#316:                               # %lor.lhs.false837
	movq	%rcx, %rdx
.LBB45_317:                             # %lor.lhs.false837
	movl	which_alternative(%rip), %esi
	cmpq	$1, %rsi
	movq	%rax, %rsi
	je	.LBB45_319
# BB#318:                               # %lor.lhs.false837
	movq	%rcx, %rsi
.LBB45_319:                             # %lor.lhs.false837
	movl	ix86_cpu(%rip), %edi
	andq	%rsi, %rdx
	cmpq	$2, %rdi
	movq	%rax, %rsi
	jne	.LBB45_321
# BB#320:                               # %lor.lhs.false837
	movq	%rcx, %rsi
.LBB45_321:                             # %lor.lhs.false837
	testq	%rsi, %rdx
	jne	.LBB45_323
# BB#322:                               # %lor.lhs.false837
	movq	%rcx, %rax
.LBB45_323:                             # %lor.lhs.false837
	leaq	1(%rax,%rax), %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_275:                             # %sw.bb714
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_279
# BB#276:                               # %sw.bb714
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB45_279
# BB#277:                               # %land.lhs.true721
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_279
# BB#278:                               # %land.lhs.true721
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_279:                             # %lor.lhs.false726
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_283
# BB#280:                               # %lor.lhs.false726
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB45_283
# BB#281:                               # %land.lhs.true733
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_283
# BB#282:                               # %land.lhs.true733
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_283:                             # %if.else739
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_289
# BB#284:                               # %land.lhs.true742
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_289
# BB#285:                               # %land.lhs.true745
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_289
# BB#286:                               # %land.lhs.true745
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB45_289
# BB#287:                               # %land.lhs.true752
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_289
# BB#288:                               # %land.lhs.true752
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_289:                             # %if.else758
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_11:                              # %sw.bb6
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_15
# BB#12:                                # %sw.bb6
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_15
# BB#13:                                # %land.lhs.true11
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_15
# BB#14:                                # %land.lhs.true11
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_15:                              # %if.else17
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_19
# BB#16:                                # %if.else17
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB45_19
# BB#17:                                # %land.lhs.true22
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_19
# BB#18:                                # %land.lhs.true22
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_19:                              # %if.else28
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_23
# BB#20:                                # %if.else28
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_23
# BB#21:                                # %land.lhs.true33
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_23
# BB#22:                                # %land.lhs.true33
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_23:                              # %if.else39
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_27
# BB#24:                                # %if.else39
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB45_27
# BB#25:                                # %land.lhs.true44
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_27
# BB#26:                                # %land.lhs.true44
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_27:                              # %if.else50
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_31
# BB#28:                                # %if.else50
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_31
# BB#29:                                # %land.lhs.true55
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_31
# BB#30:                                # %land.lhs.true55
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_31:                              # %lor.lhs.false
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_41
# BB#32:                                # %land.lhs.true62
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_41
# BB#33:                                # %land.lhs.true65
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_41
# BB#34:                                # %land.lhs.true68
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_38
# BB#35:                                # %land.lhs.true70
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_37
# BB#36:                                # %land.lhs.true70
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_37:                              # %lor.lhs.false75thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB45_38:                              # %lor.lhs.false75
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_41
# BB#39:                                # %land.lhs.true77
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_41
# BB#40:                                # %land.lhs.true77
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_41:                              # %if.else83
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_813:                             # %sw.bb2146
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB45_815
# BB#814:
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_679:                             # %sw.bb1800
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_691
# BB#680:                               # %land.lhs.true1803
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_691
# BB#681:                               # %land.lhs.true1806
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB45_691
# BB#682:                               # %land.lhs.true1806
	cmpq	$3, %rax
	jne	.LBB45_685
# BB#683:                               # %land.lhs.true1808
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB45_690
# BB#684:                               # %lor.lhs.false1812
	movl	x86_qimode_math(%rip), %edx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB45_690
	jmp	.LBB45_691
.LBB45_656:                             # %sw.bb1732
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_661
# BB#657:                               # %land.lhs.true1735
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_661
# BB#658:                               # %land.lhs.true1738
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB45_661
# BB#659:                               # %land.lhs.true1741
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB45_661
# BB#660:                               # %land.lhs.true1741
	cmpq	$2, %rcx
	je	.LBB45_816
.LBB45_661:                             # %lor.lhs.false1747
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_666
# BB#662:                               # %land.lhs.true1750
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_666
# BB#663:                               # %land.lhs.true1753
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB45_666
# BB#664:                               # %land.lhs.true1756
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB45_666
# BB#665:                               # %land.lhs.true1756
	cmpq	$2, %rcx
	je	.LBB45_816
.LBB45_666:                             # %lor.lhs.false1762
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_671
# BB#667:                               # %land.lhs.true1765
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_671
# BB#668:                               # %land.lhs.true1768
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB45_671
# BB#669:                               # %land.lhs.true1771
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB45_671
# BB#670:                               # %land.lhs.true1771
	cmpq	$2, %rcx
	je	.LBB45_816
.LBB45_671:                             # %lor.lhs.false1777
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_678
# BB#672:                               # %land.lhs.true1780
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_678
# BB#673:                               # %land.lhs.true1783
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_678
# BB#674:                               # %land.lhs.true1786
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_678
# BB#675:                               # %land.lhs.true1789
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB45_678
# BB#676:                               # %land.lhs.true1792
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	jne	.LBB45_678
# BB#677:                               # %land.lhs.true1792
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_678:                             # %if.else1799
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_652:                             # %sw.bb1723
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_655
# BB#653:                               # %land.lhs.true1725
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB45_655
# BB#654:                               # %land.lhs.true1725
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_655:                             # %if.else1731
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_617:                             # %sw.bb1634
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_624
# BB#618:                               # %land.lhs.true1637
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_624
# BB#619:                               # %land.lhs.true1637
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	je	.LBB45_624
# BB#620:                               # %land.lhs.true1637
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	je	.LBB45_624
# BB#621:                               # %land.lhs.true1637
	cmpq	$2, %rcx
	je	.LBB45_624
# BB#622:                               # %land.lhs.true1646
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB45_624
# BB#623:                               # %land.lhs.true1646
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_624:                             # %lor.lhs.false1652
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_631
# BB#625:                               # %land.lhs.true1655
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_631
# BB#626:                               # %land.lhs.true1655
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	je	.LBB45_631
# BB#627:                               # %land.lhs.true1655
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	je	.LBB45_631
# BB#628:                               # %land.lhs.true1655
	cmpq	$2, %rcx
	je	.LBB45_631
# BB#629:                               # %land.lhs.true1664
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB45_631
# BB#630:                               # %land.lhs.true1664
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_631:                             # %lor.lhs.false1670
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_638
# BB#632:                               # %land.lhs.true1673
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_638
# BB#633:                               # %land.lhs.true1673
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	je	.LBB45_638
# BB#634:                               # %land.lhs.true1673
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	je	.LBB45_638
# BB#635:                               # %land.lhs.true1673
	cmpq	$2, %rcx
	je	.LBB45_638
# BB#636:                               # %land.lhs.true1682
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB45_638
# BB#637:                               # %land.lhs.true1682
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_638:                             # %lor.lhs.false1688
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_647
# BB#639:                               # %land.lhs.true1691
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_647
# BB#640:                               # %land.lhs.true1694
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_647
# BB#641:                               # %land.lhs.true1697
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_647
# BB#642:                               # %land.lhs.true1697
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	je	.LBB45_647
# BB#643:                               # %land.lhs.true1697
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	je	.LBB45_647
# BB#644:                               # %land.lhs.true1697
	cmpq	$2, %rcx
	je	.LBB45_647
# BB#645:                               # %land.lhs.true1706
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB45_647
# BB#646:                               # %land.lhs.true1706
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_647:                             # %if.else1713
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_586:                             # %sw.bb1557
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_590
# BB#587:                               # %sw.bb1557
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_590
# BB#588:                               # %land.lhs.true1562
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_590
# BB#589:                               # %land.lhs.true1562
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_590:                             # %lor.lhs.false1567
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_594
# BB#591:                               # %lor.lhs.false1567
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_594
# BB#592:                               # %land.lhs.true1572
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_594
# BB#593:                               # %land.lhs.true1572
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_594:                             # %lor.lhs.false1577
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_598
# BB#595:                               # %lor.lhs.false1577
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_598
# BB#596:                               # %land.lhs.true1582
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_598
# BB#597:                               # %land.lhs.true1582
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_598:                             # %lor.lhs.false1587
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_604
# BB#599:                               # %land.lhs.true1590
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_604
# BB#600:                               # %land.lhs.true1593
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_604
# BB#601:                               # %land.lhs.true1593
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_604
# BB#602:                               # %land.lhs.true1598
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_604
# BB#603:                               # %land.lhs.true1598
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_604:                             # %if.else1604
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_436:                             # %sw.bb1138
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_441
# BB#437:                               # %land.lhs.true1141
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB45_439
# BB#438:                               # %lor.lhs.false1143
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_441
.LBB45_439:                             # %land.lhs.true1146
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_441
# BB#440:                               # %land.lhs.true1146
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_441:                             # %if.else1152
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_446
# BB#442:                               # %if.else1152
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_446
# BB#443:                               # %land.lhs.true1157
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_446
# BB#444:                               # %land.lhs.true1160
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_446
# BB#445:                               # %land.lhs.true1160
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_446:                             # %if.else1166
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_451
# BB#447:                               # %land.lhs.true1169
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB45_449
# BB#448:                               # %lor.lhs.false1171
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_451
.LBB45_449:                             # %land.lhs.true1174
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_451
# BB#450:                               # %land.lhs.true1174
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_451:                             # %if.else1180
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_456
# BB#452:                               # %if.else1180
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_456
# BB#453:                               # %land.lhs.true1185
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_456
# BB#454:                               # %land.lhs.true1188
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_456
# BB#455:                               # %land.lhs.true1188
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_456:                             # %if.else1194
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_461
# BB#457:                               # %land.lhs.true1197
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB45_459
# BB#458:                               # %lor.lhs.false1199
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_461
.LBB45_459:                             # %land.lhs.true1202
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_461
# BB#460:                               # %land.lhs.true1202
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_461:                             # %lor.lhs.false1207
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_472
# BB#462:                               # %land.lhs.true1210
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_472
# BB#463:                               # %land.lhs.true1213
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_472
# BB#464:                               # %land.lhs.true1216
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB45_470
# BB#465:                               # %land.lhs.true1218
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_468
# BB#466:                               # %land.lhs.true1221
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_468
# BB#467:                               # %land.lhs.true1221
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_468:                             # %lor.lhs.false1226
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB45_470
# BB#469:                               # %lor.lhs.false1228
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_472
.LBB45_470:                             # %land.lhs.true1231
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_472
# BB#471:                               # %land.lhs.true1231
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_472:                             # %if.else1237
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_369:                             # %sw.bb952
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_374
# BB#370:                               # %land.lhs.true955
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB45_372
# BB#371:                               # %lor.lhs.false957
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_374
.LBB45_372:                             # %land.lhs.true960
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_374
# BB#373:                               # %land.lhs.true960
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_374:                             # %if.else966
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_379
# BB#375:                               # %if.else966
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_379
# BB#376:                               # %land.lhs.true971
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	movq	$2, %rbx
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_379
# BB#377:                               # %land.lhs.true974
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_379
# BB#378:                               # %land.lhs.true974
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_379:                             # %if.else980
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_384
# BB#380:                               # %land.lhs.true983
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB45_382
# BB#381:                               # %lor.lhs.false985
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_384
.LBB45_382:                             # %land.lhs.true988
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_384
# BB#383:                               # %land.lhs.true988
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_384:                             # %if.else994
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_389
# BB#385:                               # %if.else994
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_389
# BB#386:                               # %land.lhs.true999
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	movq	$2, %rbx
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_389
# BB#387:                               # %land.lhs.true1002
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_389
# BB#388:                               # %land.lhs.true1002
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_389:                             # %if.else1008
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_394
# BB#390:                               # %land.lhs.true1011
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB45_392
# BB#391:                               # %lor.lhs.false1013
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_394
.LBB45_392:                             # %land.lhs.true1016
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_394
# BB#393:                               # %land.lhs.true1016
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_394:                             # %lor.lhs.false1021
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_405
# BB#395:                               # %land.lhs.true1024
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_405
# BB#396:                               # %land.lhs.true1027
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_405
# BB#397:                               # %land.lhs.true1030
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB45_403
# BB#398:                               # %land.lhs.true1032
	movq	recog_data+16(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB45_401
# BB#399:                               # %land.lhs.true1035
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_401
# BB#400:                               # %land.lhs.true1035
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_401:                             # %lor.lhs.false1040
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB45_403
# BB#402:                               # %lor.lhs.false1042
	movq	recog_data+16(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB45_405
.LBB45_403:                             # %land.lhs.true1045
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_405
# BB#404:                               # %land.lhs.true1045
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_405:                             # %if.else1051
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_324:                             # %sw.bb846
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_328
# BB#325:                               # %sw.bb846
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_328
# BB#326:                               # %sw.bb846
	cmpq	$3, %rax
	je	.LBB45_328
# BB#327:                               # %sw.bb846
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_328:                             # %lor.lhs.false855
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB45_330
# BB#329:                               # %lor.lhs.false855
	movq	%rcx, %rdx
.LBB45_330:                             # %lor.lhs.false855
	movl	which_alternative(%rip), %esi
	cmpq	$1, %rsi
	movq	%rax, %rdi
	je	.LBB45_332
# BB#331:                               # %lor.lhs.false855
	movq	%rcx, %rdi
.LBB45_332:                             # %lor.lhs.false855
	andq	%rdi, %rdx
	cmpq	$3, %rsi
	movq	%rax, %rsi
	je	.LBB45_334
# BB#333:                               # %lor.lhs.false855
	movq	%rcx, %rsi
.LBB45_334:                             # %lor.lhs.false855
	movl	ix86_cpu(%rip), %edi
	andq	%rsi, %rdx
	cmpq	$2, %rdi
	movq	%rax, %rsi
	jne	.LBB45_336
# BB#335:                               # %lor.lhs.false855
	movq	%rcx, %rsi
.LBB45_336:                             # %lor.lhs.false855
	testq	%rsi, %rdx
	jne	.LBB45_338
# BB#337:                               # %lor.lhs.false855
	movq	%rcx, %rax
.LBB45_338:                             # %lor.lhs.false855
	leaq	1(%rax,%rax), %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_305:                             # %sw.bb810
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_308
# BB#306:                               # %land.lhs.true813
	movl	which_alternative(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	testq	%rcx, %rax
	jne	.LBB45_308
# BB#307:                               # %land.lhs.true813
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_308:                             # %lor.lhs.false819
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_311
# BB#309:                               # %land.lhs.true822
	movl	which_alternative(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	testq	%rcx, %rax
	jne	.LBB45_311
# BB#310:                               # %land.lhs.true822
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_311:                             # %if.else829
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_290:                             # %sw.bb759
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_294
# BB#291:                               # %sw.bb759
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB45_294
# BB#292:                               # %land.lhs.true768
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_294
# BB#293:                               # %land.lhs.true768
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_294:                             # %lor.lhs.false773
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_298
# BB#295:                               # %lor.lhs.false773
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB45_298
# BB#296:                               # %land.lhs.true782
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_298
# BB#297:                               # %land.lhs.true782
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_298:                             # %if.else788
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_304
# BB#299:                               # %land.lhs.true791
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_304
# BB#300:                               # %land.lhs.true794
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_304
# BB#301:                               # %land.lhs.true794
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB45_304
# BB#302:                               # %land.lhs.true803
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_304
# BB#303:                               # %land.lhs.true803
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_304:                             # %if.else809
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_161:                             # %sw.bb386
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_170
# BB#162:                               # %land.lhs.true389
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_168
# BB#163:                               # %lor.lhs.false391
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB45_170
# BB#164:                               # %land.lhs.true395
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_170
# BB#165:                               # %land.lhs.true398
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_168
# BB#166:                               # %lor.lhs.false400
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r15, %rdx
	je	.LBB45_168
# BB#167:                               # %lor.lhs.false404
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_170
.LBB45_168:                             # %land.lhs.true407
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_170
# BB#169:                               # %land.lhs.true407
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_170:                             # %if.else413
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_181
# BB#171:                               # %if.else413
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB45_181
# BB#172:                               # %land.lhs.true418
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_174
# BB#173:                               # %lor.lhs.false422
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_176
.LBB45_174:                             # %land.lhs.true425
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_176
# BB#175:                               # %land.lhs.true425
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_176:                             # %lor.lhs.false430
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_181
# BB#177:                               # %land.lhs.true432
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_181
# BB#178:                               # %land.lhs.true436
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_181
# BB#179:                               # %land.lhs.true439
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_181
# BB#180:                               # %land.lhs.true439
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_181:                             # %if.else445
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_190
# BB#182:                               # %land.lhs.true448
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_188
# BB#183:                               # %lor.lhs.false450
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB45_190
# BB#184:                               # %land.lhs.true454
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_190
# BB#185:                               # %land.lhs.true457
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_188
# BB#186:                               # %lor.lhs.false459
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r15, %rdx
	je	.LBB45_188
# BB#187:                               # %lor.lhs.false463
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_190
.LBB45_188:                             # %land.lhs.true466
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_190
# BB#189:                               # %land.lhs.true466
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_190:                             # %if.else472
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_201
# BB#191:                               # %if.else472
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB45_201
# BB#192:                               # %land.lhs.true477
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_194
# BB#193:                               # %lor.lhs.false481
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_196
.LBB45_194:                             # %land.lhs.true484
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_196
# BB#195:                               # %land.lhs.true484
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_196:                             # %lor.lhs.false489
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_201
# BB#197:                               # %land.lhs.true491
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB45_201
# BB#198:                               # %land.lhs.true495
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_201
# BB#199:                               # %land.lhs.true498
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_201
# BB#200:                               # %land.lhs.true498
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_201:                             # %if.else504
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_210
# BB#202:                               # %land.lhs.true507
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_208
# BB#203:                               # %lor.lhs.false509
	movl	ix86_cpu(%rip), %eax
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r15, %rdx
	je	.LBB45_210
# BB#204:                               # %land.lhs.true513
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_210
# BB#205:                               # %land.lhs.true516
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_208
# BB#206:                               # %lor.lhs.false518
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r15, %rdx
	je	.LBB45_208
# BB#207:                               # %lor.lhs.false522
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_210
.LBB45_208:                             # %land.lhs.true525
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_210
# BB#209:                               # %land.lhs.true525
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_210:                             # %lor.lhs.false530
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_231
# BB#211:                               # %land.lhs.true533
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_231
# BB#212:                               # %land.lhs.true536
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_231
# BB#213:                               # %land.lhs.true539
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_229
# BB#214:                               # %land.lhs.true541
	movl	ix86_cpu(%rip), %eax
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB45_216
# BB#215:                               # %lor.lhs.false545
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_218
.LBB45_216:                             # %land.lhs.true548
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_218
# BB#217:                               # %land.lhs.true548
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_218:                             # %lor.lhs.false553
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_229
# BB#219:                               # %land.lhs.true555
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB45_223
# BB#220:                               # %land.lhs.true559
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_223
# BB#221:                               # %land.lhs.true562
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_223
# BB#222:                               # %land.lhs.true562
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_223:                             # %lor.lhs.false567
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_229
# BB#224:                               # %lor.lhs.false569
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB45_231
# BB#225:                               # %land.lhs.true573
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_231
# BB#226:                               # %land.lhs.true576
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB45_229
# BB#227:                               # %lor.lhs.false578
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB45_229
# BB#228:                               # %lor.lhs.false582
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_231
.LBB45_229:                             # %land.lhs.true585
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_231
# BB#230:                               # %land.lhs.true585
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_231:                             # %if.else591
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_107:                             # %sw.bb233
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_114
# BB#108:                               # %land.lhs.true236
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_114
# BB#109:                               # %land.lhs.true238
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_114
# BB#110:                               # %land.lhs.true241
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_112
# BB#111:                               # %lor.lhs.false245
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_114
.LBB45_112:                             # %land.lhs.true248
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_114
# BB#113:                               # %land.lhs.true248
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_114:                             # %if.else254
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_124
# BB#115:                               # %land.lhs.true257
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_118
# BB#116:                               # %lor.lhs.false261
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_118
# BB#117:                               # %lor.lhs.false261.lor.lhs.false269_crit_edge
	movl	ix86_cpu(%rip), %ecx
	jmp	.LBB45_120
.LBB45_49:                              # %sw.bb91
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB45_52
# BB#50:                                # %land.lhs.true94
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$14, %rax
	jne	.LBB45_52
# BB#51:                                # %land.lhs.true94
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_52:                              # %lor.lhs.false99
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_55
# BB#53:                                # %land.lhs.true102
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$14, %rax
	jne	.LBB45_55
# BB#54:                                # %land.lhs.true102
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_55:                              # %lor.lhs.false107
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_58
# BB#56:                                # %land.lhs.true110
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$14, %rax
	jne	.LBB45_58
# BB#57:                                # %land.lhs.true110
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_58:                              # %lor.lhs.false115
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_63
# BB#59:                                # %land.lhs.true118
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_63
# BB#60:                                # %land.lhs.true121
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_63
# BB#61:                                # %land.lhs.true124
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$14, %rax
	jne	.LBB45_63
# BB#62:                                # %land.lhs.true124
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_63:                              # %if.else130
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_815:                             # %land.lhs.true2150
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$3, %rbx
	jns	.LBB45_816
# BB#817:                               # %if.then2156
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_uv_unit_ready_cost, %rcx
	movq	$7902, %rdx             # imm = 0x1EDE
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB45_118:                             # %land.lhs.true264
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_120
# BB#119:                               # %land.lhs.true264
	movq	$2, %rbx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_120:                             # %lor.lhs.false269
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_124
# BB#121:                               # %land.lhs.true273
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_124
# BB#122:                               # %land.lhs.true276
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_124
# BB#123:                               # %land.lhs.true276
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_124:                             # %if.else282
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_134
# BB#125:                               # %land.lhs.true285
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_128
# BB#126:                               # %lor.lhs.false289
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_128
# BB#127:                               # %lor.lhs.false289.lor.lhs.false297_crit_edge
	movl	ix86_cpu(%rip), %ecx
	jmp	.LBB45_130
.LBB45_128:                             # %land.lhs.true292
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_130
# BB#129:                               # %land.lhs.true292
	movq	$2, %rbx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_130:                             # %lor.lhs.false297
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_134
# BB#131:                               # %land.lhs.true301
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_134
# BB#132:                               # %land.lhs.true304
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_134
# BB#133:                               # %land.lhs.true304
	movl	ix86_cpu(%rip), %eax
	movq	$2, %rbx
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_134:                             # %if.else310
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_141
# BB#135:                               # %land.lhs.true313
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_141
# BB#136:                               # %land.lhs.true317
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_141
# BB#137:                               # %land.lhs.true320
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB45_139
# BB#138:                               # %lor.lhs.false324
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_141
.LBB45_139:                             # %land.lhs.true327
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_141
# BB#140:                               # %land.lhs.true327
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_141:                             # %lor.lhs.false332
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_160
# BB#142:                               # %land.lhs.true335
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_160
# BB#143:                               # %land.lhs.true338
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_160
# BB#144:                               # %land.lhs.true341
	movl	ix86_cpu(%rip), %eax
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB45_147
# BB#145:                               # %lor.lhs.false345
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_147
# BB#146:                               # %lor.lhs.false345.lor.lhs.false353_crit_edge
	movl	ix86_cpu(%rip), %ecx
	jmp	.LBB45_149
.LBB45_685:                             # %land.lhs.true1830
	movl	x86_movx(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	movabsq	$0, %rdx
	movabsq	$1, %rdi
	movq	%rdx, %rsi
	jne	.LBB45_687
# BB#686:                               # %land.lhs.true1830
	movq	%rdi, %rsi
.LBB45_687:                             # %land.lhs.true1830
	cmpq	$2, %rax
	je	.LBB45_689
# BB#688:                               # %land.lhs.true1830
	movq	%rdi, %rdx
.LBB45_689:                             # %land.lhs.true1830
	orq	%rdx, %rsi
	je	.LBB45_691
.LBB45_690:                             # %land.lhs.true1836
	cmpq	$2, %rcx
	je	.LBB45_816
.LBB45_691:                             # %lor.lhs.false1838
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_703
# BB#692:                               # %land.lhs.true1841
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_703
# BB#693:                               # %land.lhs.true1844
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB45_703
# BB#694:                               # %land.lhs.true1844
	cmpq	$3, %rax
	jne	.LBB45_697
# BB#695:                               # %land.lhs.true1846
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB45_702
# BB#696:                               # %lor.lhs.false1850
	movl	x86_qimode_math(%rip), %edx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB45_702
	jmp	.LBB45_703
.LBB45_697:                             # %land.lhs.true1868
	movl	x86_movx(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	movabsq	$0, %rdx
	movabsq	$1, %rdi
	movq	%rdx, %rsi
	jne	.LBB45_699
# BB#698:                               # %land.lhs.true1868
	movq	%rdi, %rsi
.LBB45_699:                             # %land.lhs.true1868
	cmpq	$2, %rax
	je	.LBB45_701
# BB#700:                               # %land.lhs.true1868
	movq	%rdi, %rdx
.LBB45_701:                             # %land.lhs.true1868
	orq	%rdx, %rsi
	je	.LBB45_703
.LBB45_702:                             # %land.lhs.true1874
	cmpq	$2, %rcx
	je	.LBB45_816
.LBB45_703:                             # %lor.lhs.false1876
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB45_715
# BB#704:                               # %land.lhs.true1879
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_715
# BB#705:                               # %land.lhs.true1882
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB45_715
# BB#706:                               # %land.lhs.true1882
	cmpq	$3, %rax
	jne	.LBB45_709
# BB#707:                               # %land.lhs.true1884
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB45_714
# BB#708:                               # %lor.lhs.false1888
	movl	x86_qimode_math(%rip), %edx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB45_714
	jmp	.LBB45_715
.LBB45_709:                             # %land.lhs.true1906
	movl	x86_movx(%rip), %edx
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	movabsq	$0, %rdx
	movabsq	$1, %rdi
	movq	%rdx, %rsi
	jne	.LBB45_711
# BB#710:                               # %land.lhs.true1906
	movq	%rdi, %rsi
.LBB45_711:                             # %land.lhs.true1906
	cmpq	$2, %rax
	je	.LBB45_713
# BB#712:                               # %land.lhs.true1906
	movq	%rdi, %rdx
.LBB45_713:                             # %land.lhs.true1906
	orq	%rdx, %rsi
	je	.LBB45_715
.LBB45_714:                             # %land.lhs.true1912
	cmpq	$2, %rcx
	je	.LBB45_816
.LBB45_715:                             # %lor.lhs.false1914
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_729
# BB#716:                               # %land.lhs.true1917
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_729
# BB#717:                               # %land.lhs.true1920
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_729
# BB#718:                               # %land.lhs.true1923
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB45_729
# BB#719:                               # %land.lhs.true1926
	movl	which_alternative(%rip), %edx
	cmpq	$5, %rdx
	je	.LBB45_729
# BB#720:                               # %land.lhs.true1926
	cmpq	$3, %rdx
	jne	.LBB45_723
# BB#721:                               # %land.lhs.true1928
	movl	ix86_cpu(%rip), %eax
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB45_728
# BB#722:                               # %lor.lhs.false1932
	movl	x86_qimode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB45_728
	jmp	.LBB45_729
.LBB45_147:                             # %land.lhs.true348
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_149
# BB#148:                               # %land.lhs.true348
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_149:                             # %lor.lhs.false353
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB45_154
# BB#150:                               # %land.lhs.true357
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_151
# BB#152:                               # %land.lhs.true360
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_154
# BB#153:                               # %land.lhs.true360
	movq	$1, %rbx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB45_816
	jmp	.LBB45_154
.LBB45_723:                             # %land.lhs.true1950
	movl	x86_movx(%rip), %esi
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	andq	%rsi, %rdi
	testq	%r15, %rdi
	movabsq	$0, %rcx
	movabsq	$1, %rdi
	movq	%rcx, %rsi
	jne	.LBB45_725
# BB#724:                               # %land.lhs.true1950
	movq	%rdi, %rsi
.LBB45_725:                             # %land.lhs.true1950
	cmpq	$2, %rdx
	je	.LBB45_727
# BB#726:                               # %land.lhs.true1950
	movq	%rdi, %rcx
.LBB45_727:                             # %land.lhs.true1950
	orq	%rcx, %rsi
	je	.LBB45_729
.LBB45_728:                             # %land.lhs.true1956
	cmpq	$2, %rax
	je	.LBB45_816
.LBB45_729:                             # %if.else1959
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.LBB45_151:                             # %land.lhs.true357.lor.lhs.false365_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB45_154:                             # %lor.lhs.false365
	shlq	%cl, %r13
	andq	%r12, %r13
	testq	%r15, %r13
	je	.LBB45_160
# BB#155:                               # %land.lhs.true369
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB45_160
# BB#156:                               # %land.lhs.true372
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB45_158
# BB#157:                               # %lor.lhs.false376
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB45_160
.LBB45_158:                             # %land.lhs.true379
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB45_160
# BB#159:                               # %land.lhs.true379
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB45_160
.LBB45_816:                             # %return
	movq	%rbx, %rax
.LBB45_73:                              # %lor.lhs.false136
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB45_160:                             # %if.else385
	movq	$3, %rbx
	movq	%rbx, %rax
	jmp	.LBB45_73
.Ltmp392:
	.size	pent_uv_unit_ready_cost, .Ltmp392-pent_uv_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI45_0:
	.quad	.LBB45_813
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_799
	.quad	.LBB45_799
	.quad	.LBB45_799
	.quad	.LBB45_792
	.quad	.LBB45_792
	.quad	.LBB45_786
	.quad	.LBB45_786
	.quad	.LBB45_771
	.quad	.LBB45_764
	.quad	.LBB45_764
	.quad	.LBB45_816
	.quad	.LBB45_799
	.quad	.LBB45_799
	.quad	.LBB45_745
	.quad	.LBB45_764
	.quad	.LBB45_764
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_730
	.quad	.LBB45_786
	.quad	.LBB45_799
	.quad	.LBB45_799
	.quad	.LBB45_679
	.quad	.LBB45_816
	.quad	.LBB45_730
	.quad	.LBB45_786
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_745
	.quad	.LBB45_745
	.quad	.LBB45_764
	.quad	.LBB45_764
	.quad	.LBB45_816
	.quad	.LBB45_745
	.quad	.LBB45_656
	.quad	.LBB45_730
	.quad	.LBB45_730
	.quad	.LBB45_730
	.quad	.LBB45_816
	.quad	.LBB45_652
	.quad	.LBB45_799
	.quad	.LBB45_792
	.quad	.LBB45_792
	.quad	.LBB45_786
	.quad	.LBB45_786
	.quad	.LBB45_816
	.quad	.LBB45_771
	.quad	.LBB45_764
	.quad	.LBB45_764
	.quad	.LBB45_816
	.quad	.LBB45_648
	.quad	.LBB45_648
	.quad	.LBB45_617
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_786
	.quad	.LBB45_816
	.quad	.LBB45_786
	.quad	.LBB45_605
	.quad	.LBB45_816
	.quad	.LBB45_786
	.quad	.LBB45_605
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_586
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_577
	.quad	.LBB45_565
	.quad	.LBB45_577
	.quad	.LBB45_577
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_563
	.quad	.LBB45_563
	.quad	.LBB45_563
	.quad	.LBB45_563
	.quad	.LBB45_563
	.quad	.LBB45_563
	.quad	.LBB45_563
	.quad	.LBB45_563
	.quad	.LBB45_563
	.quad	.LBB45_563
	.quad	.LBB45_533
	.quad	.LBB45_503
	.quad	.LBB45_503
	.quad	.LBB45_503
	.quad	.LBB45_503
	.quad	.LBB45_533
	.quad	.LBB45_533
	.quad	.LBB45_473
	.quad	.LBB45_473
	.quad	.LBB45_473
	.quad	.LBB45_473
	.quad	.LBB45_473
	.quad	.LBB45_473
	.quad	.LBB45_436
	.quad	.LBB45_406
	.quad	.LBB45_406
	.quad	.LBB45_406
	.quad	.LBB45_406
	.quad	.LBB45_406
	.quad	.LBB45_369
	.quad	.LBB45_339
	.quad	.LBB45_339
	.quad	.LBB45_339
	.quad	.LBB45_406
	.quad	.LBB45_339
	.quad	.LBB45_339
	.quad	.LBB45_339
	.quad	.LBB45_565
	.quad	.LBB45_816
	.quad	.LBB45_577
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_577
	.quad	.LBB45_577
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_324
	.quad	.LBB45_312
	.quad	.LBB45_312
	.quad	.LBB45_305
	.quad	.LBB45_816
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_806
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_290
	.quad	.LBB45_565
	.quad	.LBB45_275
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_275
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_786
	.quad	.LBB45_565
	.quad	.LBB45_786
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_786
	.quad	.LBB45_565
	.quad	.LBB45_786
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_565
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_786
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_786
	.quad	.LBB45_786
	.quad	.LBB45_816
	.quad	.LBB45_786
	.quad	.LBB45_816
	.quad	.LBB45_786
	.quad	.LBB45_232
	.quad	.LBB45_232
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_232
	.quad	.LBB45_161
	.quad	.LBB45_232
	.quad	.LBB45_107
	.quad	.LBB45_232
	.quad	.LBB45_232
	.quad	.LBB45_232
	.quad	.LBB45_232
	.quad	.LBB45_232
	.quad	.LBB45_232
	.quad	.LBB45_89
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_89
	.quad	.LBB45_89
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_74
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_64
	.quad	.LBB45_64
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_64
	.quad	.LBB45_64
	.quad	.LBB45_64
	.quad	.LBB45_64
	.quad	.LBB45_64
	.quad	.LBB45_49
	.quad	.LBB45_42
	.quad	.LBB45_42
	.quad	.LBB45_42
	.quad	.LBB45_42
	.quad	.LBB45_42
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_64
	.quad	.LBB45_816
	.quad	.LBB45_565
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_563
	.quad	.LBB45_816
	.quad	.LBB45_563
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_11
	.quad	.LBB45_11
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_816
	.quad	.LBB45_4
	.quad	.LBB45_4
	.quad	.LBB45_4
	.quad	.LBB45_4
	.quad	.LBB45_4
	.quad	.LBB45_4

	.text
	.globl	pent_uv_unit_blockage_range
	.align	16, 0x90
	.type	pent_uv_unit_blockage_range,@function
pent_uv_unit_blockage_range:            # @pent_uv_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp395:
	.cfi_def_cfa_offset 16
.Ltmp396:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB46_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB46_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB46_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB46_5
.LBB46_4:                               # %sw.default
	movq	$65539, %rax            # imm = 0x10003
	popq	%rbx
	retq
.LBB46_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_uv_unit_blockage_range, %rcx
	movq	$7919, %rdx             # imm = 0x1EEF
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp397:
	.size	pent_uv_unit_blockage_range, .Ltmp397-pent_uv_unit_blockage_range
	.cfi_endproc

	.globl	pent_u_unit_ready_cost
	.align	16, 0x90
	.type	pent_u_unit_ready_cost,@function
pent_u_unit_ready_cost:                 # @pent_u_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp404:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp405:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp406:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp407:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp408:
	.cfi_def_cfa_offset 48
.Ltmp409:
	.cfi_offset %rbx, -48
.Ltmp410:
	.cfi_offset %r12, -40
.Ltmp411:
	.cfi_offset %r13, -32
.Ltmp412:
	.cfi_offset %r14, -24
.Ltmp413:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB47_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB47_2:                               # %cond.end
	movq	$3, %r13
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$399, %rdx              # imm = 0x18F
	jg	.LBB47_110
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$334, %rdx              # imm = 0x14E
	jg	.LBB47_96
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$316, %rdx              # imm = 0x13C
	jg	.LBB47_95
# BB#5:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$295, %rdx              # imm = 0x127
	jg	.LBB47_93
# BB#6:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$5, %rdx
	jg	.LBB47_11
# BB#7:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB47_477
# BB#8:                                 # %sw.bb1213
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB47_477
# BB#9:                                 # %land.lhs.true1217
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB47_477
# BB#10:                                # %if.then1223
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_u_unit_ready_cost, %rcx
	movq	$8316, %rdx             # imm = 0x207C
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB47_110:                             # %cond.end
	addq	$-400, %rax             # imm = 0xFFFFFFFFFFFFFE70
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$85, %rax
	ja	.LBB47_477
# BB#111:                               # %cond.end
	movq	$3, %r13
	jmpq	*.LJTI47_0(,%rax,8)
.LBB47_112:                             # %sw.bb
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_116
# BB#113:                               # %land.lhs.true
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_116
# BB#114:                               # %land.lhs.true8
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB47_116
# BB#115:                               # %land.lhs.true8
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_116:                             # %lor.lhs.false
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_120
# BB#117:                               # %land.lhs.true14
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_120
# BB#118:                               # %land.lhs.true17
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB47_120
# BB#119:                               # %land.lhs.true17
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_120:                             # %if.else
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_126
# BB#121:                               # %land.lhs.true24
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_126
# BB#122:                               # %land.lhs.true27
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_126
# BB#123:                               # %land.lhs.true30
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_126
# BB#124:                               # %land.lhs.true33
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB47_126
# BB#125:                               # %land.lhs.true33
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_126:                             # %if.else39
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_96:                              # %cond.end
	addq	$-335, %rax             # imm = 0xFFFFFFFFFFFFFEB1
	jmp	.LBB47_97
.LBB47_95:                              # %cond.end
	addq	$-317, %rax             # imm = 0xFFFFFFFFFFFFFEC3
.LBB47_97:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jb	.LBB47_98
	jmp	.LBB47_477
.LBB47_93:                              # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$296, %rax              # imm = 0x128
	jne	.LBB47_94
# BB#313:                               # %sw.bb569
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_317
# BB#314:                               # %sw.bb569
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB47_317
# BB#315:                               # %land.lhs.true576
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_317
# BB#316:                               # %land.lhs.true576
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_317:                             # %lor.lhs.false581
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_321
# BB#318:                               # %lor.lhs.false581
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB47_321
# BB#319:                               # %land.lhs.true588
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_321
# BB#320:                               # %land.lhs.true588
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_321:                             # %if.else594
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_327
# BB#322:                               # %land.lhs.true597
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_327
# BB#323:                               # %land.lhs.true600
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_327
# BB#324:                               # %land.lhs.true600
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB47_327
# BB#325:                               # %land.lhs.true607
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_327
# BB#326:                               # %land.lhs.true607
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_327:                             # %if.else613
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_270:                             # %sw.bb447
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB47_275
# BB#271:                               # %land.lhs.true450
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB47_275
# BB#272:                               # %land.lhs.true453
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB47_275
# BB#273:                               # %land.lhs.true456
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_275
# BB#274:                               # %land.lhs.true456
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_275:                             # %if.else462
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_282
# BB#276:                               # %land.lhs.true465
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB47_279
# BB#277:                               # %land.lhs.true468
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_279
# BB#278:                               # %land.lhs.true468
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_279:                             # %lor.lhs.false473
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB47_282
# BB#280:                               # %land.lhs.true476
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_282
# BB#281:                               # %land.lhs.true476
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_282:                             # %if.else482
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_287
# BB#283:                               # %land.lhs.true485
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB47_287
# BB#284:                               # %land.lhs.true488
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB47_287
# BB#285:                               # %land.lhs.true491
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_287
# BB#286:                               # %land.lhs.true491
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_287:                             # %if.else497
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_294
# BB#288:                               # %land.lhs.true500
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB47_291
# BB#289:                               # %land.lhs.true503
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_291
# BB#290:                               # %land.lhs.true503
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_291:                             # %lor.lhs.false508
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB47_294
# BB#292:                               # %land.lhs.true511
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_294
# BB#293:                               # %land.lhs.true511
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_294:                             # %if.else517
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_299
# BB#295:                               # %land.lhs.true520
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB47_299
# BB#296:                               # %land.lhs.true523
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB47_299
# BB#297:                               # %land.lhs.true526
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_299
# BB#298:                               # %land.lhs.true526
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_299:                             # %lor.lhs.false531
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_312
# BB#300:                               # %land.lhs.true534
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_312
# BB#301:                               # %land.lhs.true537
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_312
# BB#302:                               # %land.lhs.true540
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB47_305
# BB#303:                               # %land.lhs.true543
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_305
# BB#304:                               # %land.lhs.true543
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_305:                             # %lor.lhs.false548
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB47_308
# BB#306:                               # %land.lhs.true551
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_308
# BB#307:                               # %land.lhs.true551
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_308:                             # %lor.lhs.false556
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB47_312
# BB#309:                               # %land.lhs.true559
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB47_312
# BB#310:                               # %land.lhs.true562
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_312
# BB#311:                               # %land.lhs.true562
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_312:                             # %if.else568
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_11:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$48, %rdx
	jg	.LBB47_20
# BB#12:                                # %cond.end
	addq	$-6, %rax
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$3, %rax
	jae	.LBB47_477
# BB#13:                                # %sw.bb1195
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$1, %rax
	jne	.LBB47_16
# BB#14:                                # %land.lhs.true1198
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB47_16
# BB#15:                                # %land.lhs.true1198
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_16:                              # %lor.lhs.false1203
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB47_19
# BB#17:                                # %land.lhs.true1206
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB47_19
# BB#18:                                # %land.lhs.true1206
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_19:                              # %if.else1212
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_94:                              # %cond.end
	cmpq	$297, %rax              # imm = 0x129
	jne	.LBB47_477
.LBB47_98:                              # %sw.bb614
	movq	%r14, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$2, %rax
	jne	.LBB47_101
# BB#99:                                # %land.lhs.true617
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB47_101
# BB#100:                               # %land.lhs.true617
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_101:                             # %lor.lhs.false622
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$1, %rax
	jne	.LBB47_104
# BB#102:                               # %land.lhs.true625
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB47_104
# BB#103:                               # %land.lhs.true625
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_104:                             # %if.else631
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$3, %rax
	je	.LBB47_109
# BB#105:                               # %land.lhs.true634
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_109
# BB#106:                               # %land.lhs.true637
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB47_109
# BB#107:                               # %land.lhs.true640
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB47_109
# BB#108:                               # %land.lhs.true640
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_109:                             # %if.else646
	movq	$3, %r13
.LBB47_477:                             # %return
	movq	%r13, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB47_20:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$108, %rdx
	jg	.LBB47_23
# BB#21:                                # %cond.end
	addq	$-49, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$11, %rax
	ja	.LBB47_477
# BB#22:                                # %cond.end
	movq	$3, %r13
	jmpq	*.LJTI47_1(,%rax,8)
.LBB47_470:                             # %sw.bb1188
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB47_472
	jmp	.LBB47_471
.LBB47_127:                             # %sw.bb40
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_132
# BB#128:                               # %land.lhs.true43
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_132
# BB#129:                               # %land.lhs.true43
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_132
# BB#130:                               # %land.lhs.true48
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB47_132
# BB#131:                               # %land.lhs.true48
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_132:                             # %lor.lhs.false53
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_137
# BB#133:                               # %land.lhs.true56
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_137
# BB#134:                               # %land.lhs.true56
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_137
# BB#135:                               # %land.lhs.true61
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB47_137
# BB#136:                               # %land.lhs.true61
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_137:                             # %if.else67
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_144
# BB#138:                               # %land.lhs.true70
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_144
# BB#139:                               # %land.lhs.true73
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_144
# BB#140:                               # %land.lhs.true76
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_144
# BB#141:                               # %land.lhs.true76
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_144
# BB#142:                               # %land.lhs.true81
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB47_144
# BB#143:                               # %land.lhs.true81
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_144:                             # %if.else87
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_23:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$185, %rdx
	jg	.LBB47_38
# BB#24:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$109, %rax
	jne	.LBB47_25
.LBB47_433:                             # %sw.bb1086
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$2, %rax
	movq	$1, %r13
	jne	.LBB47_435
# BB#434:                               # %sw.bb1086
	movl	ix86_cpu(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_435:                             # %lor.lhs.false1091
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%rbx, %rax
	jne	.LBB47_438
# BB#436:                               # %land.lhs.true1094
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_438
# BB#437:                               # %land.lhs.true1094
	movl	ix86_cpu(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_438:                             # %if.else1100
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_38:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$214, %rdx
	jg	.LBB47_50
# BB#39:                                # %cond.end
	addq	$-186, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	ja	.LBB47_477
# BB#40:                                # %cond.end
	cmpq	$1, %rcx
	jne	.LBB47_41
	jmp	.LBB47_477
.LBB47_199:                             # %sw.bb241
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB47_208
# BB#200:                               # %land.lhs.true244
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_206
# BB#201:                               # %lor.lhs.false246
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_208
# BB#202:                               # %land.lhs.true250
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_208
# BB#203:                               # %land.lhs.true253
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_206
# BB#204:                               # %lor.lhs.false255
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_206
# BB#205:                               # %lor.lhs.false259
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_208
.LBB47_206:                             # %land.lhs.true262
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_208
# BB#207:                               # %land.lhs.true262
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_208:                             # %if.else268
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_219
# BB#209:                               # %if.else268
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB47_219
# BB#210:                               # %land.lhs.true273
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_212
# BB#211:                               # %lor.lhs.false277
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_214
.LBB47_212:                             # %land.lhs.true280
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_214
# BB#213:                               # %land.lhs.true280
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_214:                             # %lor.lhs.false285
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_219
# BB#215:                               # %land.lhs.true287
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_219
# BB#216:                               # %land.lhs.true291
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_219
# BB#217:                               # %land.lhs.true294
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_219
# BB#218:                               # %land.lhs.true294
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_219:                             # %if.else300
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_228
# BB#220:                               # %land.lhs.true303
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_226
# BB#221:                               # %lor.lhs.false305
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_228
# BB#222:                               # %land.lhs.true309
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_228
# BB#223:                               # %land.lhs.true312
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_226
# BB#224:                               # %lor.lhs.false314
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r15, %rdx
	je	.LBB47_226
# BB#225:                               # %lor.lhs.false318
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_228
.LBB47_226:                             # %land.lhs.true321
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_228
# BB#227:                               # %land.lhs.true321
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_228:                             # %if.else327
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_239
# BB#229:                               # %if.else327
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB47_239
# BB#230:                               # %land.lhs.true332
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_232
# BB#231:                               # %lor.lhs.false336
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_234
.LBB47_232:                             # %land.lhs.true339
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_234
# BB#233:                               # %land.lhs.true339
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_234:                             # %lor.lhs.false344
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_239
# BB#235:                               # %land.lhs.true346
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r15, %rdx
	je	.LBB47_239
# BB#236:                               # %land.lhs.true350
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_239
# BB#237:                               # %land.lhs.true353
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_239
# BB#238:                               # %land.lhs.true353
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_239:                             # %if.else359
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_248
# BB#240:                               # %land.lhs.true362
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_246
# BB#241:                               # %lor.lhs.false364
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_248
# BB#242:                               # %land.lhs.true368
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_248
# BB#243:                               # %land.lhs.true371
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_246
# BB#244:                               # %lor.lhs.false373
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r15, %rdx
	je	.LBB47_246
# BB#245:                               # %lor.lhs.false377
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_248
.LBB47_246:                             # %land.lhs.true380
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_248
# BB#247:                               # %land.lhs.true380
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_248:                             # %lor.lhs.false385
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_269
# BB#249:                               # %land.lhs.true388
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_269
# BB#250:                               # %land.lhs.true391
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_269
# BB#251:                               # %land.lhs.true394
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_267
# BB#252:                               # %land.lhs.true396
	movl	ix86_cpu(%rip), %eax
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %r13
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB47_254
# BB#253:                               # %lor.lhs.false400
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_256
.LBB47_254:                             # %land.lhs.true403
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_256
# BB#255:                               # %land.lhs.true403
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_256:                             # %lor.lhs.false408
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_267
# BB#257:                               # %land.lhs.true410
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB47_261
# BB#258:                               # %land.lhs.true414
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_261
# BB#259:                               # %land.lhs.true417
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_261
# BB#260:                               # %land.lhs.true417
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_261:                             # %lor.lhs.false422
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_267
# BB#262:                               # %lor.lhs.false424
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB47_269
# BB#263:                               # %land.lhs.true428
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_269
# BB#264:                               # %land.lhs.true431
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB47_267
# BB#265:                               # %lor.lhs.false433
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB47_267
# BB#266:                               # %lor.lhs.false437
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_269
.LBB47_267:                             # %land.lhs.true440
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_269
# BB#268:                               # %land.lhs.true440
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_269:                             # %if.else446
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_145:                             # %sw.bb88
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB47_152
# BB#146:                               # %land.lhs.true91
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_152
# BB#147:                               # %land.lhs.true93
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_152
# BB#148:                               # %land.lhs.true96
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_150
# BB#149:                               # %lor.lhs.false100
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_152
.LBB47_150:                             # %land.lhs.true103
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_152
# BB#151:                               # %land.lhs.true103
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_152:                             # %if.else109
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_162
# BB#153:                               # %land.lhs.true112
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_156
# BB#154:                               # %lor.lhs.false116
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_156
# BB#155:                               # %lor.lhs.false116.lor.lhs.false124_crit_edge
	movl	ix86_cpu(%rip), %ecx
	jmp	.LBB47_158
.LBB47_25:                              # %cond.end
	cmpq	$110, %rax
	jne	.LBB47_477
# BB#26:                                # %sw.bb857
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %r13
	jne	.LBB47_29
# BB#27:                                # %sw.bb857
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_29
# BB#28:                                # %sw.bb857
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_29:                              # %lor.lhs.false864
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_32
# BB#30:                                # %lor.lhs.false864
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_32
# BB#31:                                # %lor.lhs.false864
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_32:                              # %lor.lhs.false871
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_37
# BB#33:                                # %land.lhs.true874
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_37
# BB#34:                                # %land.lhs.true877
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_37
# BB#35:                                # %land.lhs.true877
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_37
# BB#36:                                # %land.lhs.true877
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_37:                              # %if.else885
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_50:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$242, %rdx
	jg	.LBB47_92
# BB#51:                                # %cond.end
	addq	$-215, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$21, %rax
	ja	.LBB47_477
# BB#52:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	testq	$46, %rsi
	je	.LBB47_53
# BB#328:                               # %sw.bb647
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB47_332
# BB#329:                               # %land.lhs.true650
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB47_332
# BB#330:                               # %land.lhs.true653
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_332
# BB#331:                               # %land.lhs.true653
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_332:                             # %if.else659
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_336
# BB#333:                               # %land.lhs.true662
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB47_336
# BB#334:                               # %land.lhs.true665
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_336
# BB#335:                               # %land.lhs.true665
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_336:                             # %if.else671
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_340
# BB#337:                               # %land.lhs.true674
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB47_340
# BB#338:                               # %land.lhs.true677
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_340
# BB#339:                               # %land.lhs.true677
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_340:                             # %if.else683
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_344
# BB#341:                               # %land.lhs.true686
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB47_344
# BB#342:                               # %land.lhs.true689
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_344
# BB#343:                               # %land.lhs.true689
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_344:                             # %if.else695
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_348
# BB#345:                               # %land.lhs.true698
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB47_348
# BB#346:                               # %land.lhs.true701
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_348
# BB#347:                               # %land.lhs.true701
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_348:                             # %lor.lhs.false706
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_357
# BB#349:                               # %land.lhs.true709
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_357
# BB#350:                               # %land.lhs.true712
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_357
# BB#351:                               # %land.lhs.true715
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB47_354
# BB#352:                               # %land.lhs.true718
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_354
# BB#353:                               # %land.lhs.true718
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_354:                             # %lor.lhs.false723
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB47_357
# BB#355:                               # %land.lhs.true726
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_357
# BB#356:                               # %land.lhs.true726
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_357:                             # %if.else732
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_92:                              # %cond.end
	addq	$-243, %rax
	jmp	.LBB47_97
.LBB47_454:                             # %sw.bb1141
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB47_472
.LBB47_471:                             # %sw.bb1188
	movq	%rcx, %rdx
.LBB47_472:                             # %sw.bb1188
	movl	ix86_cpu(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB47_474
# BB#473:                               # %sw.bb1188
	movq	%rcx, %rsi
.LBB47_474:                             # %sw.bb1188
	testq	%rsi, %rdx
	jne	.LBB47_476
# BB#475:                               # %sw.bb1188
	movq	%rcx, %rax
.LBB47_476:                             # %sw.bb1188
	leaq	1(%rax,%rax), %r13
	jmp	.LBB47_477
.LBB47_156:                             # %land.lhs.true119
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_158
# BB#157:                               # %land.lhs.true119
	movq	$2, %r13
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_158:                             # %lor.lhs.false124
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_162
# BB#159:                               # %land.lhs.true128
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_162
# BB#160:                               # %land.lhs.true131
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_162
# BB#161:                               # %land.lhs.true131
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_162:                             # %if.else137
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_172
# BB#163:                               # %land.lhs.true140
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_166
# BB#164:                               # %lor.lhs.false144
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_166
# BB#165:                               # %lor.lhs.false144.lor.lhs.false152_crit_edge
	movl	ix86_cpu(%rip), %ecx
	jmp	.LBB47_168
.LBB47_166:                             # %land.lhs.true147
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_168
# BB#167:                               # %land.lhs.true147
	movq	$2, %r13
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_168:                             # %lor.lhs.false152
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_172
# BB#169:                               # %land.lhs.true156
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_172
# BB#170:                               # %land.lhs.true159
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_172
# BB#171:                               # %land.lhs.true159
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_172:                             # %if.else165
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_179
# BB#173:                               # %land.lhs.true168
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %ebx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_179
# BB#174:                               # %land.lhs.true172
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_179
# BB#175:                               # %land.lhs.true175
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rbx, %rax
	testq	%r15, %rax
	je	.LBB47_177
# BB#176:                               # %lor.lhs.false179
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_179
.LBB47_177:                             # %land.lhs.true182
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_179
# BB#178:                               # %land.lhs.true182
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_179:                             # %lor.lhs.false187
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_198
# BB#180:                               # %land.lhs.true190
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_198
# BB#181:                               # %land.lhs.true193
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_198
# BB#182:                               # %land.lhs.true196
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB47_185
# BB#183:                               # %lor.lhs.false200
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_185
# BB#184:                               # %lor.lhs.false200.lor.lhs.false208_crit_edge
	movl	ix86_cpu(%rip), %ecx
	jmp	.LBB47_187
.LBB47_455:                             # %sw.bb1148
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB47_458
# BB#456:                               # %land.lhs.true1151
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_458
# BB#457:                               # %land.lhs.true1151
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_458:                             # %lor.lhs.false1156
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_461
# BB#459:                               # %land.lhs.true1159
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_461
# BB#460:                               # %land.lhs.true1159
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_461:                             # %lor.lhs.false1164
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_464
# BB#462:                               # %land.lhs.true1167
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_464
# BB#463:                               # %land.lhs.true1167
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_464:                             # %lor.lhs.false1172
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_469
# BB#465:                               # %land.lhs.true1175
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_469
# BB#466:                               # %land.lhs.true1178
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_469
# BB#467:                               # %land.lhs.true1181
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_469
# BB#468:                               # %land.lhs.true1181
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_469:                             # %if.else1187
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_439:                             # %sw.bb1101
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB47_442
# BB#440:                               # %land.lhs.true1104
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_442
# BB#441:                               # %land.lhs.true1104
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_442:                             # %lor.lhs.false1109
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_445
# BB#443:                               # %land.lhs.true1112
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_445
# BB#444:                               # %land.lhs.true1112
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_445:                             # %lor.lhs.false1117
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_448
# BB#446:                               # %land.lhs.true1120
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_448
# BB#447:                               # %land.lhs.true1120
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_448:                             # %lor.lhs.false1125
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_453
# BB#449:                               # %land.lhs.true1128
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_453
# BB#450:                               # %land.lhs.true1131
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_453
# BB#451:                               # %land.lhs.true1134
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_453
# BB#452:                               # %land.lhs.true1134
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_453:                             # %if.else1140
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_358:                             # %sw.bb886
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB47_376
# BB#359:                               # %land.lhs.true889
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_376
# BB#360:                               # %land.lhs.true892
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB47_363
# BB#361:                               # %land.lhs.true894
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_368
# BB#362:                               # %lor.lhs.false898
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_367
.LBB47_363:                             # %lor.lhs.false902
	cmpq	$3, %rax
	je	.LBB47_376
# BB#364:                               # %lor.lhs.false902
	cmpq	$5, %rax
	je	.LBB47_376
# BB#365:                               # %land.lhs.true906
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_367
# BB#366:                               # %land.lhs.true906
	cmpq	$2, %rax
	je	.LBB47_376
.LBB47_367:                             # %land.lhs.true912
	cmpq	$3, %rax
	jne	.LBB47_370
.LBB47_368:                             # %lor.lhs.false914
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_376
# BB#369:                               # %land.lhs.true918
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_376
.LBB47_370:                             # %land.lhs.true922
	cmpq	$3, %rax
	je	.LBB47_374
# BB#371:                               # %land.lhs.true922
	cmpq	$5, %rax
	jne	.LBB47_372
.LBB47_374:                             # %land.lhs.true932
	movq	$1, %r13
	jmp	.LBB47_375
.LBB47_53:                              # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$3211264, %rdx          # imm = 0x310000
	je	.LBB47_54
.LBB47_41:                              # %sw.bb833
	movq	%r14, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$2, %rax
	movq	$2, %r13
	jne	.LBB47_43
# BB#42:                                # %sw.bb833
	movl	ix86_cpu(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_43:                              # %lor.lhs.false838
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$1, %rax
	jne	.LBB47_45
# BB#44:                                # %lor.lhs.false838
	movl	ix86_cpu(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_45:                              # %if.else844
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$3, %rax
	je	.LBB47_49
# BB#46:                                # %land.lhs.true847
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_49
# BB#47:                                # %land.lhs.true850
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB47_49
# BB#48:                                # %land.lhs.true850
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_49:                              # %if.else856
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_54:                              # %cond.end
	testq	%rax, %rax
	jne	.LBB47_477
# BB#55:                                # %sw.bb733
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB47_60
# BB#56:                                # %land.lhs.true736
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB47_58
# BB#57:                                # %lor.lhs.false738
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB47_60
.LBB47_58:                              # %land.lhs.true741
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_60
# BB#59:                                # %land.lhs.true741
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_60:                              # %if.else747
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_65
# BB#61:                                # %if.else747
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_65
# BB#62:                                # %land.lhs.true752
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB47_65
# BB#63:                                # %land.lhs.true755
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_65
# BB#64:                                # %land.lhs.true755
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_65:                              # %if.else761
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_70
# BB#66:                                # %land.lhs.true764
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB47_68
# BB#67:                                # %lor.lhs.false766
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB47_70
.LBB47_68:                              # %land.lhs.true769
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_70
# BB#69:                                # %land.lhs.true769
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_70:                              # %if.else775
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_75
# BB#71:                                # %if.else775
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_75
# BB#72:                                # %land.lhs.true780
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB47_75
# BB#73:                                # %land.lhs.true783
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_75
# BB#74:                                # %land.lhs.true783
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_75:                              # %if.else789
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_80
# BB#76:                                # %land.lhs.true792
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB47_78
# BB#77:                                # %lor.lhs.false794
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB47_80
.LBB47_78:                              # %land.lhs.true797
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_80
# BB#79:                                # %land.lhs.true797
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_80:                              # %lor.lhs.false802
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_91
# BB#81:                                # %land.lhs.true805
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_91
# BB#82:                                # %land.lhs.true808
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_91
# BB#83:                                # %land.lhs.true811
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB47_89
# BB#84:                                # %land.lhs.true813
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB47_87
# BB#85:                                # %land.lhs.true816
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_87
# BB#86:                                # %land.lhs.true816
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_87:                              # %lor.lhs.false821
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB47_89
# BB#88:                                # %lor.lhs.false823
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB47_91
.LBB47_89:                              # %land.lhs.true826
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_91
# BB#90:                                # %land.lhs.true826
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_91:                              # %if.else832
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_185:                             # %land.lhs.true203
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_187
# BB#186:                               # %land.lhs.true203
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_187:                             # %lor.lhs.false208
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB47_192
# BB#188:                               # %land.lhs.true212
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_189
# BB#190:                               # %land.lhs.true215
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_192
# BB#191:                               # %land.lhs.true215
	movq	$1, %r13
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
	jmp	.LBB47_192
.LBB47_372:                             # %lor.lhs.false926
	movl	x86_movx(%rip), %edx
	movq	$1, %r13
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_376
# BB#373:                               # %lor.lhs.false926
	cmpq	$2, %rax
	jne	.LBB47_376
.LBB47_375:                             # %land.lhs.true932
	cmpq	$2, %rcx
	je	.LBB47_477
.LBB47_376:                             # %lor.lhs.false934
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB47_394
# BB#377:                               # %land.lhs.true937
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_394
# BB#378:                               # %land.lhs.true940
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB47_381
# BB#379:                               # %land.lhs.true942
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_386
# BB#380:                               # %lor.lhs.false946
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_385
.LBB47_381:                             # %lor.lhs.false950
	cmpq	$3, %rax
	je	.LBB47_394
# BB#382:                               # %lor.lhs.false950
	cmpq	$5, %rax
	je	.LBB47_394
# BB#383:                               # %land.lhs.true954
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_385
# BB#384:                               # %land.lhs.true954
	cmpq	$2, %rax
	je	.LBB47_394
.LBB47_385:                             # %land.lhs.true960
	cmpq	$3, %rax
	jne	.LBB47_388
.LBB47_386:                             # %lor.lhs.false962
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_394
# BB#387:                               # %land.lhs.true966
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_394
.LBB47_388:                             # %land.lhs.true970
	cmpq	$3, %rax
	je	.LBB47_392
# BB#389:                               # %land.lhs.true970
	cmpq	$5, %rax
	jne	.LBB47_390
.LBB47_392:                             # %land.lhs.true980
	movq	$1, %r13
	jmp	.LBB47_393
.LBB47_189:                             # %land.lhs.true212.lor.lhs.false220_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB47_192:                             # %lor.lhs.false220
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB47_198
# BB#193:                               # %land.lhs.true224
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB47_198
# BB#194:                               # %land.lhs.true227
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB47_196
# BB#195:                               # %lor.lhs.false231
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB47_198
.LBB47_196:                             # %land.lhs.true234
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_198
# BB#197:                               # %land.lhs.true234
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_477
.LBB47_198:                             # %if.else240
	movq	$3, %r13
	jmp	.LBB47_477
.LBB47_390:                             # %lor.lhs.false974
	movl	x86_movx(%rip), %edx
	movq	$1, %r13
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_394
# BB#391:                               # %lor.lhs.false974
	cmpq	$2, %rax
	jne	.LBB47_394
.LBB47_393:                             # %land.lhs.true980
	cmpq	$2, %rcx
	je	.LBB47_477
.LBB47_394:                             # %lor.lhs.false982
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB47_412
# BB#395:                               # %land.lhs.true985
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_412
# BB#396:                               # %land.lhs.true988
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB47_399
# BB#397:                               # %land.lhs.true990
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_404
# BB#398:                               # %lor.lhs.false994
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_403
.LBB47_399:                             # %lor.lhs.false998
	cmpq	$3, %rax
	je	.LBB47_412
# BB#400:                               # %lor.lhs.false998
	cmpq	$5, %rax
	je	.LBB47_412
# BB#401:                               # %land.lhs.true1002
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_403
# BB#402:                               # %land.lhs.true1002
	cmpq	$2, %rax
	je	.LBB47_412
.LBB47_403:                             # %land.lhs.true1008
	cmpq	$3, %rax
	jne	.LBB47_406
.LBB47_404:                             # %lor.lhs.false1010
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_412
# BB#405:                               # %land.lhs.true1014
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_412
.LBB47_406:                             # %land.lhs.true1018
	cmpq	$3, %rax
	je	.LBB47_410
# BB#407:                               # %land.lhs.true1018
	cmpq	$5, %rax
	jne	.LBB47_408
.LBB47_410:                             # %land.lhs.true1028
	movq	$1, %r13
	jmp	.LBB47_411
.LBB47_408:                             # %lor.lhs.false1022
	movl	x86_movx(%rip), %edx
	movq	$1, %r13
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_412
# BB#409:                               # %lor.lhs.false1022
	cmpq	$2, %rax
	jne	.LBB47_412
.LBB47_411:                             # %land.lhs.true1028
	cmpq	$2, %rcx
	je	.LBB47_477
.LBB47_412:                             # %lor.lhs.false1030
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB47_432
# BB#413:                               # %land.lhs.true1033
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB47_432
# BB#414:                               # %land.lhs.true1036
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_432
# BB#415:                               # %land.lhs.true1039
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB47_432
# BB#416:                               # %land.lhs.true1042
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB47_419
# BB#417:                               # %land.lhs.true1044
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_424
# BB#418:                               # %lor.lhs.false1048
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_423
.LBB47_419:                             # %lor.lhs.false1052
	cmpq	$3, %rax
	je	.LBB47_432
# BB#420:                               # %lor.lhs.false1052
	cmpq	$5, %rax
	je	.LBB47_432
# BB#421:                               # %land.lhs.true1056
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_423
# BB#422:                               # %land.lhs.true1056
	cmpq	$2, %rax
	je	.LBB47_432
.LBB47_423:                             # %land.lhs.true1062
	cmpq	$3, %rax
	jne	.LBB47_426
.LBB47_424:                             # %lor.lhs.false1064
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_432
# BB#425:                               # %land.lhs.true1068
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_432
.LBB47_426:                             # %land.lhs.true1072
	cmpq	$3, %rax
	je	.LBB47_430
# BB#427:                               # %land.lhs.true1072
	cmpq	$5, %rax
	jne	.LBB47_428
.LBB47_430:                             # %land.lhs.true1082
	movq	$1, %r13
	jmp	.LBB47_431
.LBB47_428:                             # %lor.lhs.false1076
	movl	x86_movx(%rip), %edx
	movq	$1, %r13
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB47_432
# BB#429:                               # %lor.lhs.false1076
	cmpq	$2, %rax
	jne	.LBB47_432
.LBB47_431:                             # %land.lhs.true1082
	cmpq	$2, %rcx
	je	.LBB47_477
.LBB47_432:                             # %if.else1085
	movq	$3, %r13
	jmp	.LBB47_477
.Ltmp414:
	.size	pent_u_unit_ready_cost, .Ltmp414-pent_u_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI47_0:
	.quad	.LBB47_433
	.quad	.LBB47_477
	.quad	.LBB47_477
	.quad	.LBB47_270
	.quad	.LBB47_270
	.quad	.LBB47_477
	.quad	.LBB47_477
	.quad	.LBB47_477
	.quad	.LBB47_270
	.quad	.LBB47_199
	.quad	.LBB47_270
	.quad	.LBB47_145
	.quad	.LBB47_270
	.quad	.LBB47_270
	.quad	.LBB47_270
	.quad	.LBB47_270
	.quad	.LBB47_270
	.quad	.LBB47_270
	.quad	.LBB47_127
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_477
	.quad	.LBB47_477
	.quad	.LBB47_477
	.quad	.LBB47_127
	.quad	.LBB47_127
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_477
	.quad	.LBB47_477
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
	.quad	.LBB47_112
.LJTI47_1:
	.quad	.LBB47_470
	.quad	.LBB47_477
	.quad	.LBB47_455
	.quad	.LBB47_454
	.quad	.LBB47_454
	.quad	.LBB47_477
	.quad	.LBB47_477
	.quad	.LBB47_439
	.quad	.LBB47_433
	.quad	.LBB47_470
	.quad	.LBB47_477
	.quad	.LBB47_358

	.text
	.globl	pent_u_unit_blockage_range
	.align	16, 0x90
	.type	pent_u_unit_blockage_range,@function
pent_u_unit_blockage_range:             # @pent_u_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp417:
	.cfi_def_cfa_offset 16
.Ltmp418:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB48_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB48_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB48_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB48_5
.LBB48_4:                               # %sw.default
	movq	$65539, %rax            # imm = 0x10003
	popq	%rbx
	retq
.LBB48_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_u_unit_blockage_range, %rcx
	movq	$8333, %rdx             # imm = 0x208D
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp419:
	.size	pent_u_unit_blockage_range, .Ltmp419-pent_u_unit_blockage_range
	.cfi_endproc

	.globl	fpu_unit_ready_cost
	.align	16, 0x90
	.type	fpu_unit_ready_cost,@function
fpu_unit_ready_cost:                    # @fpu_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp424:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp425:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp426:
	.cfi_def_cfa_offset 32
.Ltmp427:
	.cfi_offset %rbx, -32
.Ltmp428:
	.cfi_offset %r14, -24
.Ltmp429:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB49_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB49_2:                               # %cond.end
	movq	$70, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB49_29
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB49_27
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$364, %rdx              # imm = 0x16C
	jg	.LBB49_23
# BB#5:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$248, %rdx
	jg	.LBB49_231
# BB#6:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB49_11
# BB#7:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB49_362
# BB#8:                                 # %sw.bb824
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB49_362
# BB#9:                                 # %land.lhs.true828
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB49_362
# BB#10:                                # %if.then834
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.fpu_unit_ready_cost, %rcx
	movq	$9021, %rdx             # imm = 0x233D
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB49_29:                              # %cond.end
	leaq	-618(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$3, %rdx
	jae	.LBB49_30
# BB#33:                                # %sw.bb5
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB49_34
# BB#35:                                # %sw.bb5
	movabsq	$1, %rax
	jmp	.LBB49_36
.LBB49_27:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$56, %rax
	ja	.LBB49_362
# BB#28:                                # %cond.end
	jmpq	*.LJTI49_0(,%rax,8)
.LBB49_39:                              # %sw.bb11
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_362
# BB#40:                                # %if.then15
	cmpq	$2, %rax
	movq	$70, %r14
	je	.LBB49_362
# BB#41:                                # %if.then15
	movq	$56, %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_30:                              # %cond.end
	addq	$-621, %rax             # imm = 0xFFFFFFFFFFFFFD93
	andq	%rcx, %rax
	cmpq	$1, %rax
	ja	.LBB49_362
# BB#31:                                # %sw.bb
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$1, %r14
	je	.LBB49_362
# BB#32:                                # %select.mid
	movq	$70, %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_34:
	movabsq	$0, %rax
.LBB49_36:                              # %sw.bb5
	movl	which_alternative(%rip), %ecx
	cmpq	$2, %rcx
	sbbq	%rcx, %rcx
	testq	%rax, %rcx
	movq	$1, %rax
	jne	.LBB49_38
# BB#37:                                # %sw.bb5
	movq	$70, %rax
	jmp	.LBB49_38
.LBB49_23:                              # %cond.end
	addq	$-365, %rax             # imm = 0xFFFFFFFFFFFFFE93
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$27, %rcx
	ja	.LBB49_362
# BB#24:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$267911679, %rax        # imm = 0xFF801FF
	je	.LBB49_362
.LBB49_25:                              # %sw.bb818
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	movq	$1, %r14
	je	.LBB49_362
# BB#26:                                # %sw.bb818
	movq	$70, %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_231:                             # %cond.end
	addq	$-249, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$17, %rcx
	jae	.LBB49_362
# BB#232:                               # %sw.bb429
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$4, %r14
	je	.LBB49_362
# BB#233:                               # %select.mid2
	movq	$70, %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_11:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB49_21
# BB#12:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$36, %rax
	ja	.LBB49_362
# BB#13:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	jne	.LBB49_25
# BB#14:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	je	.LBB49_362
# BB#15:                                # %sw.bb808
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movl	ix86_cpu(%rip), %esi
	testq	%rax, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB49_17
# BB#16:                                # %sw.bb808
	movq	%rdx, %rcx
.LBB49_17:                              # %sw.bb808
	movabsq	$4294967294, %rdi       # imm = 0xFFFFFFFE
	andq	%rdi, %rsi
	cmpq	$2, %rsi
	jne	.LBB49_19
# BB#18:                                # %sw.bb808
	movq	%rdx, %rax
.LBB49_19:                              # %sw.bb808
	testq	%rcx, %rax
	movq	$1, %r14
	jne	.LBB49_362
# BB#20:                                # %sw.bb808
	movq	$70, %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_76:                              # %sw.bb90
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_81
# BB#77:                                # %land.lhs.true92
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_85
# BB#78:                                # %lor.lhs.false95
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_85
# BB#79:                                # %lor.lhs.false98
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB49_85
# BB#80:                                # %lor.lhs.false101thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_81:                              # %lor.lhs.false101
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB49_362
# BB#82:                                # %land.lhs.true103
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_85
# BB#83:                                # %lor.lhs.false106
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_85
# BB#84:                                # %lor.lhs.false109
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB49_362
.LBB49_85:                              # %if.then112
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB49_88
# BB#86:                                # %land.lhs.true114
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %r14
	je	.LBB49_362
# BB#87:                                # %if.else118thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_88:                              # %if.else118
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_91
# BB#89:                                # %land.lhs.true120
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %r14
	je	.LBB49_362
# BB#90:                                # %land.lhs.true120.if.else124_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB49_91:                              # %if.else124
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_94
# BB#92:                                # %land.lhs.true126
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#93:                                # %if.else130thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_94:                              # %if.else130
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#95:                                # %land.lhs.true132
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %r14
	je	.LBB49_362
# BB#96:                                # %lor.lhs.false135
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB49_123
.LBB49_55:                              # %sw.bb40
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_60
# BB#56:                                # %land.lhs.true42
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_64
# BB#57:                                # %lor.lhs.false45
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_64
# BB#58:                                # %lor.lhs.false47
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB49_64
# BB#59:                                # %lor.lhs.false50thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_60:                              # %lor.lhs.false50
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB49_362
# BB#61:                                # %land.lhs.true52
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_64
# BB#62:                                # %lor.lhs.false55
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_64
# BB#63:                                # %lor.lhs.false58
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB49_362
.LBB49_64:                              # %if.then61
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB49_67
# BB#65:                                # %land.lhs.true63
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %r14
	je	.LBB49_362
# BB#66:                                # %if.else67thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_67:                              # %if.else67
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_70
# BB#68:                                # %land.lhs.true69
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %r14
	je	.LBB49_362
# BB#69:                                # %land.lhs.true69.if.else73_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB49_70:                              # %if.else73
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_73
# BB#71:                                # %land.lhs.true75
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#72:                                # %if.else79thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_73:                              # %if.else79
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#74:                                # %land.lhs.true81
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %r14
	je	.LBB49_362
# BB#75:                                # %lor.lhs.false84
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	jmp	.LBB49_123
.LBB49_21:                              # %cond.end
	addq	$-90, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$94, %rax
	ja	.LBB49_362
# BB#22:                                # %cond.end
	jmpq	*.LJTI49_1(,%rax,8)
.LBB49_277:                             # %sw.bb552
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB49_284
# BB#278:                               # %sw.bb552
	testq	%r15, %rax
	jne	.LBB49_284
# BB#279:                               # %land.lhs.true556
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB49_286
# BB#280:                               # %lor.lhs.false559
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_286
# BB#281:                               # %lor.lhs.false562
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB49_286
# BB#282:                               # %lor.lhs.false565
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_286
# BB#283:                               # %lor.lhs.false565.lor.lhs.false568_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB49_284:                             # %lor.lhs.false568
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_362
# BB#285:                               # %lor.lhs.false568
	testq	%r15, %rax
	jne	.LBB49_362
.LBB49_286:                             # %if.then572
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#287:                               # %if.then572
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	je	.LBB49_288
	jmp	.LBB49_361
.LBB49_124:                             # %sw.bb200
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_129
# BB#125:                               # %land.lhs.true202
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_133
# BB#126:                               # %lor.lhs.false205
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_133
# BB#127:                               # %lor.lhs.false208
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB49_133
# BB#128:                               # %lor.lhs.false211thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_129:                             # %lor.lhs.false211
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB49_362
# BB#130:                               # %land.lhs.true213
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_133
# BB#131:                               # %lor.lhs.false216
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_133
# BB#132:                               # %lor.lhs.false219
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB49_362
.LBB49_133:                             # %if.then222
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB49_136
# BB#134:                               # %land.lhs.true224
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %r14
	je	.LBB49_362
# BB#135:                               # %if.else228thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_136:                             # %if.else228
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_139
# BB#137:                               # %land.lhs.true230
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %r14
	je	.LBB49_362
# BB#138:                               # %land.lhs.true230.if.else234_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB49_139:                             # %if.else234
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_142
# BB#140:                               # %land.lhs.true236
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#141:                               # %if.else240thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_142:                             # %if.else240
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#143:                               # %land.lhs.true242
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %r14
	je	.LBB49_362
# BB#144:                               # %lor.lhs.false245
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	jmp	.LBB49_123
.LBB49_170:                             # %sw.bb310
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_175
# BB#171:                               # %land.lhs.true312
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_179
# BB#172:                               # %lor.lhs.false315
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_179
# BB#173:                               # %lor.lhs.false318
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB49_179
# BB#174:                               # %lor.lhs.false321thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_175:                             # %lor.lhs.false321
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB49_362
# BB#176:                               # %land.lhs.true323
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_179
# BB#177:                               # %lor.lhs.false326
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_179
# BB#178:                               # %lor.lhs.false329
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB49_362
.LBB49_179:                             # %if.then332
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB49_182
# BB#180:                               # %land.lhs.true334
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %r14
	je	.LBB49_362
# BB#181:                               # %if.else338thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_182:                             # %if.else338
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_185
# BB#183:                               # %land.lhs.true340
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %r14
	je	.LBB49_362
# BB#184:                               # %land.lhs.true340.if.else344_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB49_185:                             # %if.else344
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_188
# BB#186:                               # %land.lhs.true346
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#187:                               # %if.else350thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_188:                             # %if.else350
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#189:                               # %land.lhs.true352
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %r14
	je	.LBB49_362
# BB#190:                               # %lor.lhs.false355
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
.LBB49_123:                             # %land.lhs.true194
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_362
	jmp	.LBB49_361
.LBB49_223:                             # %sw.bb414
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_362
# BB#224:                               # %if.then418
	cmpq	$3, %rax
	jne	.LBB49_227
# BB#225:                               # %land.lhs.true420
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#226:                               # %land.lhs.true420.if.else424_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB49_227:                             # %if.else424
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_228
# BB#229:                               # %if.else424
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_207:                             # %sw.bb391
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movabsq	$0, %rdx
	movabsq	$1, %rdi
	movq	%rdx, %rsi
	jne	.LBB49_209
# BB#208:                               # %sw.bb391
	movq	%rdi, %rsi
.LBB49_209:                             # %sw.bb391
	movl	which_alternative(%rip), %ecx
	testq	%rcx, %rcx
	movq	%rdx, %rbx
	jne	.LBB49_211
# BB#210:                               # %sw.bb391
	movq	%rdi, %rbx
.LBB49_211:                             # %sw.bb391
	cmpq	$3, %rax
	jne	.LBB49_213
# BB#212:                               # %sw.bb391
	movq	%rdi, %rdx
.LBB49_213:                             # %sw.bb391
	andq	%rbx, %rdx
	testq	%rbx, %rsi
	jne	.LBB49_215
# BB#214:                               # %sw.bb391
	testq	%rdx, %rdx
	je	.LBB49_362
.LBB49_215:                             # %if.then399
	testq	%rdx, %rdx
	je	.LBB49_218
# BB#216:                               # %land.lhs.true403
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#217:                               # %land.lhs.true403.if.else407_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB49_218:                             # %if.else407
	andq	%r15, %rax
	cmpq	$2, %rax
	movabsq	$0, %rax
	movabsq	$1, %rsi
	movq	%rax, %rdx
	jne	.LBB49_220
# BB#219:                               # %if.else407
	movq	%rsi, %rdx
.LBB49_220:                             # %if.else407
	testq	%r15, %rcx
	jne	.LBB49_222
# BB#221:                               # %if.else407
	movq	%rsi, %rax
.LBB49_222:                             # %if.else407
	andq	%rax, %rdx
	leaq	1(%rdx,%rdx), %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_42:                              # %sw.bb20
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ebx
	cmpq	$2, %rbx
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB49_44
# BB#43:                                # %sw.bb20
	movq	%rdx, %rcx
.LBB49_44:                              # %sw.bb20
	movl	which_alternative(%rip), %esi
	testq	%rsi, %rsi
	movq	%rax, %rsi
	je	.LBB49_46
# BB#45:                                # %sw.bb20
	movq	%rdx, %rsi
.LBB49_46:                              # %sw.bb20
	movq	%rax, %rdi
	jne	.LBB49_48
# BB#47:                                # %sw.bb20
	movq	%rdx, %rdi
.LBB49_48:                              # %sw.bb20
	cmpq	$3, %rbx
	movq	%rax, %rbx
	je	.LBB49_50
# BB#49:                                # %sw.bb20
	movq	%rdx, %rbx
.LBB49_50:                              # %sw.bb20
	jne	.LBB49_52
# BB#51:                                # %sw.bb20
	movq	%rdx, %rax
.LBB49_52:                              # %sw.bb20
	testq	%rdi, %rcx
	jne	.LBB49_362
# BB#53:                                # %sw.bb20
	orq	%rsi, %rbx
	jne	.LBB49_362
# BB#54:                                # %if.else33
	andq	%rdi, %rax
	movq	$56, %r14
	je	.LBB49_361
	jmp	.LBB49_362
.LBB49_199:                             # %sw.bb376
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_362
# BB#200:                               # %if.then380
	cmpq	$3, %rax
	jne	.LBB49_203
# BB#201:                               # %land.lhs.true382
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#202:                               # %land.lhs.true382.if.else386_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB49_203:                             # %if.else386
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_204
# BB#205:                               # %if.else386
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_191:                             # %sw.bb361
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_362
# BB#192:                               # %if.then365
	cmpq	$3, %rax
	jne	.LBB49_195
# BB#193:                               # %land.lhs.true367
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#194:                               # %land.lhs.true367.if.else371_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB49_195:                             # %if.else371
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_196
# BB#197:                               # %if.else371
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_145:                             # %sw.bb251
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_151
# BB#146:                               # %land.lhs.true253
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_156
# BB#147:                               # %lor.lhs.false256
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB49_149
# BB#148:                               # %land.lhs.true258
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_156
.LBB49_149:                             # %lor.lhs.false261
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB49_156
# BB#150:                               # %lor.lhs.false264thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_151:                             # %lor.lhs.false264
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB49_362
# BB#152:                               # %land.lhs.true266
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_156
# BB#153:                               # %lor.lhs.false269
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB49_155
# BB#154:                               # %land.lhs.true271
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_156
.LBB49_155:                             # %lor.lhs.false274
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB49_362
.LBB49_156:                             # %if.then277
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB49_159
# BB#157:                               # %land.lhs.true279
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %r14
	je	.LBB49_362
# BB#158:                               # %if.else283thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_159:                             # %if.else283
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_162
# BB#160:                               # %land.lhs.true285
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %r14
	je	.LBB49_362
# BB#161:                               # %land.lhs.true285.if.else289_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB49_162:                             # %if.else289
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_166
# BB#163:                               # %if.else289
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB49_166
# BB#164:                               # %land.lhs.true293
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#165:                               # %if.else297thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_166:                             # %if.else297
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#167:                               # %land.lhs.true299
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %r14
	je	.LBB49_362
# BB#168:                               # %lor.lhs.false302
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB49_361
# BB#169:                               # %land.lhs.true304
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	jmp	.LBB49_122
.LBB49_97:                              # %sw.bb141
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_103
# BB#98:                                # %land.lhs.true143
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_108
# BB#99:                                # %lor.lhs.false146
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB49_101
# BB#100:                               # %land.lhs.true148
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_108
.LBB49_101:                             # %lor.lhs.false151
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB49_108
# BB#102:                               # %lor.lhs.false154thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_103:                             # %lor.lhs.false154
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB49_362
# BB#104:                               # %land.lhs.true156
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB49_108
# BB#105:                               # %lor.lhs.false159
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB49_107
# BB#106:                               # %land.lhs.true161
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB49_108
.LBB49_107:                             # %lor.lhs.false164
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB49_362
.LBB49_108:                             # %if.then167
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB49_111
# BB#109:                               # %land.lhs.true169
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$56, %r14
	je	.LBB49_362
# BB#110:                               # %if.else173thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_111:                             # %if.else173
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_114
# BB#112:                               # %land.lhs.true175
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	movq	$39, %r14
	je	.LBB49_362
# BB#113:                               # %land.lhs.true175.if.else179_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB49_114:                             # %if.else179
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_118
# BB#115:                               # %if.else179
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB49_118
# BB#116:                               # %land.lhs.true183
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$5, %r14
	jne	.LBB49_362
# BB#117:                               # %if.else187thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_118:                             # %if.else187
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#119:                               # %land.lhs.true189
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$3, %r14
	je	.LBB49_362
# BB#120:                               # %lor.lhs.false192
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB49_361
# BB#121:                               # %land.lhs.true194
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
.LBB49_122:                             # %land.lhs.true194
	movq	%rax, %rdi
	jmp	.LBB49_123
.LBB49_252:                             # %sw.bb483
	movl	ix86_cpu(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_362
# BB#253:                               # %if.then487
	cmpq	$2, %rax
	jne	.LBB49_254
# BB#255:                               # %if.then487
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_234:                             # %sw.bb433
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB49_243
# BB#235:                               # %sw.bb433
	testq	%r15, %rax
	jne	.LBB49_243
# BB#236:                               # %land.lhs.true437
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_245
# BB#237:                               # %lor.lhs.false440
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_245
# BB#238:                               # %lor.lhs.false443
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB49_245
# BB#239:                               # %lor.lhs.false446
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_245
# BB#240:                               # %lor.lhs.false449
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB49_245
# BB#241:                               # %lor.lhs.false452
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_245
# BB#242:                               # %lor.lhs.false452.lor.lhs.false455_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB49_243:                             # %lor.lhs.false455
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_362
# BB#244:                               # %lor.lhs.false455
	testq	%r15, %rax
	jne	.LBB49_362
.LBB49_245:                             # %if.then459
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB49_250
# BB#246:                               # %if.then459
	testq	%r15, %rax
	jne	.LBB49_250
# BB#247:                               # %land.lhs.true463
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB49_362
# BB#248:                               # %lor.lhs.false466
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_362
# BB#249:                               # %lor.lhs.false466.if.else470_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB49_250:                             # %if.else470
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB49_361
# BB#251:                               # %if.else470
	testq	%r15, %rax
	je	.LBB49_358
	jmp	.LBB49_361
.LBB49_228:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_257:                             # %sw.bb492
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	je	.LBB49_361
# BB#258:                               # %sw.bb492
	cmpq	$2, %rax
	jne	.LBB49_362
# BB#259:                               # %land.lhs.true494
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB49_264
# BB#260:                               # %lor.lhs.false497
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_264
# BB#261:                               # %lor.lhs.false500
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB49_264
# BB#262:                               # %lor.lhs.false503
	movq	%rbx, %rdi
	callq	get_attr_memory
	movl	ix86_cpu(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_265
# BB#263:                               # %lor.lhs.false503
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB49_362
	jmp	.LBB49_265
.LBB49_344:                             # %sw.bb759
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$1, %r14
	je	.LBB49_362
# BB#345:                               # %select.mid4
	movq	$70, %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_327:                             # %sw.bb693
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB49_336
# BB#328:                               # %sw.bb693
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB49_336
# BB#329:                               # %land.lhs.true701
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_338
# BB#330:                               # %lor.lhs.false704
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_338
# BB#331:                               # %lor.lhs.false707
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB49_338
# BB#332:                               # %lor.lhs.false710
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_338
# BB#333:                               # %lor.lhs.false713
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB49_338
# BB#334:                               # %lor.lhs.false716
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_338
# BB#335:                               # %lor.lhs.false716.lor.lhs.false719_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB49_336:                             # %lor.lhs.false719
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_362
# BB#337:                               # %lor.lhs.false719
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB49_362
.LBB49_338:                             # %if.then727
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB49_343
# BB#339:                               # %if.then727
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB49_343
# BB#340:                               # %land.lhs.true735
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB49_362
# BB#341:                               # %lor.lhs.false738
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_362
# BB#342:                               # %lor.lhs.false738.if.else742_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB49_343:                             # %if.else742
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB49_357
	jmp	.LBB49_361
.LBB49_289:                             # %sw.bb585
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	je	.LBB49_299
# BB#290:                               # %sw.bb585
	cmpq	$2, %rax
	jne	.LBB49_362
# BB#291:                               # %land.lhs.true587
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB49_294
# BB#292:                               # %land.lhs.true589
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_299
# BB#293:                               # %lor.lhs.false592
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_299
.LBB49_294:                             # %lor.lhs.false595
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB49_299
# BB#295:                               # %lor.lhs.false598
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_299
# BB#296:                               # %lor.lhs.false601
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB49_299
# BB#297:                               # %lor.lhs.false604
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_299
# BB#298:                               # %lor.lhs.false604
	movl	ix86_cpu(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB49_362
.LBB49_299:                             # %if.then609
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_304
# BB#300:                               # %if.then609
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB49_304
# BB#301:                               # %land.lhs.true613
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %r14
	je	.LBB49_362
# BB#302:                               # %lor.lhs.false616
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_362
# BB#303:                               # %if.else620thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB49_304:                             # %if.else620
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_361
.LBB49_288:                             # %land.lhs.true576
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
.LBB49_359:                             # %land.lhs.true799
	callq	immediate_operand
	testq	%r15, %rax
	movq	$2, %r14
	jne	.LBB49_362
# BB#360:                               # %lor.lhs.false802
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_362
	jmp	.LBB49_361
.LBB49_346:                             # %sw.bb763
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB49_353
# BB#347:                               # %sw.bb763
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB49_353
# BB#348:                               # %land.lhs.true771
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB49_355
# BB#349:                               # %lor.lhs.false774
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_355
# BB#350:                               # %lor.lhs.false777
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB49_355
# BB#351:                               # %lor.lhs.false780
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_355
# BB#352:                               # %lor.lhs.false780.lor.lhs.false783_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB49_353:                             # %lor.lhs.false783
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_362
# BB#354:                               # %lor.lhs.false783
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB49_362
.LBB49_355:                             # %if.then791
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#356:                               # %if.then791
	movl	which_alternative(%rip), %eax
.LBB49_357:                             # %if.then791
	andq	%r15, %rax
	cmpq	$2, %rax
	jbe	.LBB49_358
	jmp	.LBB49_361
.LBB49_204:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_196:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_254:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %r14
	movq	%r14, %rax
	jmp	.LBB49_38
.LBB49_305:                             # %sw.bb631
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB49_317
# BB#306:                               # %sw.bb631
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	ja	.LBB49_317
# BB#307:                               # %land.lhs.true637
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB49_308
# BB#310:                               # %land.lhs.true643
	movl	which_alternative(%rip), %eax
	jmp	.LBB49_311
.LBB49_266:                             # %sw.bb519
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$2, %rax
	jne	.LBB49_273
# BB#267:                               # %sw.bb519
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB49_273
# BB#268:                               # %land.lhs.true523
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB49_275
# BB#269:                               # %lor.lhs.false526
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_275
# BB#270:                               # %lor.lhs.false529
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB49_275
# BB#271:                               # %lor.lhs.false532
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_275
# BB#272:                               # %lor.lhs.false532.lor.lhs.false535_crit_edge
	movl	which_alternative(%rip), %ecx
	movl	ix86_cpu(%rip), %eax
.LBB49_273:                             # %lor.lhs.false535
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB49_362
# BB#274:                               # %lor.lhs.false535
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB49_362
.LBB49_275:                             # %if.then539
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#276:                               # %if.then539
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_358
	jmp	.LBB49_361
.LBB49_264:                             # %if.then508thread-pre-split
	movl	ix86_cpu(%rip), %ecx
.LBB49_265:                             # %if.then508
	andq	%r15, %rcx
	cmpq	$2, %rcx
	je	.LBB49_358
	jmp	.LBB49_361
.LBB49_308:                             # %lor.lhs.false640
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_312
# BB#309:                               # %lor.lhs.false640
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
.LBB49_311:                             # %land.lhs.true643
	cmpq	$1, %rax
	je	.LBB49_319
.LBB49_312:                             # %lor.lhs.false645
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB49_319
# BB#313:                               # %lor.lhs.false648
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB49_319
# BB#314:                               # %lor.lhs.false651
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB49_319
# BB#315:                               # %lor.lhs.false654
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_319
# BB#316:                               # %lor.lhs.false654.lor.lhs.false657_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB49_317:                             # %lor.lhs.false657
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jne	.LBB49_362
# BB#318:                               # %lor.lhs.false657
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB49_362
.LBB49_319:                             # %if.then663
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$2, %rax
	jne	.LBB49_325
# BB#320:                               # %if.then663
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB49_325
# BB#321:                               # %land.lhs.true669
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB49_322
# BB#324:                               # %land.lhs.true675
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	movq	$3, %r14
	je	.LBB49_362
	jmp	.LBB49_325
.LBB49_322:                             # %lor.lhs.false672
	movq	%rbx, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB49_325
# BB#323:                               # %lor.lhs.false672
	movq	$3, %r14
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB49_362
.LBB49_325:                             # %if.else678
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB49_361
# BB#326:                               # %if.else678
	andq	%r15, %rcx
	cmpq	$1, %rcx
	ja	.LBB49_361
.LBB49_358:                             # %land.lhs.true799
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	jmp	.LBB49_359
.LBB49_361:                             # %if.else806
	movq	$1, %r14
.LBB49_362:                             # %return
	movq	%r14, %rax
.LBB49_38:                              # %sw.bb5
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp430:
	.size	fpu_unit_ready_cost, .Ltmp430-fpu_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI49_0:
	.quad	.LBB49_223
	.quad	.LBB49_207
	.quad	.LBB49_362
	.quad	.LBB49_223
	.quad	.LBB49_207
	.quad	.LBB49_362
	.quad	.LBB49_199
	.quad	.LBB49_191
	.quad	.LBB49_170
	.quad	.LBB49_145
	.quad	.LBB49_362
	.quad	.LBB49_170
	.quad	.LBB49_170
	.quad	.LBB49_124
	.quad	.LBB49_97
	.quad	.LBB49_362
	.quad	.LBB49_124
	.quad	.LBB49_124
	.quad	.LBB49_124
	.quad	.LBB49_124
	.quad	.LBB49_76
	.quad	.LBB49_55
	.quad	.LBB49_76
	.quad	.LBB49_55
	.quad	.LBB49_76
	.quad	.LBB49_55
	.quad	.LBB49_76
	.quad	.LBB49_55
	.quad	.LBB49_76
	.quad	.LBB49_55
	.quad	.LBB49_76
	.quad	.LBB49_55
	.quad	.LBB49_76
	.quad	.LBB49_55
	.quad	.LBB49_42
	.quad	.LBB49_362
	.quad	.LBB49_39
	.quad	.LBB49_42
	.quad	.LBB49_362
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
	.quad	.LBB49_39
.LJTI49_1:
	.quad	.LBB49_346
	.quad	.LBB49_344
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_346
	.quad	.LBB49_346
	.quad	.LBB49_344
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_327
	.quad	.LBB49_327
	.quad	.LBB49_327
	.quad	.LBB49_327
	.quad	.LBB49_344
	.quad	.LBB49_344
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_305
	.quad	.LBB49_362
	.quad	.LBB49_289
	.quad	.LBB49_289
	.quad	.LBB49_289
	.quad	.LBB49_289
	.quad	.LBB49_277
	.quad	.LBB49_277
	.quad	.LBB49_266
	.quad	.LBB49_257
	.quad	.LBB49_362
	.quad	.LBB49_277
	.quad	.LBB49_257
	.quad	.LBB49_277
	.quad	.LBB49_257
	.quad	.LBB49_277
	.quad	.LBB49_257
	.quad	.LBB49_277
	.quad	.LBB49_257
	.quad	.LBB49_252
	.quad	.LBB49_252
	.quad	.LBB49_252
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_252
	.quad	.LBB49_252
	.quad	.LBB49_252
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_252
	.quad	.LBB49_252
	.quad	.LBB49_252
	.quad	.LBB49_362
	.quad	.LBB49_362
	.quad	.LBB49_277
	.quad	.LBB49_277
	.quad	.LBB49_362
	.quad	.LBB49_277
	.quad	.LBB49_277
	.quad	.LBB49_362
	.quad	.LBB49_277
	.quad	.LBB49_277
	.quad	.LBB49_362
	.quad	.LBB49_277
	.quad	.LBB49_277
	.quad	.LBB49_362
	.quad	.LBB49_234
	.quad	.LBB49_234
	.quad	.LBB49_234
	.quad	.LBB49_234
	.quad	.LBB49_234
	.quad	.LBB49_234

	.text
	.globl	fpu_unit_blockage_range
	.align	16, 0x90
	.type	fpu_unit_blockage_range,@function
fpu_unit_blockage_range:                # @fpu_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp433:
	.cfi_def_cfa_offset 16
.Ltmp434:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB50_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB50_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB50_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB50_5
.LBB50_4:                               # %sw.default
	movq	$65604, %rax            # imm = 0x10044
	popq	%rbx
	retq
.LBB50_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.fpu_unit_blockage_range, %rcx
	movq	$9038, %rdx             # imm = 0x234E
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp435:
	.size	fpu_unit_blockage_range, .Ltmp435-fpu_unit_blockage_range
	.cfi_endproc

	.globl	pent_mul_unit_ready_cost
	.align	16, 0x90
	.type	pent_mul_unit_ready_cost,@function
pent_mul_unit_ready_cost:               # @pent_mul_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp440:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp441:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp442:
	.cfi_def_cfa_offset 32
.Ltmp443:
	.cfi_offset %rbx, -32
.Ltmp444:
	.cfi_offset %r14, -24
.Ltmp445:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB51_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB51_2:                               # %cond.end
	movq	$70, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$248, %rdx
	jg	.LBB51_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB51_44
# BB#4:                                 # %sw.bb115
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB51_44
# BB#5:                                 # %land.lhs.true119
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB51_44
# BB#6:                                 # %if.then125
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_mul_unit_ready_cost, %rcx
	movq	$9235, %rdx             # imm = 0x2413
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB51_7:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB51_10
# BB#8:                                 # %cond.end
	addq	$-249, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$17, %rcx
	jae	.LBB51_44
# BB#9:                                 # %sw.bb111
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$11, %r14
	jne	.LBB51_43
	jmp	.LBB51_44
.LBB51_10:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$33, %rax
	ja	.LBB51_44
# BB#11:                                # %cond.end
	movq	$70, %r14
	jmpq	*.LJTI51_0(,%rax,8)
.LBB51_15:                              # %sw.bb12
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB51_17
# BB#16:                                # %sw.bb12
	movl	ix86_cpu(%rip), %eax
	movq	$39, %r14
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB51_44
	jmp	.LBB51_17
.LBB51_12:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB51_14
# BB#13:                                # %sw.bb
	movl	ix86_cpu(%rip), %eax
	movq	$39, %r14
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB51_44
	jmp	.LBB51_14
.LBB51_24:                              # %sw.bb40
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB51_26
# BB#25:                                # %sw.bb40
	movl	ix86_cpu(%rip), %eax
	movq	$39, %r14
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB51_44
.LBB51_26:                              # %if.else46
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	jmp	.LBB51_38
.LBB51_31:                              # %sw.bb68
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB51_37
# BB#32:                                # %sw.bb68
	movl	ix86_cpu(%rip), %eax
	movq	$39, %r14
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB51_44
	jmp	.LBB51_37
.LBB51_36:                              # %sw.bb104
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB51_37:                              # %sw.bb104
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB51_38
.LBB51_35:                              # %sw.bb95
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB51_43
	jmp	.LBB51_30
.LBB51_34:                              # %sw.bb88
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB51_17:                              # %if.else18
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB51_38
.LBB51_33:                              # %sw.bb81
	movq	%rbx, %rdi
	callq	extract_insn_cached
.LBB51_14:                              # %if.else
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
.LBB51_38:                              # %sw.bb104
	callq	mult_operator
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	je	.LBB51_40
# BB#39:                                # %sw.bb104
	movq	%rdx, %rcx
.LBB51_40:                              # %sw.bb104
	movl	ix86_cpu(%rip), %esi
	cmpq	$2, %rsi
	jne	.LBB51_42
# BB#41:                                # %sw.bb104
	movq	%rdx, %rax
.LBB51_42:                              # %sw.bb104
	testq	%rax, %rcx
	movq	$2, %r14
	jne	.LBB51_44
	jmp	.LBB51_43
.LBB51_27:                              # %sw.bb53
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB51_29
# BB#28:                                # %sw.bb53
	movl	ix86_cpu(%rip), %eax
	movq	$39, %r14
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB51_44
.LBB51_29:                              # %if.else59
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB51_43
.LBB51_30:                              # %land.lhs.true61
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB51_22
.LBB51_18:                              # %sw.bb25
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB51_20
# BB#19:                                # %sw.bb25
	movl	ix86_cpu(%rip), %eax
	movq	$39, %r14
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB51_44
.LBB51_20:                              # %if.else31
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB51_43
# BB#21:                                # %land.lhs.true33
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
.LBB51_22:                              # %land.lhs.true33
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB51_43
# BB#23:                                # %land.lhs.true33
	movl	ix86_cpu(%rip), %eax
	movq	$2, %r14
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB51_44
.LBB51_43:                              # %sw.bb104
	movq	$70, %r14
.LBB51_44:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp446:
	.size	pent_mul_unit_ready_cost, .Ltmp446-pent_mul_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI51_0:
	.quad	.LBB51_36
	.quad	.LBB51_35
	.quad	.LBB51_44
	.quad	.LBB51_36
	.quad	.LBB51_35
	.quad	.LBB51_44
	.quad	.LBB51_34
	.quad	.LBB51_33
	.quad	.LBB51_31
	.quad	.LBB51_27
	.quad	.LBB51_44
	.quad	.LBB51_31
	.quad	.LBB51_31
	.quad	.LBB51_24
	.quad	.LBB51_18
	.quad	.LBB51_44
	.quad	.LBB51_24
	.quad	.LBB51_24
	.quad	.LBB51_24
	.quad	.LBB51_24
	.quad	.LBB51_15
	.quad	.LBB51_12
	.quad	.LBB51_15
	.quad	.LBB51_12
	.quad	.LBB51_15
	.quad	.LBB51_12
	.quad	.LBB51_15
	.quad	.LBB51_12
	.quad	.LBB51_15
	.quad	.LBB51_12
	.quad	.LBB51_15
	.quad	.LBB51_12
	.quad	.LBB51_15
	.quad	.LBB51_12

	.text
	.globl	pent_mul_unit_blockage_range
	.align	16, 0x90
	.type	pent_mul_unit_blockage_range,@function
pent_mul_unit_blockage_range:           # @pent_mul_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp449:
	.cfi_def_cfa_offset 16
.Ltmp450:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB52_4
# BB#1:                                 # %cond.end
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB52_4
# BB#2:                                 # %sw.bb
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB52_4
# BB#3:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB52_5
.LBB52_4:                               # %sw.default
	movq	$131142, %rax           # imm = 0x20046
	popq	%rbx
	retq
.LBB52_5:                               # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_mul_unit_blockage_range, %rcx
	movq	$9252, %rdx             # imm = 0x2424
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp451:
	.size	pent_mul_unit_blockage_range, .Ltmp451-pent_mul_unit_blockage_range
	.cfi_endproc

	.globl	pent_np_unit_ready_cost
	.align	16, 0x90
	.type	pent_np_unit_ready_cost,@function
pent_np_unit_ready_cost:                # @pent_np_unit_ready_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp457:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp458:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp459:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp460:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp461:
	.cfi_def_cfa_offset 48
.Ltmp462:
	.cfi_offset %rbx, -40
.Ltmp463:
	.cfi_offset %r12, -32
.Ltmp464:
	.cfi_offset %r14, -24
.Ltmp465:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB53_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB53_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$637, %rax              # imm = 0x27D
	ja	.LBB53_447
# BB#3:                                 # %cond.end
	movq	$46, %rbx
	jmpq	*.LJTI53_0(,%rax,8)
.LBB53_317:                             # %sw.bb917
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#318:                               # %if.then919
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_320
# BB#319:                               # %land.lhs.true922
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_320:                             # %lor.lhs.false925
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_322
# BB#321:                               # %land.lhs.true928
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_322:                             # %if.else932
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_325
# BB#323:                               # %land.lhs.true935
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#324:                               # %lor.lhs.false938
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_325:                             # %lor.lhs.false941
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_328
# BB#326:                               # %land.lhs.true944
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#327:                               # %lor.lhs.false947
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_328:                             # %if.else951
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_444:                             # %sw.bb1288
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %rbx
	jne	.LBB53_448
	jmp	.LBB53_449
.LBB53_52:                              # %sw.bb121
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_448
# BB#53:                                # %land.lhs.true123
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_57
# BB#54:                                # %lor.lhs.false126
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB53_57
# BB#55:                                # %lor.lhs.false129
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_448
# BB#56:                                # %land.lhs.true132
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	movq	$46, %rbx
	je	.LBB53_449
.LBB53_57:                              # %if.then135
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_59
# BB#58:                                # %lor.lhs.false138
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB53_60
.LBB53_59:                              # %land.lhs.true141
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_60:                              # %lor.lhs.false144
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_63
# BB#61:                                # %land.lhs.true147
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB53_63
# BB#62:                                # %land.lhs.true150
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_63:                              # %if.else154
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_65
# BB#64:                                # %lor.lhs.false157
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB53_67
.LBB53_65:                              # %land.lhs.true160
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#66:                                # %lor.lhs.false163
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_67:                              # %lor.lhs.false166
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_71
# BB#68:                                # %land.lhs.true169
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB53_71
# BB#69:                                # %land.lhs.true172
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#70:                                # %lor.lhs.false175
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_71:                              # %if.else179
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_21:                              # %sw.bb48
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$12, %rbx
	jne	.LBB53_448
	jmp	.LBB53_449
.LBB53_441:                             # %sw.bb1281
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#442:                               # %if.then1283
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#443:                               # %select.mid12
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_435:                             # %sw.bb1269
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#436:                               # %if.then1271
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	movq	$3, %rbx
	jne	.LBB53_449
# BB#437:                               # %if.else1275
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB53_438
# BB#439:                               # %if.else1275
	movabsq	$1, %rbx
	incq	%rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_214:                             # %sw.bb611
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$11, %rbx
	jne	.LBB53_448
	jmp	.LBB53_449
.LBB53_162:                             # %sw.bb431
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#163:                               # %if.then433
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB53_164
# BB#165:                               # %if.then433
	movabsq	$1, %rax
	leaq	1(%rax,%rax), %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_146:                             # %sw.bb383
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#147:                               # %if.then385
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB53_149
# BB#148:                               # %lor.lhs.false388
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB53_153
.LBB53_149:                             # %land.lhs.true391
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_151
# BB#150:                               # %land.lhs.true394
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_151:                             # %lor.lhs.false397
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_153
# BB#152:                               # %land.lhs.true400
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_153:                             # %if.else404
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB53_155
# BB#154:                               # %lor.lhs.false407
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB53_161
.LBB53_155:                             # %land.lhs.true410
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_158
# BB#156:                               # %land.lhs.true413
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#157:                               # %lor.lhs.false416
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_158:                             # %lor.lhs.false419
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_161
# BB#159:                               # %land.lhs.true422
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#160:                               # %lor.lhs.false425
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_161:                             # %if.else429
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_329:                             # %sw.bb953
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#330:                               # %if.then955
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
# BB#331:                               # %if.else959
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#332:                               # %lor.lhs.false962
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB53_333
# BB#334:                               # %lor.lhs.false962
	movabsq	$1, %rbx
	incq	%rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_28:                              # %sw.bb62
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#29:                                # %if.then64
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#30:                                # %lor.lhs.false67
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB53_32
# BB#31:
	movabsq	$0, %rbx
	jmp	.LBB53_33
.LBB53_22:                              # %sw.bb52
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#23:                                # %if.then54
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#24:                                # %lor.lhs.false57
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB53_25
# BB#26:                                # %lor.lhs.false57
	movabsq	$1, %rax
	jmp	.LBB53_27
.LBB53_336:                             # %sw.bb968
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#337:                               # %if.then970
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB53_341
# BB#338:                               # %land.lhs.true972
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB53_449
# BB#339:                               # %lor.lhs.false975
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
# BB#340:                               # %lor.lhs.false975.if.else979_crit_edge
	movl	which_alternative(%rip), %eax
.LBB53_341:                             # %if.else979
	testq	%r15, %rax
	jne	.LBB53_342
# BB#343:                               # %if.else979
	movabsq	$1, %rbx
	incq	%rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_275:                             # %sw.bb791
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#276:                               # %if.then793
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_281
# BB#277:                               # %land.lhs.true796
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_279
# BB#278:                               # %land.lhs.true799
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_279:                             # %lor.lhs.false802
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_281
# BB#280:                               # %land.lhs.true805
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_281:                             # %if.else809
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_288
# BB#282:                               # %land.lhs.true812
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_285
# BB#283:                               # %land.lhs.true815
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#284:                               # %lor.lhs.false818
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_285:                             # %lor.lhs.false821
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_288
# BB#286:                               # %land.lhs.true824
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#287:                               # %lor.lhs.false827
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_288:                             # %if.else831
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_245:                             # %sw.bb703
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#246:                               # %if.then705
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_251
# BB#247:                               # %land.lhs.true708
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_249
# BB#248:                               # %land.lhs.true711
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_249:                             # %lor.lhs.false714
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_251
# BB#250:                               # %land.lhs.true717
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_251:                             # %if.else721
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_258
# BB#252:                               # %land.lhs.true724
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_255
# BB#253:                               # %land.lhs.true727
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#254:                               # %lor.lhs.false730
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_255:                             # %lor.lhs.false733
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_258
# BB#256:                               # %land.lhs.true736
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#257:                               # %lor.lhs.false739
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_258:                             # %if.else743
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_215:                             # %sw.bb615
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#216:                               # %if.then617
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_221
# BB#217:                               # %land.lhs.true620
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_219
# BB#218:                               # %land.lhs.true623
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_219:                             # %lor.lhs.false626
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_221
# BB#220:                               # %land.lhs.true629
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_221:                             # %if.else633
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_228
# BB#222:                               # %land.lhs.true636
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_225
# BB#223:                               # %land.lhs.true639
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#224:                               # %lor.lhs.false642
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_225:                             # %lor.lhs.false645
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_228
# BB#226:                               # %land.lhs.true648
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#227:                               # %lor.lhs.false651
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_228:                             # %if.else655
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_39:                              # %sw.bb86
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#40:                                # %if.then88
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#41:                                # %lor.lhs.false91
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB53_32
# BB#42:
	movabsq	$0, %rbx
	jmp	.LBB53_33
.LBB53_429:                             # %sw.bb1253
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_434
# BB#430:                               # %land.lhs.true1255
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$1, %rbx
	je	.LBB53_449
# BB#431:                               # %lor.lhs.false1258
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB53_449
# BB#432:                               # %lor.lhs.false1261
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_434
# BB#433:                               # %land.lhs.true1264
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB53_449
.LBB53_434:                             # %if.else1268
	movq	$46, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_374:                             # %sw.bb1059
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#375:                               # %if.then1061
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB53_379
# BB#376:                               # %land.lhs.true1067
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB53_449
# BB#377:                               # %lor.lhs.false1070
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
# BB#378:                               # %lor.lhs.false1070.if.else1074_crit_edge
	movl	which_alternative(%rip), %eax
.LBB53_379:                             # %if.else1074
	andq	%r15, %rax
	cmpq	$3, %rax
	jmp	.LBB53_360
.LBB53_348:                             # %sw.bb991
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#349:                               # %if.then993
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB53_352
# BB#350:                               # %land.lhs.true995
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB53_449
# BB#351:                               # %lor.lhs.false998
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_352:                             # %if.else1002
	movq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_289:                             # %sw.bb833
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#290:                               # %if.then835
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_295
# BB#291:                               # %land.lhs.true838
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_293
# BB#292:                               # %land.lhs.true841
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_293:                             # %lor.lhs.false844
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_295
# BB#294:                               # %land.lhs.true847
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_295:                             # %if.else851
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_302
# BB#296:                               # %land.lhs.true854
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_299
# BB#297:                               # %land.lhs.true857
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#298:                               # %lor.lhs.false860
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_299:                             # %lor.lhs.false863
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_302
# BB#300:                               # %land.lhs.true866
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#301:                               # %lor.lhs.false869
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_302:                             # %if.else873
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_164:
	movabsq	$0, %rax
	leaq	1(%rax,%rax), %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_303:                             # %sw.bb875
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#304:                               # %if.then877
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB53_309
# BB#305:                               # %land.lhs.true880
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_307
# BB#306:                               # %land.lhs.true883
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_307:                             # %lor.lhs.false886
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_309
# BB#308:                               # %land.lhs.true889
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_309:                             # %if.else893
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB53_316
# BB#310:                               # %land.lhs.true896
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_313
# BB#311:                               # %land.lhs.true899
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#312:                               # %lor.lhs.false902
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_313:                             # %lor.lhs.false905
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_316
# BB#314:                               # %land.lhs.true908
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#315:                               # %lor.lhs.false911
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_316:                             # %if.else915
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_72:                              # %sw.bb181
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_448
# BB#73:                                # %land.lhs.true183
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_80
# BB#74:                                # %land.lhs.true183
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_80
# BB#75:                                # %lor.lhs.false188
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB53_79
# BB#76:                                # %lor.lhs.false191
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_448
# BB#77:                                # %lor.lhs.false191
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_448
# BB#78:                                # %land.lhs.true196
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	movq	$46, %rbx
	je	.LBB53_449
.LBB53_79:                              # %if.then199thread-pre-split
	movl	which_alternative(%rip), %ecx
.LBB53_80:                              # %if.then199
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB53_84
# BB#81:                                # %land.lhs.true201
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_83
# BB#82:                                # %lor.lhs.false204
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB53_84
.LBB53_83:                              # %land.lhs.true207
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_84:                              # %lor.lhs.false210
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_89
# BB#85:                                # %lor.lhs.false210
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_89
# BB#86:                                # %land.lhs.true215
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB53_88
# BB#87:                                # %land.lhs.true218
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_88:                              # %if.else222thread-pre-split
	movl	which_alternative(%rip), %ecx
.LBB53_89:                              # %if.else222
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB53_94
# BB#90:                                # %land.lhs.true224
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_92
# BB#91:                                # %lor.lhs.false227
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB53_94
.LBB53_92:                              # %land.lhs.true230
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#93:                                # %lor.lhs.false233
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_94:                              # %lor.lhs.false236
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_99
# BB#95:                                # %lor.lhs.false236
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_99
# BB#96:                                # %land.lhs.true241
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB53_99
# BB#97:                                # %land.lhs.true244
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#98:                                # %lor.lhs.false247
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_99:                              # %if.else251
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_48:                              # %sw.bb110
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#49:                                # %if.then112
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#50:                                # %lor.lhs.false115
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB53_51
.LBB53_32:                              # %lor.lhs.false67
	movabsq	$1, %rbx
	jmp	.LBB53_33
.LBB53_18:                              # %sw.bb39
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#19:                                # %if.then41
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %rbx
	jb	.LBB53_449
# BB#20:                                # %select.mid
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_393:                             # %sw.bb1131
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_398
# BB#394:                               # %land.lhs.true1133
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$1, %rbx
	jne	.LBB53_449
# BB#395:                               # %lor.lhs.false1135
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB53_449
# BB#396:                               # %lor.lhs.false1138
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB53_398
# BB#397:                               # %land.lhs.true1140
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB53_449
.LBB53_398:                             # %if.else1144
	movq	$46, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_380:                             # %sw.bb1083
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#381:                               # %if.then1085
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$2, %rbx
	jb	.LBB53_449
# BB#382:                               # %select.mid10
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_367:                             # %sw.bb1040
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#368:                               # %if.then1042
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB53_373
# BB#369:                               # %land.lhs.true1044
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
# BB#370:                               # %if.else1048
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB53_373
# BB#371:                               # %land.lhs.true1050
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#372:                               # %lor.lhs.false1053
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_373:                             # %if.else1057
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_167:                             # %sw.bb439
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_448
# BB#168:                               # %land.lhs.true441
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_172
# BB#169:                               # %land.lhs.true441
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB53_172
# BB#170:                               # %lor.lhs.false448
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_448
# BB#171:                               # %lor.lhs.false448
	movl	which_alternative(%rip), %ecx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$46, %rbx
	ja	.LBB53_449
.LBB53_172:                             # %if.then455
	andq	%r15, %rcx
	cmpq	$1, %rcx
	ja	.LBB53_178
# BB#173:                               # %land.lhs.true459
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_175
# BB#174:                               # %land.lhs.true459
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB53_176
.LBB53_175:                             # %land.lhs.true466
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_176:                             # %lor.lhs.false469
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_178
# BB#177:                               # %land.lhs.true472
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_178:                             # %if.else476
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB53_186
# BB#179:                               # %land.lhs.true480
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_181
# BB#180:                               # %land.lhs.true480
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB53_183
.LBB53_181:                             # %land.lhs.true487
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#182:                               # %lor.lhs.false490
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_183:                             # %lor.lhs.false493
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_186
# BB#184:                               # %land.lhs.true496
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#185:                               # %lor.lhs.false499
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_186:                             # %if.else503
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_4:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#5:                                 # %if.then
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB53_17
# BB#6:                                 # %land.lhs.true
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_8
# BB#7:                                 # %land.lhs.true8
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_8:                               # %lor.lhs.false
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_10
# BB#9:                                 # %land.lhs.true13
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_10:                              # %if.else
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB53_17
# BB#11:                                # %land.lhs.true18
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_14
# BB#12:                                # %land.lhs.true21
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#13:                                # %lor.lhs.false24
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_14:                              # %lor.lhs.false27
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_17
# BB#15:                                # %land.lhs.true30
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#16:                                # %lor.lhs.false33
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_17:                              # %if.else37
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_438:
	movabsq	$0, %rbx
	incq	%rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_342:
	movabsq	$0, %rbx
	incq	%rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_445:                             # %sw.bb1292
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB53_447
# BB#446:                               # %land.lhs.true1296
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB53_450
.LBB53_447:                             # %sw.default
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$1, %rbx
	je	.LBB53_449
	jmp	.LBB53_448
.LBB53_413:                             # %sw.bb1183
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_428
# BB#414:                               # %land.lhs.true1185
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$1, %rbx
	je	.LBB53_449
# BB#415:                               # %lor.lhs.false1188
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB53_449
# BB#416:                               # %lor.lhs.false1188
	cmpq	$3, %rax
	jne	.LBB53_419
# BB#417:                               # %lor.lhs.false1190
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB53_421
# BB#418:                               # %land.lhs.true1194
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB53_449
	jmp	.LBB53_421
.LBB53_405:                             # %sw.bb1159
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_412
# BB#406:                               # %land.lhs.true1161
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$1, %rbx
	je	.LBB53_449
# BB#407:                               # %lor.lhs.false1164
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB53_449
# BB#408:                               # %lor.lhs.false1167
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	jne	.LBB53_449
# BB#409:                               # %lor.lhs.false1171
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_412
# BB#410:                               # %land.lhs.true1174
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB53_412
# BB#411:                               # %land.lhs.true1177
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB53_449
.LBB53_412:                             # %if.else1182
	movq	$46, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_399:                             # %sw.bb1145
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_404
# BB#400:                               # %land.lhs.true1147
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$1, %rbx
	jne	.LBB53_449
# BB#401:                               # %lor.lhs.false1149
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB53_449
# BB#402:                               # %lor.lhs.false1152
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB53_404
# BB#403:                               # %land.lhs.true1154
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB53_449
.LBB53_404:                             # %if.else1158
	movq	$46, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_383:                             # %sw.bb1094
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_448
# BB#384:                               # %land.lhs.true1096
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_392
# BB#385:                               # %land.lhs.true1096
	leaq	-3(%rcx), %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB53_392
# BB#386:                               # %lor.lhs.false1103
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_391
# BB#387:                               # %lor.lhs.false1103
	testq	%r15, %rcx
	je	.LBB53_391
# BB#388:                               # %lor.lhs.false1103
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_391
# BB#389:                               # %lor.lhs.false1103
	cmpq	$2, %rax
	je	.LBB53_391
# BB#390:                               # %land.lhs.true1112
	cmpq	$5, %rax
	movq	$46, %rbx
	jb	.LBB53_392
	jmp	.LBB53_449
.LBB53_361:                             # %sw.bb1026
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_366
# BB#362:                               # %land.lhs.true1028
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$1, %rbx
	jne	.LBB53_449
# BB#363:                               # %lor.lhs.false1030
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_449
# BB#364:                               # %lor.lhs.false1033
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB53_366
# BB#365:                               # %land.lhs.true1035
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_449
.LBB53_366:                             # %if.else1039
	movq	$46, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_353:                             # %sw.bb1004
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#354:                               # %if.then1006
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	ja	.LBB53_359
# BB#355:                               # %land.lhs.true1010
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB53_356
# BB#358:                               # %land.lhs.true1016
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	movq	$3, %rbx
	je	.LBB53_449
	jmp	.LBB53_359
.LBB53_345:                             # %sw.bb984
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#346:                               # %if.then986
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#347:                               # %select.mid8
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_259:                             # %sw.bb745
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#260:                               # %if.then747
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB53_274
# BB#261:                               # %land.lhs.true749
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_266
# BB#262:                               # %land.lhs.true752
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_264
# BB#263:                               # %land.lhs.true755
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_264:                             # %lor.lhs.false758
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_266
# BB#265:                               # %land.lhs.true761
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_266:                             # %if.else765
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB53_274
# BB#267:                               # %land.lhs.true767
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_274
# BB#268:                               # %land.lhs.true770
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_271
# BB#269:                               # %land.lhs.true773
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#270:                               # %lor.lhs.false776
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_271:                             # %lor.lhs.false779
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_274
# BB#272:                               # %land.lhs.true782
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#273:                               # %lor.lhs.false785
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_274:                             # %if.else789
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_229:                             # %sw.bb657
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#230:                               # %if.then659
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB53_244
# BB#231:                               # %land.lhs.true661
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_236
# BB#232:                               # %land.lhs.true664
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_234
# BB#233:                               # %land.lhs.true667
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_234:                             # %lor.lhs.false670
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_236
# BB#235:                               # %land.lhs.true673
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_236:                             # %if.else677
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB53_244
# BB#237:                               # %land.lhs.true679
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB53_244
# BB#238:                               # %land.lhs.true682
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_241
# BB#239:                               # %land.lhs.true685
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#240:                               # %lor.lhs.false688
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_241:                             # %lor.lhs.false691
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_244
# BB#242:                               # %land.lhs.true694
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#243:                               # %lor.lhs.false697
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_244:                             # %if.else701
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_210:                             # %sw.bb595
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_213
# BB#211:                               # %land.lhs.true597
	movl	which_alternative(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	movq	$1, %rbx
	je	.LBB53_449
# BB#212:                               # %lor.lhs.false601
	orq	$2, %rax
	cmpq	$3, %rax
	jne	.LBB53_449
.LBB53_213:                             # %if.else606
	movq	$46, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_207:                             # %sw.bb583
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$1, %rax
	je	.LBB53_209
# BB#208:                               # %select.mid4
	movq	$46, %rax
	jmp	.LBB53_209
.LBB53_187:                             # %sw.bb505
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB53_448
# BB#188:                               # %land.lhs.true507
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_192
# BB#189:                               # %land.lhs.true507
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB53_192
# BB#190:                               # %lor.lhs.false516
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_448
# BB#191:                               # %lor.lhs.false516
	movl	which_alternative(%rip), %ecx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$46, %rbx
	ja	.LBB53_449
.LBB53_192:                             # %if.then525
	andq	%r15, %rcx
	cmpq	$2, %rcx
	ja	.LBB53_198
# BB#193:                               # %land.lhs.true531
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_195
# BB#194:                               # %land.lhs.true531
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	jb	.LBB53_196
.LBB53_195:                             # %land.lhs.true540
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_196:                             # %lor.lhs.false543
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_198
# BB#197:                               # %land.lhs.true546
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_198:                             # %if.else550
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB53_206
# BB#199:                               # %land.lhs.true556
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_201
# BB#200:                               # %land.lhs.true556
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$3, %rax
	jb	.LBB53_203
.LBB53_201:                             # %land.lhs.true565
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#202:                               # %lor.lhs.false568
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_203:                             # %lor.lhs.false571
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_206
# BB#204:                               # %land.lhs.true574
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#205:                               # %lor.lhs.false577
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_206:                             # %if.else581
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_448:                             # %select.mid16
	movq	$46, %rbx
.LBB53_449:                             # %return
	movq	%rbx, %rax
.LBB53_209:                             # %select.end3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB53_122:                             # %sw.bb315
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#123:                               # %if.then317
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB53_145
# BB#124:                               # %land.lhs.true319
	movl	x86_double_with_add(%rip), %r12d
	testq	$4, %r12
	movq	$2, %rcx
	je	.LBB53_127
# BB#125:                               # %land.lhs.true323
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB53_129
# BB#126:                               # %land.lhs.true323.lor.lhs.false326_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB53_127:                             # %lor.lhs.false326
	movq	$1, %rax
	shlq	%cl, %rax
	testq	%r12, %rax
	je	.LBB53_129
# BB#128:                               # %lor.lhs.false330
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB53_133
.LBB53_129:                             # %land.lhs.true333
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_131
# BB#130:                               # %land.lhs.true336
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_131:                             # %lor.lhs.false339
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_133
# BB#132:                               # %land.lhs.true342
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_133:                             # %if.else346
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB53_145
# BB#134:                               # %land.lhs.true348
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	%r12, %rdx
	je	.LBB53_137
# BB#135:                               # %land.lhs.true352
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB53_139
# BB#136:                               # %land.lhs.true352.lor.lhs.false355_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB53_137:                             # %lor.lhs.false355
	movq	%rax, %rcx
	shlq	%cl, %rbx
	testq	%r12, %rbx
	je	.LBB53_139
# BB#138:                               # %lor.lhs.false359
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB53_145
.LBB53_139:                             # %land.lhs.true362
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_142
# BB#140:                               # %land.lhs.true365
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#141:                               # %lor.lhs.false368
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_142:                             # %lor.lhs.false371
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_145
# BB#143:                               # %land.lhs.true374
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#144:                               # %lor.lhs.false377
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_145:                             # %if.else381
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_100:                             # %sw.bb253
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#101:                               # %if.then255
	movl	x86_double_with_add(%rip), %r12d
	testq	$4, %r12
	movq	$2, %rcx
	je	.LBB53_104
# BB#102:                               # %land.lhs.true257
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB53_106
# BB#103:                               # %land.lhs.true257.lor.lhs.false260_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB53_104:                             # %lor.lhs.false260
	movq	$1, %rax
	shlq	%cl, %rax
	testq	%r12, %rax
	je	.LBB53_106
# BB#105:                               # %lor.lhs.false264
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB53_110
.LBB53_106:                             # %land.lhs.true267
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_108
# BB#107:                               # %land.lhs.true270
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_108:                             # %lor.lhs.false273
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_110
# BB#109:                               # %land.lhs.true276
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB53_449
.LBB53_110:                             # %if.else280
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	testq	%r12, %rax
	je	.LBB53_113
# BB#111:                               # %land.lhs.true284
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB53_115
# BB#112:                               # %land.lhs.true284.lor.lhs.false287_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB53_113:                             # %lor.lhs.false287
	shlq	%cl, %rbx
	testq	%r12, %rbx
	je	.LBB53_115
# BB#114:                               # %lor.lhs.false291
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB53_121
.LBB53_115:                             # %land.lhs.true294
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB53_118
# BB#116:                               # %land.lhs.true297
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#117:                               # %lor.lhs.false300
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_118:                             # %lor.lhs.false303
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB53_121
# BB#119:                               # %land.lhs.true306
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#120:                               # %lor.lhs.false309
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_121:                             # %if.else313
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_43:                              # %sw.bb97
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#44:                                # %if.then99
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#45:                                # %lor.lhs.false102
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB53_47
# BB#46:                                # %land.lhs.true104
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB53_449
.LBB53_47:                              # %if.else108
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_34:                              # %sw.bb73
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rbx
	jne	.LBB53_449
# BB#35:                                # %if.then75
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	movq	$2, %rbx
	je	.LBB53_449
# BB#36:                                # %lor.lhs.false78
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB53_38
# BB#37:                                # %land.lhs.true80
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB53_449
.LBB53_38:                              # %if.else84
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_25:
	movabsq	$0, %rax
.LBB53_27:                              # %lor.lhs.false57
	xorq	$1, %rax
	incq	%rax
	jmp	.LBB53_209
.LBB53_333:
	movabsq	$0, %rbx
	incq	%rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_51:
	movabsq	$0, %rbx
.LBB53_33:                              # %lor.lhs.false67
	xorq	$1, %rbx
	incq	%rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_356:                             # %lor.lhs.false1013
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB53_359
# BB#357:                               # %lor.lhs.false1013
	movq	$3, %rbx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_449
.LBB53_359:                             # %if.else1019
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jmp	.LBB53_360
.LBB53_419:                             # %lor.lhs.false1212
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB53_421
# BB#420:                               # %lor.lhs.false1212
	cmpq	$2, %rax
	je	.LBB53_449
.LBB53_421:                             # %lor.lhs.false1218
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB53_428
# BB#422:                               # %land.lhs.true1221
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB53_428
# BB#423:                               # %land.lhs.true1221
	cmpq	$3, %rax
	jne	.LBB53_426
# BB#424:                               # %land.lhs.true1223
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB53_449
# BB#425:                               # %lor.lhs.false1227
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB53_428
	jmp	.LBB53_449
.LBB53_450:                             # %if.then1302
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_ready_cost, %rcx
	movq	$10478, %rdx            # imm = 0x28EE
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB53_391:                             # %lor.lhs.false1116
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$46, %rbx
	ja	.LBB53_449
.LBB53_392:                             # %if.then1122
	andq	%r15, %rcx
	cmpq	$3, %rcx
.LBB53_360:                             # %return
	sbbq	%rbx, %rbx
	andq	$1, %rbx
	incq	%rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.LBB53_426:                             # %land.lhs.true1245
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB53_449
# BB#427:                               # %land.lhs.true1245
	cmpq	$2, %rax
	jne	.LBB53_449
.LBB53_428:                             # %if.else1252
	movq	$46, %rbx
	movq	%rbx, %rax
	jmp	.LBB53_209
.Ltmp466:
	.size	pent_np_unit_ready_cost, .Ltmp466-pent_np_unit_ready_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI53_0:
	.quad	.LBB53_445
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_435
	.quad	.LBB53_435
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_429
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_435
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_413
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_435
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_429
	.quad	.LBB53_429
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_429
	.quad	.LBB53_405
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_399
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_435
	.quad	.LBB53_435
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_393
	.quad	.LBB53_393
	.quad	.LBB53_383
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_380
	.quad	.LBB53_380
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_374
	.quad	.LBB53_374
	.quad	.LBB53_374
	.quad	.LBB53_374
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_435
	.quad	.LBB53_447
	.quad	.LBB53_435
	.quad	.LBB53_367
	.quad	.LBB53_447
	.quad	.LBB53_435
	.quad	.LBB53_367
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_361
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_353
	.quad	.LBB53_447
	.quad	.LBB53_348
	.quad	.LBB53_348
	.quad	.LBB53_348
	.quad	.LBB53_348
	.quad	.LBB53_441
	.quad	.LBB53_441
	.quad	.LBB53_345
	.quad	.LBB53_444
	.quad	.LBB53_447
	.quad	.LBB53_441
	.quad	.LBB53_444
	.quad	.LBB53_441
	.quad	.LBB53_444
	.quad	.LBB53_441
	.quad	.LBB53_444
	.quad	.LBB53_441
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_441
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_441
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_441
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_441
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_336
	.quad	.LBB53_336
	.quad	.LBB53_336
	.quad	.LBB53_336
	.quad	.LBB53_336
	.quad	.LBB53_336
	.quad	.LBB53_447
	.quad	.LBB53_329
	.quad	.LBB53_317
	.quad	.LBB53_329
	.quad	.LBB53_329
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_303
	.quad	.LBB53_289
	.quad	.LBB53_289
	.quad	.LBB53_289
	.quad	.LBB53_289
	.quad	.LBB53_303
	.quad	.LBB53_303
	.quad	.LBB53_275
	.quad	.LBB53_275
	.quad	.LBB53_275
	.quad	.LBB53_275
	.quad	.LBB53_275
	.quad	.LBB53_275
	.quad	.LBB53_259
	.quad	.LBB53_245
	.quad	.LBB53_245
	.quad	.LBB53_245
	.quad	.LBB53_245
	.quad	.LBB53_245
	.quad	.LBB53_229
	.quad	.LBB53_215
	.quad	.LBB53_215
	.quad	.LBB53_215
	.quad	.LBB53_245
	.quad	.LBB53_215
	.quad	.LBB53_215
	.quad	.LBB53_215
	.quad	.LBB53_317
	.quad	.LBB53_447
	.quad	.LBB53_329
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_329
	.quad	.LBB53_329
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_214
	.quad	.LBB53_449
	.quad	.LBB53_449
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_449
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_449
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_449
	.quad	.LBB53_447
	.quad	.LBB53_449
	.quad	.LBB53_449
	.quad	.LBB53_210
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_207
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_187
	.quad	.LBB53_317
	.quad	.LBB53_167
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_167
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_435
	.quad	.LBB53_317
	.quad	.LBB53_435
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_435
	.quad	.LBB53_317
	.quad	.LBB53_435
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_317
	.quad	.LBB53_447
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_162
	.quad	.LBB53_435
	.quad	.LBB53_162
	.quad	.LBB53_162
	.quad	.LBB53_435
	.quad	.LBB53_435
	.quad	.LBB53_162
	.quad	.LBB53_435
	.quad	.LBB53_162
	.quad	.LBB53_435
	.quad	.LBB53_146
	.quad	.LBB53_146
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_329
	.quad	.LBB53_146
	.quad	.LBB53_122
	.quad	.LBB53_146
	.quad	.LBB53_100
	.quad	.LBB53_146
	.quad	.LBB53_146
	.quad	.LBB53_146
	.quad	.LBB53_146
	.quad	.LBB53_146
	.quad	.LBB53_146
	.quad	.LBB53_72
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_329
	.quad	.LBB53_72
	.quad	.LBB53_72
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_52
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_317
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_48
	.quad	.LBB53_43
	.quad	.LBB53_447
	.quad	.LBB53_48
	.quad	.LBB53_48
	.quad	.LBB53_39
	.quad	.LBB53_34
	.quad	.LBB53_447
	.quad	.LBB53_39
	.quad	.LBB53_39
	.quad	.LBB53_39
	.quad	.LBB53_39
	.quad	.LBB53_28
	.quad	.LBB53_22
	.quad	.LBB53_28
	.quad	.LBB53_22
	.quad	.LBB53_28
	.quad	.LBB53_22
	.quad	.LBB53_28
	.quad	.LBB53_22
	.quad	.LBB53_28
	.quad	.LBB53_22
	.quad	.LBB53_28
	.quad	.LBB53_22
	.quad	.LBB53_28
	.quad	.LBB53_22
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_441
	.quad	.LBB53_447
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_21
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_18
	.quad	.LBB53_18
	.quad	.LBB53_18
	.quad	.LBB53_444
	.quad	.LBB53_444
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_447
	.quad	.LBB53_4
	.quad	.LBB53_4

	.text
	.globl	pent_np_unit_blockage_range
	.align	16, 0x90
	.type	pent_np_unit_blockage_range,@function
pent_np_unit_blockage_range:            # @pent_np_unit_blockage_range
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp471:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp472:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp473:
	.cfi_def_cfa_offset 32
.Ltmp474:
	.cfi_offset %rbx, -32
.Ltmp475:
	.cfi_offset %r14, -24
.Ltmp476:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB54_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	%rax, %rcx
.LBB54_2:                               # %cond.end
	incq	%rcx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rcx
	movq	$65582, %rax            # imm = 0x1002E
	cmpq	$657, %rcx              # imm = 0x291
	ja	.LBB54_50
# BB#3:                                 # %cond.end
	jmpq	*.LJTI54_0(,%rcx,8)
.LBB54_240:                             # %sw.bb607
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#241:                               # %if.then609
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
# BB#242:                               # %if.then609
	movq	$46, %rax
	jmp	.LBB54_50
.LBB54_238:                             # %sw.bb603
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rax
	je	.LBB54_50
# BB#239:                               # %select.mid14
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_39:                              # %sw.bb92
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_40
# BB#41:                                # %land.lhs.true94
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_47
# BB#42:                                # %lor.lhs.false97
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r14, %rax
	je	.LBB54_47
# BB#43:                                # %lor.lhs.false100
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_45
# BB#44:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_227:                             # %sw.bb576
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$46, %rax
	je	.LBB54_50
# BB#228:                               # %select.mid10
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_40:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_235:                             # %sw.bb596
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#236:                               # %if.then598
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$46, %rax
	je	.LBB54_50
# BB#237:                               # %select.mid12
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_225:                             # %sw.bb568
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#226:                               # %if.then570
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r14, %rax
	cmpq	$3, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
	jmp	.LBB54_49
.LBB54_232:                             # %sw.bb588
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#233:                               # %if.then590
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	movq	$46, %rax
	je	.LBB54_50
# BB#234:                               # %if.then590
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_10:                              # %sw.bb18
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_11
# BB#12:                                # %if.then20
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$22, %rax
	je	.LBB54_49
# BB#13:                                # %land.lhs.true23
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_49
	jmp	.LBB54_50
.LBB54_6:                               # %sw.bb8
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_7
# BB#8:                                 # %if.then10
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$22, %rax
	je	.LBB54_49
# BB#9:                                 # %land.lhs.true
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_49
	jmp	.LBB54_50
.LBB54_119:                             # %sw.bb286
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#120:                               # %if.then288
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	ja	.LBB54_50
	jmp	.LBB54_49
.LBB54_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#5:                                 # %if.then
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
	jmp	.LBB54_49
.LBB54_34:                              # %sw.bb76
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#35:                                # %if.then78
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
	jmp	.LBB54_49
.LBB54_20:                              # %sw.bb41
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_21
# BB#22:                                # %if.then43
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$22, %rax
	je	.LBB54_49
# BB#23:                                # %land.lhs.true46
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_49
	jmp	.LBB54_50
.LBB54_45:                              # %land.lhs.true103
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r14, %rax
	je	.LBB54_46
.LBB54_47:                              # %if.then106
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
# BB#48:                                # %lor.lhs.false109
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
	jmp	.LBB54_49
.LBB54_229:                             # %sw.bb580
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#230:                               # %if.then582
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	movq	$46, %rax
	je	.LBB54_50
# BB#231:                               # %if.then582
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_214:                             # %sw.bb545
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_215
# BB#216:                               # %land.lhs.true547
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_222
# BB#217:                               # %lor.lhs.false550
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$7, %rax
	jne	.LBB54_222
# BB#218:                               # %lor.lhs.false553
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_220
# BB#219:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_102:                             # %sw.bb250
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#103:                               # %if.then252
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	ja	.LBB54_50
	jmp	.LBB54_49
.LBB54_11:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_7:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_51:                              # %sw.bb115
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_52
# BB#53:                                # %land.lhs.true117
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_62
# BB#54:                                # %land.lhs.true117
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_62
# BB#55:                                # %lor.lhs.false122
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r14, %rax
	je	.LBB54_62
# BB#56:                                # %lor.lhs.false125
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_57
# BB#58:                                # %lor.lhs.false125
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_59
# BB#60:                                # %land.lhs.true130
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r14, %rax
	je	.LBB54_61
.LBB54_62:                              # %if.then133
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_63
# BB#64:                                # %if.then133
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#65:                                # %lor.lhs.false138
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
	jmp	.LBB54_49
.LBB54_30:                              # %sw.bb65
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_31
# BB#32:                                # %if.then67
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$22, %rax
	je	.LBB54_49
# BB#33:                                # %land.lhs.true70
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_49
	jmp	.LBB54_50
.LBB54_21:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_144:                             # %sw.bb368
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_145
# BB#146:                               # %sw.bb368
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_147
# BB#148:                               # %lor.lhs.false372
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	andq	%r14, %rcx
	testq	%r14, %rax
	je	.LBB54_149
# BB#154:                               # %if.then380
	cmpq	$1, %rcx
	jmp	.LBB54_155
.LBB54_117:                             # %sw.bb279
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#118:                               # %if.then281
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_49
	jmp	.LBB54_50
.LBB54_93:                              # %sw.bb219
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#94:                                # %if.then221
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
	jmp	.LBB54_49
.LBB54_66:                              # %sw.bb144
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_67
# BB#68:                                # %land.lhs.true146
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_73
# BB#69:                                # %land.lhs.true146
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$1, %rax
	ja	.LBB54_73
# BB#70:                                # %lor.lhs.false153
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_71
# BB#72:                                # %lor.lhs.false153
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	ja	.LBB54_50
.LBB54_73:                              # %if.then160
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB54_75
# BB#74:                                # %if.then160
	movq	%rdx, %rcx
.LBB54_75:                              # %if.then160
	movl	which_alternative(%rip), %esi
	cmpq	$1, %rsi
	jbe	.LBB54_77
# BB#76:                                # %if.then160
	movq	%rdx, %rax
.LBB54_77:                              # %if.then160
	orq	%rax, %rcx
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
	jmp	.LBB54_49
.LBB54_215:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_46:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_52:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_31:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_243:                             # %sw.bb615
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB54_245
# BB#244:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_185:                             # %sw.bb441
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_186
# BB#187:                               # %land.lhs.true443
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_192
# BB#188:                               # %lor.lhs.false446
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB54_192
# BB#189:                               # %lor.lhs.false446
	cmpq	$3, %rax
	jne	.LBB54_194
# BB#190:                               # %lor.lhs.false448
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB54_196
# BB#191:                               # %land.lhs.true452
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r14, %rcx
	jne	.LBB54_192
	jmp	.LBB54_196
.LBB54_169:                             # %sw.bb408
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_170
# BB#171:                               # %land.lhs.true410
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_180
# BB#172:                               # %lor.lhs.false413
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r14, %rax
	je	.LBB54_180
# BB#173:                               # %lor.lhs.false416
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %r15d
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r14, %rax
	jne	.LBB54_180
# BB#174:                               # %lor.lhs.false418
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_176
# BB#175:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_158:                             # %sw.bb388
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_159
# BB#160:                               # %sw.bb388
	movl	which_alternative(%rip), %eax
	testq	%r14, %rax
	jne	.LBB54_161
# BB#162:                               # %lor.lhs.false392
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	testq	%r14, %rax
	jne	.LBB54_166
# BB#163:                               # %lor.lhs.false395
	testq	%r14, %rcx
	je	.LBB54_165
# BB#164:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_121:                             # %sw.bb297
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_122
# BB#123:                               # %land.lhs.true299
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_133
# BB#124:                               # %land.lhs.true299
	leaq	-3(%rcx), %rax
	andq	%r14, %rax
	cmpq	$1, %rax
	ja	.LBB54_133
# BB#125:                               # %lor.lhs.false306
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_131
# BB#126:                               # %lor.lhs.false306
	testq	%r14, %rcx
	je	.LBB54_131
# BB#127:                               # %lor.lhs.false306
	movq	%rcx, %rax
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_131
# BB#128:                               # %lor.lhs.false306
	cmpq	$2, %rax
	je	.LBB54_131
# BB#129:                               # %land.lhs.true315
	cmpq	$5, %rax
	jae	.LBB54_130
.LBB54_133:                             # %if.then325
	andq	%r14, %rcx
	movq	$46, %rax
	cmpq	$3, %rcx
	jb	.LBB54_50
# BB#134:                               # %if.then331
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_138
# BB#135:                               # %lor.lhs.false334
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r14, %rax
	cmpq	$1, %rax
	ja	.LBB54_138
# BB#136:                               # %lor.lhs.false338
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	movq	%rax, %rdx
	andq	%r14, %rdx
	leaq	-3(%rcx), %rax
	cmpq	$1, %rdx
	je	.LBB54_140
# BB#137:                               # %lor.lhs.false338
	movq	%rax, %rdx
	andq	%r14, %rdx
	cmpq	$1, %rdx
	ja	.LBB54_140
.LBB54_138:                             # %if.then345
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
# BB#139:                               # %lor.lhs.false348
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r14, %rax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	ja	.LBB54_50
	jmp	.LBB54_49
.LBB54_104:                             # %sw.bb259
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_105
# BB#106:                               # %sw.bb259
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_107
# BB#108:                               # %lor.lhs.false263
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r14, %rax
	andq	%r14, %rcx
	cmpq	$1, %rax
	jne	.LBB54_109
# BB#114:                               # %if.then271
	cmpq	$1, %rcx
	jmp	.LBB54_115
.LBB54_100:                             # %sw.bb243
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#101:                               # %if.then245
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_49
	jmp	.LBB54_50
.LBB54_95:                              # %sw.bb226
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_96
# BB#97:                                # %land.lhs.true228
	movl	which_alternative(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB54_99
# BB#98:                                # %lor.lhs.false232
	orq	$2, %rax
	cmpq	$3, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
.LBB54_99:                              # %if.then236
	cmpq	$1, %rcx
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
	jmp	.LBB54_49
.LBB54_90:                              # %sw.bb202
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_91
# BB#92:                                # %land.lhs.true204
	movl	which_alternative(%rip), %eax
	orq	$2, %rax
	andq	%r14, %rax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_49
	jmp	.LBB54_50
.LBB54_78:                              # %sw.bb170
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_79
# BB#80:                                # %land.lhs.true172
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_85
# BB#81:                                # %land.lhs.true172
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$2, %rax
	ja	.LBB54_85
# BB#82:                                # %lor.lhs.false181
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_83
# BB#84:                                # %lor.lhs.false181
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	ja	.LBB54_50
.LBB54_85:                              # %if.then190
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB54_87
# BB#86:                                # %if.then190
	movq	%rdx, %rcx
.LBB54_87:                              # %if.then190
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	jbe	.LBB54_89
# BB#88:                                # %if.then190
	movq	%rdx, %rax
.LBB54_89:                              # %if.then190
	orq	%rax, %rcx
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
	jmp	.LBB54_49
.LBB54_36:                              # %sw.bb84
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#37:                                # %if.then86
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$14, %rax
	movq	$46, %rax
	je	.LBB54_50
# BB#38:                                # %if.then86
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_24:                              # %sw.bb52
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_25
# BB#26:                                # %if.then54
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$22, %rax
	je	.LBB54_49
# BB#27:                                # %land.lhs.true57
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_29
# BB#28:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_14:                              # %sw.bb29
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_15
# BB#16:                                # %if.then31
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$22, %rax
	je	.LBB54_49
# BB#17:                                # %land.lhs.true34
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB54_19
# BB#18:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_67:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_145:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_147:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_245:                             # %land.lhs.true619
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jns	.LBB54_50
# BB#246:                               # %if.then625
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_blockage_range, %rcx
	movq	$11506, %rdx            # imm = 0x2CF2
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB54_186:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_170:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_122:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_96:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_91:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_79:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_25:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_15:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_149:                             # %lor.lhs.false375
	cmpq	$1, %rcx
	jne	.LBB54_150
# BB#151:                               # %land.lhs.true377
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	jne	.LBB54_152
# BB#153:                               # %land.lhs.true377
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$1, %rax
.LBB54_155:                             # %if.then380
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#156:                               # %lor.lhs.false382
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	movq	$46, %rax
	je	.LBB54_50
# BB#157:                               # %lor.lhs.false382
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_63:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_220:                             # %land.lhs.true556
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$7, %rax
	jne	.LBB54_221
.LBB54_222:                             # %if.then559
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
# BB#223:                               # %lor.lhs.false562
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$7, %rax
	movq	$46, %rax
	je	.LBB54_50
# BB#224:                               # %lor.lhs.false562
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_159:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_161:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_105:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_107:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_109:                             # %lor.lhs.false266
	cmpq	$1, %rcx
	jne	.LBB54_110
# BB#111:                               # %land.lhs.true268
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	je	.LBB54_112
# BB#113:                               # %land.lhs.true268
	movl	which_alternative(%rip), %eax
	andq	%r14, %rax
	cmpq	$1, %rax
.LBB54_115:                             # %if.then271
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#116:                               # %lor.lhs.false273
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
	jmp	.LBB54_49
.LBB54_150:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_57:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_59:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_71:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_29:                              # %lor.lhs.false59
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_49
	jmp	.LBB54_50
.LBB54_19:                              # %lor.lhs.false
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_49
	jmp	.LBB54_50
.LBB54_221:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_110:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_61:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_194:                             # %lor.lhs.false470
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	je	.LBB54_196
# BB#195:                               # %lor.lhs.false470
	cmpq	$2, %rax
	je	.LBB54_192
.LBB54_196:                             # %lor.lhs.false476
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_198
# BB#197:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_165:                             # %land.lhs.true397
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	orq	%rax, %rcx
.LBB54_166:                             # %if.then400
	testq	%r14, %rcx
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
# BB#167:                               # %lor.lhs.false402
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r14, %rax
	movq	$46, %rax
	je	.LBB54_50
# BB#168:                               # %lor.lhs.false402
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_83:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_176:                             # %land.lhs.true421
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r14, %rax
	je	.LBB54_177
# BB#178:                               # %land.lhs.true424
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r15, %rdx
	testq	%r14, %rdx
	je	.LBB54_180
# BB#179:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_180:                             # %if.then428
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_182
# BB#181:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_182:                             # %lor.lhs.false431
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r14, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
# BB#183:                               # %lor.lhs.false434
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	movq	$46, %rax
	je	.LBB54_50
# BB#184:                               # %lor.lhs.false434
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_131:                             # %lor.lhs.false319
	andq	%r14, %rcx
	cmpq	$3, %rcx
	movq	$46, %rax
	jb	.LBB54_50
# BB#132:                               # %lor.lhs.false319
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_130:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_140:                             # %if.else354
	andq	%r14, %rcx
	cmpq	$3, %rcx
	sbbq	%rcx, %rcx
	andq	$1, %rcx
	andq	%r14, %rax
	cmpq	$1, %rax
	jbe	.LBB54_141
# BB#142:                               # %if.else354
	movabsq	$1, %rax
	jmp	.LBB54_143
.LBB54_152:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_112:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_198:                             # %land.lhs.true479
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	jne	.LBB54_200
# BB#199:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_177:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_141:
	movabsq	$0, %rax
.LBB54_143:                             # %if.else354
	orq	%rax, %rcx
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
	jmp	.LBB54_49
.LBB54_200:                             # %land.lhs.true479
	cmpq	$3, %rax
	jne	.LBB54_204
# BB#201:                               # %land.lhs.true481
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB54_192
# BB#202:                               # %lor.lhs.false485
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r14, %rcx
	je	.LBB54_192
# BB#203:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_204:                             # %land.lhs.true503
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	je	.LBB54_192
# BB#205:                               # %land.lhs.true503
	cmpq	$2, %rax
	jne	.LBB54_192
# BB#206:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_192:                             # %if.then509
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r14, %rax
	cmpq	$1, %rax
	jne	.LBB54_207
# BB#193:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_207:                             # %lor.lhs.false512
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	jne	.LBB54_209
# BB#208:
	movq	$65582, %rax            # imm = 0x1002E
	jmp	.LBB54_50
.LBB54_209:                             # %lor.lhs.false512
	cmpq	$3, %rax
	jne	.LBB54_212
# BB#210:                               # %lor.lhs.false514
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB54_49
# BB#211:                               # %land.lhs.true518
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r14, %rcx
	movq	$65582, %rax            # imm = 0x1002E
	jne	.LBB54_50
	jmp	.LBB54_49
.LBB54_212:                             # %lor.lhs.false536
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r14, %rsi
	je	.LBB54_49
# BB#213:                               # %lor.lhs.false536
	cmpq	$2, %rax
	movq	$65582, %rax            # imm = 0x1002E
	je	.LBB54_50
.LBB54_49:                              # %lor.lhs.false109
	movq	$46, %rax
.LBB54_50:                              # %lor.lhs.false109
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.Ltmp477:
	.size	pent_np_unit_blockage_range, .Ltmp477-pent_np_unit_blockage_range
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI54_0:
	.quad	.LBB54_243
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_232
	.quad	.LBB54_232
	.quad	.LBB54_232
	.quad	.LBB54_229
	.quad	.LBB54_229
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_225
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_232
	.quad	.LBB54_232
	.quad	.LBB54_214
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_240
	.quad	.LBB54_227
	.quad	.LBB54_232
	.quad	.LBB54_232
	.quad	.LBB54_185
	.quad	.LBB54_50
	.quad	.LBB54_240
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_214
	.quad	.LBB54_214
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_214
	.quad	.LBB54_169
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_158
	.quad	.LBB54_232
	.quad	.LBB54_229
	.quad	.LBB54_229
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_225
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_144
	.quad	.LBB54_144
	.quad	.LBB54_121
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_119
	.quad	.LBB54_119
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_119
	.quad	.LBB54_119
	.quad	.LBB54_119
	.quad	.LBB54_119
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_117
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_117
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_104
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_102
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_100
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_235
	.quad	.LBB54_238
	.quad	.LBB54_235
	.quad	.LBB54_238
	.quad	.LBB54_235
	.quad	.LBB54_238
	.quad	.LBB54_235
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_240
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_225
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_225
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_225
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_95
	.quad	.LBB54_93
	.quad	.LBB54_93
	.quad	.LBB54_90
	.quad	.LBB54_50
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_78
	.quad	.LBB54_240
	.quad	.LBB54_66
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_66
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_227
	.quad	.LBB54_240
	.quad	.LBB54_227
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_227
	.quad	.LBB54_240
	.quad	.LBB54_227
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_225
	.quad	.LBB54_51
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_51
	.quad	.LBB54_51
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_39
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_227
	.quad	.LBB54_36
	.quad	.LBB54_34
	.quad	.LBB54_34
	.quad	.LBB54_34
	.quad	.LBB54_34
	.quad	.LBB54_34
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_30
	.quad	.LBB54_24
	.quad	.LBB54_50
	.quad	.LBB54_30
	.quad	.LBB54_30
	.quad	.LBB54_20
	.quad	.LBB54_14
	.quad	.LBB54_50
	.quad	.LBB54_20
	.quad	.LBB54_20
	.quad	.LBB54_20
	.quad	.LBB54_20
	.quad	.LBB54_10
	.quad	.LBB54_6
	.quad	.LBB54_10
	.quad	.LBB54_6
	.quad	.LBB54_10
	.quad	.LBB54_6
	.quad	.LBB54_10
	.quad	.LBB54_6
	.quad	.LBB54_10
	.quad	.LBB54_6
	.quad	.LBB54_10
	.quad	.LBB54_6
	.quad	.LBB54_10
	.quad	.LBB54_6
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_235
	.quad	.LBB54_50
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_227
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_102
	.quad	.LBB54_102
	.quad	.LBB54_102
	.quad	.LBB54_238
	.quad	.LBB54_238
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_240
	.quad	.LBB54_240
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_50
	.quad	.LBB54_4
	.quad	.LBB54_4
	.quad	.LBB54_4
	.quad	.LBB54_4
	.quad	.LBB54_4
	.quad	.LBB54_4

	.text
	.globl	function_units_used
	.align	16, 0x90
	.type	function_units_used,@function
function_units_used:                    # @function_units_used
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp484:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp485:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp486:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp487:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp488:
	.cfi_def_cfa_offset 48
	subq	$48, %rsp
.Ltmp489:
	.cfi_def_cfa_offset 96
.Ltmp490:
	.cfi_offset %rbx, -48
.Ltmp491:
	.cfi_offset %r12, -40
.Ltmp492:
	.cfi_offset %r13, -32
.Ltmp493:
	.cfi_offset %r14, -24
.Ltmp494:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
                                        # kill: RDI<def> RBX<kill>
	callq	get_attr_athlon_fpunits
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	callq	get_attr_athlon_decode
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	callq	get_attr_memory
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	callq	get_attr_mode
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	movq	%rax, %r13
	movq	%rbx, %rdi
	callq	get_attr_type
	movl	ix86_cpu(%rip), %edx
	movq	%rax, %r11
	cmpq	$2, %rdx
	movabsq	$0, %r14
	jne	.LBB55_32
# BB#1:                                 # %land.rhs
	movq	$3, %r14
	leaq	-25(%r11), %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB55_11
# BB#2:                                 # %land.rhs
	movq	%r11, %rbx
	andq	%r15, %rbx
	cmpq	$12, %rbx
	je	.LBB55_11
# BB#3:                                 # %land.rhs
	cmpq	$21, %rbx
	jne	.LBB55_7
# BB#4:                                 # %land.lhs.true
	movq	40(%rsp), %rax          # 8-byte Reload
	leaq	-1(%rax), %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB55_6
# BB#5:                                 # %land.lhs.true
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%r15, %rax
	cmpq	$9, %rax
	je	.LBB55_7
.LBB55_6:                               # %land.end
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	movq	%r11, %r14
	callq	immediate_operand
	movq	%r14, %r11
	movl	ix86_cpu(%rip), %edx
	cmpq	$2, %rdx
	movq	$1, %r14
	jne	.LBB55_32
.LBB55_7:                               # %lor.rhs65
	cmpq	$27, %rbx
	jne	.LBB55_8
# BB#9:                                 # %lor.rhs65
	movabsq	$1, %rax
	jmp	.LBB55_10
.LBB55_8:
	movabsq	$0, %rax
.LBB55_10:                              # %lor.rhs65
	leaq	1(%rax,%rax), %r14
.LBB55_11:                              # %land.lhs.true75
	movq	%r11, %rcx
	andq	%r15, %rcx
	cmpq	$35, %rcx
	ja	.LBB55_14
# BB#12:                                # %land.lhs.true75
	movq	$4, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$36234592256, %rsi      # imm = 0x86FC00000
	testq	%rsi, %rdx
	jne	.LBB55_15
# BB#13:                                # %land.lhs.true75
	cmpq	$21, %rcx
	jne	.LBB55_14
# BB#27:                                # %land.lhs.true78
	movq	40(%rsp), %rcx          # 8-byte Reload
	leaq	-1(%rcx), %rcx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	ja	.LBB55_29
# BB#28:                                # %land.lhs.true78
	movq	16(%rsp), %rcx          # 8-byte Reload
	andq	%r15, %rcx
	cmpq	$9, %rcx
	je	.LBB55_15
.LBB55_29:                              # %lor.lhs.false87
	movq	%r11, %rbx
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	movl	ix86_cpu(%rip), %edx
	testq	%r15, %rax
	movq	$4, %r12
	jne	.LBB55_30
# BB#31:                                # %lor.lhs.false87
	movq	40(%rsp), %rax          # 8-byte Reload
	andq	%rax, %r15
	cmpq	$3, %r15
	movq	%rbx, %r11
	jb	.LBB55_40
.LBB55_32:                              # %lor.rhs126
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rdx, %rax
	andq	%rcx, %rax
	cmpq	$3, %rax
	jne	.LBB55_33
# BB#34:                                # %land.rhs129
	andq	%r11, %rcx
	cmpq	$35, %rcx
	ja	.LBB55_36
# BB#35:                                # %land.rhs129
	movq	$4, %r12
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$35431383040, %rsi      # imm = 0x83FE00000
	testq	%rsi, %rax
	jne	.LBB55_40
.LBB55_36:                              # %lor.rhs159
	cmpq	$12, %rcx
	jne	.LBB55_37
# BB#38:                                # %lor.rhs159
	movabsq	$1, %r12
	jmp	.LBB55_39
.LBB55_33:
	xorq	%r12, %r12
	jmp	.LBB55_40
.LBB55_14:                              # %lor.rhs126.thread
	xorq	%rax, %rax
.LBB55_15:                              # %lor.end164.thread
	orq	%r14, %rax
	jmp	.LBB55_16
.LBB55_37:
	movabsq	$0, %r12
.LBB55_39:                              # %lor.rhs159
	movq	$2, %rcx
	shlq	%cl, %r12
.LBB55_40:                              # %lor.end164
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	andq	%r8, %rdx
	orq	%r14, %r12
	cmpq	$2, %rdx
	jne	.LBB55_42
# BB#41:
	movq	%r12, %rax
.LBB55_16:                              # %land.end247
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	andq	%rdx, %r13
	cmpq	$1, %r13
	movabsq	$0, %r15
	movabsq	$1, %rsi
	movq	%r15, %rbx
	jne	.LBB55_18
# BB#17:                                # %land.end247
	movq	%rsi, %rbx
.LBB55_18:                              # %land.end247
	movq	$3, %rcx
	shlq	%cl, %rbx
	cmpq	$3, %r13
	movq	%r15, %rdi
	je	.LBB55_20
# BB#19:                                # %land.end247
	movq	%rsi, %rdi
.LBB55_20:                              # %land.end247
	movq	$4, %rcx
	shlq	%cl, %rdi
	cmpq	$2, %r13
	movq	%r15, %r12
	jne	.LBB55_22
# BB#21:                                # %land.end247
	movq	%rsi, %r12
.LBB55_22:                              # %land.end247
	orq	%rbx, %rax
	movq	$5, %rcx
	shlq	%cl, %r12
	andq	%r11, %rdx
	cmpq	$7, %rdx
	movq	%r15, %r10
	movq	40(%rsp), %r14          # 8-byte Reload
	jne	.LBB55_24
# BB#23:                                # %land.end247
	movq	%rsi, %r10
.LBB55_24:                              # %land.end247
	orq	%rdi, %rax
	cmpq	$21, %rdx
	jne	.LBB55_26
# BB#25:                                # %land.end247
	movq	%rsi, %r15
.LBB55_26:                              # %land.end247
	orq	%rax, %r12
	xorq	%r13, %r13
.LBB55_87:                              # %land.end355
	movl	ix86_cpu(%rip), %r8d
	orq	%r13, %r12
	xorq	%rdx, %rdx
	cmpq	$4, %r8
	jne	.LBB55_88
# BB#89:                                # %land.rhs361
	movq	$2048, %r9              # imm = 0x800
	movabsq	$4294967295, %rdi       # imm = 0xFFFFFFFF
	movq	%r11, %rax
	andq	%rdi, %rax
	cmpq	$15, %rax
	ja	.LBB55_91
# BB#90:                                # %land.rhs361
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$36732, %rdx            # imm = 0x8F7C
	jne	.LBB55_100
.LBB55_91:                              # %lor.lhs.false391
	testq	%rdi, %r14
	jne	.LBB55_92
# BB#93:                                # %lor.lhs.false391
	movabsq	$1, %rcx
	jmp	.LBB55_94
.LBB55_88:
	movq	32(%rsp), %rax          # 8-byte Reload
	jmp	.LBB55_125
.LBB55_42:                              # %land.end191
	cmpq	$3, %rdx
	jne	.LBB55_43
# BB#48:                                # %land.rhs197
	movq	%r11, %rax
	andq	%r8, %rax
	cmpq	$35, %rax
	ja	.LBB55_50
# BB#49:                                # %land.rhs197
	movq	$64, %rsi
	movq	$1, %rdi
	movq	%rax, %rcx
	shlq	%cl, %rdi
	movabsq	$39592163840, %rcx      # imm = 0x937E07A00
	testq	%rcx, %rdi
	jne	.LBB55_54
.LBB55_50:                              # %lor.rhs242
	cmpq	$27, %rax
	jne	.LBB55_51
# BB#52:                                # %lor.rhs242
	movabsq	$1, %rsi
	jmp	.LBB55_53
.LBB55_92:
	movabsq	$0, %rcx
.LBB55_94:                              # %lor.lhs.false391
	testq	%rcx, %r10
	jne	.LBB55_100
# BB#95:                                # %lor.lhs.false391
	cmpq	$12, %rax
	je	.LBB55_100
# BB#96:                                # %lor.rhs400
	cmpq	$13, %rax
	jne	.LBB55_97
# BB#98:                                # %lor.rhs400
	movabsq	$1, %r9
	jmp	.LBB55_99
.LBB55_43:                              # %land.end247.thread1443
	movq	%r11, %rcx
	andq	%r8, %rcx
	cmpq	$7, %rcx
	movabsq	$0, %r15
	movabsq	$1, %rax
	movq	%r15, %r10
	jne	.LBB55_45
# BB#44:                                # %land.end247.thread1443
	movq	%rax, %r10
.LBB55_45:                              # %land.end247.thread1443
	cmpq	$21, %rcx
	movq	40(%rsp), %r14          # 8-byte Reload
	jne	.LBB55_47
# BB#46:                                # %land.end247.thread1443
	movq	%rax, %r15
.LBB55_47:                              # %land.end247.thread1443
	xorq	%rax, %rax
	jmp	.LBB55_78
.LBB55_97:
	movabsq	$0, %r9
.LBB55_99:                              # %lor.rhs400
	movq	$11, %rcx
	shlq	%cl, %r9
.LBB55_100:                             # %land.rhs410
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%r11, %rcx
	cmpq	$18, %rcx
	movq	$4096, %rbx             # imm = 0x1000
	je	.LBB55_105
# BB#101:                               # %lor.rhs416
	cmpq	$14, %rax
	jne	.LBB55_102
# BB#103:                               # %lor.rhs416
	movabsq	$1, %rbx
	jmp	.LBB55_104
.LBB55_102:
	movabsq	$0, %rbx
.LBB55_104:                             # %lor.rhs416
	movq	$12, %rcx
	shlq	%cl, %rbx
.LBB55_105:                             # %land.rhs427
	cmpq	$17, %rax
	movabsq	$0, %rcx
	movabsq	$1, %r10
	movq	%rcx, %rdx
	jne	.LBB55_107
# BB#106:                               # %land.rhs427
	movq	%r10, %rdx
.LBB55_107:                             # %land.rhs427
	andq	%r14, %rdi
	cmpq	$1, %rdi
	movq	%rcx, %rsi
	jne	.LBB55_109
# BB#108:                               # %land.rhs427
	movq	%r10, %rsi
.LBB55_109:                             # %land.rhs427
	orq	%rsi, %rdx
	cmpq	$3, %rdi
	jne	.LBB55_111
# BB#110:                               # %land.rhs427
	movq	%r10, %rcx
.LBB55_111:                             # %land.rhs427
	orq	%rcx, %rdx
	movq	$13, %rcx
	shlq	%cl, %rdx
	cmpq	$2, %rdi
	movq	$16384, %rsi            # imm = 0x4000
	je	.LBB55_118
# BB#112:                               # %switch.early.test1268
	cmpq	$31, %rax
	ja	.LBB55_114
# BB#113:                               # %switch.early.test1268
	movq	$1, %r10
	movq	%rax, %rcx
	shlq	%cl, %r10
	movabsq	$2147549696, %rcx       # imm = 0x80010200
	testq	%rcx, %r10
	jne	.LBB55_118
.LBB55_114:                             # %lor.rhs466
	cmpq	$3, %rdi
	jne	.LBB55_115
# BB#116:                               # %lor.rhs466
	movabsq	$1, %rsi
	jmp	.LBB55_117
.LBB55_115:
	movabsq	$0, %rsi
.LBB55_117:                             # %lor.rhs466
	movq	$14, %rcx
	shlq	%cl, %rsi
.LBB55_118:                             # %land.rhs478
	orq	%r12, %r9
	orq	%r9, %rbx
	orq	%rbx, %rdx
	movq	%rdx, %r12
	orq	%rsi, %r12
	cmpq	$35, %rax
	ja	.LBB55_121
# BB#119:                               # %land.rhs478
	movq	$32768, %rdx            # imm = 0x8000
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$35011952640, %rcx      # imm = 0x826E00000
	testq	%rcx, %rsi
	je	.LBB55_121
# BB#120:
	movq	32(%rsp), %rax          # 8-byte Reload
	jmp	.LBB55_125
.LBB55_121:                             # %lor.rhs499
	cmpq	$27, %rax
	jne	.LBB55_122
# BB#123:                               # %lor.rhs499
	movabsq	$1, %rdx
	jmp	.LBB55_124
.LBB55_122:
	movabsq	$0, %rdx
.LBB55_124:                             # %lor.rhs499
	movq	32(%rsp), %rax          # 8-byte Reload
	movq	$15, %rcx
	shlq	%cl, %rdx
.LBB55_125:                             # %land.end504
	orq	%rdx, %r12
	cmpq	$5, %r8
	jne	.LBB55_186
# BB#126:                               # %land.rhs510
	movabsq	$4294967295, %r8        # imm = 0xFFFFFFFF
	movq	%rax, %rsi
	andq	%r8, %rsi
	movq	$65536, %rdx            # imm = 0x10000
	cmpq	$1, %rsi
	je	.LBB55_131
# BB#127:                               # %lor.rhs513
	testq	%r8, %rax
	jne	.LBB55_128
# BB#129:                               # %lor.rhs513
	movabsq	$1, %rdx
	jmp	.LBB55_130
.LBB55_186:                             # %land.end517
	xorq	%rax, %rax
	jmp	.LBB55_179
.LBB55_128:
	movabsq	$0, %rdx
.LBB55_130:                             # %lor.rhs513
	movq	$16, %rcx
	shlq	%cl, %rdx
.LBB55_131:                             # %land.rhs532
	orq	%rdx, %r12
	testq	%r8, %rax
	jne	.LBB55_132
# BB#133:                               # %land.rhs532
	movabsq	$1, %rax
	jmp	.LBB55_134
.LBB55_132:
	movabsq	$0, %rax
.LBB55_134:                             # %land.rhs532
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	$17, %rcx
	shlq	%cl, %rax
	orq	%rax, %r12
	andq	%r8, %r11
	cmpq	$32, %r11
	ja	.LBB55_136
# BB#135:                               # %land.rhs532
	movq	$262144, %rdi           # imm = 0x40000
	movq	$1, %rax
	movq	%r11, %rcx
	shlq	%cl, %rax
	movabsq	$6444539900, %rcx       # imm = 0x1801FDFFC
	testq	%rcx, %rax
	jne	.LBB55_140
.LBB55_136:                             # %lor.rhs592
	cmpq	$13, %r11
	jne	.LBB55_137
# BB#138:                               # %lor.rhs592
	movabsq	$1, %rdi
	jmp	.LBB55_139
.LBB55_137:
	movabsq	$0, %rdi
.LBB55_139:                             # %lor.rhs592
	movq	$18, %rcx
	shlq	%cl, %rdi
.LBB55_140:                             # %land.rhs602
	orq	%r12, %rdi
	cmpq	$12, %r11
	jne	.LBB55_142
# BB#141:                               # %land.rhs615.thread
	orq	$524288, %rdi           # imm = 0x80000
	movq	%rdi, %r9
	jmp	.LBB55_147
.LBB55_142:                             # %land.rhs615
	cmpq	$13, %r11
	jne	.LBB55_143
# BB#144:                               # %land.rhs615
	movabsq	$1, %r9
	jmp	.LBB55_145
.LBB55_143:
	movabsq	$0, %r9
.LBB55_145:                             # %land.rhs615
	movq	$19, %rcx
	shlq	%cl, %r9
	orq	%rdi, %r9
	cmpq	$35, %r11
	ja	.LBB55_147
# BB#146:                               # %land.rhs615
	movq	$1048576, %rdi          # imm = 0x100000
	movq	$1, %rax
	movq	%r11, %rcx
	shlq	%cl, %rax
	movabsq	$34607202304, %rcx      # imm = 0x80EC00000
	testq	%rcx, %rax
	jne	.LBB55_160
.LBB55_147:                             # %lor.lhs.false633
	movq	%r14, %rax
	andq	%r8, %rax
	cmpq	$1, %rax
	jne	.LBB55_148
# BB#149:                               # %lor.lhs.false633
	movabsq	$1, %rax
	jmp	.LBB55_150
.LBB55_148:
	movabsq	$0, %rax
.LBB55_150:                             # %lor.lhs.false633
	testq	%rax, %r15
	movq	$1048576, %rdi          # imm = 0x100000
	je	.LBB55_152
# BB#151:                               # %lor.lhs.false633
	movq	16(%rsp), %rax          # 8-byte Reload
	andq	%r8, %rax
	cmpq	$9, %rax
	je	.LBB55_160
.LBB55_152:                             # %switch.early.test1269
	cmpq	$21, %r11
	je	.LBB55_160
# BB#153:                               # %switch.early.test1269
	cmpq	$24, %r11
	je	.LBB55_160
# BB#154:                               # %lor.lhs.false648
	cmpq	$29, %r11
	jne	.LBB55_156
# BB#155:                               # %lor.lhs.false648
	cmpq	$2, %rsi
	jb	.LBB55_160
.LBB55_156:                             # %lor.rhs660
	cmpq	$28, %r11
	jne	.LBB55_157
# BB#158:                               # %lor.rhs660
	movabsq	$1, %rdi
	jmp	.LBB55_159
.LBB55_51:
	movabsq	$0, %rsi
.LBB55_53:                              # %lor.rhs242
	movq	$6, %rcx
	shlq	%cl, %rsi
.LBB55_54:                              # %land.end247.thread
	cmpq	$21, %rax
	movabsq	$0, %r10
	movabsq	$1, %rcx
	movq	%r10, %r15
	jne	.LBB55_56
# BB#55:                                # %land.end247.thread
	movq	%rcx, %r15
.LBB55_56:                              # %land.end247.thread
	orq	%rsi, %r12
	cmpq	$7, %rax
	movq	40(%rsp), %r14          # 8-byte Reload
	jne	.LBB55_58
# BB#57:                                # %land.end247.thread
	movq	%rcx, %r10
.LBB55_58:                              # %land.end247.thread
	je	.LBB55_60
# BB#59:                                # %land.end247.thread
	movq	$128, %rsi
	cmpq	$21, %rax
	jne	.LBB55_66
.LBB55_60:                              # %land.lhs.true262
	cmpq	$7, %rax
	je	.LBB55_62
# BB#61:                                # %land.lhs.true262
	xorq	%rsi, %rsi
	cmpq	$21, %rax
	jne	.LBB55_66
.LBB55_62:                              # %land.rhs268
	testq	%r8, %r14
	jne	.LBB55_63
# BB#64:                                # %land.rhs268
	movabsq	$1, %rsi
	jmp	.LBB55_65
.LBB55_63:
	movabsq	$0, %rsi
.LBB55_65:                              # %land.rhs268
	movq	$7, %rcx
	shlq	%cl, %rsi
.LBB55_66:                              # %land.rhs278
	cmpq	$17, %rax
	movq	$256, %rdi              # imm = 0x100
	je	.LBB55_72
# BB#67:                                # %land.rhs278
	movq	%r14, %rcx
	andq	%r8, %rcx
	cmpq	$1, %rcx
	je	.LBB55_72
# BB#68:                                # %lor.rhs284
	cmpq	$3, %rcx
	jne	.LBB55_69
# BB#70:                                # %lor.rhs284
	movabsq	$1, %rdi
	jmp	.LBB55_71
.LBB55_69:
	movabsq	$0, %rdi
.LBB55_71:                              # %lor.rhs284
	movq	$8, %rcx
	shlq	%cl, %rdi
.LBB55_72:                              # %land.rhs295
	orq	%rsi, %r12
	orq	%rdi, %r12
	cmpq	$16, %rax
	movq	$512, %rax              # imm = 0x200
	je	.LBB55_78
# BB#73:                                # %land.rhs295
	movq	%r14, %rcx
	andq	%r8, %rcx
	cmpq	$2, %rcx
	je	.LBB55_78
# BB#74:                                # %lor.rhs301
	cmpq	$3, %rcx
	jne	.LBB55_75
# BB#76:                                # %lor.rhs301
	movabsq	$1, %rax
	jmp	.LBB55_77
.LBB55_75:
	movabsq	$0, %rax
.LBB55_77:                              # %lor.rhs301
	movq	$9, %rcx
	shlq	%cl, %rax
.LBB55_78:                              # %land.end306
	orq	%rax, %r12
	xorq	%r13, %r13
	cmpq	$4, %rdx
	jne	.LBB55_87
# BB#79:                                # %land.rhs312
	movq	%r11, %rbx
	andq	%r8, %rbx
	cmpq	$32, %rbx
	ja	.LBB55_83
# BB#80:                                # %land.rhs312
	movq	$1024, %r13             # imm = 0x400
	movq	$1, %rax
	movq	$1, %rdx
	movq	%rbx, %rcx
	shlq	%cl, %rdx
	movabsq	$4294973452, %rcx       # imm = 0x10000180C
	testq	%rcx, %rdx
	jne	.LBB55_87
# BB#81:                                # %land.rhs312
	movq	%rbx, %rcx
	shlq	%cl, %rax
	testq	$1392, %rax             # imm = 0x570
	je	.LBB55_83
# BB#82:                                # %land.lhs.true345
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	movq	%r11, 40(%rsp)          # 8-byte Spill
	movq	%r10, 8(%rsp)           # 8-byte Spill
	callq	general_operand
	movq	8(%rsp), %r10           # 8-byte Reload
	movq	40(%rsp), %r11          # 8-byte Reload
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB55_87
.LBB55_83:                              # %lor.rhs351
	cmpq	$13, %rbx
	jne	.LBB55_84
# BB#85:                                # %lor.rhs351
	movabsq	$1, %r13
	jmp	.LBB55_86
.LBB55_84:
	movabsq	$0, %r13
.LBB55_86:                              # %lor.rhs351
	movq	$10, %rcx
	shlq	%cl, %r13
	jmp	.LBB55_87
.LBB55_157:
	movabsq	$0, %rdi
.LBB55_159:                             # %lor.rhs660
	movq	$20, %rcx
	shlq	%cl, %rdi
.LBB55_160:                             # %land.rhs688
	andq	%r8, %rdx
	cmpq	$2, %rdx
	movabsq	$0, %rsi
	movabsq	$1, %rax
	movq	%rsi, %rbx
	jne	.LBB55_162
# BB#161:                               # %land.rhs688
	movq	%rax, %rbx
.LBB55_162:                             # %land.rhs688
	movq	$21, %rcx
	shlq	%cl, %rbx
	cmpq	$3, %rdx
	jne	.LBB55_164
# BB#163:                               # %land.rhs688
	movq	%rax, %rsi
.LBB55_164:                             # %land.rhs688
	movq	$22, %rcx
	shlq	%cl, %rsi
	cmpq	$2, %rdx
	movq	$8388608, %r12          # imm = 0x800000
	je	.LBB55_170
# BB#165:                               # %land.rhs688
	cmpq	$4, %rdx
	je	.LBB55_170
# BB#166:                               # %lor.rhs694
	cmpq	$3, %rdx
	jne	.LBB55_167
# BB#168:                               # %lor.rhs694
	movabsq	$1, %r12
	jmp	.LBB55_169
.LBB55_167:
	movabsq	$0, %r12
.LBB55_169:                             # %lor.rhs694
	movq	$23, %rcx
	shlq	%cl, %r12
.LBB55_170:                             # %land.rhs705
	andq	%r8, %r14
	movq	$33554432, %rax         # imm = 0x2000000
	cmpq	$1, %r14
	je	.LBB55_175
# BB#171:                               # %lor.rhs708
	cmpq	$3, %r14
	jne	.LBB55_172
# BB#173:                               # %lor.rhs708
	movabsq	$1, %rax
	jmp	.LBB55_174
.LBB55_172:
	movabsq	$0, %rax
.LBB55_174:                             # %lor.rhs708
	movq	$25, %rcx
	shlq	%cl, %rax
.LBB55_175:                             # %land.rhs718
	orq	%r9, %rdi
	orq	%rbx, %rdi
	orq	%rsi, %rdi
	orq	%rdi, %r12
	orq	%rax, %r12
	cmpq	$1, %rdx
	jne	.LBB55_176
# BB#177:                               # %land.rhs718
	movabsq	$1, %rax
	jmp	.LBB55_178
.LBB55_176:
	movabsq	$0, %rax
.LBB55_178:                             # %land.rhs718
	movq	$24, %rcx
	shlq	%cl, %rax
.LBB55_179:                             # %land.end721
	orq	%rax, %r12
	je	.LBB55_184
# BB#180:                               # %land.lhs.true726
	movq	%r12, %rax
	negq	%rax
	andq	%r12, %rax
	cmpq	%rax, %r12
	jne	.LBB55_184
# BB#181:
	xorq	%rcx, %rcx
	.align	16, 0x90
.LBB55_182:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	%rcx, %rax
	movq	$1, %rcx
	shrq	%cl, %r12
	leaq	1(%rax), %rcx
	testq	%r12, %r12
	jne	.LBB55_182
# BB#183:                               # %for.end
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	movq	%rax, %r12
	jmp	.LBB55_185
.LBB55_184:                             # %if.else
	notq	%r12
.LBB55_185:                             # %if.end
	movq	%r12, %rax
	addq	$48, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB55_30:
	movq	%rbx, %r11
	jmp	.LBB55_40
.Ltmp495:
	.size	function_units_used, .Ltmp495-function_units_used
	.cfi_endproc

	.globl	get_attr_athlon_fpunits
	.align	16, 0x90
	.type	get_attr_athlon_fpunits,@function
get_attr_athlon_fpunits:                # @get_attr_athlon_fpunits
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp500:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp501:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp502:
	.cfi_def_cfa_offset 32
.Ltmp503:
	.cfi_offset %rbx, -32
.Ltmp504:
	.cfi_offset %r14, -24
.Ltmp505:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB56_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB56_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB56_24
# BB#3:                                 # %cond.end
	movq	$3, %rbx
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB56_22
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$364, %rdx              # imm = 0x16C
	jg	.LBB56_18
# BB#5:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB56_10
# BB#6:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB56_81
# BB#7:                                 # %sw.bb273
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB56_81
# BB#8:                                 # %land.lhs.true277
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB56_81
# BB#9:                                 # %if.then283
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_athlon_fpunits, %rcx
	movq	$11973, %rdx            # imm = 0x2EC5
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB56_24:                              # %cond.end
	leaq	-621(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$2, %rdx
	jb	.LBB56_20
# BB#25:                                # %cond.end
	addq	$-618, %rax             # imm = 0xFFFFFFFFFFFFFD96
	andq	%rcx, %rax
	cmpq	$2, %rax
	ja	.LBB56_81
# BB#26:                                # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %rbx
	jb	.LBB56_21
# BB#27:                                # %select.mid
	xorq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_22:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$56, %rax
	ja	.LBB56_81
# BB#23:                                # %cond.end
	jmpq	*.LJTI56_0(,%rax,8)
.LBB56_37:                              # %sw.bb21
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB56_21
# BB#38:                                # %if.else25
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB56_21
# BB#39:                                # %lor.lhs.false28
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB56_40
# BB#41:                                # %lor.lhs.false28
	movabsq	$1, %rbx
	jmp	.LBB56_42
.LBB56_18:                              # %cond.end
	addq	$-365, %rax             # imm = 0xFFFFFFFFFFFFFE93
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$27, %rcx
	ja	.LBB56_81
# BB#19:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$267911679, %rax        # imm = 0xFF801FF
	je	.LBB56_81
.LBB56_20:                              # %sw.bb272
	movq	$2, %rbx
.LBB56_21:                              # %return
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_10:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB56_16
# BB#11:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$36, %rax
	ja	.LBB56_81
# BB#12:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	jne	.LBB56_21
# BB#13:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	je	.LBB56_81
# BB#14:                                # %sw.bb267
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$3, %rbx
	je	.LBB56_21
# BB#15:                                # %select.mid4
	xorq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_16:                              # %cond.end
	addq	$-90, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$94, %rax
	ja	.LBB56_81
# BB#17:                                # %cond.end
	jmpq	*.LJTI56_1(,%rax,8)
.LBB56_102:                             # %sw.bb140
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB56_114
# BB#103:                               # %land.lhs.true142
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB56_105
# BB#104:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_30:                              # %sw.bb10
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB56_21
# BB#31:                                # %if.else14
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB56_21
# BB#32:                                # %lor.lhs.false16
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB56_33
# BB#34:                                # %lor.lhs.false16
	movabsq	$1, %rax
	jmp	.LBB56_35
.LBB56_50:                              # %sw.bb46
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB56_21
# BB#51:                                # %if.else50
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB56_21
# BB#52:                                # %lor.lhs.false53
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB56_53
# BB#54:                                # %lor.lhs.false53
	movabsq	$1, %rbx
	jmp	.LBB56_55
.LBB56_63:                              # %sw.bb72
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB56_21
# BB#64:                                # %if.else76
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB56_21
# BB#65:                                # %lor.lhs.false79
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB56_66
# BB#67:                                # %lor.lhs.false79
	movabsq	$1, %rbx
	jmp	.LBB56_68
.LBB56_82:                              # %sw.bb107
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB56_83
# BB#84:                                # %sw.bb107
	movabsq	$1, %rbx
	jmp	.LBB56_85
.LBB56_77:                              # %sw.bb94
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB56_81
# BB#78:                                # %land.lhs.true96
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB56_21
# BB#79:                                # %if.else100
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB56_81
# BB#80:                                # %land.lhs.true102
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB56_21
.LBB56_81:                              # %sw.default
	xorq	%rbx, %rbx
	movq	%rbx, %rax
.LBB56_36:                              # %lor.lhs.false16
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB56_28:                              # %sw.bb6
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %rbx
	je	.LBB56_21
# BB#29:                                # %select.mid2
	xorq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_118:                             # %sw.bb168
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %rbx
	je	.LBB56_21
# BB#119:                               # %lor.lhs.false171
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB56_21
# BB#120:                               # %if.else175
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$5, %rbx
	je	.LBB56_21
# BB#121:                               # %if.else179
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	register_operand
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB56_21
# BB#122:                               # %lor.lhs.false182
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB56_123
# BB#124:                               # %lor.lhs.false182
	movabsq	$1, %rax
	jmp	.LBB56_125
.LBB56_73:                              # %sw.bb89
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB56_74
# BB#75:                                # %sw.bb89
	movabsq	$1, %rbx
	jmp	.LBB56_76
.LBB56_69:                              # %sw.bb84
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB56_70
# BB#71:                                # %sw.bb84
	movabsq	$1, %rbx
	jmp	.LBB56_72
.LBB56_56:                              # %sw.bb58
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB56_21
# BB#57:                                # %if.else62
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB56_59
# BB#58:                                # %land.lhs.true64
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB56_21
.LBB56_59:                              # %lor.lhs.false67
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB56_60
# BB#61:                                # %lor.lhs.false67
	movabsq	$1, %rbx
	jmp	.LBB56_62
.LBB56_43:                              # %sw.bb33
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB56_21
# BB#44:                                # %if.else37
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB56_46
# BB#45:                                # %land.lhs.true
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	movq	$2, %rbx
	jne	.LBB56_21
.LBB56_46:                              # %lor.lhs.false41
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	jne	.LBB56_47
# BB#48:                                # %lor.lhs.false41
	movabsq	$1, %rbx
	jmp	.LBB56_49
.LBB56_83:
	movabsq	$0, %rbx
.LBB56_85:                              # %sw.bb107
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_140:                             # %sw.bb223
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB56_152
# BB#141:                               # %land.lhs.true229
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB56_143
# BB#142:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_40:
	movabsq	$0, %rbx
.LBB56_42:                              # %lor.lhs.false28
	addq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_33:
	movabsq	$0, %rax
.LBB56_35:                              # %lor.lhs.false16
	addq	%rax, %rax
	jmp	.LBB56_36
.LBB56_105:                             # %lor.lhs.false145
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB56_107
# BB#106:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_74:
	movabsq	$0, %rbx
.LBB56_76:                              # %sw.bb89
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_70:
	movabsq	$0, %rbx
.LBB56_72:                              # %sw.bb84
	orq	$2, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_53:
	movabsq	$0, %rbx
.LBB56_55:                              # %lor.lhs.false53
	addq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_66:
	movabsq	$0, %rbx
.LBB56_68:                              # %lor.lhs.false79
	addq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_143:                             # %lor.lhs.false232
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB56_145
# BB#144:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_107:                             # %if.else149
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB56_114
# BB#108:                               # %land.lhs.true151
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$5, %rbx
	je	.LBB56_21
# BB#109:                               # %if.else155
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB56_114
# BB#110:                               # %land.lhs.true157
	movq	recog_data+8(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB56_112
# BB#111:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_60:
	movabsq	$0, %rbx
.LBB56_62:                              # %lor.lhs.false67
	addq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_47:
	movabsq	$0, %rbx
.LBB56_49:                              # %lor.lhs.false41
	addq	%rbx, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_126:                             # %sw.bb187
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB56_138
# BB#127:                               # %land.lhs.true191
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB56_129
# BB#128:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_86:                              # %sw.bb112
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB56_98
# BB#87:                                # %land.lhs.true114
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB56_89
# BB#88:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_145:                             # %if.else236
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB56_152
# BB#146:                               # %land.lhs.true242
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$5, %rbx
	je	.LBB56_21
# BB#147:                               # %if.else246
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB56_152
# BB#148:                               # %land.lhs.true252
	movq	recog_data+8(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB56_150
# BB#149:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_123:
	movabsq	$0, %rax
.LBB56_125:                             # %lor.lhs.false182
	leaq	1(%rax,%rax,2), %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_129:                             # %lor.lhs.false194
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB56_131
# BB#130:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_89:                              # %lor.lhs.false117
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB56_91
# BB#90:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_112:                             # %lor.lhs.false160
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB56_21
# BB#113:                               # %lor.lhs.false160.if.else164_crit_edge
	movl	which_alternative(%rip), %eax
.LBB56_114:                             # %if.else164
	testq	%r15, %rax
	jne	.LBB56_115
# BB#116:                               # %if.else164
	movabsq	$1, %rbx
	jmp	.LBB56_117
.LBB56_115:
	movabsq	$0, %rbx
.LBB56_117:                             # %if.else164
	movq	$2, %rcx
	shlq	%cl, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_150:                             # %lor.lhs.false255
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB56_21
# BB#151:                               # %lor.lhs.false255.if.else259_crit_edge
	movl	which_alternative(%rip), %eax
.LBB56_152:                             # %if.else259
	andq	%r15, %rax
	cmpq	$3, %rax
.LBB56_139:                             # %return
	sbbq	%rbx, %rbx
	andq	$4, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_131:                             # %if.else198
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB56_138
# BB#132:                               # %land.lhs.true202
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$5, %rbx
	je	.LBB56_21
# BB#133:                               # %if.else206
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB56_138
# BB#134:                               # %land.lhs.true210
	movq	recog_data+8(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB56_136
# BB#135:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_91:                              # %if.else121
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB56_98
# BB#92:                                # %land.lhs.true123
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$5, %rbx
	je	.LBB56_21
# BB#93:                                # %if.else127
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB56_98
# BB#94:                                # %land.lhs.true129
	movq	recog_data+8(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	register_operand
	testq	%r15, %rax
	je	.LBB56_96
# BB#95:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB56_36
.LBB56_136:                             # %lor.lhs.false213
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB56_21
# BB#137:                               # %lor.lhs.false213.if.else217_crit_edge
	movl	which_alternative(%rip), %eax
.LBB56_138:                             # %if.else217
	andq	%r15, %rax
	cmpq	$2, %rax
	jmp	.LBB56_139
.LBB56_96:                              # %lor.lhs.false132
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB56_21
# BB#97:                                # %lor.lhs.false132.if.else136_crit_edge
	movl	which_alternative(%rip), %eax
.LBB56_98:                              # %if.else136
	testq	%r15, %rax
	jne	.LBB56_99
# BB#100:                               # %if.else136
	movabsq	$1, %rbx
	xorq	$1, %rbx
	jmp	.LBB56_117
.LBB56_99:
	movabsq	$0, %rbx
	xorq	$1, %rbx
	jmp	.LBB56_117
.Ltmp506:
	.size	get_attr_athlon_fpunits, .Ltmp506-get_attr_athlon_fpunits
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI56_0:
	.quad	.LBB56_82
	.quad	.LBB56_77
	.quad	.LBB56_81
	.quad	.LBB56_82
	.quad	.LBB56_77
	.quad	.LBB56_81
	.quad	.LBB56_73
	.quad	.LBB56_69
	.quad	.LBB56_63
	.quad	.LBB56_56
	.quad	.LBB56_81
	.quad	.LBB56_63
	.quad	.LBB56_63
	.quad	.LBB56_50
	.quad	.LBB56_43
	.quad	.LBB56_81
	.quad	.LBB56_50
	.quad	.LBB56_50
	.quad	.LBB56_50
	.quad	.LBB56_50
	.quad	.LBB56_37
	.quad	.LBB56_30
	.quad	.LBB56_37
	.quad	.LBB56_30
	.quad	.LBB56_37
	.quad	.LBB56_30
	.quad	.LBB56_37
	.quad	.LBB56_30
	.quad	.LBB56_37
	.quad	.LBB56_30
	.quad	.LBB56_37
	.quad	.LBB56_30
	.quad	.LBB56_37
	.quad	.LBB56_30
	.quad	.LBB56_28
	.quad	.LBB56_81
	.quad	.LBB56_20
	.quad	.LBB56_28
	.quad	.LBB56_81
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
	.quad	.LBB56_20
.LJTI56_1:
	.quad	.LBB56_140
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_140
	.quad	.LBB56_140
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_140
	.quad	.LBB56_140
	.quad	.LBB56_140
	.quad	.LBB56_140
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_126
	.quad	.LBB56_81
	.quad	.LBB56_118
	.quad	.LBB56_118
	.quad	.LBB56_118
	.quad	.LBB56_118
	.quad	.LBB56_102
	.quad	.LBB56_102
	.quad	.LBB56_86
	.quad	.LBB56_118
	.quad	.LBB56_81
	.quad	.LBB56_102
	.quad	.LBB56_118
	.quad	.LBB56_102
	.quad	.LBB56_118
	.quad	.LBB56_102
	.quad	.LBB56_118
	.quad	.LBB56_102
	.quad	.LBB56_118
	.quad	.LBB56_21
	.quad	.LBB56_21
	.quad	.LBB56_21
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_21
	.quad	.LBB56_21
	.quad	.LBB56_21
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_21
	.quad	.LBB56_21
	.quad	.LBB56_21
	.quad	.LBB56_81
	.quad	.LBB56_81
	.quad	.LBB56_102
	.quad	.LBB56_102
	.quad	.LBB56_81
	.quad	.LBB56_102
	.quad	.LBB56_102
	.quad	.LBB56_81
	.quad	.LBB56_102
	.quad	.LBB56_102
	.quad	.LBB56_81
	.quad	.LBB56_102
	.quad	.LBB56_102
	.quad	.LBB56_81
	.quad	.LBB56_102
	.quad	.LBB56_102
	.quad	.LBB56_102
	.quad	.LBB56_102
	.quad	.LBB56_102
	.quad	.LBB56_102

	.text
	.globl	get_attr_athlon_decode
	.align	16, 0x90
	.type	get_attr_athlon_decode,@function
get_attr_athlon_decode:                 # @get_attr_athlon_decode
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp511:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp512:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp513:
	.cfi_def_cfa_offset 32
.Ltmp514:
	.cfi_offset %rbx, -32
.Ltmp515:
	.cfi_offset %r14, -24
.Ltmp516:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB57_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB57_2:                               # %cond.end
	movq	$1, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$804, %rdx              # imm = 0x324
	jg	.LBB57_29
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$17, %rdx
	jg	.LBB57_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB57_78
# BB#5:                                 # %sw.bb116
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB57_79
# BB#6:                                 # %land.lhs.true120
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB57_79
# BB#7:                                 # %if.then126
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_athlon_decode, %rcx
	movq	$12189, %rdx            # imm = 0x2F9D
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB57_29:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$805, %rax              # imm = 0x325
	jne	.LBB57_78
	jmp	.LBB57_79
.LBB57_8:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$672, %rdx              # imm = 0x2A0
	jg	.LBB57_67
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$558, %rdx              # imm = 0x22E
	jg	.LBB57_27
# BB#10:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$491, %rdx              # imm = 0x1EB
	jg	.LBB57_22
# BB#11:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$447, %rdx              # imm = 0x1BF
	jg	.LBB57_21
# BB#12:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$422, %rdx              # imm = 0x1A6
	jg	.LBB57_19
# BB#13:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$404, %rdx              # imm = 0x194
	jg	.LBB57_77
# BB#14:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$343, %rdx              # imm = 0x157
	jg	.LBB57_17
# BB#15:                                # %cond.end
	addq	$-18, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$271, %rax              # imm = 0x10F
	ja	.LBB57_78
# BB#16:                                # %cond.end
	jmpq	*.LJTI57_1(,%rax,8)
.LBB57_42:                              # %sw.bb31
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB57_43
# BB#44:                                # %sw.bb31
	movabsq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_67:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$673, %rax              # imm = 0x2A1
	jne	.LBB57_78
	jmp	.LBB57_68
.LBB57_27:                              # %cond.end
	addq	$-559, %rax             # imm = 0xFFFFFFFFFFFFFDD1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$99, %rcx
	ja	.LBB57_78
# BB#28:                                # %cond.end
	jmpq	*.LJTI57_0(,%rcx,8)
.LBB57_30:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	jmp	.LBB57_78
.LBB57_68:                              # %sw.bb98
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
.LBB57_69:                              # %return
	sbbq	%r14, %r14
	andq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_22:                              # %cond.end
	addq	$-492, %rax             # imm = 0xFFFFFFFFFFFFFE14
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$32, %rax
	ja	.LBB57_78
# BB#23:                                # %cond.end
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$8505983999, %rcx       # imm = 0x1FAFF03FF
	testq	%rcx, %rdx
	jne	.LBB57_79
# BB#24:                                # %cond.end
	cmpq	$15, %rax
	jne	.LBB57_78
# BB#25:                                # %sw.bb5
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB57_26
# BB#31:                                # %sw.bb5
	movabsq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_21:                              # %cond.end
	addq	$-448, %rax             # imm = 0xFFFFFFFFFFFFFE40
	jmp	.LBB57_20
.LBB57_19:                              # %cond.end
	addq	$-423, %rax             # imm = 0xFFFFFFFFFFFFFE59
.LBB57_20:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jb	.LBB57_79
	jmp	.LBB57_78
.LBB57_77:                              # %cond.end
	addq	$-405, %rax             # imm = 0xFFFFFFFFFFFFFE6B
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jb	.LBB57_79
	jmp	.LBB57_78
.LBB57_17:                              # %cond.end
	addq	$-344, %rax             # imm = 0xFFFFFFFFFFFFFEA8
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$39, %rcx
	ja	.LBB57_78
# BB#18:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$1098439981057, %rcx    # imm = 0xFFC01FF801
	testq	%rcx, %rax
	jne	.LBB57_79
	jmp	.LBB57_78
.LBB57_26:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_74:                              # %sw.bb111
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB57_75
# BB#76:                                # %sw.bb111
	movabsq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_70:                              # %sw.bb104
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB57_79
# BB#71:                                # %lor.lhs.false106
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB57_72
# BB#73:                                # %lor.lhs.false106
	movabsq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_64:                              # %sw.bb94
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB57_65
# BB#66:                                # %sw.bb94
	movabsq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_60:                              # %sw.bb88
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB57_79
# BB#61:                                # %lor.lhs.false90
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB57_62
# BB#63:                                # %lor.lhs.false90
	movabsq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_56:                              # %sw.bb76
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB57_57
# BB#58:                                # %sw.bb76
	movabsq	$1, %rcx
	jmp	.LBB57_59
.LBB57_54:                              # %sw.bb58
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	leaq	-3(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jb	.LBB57_79
# BB#55:                                # %lor.lhs.false62
	andq	%r15, %rax
	cmpq	$2, %rax
	jbe	.LBB57_46
	jmp	.LBB57_78
.LBB57_48:                              # %sw.bb44
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB57_78
# BB#49:                                # %land.lhs.true48
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB57_50
# BB#52:                                # %land.lhs.true54
	movl	which_alternative(%rip), %eax
	jmp	.LBB57_53
.LBB57_45:                              # %sw.bb35
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB57_78
.LBB57_46:                              # %land.lhs.true
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB57_79
# BB#47:                                # %lor.lhs.false39
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB57_78
	jmp	.LBB57_79
.LBB57_41:                              # %sw.bb23
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	decq	%rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jmp	.LBB57_69
.LBB57_38:                              # %sw.bb19
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB57_39
# BB#40:                                # %sw.bb19
	movabsq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_32:                              # %sw.bb10
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB57_79
# BB#33:                                # %lor.lhs.false
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB57_79
# BB#34:                                # %lor.lhs.false14
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB57_35
# BB#36:                                # %lor.lhs.false14
	movabsq	$1, %rax
	jmp	.LBB57_37
.LBB57_43:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_75:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_72:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_65:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_62:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_57:
	movabsq	$0, %rcx
.LBB57_59:                              # %sw.bb76
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	sbbq	%r14, %r14
	andq	%rcx, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_50:                              # %lor.lhs.false51
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB57_78
# BB#51:                                # %lor.lhs.false51
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
.LBB57_53:                              # %land.lhs.true54
	cmpq	$1, %rax
	je	.LBB57_79
.LBB57_78:                              # %sw.default
	xorq	%r14, %r14
.LBB57_79:                              # %return
	movq	%r14, %rax
.LBB57_37:                              # %lor.lhs.false14
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB57_39:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB57_37
.LBB57_35:
	movabsq	$0, %rax
	jmp	.LBB57_37
.Ltmp517:
	.size	get_attr_athlon_decode, .Ltmp517-get_attr_athlon_decode
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI57_0:
	.quad	.LBB57_30
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_30
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_68
	.quad	.LBB57_79
	.quad	.LBB57_68
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
.LJTI57_1:
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_74
	.quad	.LBB57_74
	.quad	.LBB57_74
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_74
	.quad	.LBB57_74
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_74
	.quad	.LBB57_74
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_70
	.quad	.LBB57_74
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_68
	.quad	.LBB57_64
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_60
	.quad	.LBB57_60
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_56
	.quad	.LBB57_56
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_54
	.quad	.LBB57_54
	.quad	.LBB57_54
	.quad	.LBB57_54
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_48
	.quad	.LBB57_78
	.quad	.LBB57_45
	.quad	.LBB57_45
	.quad	.LBB57_45
	.quad	.LBB57_45
	.quad	.LBB57_42
	.quad	.LBB57_41
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_42
	.quad	.LBB57_78
	.quad	.LBB57_42
	.quad	.LBB57_78
	.quad	.LBB57_42
	.quad	.LBB57_78
	.quad	.LBB57_42
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_42
	.quad	.LBB57_38
	.quad	.LBB57_78
	.quad	.LBB57_42
	.quad	.LBB57_38
	.quad	.LBB57_78
	.quad	.LBB57_42
	.quad	.LBB57_38
	.quad	.LBB57_78
	.quad	.LBB57_42
	.quad	.LBB57_38
	.quad	.LBB57_78
	.quad	.LBB57_32
	.quad	.LBB57_32
	.quad	.LBB57_32
	.quad	.LBB57_32
	.quad	.LBB57_32
	.quad	.LBB57_32
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_79
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_78
	.quad	.LBB57_79
	.quad	.LBB57_79

	.text
	.globl	get_attr_mode
	.align	16, 0x90
	.type	get_attr_mode,@function
get_attr_mode:                          # @get_attr_mode
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp521:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp522:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp523:
	.cfi_def_cfa_offset 32
.Ltmp524:
	.cfi_offset %rbx, -24
.Ltmp525:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rcx
	testq	%rcx, %rcx
	jns	.LBB58_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
	movq	%rax, %rcx
.LBB58_2:                               # %cond.end
	incq	%rcx
	movabsq	$4294967295, %r14       # imm = 0xFFFFFFFF
	andq	%r14, %rcx
	cmpq	$806, %rcx              # imm = 0x326
	ja	.LBB58_126
# BB#3:                                 # %cond.end
	movq	$10, %rax
	jmpq	*.LJTI58_0(,%rcx,8)
.LBB58_121:                             # %sw.bb332
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_123:                             # %sw.bb334
	movq	$2, %rax
	jmp	.LBB58_127
.LBB58_120:                             # %sw.bb331
	movq	$5, %rax
	jmp	.LBB58_127
.LBB58_122:                             # %sw.bb333
	movq	$3, %rax
	jmp	.LBB58_127
.LBB58_117:                             # %sw.bb328
	movq	$8, %rax
	jmp	.LBB58_127
.LBB58_116:                             # %sw.bb327
	movq	$9, %rax
	jmp	.LBB58_127
.LBB58_118:                             # %sw.bb329
	movq	$7, %rax
	jmp	.LBB58_127
.LBB58_119:                             # %sw.bb330
	movq	$6, %rax
	jmp	.LBB58_127
.LBB58_10:                              # %sw.bb20
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %rax
	jb	.LBB58_127
# BB#11:                                # %select.mid6
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_100:                             # %sw.bb295
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$4, %rax
	je	.LBB58_127
# BB#101:                               # %select.mid22
	movq	$5, %rax
	jmp	.LBB58_127
.LBB58_98:                              # %sw.bb291
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$9, %rax
	je	.LBB58_127
# BB#99:                                # %select.mid20
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_16:                              # %sw.bb42
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$9, %rax
	jb	.LBB58_127
# BB#17:                                # %select.mid12
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_88:                              # %sw.bb265
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r14, %rax
	cmpq	$8, %rax
	jne	.LBB58_89
# BB#90:                                # %sw.bb265
	movabsq	$1, %rax
	leaq	2(%rax,%rax), %rax
	jmp	.LBB58_127
.LBB58_114:                             # %sw.bb322
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %rax
	je	.LBB58_127
# BB#115:                               # %select.mid32
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_18:                              # %sw.bb50
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	cmpq	$3, %rcx
	movq	$8, %rax
	jb	.LBB58_127
# BB#19:                                # %if.else57
	leaq	-3(%rcx), %rax
	andq	%r14, %rax
	cmpq	$2, %rax
	movq	$4, %rax
	jb	.LBB58_127
# BB#20:                                # %if.else62
	cmpq	$5, %rcx
	jne	.LBB58_21
# BB#22:                                # %if.else62
	movabsq	$1, %rax
	leaq	8(%rax,%rax), %rax
	jmp	.LBB58_127
.LBB58_106:                             # %sw.bb306
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$7, %rax
	je	.LBB58_127
# BB#107:                               # %select.mid24
	movq	$9, %rax
	jmp	.LBB58_127
.LBB58_108:                             # %sw.bb310
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$8, %rax
	je	.LBB58_127
# BB#109:                               # %select.mid26
	movq	$9, %rax
	jmp	.LBB58_127
.LBB58_12:                              # %sw.bb26
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$3, %rax
	jb	.LBB58_127
# BB#13:                                # %select.mid8
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_89:
	movabsq	$0, %rax
	leaq	2(%rax,%rax), %rax
	jmp	.LBB58_127
.LBB58_124:                             # %sw.bb335
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB58_126
# BB#125:                               # %land.lhs.true339
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB58_128
.LBB58_126:                             # %sw.default
	xorq	%rax, %rax
.LBB58_127:                             # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB58_83:                              # %sw.bb245
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	cmpq	$6, %rcx
	movq	$4, %rax
	jb	.LBB58_127
# BB#84:                                # %if.else258
	movq	$5, %rax
	je	.LBB58_127
# BB#85:                                # %if.else258
	cmpq	$7, %rcx
	jne	.LBB58_87
# BB#86:                                # %if.then263
	movq	$10, %rax
	jmp	.LBB58_127
.LBB58_68:                              # %sw.bb189
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB58_71
# BB#69:                                # %lor.lhs.false193
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r14, %rsi
	je	.LBB58_76
# BB#70:                                # %land.lhs.true197
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r14, %rcx
	je	.LBB58_76
.LBB58_71:                              # %land.lhs.true201
	addq	$-2, %rax
	andq	%r14, %rax
	cmpq	$2, %rax
	ja	.LBB58_73
# BB#72:                                # %lor.lhs.false207
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r14, %rax
	jne	.LBB58_76
.LBB58_73:                              # %land.lhs.true210
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	je	.LBB58_76
# BB#74:                                # %land.lhs.true214
	movl	which_alternative(%rip), %ecx
	cmpq	$4, %rcx
	ja	.LBB58_76
# BB#75:                                # %land.lhs.true214
	movq	$4, %rax
	cmpq	$2, %rcx
	jne	.LBB58_127
.LBB58_76:                              # %lor.lhs.false222
	movl	which_alternative(%rip), %eax
	leaq	-2(%rax), %rcx
	andq	%r14, %rcx
	cmpq	$2, %rcx
	ja	.LBB58_79
# BB#77:                                # %land.lhs.true228
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r14, %rax
	movq	$4, %rax
	jne	.LBB58_127
# BB#78:                                # %lor.lhs.false231thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB58_79:                              # %lor.lhs.false231
	andq	%r14, %rax
	cmpq	$1, %rax
	ja	.LBB58_82
# BB#80:                                # %land.lhs.true235
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rax
	testq	%r14, %rax
	movq	$4, %rax
	je	.LBB58_127
# BB#81:                                # %lor.lhs.false239
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r14, %rcx
	je	.LBB58_127
.LBB58_82:                              # %if.else244
	movq	$3, %rax
	jmp	.LBB58_127
.LBB58_53:                              # %sw.bb148
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %esi
	leaq	-3(%rsi), %rax
	andq	%r14, %rax
	cmpq	$3, %rax
	movq	$4, %rax
	jb	.LBB58_127
# BB#54:                                # %if.else155
	andq	%r14, %rsi
	cmpq	$6, %rsi
	jne	.LBB58_56
# BB#55:
	movq	$2, %rax
	jmp	.LBB58_127
.LBB58_48:                              # %sw.bb142
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r14, %rax
	movq	$4, %rax
	je	.LBB58_127
# BB#49:                                # %lor.lhs.false144
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r14, %rdx
	jne	.LBB58_50
# BB#51:                                # %lor.lhs.false144
	movabsq	$1, %rax
	jmp	.LBB58_52
.LBB58_43:                              # %sw.bb127
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	movq	$5, %rax
	jb	.LBB58_127
# BB#44:                                # %if.else138
	jne	.LBB58_45
# BB#46:                                # %if.else138
	movabsq	$1, %rax
	leaq	5(%rax,%rax,4), %rax
	jmp	.LBB58_127
.LBB58_34:                              # %sw.bb103
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	testq	%rcx, %rcx
	movq	$4, %rax
	je	.LBB58_127
# BB#35:                                # %if.else106
	leaq	-1(%rcx), %rdx
	andq	%r14, %rdx
	cmpq	$3, %rdx
	jae	.LBB58_37
# BB#36:
	movq	$5, %rax
	jmp	.LBB58_127
.LBB58_92:                              # %sw.bb270
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$4, %rax
	je	.LBB58_127
# BB#93:                                # %select.mid14
	movq	$7, %rax
	jmp	.LBB58_127
.LBB58_94:                              # %sw.bb277
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$5, %rax
	je	.LBB58_127
# BB#95:                                # %select.mid16
	movq	$7, %rax
	jmp	.LBB58_127
.LBB58_26:                              # %sw.bb75
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	cmpq	$3, %rcx
	movq	$7, %rax
	jb	.LBB58_127
# BB#27:                                # %if.else82
	leaq	-3(%rcx), %rax
	andq	%r14, %rax
	cmpq	$2, %rax
	movq	$4, %rax
	jb	.LBB58_127
# BB#28:                                # %if.else87
	cmpq	$5, %rcx
	movq	$10, %rax
	je	.LBB58_127
# BB#29:                                # %if.else90
	leaq	-6(%rcx), %rax
	andq	%r14, %rax
	cmpq	$3, %rax
	movq	$7, %rax
	jb	.LBB58_127
# BB#30:                                # %if.else97
	addq	$-9, %rcx
	andq	%r14, %rcx
	cmpq	$1, %rcx
	jbe	.LBB58_31
# BB#32:                                # %if.else97
	movabsq	$1, %rax
	orq	$4, %rax
	jmp	.LBB58_127
.LBB58_24:                              # %sw.bb66
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	testq	%rcx, %rcx
	movq	$8, %rax
	je	.LBB58_127
# BB#25:                                # %if.else69
	decq	%rcx
	andq	%r14, %rcx
	cmpq	$2, %rcx
	sbbq	%rax, %rax
	notq	%rax
	andq	$1, %rax
	leaq	4(,%rax,4), %rax
	jmp	.LBB58_127
.LBB58_96:                              # %sw.bb284
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$4, %rax
	je	.LBB58_127
# BB#97:                                # %select.mid18
	movq	$8, %rax
	jmp	.LBB58_127
.LBB58_102:                             # %sw.bb299
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	movq	$7, %rax
	testq	%rcx, %rcx
	je	.LBB58_127
# BB#103:                               # %sw.bb299
	cmpq	$1, %rcx
	jne	.LBB58_105
# BB#104:                               # %if.then304
	movq	$9, %rax
	jmp	.LBB58_127
.LBB58_14:                              # %sw.bb32
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	movq	$7, %rax
	jb	.LBB58_127
# BB#15:                                # %select.mid10
	movq	$8, %rax
	jmp	.LBB58_127
.LBB58_110:                             # %sw.bb314
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$8, %rax
	je	.LBB58_127
# BB#111:                               # %select.mid28
	movq	$7, %rax
	jmp	.LBB58_127
.LBB58_8:                               # %sw.bb14
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$4, %rax
	jb	.LBB58_127
# BB#9:                                 # %select.mid4
	movq	$5, %rax
	jmp	.LBB58_127
.LBB58_6:                               # %sw.bb6
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$2, %rax
	jb	.LBB58_127
# BB#7:                                 # %select.mid2
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_112:                             # %sw.bb318
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$3, %rax
	je	.LBB58_127
# BB#113:                               # %select.mid30
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$7, %rax
	jb	.LBB58_127
# BB#5:                                 # %select.mid
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_50:
	movabsq	$0, %rax
.LBB58_52:                              # %lor.lhs.false144
	xorq	$1, %rax
	leaq	2(%rax,%rax), %rax
	jmp	.LBB58_127
.LBB58_37:                              # %if.else113
	cmpq	$4, %rcx
	je	.LBB58_127
# BB#38:                                # %if.else116
	leaq	-5(%rcx), %rax
	andq	%r14, %rax
	cmpq	$3, %rax
	movq	$5, %rax
	jb	.LBB58_127
# BB#39:                                # %if.else123
	cmpq	$8, %rcx
	jne	.LBB58_40
# BB#41:                                # %if.else123
	movabsq	$1, %rax
	leaq	5(%rax,%rax,4), %rax
	jmp	.LBB58_127
.LBB58_21:
	movabsq	$0, %rax
	leaq	8(%rax,%rax), %rax
	jmp	.LBB58_127
.LBB58_56:                              # %if.else158
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rdi
	testq	%r14, %rdi
	je	.LBB58_58
# BB#57:                                # %if.else158
	cmpq	$2, %rsi
	je	.LBB58_127
.LBB58_58:                              # %lor.lhs.false163
	testq	%r14, %rdi
	movabsq	$0, %rcx
	movabsq	$1, %rbx
	movq	%rcx, %rdi
	jne	.LBB58_60
# BB#59:                                # %lor.lhs.false163
	movq	%rbx, %rdi
.LBB58_60:                              # %lor.lhs.false163
	cmpq	$2, %rsi
	je	.LBB58_62
# BB#61:                                # %lor.lhs.false163
	movq	%rbx, %rcx
.LBB58_62:                              # %lor.lhs.false163
	orq	%rcx, %rdi
	cmpq	$1, %rdi
	jne	.LBB58_67
# BB#63:                                # %lor.lhs.false163
	cmpq	$2, %rsi
	ja	.LBB58_67
# BB#64:                                # %land.lhs.true175
	movl	x86_partial_reg_dependency(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r14, %rcx
	jne	.LBB58_127
# BB#65:                                # %lor.lhs.false179
	movl	x86_partial_reg_stall(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r14, %rcx
	je	.LBB58_67
# BB#66:                                # %land.lhs.true183
	movl	x86_qimode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r14, %rcx
	je	.LBB58_127
.LBB58_67:                              # %if.else188
	movq	$2, %rax
	jmp	.LBB58_127
.LBB58_45:
	movabsq	$0, %rax
	leaq	5(%rax,%rax,4), %rax
	jmp	.LBB58_127
.LBB58_105:                             # %if.else305
	movq	$8, %rax
	jmp	.LBB58_127
.LBB58_87:                              # %if.else264
	movq	$4, %rax
	jmp	.LBB58_127
.LBB58_128:                             # %if.then345
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_mode, %rcx
	movq	$17669, %rdx            # imm = 0x4505
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB58_31:
	movabsq	$0, %rax
	orq	$4, %rax
	jmp	.LBB58_127
.LBB58_40:
	movabsq	$0, %rax
	leaq	5(%rax,%rax,4), %rax
	jmp	.LBB58_127
.Ltmp526:
	.size	get_attr_mode, .Ltmp526-get_attr_mode
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI58_0:
	.quad	.LBB58_124
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_119
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_119
	.quad	.LBB58_119
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_119
	.quad	.LBB58_119
	.quad	.LBB58_119
	.quad	.LBB58_119
	.quad	.LBB58_119
	.quad	.LBB58_119
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_83
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_123
	.quad	.LBB58_68
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_123
	.quad	.LBB58_53
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_88
	.quad	.LBB58_88
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_121
	.quad	.LBB58_88
	.quad	.LBB58_48
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_43
	.quad	.LBB58_34
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_92
	.quad	.LBB58_94
	.quad	.LBB58_26
	.quad	.LBB58_118
	.quad	.LBB58_24
	.quad	.LBB58_96
	.quad	.LBB58_18
	.quad	.LBB58_18
	.quad	.LBB58_117
	.quad	.LBB58_98
	.quad	.LBB58_98
	.quad	.LBB58_98
	.quad	.LBB58_98
	.quad	.LBB58_16
	.quad	.LBB58_16
	.quad	.LBB58_16
	.quad	.LBB58_16
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_100
	.quad	.LBB58_100
	.quad	.LBB58_100
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_102
	.quad	.LBB58_117
	.quad	.LBB58_106
	.quad	.LBB58_106
	.quad	.LBB58_108
	.quad	.LBB58_108
	.quad	.LBB58_118
	.quad	.LBB58_14
	.quad	.LBB58_110
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_123
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_12
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_10
	.quad	.LBB58_10
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_8
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_6
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_100
	.quad	.LBB58_100
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_12
	.quad	.LBB58_122
	.quad	.LBB58_10
	.quad	.LBB58_123
	.quad	.LBB58_10
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_10
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_10
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_114
	.quad	.LBB58_123
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_112
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_114
	.quad	.LBB58_114
	.quad	.LBB58_123
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_126
	.quad	.LBB58_122
	.quad	.LBB58_126
	.quad	.LBB58_122
	.quad	.LBB58_126
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_126
	.quad	.LBB58_122
	.quad	.LBB58_126
	.quad	.LBB58_122
	.quad	.LBB58_126
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_126
	.quad	.LBB58_122
	.quad	.LBB58_126
	.quad	.LBB58_123
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_126
	.quad	.LBB58_122
	.quad	.LBB58_126
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_126
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_117
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_117
	.quad	.LBB58_118
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_126
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_122
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_123
	.quad	.LBB58_120
	.quad	.LBB58_120
	.quad	.LBB58_121
	.quad	.LBB58_121
	.quad	.LBB58_122
	.quad	.LBB58_4
	.quad	.LBB58_117
	.quad	.LBB58_117
	.quad	.LBB58_116
	.quad	.LBB58_116
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_118
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_117
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_118
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_117
	.quad	.LBB58_121
	.quad	.LBB58_120
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_127
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_126
	.quad	.LBB58_120

	.text
	.globl	get_attr_fp_int_src
	.align	16, 0x90
	.type	get_attr_fp_int_src,@function
get_attr_fp_int_src:                    # @get_attr_fp_int_src
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp529:
	.cfi_def_cfa_offset 16
.Ltmp530:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB59_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB59_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$166, %rdx
	jg	.LBB59_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB59_11
# BB#4:                                 # %sw.bb4
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB59_11
# BB#5:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB59_11
# BB#6:                                 # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_fp_int_src, %rcx
	movq	$12429, %rdx            # imm = 0x308D
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB59_7:                               # %cond.end
	movq	$1, %rdx
	movq	$32, %rcx
	movq	%rax, %rsi
	shlq	%cl, %rsi
	movq	$32, %rcx
	sarq	%cl, %rsi
	cmpq	$535, %rsi              # imm = 0x217
	jg	.LBB59_9
# BB#8:                                 # %cond.end
	addq	$-167, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$18, %rcx
	jb	.LBB59_12
	jmp	.LBB59_11
.LBB59_9:                               # %cond.end
	addq	$-536, %rax             # imm = 0xFFFFFFFFFFFFFDE8
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$14, %rcx
	ja	.LBB59_11
# BB#10:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$30819, %rax            # imm = 0x7863
	jne	.LBB59_12
.LBB59_11:                              # %sw.default
	xorq	%rdx, %rdx
.LBB59_12:                              # %return
	movq	%rdx, %rax
	popq	%rbx
	retq
.Ltmp531:
	.size	get_attr_fp_int_src, .Ltmp531-get_attr_fp_int_src
	.cfi_endproc

	.globl	get_attr_ppro_uops
	.align	16, 0x90
	.type	get_attr_ppro_uops,@function
get_attr_ppro_uops:                     # @get_attr_ppro_uops
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp536:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp537:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp538:
	.cfi_def_cfa_offset 32
.Ltmp539:
	.cfi_offset %rbx, -32
.Ltmp540:
	.cfi_offset %r14, -24
.Ltmp541:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB60_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB60_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$806, %rax              # imm = 0x326
	ja	.LBB60_114
# BB#3:                                 # %cond.end
	movq	$2, %r14
	jmpq	*.LJTI60_0(,%rax,8)
.LBB60_112:                             # %sw.bb319
	movq	$1, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_114:                             # %sw.default
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#115:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_113:                             # %sw.bb320
	xorq	%r14, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_35:                              # %sw.bb73
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB60_117
# BB#36:                                # %if.else76
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#37:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_27:                              # %sw.bb48
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB60_116
# BB#28:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_92:                              # %sw.bb253
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %r14
	je	.LBB60_117
# BB#93:                                # %lor.lhs.false256
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB60_116
# BB#94:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_95:                              # %sw.bb261
	movq	%rbx, %rdi
	callq	get_attr_type
	movq	%rax, %r14
	andq	%r15, %r14
	movq	%rbx, %rdi
	callq	get_attr_memory
	cmpq	$7, %r14
	jne	.LBB60_99
# BB#96:                                # %if.then264
	andq	%r15, %rax
	movq	$1, %r14
	cmpq	$2, %rax
	je	.LBB60_117
# BB#97:                                # %lor.lhs.false267
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB60_116
# BB#98:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_44:                              # %sw.bb96
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB60_117
# BB#45:                                # %if.else101
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#46:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_29:                              # %sw.bb53
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB60_117
# BB#30:                                # %if.else56
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#31:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_69:                              # %sw.bb178
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jb	.LBB60_117
# BB#70:                                # %if.else183
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#71:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_58:                              # %sw.bb145
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$1, %r14
	je	.LBB60_117
# BB#59:                                # %select.mid
	movq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_47:                              # %sw.bb106
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB60_49
# BB#48:                                # %sw.bb106
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB60_117
.LBB60_49:                              # %if.else117
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#50:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_24:                              # %sw.bb40
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB60_117
# BB#25:                                # %if.else43
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#26:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_99:                              # %if.else272
	testq	%r15, %rax
	jne	.LBB60_116
# BB#100:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_109:                             # %sw.bb307
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB60_117
# BB#110:                               # %land.lhs.true311
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB60_117
# BB#111:                               # %if.then317
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_ppro_uops, %rcx
	movq	$18084, %rdx            # imm = 0x46A4
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB60_101:                             # %sw.bb277
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB60_107
# BB#102:                               # %land.lhs.true289
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB60_104
# BB#103:                               # %lor.lhs.false291
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB60_104
.LBB60_107:                             # %if.else302
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#108:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_81:                              # %sw.bb210
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB60_85
# BB#82:                                # %sw.bb210
	cmpq	$3, %rax
	jne	.LBB60_87
# BB#83:                                # %land.lhs.true212
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB60_89
# BB#84:                                # %lor.lhs.false216
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB60_85
	jmp	.LBB60_89
.LBB60_74:                              # %sw.bb192
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB60_79
# BB#75:                                # %land.lhs.true195
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %r14
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB60_76
.LBB60_79:                              # %if.else205
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#80:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_72:                              # %sw.bb188
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$1, %r14
	je	.LBB60_117
# BB#73:                                # %select.mid2
	movq	$2, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_60:                              # %sw.bb149
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	leaq	-5(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jae	.LBB60_61
.LBB60_67:                              # %if.else173
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#68:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_51:                              # %sw.bb122
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %r14d
	movq	%rbx, %rdi
	callq	get_attr_memory
	cmpq	$3, %r14
	jb	.LBB60_56
# BB#52:                                # %sw.bb122
	addq	$-3, %r14
	andq	%r15, %r14
	cmpq	$1, %r14
	ja	.LBB60_56
# BB#53:                                # %if.then132
	andq	%r15, %rax
	movq	$1, %r14
	cmpq	$2, %rax
	je	.LBB60_117
# BB#54:                                # %lor.lhs.false135
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB60_116
# BB#55:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_38:                              # %sw.bb81
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %r14d
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r14, %r14
	je	.LBB60_42
# BB#39:                                # %if.then83
	andq	%r15, %rax
	movq	$1, %r14
	cmpq	$2, %rax
	je	.LBB60_117
# BB#40:                                # %lor.lhs.false86
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB60_116
# BB#41:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_32:                              # %sw.bb61
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	decq	%rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jb	.LBB60_117
# BB#33:                                # %if.else68
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#34:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_20:                              # %sw.bb34
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB60_21
# BB#22:                                # %sw.bb34
	movabsq	$1, %r14
	incq	%r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_13:                              # %sw.bb16
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB60_18
# BB#14:                                # %land.lhs.true18
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB60_18
# BB#15:                                # %if.then21
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %r14
	je	.LBB60_117
# BB#16:                                # %lor.lhs.false24
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB60_116
# BB#17:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB60_11
# BB#5:                                 # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB60_11
# BB#6:                                 # %if.then
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %r14
	je	.LBB60_117
# BB#7:                                 # %lor.lhs.false
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB60_8
# BB#9:                                 # %lor.lhs.false
	movabsq	$1, %rax
	jmp	.LBB60_10
.LBB60_18:                              # %if.else29
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#19:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_11:                              # %if.else11
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#12:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_56:                              # %if.else140
	testq	%r15, %rax
	jne	.LBB60_116
# BB#57:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_21:
	movabsq	$0, %r14
	incq	%r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_42:                              # %if.else91
	testq	%r15, %rax
	jne	.LBB60_116
# BB#43:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_104:                             # %if.then294
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %r14
	je	.LBB60_117
# BB#105:                               # %lor.lhs.false297
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB60_116
# BB#106:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_87:                              # %land.lhs.true234
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB60_89
# BB#88:                                # %land.lhs.true234
	cmpq	$2, %rax
	jne	.LBB60_89
.LBB60_85:                              # %if.else248
	movq	%rbx, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB60_116
# BB#86:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_76:                              # %if.then197
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB60_117
# BB#77:                                # %lor.lhs.false200
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB60_116
# BB#78:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_89:                              # %if.then240
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %r14
	je	.LBB60_117
# BB#90:                                # %lor.lhs.false243
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB60_116
# BB#91:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.LBB60_61:                              # %sw.bb149
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB60_117
# BB#62:                                # %land.lhs.true160
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB60_64
# BB#63:                                # %lor.lhs.false162
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB60_67
.LBB60_64:                              # %if.then165
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %r14
	je	.LBB60_117
# BB#65:                                # %lor.lhs.false168
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB60_66
.LBB60_116:                             # %sw.default
	movabsq	$1, %r14
.LBB60_117:                             # %return
	movq	%r14, %rax
.LBB60_10:                              # %lor.lhs.false
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB60_8:
	movabsq	$0, %rax
	jmp	.LBB60_10
.LBB60_66:
	movabsq	$0, %r14
	movq	%r14, %rax
	jmp	.LBB60_10
.Ltmp542:
	.size	get_attr_ppro_uops, .Ltmp542-get_attr_ppro_uops
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI60_0:
	.quad	.LBB60_109
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_113
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_101
	.quad	.LBB60_112
	.quad	.LBB60_113
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_95
	.quad	.LBB60_112
	.quad	.LBB60_113
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_92
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_81
	.quad	.LBB60_112
	.quad	.LBB60_92
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_95
	.quad	.LBB60_95
	.quad	.LBB60_112
	.quad	.LBB60_113
	.quad	.LBB60_114
	.quad	.LBB60_95
	.quad	.LBB60_74
	.quad	.LBB60_92
	.quad	.LBB60_92
	.quad	.LBB60_92
	.quad	.LBB60_117
	.quad	.LBB60_72
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_69
	.quad	.LBB60_60
	.quad	.LBB60_112
	.quad	.LBB60_113
	.quad	.LBB60_112
	.quad	.LBB60_58
	.quad	.LBB60_58
	.quad	.LBB60_51
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_47
	.quad	.LBB60_47
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_44
	.quad	.LBB60_44
	.quad	.LBB60_44
	.quad	.LBB60_44
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_38
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_35
	.quad	.LBB60_32
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_35
	.quad	.LBB60_114
	.quad	.LBB60_35
	.quad	.LBB60_114
	.quad	.LBB60_35
	.quad	.LBB60_114
	.quad	.LBB60_35
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_35
	.quad	.LBB60_29
	.quad	.LBB60_114
	.quad	.LBB60_35
	.quad	.LBB60_29
	.quad	.LBB60_114
	.quad	.LBB60_35
	.quad	.LBB60_29
	.quad	.LBB60_114
	.quad	.LBB60_35
	.quad	.LBB60_29
	.quad	.LBB60_114
	.quad	.LBB60_35
	.quad	.LBB60_35
	.quad	.LBB60_35
	.quad	.LBB60_35
	.quad	.LBB60_35
	.quad	.LBB60_35
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_27
	.quad	.LBB60_27
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_27
	.quad	.LBB60_27
	.quad	.LBB60_27
	.quad	.LBB60_27
	.quad	.LBB60_27
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_27
	.quad	.LBB60_113
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_24
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_24
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_112
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_113
	.quad	.LBB60_112
	.quad	.LBB60_113
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_20
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_13
	.quad	.LBB60_4
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_117
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_69
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_113
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_113
	.quad	.LBB60_113
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_114
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_112
	.quad	.LBB60_117

	.text
	.globl	get_attr_pent_prefix
	.align	16, 0x90
	.type	get_attr_pent_prefix,@function
get_attr_pent_prefix:                   # @get_attr_pent_prefix
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp547:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp548:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp549:
	.cfi_def_cfa_offset 32
.Ltmp550:
	.cfi_offset %rbx, -32
.Ltmp551:
	.cfi_offset %r14, -24
.Ltmp552:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB61_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB61_2:                               # %cond.end
	movq	$1, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$658, %rdx              # imm = 0x292
	jg	.LBB61_69
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$5, %rdx
	jg	.LBB61_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB61_141
# BB#5:                                 # %sw.bb246
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB61_141
# BB#6:                                 # %land.lhs.true250
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB61_141
# BB#7:                                 # %if.then256
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.get_attr_pent_prefix, %rcx
	movq	$19810, %rdx            # imm = 0x4D62
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB61_69:                              # %cond.end
	addq	$-659, %rax             # imm = 0xFFFFFFFFFFFFFD6D
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$174, %rcx
	ja	.LBB61_141
# BB#70:                                # %cond.end
	jmpq	*.LJTI61_0(,%rcx,8)
.LBB61_71:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB61_73
# BB#72:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_8:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$32, %rdx
	jg	.LBB61_10
# BB#9:                                 # %cond.end
	addq	$-6, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jb	.LBB61_142
	jmp	.LBB61_141
.LBB61_10:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$585, %rdx              # imm = 0x249
	jg	.LBB61_64
# BB#11:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$558, %rdx              # imm = 0x22E
	jg	.LBB61_62
# BB#12:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$523, %rdx              # imm = 0x20B
	jg	.LBB61_56
# BB#13:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$44, %rdx
	jg	.LBB61_16
# BB#14:                                # %cond.end
	addq	$-33, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$4, %rcx
	ja	.LBB61_141
# BB#15:                                # %cond.end
	jmpq	*.LJTI61_3(,%rcx,8)
.LBB61_64:                              # %cond.end
	addq	$-586, %rax             # imm = 0xFFFFFFFFFFFFFDB6
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$48, %rcx
	ja	.LBB61_141
# BB#65:                                # %cond.end
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	movabsq	$321610774950387, %rsi  # imm = 0x12480D7FF31F3
	testq	%rsi, %rdx
	jne	.LBB61_142
# BB#66:                                # %cond.end
	shlq	%cl, %rax
	movabsq	$21474836480, %rcx      # imm = 0x500000000
	testq	%rcx, %rax
	je	.LBB61_141
# BB#67:                                # %sw.bb13
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	je	.LBB61_73
# BB#68:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_62:                              # %cond.end
	addq	$-559, %rax             # imm = 0xFFFFFFFFFFFFFDD1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$4, %rcx
	ja	.LBB61_141
# BB#63:                                # %cond.end
	jmpq	*.LJTI61_1(,%rcx,8)
.LBB61_137:                             # %sw.bb241
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB61_138
# BB#139:                               # %sw.bb241
	movabsq	$1, %r14
	jmp	.LBB61_142
.LBB61_56:                              # %cond.end
	addq	$-524, %rax             # imm = 0xFFFFFFFFFFFFFDF4
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$16, %rcx
	ja	.LBB61_141
# BB#57:                                # %cond.end
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$67657, %rdx            # imm = 0x10849
	jne	.LBB61_142
# BB#58:                                # %cond.end
	shlq	%cl, %rax
	testq	$36, %rax
	je	.LBB61_59
# BB#74:                                # %sw.bb23
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB61_76
# BB#75:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_16:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$482, %rdx              # imm = 0x1E2
	jg	.LBB61_51
# BB#17:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$472, %rdx              # imm = 0x1D8
	jg	.LBB61_50
# BB#18:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$458, %rdx              # imm = 0x1CA
	jg	.LBB61_48
# BB#19:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$214, %rdx
	jg	.LBB61_22
# BB#20:                                # %cond.end
	addq	$-45, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$133, %rax
	ja	.LBB61_141
# BB#21:                                # %cond.end
	jmpq	*.LJTI61_2(,%rax,8)
.LBB61_114:                             # %sw.bb156
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	jne	.LBB61_115
# BB#116:                               # %sw.bb156
	movabsq	$1, %r14
	jmp	.LBB61_142
.LBB61_51:                              # %cond.end
	addq	$-483, %rax             # imm = 0xFFFFFFFFFFFFFE1D
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$8, %rax
	ja	.LBB61_141
# BB#52:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	testq	$121, %rsi
	jne	.LBB61_142
# BB#53:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$384, %rdx              # imm = 0x180
	je	.LBB61_141
# BB#54:                                # %sw.bb27
	movq	%rbx, %rdi
	callq	get_attr_prefix_0f
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB61_55
.LBB61_76:                              # %sw.bb27
	movabsq	$1, %r14
	jmp	.LBB61_142
.LBB61_138:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_50:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$473, %rax              # imm = 0x1D9
	jne	.LBB61_141
	jmp	.LBB61_142
.LBB61_59:                              # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$33792, %rax            # imm = 0x8400
	je	.LBB61_141
# BB#60:                                # %sw.bb19
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB61_61
.LBB61_73:                              # %sw.bb19
	movabsq	$1, %r14
	jmp	.LBB61_142
.LBB61_48:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$459, %rax              # imm = 0x1CB
	je	.LBB61_142
# BB#49:                                # %cond.end
	cmpq	$461, %rax              # imm = 0x1CD
	jne	.LBB61_141
	jmp	.LBB61_142
.LBB61_61:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_22:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$242, %rdx
	jg	.LBB61_26
# BB#23:                                # %cond.end
	leaq	-216(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$3, %rdx
	jb	.LBB61_142
# BB#24:                                # %cond.end
	andq	%rcx, %rax
	cmpq	$215, %rax
	jne	.LBB61_25
# BB#80:                                # %sw.bb40
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jmp	.LBB61_81
.LBB61_26:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$278, %rdx              # imm = 0x116
	jg	.LBB61_30
# BB#27:                                # %cond.end
	addq	$-243, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$9, %rcx
	ja	.LBB61_141
# BB#28:                                # %cond.end
	movq	$1, %rax
	movq	$1, %rdx
	shlq	%cl, %rdx
	testq	$519, %rdx              # imm = 0x207
	jne	.LBB61_142
# BB#29:                                # %cond.end
	shlq	%cl, %rax
	testq	$448, %rax              # imm = 0x1C0
	jne	.LBB61_38
	jmp	.LBB61_141
.LBB61_55:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_30:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$436, %rdx              # imm = 0x1B4
	jg	.LBB61_46
# BB#31:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$424, %rdx              # imm = 0x1A8
	jg	.LBB61_45
# BB#32:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$398, %rdx              # imm = 0x18E
	jg	.LBB61_40
# BB#33:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$350, %rdx              # imm = 0x15E
	jg	.LBB61_140
# BB#34:                                # %cond.end
	addq	$-279, %rax             # imm = 0xFFFFFFFFFFFFFEE9
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$58, %rcx
	ja	.LBB61_141
# BB#35:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$504405082411237385, %rdx # imm = 0x70001C000060009
	testq	%rdx, %rax
	jne	.LBB61_142
# BB#36:                                # %cond.end
	cmpq	$11, %rcx
	jne	.LBB61_37
# BB#77:                                # %sw.bb32
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB61_78
# BB#79:                                # %sw.bb32
	movabsq	$1, %r14
	jmp	.LBB61_142
.LBB61_46:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$437, %rax              # imm = 0x1B5
	je	.LBB61_142
# BB#47:                                # %cond.end
	cmpq	$439, %rax              # imm = 0x1B7
	jne	.LBB61_141
	jmp	.LBB61_142
.LBB61_136:                             # %sw.bb221
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
.LBB61_81:                              # %return
	sbbq	%r14, %r14
	andq	$1, %r14
	jmp	.LBB61_142
.LBB61_125:                             # %sw.bb183
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB61_128
# BB#126:                               # %lor.lhs.false187
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB61_133
# BB#127:                               # %land.lhs.true191
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB61_133
.LBB61_128:                             # %land.lhs.true195
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB61_130
# BB#129:                               # %lor.lhs.false201
	movq	recog_data+8(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB61_133
.LBB61_130:                             # %land.lhs.true204
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %r14
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB61_133
# BB#131:                               # %land.lhs.true208
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB61_133
# BB#132:                               # %land.lhs.true208
	cmpq	$2, %rax
	jne	.LBB61_142
.LBB61_133:                             # %lor.lhs.false216
	movq	%rbx, %rdi
	callq	get_attr_mode
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB61_134
# BB#135:                               # %lor.lhs.false216
	movabsq	$1, %r14
	jmp	.LBB61_142
.LBB61_117:                             # %sw.bb161
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB61_142
# BB#118:                               # %sw.bb161
	cmpq	$3, %rax
	jne	.LBB61_123
# BB#119:                               # %lor.lhs.false163
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB61_141
# BB#120:                               # %land.lhs.true167
	movl	x86_qimode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB61_141
# BB#121:                               # %land.lhs.true171
	movq	$1, %r14
	cmpq	$3, %rax
	je	.LBB61_142
# BB#122:                               # %land.lhs.true171
	cmpq	$5, %rax
	je	.LBB61_142
.LBB61_123:                             # %lor.lhs.false175
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %r14
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB61_141
# BB#124:                               # %lor.lhs.false175
	cmpq	$2, %rax
	je	.LBB61_142
	jmp	.LBB61_141
.LBB61_110:                             # %sw.bb150
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB61_142
# BB#111:                               # %lor.lhs.false152
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB61_112
# BB#113:                               # %lor.lhs.false152
	movabsq	$1, %r14
	jmp	.LBB61_142
.LBB61_103:                             # %sw.bb130
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jb	.LBB61_105
# BB#104:                               # %sw.bb130
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$3, %rcx
	jb	.LBB61_142
.LBB61_105:                             # %lor.lhs.false140
	cmpq	$1, %rax
	movabsq	$0, %rcx
	movabsq	$1, %rsi
	movq	%rcx, %rdx
	jbe	.LBB61_107
# BB#106:                               # %lor.lhs.false140
	movq	%rsi, %rdx
.LBB61_107:                             # %lor.lhs.false140
	movabsq	$4294967294, %rdi       # imm = 0xFFFFFFFE
	andq	%rdi, %rax
	cmpq	$2, %rax
	jne	.LBB61_109
# BB#108:                               # %lor.lhs.false140
	movq	%rsi, %rcx
.LBB61_109:                             # %lor.lhs.false140
	andq	%rcx, %rdx
	movq	%rdx, %rax
	jmp	.LBB61_143
.LBB61_101:                             # %sw.bb116
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-5, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	jb	.LBB61_142
# BB#102:                               # %land.lhs.true120
	cmpq	$4, %rax
	sbbq	%rax, %rax
	andq	$1, %rax
	jmp	.LBB61_143
.LBB61_95:                              # %sw.bb88
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB61_97
# BB#96:                                # %sw.bb88
	leaq	-5(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$4, %rcx
	jb	.LBB61_142
.LBB61_97:                              # %lor.lhs.false102
	cmpq	$2, %rax
	jbe	.LBB61_98
# BB#99:                                # %lor.lhs.false102
	movabsq	$1, %rcx
	jmp	.LBB61_100
.LBB61_91:                              # %sw.bb72
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB61_92
# BB#93:                                # %sw.bb72
	movabsq	$1, %rcx
	jmp	.LBB61_94
.LBB61_85:                              # %sw.bb62
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r14
	jne	.LBB61_87
# BB#86:                                # %sw.bb62
	movq	%rcx, %r14
.LBB61_87:                              # %sw.bb62
	movl	which_alternative(%rip), %edx
	testq	%rdx, %rdx
	je	.LBB61_89
# BB#88:                                # %sw.bb62
	movq	%rcx, %rax
.LBB61_89:                              # %sw.bb62
	orq	%rax, %r14
	jmp	.LBB61_142
.LBB61_82:                              # %sw.bb46
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	ja	.LBB61_84
# BB#83:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_115:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_25:                              # %cond.end
	cmpq	$220, %rax
	jne	.LBB61_141
	jmp	.LBB61_142
.LBB61_45:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$425, %rax              # imm = 0x1A9
	jne	.LBB61_141
	jmp	.LBB61_142
.LBB61_40:                              # %cond.end
	addq	$-399, %rax             # imm = 0xFFFFFFFFFFFFFE71
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$15, %rcx
	ja	.LBB61_141
# BB#41:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$49411, %rax            # imm = 0xC103
	jne	.LBB61_142
# BB#42:                                # %cond.end
	cmpq	$13, %rcx
	jne	.LBB61_141
.LBB61_43:                              # %sw.bb68
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB61_44
# BB#90:                                # %sw.bb68
	movabsq	$1, %r14
	jmp	.LBB61_142
.LBB61_140:                             # %cond.end
	addq	$-351, %rax             # imm = 0xFFFFFFFFFFFFFEA1
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jb	.LBB61_142
	jmp	.LBB61_141
.LBB61_37:                              # %cond.end
	cmpq	$13, %rcx
	jne	.LBB61_141
.LBB61_38:                              # %sw.bb56
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB61_39
.LBB61_84:                              # %sw.bb56
	movabsq	$1, %r14
	jmp	.LBB61_142
.LBB61_141:                             # %sw.default
	xorq	%r14, %r14
.LBB61_142:                             # %return
	movq	%r14, %rax
.LBB61_143:                             # %return
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB61_78:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_134:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_112:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_98:
	movabsq	$0, %rcx
.LBB61_100:                             # %lor.lhs.false102
	addq	$-9, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	sbbq	%r14, %r14
	andq	%rcx, %r14
	jmp	.LBB61_142
.LBB61_92:
	movabsq	$0, %rcx
.LBB61_94:                              # %sw.bb72
	addq	$-5, %rax
	andq	%r15, %rax
	cmpq	$4, %rax
	sbbq	%rax, %rax
	andq	%rcx, %rax
	jmp	.LBB61_143
.LBB61_44:
	movabsq	$0, %r14
	jmp	.LBB61_142
.LBB61_39:
	movabsq	$0, %r14
	jmp	.LBB61_142
.Ltmp553:
	.size	get_attr_pent_prefix, .Ltmp553-get_attr_pent_prefix
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI61_0:
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_71
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
.LJTI61_1:
	.quad	.LBB61_137
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_137
	.quad	.LBB61_142
.LJTI61_2:
	.quad	.LBB61_136
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_125
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_117
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_114
	.quad	.LBB61_114
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_114
	.quad	.LBB61_110
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_103
	.quad	.LBB61_101
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_95
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_91
	.quad	.LBB61_91
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_43
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_43
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_85
	.quad	.LBB61_85
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_38
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_82
	.quad	.LBB61_43
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_141
	.quad	.LBB61_142
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_38
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_38
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_38
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_38
	.quad	.LBB61_142
.LJTI61_3:
	.quad	.LBB61_137
	.quad	.LBB61_142
	.quad	.LBB61_141
	.quad	.LBB61_137
	.quad	.LBB61_142

	.text
	.align	16, 0x90
	.type	pent_np_unit_conflict_cost,@function
pent_np_unit_conflict_cost:             # @pent_np_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp560:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp561:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp562:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp563:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp564:
	.cfi_def_cfa_offset 48
.Ltmp565:
	.cfi_offset %rbx, -48
.Ltmp566:
	.cfi_offset %r12, -40
.Ltmp567:
	.cfi_offset %r13, -32
.Ltmp568:
	.cfi_offset %r14, -24
.Ltmp569:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	movq	%rsi, %r14
	testq	%rax, %rax
	jns	.LBB62_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB62_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	andq	%r12, %rax
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB62_366
# BB#3:                                 # %cond.end
	movq	$11, %r15
	jmpq	*.LJTI62_0(,%rax,8)
.LBB62_272:                             # %sw.bb953
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_274
# BB#273:                               # %land.lhs.true956
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_274:                             # %if.else960
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_277
# BB#275:                               # %land.lhs.true963
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#276:                               # %lor.lhs.false966
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_277:                             # %if.else970
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#278:                               # %if.else974
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
# BB#279:                               # %if.else978
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_24
# BB#280:                               # %lor.lhs.false981
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_281
# BB#282:                               # %lor.lhs.false981
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_33:                              # %sw.bb63
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_35
# BB#34:                                # %lor.lhs.false66
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_36
.LBB62_35:                              # %land.lhs.true69
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_36:                              # %if.else73
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_38
# BB#37:                                # %lor.lhs.false76
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_40
.LBB62_38:                              # %land.lhs.true79
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#39:                                # %lor.lhs.false82
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_40:                              # %if.else86
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#41:                                # %lor.lhs.false89
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_366
# BB#42:                                # %if.else93
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
# BB#43:                                # %if.else97
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_24
# BB#44:                                # %lor.lhs.false100
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_45
# BB#46:                                # %lor.lhs.false100
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_386:                             # %sw.bb1308
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_6
# BB#387:
	movabsq	$0, %rax
	jmp	.LBB62_7
.LBB62_375:                             # %sw.bb1285
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_394
# BB#376:                               # %if.else1289
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_377
# BB#378:                               # %if.else1289
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_140:                             # %sw.bb433
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_141
# BB#142:                               # %sw.bb433
	movabsq	$1, %rax
	leaq	6(%rax,%rax), %rax
	jmp	.LBB62_9
.LBB62_303:                             # %sw.bb1046
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
.LBB62_293:                             # %if.else1014
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_366
	jmp	.LBB62_294
.LBB62_125:                             # %sw.bb371
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB62_127
# BB#126:                               # %lor.lhs.false374
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$11, %rax
	jne	.LBB62_129
.LBB62_127:                             # %land.lhs.true377
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_129
# BB#128:                               # %land.lhs.true380
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_129:                             # %if.else384
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB62_131
# BB#130:                               # %lor.lhs.false387
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$11, %rax
	jne	.LBB62_134
.LBB62_131:                             # %land.lhs.true390
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_134
# BB#132:                               # %land.lhs.true393
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#133:                               # %lor.lhs.false396
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_134:                             # %if.else400
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_366
# BB#135:                               # %if.else404
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB62_137
# BB#136:                               # %lor.lhs.false407
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$11, %rax
	jne	.LBB62_138
.LBB62_137:                             # %land.lhs.true410
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_138:                             # %if.else414
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB62_22
# BB#139:                               # %lor.lhs.false417
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$11, %rax
	je	.LBB62_22
	jmp	.LBB62_721
.LBB62_383:                             # %sw.bb1302
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_384
# BB#385:                               # %sw.bb1302
	movabsq	$1, %rax
	jmp	.LBB62_8
.LBB62_141:
	movabsq	$0, %rax
	leaq	6(%rax,%rax), %rax
	jmp	.LBB62_9
.LBB62_290:                             # %sw.bb1005
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_366
# BB#291:                               # %land.lhs.true1007
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_314
# BB#292:                               # %lor.lhs.false1010
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_314
	jmp	.LBB62_293
.LBB62_284:                             # %sw.bb991
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
# BB#285:                               # %if.else995
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_24
# BB#286:                               # %lor.lhs.false998
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_287
# BB#288:                               # %lor.lhs.false998
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_239:                             # %sw.bb802
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_242
# BB#240:                               # %land.lhs.true805
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_242
# BB#241:                               # %land.lhs.true808
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_242:                             # %if.else812
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_246
# BB#243:                               # %land.lhs.true815
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_246
# BB#244:                               # %land.lhs.true818
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#245:                               # %lor.lhs.false821
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_246:                             # %if.else825
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#247:                               # %if.else829
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_249
# BB#248:                               # %land.lhs.true832
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_249:                             # %if.else836
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB62_211
.LBB62_213:                             # %sw.bb694
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_216
# BB#214:                               # %land.lhs.true697
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_216
# BB#215:                               # %land.lhs.true700
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_216:                             # %if.else704
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_220
# BB#217:                               # %land.lhs.true707
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_220
# BB#218:                               # %land.lhs.true710
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#219:                               # %lor.lhs.false713
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_220:                             # %if.else717
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#221:                               # %if.else721
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_223
# BB#222:                               # %land.lhs.true724
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_223:                             # %if.else728
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	jmp	.LBB62_211
.LBB62_184:                             # %sw.bb586
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_187
# BB#185:                               # %land.lhs.true589
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_187
# BB#186:                               # %land.lhs.true592
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_187:                             # %if.else596
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_191
# BB#188:                               # %land.lhs.true599
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_191
# BB#189:                               # %land.lhs.true602
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#190:                               # %lor.lhs.false605
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_191:                             # %if.else609
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#192:                               # %if.else613
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_194
# BB#193:                               # %land.lhs.true616
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_194:                             # %if.else620
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	jmp	.LBB62_211
.LBB62_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	je	.LBB62_6
# BB#5:
	movabsq	$0, %rax
	jmp	.LBB62_7
.LBB62_297:                             # %sw.bb1026
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r12, %rax
	jne	.LBB62_296
# BB#298:                               # %lor.lhs.false1029
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_300
# BB#299:
	movabsq	$0, %rax
	jmp	.LBB62_301
.LBB62_28:                              # %sw.bb51
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	je	.LBB62_6
# BB#29:
	movabsq	$0, %rax
	jmp	.LBB62_7
.LBB62_380:                             # %sw.bb1296
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_381
# BB#382:                               # %sw.bb1296
	movabsq	$1, %rax
	jmp	.LBB62_8
.LBB62_369:                             # %sw.bb1270
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#370:                               # %lor.lhs.false1273
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB62_371
# BB#372:                               # %lor.lhs.false1273
	movabsq	$1, %rax
	jmp	.LBB62_8
.LBB62_328:                             # %sw.bb1131
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB62_366
# BB#329:                               # %land.lhs.true1137
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_314
# BB#330:                               # %lor.lhs.false1140
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_314
	jmp	.LBB62_331
.LBB62_304:                             # %sw.bb1057
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB62_307
# BB#305:                               # %land.lhs.true1059
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_314
# BB#306:                               # %lor.lhs.false1062
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_314
.LBB62_307:                             # %if.else1066
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r12, %rax
	jne	.LBB62_296
# BB#308:                               # %lor.lhs.false1069
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB62_309
.LBB62_300:                             # %lor.lhs.false1029
	movabsq	$1, %rax
	jmp	.LBB62_301
.LBB62_250:                             # %sw.bb852
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_253
# BB#251:                               # %land.lhs.true855
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_253
# BB#252:                               # %land.lhs.true858
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_253:                             # %if.else862
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_257
# BB#254:                               # %land.lhs.true865
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_257
# BB#255:                               # %land.lhs.true868
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#256:                               # %lor.lhs.false871
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_257:                             # %if.else875
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#258:                               # %if.else879
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_260
# BB#259:                               # %land.lhs.true882
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_260:                             # %if.else886
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB62_211:                             # %land.lhs.true678
	callq	incdec_operand
.LBB62_212:                             # %land.lhs.true678
	testq	%r12, %rax
	jne	.LBB62_721
	jmp	.LBB62_22
.LBB62_384:
	movabsq	$0, %rax
	jmp	.LBB62_8
.LBB62_377:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_261:                             # %sw.bb902
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	jne	.LBB62_264
# BB#262:                               # %land.lhs.true905
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_264
# BB#263:                               # %land.lhs.true908
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_264:                             # %if.else912
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	jne	.LBB62_268
# BB#265:                               # %land.lhs.true915
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_268
# BB#266:                               # %land.lhs.true918
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#267:                               # %lor.lhs.false921
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_268:                             # %if.else925
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_366
# BB#269:                               # %if.else929
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	jne	.LBB62_271
# BB#270:                               # %land.lhs.true932
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_271:                             # %if.else936
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB62_22
	jmp	.LBB62_721
.LBB62_48:                              # %sw.bb110
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB62_57
# BB#49:                                # %land.lhs.true112
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_51
# BB#50:                                # %lor.lhs.false115
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_52
.LBB62_51:                              # %land.lhs.true118
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_52:                              # %if.else122
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB62_57
# BB#53:                                # %land.lhs.true124
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_55
# BB#54:                                # %lor.lhs.false127
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_57
.LBB62_55:                              # %land.lhs.true130
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#56:                                # %lor.lhs.false133
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_57:                              # %if.else137
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#58:                                # %if.else137
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_366
# BB#59:                                # %lor.lhs.false142
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_366
# BB#60:                                # %if.else146
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
# BB#61:                                # %if.else150
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_24
# BB#62:                                # %lor.lhs.false153
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_63
# BB#64:                                # %lor.lhs.false153
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_373:                             # %sw.bb1279
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_6
# BB#374:
	movabsq	$0, %rax
	jmp	.LBB62_7
.LBB62_348:                             # %sw.bb1205
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB62_366
# BB#349:                               # %lor.lhs.false1207
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_350
# BB#351:                               # %lor.lhs.false1207
	movabsq	$1, %rax
	jmp	.LBB62_8
.LBB62_332:                             # %sw.bb1160
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
.LBB62_331:                             # %if.else1144
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB62_294
	jmp	.LBB62_366
.LBB62_320:                             # %sw.bb1111
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB62_366
# BB#321:                               # %sw.bb1111
	cmpq	$1, %rax
	jne	.LBB62_323
# BB#322:                               # %land.lhs.true1116
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_323:                             # %if.else1120
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_24
# BB#324:                               # %lor.lhs.false1123
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_325
# BB#326:                               # %lor.lhs.false1123
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_180:                             # %sw.bb572
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$8, %rax
	je	.LBB62_9
# BB#181:                               # %select.mid
	movq	$11, %rax
	jmp	.LBB62_9
.LBB62_144:                             # %sw.bb439
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB62_154
# BB#145:                               # %land.lhs.true443
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_147
# BB#146:                               # %land.lhs.true443
	movl	which_alternative(%rip), %eax
	movq	%rax, %rcx
	andq	%r12, %rcx
	cmpq	$2, %rcx
	jb	.LBB62_149
.LBB62_147:                             # %land.lhs.true450
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
# BB#148:                               # %if.else454thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB62_149:                             # %if.else454
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_154
# BB#150:                               # %land.lhs.true458
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_152
# BB#151:                               # %land.lhs.true458
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	jb	.LBB62_154
.LBB62_152:                             # %land.lhs.true465
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#153:                               # %lor.lhs.false468
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_154:                             # %if.else472
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#155:                               # %if.else472
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_366
# BB#156:                               # %if.else480
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
# BB#157:                               # %if.else484
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_24
# BB#158:                               # %lor.lhs.false487
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_159
# BB#160:                               # %lor.lhs.false487
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_119:                             # %sw.bb357
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
# BB#120:                               # %if.else361
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#121:                               # %lor.lhs.false364
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB62_122
# BB#123:                               # %lor.lhs.false364
	movabsq	$1, %rax
	jmp	.LBB62_124
.LBB62_11:                              # %sw.bb5
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_18
# BB#12:                                # %land.lhs.true
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_14
# BB#13:                                # %land.lhs.true9
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_14:                              # %if.else13
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_18
# BB#15:                                # %land.lhs.true15
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_18
# BB#16:                                # %land.lhs.true18
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#17:                                # %lor.lhs.false
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_18:                              # %if.else24
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#19:                                # %if.else28
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_721
# BB#20:                                # %land.lhs.true30
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
# BB#21:                                # %if.else34
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_721
	jmp	.LBB62_22
.LBB62_381:
	movabsq	$0, %rax
	jmp	.LBB62_8
.LBB62_281:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_388:                             # %sw.bb1314
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB62_366
# BB#389:                               # %land.lhs.true1318
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB62_366
# BB#390:                               # %if.then1324
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_conflict_cost, %rcx
	movq	$38030, %rdx            # imm = 0x948E
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB62_361:                             # %sw.bb1234
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#362:                               # %lor.lhs.false1237
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_366
# BB#363:                               # %lor.lhs.false1237
	cmpq	$3, %rax
	jne	.LBB62_367
# BB#364:                               # %lor.lhs.false1239
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_721
# BB#365:                               # %land.lhs.true1243
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_366
	jmp	.LBB62_721
.LBB62_356:                             # %sw.bb1221
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#357:                               # %lor.lhs.false1224
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_366
# BB#358:                               # %lor.lhs.false1227
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r12, %rdx
	jne	.LBB62_359
# BB#360:                               # %lor.lhs.false1227
	movabsq	$1, %rax
	jmp	.LBB62_8
.LBB62_352:                             # %sw.bb1213
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_366
# BB#353:                               # %lor.lhs.false1215
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_354
# BB#355:                               # %lor.lhs.false1215
	movabsq	$1, %rax
	jmp	.LBB62_8
.LBB62_333:                             # %sw.bb1175
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB62_336
# BB#334:                               # %land.lhs.true1181
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r12, %rax
	jne	.LBB62_296
# BB#335:                               # %lor.lhs.false1184
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_296
.LBB62_336:                             # %if.else1188
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB62_338
# BB#337:                               # %if.else1188
	movq	%rcx, %rdx
.LBB62_338:                             # %if.else1188
	movl	which_alternative(%rip), %esi
	testq	%rsi, %rsi
	movq	%rax, %rdi
	jne	.LBB62_340
# BB#339:                               # %if.else1188
	movq	%rcx, %rdi
.LBB62_340:                             # %if.else1188
	orq	%rdi, %rdx
	cmpq	$1, %rsi
	movq	%rax, %rdi
	jne	.LBB62_342
# BB#341:                               # %if.else1188
	movq	%rcx, %rdi
.LBB62_342:                             # %if.else1188
	orq	%rdi, %rdx
	cmpq	$2, %rsi
	movq	%rax, %rdi
	jne	.LBB62_344
# BB#343:                               # %if.else1188
	movq	%rcx, %rdi
.LBB62_344:                             # %if.else1188
	orq	%rdi, %rdx
	addq	$-3, %rsi
	andq	%r12, %rsi
	cmpq	$1, %rsi
	movq	%rax, %rsi
	jbe	.LBB62_346
# BB#345:                               # %if.else1188
	movq	%rcx, %rsi
.LBB62_346:                             # %if.else1188
	orq	%rsi, %rdx
	jne	.LBB62_8
# BB#347:                               # %if.else1188
	movq	%rcx, %rax
	jmp	.LBB62_8
.LBB62_317:                             # %sw.bb1103
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB62_366
# BB#318:                               # %lor.lhs.false1105
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_6
# BB#319:
	movabsq	$0, %rax
	jmp	.LBB62_7
.LBB62_310:                             # %sw.bb1076
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB62_366
# BB#311:                               # %land.lhs.true1080
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_312
# BB#315:                               # %land.lhs.true1086
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	je	.LBB62_314
	jmp	.LBB62_316
.LBB62_302:                             # %sw.bb1035
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB62_294
	jmp	.LBB62_366
.LBB62_224:                             # %sw.bb744
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB62_233
# BB#225:                               # %land.lhs.true746
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_228
# BB#226:                               # %land.lhs.true749
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_228
# BB#227:                               # %land.lhs.true752
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_228:                             # %if.else756
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB62_233
# BB#229:                               # %land.lhs.true758
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_233
# BB#230:                               # %land.lhs.true761
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_233
# BB#231:                               # %land.lhs.true764
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#232:                               # %lor.lhs.false767
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_233:                             # %if.else771
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_366
# BB#234:                               # %if.else775
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB62_721
# BB#235:                               # %land.lhs.true777
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_237
# BB#236:                               # %land.lhs.true780
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_237:                             # %if.else784
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB62_721
# BB#238:                               # %land.lhs.true786
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	jmp	.LBB62_210
.LBB62_195:                             # %sw.bb636
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB62_204
# BB#196:                               # %land.lhs.true638
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_199
# BB#197:                               # %land.lhs.true641
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_199
# BB#198:                               # %land.lhs.true644
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_199:                             # %if.else648
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB62_204
# BB#200:                               # %land.lhs.true650
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_204
# BB#201:                               # %land.lhs.true653
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_204
# BB#202:                               # %land.lhs.true656
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#203:                               # %lor.lhs.false659
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_204:                             # %if.else663
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_366
# BB#205:                               # %if.else667
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB62_721
# BB#206:                               # %land.lhs.true669
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB62_208
# BB#207:                               # %land.lhs.true672
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_208:                             # %if.else676
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB62_721
# BB#209:                               # %land.lhs.true678
	movq	recog_data+16(%rip), %rax
	movq	$2, %rsi
.LBB62_210:                             # %land.lhs.true678
	movq	%rax, %rdi
	jmp	.LBB62_211
.LBB62_182:                             # %sw.bb577
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB62_183
.LBB62_6:                               # %sw.bb
	movabsq	$1, %rax
.LBB62_7:                               # %sw.bb
	xorq	$1, %rax
.LBB62_8:                               # %sw.epilog
	leaq	8(%rax,%rax,2), %rax
.LBB62_9:                               # %sw.epilog
	andq	%r12, %rax
	cmpq	$12, %rax
	ja	.LBB62_949
# BB#10:                                # %sw.epilog
	jmpq	*.LJTI62_1(,%rax,8)
.LBB62_950:                             # %sw.bb1327
	movq	$12, %r15
.LBB62_951:                             # %return
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_391:                             # %sw.bb1328
	movq	$46, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_886:                             # %sw.bb2706
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB62_888
# BB#887:                               # %cond.false2715
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB62_888:                             # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB62_909
# BB#889:                               # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB62_907
# BB#890:                               # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$364, %rdx              # imm = 0x16C
	jg	.LBB62_904
# BB#891:                               # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB62_896
# BB#892:                               # %cond.end2717
	andq	%r12, %rax
	cmpq	%r12, %rax
	jne	.LBB62_906
# BB#893:                               # %sw.bb2829
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB62_906
# BB#894:                               # %land.lhs.true2836
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB62_906
# BB#895:                               # %if.then2842
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_conflict_cost, %rcx
	movq	$40171, %rdx            # imm = 0x9CEB
	jmp	.LBB62_557
.LBB62_949:                             # %sw.default2845
	movabsq	$.L.str, %rdi
	movabsq	$.L__FUNCTION__.pent_np_unit_conflict_cost, %rdx
	movq	$40178, %rsi            # imm = 0x9CF2
	callq	fancy_abort
.LBB62_909:                             # %cond.end2717
	leaq	-618(%rax), %rcx
	andq	%r12, %rcx
	cmpq	$3, %rcx
	jb	.LBB62_933
# BB#910:                               # %cond.end2717
	addq	$-621, %rax             # imm = 0xFFFFFFFFFFFFFD93
	andq	%r12, %rax
	cmpq	$2, %rax
	movabsq	$0, %r15
	jb	.LBB62_951
	jmp	.LBB62_906
.LBB62_907:                             # %cond.end2717
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	andq	%r12, %rax
	cmpq	$56, %rax
	ja	.LBB62_906
# BB#908:                               # %cond.end2717
	xorq	%r15, %r15
	jmpq	*.LJTI62_2(,%rax,8)
.LBB62_914:                             # %sw.bb2727
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB62_916
# BB#915:                               # %land.lhs.true2730
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r12, %rax
	movq	$2, %r15
	je	.LBB62_951
.LBB62_916:                             # %if.else2734
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_720:                             # %sw.bb565
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	orq	$2, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_721
	jmp	.LBB62_366
.LBB62_162:                             # %sw.bb497
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB62_172
# BB#163:                               # %land.lhs.true503
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_165
# BB#164:                               # %land.lhs.true503
	movl	which_alternative(%rip), %eax
	movq	%rax, %rcx
	andq	%r12, %rcx
	cmpq	$3, %rcx
	jb	.LBB62_167
.LBB62_165:                             # %land.lhs.true512
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
# BB#166:                               # %if.else516thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB62_167:                             # %if.else516
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB62_172
# BB#168:                               # %land.lhs.true522
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_170
# BB#169:                               # %land.lhs.true522
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$3, %rax
	jb	.LBB62_172
.LBB62_170:                             # %land.lhs.true531
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#171:                               # %lor.lhs.false534
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_172:                             # %if.else538
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_366
# BB#173:                               # %if.else538
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB62_366
# BB#174:                               # %if.else548
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
# BB#175:                               # %if.else552
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_24
# BB#176:                               # %lor.lhs.false555
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_177
# BB#178:                               # %lor.lhs.false555
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_93:                              # %sw.bb255
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_110
# BB#94:                                # %land.lhs.true257
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r15d
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB62_97
# BB#95:                                # %land.lhs.true261
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_99
# BB#96:                                # %land.lhs.true261.lor.lhs.false264_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB62_97:                              # %lor.lhs.false264
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB62_99
# BB#98:                                # %lor.lhs.false268
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_101
.LBB62_99:                              # %land.lhs.true271
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_101
# BB#100:                               # %land.lhs.true274
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_392
.LBB62_101:                             # %if.else278
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_110
# BB#102:                               # %land.lhs.true280
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r15, %rdx
	testq	%r12, %rdx
	je	.LBB62_105
# BB#103:                               # %land.lhs.true284
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_107
# BB#104:                               # %land.lhs.true284.lor.lhs.false287_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB62_105:                             # %lor.lhs.false287
	movq	%rax, %rcx
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB62_107
# BB#106:                               # %lor.lhs.false291
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_110
.LBB62_107:                             # %land.lhs.true294
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_110
# BB#108:                               # %land.lhs.true297
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#109:                               # %lor.lhs.false300
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB62_393
.LBB62_110:                             # %if.else304
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_366
# BB#111:                               # %if.else308
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_721
# BB#112:                               # %land.lhs.true310
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r15d
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB62_115
# BB#113:                               # %land.lhs.true314
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_117
# BB#114:                               # %land.lhs.true314.lor.lhs.false317_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB62_115:                             # %lor.lhs.false317
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB62_117
# BB#116:                               # %lor.lhs.false321
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_118
.LBB62_117:                             # %land.lhs.true324
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_394
.LBB62_118:                             # %if.else328
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_721
	jmp	.LBB62_88
.LBB62_66:                              # %sw.bb163
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r15d
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB62_69
# BB#67:                                # %land.lhs.true165
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_71
# BB#68:                                # %land.lhs.true165.lor.lhs.false168_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB62_69:                              # %lor.lhs.false168
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB62_71
# BB#70:                                # %lor.lhs.false172
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_73
.LBB62_71:                              # %land.lhs.true175
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_73
# BB#72:                                # %land.lhs.true178
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_73
.LBB62_392:                             # %sw.bb1332
	movq	$3, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_30:                              # %sw.bb57
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$14, %rax
	jne	.LBB62_31
# BB#32:                                # %sw.bb57
	movabsq	$1, %rax
	jmp	.LBB62_8
.LBB62_371:
	movabsq	$0, %rax
	jmp	.LBB62_8
.LBB62_904:                             # %cond.end2717
	addq	$-365, %rax             # imm = 0xFFFFFFFFFFFFFE93
	andq	%r12, %rax
	cmpq	$27, %rax
	ja	.LBB62_906
# BB#905:                               # %cond.end2717
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$267911679, %rdx        # imm = 0xFF801FF
	movabsq	$0, %r15
	jne	.LBB62_951
	jmp	.LBB62_906
.LBB62_287:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_45:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_73:                              # %if.else182
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB62_76
# BB#74:                                # %land.lhs.true186
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_78
# BB#75:                                # %land.lhs.true186.lor.lhs.false189_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB62_76:                              # %lor.lhs.false189
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB62_78
# BB#77:                                # %lor.lhs.false193
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_81
.LBB62_78:                              # %land.lhs.true196
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_81
# BB#79:                                # %land.lhs.true199
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_393
# BB#80:                                # %lor.lhs.false202
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB62_81
.LBB62_393:                             # %sw.bb1333
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_350:
	movabsq	$0, %rax
	jmp	.LBB62_8
.LBB62_183:
	movabsq	$0, %rax
	jmp	.LBB62_7
.LBB62_31:
	movabsq	$0, %rax
	jmp	.LBB62_8
.LBB62_309:
	movabsq	$0, %rax
.LBB62_301:                             # %lor.lhs.false1029
	xorq	$1, %rax
	leaq	4(,%rax,4), %rax
	jmp	.LBB62_9
.LBB62_896:                             # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB62_902
# BB#897:                               # %cond.end2717
	andq	%r12, %rax
	cmpq	$36, %rax
	ja	.LBB62_906
# BB#898:                               # %cond.end2717
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	movabsq	$0, %r15
	jne	.LBB62_951
# BB#899:                               # %cond.end2717
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	jne	.LBB62_900
	jmp	.LBB62_906
.LBB62_122:
	movabsq	$0, %rax
.LBB62_124:                             # %lor.lhs.false364
	xorq	$1, %rax
	addq	$7, %rax
	jmp	.LBB62_9
.LBB62_312:                             # %lor.lhs.false1083
	movq	%rbx, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB62_316
# BB#313:                               # %lor.lhs.false1083
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_316
.LBB62_314:                             # %sw.bb1329
	movq	$3, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_81:                              # %if.else206
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB62_366
# BB#82:                                # %if.else210
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB62_85
# BB#83:                                # %land.lhs.true214
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_87
# BB#84:                                # %land.lhs.true214.lor.lhs.false217_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB62_85:                              # %lor.lhs.false217
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB62_87
# BB#86:                                # %lor.lhs.false221
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_88
.LBB62_87:                              # %land.lhs.true224
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_88
.LBB62_394:                             # %sw.bb1335
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB62_396
# BB#395:                               # %cond.false1344
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB62_396:                             # %cond.end1346
	incq	%rax
	andq	%r12, %rax
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB62_558
# BB#397:                               # %cond.end1346
	xorq	%r15, %r15
	jmpq	*.LJTI62_6(,%rax,8)
.LBB62_550:                             # %sw.bb1771
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_551
# BB#552:                               # %sw.bb1771
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_551:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_410:                             # %sw.bb1363
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_414
# BB#411:                               # %lor.lhs.false1366
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_414
# BB#412:                               # %lor.lhs.false1369
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#413:                               # %land.lhs.true1372
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_951
.LBB62_414:                             # %if.then1375
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#415:                               # %lor.lhs.false1378
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_416
# BB#417:                               # %lor.lhs.false1378
	movabsq	$1, %rax
	jmp	.LBB62_418
.LBB62_542:                             # %sw.bb1755
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_543
# BB#544:                               # %sw.bb1755
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_416:
	movabsq	$0, %rax
.LBB62_418:                             # %lor.lhs.false1378
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB62_419
.LBB62_543:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_548:                             # %sw.bb1766
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB62_408
# BB#549:
	movabsq	$0, %rax
	jmp	.LBB62_409
.LBB62_398:                             # %sw.bb1348
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB62_399
# BB#400:                               # %sw.bb1348
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_402:                             # %sw.bb1353
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB62_403
# BB#404:                               # %sw.bb1353
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_902:                             # %cond.end2717
	addq	$-90, %rax
	andq	%r12, %rax
	cmpq	$94, %rax
	ja	.LBB62_906
# BB#903:                               # %cond.end2717
	xorq	%r15, %r15
	jmpq	*.LJTI62_3(,%rax,8)
.LBB62_900:                             # %sw.bb2824
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r15, %r15
	testq	%rax, %rax
	je	.LBB62_951
# BB#901:                               # %select.mid16
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_906:                             # %sw.default2844
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_933:                             # %sw.bb2775
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %r15
	ja	.LBB62_951
# BB#934:                               # %select.mid12
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_316:                             # %if.else1089
	andq	%r12, %rcx
	cmpq	$1, %rcx
	ja	.LBB62_366
.LBB62_294:                             # %land.lhs.true1016
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r12, %rax
	jne	.LBB62_296
# BB#295:                               # %lor.lhs.false1019
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB62_366
.LBB62_296:                             # %sw.bb1331
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_546:                             # %sw.bb1761
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB62_408
# BB#547:
	movabsq	$0, %rax
	jmp	.LBB62_409
.LBB62_535:                             # %sw.bb1734
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_539
# BB#536:                               # %lor.lhs.false1737
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB62_539
# BB#537:                               # %lor.lhs.false1740
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#538:                               # %land.lhs.true1743
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB62_951
.LBB62_539:                             # %if.then1746
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#540:                               # %lor.lhs.false1749
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	je	.LBB62_408
# BB#541:
	movabsq	$0, %rax
	jmp	.LBB62_409
.LBB62_325:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_359:
	movabsq	$0, %rax
	jmp	.LBB62_8
.LBB62_354:
	movabsq	$0, %rax
	jmp	.LBB62_8
.LBB62_420:                             # %sw.bb1384
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_426
# BB#421:                               # %sw.bb1384
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_426
# BB#422:                               # %lor.lhs.false1389
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_426
# BB#423:                               # %lor.lhs.false1392
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#424:                               # %lor.lhs.false1392
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
# BB#425:                               # %land.lhs.true1397
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_951
.LBB62_426:                             # %if.then1400
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#427:                               # %if.then1400
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
# BB#428:                               # %lor.lhs.false1405
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_429
# BB#430:                               # %lor.lhs.false1405
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_399:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_403:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_367:                             # %lor.lhs.false1261
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_721
# BB#368:                               # %lor.lhs.false1261
	cmpq	$2, %rax
	jne	.LBB62_721
.LBB62_366:                             # %sw.bb1334
	movq	$1, %r15
	movq	%r15, %rax
.LBB62_419:                             # %lor.lhs.false1378
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB62_911:                             # %sw.bb2719
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB62_913
# BB#912:                               # %land.lhs.true2722
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r12, %rax
	movq	$2, %r15
	je	.LBB62_951
.LBB62_913:                             # %if.else2726
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_488:                             # %sw.bb1563
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$3, %r15
	jne	.LBB62_951
# BB#489:                               # %lor.lhs.false1565
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rcx
	testq	%r12, %rax
	je	.LBB62_490
# BB#493:                               # %if.then1573
	cmpq	$1, %rcx
	jne	.LBB62_951
	jmp	.LBB62_494
.LBB62_469:                             # %sw.bb1517
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#470:                               # %select.mid4
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_451:                             # %sw.bb1480
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#452:                               # %select.mid2
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_432:                             # %sw.bb1411
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_436
# BB#433:                               # %sw.bb1411
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_436
# BB#434:                               # %lor.lhs.false1418
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#435:                               # %lor.lhs.false1418
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_951
.LBB62_436:                             # %if.then1425
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB62_438
# BB#437:                               # %if.then1425
	movq	%rdx, %rcx
.LBB62_438:                             # %if.then1425
	movl	which_alternative(%rip), %esi
	jmp	.LBB62_439
.LBB62_63:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_159:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_928:                             # %sw.bb2763
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB62_930
# BB#929:                               # %land.lhs.true2766
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r12, %rax
	movq	$2, %r15
	je	.LBB62_951
.LBB62_930:                             # %if.else2770
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_921:                             # %sw.bb2745
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB62_923
# BB#922:                               # %land.lhs.true2748
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r12, %rax
	movq	$2, %r15
	je	.LBB62_951
.LBB62_923:                             # %if.else2752
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_554:                             # %sw.bb1776
	movq	32(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB62_558
# BB#555:                               # %land.lhs.true1783
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB62_556
.LBB62_558:                             # %sw.default1791
	movq	$3, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_513:                             # %sw.bb1632
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_527
# BB#514:                               # %lor.lhs.false1635
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_527
# BB#515:                               # %lor.lhs.false1635
	cmpq	$3, %rax
	jne	.LBB62_518
# BB#516:                               # %lor.lhs.false1637
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_520
# BB#517:                               # %land.lhs.true1641
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_527
	jmp	.LBB62_520
.LBB62_503:                             # %sw.bb1599
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_509
# BB#504:                               # %lor.lhs.false1602
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_509
# BB#505:                               # %lor.lhs.false1605
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %ebx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB62_509
# BB#506:                               # %lor.lhs.false1609
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#507:                               # %land.lhs.true1612
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_951
# BB#508:                               # %land.lhs.true1615
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB62_951
.LBB62_509:                             # %if.then1619
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#510:                               # %lor.lhs.false1622
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_951
# BB#511:                               # %lor.lhs.false1625
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_408
# BB#512:
	movabsq	$0, %rax
	jmp	.LBB62_409
.LBB62_496:                             # %sw.bb1581
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$3, %r15
	jne	.LBB62_951
# BB#497:                               # %lor.lhs.false1583
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	testq	%r12, %rax
	jne	.LBB62_500
# BB#498:                               # %lor.lhs.false1586
	testq	%r12, %rcx
	jne	.LBB62_951
# BB#499:                               # %land.lhs.true1588
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	orq	%rax, %rcx
.LBB62_500:                             # %if.then1591
	testq	%r12, %rcx
	jne	.LBB62_951
# BB#501:                               # %lor.lhs.false1593
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB62_408
# BB#502:
	movabsq	$0, %rax
	jmp	.LBB62_409
.LBB62_471:                             # %sw.bb1521
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_479
# BB#472:                               # %lor.lhs.false1524
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_479
# BB#473:                               # %lor.lhs.false1528
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_478
# BB#474:                               # %lor.lhs.false1528
	testq	%r12, %rcx
	je	.LBB62_478
# BB#475:                               # %lor.lhs.false1528
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_478
# BB#476:                               # %lor.lhs.false1528
	cmpq	$2, %rax
	je	.LBB62_478
# BB#477:                               # %land.lhs.true1537
	movq	$3, %r15
	cmpq	$5, %rax
	jb	.LBB62_479
	jmp	.LBB62_951
.LBB62_459:                             # %sw.bb1499
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$3, %r15
	jne	.LBB62_951
# BB#460:                               # %lor.lhs.false1501
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	andq	%r12, %rcx
	cmpq	$1, %rax
	jne	.LBB62_461
# BB#464:                               # %if.then1509
	cmpq	$1, %rcx
	jne	.LBB62_951
	jmp	.LBB62_465
.LBB62_453:                             # %sw.bb1484
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rcx, %rax
	cmpq	$1, %rax
	je	.LBB62_455
# BB#454:                               # %lor.lhs.false1488
	movq	$3, %r15
	orq	$2, %rcx
	cmpq	$3, %rcx
	je	.LBB62_951
.LBB62_455:                             # %if.then1492
	cmpq	$1, %rax
	jne	.LBB62_456
# BB#457:                               # %if.then1492
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_449:                             # %sw.bb1465
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movq	$3, %r15
	orq	$2, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB62_951
# BB#450:                               # %if.else1478
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_442:                             # %sw.bb1435
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_446
# BB#443:                               # %sw.bb1435
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB62_446
# BB#444:                               # %lor.lhs.false1444
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#445:                               # %lor.lhs.false1444
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB62_951
.LBB62_446:                             # %if.then1453
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB62_448
# BB#447:                               # %if.then1453
	movq	%rdx, %rcx
.LBB62_448:                             # %if.then1453
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	ja	.LBB62_440
	jmp	.LBB62_441
.LBB62_406:                             # %sw.bb1358
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$14, %rax
	je	.LBB62_408
# BB#407:
	movabsq	$0, %rax
	jmp	.LBB62_409
.LBB62_924:                             # %sw.bb2753
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB62_927
# BB#925:                               # %land.lhs.true2756
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#926:                               # %lor.lhs.false2758
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r12, %rax
	je	.LBB62_951
.LBB62_927:                             # %if.else2762
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_917:                             # %sw.bb2735
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB62_920
# BB#918:                               # %land.lhs.true2738
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#919:                               # %lor.lhs.false2740
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r12, %rax
	je	.LBB62_951
.LBB62_920:                             # %if.else2744
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_177:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB62_9
.LBB62_88:                              # %if.else228
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r15, %rdx
	testq	%r12, %rdx
	je	.LBB62_91
# BB#89:                                # %land.lhs.true232
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB62_22
# BB#90:                                # %land.lhs.true232.lor.lhs.false235_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB62_91:                              # %lor.lhs.false235
	movq	%rax, %rcx
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB62_22
# BB#92:                                # %lor.lhs.false239
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	jmp	.LBB62_212
.LBB62_22:                              # %land.lhs.true36
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_24
# BB#23:                                # %lor.lhs.false39
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB62_721
.LBB62_24:                              # %sw.bb1792
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB62_26
# BB#25:                                # %cond.false1801
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB62_26:                              # %cond.end1803
	incq	%rax
	andq	%r12, %rax
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB62_719
# BB#27:                                # %cond.end1803
	xorq	%r15, %r15
	jmpq	*.LJTI62_5(,%rax,8)
.LBB62_712:                             # %sw.bb2228
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_713
# BB#714:                               # %sw.bb2228
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_721:                             # %sw.bb2249
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB62_723
# BB#722:                               # %cond.false2258
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB62_723:                             # %cond.end2260
	incq	%rax
	andq	%r12, %rax
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB62_885
# BB#724:                               # %cond.end2260
	xorq	%r15, %r15
	jmpq	*.LJTI62_4(,%rax,8)
.LBB62_879:                             # %sw.bb2685
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_880
# BB#881:                               # %sw.bb2685
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_880:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_734:                             # %sw.bb2277
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_738
# BB#735:                               # %lor.lhs.false2280
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_738
# BB#736:                               # %lor.lhs.false2283
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#737:                               # %land.lhs.true2286
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_951
.LBB62_738:                             # %if.then2289
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#739:                               # %lor.lhs.false2292
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_740
# BB#741:                               # %lor.lhs.false2292
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_713:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_571:                             # %sw.bb1820
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_575
# BB#572:                               # %lor.lhs.false1823
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_575
# BB#573:                               # %lor.lhs.false1826
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#574:                               # %land.lhs.true1829
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_951
.LBB62_575:                             # %if.then1832
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#576:                               # %lor.lhs.false1835
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_577
# BB#578:                               # %lor.lhs.false1835
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_870:                             # %sw.bb2669
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_871
# BB#872:                               # %sw.bb2669
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_740:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_702:                             # %sw.bb2212
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB62_703
# BB#704:                               # %sw.bb2212
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_871:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_876:                             # %sw.bb2680
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB62_877
# BB#878:                               # %sw.bb2680
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_725:                             # %sw.bb2262
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB62_726
# BB#727:                               # %sw.bb2262
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_577:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_728:                             # %sw.bb2267
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB62_729
# BB#730:                               # %sw.bb2267
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_703:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_708:                             # %sw.bb2223
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_709
# BB#710:                               # %sw.bb2223
	movabsq	$1, %r15
	jmp	.LBB62_711
.LBB62_873:                             # %sw.bb2675
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB62_874
# BB#875:                               # %sw.bb2675
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_862:                             # %sw.bb2648
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_866
# BB#863:                               # %lor.lhs.false2651
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB62_866
# BB#864:                               # %lor.lhs.false2654
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#865:                               # %land.lhs.true2657
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB62_951
.LBB62_866:                             # %if.then2660
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#867:                               # %lor.lhs.false2663
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	je	.LBB62_868
# BB#869:                               # %lor.lhs.false2663
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_877:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_559:                             # %sw.bb1805
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB62_560
# BB#561:                               # %sw.bb1805
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_742:                             # %sw.bb2298
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_748
# BB#743:                               # %sw.bb2298
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_748
# BB#744:                               # %lor.lhs.false2303
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_748
# BB#745:                               # %lor.lhs.false2306
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#746:                               # %lor.lhs.false2306
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
# BB#747:                               # %land.lhs.true2311
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_951
.LBB62_748:                             # %if.then2314
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#749:                               # %if.then2314
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
# BB#750:                               # %lor.lhs.false2319
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_751
# BB#752:                               # %lor.lhs.false2319
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_726:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_706:                             # %sw.bb2218
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB62_569
# BB#707:
	movabsq	$0, %r15
	jmp	.LBB62_570
.LBB62_695:                             # %sw.bb2191
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_699
# BB#696:                               # %lor.lhs.false2194
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB62_699
# BB#697:                               # %lor.lhs.false2197
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#698:                               # %land.lhs.true2200
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB62_951
.LBB62_699:                             # %if.then2203
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#700:                               # %lor.lhs.false2206
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	je	.LBB62_569
# BB#701:
	movabsq	$0, %r15
	jmp	.LBB62_570
.LBB62_563:                             # %sw.bb1810
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB62_564
# BB#565:                               # %sw.bb1810
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_812:                             # %sw.bb2477
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$1, %r15
	jne	.LBB62_951
# BB#813:                               # %lor.lhs.false2479
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rcx
	testq	%r12, %rax
	je	.LBB62_814
# BB#817:                               # %if.then2487
	cmpq	$1, %rcx
	jne	.LBB62_951
	jmp	.LBB62_818
.LBB62_790:                             # %sw.bb2431
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB62_791
# BB#792:                               # %sw.bb2431
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_773:                             # %sw.bb2394
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB62_774
# BB#775:                               # %sw.bb2394
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_753:                             # %sw.bb2325
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_757
# BB#754:                               # %sw.bb2325
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_757
# BB#755:                               # %lor.lhs.false2332
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#756:                               # %lor.lhs.false2332
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_951
.LBB62_757:                             # %if.then2339
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB62_759
# BB#758:                               # %if.then2339
	movq	%rcx, %r15
.LBB62_759:                             # %if.then2339
	movl	which_alternative(%rip), %edx
	cmpq	$1, %rdx
	jbe	.LBB62_761
# BB#760:                               # %if.then2339
	movq	%rcx, %rax
.LBB62_761:                             # %if.then2339
	orq	%rax, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_729:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_709:
	movabsq	$0, %r15
.LBB62_711:                             # %sw.bb2223
	xorq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_874:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_648:                             # %sw.bb2020
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %r15
	jne	.LBB62_951
# BB#649:                               # %lor.lhs.false2022
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rcx
	testq	%r12, %rax
	je	.LBB62_650
# BB#653:                               # %if.then2030
	cmpq	$1, %rcx
	jne	.LBB62_951
	jmp	.LBB62_654
.LBB62_629:                             # %sw.bb1974
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#630:                               # %select.mid8
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_611:                             # %sw.bb1937
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#612:                               # %select.mid6
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_592:                             # %sw.bb1868
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_596
# BB#593:                               # %sw.bb1868
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_596
# BB#594:                               # %lor.lhs.false1875
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#595:                               # %lor.lhs.false1875
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_951
.LBB62_596:                             # %if.then1882
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB62_598
# BB#597:                               # %if.then1882
	movq	%rcx, %r15
.LBB62_598:                             # %if.then1882
	movl	which_alternative(%rip), %edx
	jmp	.LBB62_599
.LBB62_580:                             # %sw.bb1841
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_586
# BB#581:                               # %sw.bb1841
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_586
# BB#582:                               # %lor.lhs.false1846
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_586
# BB#583:                               # %lor.lhs.false1849
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#584:                               # %lor.lhs.false1849
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
# BB#585:                               # %land.lhs.true1854
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB62_951
.LBB62_586:                             # %if.then1857
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#587:                               # %if.then1857
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
# BB#588:                               # %lor.lhs.false1862
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB62_589
# BB#590:                               # %lor.lhs.false1862
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_882:                             # %sw.bb2690
	movq	32(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB62_885
# BB#883:                               # %land.lhs.true2697
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB62_884
.LBB62_885:                             # %sw.default2705
	movq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_840:                             # %sw.bb2546
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_854
# BB#841:                               # %lor.lhs.false2549
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_854
# BB#842:                               # %lor.lhs.false2549
	cmpq	$3, %rax
	jne	.LBB62_845
# BB#843:                               # %lor.lhs.false2551
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_847
# BB#844:                               # %land.lhs.true2555
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_854
	jmp	.LBB62_847
.LBB62_829:                             # %sw.bb2513
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_835
# BB#830:                               # %lor.lhs.false2516
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_835
# BB#831:                               # %lor.lhs.false2519
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %ebx
	movq	$1, %r15
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB62_835
# BB#832:                               # %lor.lhs.false2523
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_951
# BB#833:                               # %land.lhs.true2526
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_951
# BB#834:                               # %land.lhs.true2529
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r15
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB62_951
.LBB62_835:                             # %if.then2533
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#836:                               # %lor.lhs.false2536
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_951
# BB#837:                               # %lor.lhs.false2539
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_838
# BB#839:                               # %lor.lhs.false2539
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_821:                             # %sw.bb2495
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$1, %r15
	jne	.LBB62_951
# BB#822:                               # %lor.lhs.false2497
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	testq	%r12, %rax
	jne	.LBB62_825
# BB#823:                               # %lor.lhs.false2500
	testq	%r12, %rcx
	jne	.LBB62_951
# BB#824:                               # %land.lhs.true2502
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	orq	%rax, %rcx
.LBB62_825:                             # %if.then2505
	testq	%r12, %rcx
	jne	.LBB62_951
# BB#826:                               # %lor.lhs.false2507
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB62_827
# BB#828:                               # %lor.lhs.false2507
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_793:                             # %sw.bb2435
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_801
# BB#794:                               # %lor.lhs.false2438
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_801
# BB#795:                               # %lor.lhs.false2442
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_800
# BB#796:                               # %lor.lhs.false2442
	testq	%r12, %rcx
	je	.LBB62_800
# BB#797:                               # %lor.lhs.false2442
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_800
# BB#798:                               # %lor.lhs.false2442
	cmpq	$2, %rax
	je	.LBB62_800
# BB#799:                               # %land.lhs.true2451
	movq	$1, %r15
	cmpq	$5, %rax
	jb	.LBB62_801
	jmp	.LBB62_951
.LBB62_781:                             # %sw.bb2413
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$1, %r15
	jne	.LBB62_951
# BB#782:                               # %lor.lhs.false2415
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	andq	%r12, %rcx
	cmpq	$1, %rax
	jne	.LBB62_783
# BB#786:                               # %if.then2423
	cmpq	$1, %rcx
	jne	.LBB62_951
	jmp	.LBB62_787
.LBB62_776:                             # %sw.bb2398
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rcx, %rax
	cmpq	$1, %rax
	je	.LBB62_778
# BB#777:                               # %lor.lhs.false2402
	movq	$1, %r15
	orq	$2, %rcx
	cmpq	$3, %rcx
	je	.LBB62_951
.LBB62_778:                             # %if.then2406
	cmpq	$1, %rax
	jne	.LBB62_779
# BB#780:                               # %if.then2406
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_771:                             # %sw.bb2379
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movq	$1, %r15
	orq	$2, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB62_951
# BB#772:                               # %if.else2392
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_762:                             # %sw.bb2349
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_766
# BB#763:                               # %sw.bb2349
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB62_766
# BB#764:                               # %lor.lhs.false2358
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#765:                               # %lor.lhs.false2358
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB62_951
.LBB62_766:                             # %if.then2367
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB62_768
# BB#767:                               # %if.then2367
	movq	%rcx, %r15
.LBB62_768:                             # %if.then2367
	movl	which_alternative(%rip), %edx
	cmpq	$2, %rdx
	jbe	.LBB62_770
# BB#769:                               # %if.then2367
	movq	%rcx, %rax
.LBB62_770:                             # %if.then2367
	orq	%rax, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_731:                             # %sw.bb2272
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$14, %rax
	je	.LBB62_732
# BB#733:                               # %sw.bb2272
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_560:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_564:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_791:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_774:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_937:                             # %sw.bb2789
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_945
# BB#938:                               # %sw.bb2789
	leaq	-3(%rcx), %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_945
# BB#939:                               # %lor.lhs.false2796
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_944
# BB#940:                               # %lor.lhs.false2796
	testq	%r12, %rcx
	je	.LBB62_944
# BB#941:                               # %lor.lhs.false2796
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_944
# BB#942:                               # %lor.lhs.false2796
	cmpq	$2, %rax
	je	.LBB62_944
# BB#943:                               # %land.lhs.true2805
	movq	$2, %r15
	cmpq	$5, %rax
	jb	.LBB62_945
	jmp	.LBB62_951
.LBB62_935:                             # %sw.bb2781
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %r15
	ja	.LBB62_951
# BB#936:                               # %select.mid14
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_931:                             # %sw.bb2771
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#932:                               # %select.mid10
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_429:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_490:                             # %lor.lhs.false1568
	cmpq	$1, %rcx
	jne	.LBB62_951
# BB#491:                               # %land.lhs.true1570
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_951
# BB#492:                               # %land.lhs.true1570
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
.LBB62_494:                             # %lor.lhs.false1575
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_495
.LBB62_408:                             # %sw.bb1358
	movabsq	$1, %rax
.LBB62_409:                             # %sw.bb1358
	xorq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_556:                             # %if.then1789
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_conflict_cost, %rcx
	movq	$38677, %rdx            # imm = 0x9715
	jmp	.LBB62_557
.LBB62_518:                             # %lor.lhs.false1659
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_520
# BB#519:                               # %lor.lhs.false1659
	cmpq	$2, %rax
	je	.LBB62_527
.LBB62_520:                             # %lor.lhs.false1665
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#521:                               # %land.lhs.true1668
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_951
# BB#522:                               # %land.lhs.true1668
	cmpq	$3, %rax
	jne	.LBB62_525
# BB#523:                               # %land.lhs.true1670
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_527
# BB#524:                               # %lor.lhs.false1674
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_951
	jmp	.LBB62_527
.LBB62_478:                             # %lor.lhs.false1541
	andq	%r12, %rcx
	movq	$3, %r15
	cmpq	$2, %rcx
	ja	.LBB62_951
.LBB62_479:                             # %if.then1547
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB62_481
# BB#480:                               # %if.then1547
	movq	%rdx, %rcx
.LBB62_481:                             # %if.then1547
	movl	which_alternative(%rip), %esi
	testq	%rsi, %rsi
	movq	%rax, %rdi
	jne	.LBB62_483
# BB#482:                               # %if.then1547
	movq	%rdx, %rdi
.LBB62_483:                             # %if.then1547
	orq	%rdi, %rcx
	cmpq	$1, %rsi
	movq	%rax, %rdi
	jne	.LBB62_485
# BB#484:                               # %if.then1547
	movq	%rdx, %rdi
.LBB62_485:                             # %if.then1547
	orq	%rdi, %rcx
	cmpq	$2, %rsi
	movq	%rax, %rdi
	jne	.LBB62_487
# BB#486:                               # %if.then1547
	movq	%rdx, %rdi
.LBB62_487:                             # %if.then1547
	orq	%rdi, %rcx
	addq	$-3, %rsi
	andq	%r12, %rsi
.LBB62_439:                             # %if.then1425
	cmpq	$1, %rsi
	jbe	.LBB62_441
.LBB62_440:                             # %if.then1425
	movq	%rdx, %rax
.LBB62_441:                             # %if.then1425
	orq	%rax, %rcx
	leaq	(%rcx,%rcx,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_461:                             # %lor.lhs.false1504
	cmpq	$1, %rcx
	jne	.LBB62_951
# BB#462:                               # %land.lhs.true1506
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_951
# BB#463:                               # %land.lhs.true1506
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
.LBB62_465:                             # %lor.lhs.false1511
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_466
# BB#467:                               # %lor.lhs.false1511
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_456:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_716:                             # %sw.bb2233
	movq	32(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB62_719
# BB#717:                               # %land.lhs.true2240
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB62_718
.LBB62_719:                             # %sw.default2248
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_673:                             # %sw.bb2089
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_687
# BB#674:                               # %lor.lhs.false2092
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_687
# BB#675:                               # %lor.lhs.false2092
	cmpq	$3, %rax
	jne	.LBB62_678
# BB#676:                               # %lor.lhs.false2094
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_680
# BB#677:                               # %land.lhs.true2098
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_687
	jmp	.LBB62_680
.LBB62_663:                             # %sw.bb2056
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_669
# BB#664:                               # %lor.lhs.false2059
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_669
# BB#665:                               # %lor.lhs.false2062
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %ebx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB62_669
# BB#666:                               # %lor.lhs.false2066
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#667:                               # %land.lhs.true2069
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	$2, %r15
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_951
# BB#668:                               # %land.lhs.true2072
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB62_951
.LBB62_669:                             # %if.then2076
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#670:                               # %lor.lhs.false2079
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	$2, %r15
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB62_951
# BB#671:                               # %lor.lhs.false2082
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_569
# BB#672:
	movabsq	$0, %r15
	jmp	.LBB62_570
.LBB62_656:                             # %sw.bb2038
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %r15
	jne	.LBB62_951
# BB#657:                               # %lor.lhs.false2040
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	testq	%r12, %rax
	jne	.LBB62_660
# BB#658:                               # %lor.lhs.false2043
	testq	%r12, %rcx
	jne	.LBB62_951
# BB#659:                               # %land.lhs.true2045
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	orq	%rax, %rcx
.LBB62_660:                             # %if.then2048
	testq	%r12, %rcx
	jne	.LBB62_951
# BB#661:                               # %lor.lhs.false2050
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB62_569
# BB#662:
	movabsq	$0, %r15
	jmp	.LBB62_570
.LBB62_631:                             # %sw.bb1978
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_639
# BB#632:                               # %lor.lhs.false1981
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB62_639
# BB#633:                               # %lor.lhs.false1985
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_638
# BB#634:                               # %lor.lhs.false1985
	testq	%r12, %rcx
	je	.LBB62_638
# BB#635:                               # %lor.lhs.false1985
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_638
# BB#636:                               # %lor.lhs.false1985
	cmpq	$2, %rax
	je	.LBB62_638
# BB#637:                               # %land.lhs.true1994
	movq	$2, %r15
	cmpq	$5, %rax
	jb	.LBB62_639
	jmp	.LBB62_951
.LBB62_619:                             # %sw.bb1956
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %r15
	jne	.LBB62_951
# BB#620:                               # %lor.lhs.false1958
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	andq	%r12, %rcx
	cmpq	$1, %rax
	jne	.LBB62_621
# BB#624:                               # %if.then1966
	cmpq	$1, %rcx
	jne	.LBB62_951
	jmp	.LBB62_625
.LBB62_613:                             # %sw.bb1941
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rcx, %rax
	cmpq	$1, %rax
	je	.LBB62_615
# BB#614:                               # %lor.lhs.false1945
	movq	$2, %r15
	orq	$2, %rcx
	cmpq	$3, %rcx
	je	.LBB62_951
.LBB62_615:                             # %if.then1949
	cmpq	$1, %rax
	jne	.LBB62_616
# BB#617:                               # %if.then1949
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_609:                             # %sw.bb1922
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movq	$2, %r15
	orq	$2, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB62_951
# BB#610:                               # %if.else1935
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_602:                             # %sw.bb1892
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_606
# BB#603:                               # %sw.bb1892
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB62_606
# BB#604:                               # %lor.lhs.false1901
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#605:                               # %lor.lhs.false1901
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB62_951
.LBB62_606:                             # %if.then1910
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB62_608
# BB#607:                               # %if.then1910
	movq	%rcx, %r15
.LBB62_608:                             # %if.then1910
	movl	which_alternative(%rip), %edx
	cmpq	$2, %rdx
	ja	.LBB62_600
	jmp	.LBB62_601
.LBB62_567:                             # %sw.bb1815
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$14, %rax
	je	.LBB62_569
# BB#568:
	movabsq	$0, %r15
	jmp	.LBB62_570
.LBB62_868:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_751:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_814:                             # %lor.lhs.false2482
	cmpq	$1, %rcx
	jne	.LBB62_951
# BB#815:                               # %land.lhs.true2484
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_951
# BB#816:                               # %land.lhs.true2484
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
.LBB62_818:                             # %lor.lhs.false2489
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB62_819
# BB#820:                               # %lor.lhs.false2489
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_650:                             # %lor.lhs.false2025
	cmpq	$1, %rcx
	jne	.LBB62_951
# BB#651:                               # %land.lhs.true2027
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_951
# BB#652:                               # %land.lhs.true2027
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
.LBB62_654:                             # %lor.lhs.false2032
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB62_655
.LBB62_569:                             # %sw.bb1815
	movabsq	$1, %r15
	jmp	.LBB62_570
.LBB62_589:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_884:                             # %if.then2703
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_conflict_cost, %rcx
	movq	$39909, %rdx            # imm = 0x9BE5
	jmp	.LBB62_557
.LBB62_845:                             # %lor.lhs.false2573
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_847
# BB#846:                               # %lor.lhs.false2573
	cmpq	$2, %rax
	je	.LBB62_854
.LBB62_847:                             # %lor.lhs.false2579
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#848:                               # %land.lhs.true2582
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_951
# BB#849:                               # %land.lhs.true2582
	cmpq	$3, %rax
	jne	.LBB62_852
# BB#850:                               # %land.lhs.true2584
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %r15
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_854
# BB#851:                               # %lor.lhs.false2588
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_951
	jmp	.LBB62_854
.LBB62_838:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_827:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_800:                             # %lor.lhs.false2455
	andq	%r12, %rcx
	movq	$1, %r15
	cmpq	$2, %rcx
	ja	.LBB62_951
.LBB62_801:                             # %if.then2461
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB62_803
# BB#802:                               # %if.then2461
	movq	%rcx, %r15
.LBB62_803:                             # %if.then2461
	movl	which_alternative(%rip), %edx
	testq	%rdx, %rdx
	movq	%rax, %rsi
	jne	.LBB62_805
# BB#804:                               # %if.then2461
	movq	%rcx, %rsi
.LBB62_805:                             # %if.then2461
	orq	%rsi, %r15
	cmpq	$1, %rdx
	movq	%rax, %rsi
	jne	.LBB62_807
# BB#806:                               # %if.then2461
	movq	%rcx, %rsi
.LBB62_807:                             # %if.then2461
	orq	%rsi, %r15
	cmpq	$2, %rdx
	movq	%rax, %rsi
	jne	.LBB62_809
# BB#808:                               # %if.then2461
	movq	%rcx, %rsi
.LBB62_809:                             # %if.then2461
	orq	%rsi, %r15
	addq	$-3, %rdx
	andq	%r12, %rdx
	cmpq	$1, %rdx
	jbe	.LBB62_811
# BB#810:                               # %if.then2461
	movq	%rcx, %rax
.LBB62_811:                             # %if.then2461
	orq	%rax, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_783:                             # %lor.lhs.false2418
	cmpq	$1, %rcx
	jne	.LBB62_951
# BB#784:                               # %land.lhs.true2420
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_951
# BB#785:                               # %land.lhs.true2420
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
.LBB62_787:                             # %lor.lhs.false2425
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_788
# BB#789:                               # %lor.lhs.false2425
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_779:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_732:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_944:                             # %lor.lhs.false2809
	movq	%rcx, %rax
	andq	%r12, %rax
	movq	$2, %r15
	cmpq	$2, %rax
	ja	.LBB62_951
.LBB62_945:                             # %if.then2815
	andq	%r12, %rcx
	cmpq	$2, %rcx
	jbe	.LBB62_946
# BB#947:                               # %if.then2815
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_495:
	movabsq	$0, %rax
	jmp	.LBB62_409
.LBB62_525:                             # %land.lhs.true1692
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_527
# BB#526:                               # %land.lhs.true1692
	cmpq	$2, %rax
	je	.LBB62_951
.LBB62_527:                             # %if.then1698
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB62_951
# BB#528:                               # %lor.lhs.false1701
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_951
# BB#529:                               # %lor.lhs.false1701
	cmpq	$3, %rax
	jne	.LBB62_532
# BB#530:                               # %lor.lhs.false1703
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_534
# BB#531:                               # %land.lhs.true1707
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_951
	jmp	.LBB62_534
.LBB62_466:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_718:                             # %if.then2246
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_conflict_cost, %rcx
	movq	$39293, %rdx            # imm = 0x997D
.LBB62_557:                             # %if.then1789
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB62_678:                             # %lor.lhs.false2116
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_680
# BB#679:                               # %lor.lhs.false2116
	cmpq	$2, %rax
	je	.LBB62_687
.LBB62_680:                             # %lor.lhs.false2122
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#681:                               # %land.lhs.true2125
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_951
# BB#682:                               # %land.lhs.true2125
	cmpq	$3, %rax
	jne	.LBB62_685
# BB#683:                               # %land.lhs.true2127
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_687
# BB#684:                               # %lor.lhs.false2131
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_951
	jmp	.LBB62_687
.LBB62_638:                             # %lor.lhs.false1998
	andq	%r12, %rcx
	movq	$2, %r15
	cmpq	$2, %rcx
	ja	.LBB62_951
.LBB62_639:                             # %if.then2004
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB62_641
# BB#640:                               # %if.then2004
	movq	%rcx, %r15
.LBB62_641:                             # %if.then2004
	movl	which_alternative(%rip), %edx
	testq	%rdx, %rdx
	movq	%rax, %rsi
	jne	.LBB62_643
# BB#642:                               # %if.then2004
	movq	%rcx, %rsi
.LBB62_643:                             # %if.then2004
	orq	%rsi, %r15
	cmpq	$1, %rdx
	movq	%rax, %rsi
	jne	.LBB62_645
# BB#644:                               # %if.then2004
	movq	%rcx, %rsi
.LBB62_645:                             # %if.then2004
	orq	%rsi, %r15
	cmpq	$2, %rdx
	movq	%rax, %rsi
	jne	.LBB62_647
# BB#646:                               # %if.then2004
	movq	%rcx, %rsi
.LBB62_647:                             # %if.then2004
	orq	%rsi, %r15
	addq	$-3, %rdx
	andq	%r12, %rdx
.LBB62_599:                             # %if.then1882
	cmpq	$1, %rdx
	jbe	.LBB62_601
.LBB62_600:                             # %if.then1882
	movq	%rcx, %rax
.LBB62_601:                             # %if.then1882
	orq	%rax, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_621:                             # %lor.lhs.false1961
	cmpq	$1, %rcx
	jne	.LBB62_951
# BB#622:                               # %land.lhs.true1963
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB62_951
# BB#623:                               # %land.lhs.true1963
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_951
.LBB62_625:                             # %lor.lhs.false1968
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB62_626
# BB#627:                               # %lor.lhs.false1968
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_616:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_819:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_655:
	movabsq	$0, %r15
.LBB62_570:                             # %sw.bb1815
	xorq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_852:                             # %land.lhs.true2606
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %r15
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_854
# BB#853:                               # %land.lhs.true2606
	cmpq	$2, %rax
	je	.LBB62_951
.LBB62_854:                             # %if.then2612
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB62_951
# BB#855:                               # %lor.lhs.false2615
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_951
# BB#856:                               # %lor.lhs.false2615
	cmpq	$3, %rax
	jne	.LBB62_859
# BB#857:                               # %lor.lhs.false2617
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %r15
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_861
# BB#858:                               # %land.lhs.true2621
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_951
	jmp	.LBB62_861
.LBB62_788:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_946:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_532:                             # %lor.lhs.false1725
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_534
# BB#533:                               # %lor.lhs.false1725
	cmpq	$2, %rax
	je	.LBB62_951
.LBB62_534:                             # %if.else1732
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_685:                             # %land.lhs.true2149
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_687
# BB#686:                               # %land.lhs.true2149
	cmpq	$2, %rax
	je	.LBB62_951
.LBB62_687:                             # %if.then2155
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB62_951
# BB#688:                               # %lor.lhs.false2158
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB62_951
# BB#689:                               # %lor.lhs.false2158
	cmpq	$3, %rax
	jne	.LBB62_692
# BB#690:                               # %lor.lhs.false2160
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB62_694
# BB#691:                               # %land.lhs.true2164
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB62_951
	jmp	.LBB62_694
.LBB62_626:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_859:                             # %lor.lhs.false2639
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %r15
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_861
# BB#860:                               # %lor.lhs.false2639
	cmpq	$2, %rax
	je	.LBB62_951
.LBB62_861:                             # %if.else2646
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.LBB62_692:                             # %lor.lhs.false2182
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB62_694
# BB#693:                               # %lor.lhs.false2182
	cmpq	$2, %rax
	je	.LBB62_951
.LBB62_694:                             # %if.else2189
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB62_419
.Ltmp570:
	.size	pent_np_unit_conflict_cost, .Ltmp570-pent_np_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI62_0:
	.quad	.LBB62_388
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_383
	.quad	.LBB62_383
	.quad	.LBB62_383
	.quad	.LBB62_380
	.quad	.LBB62_380
	.quad	.LBB62_375
	.quad	.LBB62_375
	.quad	.LBB62_373
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_366
	.quad	.LBB62_383
	.quad	.LBB62_383
	.quad	.LBB62_369
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_386
	.quad	.LBB62_375
	.quad	.LBB62_383
	.quad	.LBB62_383
	.quad	.LBB62_361
	.quad	.LBB62_366
	.quad	.LBB62_386
	.quad	.LBB62_375
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_369
	.quad	.LBB62_369
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_366
	.quad	.LBB62_369
	.quad	.LBB62_356
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_366
	.quad	.LBB62_352
	.quad	.LBB62_383
	.quad	.LBB62_380
	.quad	.LBB62_380
	.quad	.LBB62_375
	.quad	.LBB62_375
	.quad	.LBB62_366
	.quad	.LBB62_373
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_366
	.quad	.LBB62_348
	.quad	.LBB62_348
	.quad	.LBB62_333
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_332
	.quad	.LBB62_332
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_328
	.quad	.LBB62_328
	.quad	.LBB62_328
	.quad	.LBB62_328
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_375
	.quad	.LBB62_366
	.quad	.LBB62_375
	.quad	.LBB62_320
	.quad	.LBB62_366
	.quad	.LBB62_375
	.quad	.LBB62_320
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_317
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_310
	.quad	.LBB62_366
	.quad	.LBB62_304
	.quad	.LBB62_304
	.quad	.LBB62_304
	.quad	.LBB62_304
	.quad	.LBB62_303
	.quad	.LBB62_303
	.quad	.LBB62_302
	.quad	.LBB62_297
	.quad	.LBB62_366
	.quad	.LBB62_303
	.quad	.LBB62_297
	.quad	.LBB62_303
	.quad	.LBB62_297
	.quad	.LBB62_303
	.quad	.LBB62_297
	.quad	.LBB62_303
	.quad	.LBB62_297
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_303
	.quad	.LBB62_303
	.quad	.LBB62_366
	.quad	.LBB62_303
	.quad	.LBB62_303
	.quad	.LBB62_366
	.quad	.LBB62_303
	.quad	.LBB62_303
	.quad	.LBB62_366
	.quad	.LBB62_303
	.quad	.LBB62_303
	.quad	.LBB62_366
	.quad	.LBB62_290
	.quad	.LBB62_290
	.quad	.LBB62_290
	.quad	.LBB62_290
	.quad	.LBB62_290
	.quad	.LBB62_290
	.quad	.LBB62_366
	.quad	.LBB62_284
	.quad	.LBB62_272
	.quad	.LBB62_284
	.quad	.LBB62_284
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_261
	.quad	.LBB62_250
	.quad	.LBB62_250
	.quad	.LBB62_250
	.quad	.LBB62_250
	.quad	.LBB62_261
	.quad	.LBB62_261
	.quad	.LBB62_239
	.quad	.LBB62_239
	.quad	.LBB62_239
	.quad	.LBB62_239
	.quad	.LBB62_239
	.quad	.LBB62_239
	.quad	.LBB62_224
	.quad	.LBB62_213
	.quad	.LBB62_213
	.quad	.LBB62_213
	.quad	.LBB62_213
	.quad	.LBB62_213
	.quad	.LBB62_195
	.quad	.LBB62_184
	.quad	.LBB62_184
	.quad	.LBB62_184
	.quad	.LBB62_213
	.quad	.LBB62_184
	.quad	.LBB62_184
	.quad	.LBB62_184
	.quad	.LBB62_272
	.quad	.LBB62_366
	.quad	.LBB62_284
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_284
	.quad	.LBB62_284
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_391
	.quad	.LBB62_391
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_391
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_391
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_391
	.quad	.LBB62_366
	.quad	.LBB62_391
	.quad	.LBB62_391
	.quad	.LBB62_182
	.quad	.LBB62_180
	.quad	.LBB62_180
	.quad	.LBB62_720
	.quad	.LBB62_366
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_386
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_162
	.quad	.LBB62_272
	.quad	.LBB62_144
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_144
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_375
	.quad	.LBB62_272
	.quad	.LBB62_375
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_375
	.quad	.LBB62_272
	.quad	.LBB62_375
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_272
	.quad	.LBB62_366
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_140
	.quad	.LBB62_375
	.quad	.LBB62_140
	.quad	.LBB62_140
	.quad	.LBB62_375
	.quad	.LBB62_375
	.quad	.LBB62_140
	.quad	.LBB62_375
	.quad	.LBB62_140
	.quad	.LBB62_375
	.quad	.LBB62_125
	.quad	.LBB62_125
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_119
	.quad	.LBB62_125
	.quad	.LBB62_93
	.quad	.LBB62_125
	.quad	.LBB62_66
	.quad	.LBB62_125
	.quad	.LBB62_125
	.quad	.LBB62_125
	.quad	.LBB62_125
	.quad	.LBB62_125
	.quad	.LBB62_125
	.quad	.LBB62_48
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_119
	.quad	.LBB62_48
	.quad	.LBB62_48
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_33
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_721
	.quad	.LBB62_30
	.quad	.LBB62_28
	.quad	.LBB62_28
	.quad	.LBB62_28
	.quad	.LBB62_28
	.quad	.LBB62_28
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_721
	.quad	.LBB62_366
	.quad	.LBB62_272
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_296
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_950
	.quad	.LBB62_721
	.quad	.LBB62_366
	.quad	.LBB62_721
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_11
	.quad	.LBB62_11
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_366
	.quad	.LBB62_4
	.quad	.LBB62_4
	.quad	.LBB62_4
	.quad	.LBB62_4
	.quad	.LBB62_4
	.quad	.LBB62_4
.LJTI62_1:
	.quad	.LBB62_951
	.quad	.LBB62_950
	.quad	.LBB62_391
	.quad	.LBB62_314
	.quad	.LBB62_296
	.quad	.LBB62_296
	.quad	.LBB62_392
	.quad	.LBB62_393
	.quad	.LBB62_366
	.quad	.LBB62_394
	.quad	.LBB62_24
	.quad	.LBB62_721
	.quad	.LBB62_886
.LJTI62_2:
	.quad	.LBB62_951
	.quad	.LBB62_900
	.quad	.LBB62_906
	.quad	.LBB62_951
	.quad	.LBB62_900
	.quad	.LBB62_906
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_928
	.quad	.LBB62_924
	.quad	.LBB62_906
	.quad	.LBB62_928
	.quad	.LBB62_928
	.quad	.LBB62_921
	.quad	.LBB62_917
	.quad	.LBB62_906
	.quad	.LBB62_921
	.quad	.LBB62_921
	.quad	.LBB62_921
	.quad	.LBB62_921
	.quad	.LBB62_914
	.quad	.LBB62_911
	.quad	.LBB62_914
	.quad	.LBB62_911
	.quad	.LBB62_914
	.quad	.LBB62_911
	.quad	.LBB62_914
	.quad	.LBB62_911
	.quad	.LBB62_914
	.quad	.LBB62_911
	.quad	.LBB62_914
	.quad	.LBB62_911
	.quad	.LBB62_914
	.quad	.LBB62_911
	.quad	.LBB62_900
	.quad	.LBB62_906
	.quad	.LBB62_951
	.quad	.LBB62_900
	.quad	.LBB62_906
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
.LJTI62_3:
	.quad	.LBB62_937
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_935
	.quad	.LBB62_935
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_935
	.quad	.LBB62_935
	.quad	.LBB62_935
	.quad	.LBB62_935
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_933
	.quad	.LBB62_906
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_900
	.quad	.LBB62_900
	.quad	.LBB62_931
	.quad	.LBB62_951
	.quad	.LBB62_906
	.quad	.LBB62_900
	.quad	.LBB62_951
	.quad	.LBB62_900
	.quad	.LBB62_951
	.quad	.LBB62_900
	.quad	.LBB62_951
	.quad	.LBB62_900
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_906
	.quad	.LBB62_906
	.quad	.LBB62_900
	.quad	.LBB62_900
	.quad	.LBB62_906
	.quad	.LBB62_900
	.quad	.LBB62_900
	.quad	.LBB62_906
	.quad	.LBB62_900
	.quad	.LBB62_900
	.quad	.LBB62_906
	.quad	.LBB62_900
	.quad	.LBB62_900
	.quad	.LBB62_906
	.quad	.LBB62_900
	.quad	.LBB62_900
	.quad	.LBB62_900
	.quad	.LBB62_900
	.quad	.LBB62_900
	.quad	.LBB62_900
.LJTI62_4:
	.quad	.LBB62_882
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_876
	.quad	.LBB62_876
	.quad	.LBB62_876
	.quad	.LBB62_873
	.quad	.LBB62_873
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_870
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_876
	.quad	.LBB62_876
	.quad	.LBB62_862
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_879
	.quad	.LBB62_951
	.quad	.LBB62_876
	.quad	.LBB62_876
	.quad	.LBB62_840
	.quad	.LBB62_885
	.quad	.LBB62_879
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_862
	.quad	.LBB62_862
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_862
	.quad	.LBB62_829
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_821
	.quad	.LBB62_876
	.quad	.LBB62_873
	.quad	.LBB62_873
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_870
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_812
	.quad	.LBB62_812
	.quad	.LBB62_793
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_790
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_790
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_781
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_879
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_870
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_870
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_870
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_776
	.quad	.LBB62_773
	.quad	.LBB62_773
	.quad	.LBB62_771
	.quad	.LBB62_885
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_762
	.quad	.LBB62_879
	.quad	.LBB62_753
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_753
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_951
	.quad	.LBB62_879
	.quad	.LBB62_951
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_951
	.quad	.LBB62_879
	.quad	.LBB62_951
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_870
	.quad	.LBB62_742
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_742
	.quad	.LBB62_742
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_734
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_731
	.quad	.LBB62_728
	.quad	.LBB62_728
	.quad	.LBB62_728
	.quad	.LBB62_728
	.quad	.LBB62_728
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_951
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_879
	.quad	.LBB62_879
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_885
	.quad	.LBB62_725
	.quad	.LBB62_725
	.quad	.LBB62_725
	.quad	.LBB62_725
	.quad	.LBB62_725
	.quad	.LBB62_725
.LJTI62_5:
	.quad	.LBB62_716
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_708
	.quad	.LBB62_708
	.quad	.LBB62_708
	.quad	.LBB62_706
	.quad	.LBB62_706
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_702
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_708
	.quad	.LBB62_708
	.quad	.LBB62_695
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_712
	.quad	.LBB62_951
	.quad	.LBB62_708
	.quad	.LBB62_708
	.quad	.LBB62_673
	.quad	.LBB62_719
	.quad	.LBB62_712
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_695
	.quad	.LBB62_695
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_695
	.quad	.LBB62_663
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_656
	.quad	.LBB62_708
	.quad	.LBB62_706
	.quad	.LBB62_706
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_702
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_648
	.quad	.LBB62_648
	.quad	.LBB62_631
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_629
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_629
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_619
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_712
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_702
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_702
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_702
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_613
	.quad	.LBB62_611
	.quad	.LBB62_611
	.quad	.LBB62_609
	.quad	.LBB62_719
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_602
	.quad	.LBB62_712
	.quad	.LBB62_592
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_592
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_951
	.quad	.LBB62_712
	.quad	.LBB62_951
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_951
	.quad	.LBB62_712
	.quad	.LBB62_951
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_702
	.quad	.LBB62_580
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_580
	.quad	.LBB62_580
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_571
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_567
	.quad	.LBB62_563
	.quad	.LBB62_563
	.quad	.LBB62_563
	.quad	.LBB62_563
	.quad	.LBB62_563
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_951
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_712
	.quad	.LBB62_712
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_719
	.quad	.LBB62_559
	.quad	.LBB62_559
	.quad	.LBB62_559
	.quad	.LBB62_559
	.quad	.LBB62_559
	.quad	.LBB62_559
.LJTI62_6:
	.quad	.LBB62_554
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_548
	.quad	.LBB62_548
	.quad	.LBB62_548
	.quad	.LBB62_546
	.quad	.LBB62_546
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_542
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_548
	.quad	.LBB62_548
	.quad	.LBB62_535
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_550
	.quad	.LBB62_951
	.quad	.LBB62_548
	.quad	.LBB62_548
	.quad	.LBB62_513
	.quad	.LBB62_558
	.quad	.LBB62_550
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_535
	.quad	.LBB62_535
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_535
	.quad	.LBB62_503
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_496
	.quad	.LBB62_548
	.quad	.LBB62_546
	.quad	.LBB62_546
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_542
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_488
	.quad	.LBB62_488
	.quad	.LBB62_471
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_469
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_469
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_459
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_550
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_542
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_542
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_542
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_453
	.quad	.LBB62_451
	.quad	.LBB62_451
	.quad	.LBB62_449
	.quad	.LBB62_558
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_442
	.quad	.LBB62_550
	.quad	.LBB62_432
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_432
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_951
	.quad	.LBB62_550
	.quad	.LBB62_951
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_951
	.quad	.LBB62_550
	.quad	.LBB62_951
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_542
	.quad	.LBB62_420
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_420
	.quad	.LBB62_420
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_410
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_951
	.quad	.LBB62_406
	.quad	.LBB62_402
	.quad	.LBB62_402
	.quad	.LBB62_402
	.quad	.LBB62_402
	.quad	.LBB62_402
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_951
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_550
	.quad	.LBB62_550
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_558
	.quad	.LBB62_398
	.quad	.LBB62_398
	.quad	.LBB62_398
	.quad	.LBB62_398
	.quad	.LBB62_398
	.quad	.LBB62_398

	.text
	.align	16, 0x90
	.type	pent_np_unit_blockage,@function
pent_np_unit_blockage:                  # @pent_np_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp577:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp578:
	.cfi_def_cfa_offset 24
	pushq	%r13
.Ltmp579:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp580:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp581:
	.cfi_def_cfa_offset 48
.Ltmp582:
	.cfi_offset %rbx, -48
.Ltmp583:
	.cfi_offset %r12, -40
.Ltmp584:
	.cfi_offset %r13, -32
.Ltmp585:
	.cfi_offset %r14, -24
.Ltmp586:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	movq	%rsi, %r14
	testq	%rax, %rax
	jns	.LBB63_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB63_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	andq	%r12, %rax
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB63_366
# BB#3:                                 # %cond.end
	movq	$11, %r15
	jmpq	*.LJTI63_0(,%rax,8)
.LBB63_272:                             # %sw.bb953
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_274
# BB#273:                               # %land.lhs.true956
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_274:                             # %if.else960
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_277
# BB#275:                               # %land.lhs.true963
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#276:                               # %lor.lhs.false966
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_277:                             # %if.else970
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#278:                               # %if.else974
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
# BB#279:                               # %if.else978
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_24
# BB#280:                               # %lor.lhs.false981
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_281
# BB#282:                               # %lor.lhs.false981
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_33:                              # %sw.bb63
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_35
# BB#34:                                # %lor.lhs.false66
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_36
.LBB63_35:                              # %land.lhs.true69
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_36:                              # %if.else73
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_38
# BB#37:                                # %lor.lhs.false76
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_40
.LBB63_38:                              # %land.lhs.true79
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#39:                                # %lor.lhs.false82
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_40:                              # %if.else86
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#41:                                # %lor.lhs.false89
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_366
# BB#42:                                # %if.else93
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
# BB#43:                                # %if.else97
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_24
# BB#44:                                # %lor.lhs.false100
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_45
# BB#46:                                # %lor.lhs.false100
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_386:                             # %sw.bb1308
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_6
# BB#387:
	movabsq	$0, %rax
	jmp	.LBB63_7
.LBB63_375:                             # %sw.bb1285
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_394
# BB#376:                               # %if.else1289
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_377
# BB#378:                               # %if.else1289
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_140:                             # %sw.bb433
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_141
# BB#142:                               # %sw.bb433
	movabsq	$1, %rax
	leaq	6(%rax,%rax), %rax
	jmp	.LBB63_9
.LBB63_303:                             # %sw.bb1046
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
.LBB63_293:                             # %if.else1014
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_366
	jmp	.LBB63_294
.LBB63_125:                             # %sw.bb371
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB63_127
# BB#126:                               # %lor.lhs.false374
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$11, %rax
	jne	.LBB63_129
.LBB63_127:                             # %land.lhs.true377
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_129
# BB#128:                               # %land.lhs.true380
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_129:                             # %if.else384
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB63_131
# BB#130:                               # %lor.lhs.false387
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$11, %rax
	jne	.LBB63_134
.LBB63_131:                             # %land.lhs.true390
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_134
# BB#132:                               # %land.lhs.true393
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#133:                               # %lor.lhs.false396
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_134:                             # %if.else400
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_366
# BB#135:                               # %if.else404
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB63_137
# BB#136:                               # %lor.lhs.false407
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$11, %rax
	jne	.LBB63_138
.LBB63_137:                             # %land.lhs.true410
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_138:                             # %if.else414
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB63_22
# BB#139:                               # %lor.lhs.false417
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$11, %rax
	je	.LBB63_22
	jmp	.LBB63_721
.LBB63_383:                             # %sw.bb1302
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_384
# BB#385:                               # %sw.bb1302
	movabsq	$1, %rax
	jmp	.LBB63_8
.LBB63_141:
	movabsq	$0, %rax
	leaq	6(%rax,%rax), %rax
	jmp	.LBB63_9
.LBB63_290:                             # %sw.bb1005
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_366
# BB#291:                               # %land.lhs.true1007
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_314
# BB#292:                               # %lor.lhs.false1010
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_314
	jmp	.LBB63_293
.LBB63_284:                             # %sw.bb991
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
# BB#285:                               # %if.else995
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_24
# BB#286:                               # %lor.lhs.false998
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_287
# BB#288:                               # %lor.lhs.false998
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_239:                             # %sw.bb802
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_242
# BB#240:                               # %land.lhs.true805
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_242
# BB#241:                               # %land.lhs.true808
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_242:                             # %if.else812
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_246
# BB#243:                               # %land.lhs.true815
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_246
# BB#244:                               # %land.lhs.true818
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#245:                               # %lor.lhs.false821
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_246:                             # %if.else825
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#247:                               # %if.else829
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_249
# BB#248:                               # %land.lhs.true832
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_249:                             # %if.else836
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB63_211
.LBB63_213:                             # %sw.bb694
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_216
# BB#214:                               # %land.lhs.true697
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_216
# BB#215:                               # %land.lhs.true700
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_216:                             # %if.else704
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_220
# BB#217:                               # %land.lhs.true707
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_220
# BB#218:                               # %land.lhs.true710
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#219:                               # %lor.lhs.false713
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_220:                             # %if.else717
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#221:                               # %if.else721
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_223
# BB#222:                               # %land.lhs.true724
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_223:                             # %if.else728
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	jmp	.LBB63_211
.LBB63_184:                             # %sw.bb586
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_187
# BB#185:                               # %land.lhs.true589
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_187
# BB#186:                               # %land.lhs.true592
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_187:                             # %if.else596
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_191
# BB#188:                               # %land.lhs.true599
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_191
# BB#189:                               # %land.lhs.true602
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#190:                               # %lor.lhs.false605
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_191:                             # %if.else609
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#192:                               # %if.else613
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_194
# BB#193:                               # %land.lhs.true616
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_194:                             # %if.else620
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	jmp	.LBB63_211
.LBB63_4:                               # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	je	.LBB63_6
# BB#5:
	movabsq	$0, %rax
	jmp	.LBB63_7
.LBB63_297:                             # %sw.bb1026
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r12, %rax
	jne	.LBB63_296
# BB#298:                               # %lor.lhs.false1029
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_300
# BB#299:
	movabsq	$0, %rax
	jmp	.LBB63_301
.LBB63_28:                              # %sw.bb51
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	je	.LBB63_6
# BB#29:
	movabsq	$0, %rax
	jmp	.LBB63_7
.LBB63_380:                             # %sw.bb1296
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_381
# BB#382:                               # %sw.bb1296
	movabsq	$1, %rax
	jmp	.LBB63_8
.LBB63_369:                             # %sw.bb1270
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#370:                               # %lor.lhs.false1273
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB63_371
# BB#372:                               # %lor.lhs.false1273
	movabsq	$1, %rax
	jmp	.LBB63_8
.LBB63_328:                             # %sw.bb1131
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB63_366
# BB#329:                               # %land.lhs.true1137
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_314
# BB#330:                               # %lor.lhs.false1140
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_314
	jmp	.LBB63_331
.LBB63_304:                             # %sw.bb1057
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB63_307
# BB#305:                               # %land.lhs.true1059
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_314
# BB#306:                               # %lor.lhs.false1062
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_314
.LBB63_307:                             # %if.else1066
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r12, %rax
	jne	.LBB63_296
# BB#308:                               # %lor.lhs.false1069
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB63_309
.LBB63_300:                             # %lor.lhs.false1029
	movabsq	$1, %rax
	jmp	.LBB63_301
.LBB63_250:                             # %sw.bb852
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_253
# BB#251:                               # %land.lhs.true855
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_253
# BB#252:                               # %land.lhs.true858
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_253:                             # %if.else862
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_257
# BB#254:                               # %land.lhs.true865
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_257
# BB#255:                               # %land.lhs.true868
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#256:                               # %lor.lhs.false871
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_257:                             # %if.else875
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#258:                               # %if.else879
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_260
# BB#259:                               # %land.lhs.true882
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_260:                             # %if.else886
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB63_211:                             # %land.lhs.true678
	callq	incdec_operand
.LBB63_212:                             # %land.lhs.true678
	testq	%r12, %rax
	jne	.LBB63_721
	jmp	.LBB63_22
.LBB63_384:
	movabsq	$0, %rax
	jmp	.LBB63_8
.LBB63_377:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_261:                             # %sw.bb902
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	jne	.LBB63_264
# BB#262:                               # %land.lhs.true905
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_264
# BB#263:                               # %land.lhs.true908
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_264:                             # %if.else912
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	jne	.LBB63_268
# BB#265:                               # %land.lhs.true915
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_268
# BB#266:                               # %land.lhs.true918
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#267:                               # %lor.lhs.false921
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_268:                             # %if.else925
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_366
# BB#269:                               # %if.else929
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	jne	.LBB63_271
# BB#270:                               # %land.lhs.true932
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_271:                             # %if.else936
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$4, %rax
	je	.LBB63_22
	jmp	.LBB63_721
.LBB63_48:                              # %sw.bb110
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB63_57
# BB#49:                                # %land.lhs.true112
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_51
# BB#50:                                # %lor.lhs.false115
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_52
.LBB63_51:                              # %land.lhs.true118
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_52:                              # %if.else122
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB63_57
# BB#53:                                # %land.lhs.true124
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_55
# BB#54:                                # %lor.lhs.false127
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_57
.LBB63_55:                              # %land.lhs.true130
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#56:                                # %lor.lhs.false133
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_57:                              # %if.else137
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#58:                                # %if.else137
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_366
# BB#59:                                # %lor.lhs.false142
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_366
# BB#60:                                # %if.else146
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
# BB#61:                                # %if.else150
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_24
# BB#62:                                # %lor.lhs.false153
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_63
# BB#64:                                # %lor.lhs.false153
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_373:                             # %sw.bb1279
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_6
# BB#374:
	movabsq	$0, %rax
	jmp	.LBB63_7
.LBB63_348:                             # %sw.bb1205
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB63_366
# BB#349:                               # %lor.lhs.false1207
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_350
# BB#351:                               # %lor.lhs.false1207
	movabsq	$1, %rax
	jmp	.LBB63_8
.LBB63_332:                             # %sw.bb1160
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
.LBB63_331:                             # %if.else1144
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB63_294
	jmp	.LBB63_366
.LBB63_320:                             # %sw.bb1111
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB63_366
# BB#321:                               # %sw.bb1111
	cmpq	$1, %rax
	jne	.LBB63_323
# BB#322:                               # %land.lhs.true1116
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_323:                             # %if.else1120
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_24
# BB#324:                               # %lor.lhs.false1123
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_325
# BB#326:                               # %lor.lhs.false1123
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_180:                             # %sw.bb572
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$8, %rax
	je	.LBB63_9
# BB#181:                               # %select.mid
	movq	$11, %rax
	jmp	.LBB63_9
.LBB63_144:                             # %sw.bb439
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB63_154
# BB#145:                               # %land.lhs.true443
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_147
# BB#146:                               # %land.lhs.true443
	movl	which_alternative(%rip), %eax
	movq	%rax, %rcx
	andq	%r12, %rcx
	cmpq	$2, %rcx
	jb	.LBB63_149
.LBB63_147:                             # %land.lhs.true450
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
# BB#148:                               # %if.else454thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB63_149:                             # %if.else454
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_154
# BB#150:                               # %land.lhs.true458
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_152
# BB#151:                               # %land.lhs.true458
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	jb	.LBB63_154
.LBB63_152:                             # %land.lhs.true465
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#153:                               # %lor.lhs.false468
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_154:                             # %if.else472
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#155:                               # %if.else472
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_366
# BB#156:                               # %if.else480
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
# BB#157:                               # %if.else484
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_24
# BB#158:                               # %lor.lhs.false487
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_159
# BB#160:                               # %lor.lhs.false487
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_119:                             # %sw.bb357
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
# BB#120:                               # %if.else361
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#121:                               # %lor.lhs.false364
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB63_122
# BB#123:                               # %lor.lhs.false364
	movabsq	$1, %rax
	jmp	.LBB63_124
.LBB63_11:                              # %sw.bb5
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_18
# BB#12:                                # %land.lhs.true
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_14
# BB#13:                                # %land.lhs.true9
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_14:                              # %if.else13
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_18
# BB#15:                                # %land.lhs.true15
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_18
# BB#16:                                # %land.lhs.true18
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#17:                                # %lor.lhs.false
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_18:                              # %if.else24
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#19:                                # %if.else28
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_721
# BB#20:                                # %land.lhs.true30
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
# BB#21:                                # %if.else34
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_721
	jmp	.LBB63_22
.LBB63_381:
	movabsq	$0, %rax
	jmp	.LBB63_8
.LBB63_281:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_388:                             # %sw.bb1314
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB63_366
# BB#389:                               # %land.lhs.true1318
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB63_366
# BB#390:                               # %if.then1324
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_blockage, %rcx
	movq	$34651, %rdx            # imm = 0x875B
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB63_361:                             # %sw.bb1234
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#362:                               # %lor.lhs.false1237
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_366
# BB#363:                               # %lor.lhs.false1237
	cmpq	$3, %rax
	jne	.LBB63_367
# BB#364:                               # %lor.lhs.false1239
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_721
# BB#365:                               # %land.lhs.true1243
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_366
	jmp	.LBB63_721
.LBB63_356:                             # %sw.bb1221
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#357:                               # %lor.lhs.false1224
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_366
# BB#358:                               # %lor.lhs.false1227
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r12, %rdx
	jne	.LBB63_359
# BB#360:                               # %lor.lhs.false1227
	movabsq	$1, %rax
	jmp	.LBB63_8
.LBB63_352:                             # %sw.bb1213
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_366
# BB#353:                               # %lor.lhs.false1215
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_354
# BB#355:                               # %lor.lhs.false1215
	movabsq	$1, %rax
	jmp	.LBB63_8
.LBB63_333:                             # %sw.bb1175
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB63_336
# BB#334:                               # %land.lhs.true1181
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r12, %rax
	jne	.LBB63_296
# BB#335:                               # %lor.lhs.false1184
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_296
.LBB63_336:                             # %if.else1188
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB63_338
# BB#337:                               # %if.else1188
	movq	%rcx, %rdx
.LBB63_338:                             # %if.else1188
	movl	which_alternative(%rip), %esi
	testq	%rsi, %rsi
	movq	%rax, %rdi
	jne	.LBB63_340
# BB#339:                               # %if.else1188
	movq	%rcx, %rdi
.LBB63_340:                             # %if.else1188
	orq	%rdi, %rdx
	cmpq	$1, %rsi
	movq	%rax, %rdi
	jne	.LBB63_342
# BB#341:                               # %if.else1188
	movq	%rcx, %rdi
.LBB63_342:                             # %if.else1188
	orq	%rdi, %rdx
	cmpq	$2, %rsi
	movq	%rax, %rdi
	jne	.LBB63_344
# BB#343:                               # %if.else1188
	movq	%rcx, %rdi
.LBB63_344:                             # %if.else1188
	orq	%rdi, %rdx
	addq	$-3, %rsi
	andq	%r12, %rsi
	cmpq	$1, %rsi
	movq	%rax, %rsi
	jbe	.LBB63_346
# BB#345:                               # %if.else1188
	movq	%rcx, %rsi
.LBB63_346:                             # %if.else1188
	orq	%rsi, %rdx
	jne	.LBB63_8
# BB#347:                               # %if.else1188
	movq	%rcx, %rax
	jmp	.LBB63_8
.LBB63_317:                             # %sw.bb1103
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB63_366
# BB#318:                               # %lor.lhs.false1105
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_6
# BB#319:
	movabsq	$0, %rax
	jmp	.LBB63_7
.LBB63_310:                             # %sw.bb1076
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB63_366
# BB#311:                               # %land.lhs.true1080
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_312
# BB#315:                               # %land.lhs.true1086
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	je	.LBB63_314
	jmp	.LBB63_316
.LBB63_302:                             # %sw.bb1035
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB63_294
	jmp	.LBB63_366
.LBB63_224:                             # %sw.bb744
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB63_233
# BB#225:                               # %land.lhs.true746
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_228
# BB#226:                               # %land.lhs.true749
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_228
# BB#227:                               # %land.lhs.true752
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_228:                             # %if.else756
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB63_233
# BB#229:                               # %land.lhs.true758
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_233
# BB#230:                               # %land.lhs.true761
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_233
# BB#231:                               # %land.lhs.true764
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#232:                               # %lor.lhs.false767
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_233:                             # %if.else771
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_366
# BB#234:                               # %if.else775
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB63_721
# BB#235:                               # %land.lhs.true777
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_237
# BB#236:                               # %land.lhs.true780
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_237:                             # %if.else784
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB63_721
# BB#238:                               # %land.lhs.true786
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	jmp	.LBB63_210
.LBB63_195:                             # %sw.bb636
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB63_204
# BB#196:                               # %land.lhs.true638
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_199
# BB#197:                               # %land.lhs.true641
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_199
# BB#198:                               # %land.lhs.true644
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_199:                             # %if.else648
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB63_204
# BB#200:                               # %land.lhs.true650
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_204
# BB#201:                               # %land.lhs.true653
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_204
# BB#202:                               # %land.lhs.true656
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#203:                               # %lor.lhs.false659
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_204:                             # %if.else663
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_366
# BB#205:                               # %if.else667
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB63_721
# BB#206:                               # %land.lhs.true669
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r12, %rax
	jne	.LBB63_208
# BB#207:                               # %land.lhs.true672
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_208:                             # %if.else676
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB63_721
# BB#209:                               # %land.lhs.true678
	movq	recog_data+16(%rip), %rax
	movq	$2, %rsi
.LBB63_210:                             # %land.lhs.true678
	movq	%rax, %rdi
	jmp	.LBB63_211
.LBB63_182:                             # %sw.bb577
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967293, %rcx       # imm = 0xFFFFFFFD
	andq	%rax, %rcx
	cmpq	$1, %rcx
	jne	.LBB63_183
.LBB63_6:                               # %sw.bb
	movabsq	$1, %rax
.LBB63_7:                               # %sw.bb
	xorq	$1, %rax
.LBB63_8:                               # %sw.epilog
	leaq	8(%rax,%rax,2), %rax
.LBB63_9:                               # %sw.epilog
	andq	%r12, %rax
	cmpq	$12, %rax
	ja	.LBB63_949
# BB#10:                                # %sw.epilog
	jmpq	*.LJTI63_1(,%rax,8)
.LBB63_950:                             # %sw.bb1327
	movq	$12, %r15
.LBB63_951:                             # %return
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_391:                             # %sw.bb1328
	movq	$46, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_886:                             # %sw.bb2706
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB63_888
# BB#887:                               # %cond.false2715
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB63_888:                             # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB63_909
# BB#889:                               # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB63_907
# BB#890:                               # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$364, %rdx              # imm = 0x16C
	jg	.LBB63_904
# BB#891:                               # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB63_896
# BB#892:                               # %cond.end2717
	andq	%r12, %rax
	cmpq	%r12, %rax
	jne	.LBB63_906
# BB#893:                               # %sw.bb2829
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB63_906
# BB#894:                               # %land.lhs.true2836
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB63_906
# BB#895:                               # %if.then2842
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_blockage, %rcx
	movq	$36792, %rdx            # imm = 0x8FB8
	jmp	.LBB63_557
.LBB63_949:                             # %sw.default2845
	movabsq	$.L.str, %rdi
	movabsq	$.L__FUNCTION__.pent_np_unit_blockage, %rdx
	movq	$36799, %rsi            # imm = 0x8FBF
	callq	fancy_abort
.LBB63_909:                             # %cond.end2717
	leaq	-618(%rax), %rcx
	andq	%r12, %rcx
	cmpq	$3, %rcx
	jb	.LBB63_933
# BB#910:                               # %cond.end2717
	addq	$-621, %rax             # imm = 0xFFFFFFFFFFFFFD93
	andq	%r12, %rax
	cmpq	$2, %rax
	movabsq	$0, %r15
	jb	.LBB63_951
	jmp	.LBB63_906
.LBB63_907:                             # %cond.end2717
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	andq	%r12, %rax
	cmpq	$56, %rax
	ja	.LBB63_906
# BB#908:                               # %cond.end2717
	xorq	%r15, %r15
	jmpq	*.LJTI63_2(,%rax,8)
.LBB63_914:                             # %sw.bb2727
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB63_916
# BB#915:                               # %land.lhs.true2730
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r12, %rax
	movq	$2, %r15
	je	.LBB63_951
.LBB63_916:                             # %if.else2734
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_720:                             # %sw.bb565
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	orq	$2, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_721
	jmp	.LBB63_366
.LBB63_162:                             # %sw.bb497
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB63_172
# BB#163:                               # %land.lhs.true503
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_165
# BB#164:                               # %land.lhs.true503
	movl	which_alternative(%rip), %eax
	movq	%rax, %rcx
	andq	%r12, %rcx
	cmpq	$3, %rcx
	jb	.LBB63_167
.LBB63_165:                             # %land.lhs.true512
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
# BB#166:                               # %if.else516thread-pre-split
	movl	which_alternative(%rip), %eax
.LBB63_167:                             # %if.else516
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB63_172
# BB#168:                               # %land.lhs.true522
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_170
# BB#169:                               # %land.lhs.true522
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$3, %rax
	jb	.LBB63_172
.LBB63_170:                             # %land.lhs.true531
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#171:                               # %lor.lhs.false534
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_172:                             # %if.else538
	movq	%rbx, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_366
# BB#173:                               # %if.else538
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB63_366
# BB#174:                               # %if.else548
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
# BB#175:                               # %if.else552
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_24
# BB#176:                               # %lor.lhs.false555
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_177
# BB#178:                               # %lor.lhs.false555
	movabsq	$1, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_93:                              # %sw.bb255
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_110
# BB#94:                                # %land.lhs.true257
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r15d
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB63_97
# BB#95:                                # %land.lhs.true261
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_99
# BB#96:                                # %land.lhs.true261.lor.lhs.false264_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB63_97:                              # %lor.lhs.false264
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB63_99
# BB#98:                                # %lor.lhs.false268
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_101
.LBB63_99:                              # %land.lhs.true271
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_101
# BB#100:                               # %land.lhs.true274
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_392
.LBB63_101:                             # %if.else278
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_110
# BB#102:                               # %land.lhs.true280
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r15, %rdx
	testq	%r12, %rdx
	je	.LBB63_105
# BB#103:                               # %land.lhs.true284
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_107
# BB#104:                               # %land.lhs.true284.lor.lhs.false287_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB63_105:                             # %lor.lhs.false287
	movq	%rax, %rcx
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB63_107
# BB#106:                               # %lor.lhs.false291
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_110
.LBB63_107:                             # %land.lhs.true294
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_110
# BB#108:                               # %land.lhs.true297
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#109:                               # %lor.lhs.false300
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB63_393
.LBB63_110:                             # %if.else304
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_366
# BB#111:                               # %if.else308
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_721
# BB#112:                               # %land.lhs.true310
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r15d
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB63_115
# BB#113:                               # %land.lhs.true314
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_117
# BB#114:                               # %land.lhs.true314.lor.lhs.false317_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB63_115:                             # %lor.lhs.false317
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB63_117
# BB#116:                               # %lor.lhs.false321
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_118
.LBB63_117:                             # %land.lhs.true324
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_394
.LBB63_118:                             # %if.else328
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_721
	jmp	.LBB63_88
.LBB63_66:                              # %sw.bb163
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r15d
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB63_69
# BB#67:                                # %land.lhs.true165
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_71
# BB#68:                                # %land.lhs.true165.lor.lhs.false168_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB63_69:                              # %lor.lhs.false168
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB63_71
# BB#70:                                # %lor.lhs.false172
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_73
.LBB63_71:                              # %land.lhs.true175
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_73
# BB#72:                                # %land.lhs.true178
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_73
.LBB63_392:                             # %sw.bb1332
	movq	$3, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_30:                              # %sw.bb57
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$14, %rax
	jne	.LBB63_31
# BB#32:                                # %sw.bb57
	movabsq	$1, %rax
	jmp	.LBB63_8
.LBB63_371:
	movabsq	$0, %rax
	jmp	.LBB63_8
.LBB63_904:                             # %cond.end2717
	addq	$-365, %rax             # imm = 0xFFFFFFFFFFFFFE93
	andq	%r12, %rax
	cmpq	$27, %rax
	ja	.LBB63_906
# BB#905:                               # %cond.end2717
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$267911679, %rdx        # imm = 0xFF801FF
	movabsq	$0, %r15
	jne	.LBB63_951
	jmp	.LBB63_906
.LBB63_287:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_45:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_73:                              # %if.else182
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB63_76
# BB#74:                                # %land.lhs.true186
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_78
# BB#75:                                # %land.lhs.true186.lor.lhs.false189_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB63_76:                              # %lor.lhs.false189
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB63_78
# BB#77:                                # %lor.lhs.false193
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_81
.LBB63_78:                              # %land.lhs.true196
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_81
# BB#79:                                # %land.lhs.true199
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_393
# BB#80:                                # %lor.lhs.false202
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB63_81
.LBB63_393:                             # %sw.bb1333
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_350:
	movabsq	$0, %rax
	jmp	.LBB63_8
.LBB63_183:
	movabsq	$0, %rax
	jmp	.LBB63_7
.LBB63_31:
	movabsq	$0, %rax
	jmp	.LBB63_8
.LBB63_309:
	movabsq	$0, %rax
.LBB63_301:                             # %lor.lhs.false1029
	xorq	$1, %rax
	leaq	4(,%rax,4), %rax
	jmp	.LBB63_9
.LBB63_896:                             # %cond.end2717
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB63_902
# BB#897:                               # %cond.end2717
	andq	%r12, %rax
	cmpq	$36, %rax
	ja	.LBB63_906
# BB#898:                               # %cond.end2717
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	movabsq	$0, %r15
	jne	.LBB63_951
# BB#899:                               # %cond.end2717
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	jne	.LBB63_900
	jmp	.LBB63_906
.LBB63_122:
	movabsq	$0, %rax
.LBB63_124:                             # %lor.lhs.false364
	xorq	$1, %rax
	addq	$7, %rax
	jmp	.LBB63_9
.LBB63_312:                             # %lor.lhs.false1083
	movq	%rbx, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB63_316
# BB#313:                               # %lor.lhs.false1083
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_316
.LBB63_314:                             # %sw.bb1329
	movq	$3, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_81:                              # %if.else206
	movq	%rbx, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	je	.LBB63_366
# BB#82:                                # %if.else210
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %r13
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r15, %rax
	testq	%r12, %rax
	je	.LBB63_85
# BB#83:                                # %land.lhs.true214
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_87
# BB#84:                                # %land.lhs.true214.lor.lhs.false217_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB63_85:                              # %lor.lhs.false217
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB63_87
# BB#86:                                # %lor.lhs.false221
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_88
.LBB63_87:                              # %land.lhs.true224
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_88
.LBB63_394:                             # %sw.bb1335
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB63_396
# BB#395:                               # %cond.false1344
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB63_396:                             # %cond.end1346
	incq	%rax
	andq	%r12, %rax
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB63_558
# BB#397:                               # %cond.end1346
	xorq	%r15, %r15
	jmpq	*.LJTI63_6(,%rax,8)
.LBB63_550:                             # %sw.bb1771
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_551
# BB#552:                               # %sw.bb1771
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_551:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_410:                             # %sw.bb1363
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_414
# BB#411:                               # %lor.lhs.false1366
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_414
# BB#412:                               # %lor.lhs.false1369
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#413:                               # %land.lhs.true1372
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_951
.LBB63_414:                             # %if.then1375
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#415:                               # %lor.lhs.false1378
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_416
# BB#417:                               # %lor.lhs.false1378
	movabsq	$1, %rax
	jmp	.LBB63_418
.LBB63_542:                             # %sw.bb1755
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_543
# BB#544:                               # %sw.bb1755
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_416:
	movabsq	$0, %rax
.LBB63_418:                             # %lor.lhs.false1378
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB63_419
.LBB63_543:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_548:                             # %sw.bb1766
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB63_408
# BB#549:
	movabsq	$0, %rax
	jmp	.LBB63_409
.LBB63_398:                             # %sw.bb1348
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB63_399
# BB#400:                               # %sw.bb1348
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_402:                             # %sw.bb1353
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB63_403
# BB#404:                               # %sw.bb1353
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_902:                             # %cond.end2717
	addq	$-90, %rax
	andq	%r12, %rax
	cmpq	$94, %rax
	ja	.LBB63_906
# BB#903:                               # %cond.end2717
	xorq	%r15, %r15
	jmpq	*.LJTI63_3(,%rax,8)
.LBB63_900:                             # %sw.bb2824
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%r15, %r15
	testq	%rax, %rax
	je	.LBB63_951
# BB#901:                               # %select.mid16
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_906:                             # %sw.default2844
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_933:                             # %sw.bb2775
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %r15
	ja	.LBB63_951
# BB#934:                               # %select.mid12
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_316:                             # %if.else1089
	andq	%r12, %rcx
	cmpq	$1, %rcx
	ja	.LBB63_366
.LBB63_294:                             # %land.lhs.true1016
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r12, %rax
	jne	.LBB63_296
# BB#295:                               # %lor.lhs.false1019
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB63_366
.LBB63_296:                             # %sw.bb1331
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_546:                             # %sw.bb1761
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB63_408
# BB#547:
	movabsq	$0, %rax
	jmp	.LBB63_409
.LBB63_535:                             # %sw.bb1734
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_539
# BB#536:                               # %lor.lhs.false1737
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB63_539
# BB#537:                               # %lor.lhs.false1740
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#538:                               # %land.lhs.true1743
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB63_951
.LBB63_539:                             # %if.then1746
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#540:                               # %lor.lhs.false1749
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	je	.LBB63_408
# BB#541:
	movabsq	$0, %rax
	jmp	.LBB63_409
.LBB63_325:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_359:
	movabsq	$0, %rax
	jmp	.LBB63_8
.LBB63_354:
	movabsq	$0, %rax
	jmp	.LBB63_8
.LBB63_420:                             # %sw.bb1384
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_426
# BB#421:                               # %sw.bb1384
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_426
# BB#422:                               # %lor.lhs.false1389
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_426
# BB#423:                               # %lor.lhs.false1392
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#424:                               # %lor.lhs.false1392
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
# BB#425:                               # %land.lhs.true1397
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_951
.LBB63_426:                             # %if.then1400
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#427:                               # %if.then1400
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
# BB#428:                               # %lor.lhs.false1405
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_429
# BB#430:                               # %lor.lhs.false1405
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_399:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_403:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_367:                             # %lor.lhs.false1261
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_721
# BB#368:                               # %lor.lhs.false1261
	cmpq	$2, %rax
	jne	.LBB63_721
.LBB63_366:                             # %sw.bb1334
	movq	$1, %r15
	movq	%r15, %rax
.LBB63_419:                             # %lor.lhs.false1378
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB63_911:                             # %sw.bb2719
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB63_913
# BB#912:                               # %land.lhs.true2722
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r12, %rax
	movq	$2, %r15
	je	.LBB63_951
.LBB63_913:                             # %if.else2726
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_488:                             # %sw.bb1563
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$3, %r15
	jne	.LBB63_951
# BB#489:                               # %lor.lhs.false1565
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rcx
	testq	%r12, %rax
	je	.LBB63_490
# BB#493:                               # %if.then1573
	cmpq	$1, %rcx
	jne	.LBB63_951
	jmp	.LBB63_494
.LBB63_469:                             # %sw.bb1517
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#470:                               # %select.mid4
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_451:                             # %sw.bb1480
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#452:                               # %select.mid2
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_432:                             # %sw.bb1411
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_436
# BB#433:                               # %sw.bb1411
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_436
# BB#434:                               # %lor.lhs.false1418
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#435:                               # %lor.lhs.false1418
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_951
.LBB63_436:                             # %if.then1425
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB63_438
# BB#437:                               # %if.then1425
	movq	%rdx, %rcx
.LBB63_438:                             # %if.then1425
	movl	which_alternative(%rip), %esi
	jmp	.LBB63_439
.LBB63_63:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_159:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_928:                             # %sw.bb2763
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB63_930
# BB#929:                               # %land.lhs.true2766
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r12, %rax
	movq	$2, %r15
	je	.LBB63_951
.LBB63_930:                             # %if.else2770
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_921:                             # %sw.bb2745
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB63_923
# BB#922:                               # %land.lhs.true2748
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r12, %rax
	movq	$2, %r15
	je	.LBB63_951
.LBB63_923:                             # %if.else2752
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_554:                             # %sw.bb1776
	movq	32(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB63_558
# BB#555:                               # %land.lhs.true1783
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB63_556
.LBB63_558:                             # %sw.default1791
	movq	$3, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_513:                             # %sw.bb1632
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_527
# BB#514:                               # %lor.lhs.false1635
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_527
# BB#515:                               # %lor.lhs.false1635
	cmpq	$3, %rax
	jne	.LBB63_518
# BB#516:                               # %lor.lhs.false1637
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_520
# BB#517:                               # %land.lhs.true1641
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_527
	jmp	.LBB63_520
.LBB63_503:                             # %sw.bb1599
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_509
# BB#504:                               # %lor.lhs.false1602
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_509
# BB#505:                               # %lor.lhs.false1605
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %ebx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB63_509
# BB#506:                               # %lor.lhs.false1609
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#507:                               # %land.lhs.true1612
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_951
# BB#508:                               # %land.lhs.true1615
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB63_951
.LBB63_509:                             # %if.then1619
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#510:                               # %lor.lhs.false1622
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_951
# BB#511:                               # %lor.lhs.false1625
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_408
# BB#512:
	movabsq	$0, %rax
	jmp	.LBB63_409
.LBB63_496:                             # %sw.bb1581
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$3, %r15
	jne	.LBB63_951
# BB#497:                               # %lor.lhs.false1583
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	testq	%r12, %rax
	jne	.LBB63_500
# BB#498:                               # %lor.lhs.false1586
	testq	%r12, %rcx
	jne	.LBB63_951
# BB#499:                               # %land.lhs.true1588
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	orq	%rax, %rcx
.LBB63_500:                             # %if.then1591
	testq	%r12, %rcx
	jne	.LBB63_951
# BB#501:                               # %lor.lhs.false1593
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB63_408
# BB#502:
	movabsq	$0, %rax
	jmp	.LBB63_409
.LBB63_471:                             # %sw.bb1521
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_479
# BB#472:                               # %lor.lhs.false1524
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_479
# BB#473:                               # %lor.lhs.false1528
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_478
# BB#474:                               # %lor.lhs.false1528
	testq	%r12, %rcx
	je	.LBB63_478
# BB#475:                               # %lor.lhs.false1528
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_478
# BB#476:                               # %lor.lhs.false1528
	cmpq	$2, %rax
	je	.LBB63_478
# BB#477:                               # %land.lhs.true1537
	movq	$3, %r15
	cmpq	$5, %rax
	jb	.LBB63_479
	jmp	.LBB63_951
.LBB63_459:                             # %sw.bb1499
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$3, %r15
	jne	.LBB63_951
# BB#460:                               # %lor.lhs.false1501
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	andq	%r12, %rcx
	cmpq	$1, %rax
	jne	.LBB63_461
# BB#464:                               # %if.then1509
	cmpq	$1, %rcx
	jne	.LBB63_951
	jmp	.LBB63_465
.LBB63_453:                             # %sw.bb1484
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rcx, %rax
	cmpq	$1, %rax
	je	.LBB63_455
# BB#454:                               # %lor.lhs.false1488
	movq	$3, %r15
	orq	$2, %rcx
	cmpq	$3, %rcx
	je	.LBB63_951
.LBB63_455:                             # %if.then1492
	cmpq	$1, %rax
	jne	.LBB63_456
# BB#457:                               # %if.then1492
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_449:                             # %sw.bb1465
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movq	$3, %r15
	orq	$2, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB63_951
# BB#450:                               # %if.else1478
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_442:                             # %sw.bb1435
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_446
# BB#443:                               # %sw.bb1435
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB63_446
# BB#444:                               # %lor.lhs.false1444
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#445:                               # %lor.lhs.false1444
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB63_951
.LBB63_446:                             # %if.then1453
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB63_448
# BB#447:                               # %if.then1453
	movq	%rdx, %rcx
.LBB63_448:                             # %if.then1453
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	ja	.LBB63_440
	jmp	.LBB63_441
.LBB63_406:                             # %sw.bb1358
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$14, %rax
	je	.LBB63_408
# BB#407:
	movabsq	$0, %rax
	jmp	.LBB63_409
.LBB63_924:                             # %sw.bb2753
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB63_927
# BB#925:                               # %land.lhs.true2756
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#926:                               # %lor.lhs.false2758
	movq	recog_data+24(%rip), %rax
	movq	$15, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r12, %rax
	je	.LBB63_951
.LBB63_927:                             # %if.else2762
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_917:                             # %sw.bb2735
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$22, %rax
	je	.LBB63_920
# BB#918:                               # %land.lhs.true2738
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#919:                               # %lor.lhs.false2740
	movq	recog_data+24(%rip), %rax
	movq	$16, %rsi
	movq	%rax, %rdi
	callq	mult_operator
	testq	%r12, %rax
	je	.LBB63_951
.LBB63_920:                             # %if.else2744
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_177:
	movabsq	$0, %rax
	orq	$10, %rax
	jmp	.LBB63_9
.LBB63_88:                              # %if.else228
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r13
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r15, %rdx
	testq	%r12, %rdx
	je	.LBB63_91
# BB#89:                                # %land.lhs.true232
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r12, %rax
	jne	.LBB63_22
# BB#90:                                # %land.lhs.true232.lor.lhs.false235_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB63_91:                              # %lor.lhs.false235
	movq	%rax, %rcx
	shlq	%cl, %r13
	andq	%r15, %r13
	testq	%r12, %r13
	je	.LBB63_22
# BB#92:                                # %lor.lhs.false239
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	jmp	.LBB63_212
.LBB63_22:                              # %land.lhs.true36
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_24
# BB#23:                                # %lor.lhs.false39
	movq	%rbx, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB63_721
.LBB63_24:                              # %sw.bb1792
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB63_26
# BB#25:                                # %cond.false1801
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB63_26:                              # %cond.end1803
	incq	%rax
	andq	%r12, %rax
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB63_719
# BB#27:                                # %cond.end1803
	xorq	%r15, %r15
	jmpq	*.LJTI63_5(,%rax,8)
.LBB63_712:                             # %sw.bb2228
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_713
# BB#714:                               # %sw.bb2228
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_721:                             # %sw.bb2249
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB63_723
# BB#722:                               # %cond.false2258
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB63_723:                             # %cond.end2260
	incq	%rax
	andq	%r12, %rax
	cmpq	$657, %rax              # imm = 0x291
	ja	.LBB63_885
# BB#724:                               # %cond.end2260
	xorq	%r15, %r15
	jmpq	*.LJTI63_4(,%rax,8)
.LBB63_879:                             # %sw.bb2685
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_880
# BB#881:                               # %sw.bb2685
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_880:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_734:                             # %sw.bb2277
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_738
# BB#735:                               # %lor.lhs.false2280
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_738
# BB#736:                               # %lor.lhs.false2283
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#737:                               # %land.lhs.true2286
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_951
.LBB63_738:                             # %if.then2289
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#739:                               # %lor.lhs.false2292
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_740
# BB#741:                               # %lor.lhs.false2292
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_713:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_571:                             # %sw.bb1820
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_575
# BB#572:                               # %lor.lhs.false1823
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_575
# BB#573:                               # %lor.lhs.false1826
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#574:                               # %land.lhs.true1829
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_951
.LBB63_575:                             # %if.then1832
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#576:                               # %lor.lhs.false1835
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_577
# BB#578:                               # %lor.lhs.false1835
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_870:                             # %sw.bb2669
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_871
# BB#872:                               # %sw.bb2669
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_740:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_702:                             # %sw.bb2212
	movq	%r14, %rdi
	callq	get_attr_pent_pair
	andq	%r12, %rax
	cmpq	$3, %rax
	jne	.LBB63_703
# BB#704:                               # %sw.bb2212
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_871:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_876:                             # %sw.bb2680
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB63_877
# BB#878:                               # %sw.bb2680
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_725:                             # %sw.bb2262
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB63_726
# BB#727:                               # %sw.bb2262
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_577:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_728:                             # %sw.bb2267
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB63_729
# BB#730:                               # %sw.bb2267
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_703:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_708:                             # %sw.bb2223
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_709
# BB#710:                               # %sw.bb2223
	movabsq	$1, %r15
	jmp	.LBB63_711
.LBB63_873:                             # %sw.bb2675
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB63_874
# BB#875:                               # %sw.bb2675
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_862:                             # %sw.bb2648
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_866
# BB#863:                               # %lor.lhs.false2651
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB63_866
# BB#864:                               # %lor.lhs.false2654
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#865:                               # %land.lhs.true2657
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB63_951
.LBB63_866:                             # %if.then2660
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#867:                               # %lor.lhs.false2663
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	je	.LBB63_868
# BB#869:                               # %lor.lhs.false2663
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_877:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_559:                             # %sw.bb1805
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB63_560
# BB#561:                               # %sw.bb1805
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_742:                             # %sw.bb2298
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_748
# BB#743:                               # %sw.bb2298
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_748
# BB#744:                               # %lor.lhs.false2303
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_748
# BB#745:                               # %lor.lhs.false2306
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#746:                               # %lor.lhs.false2306
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
# BB#747:                               # %land.lhs.true2311
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_951
.LBB63_748:                             # %if.then2314
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#749:                               # %if.then2314
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
# BB#750:                               # %lor.lhs.false2319
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_751
# BB#752:                               # %lor.lhs.false2319
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_726:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_706:                             # %sw.bb2218
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB63_569
# BB#707:
	movabsq	$0, %r15
	jmp	.LBB63_570
.LBB63_695:                             # %sw.bb2191
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_699
# BB#696:                               # %lor.lhs.false2194
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB63_699
# BB#697:                               # %lor.lhs.false2197
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#698:                               # %land.lhs.true2200
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	jne	.LBB63_951
.LBB63_699:                             # %if.then2203
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#700:                               # %lor.lhs.false2206
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$7, %rax
	je	.LBB63_569
# BB#701:
	movabsq	$0, %r15
	jmp	.LBB63_570
.LBB63_563:                             # %sw.bb1810
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r12, %rax
	jne	.LBB63_564
# BB#565:                               # %sw.bb1810
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_812:                             # %sw.bb2477
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$1, %r15
	jne	.LBB63_951
# BB#813:                               # %lor.lhs.false2479
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rcx
	testq	%r12, %rax
	je	.LBB63_814
# BB#817:                               # %if.then2487
	cmpq	$1, %rcx
	jne	.LBB63_951
	jmp	.LBB63_818
.LBB63_790:                             # %sw.bb2431
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB63_791
# BB#792:                               # %sw.bb2431
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_773:                             # %sw.bb2394
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB63_774
# BB#775:                               # %sw.bb2394
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_753:                             # %sw.bb2325
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_757
# BB#754:                               # %sw.bb2325
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_757
# BB#755:                               # %lor.lhs.false2332
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#756:                               # %lor.lhs.false2332
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_951
.LBB63_757:                             # %if.then2339
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB63_759
# BB#758:                               # %if.then2339
	movq	%rcx, %r15
.LBB63_759:                             # %if.then2339
	movl	which_alternative(%rip), %edx
	cmpq	$1, %rdx
	jbe	.LBB63_761
# BB#760:                               # %if.then2339
	movq	%rcx, %rax
.LBB63_761:                             # %if.then2339
	orq	%rax, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_729:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_709:
	movabsq	$0, %r15
.LBB63_711:                             # %sw.bb2223
	xorq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_874:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_648:                             # %sw.bb2020
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %r15
	jne	.LBB63_951
# BB#649:                               # %lor.lhs.false2022
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rcx
	testq	%r12, %rax
	je	.LBB63_650
# BB#653:                               # %if.then2030
	cmpq	$1, %rcx
	jne	.LBB63_951
	jmp	.LBB63_654
.LBB63_629:                             # %sw.bb1974
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#630:                               # %select.mid8
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_611:                             # %sw.bb1937
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#612:                               # %select.mid6
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_592:                             # %sw.bb1868
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_596
# BB#593:                               # %sw.bb1868
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_596
# BB#594:                               # %lor.lhs.false1875
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#595:                               # %lor.lhs.false1875
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_951
.LBB63_596:                             # %if.then1882
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB63_598
# BB#597:                               # %if.then1882
	movq	%rcx, %r15
.LBB63_598:                             # %if.then1882
	movl	which_alternative(%rip), %edx
	jmp	.LBB63_599
.LBB63_580:                             # %sw.bb1841
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_586
# BB#581:                               # %sw.bb1841
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_586
# BB#582:                               # %lor.lhs.false1846
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_586
# BB#583:                               # %lor.lhs.false1849
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#584:                               # %lor.lhs.false1849
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
# BB#585:                               # %land.lhs.true1854
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	je	.LBB63_951
.LBB63_586:                             # %if.then1857
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#587:                               # %if.then1857
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
# BB#588:                               # %lor.lhs.false1862
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const_int_operand
	testq	%r12, %rax
	jne	.LBB63_589
# BB#590:                               # %lor.lhs.false1862
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_882:                             # %sw.bb2690
	movq	32(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB63_885
# BB#883:                               # %land.lhs.true2697
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB63_884
.LBB63_885:                             # %sw.default2705
	movq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_840:                             # %sw.bb2546
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_854
# BB#841:                               # %lor.lhs.false2549
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_854
# BB#842:                               # %lor.lhs.false2549
	cmpq	$3, %rax
	jne	.LBB63_845
# BB#843:                               # %lor.lhs.false2551
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_847
# BB#844:                               # %land.lhs.true2555
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_854
	jmp	.LBB63_847
.LBB63_829:                             # %sw.bb2513
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_835
# BB#830:                               # %lor.lhs.false2516
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_835
# BB#831:                               # %lor.lhs.false2519
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %ebx
	movq	$1, %r15
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB63_835
# BB#832:                               # %lor.lhs.false2523
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_951
# BB#833:                               # %land.lhs.true2526
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_951
# BB#834:                               # %land.lhs.true2529
	movl	ix86_cpu(%rip), %eax
	movq	$1, %r15
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB63_951
.LBB63_835:                             # %if.then2533
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#836:                               # %lor.lhs.false2536
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_951
# BB#837:                               # %lor.lhs.false2539
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_838
# BB#839:                               # %lor.lhs.false2539
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_821:                             # %sw.bb2495
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$1, %r15
	jne	.LBB63_951
# BB#822:                               # %lor.lhs.false2497
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	testq	%r12, %rax
	jne	.LBB63_825
# BB#823:                               # %lor.lhs.false2500
	testq	%r12, %rcx
	jne	.LBB63_951
# BB#824:                               # %land.lhs.true2502
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	orq	%rax, %rcx
.LBB63_825:                             # %if.then2505
	testq	%r12, %rcx
	jne	.LBB63_951
# BB#826:                               # %lor.lhs.false2507
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB63_827
# BB#828:                               # %lor.lhs.false2507
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_793:                             # %sw.bb2435
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_801
# BB#794:                               # %lor.lhs.false2438
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_801
# BB#795:                               # %lor.lhs.false2442
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_800
# BB#796:                               # %lor.lhs.false2442
	testq	%r12, %rcx
	je	.LBB63_800
# BB#797:                               # %lor.lhs.false2442
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_800
# BB#798:                               # %lor.lhs.false2442
	cmpq	$2, %rax
	je	.LBB63_800
# BB#799:                               # %land.lhs.true2451
	movq	$1, %r15
	cmpq	$5, %rax
	jb	.LBB63_801
	jmp	.LBB63_951
.LBB63_781:                             # %sw.bb2413
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$1, %r15
	jne	.LBB63_951
# BB#782:                               # %lor.lhs.false2415
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	andq	%r12, %rcx
	cmpq	$1, %rax
	jne	.LBB63_783
# BB#786:                               # %if.then2423
	cmpq	$1, %rcx
	jne	.LBB63_951
	jmp	.LBB63_787
.LBB63_776:                             # %sw.bb2398
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rcx, %rax
	cmpq	$1, %rax
	je	.LBB63_778
# BB#777:                               # %lor.lhs.false2402
	movq	$1, %r15
	orq	$2, %rcx
	cmpq	$3, %rcx
	je	.LBB63_951
.LBB63_778:                             # %if.then2406
	cmpq	$1, %rax
	jne	.LBB63_779
# BB#780:                               # %if.then2406
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_771:                             # %sw.bb2379
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movq	$1, %r15
	orq	$2, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB63_951
# BB#772:                               # %if.else2392
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_762:                             # %sw.bb2349
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_766
# BB#763:                               # %sw.bb2349
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB63_766
# BB#764:                               # %lor.lhs.false2358
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#765:                               # %lor.lhs.false2358
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB63_951
.LBB63_766:                             # %if.then2367
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB63_768
# BB#767:                               # %if.then2367
	movq	%rcx, %r15
.LBB63_768:                             # %if.then2367
	movl	which_alternative(%rip), %edx
	cmpq	$2, %rdx
	jbe	.LBB63_770
# BB#769:                               # %if.then2367
	movq	%rcx, %rax
.LBB63_770:                             # %if.then2367
	orq	%rax, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_731:                             # %sw.bb2272
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$14, %rax
	je	.LBB63_732
# BB#733:                               # %sw.bb2272
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_560:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_564:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_791:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_774:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_937:                             # %sw.bb2789
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_945
# BB#938:                               # %sw.bb2789
	leaq	-3(%rcx), %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_945
# BB#939:                               # %lor.lhs.false2796
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_944
# BB#940:                               # %lor.lhs.false2796
	testq	%r12, %rcx
	je	.LBB63_944
# BB#941:                               # %lor.lhs.false2796
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_944
# BB#942:                               # %lor.lhs.false2796
	cmpq	$2, %rax
	je	.LBB63_944
# BB#943:                               # %land.lhs.true2805
	movq	$2, %r15
	cmpq	$5, %rax
	jb	.LBB63_945
	jmp	.LBB63_951
.LBB63_935:                             # %sw.bb2781
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$2, %r15
	ja	.LBB63_951
# BB#936:                               # %select.mid14
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_931:                             # %sw.bb2771
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#932:                               # %select.mid10
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_429:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_490:                             # %lor.lhs.false1568
	cmpq	$1, %rcx
	jne	.LBB63_951
# BB#491:                               # %land.lhs.true1570
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_951
# BB#492:                               # %land.lhs.true1570
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
.LBB63_494:                             # %lor.lhs.false1575
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_495
.LBB63_408:                             # %sw.bb1358
	movabsq	$1, %rax
.LBB63_409:                             # %sw.bb1358
	xorq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_556:                             # %if.then1789
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_blockage, %rcx
	movq	$35298, %rdx            # imm = 0x89E2
	jmp	.LBB63_557
.LBB63_518:                             # %lor.lhs.false1659
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_520
# BB#519:                               # %lor.lhs.false1659
	cmpq	$2, %rax
	je	.LBB63_527
.LBB63_520:                             # %lor.lhs.false1665
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#521:                               # %land.lhs.true1668
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_951
# BB#522:                               # %land.lhs.true1668
	cmpq	$3, %rax
	jne	.LBB63_525
# BB#523:                               # %land.lhs.true1670
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_527
# BB#524:                               # %lor.lhs.false1674
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_951
	jmp	.LBB63_527
.LBB63_478:                             # %lor.lhs.false1541
	andq	%r12, %rcx
	movq	$3, %r15
	cmpq	$2, %rcx
	ja	.LBB63_951
.LBB63_479:                             # %if.then1547
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rcx
	jne	.LBB63_481
# BB#480:                               # %if.then1547
	movq	%rdx, %rcx
.LBB63_481:                             # %if.then1547
	movl	which_alternative(%rip), %esi
	testq	%rsi, %rsi
	movq	%rax, %rdi
	jne	.LBB63_483
# BB#482:                               # %if.then1547
	movq	%rdx, %rdi
.LBB63_483:                             # %if.then1547
	orq	%rdi, %rcx
	cmpq	$1, %rsi
	movq	%rax, %rdi
	jne	.LBB63_485
# BB#484:                               # %if.then1547
	movq	%rdx, %rdi
.LBB63_485:                             # %if.then1547
	orq	%rdi, %rcx
	cmpq	$2, %rsi
	movq	%rax, %rdi
	jne	.LBB63_487
# BB#486:                               # %if.then1547
	movq	%rdx, %rdi
.LBB63_487:                             # %if.then1547
	orq	%rdi, %rcx
	addq	$-3, %rsi
	andq	%r12, %rsi
.LBB63_439:                             # %if.then1425
	cmpq	$1, %rsi
	jbe	.LBB63_441
.LBB63_440:                             # %if.then1425
	movq	%rdx, %rax
.LBB63_441:                             # %if.then1425
	orq	%rax, %rcx
	leaq	(%rcx,%rcx,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_461:                             # %lor.lhs.false1504
	cmpq	$1, %rcx
	jne	.LBB63_951
# BB#462:                               # %land.lhs.true1506
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_951
# BB#463:                               # %land.lhs.true1506
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
.LBB63_465:                             # %lor.lhs.false1511
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_466
# BB#467:                               # %lor.lhs.false1511
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_456:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_716:                             # %sw.bb2233
	movq	32(%r14), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB63_719
# BB#717:                               # %land.lhs.true2240
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	js	.LBB63_718
.LBB63_719:                             # %sw.default2248
	movq	$2, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_673:                             # %sw.bb2089
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_687
# BB#674:                               # %lor.lhs.false2092
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_687
# BB#675:                               # %lor.lhs.false2092
	cmpq	$3, %rax
	jne	.LBB63_678
# BB#676:                               # %lor.lhs.false2094
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_680
# BB#677:                               # %land.lhs.true2098
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_687
	jmp	.LBB63_680
.LBB63_663:                             # %sw.bb2056
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_669
# BB#664:                               # %lor.lhs.false2059
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_669
# BB#665:                               # %lor.lhs.false2062
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %ebx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB63_669
# BB#666:                               # %lor.lhs.false2066
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#667:                               # %land.lhs.true2069
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	$2, %r15
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_951
# BB#668:                               # %land.lhs.true2072
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%rbx, %rdx
	testq	%r12, %rdx
	jne	.LBB63_951
.LBB63_669:                             # %if.then2076
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#670:                               # %lor.lhs.false2079
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	$2, %r15
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r12, %rax
	je	.LBB63_951
# BB#671:                               # %lor.lhs.false2082
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_569
# BB#672:
	movabsq	$0, %r15
	jmp	.LBB63_570
.LBB63_656:                             # %sw.bb2038
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$2, %r15
	jne	.LBB63_951
# BB#657:                               # %lor.lhs.false2040
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	testq	%r12, %rax
	jne	.LBB63_660
# BB#658:                               # %lor.lhs.false2043
	testq	%r12, %rcx
	jne	.LBB63_951
# BB#659:                               # %land.lhs.true2045
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	movl	which_alternative(%rip), %ecx
	orq	%rax, %rcx
.LBB63_660:                             # %if.then2048
	testq	%r12, %rcx
	jne	.LBB63_951
# BB#661:                               # %lor.lhs.false2050
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB63_569
# BB#662:
	movabsq	$0, %r15
	jmp	.LBB63_570
.LBB63_631:                             # %sw.bb1978
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_639
# BB#632:                               # %lor.lhs.false1981
	movl	which_alternative(%rip), %eax
	addq	$-3, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	ja	.LBB63_639
# BB#633:                               # %lor.lhs.false1985
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_638
# BB#634:                               # %lor.lhs.false1985
	testq	%r12, %rcx
	je	.LBB63_638
# BB#635:                               # %lor.lhs.false1985
	movq	%rcx, %rax
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_638
# BB#636:                               # %lor.lhs.false1985
	cmpq	$2, %rax
	je	.LBB63_638
# BB#637:                               # %land.lhs.true1994
	movq	$2, %r15
	cmpq	$5, %rax
	jb	.LBB63_639
	jmp	.LBB63_951
.LBB63_619:                             # %sw.bb1956
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$2, %r15
	jne	.LBB63_951
# BB#620:                               # %lor.lhs.false1958
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movl	which_alternative(%rip), %ecx
	andq	%r12, %rax
	andq	%r12, %rcx
	cmpq	$1, %rax
	jne	.LBB63_621
# BB#624:                               # %if.then1966
	cmpq	$1, %rcx
	jne	.LBB63_951
	jmp	.LBB63_625
.LBB63_613:                             # %sw.bb1941
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	movabsq	$4294967293, %rax       # imm = 0xFFFFFFFD
	andq	%rcx, %rax
	cmpq	$1, %rax
	je	.LBB63_615
# BB#614:                               # %lor.lhs.false1945
	movq	$2, %r15
	orq	$2, %rcx
	cmpq	$3, %rcx
	je	.LBB63_951
.LBB63_615:                             # %if.then1949
	cmpq	$1, %rax
	jne	.LBB63_616
# BB#617:                               # %if.then1949
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_609:                             # %sw.bb1922
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movq	$2, %r15
	orq	$2, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB63_951
# BB#610:                               # %if.else1935
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_602:                             # %sw.bb1892
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_606
# BB#603:                               # %sw.bb1892
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB63_606
# BB#604:                               # %lor.lhs.false1901
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#605:                               # %lor.lhs.false1901
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB63_951
.LBB63_606:                             # %if.then1910
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB63_608
# BB#607:                               # %if.then1910
	movq	%rcx, %r15
.LBB63_608:                             # %if.then1910
	movl	which_alternative(%rip), %edx
	cmpq	$2, %rdx
	ja	.LBB63_600
	jmp	.LBB63_601
.LBB63_567:                             # %sw.bb1815
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r12, %rax
	cmpq	$14, %rax
	je	.LBB63_569
# BB#568:
	movabsq	$0, %r15
	jmp	.LBB63_570
.LBB63_868:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_751:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_814:                             # %lor.lhs.false2482
	cmpq	$1, %rcx
	jne	.LBB63_951
# BB#815:                               # %land.lhs.true2484
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_951
# BB#816:                               # %land.lhs.true2484
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
.LBB63_818:                             # %lor.lhs.false2489
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	je	.LBB63_819
# BB#820:                               # %lor.lhs.false2489
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_650:                             # %lor.lhs.false2025
	cmpq	$1, %rcx
	jne	.LBB63_951
# BB#651:                               # %land.lhs.true2027
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_951
# BB#652:                               # %land.lhs.true2027
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
.LBB63_654:                             # %lor.lhs.false2032
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB63_655
.LBB63_569:                             # %sw.bb1815
	movabsq	$1, %r15
	jmp	.LBB63_570
.LBB63_589:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_884:                             # %if.then2703
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_blockage, %rcx
	movq	$36530, %rdx            # imm = 0x8EB2
	jmp	.LBB63_557
.LBB63_845:                             # %lor.lhs.false2573
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_847
# BB#846:                               # %lor.lhs.false2573
	cmpq	$2, %rax
	je	.LBB63_854
.LBB63_847:                             # %lor.lhs.false2579
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#848:                               # %land.lhs.true2582
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_951
# BB#849:                               # %land.lhs.true2582
	cmpq	$3, %rax
	jne	.LBB63_852
# BB#850:                               # %land.lhs.true2584
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %r15
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_854
# BB#851:                               # %lor.lhs.false2588
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_951
	jmp	.LBB63_854
.LBB63_838:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_827:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_800:                             # %lor.lhs.false2455
	andq	%r12, %rcx
	movq	$1, %r15
	cmpq	$2, %rcx
	ja	.LBB63_951
.LBB63_801:                             # %if.then2461
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB63_803
# BB#802:                               # %if.then2461
	movq	%rcx, %r15
.LBB63_803:                             # %if.then2461
	movl	which_alternative(%rip), %edx
	testq	%rdx, %rdx
	movq	%rax, %rsi
	jne	.LBB63_805
# BB#804:                               # %if.then2461
	movq	%rcx, %rsi
.LBB63_805:                             # %if.then2461
	orq	%rsi, %r15
	cmpq	$1, %rdx
	movq	%rax, %rsi
	jne	.LBB63_807
# BB#806:                               # %if.then2461
	movq	%rcx, %rsi
.LBB63_807:                             # %if.then2461
	orq	%rsi, %r15
	cmpq	$2, %rdx
	movq	%rax, %rsi
	jne	.LBB63_809
# BB#808:                               # %if.then2461
	movq	%rcx, %rsi
.LBB63_809:                             # %if.then2461
	orq	%rsi, %r15
	addq	$-3, %rdx
	andq	%r12, %rdx
	cmpq	$1, %rdx
	jbe	.LBB63_811
# BB#810:                               # %if.then2461
	movq	%rcx, %rax
.LBB63_811:                             # %if.then2461
	orq	%rax, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_783:                             # %lor.lhs.false2418
	cmpq	$1, %rcx
	jne	.LBB63_951
# BB#784:                               # %land.lhs.true2420
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_951
# BB#785:                               # %land.lhs.true2420
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
.LBB63_787:                             # %lor.lhs.false2425
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_788
# BB#789:                               # %lor.lhs.false2425
	movabsq	$1, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_779:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_732:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_944:                             # %lor.lhs.false2809
	movq	%rcx, %rax
	andq	%r12, %rax
	movq	$2, %r15
	cmpq	$2, %rax
	ja	.LBB63_951
.LBB63_945:                             # %if.then2815
	andq	%r12, %rcx
	cmpq	$2, %rcx
	jbe	.LBB63_946
# BB#947:                               # %if.then2815
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_495:
	movabsq	$0, %rax
	jmp	.LBB63_409
.LBB63_525:                             # %land.lhs.true1692
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_527
# BB#526:                               # %land.lhs.true1692
	cmpq	$2, %rax
	je	.LBB63_951
.LBB63_527:                             # %if.then1698
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$3, %r15
	je	.LBB63_951
# BB#528:                               # %lor.lhs.false1701
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_951
# BB#529:                               # %lor.lhs.false1701
	cmpq	$3, %rax
	jne	.LBB63_532
# BB#530:                               # %lor.lhs.false1703
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_534
# BB#531:                               # %land.lhs.true1707
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_951
	jmp	.LBB63_534
.LBB63_466:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_718:                             # %if.then2246
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_np_unit_blockage, %rcx
	movq	$35914, %rdx            # imm = 0x8C4A
.LBB63_557:                             # %if.then1789
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB63_678:                             # %lor.lhs.false2116
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_680
# BB#679:                               # %lor.lhs.false2116
	cmpq	$2, %rax
	je	.LBB63_687
.LBB63_680:                             # %lor.lhs.false2122
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#681:                               # %land.lhs.true2125
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_951
# BB#682:                               # %land.lhs.true2125
	cmpq	$3, %rax
	jne	.LBB63_685
# BB#683:                               # %land.lhs.true2127
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_687
# BB#684:                               # %lor.lhs.false2131
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_951
	jmp	.LBB63_687
.LBB63_638:                             # %lor.lhs.false1998
	andq	%r12, %rcx
	movq	$2, %r15
	cmpq	$2, %rcx
	ja	.LBB63_951
.LBB63_639:                             # %if.then2004
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %r15
	jne	.LBB63_641
# BB#640:                               # %if.then2004
	movq	%rcx, %r15
.LBB63_641:                             # %if.then2004
	movl	which_alternative(%rip), %edx
	testq	%rdx, %rdx
	movq	%rax, %rsi
	jne	.LBB63_643
# BB#642:                               # %if.then2004
	movq	%rcx, %rsi
.LBB63_643:                             # %if.then2004
	orq	%rsi, %r15
	cmpq	$1, %rdx
	movq	%rax, %rsi
	jne	.LBB63_645
# BB#644:                               # %if.then2004
	movq	%rcx, %rsi
.LBB63_645:                             # %if.then2004
	orq	%rsi, %r15
	cmpq	$2, %rdx
	movq	%rax, %rsi
	jne	.LBB63_647
# BB#646:                               # %if.then2004
	movq	%rcx, %rsi
.LBB63_647:                             # %if.then2004
	orq	%rsi, %r15
	addq	$-3, %rdx
	andq	%r12, %rdx
.LBB63_599:                             # %if.then1882
	cmpq	$1, %rdx
	jbe	.LBB63_601
.LBB63_600:                             # %if.then1882
	movq	%rcx, %rax
.LBB63_601:                             # %if.then1882
	orq	%rax, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_621:                             # %lor.lhs.false1961
	cmpq	$1, %rcx
	jne	.LBB63_951
# BB#622:                               # %land.lhs.true1963
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	je	.LBB63_951
# BB#623:                               # %land.lhs.true1963
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_951
.LBB63_625:                             # %lor.lhs.false1968
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB63_626
# BB#627:                               # %lor.lhs.false1968
	movabsq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_616:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_819:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_655:
	movabsq	$0, %r15
.LBB63_570:                             # %sw.bb1815
	xorq	$1, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_852:                             # %land.lhs.true2606
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %r15
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_854
# BB#853:                               # %land.lhs.true2606
	cmpq	$2, %rax
	je	.LBB63_951
.LBB63_854:                             # %if.then2612
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$1, %r15
	je	.LBB63_951
# BB#855:                               # %lor.lhs.false2615
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_951
# BB#856:                               # %lor.lhs.false2615
	cmpq	$3, %rax
	jne	.LBB63_859
# BB#857:                               # %lor.lhs.false2617
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %r15
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_861
# BB#858:                               # %land.lhs.true2621
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_951
	jmp	.LBB63_861
.LBB63_788:
	movabsq	$0, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_946:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_532:                             # %lor.lhs.false1725
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_534
# BB#533:                               # %lor.lhs.false1725
	cmpq	$2, %rax
	je	.LBB63_951
.LBB63_534:                             # %if.else1732
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_685:                             # %land.lhs.true2149
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_687
# BB#686:                               # %land.lhs.true2149
	cmpq	$2, %rax
	je	.LBB63_951
.LBB63_687:                             # %if.then2155
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r12, %rax
	cmpq	$1, %rax
	movq	$2, %r15
	je	.LBB63_951
# BB#688:                               # %lor.lhs.false2158
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB63_951
# BB#689:                               # %lor.lhs.false2158
	cmpq	$3, %rax
	jne	.LBB63_692
# BB#690:                               # %lor.lhs.false2160
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r12, %rdx
	je	.LBB63_694
# BB#691:                               # %land.lhs.true2164
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r12, %rcx
	jne	.LBB63_951
	jmp	.LBB63_694
.LBB63_626:
	movabsq	$0, %r15
	addq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_859:                             # %lor.lhs.false2639
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %r15
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_861
# BB#860:                               # %lor.lhs.false2639
	cmpq	$2, %rax
	je	.LBB63_951
.LBB63_861:                             # %if.else2646
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.LBB63_692:                             # %lor.lhs.false2182
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r12, %rsi
	je	.LBB63_694
# BB#693:                               # %lor.lhs.false2182
	cmpq	$2, %rax
	je	.LBB63_951
.LBB63_694:                             # %if.else2189
	xorq	%r15, %r15
	movq	%r15, %rax
	jmp	.LBB63_419
.Ltmp587:
	.size	pent_np_unit_blockage, .Ltmp587-pent_np_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI63_0:
	.quad	.LBB63_388
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_383
	.quad	.LBB63_383
	.quad	.LBB63_383
	.quad	.LBB63_380
	.quad	.LBB63_380
	.quad	.LBB63_375
	.quad	.LBB63_375
	.quad	.LBB63_373
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_366
	.quad	.LBB63_383
	.quad	.LBB63_383
	.quad	.LBB63_369
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_386
	.quad	.LBB63_375
	.quad	.LBB63_383
	.quad	.LBB63_383
	.quad	.LBB63_361
	.quad	.LBB63_366
	.quad	.LBB63_386
	.quad	.LBB63_375
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_369
	.quad	.LBB63_369
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_366
	.quad	.LBB63_369
	.quad	.LBB63_356
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_366
	.quad	.LBB63_352
	.quad	.LBB63_383
	.quad	.LBB63_380
	.quad	.LBB63_380
	.quad	.LBB63_375
	.quad	.LBB63_375
	.quad	.LBB63_366
	.quad	.LBB63_373
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_366
	.quad	.LBB63_348
	.quad	.LBB63_348
	.quad	.LBB63_333
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_332
	.quad	.LBB63_332
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_328
	.quad	.LBB63_328
	.quad	.LBB63_328
	.quad	.LBB63_328
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_375
	.quad	.LBB63_366
	.quad	.LBB63_375
	.quad	.LBB63_320
	.quad	.LBB63_366
	.quad	.LBB63_375
	.quad	.LBB63_320
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_317
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_310
	.quad	.LBB63_366
	.quad	.LBB63_304
	.quad	.LBB63_304
	.quad	.LBB63_304
	.quad	.LBB63_304
	.quad	.LBB63_303
	.quad	.LBB63_303
	.quad	.LBB63_302
	.quad	.LBB63_297
	.quad	.LBB63_366
	.quad	.LBB63_303
	.quad	.LBB63_297
	.quad	.LBB63_303
	.quad	.LBB63_297
	.quad	.LBB63_303
	.quad	.LBB63_297
	.quad	.LBB63_303
	.quad	.LBB63_297
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_303
	.quad	.LBB63_303
	.quad	.LBB63_366
	.quad	.LBB63_303
	.quad	.LBB63_303
	.quad	.LBB63_366
	.quad	.LBB63_303
	.quad	.LBB63_303
	.quad	.LBB63_366
	.quad	.LBB63_303
	.quad	.LBB63_303
	.quad	.LBB63_366
	.quad	.LBB63_290
	.quad	.LBB63_290
	.quad	.LBB63_290
	.quad	.LBB63_290
	.quad	.LBB63_290
	.quad	.LBB63_290
	.quad	.LBB63_366
	.quad	.LBB63_284
	.quad	.LBB63_272
	.quad	.LBB63_284
	.quad	.LBB63_284
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_261
	.quad	.LBB63_250
	.quad	.LBB63_250
	.quad	.LBB63_250
	.quad	.LBB63_250
	.quad	.LBB63_261
	.quad	.LBB63_261
	.quad	.LBB63_239
	.quad	.LBB63_239
	.quad	.LBB63_239
	.quad	.LBB63_239
	.quad	.LBB63_239
	.quad	.LBB63_239
	.quad	.LBB63_224
	.quad	.LBB63_213
	.quad	.LBB63_213
	.quad	.LBB63_213
	.quad	.LBB63_213
	.quad	.LBB63_213
	.quad	.LBB63_195
	.quad	.LBB63_184
	.quad	.LBB63_184
	.quad	.LBB63_184
	.quad	.LBB63_213
	.quad	.LBB63_184
	.quad	.LBB63_184
	.quad	.LBB63_184
	.quad	.LBB63_272
	.quad	.LBB63_366
	.quad	.LBB63_284
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_284
	.quad	.LBB63_284
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_391
	.quad	.LBB63_391
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_391
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_391
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_391
	.quad	.LBB63_366
	.quad	.LBB63_391
	.quad	.LBB63_391
	.quad	.LBB63_182
	.quad	.LBB63_180
	.quad	.LBB63_180
	.quad	.LBB63_720
	.quad	.LBB63_366
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_386
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_162
	.quad	.LBB63_272
	.quad	.LBB63_144
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_144
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_375
	.quad	.LBB63_272
	.quad	.LBB63_375
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_375
	.quad	.LBB63_272
	.quad	.LBB63_375
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_272
	.quad	.LBB63_366
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_140
	.quad	.LBB63_375
	.quad	.LBB63_140
	.quad	.LBB63_140
	.quad	.LBB63_375
	.quad	.LBB63_375
	.quad	.LBB63_140
	.quad	.LBB63_375
	.quad	.LBB63_140
	.quad	.LBB63_375
	.quad	.LBB63_125
	.quad	.LBB63_125
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_119
	.quad	.LBB63_125
	.quad	.LBB63_93
	.quad	.LBB63_125
	.quad	.LBB63_66
	.quad	.LBB63_125
	.quad	.LBB63_125
	.quad	.LBB63_125
	.quad	.LBB63_125
	.quad	.LBB63_125
	.quad	.LBB63_125
	.quad	.LBB63_48
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_119
	.quad	.LBB63_48
	.quad	.LBB63_48
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_33
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_721
	.quad	.LBB63_30
	.quad	.LBB63_28
	.quad	.LBB63_28
	.quad	.LBB63_28
	.quad	.LBB63_28
	.quad	.LBB63_28
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_721
	.quad	.LBB63_366
	.quad	.LBB63_272
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_296
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_950
	.quad	.LBB63_721
	.quad	.LBB63_366
	.quad	.LBB63_721
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_11
	.quad	.LBB63_11
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_366
	.quad	.LBB63_4
	.quad	.LBB63_4
	.quad	.LBB63_4
	.quad	.LBB63_4
	.quad	.LBB63_4
	.quad	.LBB63_4
.LJTI63_1:
	.quad	.LBB63_951
	.quad	.LBB63_950
	.quad	.LBB63_391
	.quad	.LBB63_314
	.quad	.LBB63_296
	.quad	.LBB63_296
	.quad	.LBB63_392
	.quad	.LBB63_393
	.quad	.LBB63_366
	.quad	.LBB63_394
	.quad	.LBB63_24
	.quad	.LBB63_721
	.quad	.LBB63_886
.LJTI63_2:
	.quad	.LBB63_951
	.quad	.LBB63_900
	.quad	.LBB63_906
	.quad	.LBB63_951
	.quad	.LBB63_900
	.quad	.LBB63_906
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_928
	.quad	.LBB63_924
	.quad	.LBB63_906
	.quad	.LBB63_928
	.quad	.LBB63_928
	.quad	.LBB63_921
	.quad	.LBB63_917
	.quad	.LBB63_906
	.quad	.LBB63_921
	.quad	.LBB63_921
	.quad	.LBB63_921
	.quad	.LBB63_921
	.quad	.LBB63_914
	.quad	.LBB63_911
	.quad	.LBB63_914
	.quad	.LBB63_911
	.quad	.LBB63_914
	.quad	.LBB63_911
	.quad	.LBB63_914
	.quad	.LBB63_911
	.quad	.LBB63_914
	.quad	.LBB63_911
	.quad	.LBB63_914
	.quad	.LBB63_911
	.quad	.LBB63_914
	.quad	.LBB63_911
	.quad	.LBB63_900
	.quad	.LBB63_906
	.quad	.LBB63_951
	.quad	.LBB63_900
	.quad	.LBB63_906
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
.LJTI63_3:
	.quad	.LBB63_937
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_935
	.quad	.LBB63_935
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_935
	.quad	.LBB63_935
	.quad	.LBB63_935
	.quad	.LBB63_935
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_933
	.quad	.LBB63_906
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_900
	.quad	.LBB63_900
	.quad	.LBB63_931
	.quad	.LBB63_951
	.quad	.LBB63_906
	.quad	.LBB63_900
	.quad	.LBB63_951
	.quad	.LBB63_900
	.quad	.LBB63_951
	.quad	.LBB63_900
	.quad	.LBB63_951
	.quad	.LBB63_900
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_906
	.quad	.LBB63_906
	.quad	.LBB63_900
	.quad	.LBB63_900
	.quad	.LBB63_906
	.quad	.LBB63_900
	.quad	.LBB63_900
	.quad	.LBB63_906
	.quad	.LBB63_900
	.quad	.LBB63_900
	.quad	.LBB63_906
	.quad	.LBB63_900
	.quad	.LBB63_900
	.quad	.LBB63_906
	.quad	.LBB63_900
	.quad	.LBB63_900
	.quad	.LBB63_900
	.quad	.LBB63_900
	.quad	.LBB63_900
	.quad	.LBB63_900
.LJTI63_4:
	.quad	.LBB63_882
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_876
	.quad	.LBB63_876
	.quad	.LBB63_876
	.quad	.LBB63_873
	.quad	.LBB63_873
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_870
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_876
	.quad	.LBB63_876
	.quad	.LBB63_862
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_879
	.quad	.LBB63_951
	.quad	.LBB63_876
	.quad	.LBB63_876
	.quad	.LBB63_840
	.quad	.LBB63_885
	.quad	.LBB63_879
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_862
	.quad	.LBB63_862
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_862
	.quad	.LBB63_829
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_821
	.quad	.LBB63_876
	.quad	.LBB63_873
	.quad	.LBB63_873
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_870
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_812
	.quad	.LBB63_812
	.quad	.LBB63_793
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_790
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_790
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_781
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_879
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_870
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_870
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_870
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_776
	.quad	.LBB63_773
	.quad	.LBB63_773
	.quad	.LBB63_771
	.quad	.LBB63_885
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_762
	.quad	.LBB63_879
	.quad	.LBB63_753
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_753
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_951
	.quad	.LBB63_879
	.quad	.LBB63_951
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_951
	.quad	.LBB63_879
	.quad	.LBB63_951
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_870
	.quad	.LBB63_742
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_742
	.quad	.LBB63_742
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_734
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_731
	.quad	.LBB63_728
	.quad	.LBB63_728
	.quad	.LBB63_728
	.quad	.LBB63_728
	.quad	.LBB63_728
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_951
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_879
	.quad	.LBB63_879
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_885
	.quad	.LBB63_725
	.quad	.LBB63_725
	.quad	.LBB63_725
	.quad	.LBB63_725
	.quad	.LBB63_725
	.quad	.LBB63_725
.LJTI63_5:
	.quad	.LBB63_716
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_708
	.quad	.LBB63_708
	.quad	.LBB63_708
	.quad	.LBB63_706
	.quad	.LBB63_706
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_702
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_708
	.quad	.LBB63_708
	.quad	.LBB63_695
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_712
	.quad	.LBB63_951
	.quad	.LBB63_708
	.quad	.LBB63_708
	.quad	.LBB63_673
	.quad	.LBB63_719
	.quad	.LBB63_712
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_695
	.quad	.LBB63_695
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_695
	.quad	.LBB63_663
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_656
	.quad	.LBB63_708
	.quad	.LBB63_706
	.quad	.LBB63_706
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_702
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_648
	.quad	.LBB63_648
	.quad	.LBB63_631
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_629
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_629
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_619
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_712
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_702
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_702
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_702
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_613
	.quad	.LBB63_611
	.quad	.LBB63_611
	.quad	.LBB63_609
	.quad	.LBB63_719
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_602
	.quad	.LBB63_712
	.quad	.LBB63_592
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_592
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_951
	.quad	.LBB63_712
	.quad	.LBB63_951
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_951
	.quad	.LBB63_712
	.quad	.LBB63_951
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_702
	.quad	.LBB63_580
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_580
	.quad	.LBB63_580
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_571
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_567
	.quad	.LBB63_563
	.quad	.LBB63_563
	.quad	.LBB63_563
	.quad	.LBB63_563
	.quad	.LBB63_563
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_951
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_712
	.quad	.LBB63_712
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_719
	.quad	.LBB63_559
	.quad	.LBB63_559
	.quad	.LBB63_559
	.quad	.LBB63_559
	.quad	.LBB63_559
	.quad	.LBB63_559
.LJTI63_6:
	.quad	.LBB63_554
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_548
	.quad	.LBB63_548
	.quad	.LBB63_548
	.quad	.LBB63_546
	.quad	.LBB63_546
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_542
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_548
	.quad	.LBB63_548
	.quad	.LBB63_535
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_550
	.quad	.LBB63_951
	.quad	.LBB63_548
	.quad	.LBB63_548
	.quad	.LBB63_513
	.quad	.LBB63_558
	.quad	.LBB63_550
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_535
	.quad	.LBB63_535
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_535
	.quad	.LBB63_503
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_496
	.quad	.LBB63_548
	.quad	.LBB63_546
	.quad	.LBB63_546
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_542
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_488
	.quad	.LBB63_488
	.quad	.LBB63_471
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_469
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_469
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_459
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_550
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_542
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_542
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_542
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_453
	.quad	.LBB63_451
	.quad	.LBB63_451
	.quad	.LBB63_449
	.quad	.LBB63_558
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_442
	.quad	.LBB63_550
	.quad	.LBB63_432
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_432
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_951
	.quad	.LBB63_550
	.quad	.LBB63_951
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_951
	.quad	.LBB63_550
	.quad	.LBB63_951
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_542
	.quad	.LBB63_420
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_420
	.quad	.LBB63_420
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_410
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_951
	.quad	.LBB63_406
	.quad	.LBB63_402
	.quad	.LBB63_402
	.quad	.LBB63_402
	.quad	.LBB63_402
	.quad	.LBB63_402
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_951
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_550
	.quad	.LBB63_550
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_558
	.quad	.LBB63_398
	.quad	.LBB63_398
	.quad	.LBB63_398
	.quad	.LBB63_398
	.quad	.LBB63_398
	.quad	.LBB63_398

	.text
	.align	16, 0x90
	.type	pent_mul_unit_conflict_cost,@function
pent_mul_unit_conflict_cost:            # @pent_mul_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp592:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp593:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp594:
	.cfi_def_cfa_offset 32
.Ltmp595:
	.cfi_offset %rbx, -32
.Ltmp596:
	.cfi_offset %r14, -24
.Ltmp597:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB64_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB64_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$248, %rdx
	jg	.LBB64_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB64_9
# BB#4:                                 # %sw.bb75
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB64_9
# BB#5:                                 # %land.lhs.true79
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB64_9
# BB#6:                                 # %if.then85
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_mul_unit_conflict_cost, %rcx
	movq	$33397, %rdx            # imm = 0x8275
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB64_7:                               # %cond.end
	movq	$11, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB64_10
# BB#8:                                 # %cond.end
	addq	$-249, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$17, %rcx
	jb	.LBB64_55
	jmp	.LBB64_9
.LBB64_10:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$33, %rax
	ja	.LBB64_9
# BB#11:                                # %cond.end
	jmpq	*.LJTI64_0(,%rax,8)
.LBB64_16:                              # %sw.bb5
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB64_17
# BB#18:                                # %sw.bb5
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB64_51
.LBB64_12:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB64_13
# BB#14:                                # %sw.bb
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB64_51
.LBB64_26:                              # %sw.bb23
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB64_27
# BB#28:                                # %sw.bb23
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB64_51
.LBB64_17:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB64_51
.LBB64_13:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB64_51
.LBB64_36:                              # %sw.bb42
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB64_37
# BB#38:                                # %sw.bb42
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB64_51
.LBB64_27:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB64_51
.LBB64_47:                              # %sw.bb68
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB64_49
# BB#48:
	movabsq	$0, %rax
	jmp	.LBB64_50
.LBB64_44:                              # %sw.bb60
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB64_9
# BB#45:                                # %land.lhs.true62
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB64_46
	jmp	.LBB64_9
.LBB64_37:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB64_51
.LBB64_42:                              # %sw.bb54
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB64_49
# BB#43:
	movabsq	$0, %rax
	jmp	.LBB64_50
.LBB64_40:                              # %sw.bb48
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB64_41
.LBB64_49:                              # %sw.bb68
	movabsq	$1, %rax
	jmp	.LBB64_50
.LBB64_30:                              # %sw.bb29
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB64_32
# BB#31:                                # %land.lhs.true31
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB64_46
.LBB64_32:                              # %if.else35
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB64_33
# BB#34:                                # %if.else35
	movabsq	$1, %rax
	orq	$2, %rax
	jmp	.LBB64_51
.LBB64_20:                              # %sw.bb11
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB64_22
# BB#21:                                # %land.lhs.true
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB64_46
.LBB64_22:                              # %if.else16
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB64_23
# BB#24:                                # %if.else16
	movabsq	$1, %rax
	orq	$2, %rax
	jmp	.LBB64_51
.LBB64_41:
	movabsq	$0, %rax
.LBB64_50:                              # %sw.bb68
	leaq	1(%rax,%rax), %rax
.LBB64_51:                              # %sw.epilog
	andq	%r15, %rax
	cmpq	$3, %rax
	ja	.LBB64_53
# BB#52:                                # %sw.epilog
	jmpq	*.LJTI64_1(,%rax,8)
.LBB64_46:                              # %sw.bb88
	movq	$2, %r14
	jmp	.LBB64_55
.LBB64_9:                               # %sw.bb90
	movq	$70, %r14
.LBB64_55:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB64_54:                              # %sw.bb89
	movq	$39, %r14
	jmp	.LBB64_55
.LBB64_53:                              # %sw.default91
	movabsq	$.L.str, %rdi
	movabsq	$.L__FUNCTION__.pent_mul_unit_conflict_cost, %rdx
	movq	$33420, %rsi            # imm = 0x828C
	callq	fancy_abort
.LBB64_33:
	movabsq	$0, %rax
	orq	$2, %rax
	jmp	.LBB64_51
.LBB64_23:
	movabsq	$0, %rax
	orq	$2, %rax
	jmp	.LBB64_51
.Ltmp598:
	.size	pent_mul_unit_conflict_cost, .Ltmp598-pent_mul_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI64_0:
	.quad	.LBB64_47
	.quad	.LBB64_44
	.quad	.LBB64_9
	.quad	.LBB64_47
	.quad	.LBB64_44
	.quad	.LBB64_9
	.quad	.LBB64_42
	.quad	.LBB64_40
	.quad	.LBB64_36
	.quad	.LBB64_30
	.quad	.LBB64_9
	.quad	.LBB64_36
	.quad	.LBB64_36
	.quad	.LBB64_26
	.quad	.LBB64_20
	.quad	.LBB64_9
	.quad	.LBB64_26
	.quad	.LBB64_26
	.quad	.LBB64_26
	.quad	.LBB64_26
	.quad	.LBB64_16
	.quad	.LBB64_12
	.quad	.LBB64_16
	.quad	.LBB64_12
	.quad	.LBB64_16
	.quad	.LBB64_12
	.quad	.LBB64_16
	.quad	.LBB64_12
	.quad	.LBB64_16
	.quad	.LBB64_12
	.quad	.LBB64_16
	.quad	.LBB64_12
	.quad	.LBB64_16
	.quad	.LBB64_12
.LJTI64_1:
	.quad	.LBB64_55
	.quad	.LBB64_46
	.quad	.LBB64_54
	.quad	.LBB64_9

	.text
	.align	16, 0x90
	.type	pent_mul_unit_blockage,@function
pent_mul_unit_blockage:                 # @pent_mul_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp603:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp604:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp605:
	.cfi_def_cfa_offset 32
.Ltmp606:
	.cfi_offset %rbx, -32
.Ltmp607:
	.cfi_offset %r14, -24
.Ltmp608:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB65_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB65_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$248, %rdx
	jg	.LBB65_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB65_9
# BB#4:                                 # %sw.bb75
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB65_9
# BB#5:                                 # %land.lhs.true79
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB65_9
# BB#6:                                 # %if.then85
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_mul_unit_blockage, %rcx
	movq	$33187, %rdx            # imm = 0x81A3
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB65_7:                               # %cond.end
	movq	$11, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB65_10
# BB#8:                                 # %cond.end
	addq	$-249, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$17, %rcx
	jb	.LBB65_55
	jmp	.LBB65_9
.LBB65_10:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$33, %rax
	ja	.LBB65_9
# BB#11:                                # %cond.end
	jmpq	*.LJTI65_0(,%rax,8)
.LBB65_16:                              # %sw.bb5
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB65_17
# BB#18:                                # %sw.bb5
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB65_51
.LBB65_12:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB65_13
# BB#14:                                # %sw.bb
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB65_51
.LBB65_26:                              # %sw.bb23
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB65_27
# BB#28:                                # %sw.bb23
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB65_51
.LBB65_17:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB65_51
.LBB65_13:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB65_51
.LBB65_36:                              # %sw.bb42
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB65_37
# BB#38:                                # %sw.bb42
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB65_51
.LBB65_27:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB65_51
.LBB65_47:                              # %sw.bb68
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB65_49
# BB#48:
	movabsq	$0, %rax
	jmp	.LBB65_50
.LBB65_44:                              # %sw.bb60
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB65_9
# BB#45:                                # %land.lhs.true62
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB65_46
	jmp	.LBB65_9
.LBB65_37:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB65_51
.LBB65_42:                              # %sw.bb54
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB65_49
# BB#43:
	movabsq	$0, %rax
	jmp	.LBB65_50
.LBB65_40:                              # %sw.bb48
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB65_41
.LBB65_49:                              # %sw.bb68
	movabsq	$1, %rax
	jmp	.LBB65_50
.LBB65_30:                              # %sw.bb29
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB65_32
# BB#31:                                # %land.lhs.true31
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB65_46
.LBB65_32:                              # %if.else35
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB65_33
# BB#34:                                # %if.else35
	movabsq	$1, %rax
	orq	$2, %rax
	jmp	.LBB65_51
.LBB65_20:                              # %sw.bb11
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB65_22
# BB#21:                                # %land.lhs.true
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB65_46
.LBB65_22:                              # %if.else16
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$26, %rax
	je	.LBB65_23
# BB#24:                                # %if.else16
	movabsq	$1, %rax
	orq	$2, %rax
	jmp	.LBB65_51
.LBB65_41:
	movabsq	$0, %rax
.LBB65_50:                              # %sw.bb68
	leaq	1(%rax,%rax), %rax
.LBB65_51:                              # %sw.epilog
	andq	%r15, %rax
	cmpq	$3, %rax
	ja	.LBB65_53
# BB#52:                                # %sw.epilog
	jmpq	*.LJTI65_1(,%rax,8)
.LBB65_46:                              # %sw.bb88
	movq	$2, %r14
	jmp	.LBB65_55
.LBB65_9:                               # %sw.bb90
	movq	$70, %r14
.LBB65_55:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB65_54:                              # %sw.bb89
	movq	$39, %r14
	jmp	.LBB65_55
.LBB65_53:                              # %sw.default91
	movabsq	$.L.str, %rdi
	movabsq	$.L__FUNCTION__.pent_mul_unit_blockage, %rdx
	movq	$33210, %rsi            # imm = 0x81BA
	callq	fancy_abort
.LBB65_33:
	movabsq	$0, %rax
	orq	$2, %rax
	jmp	.LBB65_51
.LBB65_23:
	movabsq	$0, %rax
	orq	$2, %rax
	jmp	.LBB65_51
.Ltmp609:
	.size	pent_mul_unit_blockage, .Ltmp609-pent_mul_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI65_0:
	.quad	.LBB65_47
	.quad	.LBB65_44
	.quad	.LBB65_9
	.quad	.LBB65_47
	.quad	.LBB65_44
	.quad	.LBB65_9
	.quad	.LBB65_42
	.quad	.LBB65_40
	.quad	.LBB65_36
	.quad	.LBB65_30
	.quad	.LBB65_9
	.quad	.LBB65_36
	.quad	.LBB65_36
	.quad	.LBB65_26
	.quad	.LBB65_20
	.quad	.LBB65_9
	.quad	.LBB65_26
	.quad	.LBB65_26
	.quad	.LBB65_26
	.quad	.LBB65_26
	.quad	.LBB65_16
	.quad	.LBB65_12
	.quad	.LBB65_16
	.quad	.LBB65_12
	.quad	.LBB65_16
	.quad	.LBB65_12
	.quad	.LBB65_16
	.quad	.LBB65_12
	.quad	.LBB65_16
	.quad	.LBB65_12
	.quad	.LBB65_16
	.quad	.LBB65_12
	.quad	.LBB65_16
	.quad	.LBB65_12
.LJTI65_1:
	.quad	.LBB65_55
	.quad	.LBB65_46
	.quad	.LBB65_54
	.quad	.LBB65_9

	.text
	.align	16, 0x90
	.type	fpu_unit_conflict_cost,@function
fpu_unit_conflict_cost:                 # @fpu_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp614:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp615:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp616:
	.cfi_def_cfa_offset 32
.Ltmp617:
	.cfi_offset %rbx, -32
.Ltmp618:
	.cfi_offset %r14, -24
.Ltmp619:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB66_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB66_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB66_31
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB66_29
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$364, %rdx              # imm = 0x16C
	jg	.LBB66_25
# BB#5:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB66_10
# BB#6:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB66_174
# BB#7:                                 # %sw.bb769
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB66_174
# BB#8:                                 # %land.lhs.true773
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB66_174
# BB#9:                                 # %if.then779
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.fpu_unit_conflict_cost, %rcx
	movq	$32953, %rdx            # imm = 0x80B9
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB66_31:                              # %cond.end
	leaq	-618(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$3, %rdx
	jae	.LBB66_32
# BB#35:                                # %sw.bb5
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB66_37
# BB#36:                                # %sw.bb5
	movq	%rcx, %rdx
.LBB66_37:                              # %sw.bb5
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	sbbq	%rsi, %rsi
	testq	%rdx, %rsi
	jne	.LBB66_39
# BB#38:                                # %sw.bb5
	movq	%rcx, %rax
.LBB66_39:                              # %sw.bb5
	leaq	8(%rax,%rax,2), %rax
	jmp	.LBB66_283
.LBB66_29:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$56, %rax
	ja	.LBB66_174
# BB#30:                                # %cond.end
	jmpq	*.LJTI66_0(,%rax,8)
.LBB66_40:                              # %sw.bb12
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$7, %rax
	je	.LBB66_283
# BB#41:                                # %select.mid2
	movq	$10, %rax
	jmp	.LBB66_283
.LBB66_32:                              # %cond.end
	addq	$-621, %rax             # imm = 0xFFFFFFFFFFFFFD93
	andq	%rcx, %rax
	cmpq	$1, %rax
	ja	.LBB66_174
# BB#33:                                # %sw.bb
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$8, %rax
	je	.LBB66_283
# BB#34:                                # %select.mid
	movq	$11, %rax
	jmp	.LBB66_283
.LBB66_25:                              # %cond.end
	addq	$-365, %rax             # imm = 0xFFFFFFFFFFFFFE93
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$27, %rcx
	ja	.LBB66_174
# BB#26:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$267911679, %rax        # imm = 0xFF801FF
	jne	.LBB66_27
	jmp	.LBB66_174
.LBB66_10:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB66_23
# BB#11:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$36, %rax
	ja	.LBB66_174
# BB#12:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	je	.LBB66_13
.LBB66_27:                              # %sw.bb764
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$3, %rax
	je	.LBB66_283
# BB#28:                                # %select.mid8
	movq	$8, %rax
.LBB66_283:                             # %sw.epilog
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$11, %rcx
	ja	.LBB66_288
# BB#284:                               # %sw.epilog
	movq	$3, %rbx
	jmpq	*.LJTI66_2(,%rcx,8)
.LBB66_288:                             # %sw.default793
	movabsq	$.L.str, %rdi
	movabsq	$.L__FUNCTION__.fpu_unit_conflict_cost, %rdx
	movq	$33000, %rsi            # imm = 0x80E8
	callq	fancy_abort
.LBB66_23:                              # %cond.end
	addq	$-90, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$94, %rax
	ja	.LBB66_174
# BB#24:                                # %cond.end
	jmpq	*.LJTI66_1(,%rax,8)
.LBB66_222:                             # %sw.bb523
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	je	.LBB66_181
	jmp	.LBB66_185
.LBB66_67:                              # %sw.bb72
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_74
# BB#68:                                # %land.lhs.true74
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_273
# BB#69:                                # %if.else78
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_74
# BB#70:                                # %land.lhs.true80
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#71:                                # %if.else84
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_74
# BB#72:                                # %land.lhs.true86
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB66_285
# BB#73:                                # %land.lhs.true86.if.else90thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_74:                              # %if.else90
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#75:                                # %land.lhs.true92
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_287
# BB#76:                                # %if.else96
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#77:                                # %land.lhs.true98
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB66_62
.LBB66_51:                              # %sw.bb30
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_58
# BB#52:                                # %land.lhs.true32
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_273
# BB#53:                                # %if.else36
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_58
# BB#54:                                # %land.lhs.true38
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#55:                                # %if.else41
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_58
# BB#56:                                # %land.lhs.true43
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB66_285
# BB#57:                                # %land.lhs.true43.if.else47thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_58:                              # %if.else47
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#59:                                # %land.lhs.true49
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_287
# BB#60:                                # %if.else53
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#61:                                # %land.lhs.true55
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	jmp	.LBB66_62
.LBB66_95:                              # %sw.bb162
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_102
# BB#96:                                # %land.lhs.true164
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_273
# BB#97:                                # %if.else168
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_102
# BB#98:                                # %land.lhs.true170
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#99:                                # %if.else174
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_102
# BB#100:                               # %land.lhs.true176
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB66_285
# BB#101:                               # %land.lhs.true176.if.else180thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_102:                             # %if.else180
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#103:                               # %land.lhs.true182
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_287
# BB#104:                               # %if.else186
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#105:                               # %land.lhs.true188
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	jmp	.LBB66_62
.LBB66_120:                             # %sw.bb252
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_127
# BB#121:                               # %land.lhs.true254
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_273
# BB#122:                               # %if.else258
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_127
# BB#123:                               # %land.lhs.true260
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#124:                               # %if.else264
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_127
# BB#125:                               # %land.lhs.true266
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB66_285
# BB#126:                               # %land.lhs.true266.if.else270thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_127:                             # %if.else270
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#128:                               # %land.lhs.true272
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_287
# BB#129:                               # %if.else276
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#130:                               # %land.lhs.true278
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
.LBB66_62:                              # %land.lhs.true55
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_141
# BB#63:                                # %if.else59
	movl	ix86_cpu(%rip), %eax
	jmp	.LBB66_64
.LBB66_166:                             # %sw.bb390
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_171
# BB#167:                               # %land.lhs.true392
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB66_273
# BB#168:                               # %if.else396
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_171
# BB#169:                               # %land.lhs.true398
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#170:                               # %land.lhs.true398.if.else402thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_171:                             # %if.else402
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#172:                               # %land.lhs.true404
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB66_287
# BB#173:                               # %if.else408
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	je	.LBB66_165
	jmp	.LBB66_174
.LBB66_151:                             # %sw.bb353
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$2, %rax
	jne	.LBB66_155
# BB#152:                               # %sw.bb353
	testq	%rbx, %rcx
	jne	.LBB66_155
# BB#153:                               # %land.lhs.true357
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB66_273
# BB#154:                               # %land.lhs.true357.if.else361_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB66_155:                             # %if.else361
	movq	%rax, %rdx
	andq	%rbx, %rdx
	cmpq	$2, %rdx
	jne	.LBB66_159
# BB#156:                               # %if.else361
	testq	%rbx, %rcx
	jne	.LBB66_159
# BB#157:                               # %land.lhs.true365
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#158:                               # %land.lhs.true365.if.else369_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB66_159:                             # %if.else369
	movq	%rax, %rdx
	andq	%rbx, %rdx
	cmpq	$3, %rdx
	jne	.LBB66_163
# BB#160:                               # %if.else369
	testq	%rbx, %rcx
	jne	.LBB66_163
# BB#161:                               # %land.lhs.true373
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB66_287
# BB#162:                               # %land.lhs.true373.if.else377_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB66_163:                             # %if.else377
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#164:                               # %if.else377
	testq	%rbx, %rcx
	jne	.LBB66_174
.LBB66_165:                             # %land.lhs.true381
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
.LBB66_140:                             # %land.lhs.true315
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_141
	jmp	.LBB66_174
.LBB66_42:                              # %sw.bb17
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %edx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rdx
	jne	.LBB66_44
# BB#43:                                # %sw.bb17
	testq	%rbx, %rax
	jne	.LBB66_44
.LBB66_286:                             # %sw.bb788
	movq	$68, %rbx
	jmp	.LBB66_242
.LBB66_13:                              # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	je	.LBB66_174
# BB#14:                                # %sw.bb751
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %edx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rdx
	jne	.LBB66_16
# BB#15:                                # %sw.bb751
	testq	%rbx, %rax
	je	.LBB66_273
.LBB66_16:                              # %if.else756
	testq	%rbx, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rsi
	jne	.LBB66_18
# BB#17:                                # %if.else756
	movq	%rcx, %rsi
.LBB66_18:                              # %if.else756
	cmpq	$3, %rdx
	movq	%rax, %rdx
	jne	.LBB66_20
# BB#19:                                # %if.else756
	movq	%rcx, %rdx
.LBB66_20:                              # %if.else756
	testq	%rsi, %rdx
	jne	.LBB66_22
# BB#21:                                # %if.else756
	movq	%rcx, %rax
.LBB66_22:                              # %if.else756
	leaq	8(%rax,%rax,2), %rax
	jmp	.LBB66_283
.LBB66_196:                             # %sw.bb462
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$4, %rax
	je	.LBB66_283
# BB#197:                               # %select.mid4
	movq	$8, %rax
	jmp	.LBB66_283
.LBB66_142:                             # %sw.bb324
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_147
# BB#143:                               # %land.lhs.true326
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB66_273
# BB#144:                               # %if.else330
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_147
# BB#145:                               # %land.lhs.true332
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#146:                               # %land.lhs.true332.if.else336thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_147:                             # %if.else336
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#148:                               # %land.lhs.true338
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB66_287
# BB#149:                               # %if.else342
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#150:                               # %land.lhs.true344
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB66_140
.LBB66_131:                             # %sw.bb295
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_136
# BB#132:                               # %land.lhs.true297
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB66_273
# BB#133:                               # %if.else301
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_136
# BB#134:                               # %land.lhs.true303
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#135:                               # %land.lhs.true303.if.else307thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_136:                             # %if.else307
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#137:                               # %land.lhs.true309
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB66_287
# BB#138:                               # %if.else313
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#139:                               # %land.lhs.true315
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	jmp	.LBB66_140
.LBB66_106:                             # %sw.bb205
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_115
# BB#107:                               # %land.lhs.true207
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_273
# BB#108:                               # %if.else211
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_112
# BB#109:                               # %if.else211
	movl	which_alternative(%rip), %ecx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	je	.LBB66_112
# BB#110:                               # %land.lhs.true215
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#111:                               # %if.else219thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB66_112:                             # %if.else219
	movq	%rax, %rcx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	jne	.LBB66_115
# BB#113:                               # %land.lhs.true221
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB66_285
# BB#114:                               # %land.lhs.true221.if.else225_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_115:                             # %if.else225
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#116:                               # %land.lhs.true227
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_287
# BB#117:                               # %if.else231
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB66_94
# BB#118:                               # %if.else231
	movl	which_alternative(%rip), %ecx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	je	.LBB66_94
# BB#119:                               # %land.lhs.true235
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB66_92
.LBB66_78:                              # %sw.bb115
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_87
# BB#79:                                # %land.lhs.true117
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB66_273
# BB#80:                                # %if.else121
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_84
# BB#81:                                # %if.else121
	movl	which_alternative(%rip), %ecx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	je	.LBB66_84
# BB#82:                                # %land.lhs.true125
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_273
# BB#83:                                # %if.else129thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB66_84:                              # %if.else129
	movq	%rax, %rcx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	jne	.LBB66_87
# BB#85:                                # %land.lhs.true131
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	jne	.LBB66_86
.LBB66_285:                             # %sw.bb787
	movq	$37, %rbx
	jmp	.LBB66_242
.LBB66_44:                              # %if.else22
	testq	%rbx, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rsi
	jne	.LBB66_46
# BB#45:                                # %if.else22
	movq	%rcx, %rsi
.LBB66_46:                              # %if.else22
	cmpq	$3, %rdx
	movq	%rax, %rdx
	jne	.LBB66_48
# BB#47:                                # %if.else22
	movq	%rcx, %rdx
.LBB66_48:                              # %if.else22
	testq	%rsi, %rdx
	jne	.LBB66_50
# BB#49:                                # %if.else22
	movq	%rcx, %rax
.LBB66_50:                              # %if.else22
	orq	$10, %rax
	jmp	.LBB66_283
.LBB66_175:                             # %sw.bb419
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB66_180
# BB#176:                               # %sw.bb419
	testq	%r15, %rax
	jne	.LBB66_180
# BB#177:                               # %land.lhs.true423
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB66_242
# BB#178:                               # %lor.lhs.false426
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB66_242
# BB#179:                               # %lor.lhs.false426.if.else430_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB66_180:                             # %if.else430
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB66_185
.LBB66_181:                             # %if.else430
	testq	%r15, %rax
	jne	.LBB66_185
# BB#182:                               # %land.lhs.true434
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB66_141
# BB#183:                               # %lor.lhs.false437
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB66_141
# BB#184:                               # %lor.lhs.false437.if.else441_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB66_185:                             # %if.else441
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB66_190
# BB#186:                               # %if.else441
	testq	%r15, %rax
	jne	.LBB66_190
# BB#187:                               # %land.lhs.true445
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB66_273
# BB#188:                               # %lor.lhs.false448
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB66_273
# BB#189:                               # %lor.lhs.false448.if.else452_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB66_190:                             # %if.else452
	andq	%r15, %rcx
	cmpq	$3, %rcx
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rsi
	jne	.LBB66_192
# BB#191:                               # %if.else452
	movq	%rdx, %rsi
.LBB66_192:                             # %if.else452
	testq	%r15, %rax
.LBB66_193:                             # %if.else452
	movq	%rcx, %rax
	jne	.LBB66_195
# BB#194:                               # %if.else452
	movq	%rdx, %rax
.LBB66_195:                             # %if.else452
	testq	%rax, %rsi
	je	.LBB66_281
	jmp	.LBB66_282
.LBB66_198:                             # %sw.bb467
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_205
# BB#199:                               # %land.lhs.true469
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB66_141
# BB#200:                               # %lor.lhs.false472
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB66_141
# BB#201:                               # %if.else476
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_205
# BB#202:                               # %land.lhs.true478
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB66_273
# BB#203:                               # %lor.lhs.false481
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB66_273
# BB#204:                               # %lor.lhs.false481.if.else485_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_205:                             # %if.else485
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB66_207
# BB#206:
	movabsq	$0, %rax
	jmp	.LBB66_208
.LBB66_274:                             # %sw.bb703
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$3, %rax
	je	.LBB66_283
# BB#275:                               # %select.mid6
	movq	$11, %rax
	jmp	.LBB66_283
.LBB66_259:                             # %sw.bb644
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB66_264
# BB#260:                               # %sw.bb644
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB66_264
# BB#261:                               # %land.lhs.true652
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB66_242
# BB#262:                               # %lor.lhs.false655
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB66_242
# BB#263:                               # %lor.lhs.false655.if.else659_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB66_264:                             # %if.else659
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	je	.LBB66_265
	jmp	.LBB66_269
.LBB66_223:                             # %sw.bb554
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_228
# BB#224:                               # %sw.bb554
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB66_228
# BB#225:                               # %land.lhs.true558
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB66_242
# BB#226:                               # %lor.lhs.false561
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB66_242
# BB#227:                               # %if.else565thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB66_228:                             # %if.else565
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB66_235
# BB#229:                               # %land.lhs.true567
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB66_141
# BB#230:                               # %lor.lhs.false570
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB66_141
# BB#231:                               # %if.else574
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_235
# BB#232:                               # %land.lhs.true576
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB66_273
# BB#233:                               # %lor.lhs.false579
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB66_273
# BB#234:                               # %lor.lhs.false579.if.else583_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_235:                             # %if.else583
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB66_236
.LBB66_207:                             # %if.else485
	movabsq	$1, %rax
	jmp	.LBB66_208
.LBB66_276:                             # %sw.bb708
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB66_269
.LBB66_265:                             # %if.else659
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB66_269
# BB#266:                               # %land.lhs.true667
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB66_141
# BB#267:                               # %lor.lhs.false670
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB66_141
# BB#268:                               # %lor.lhs.false670.if.else674_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB66_269:                             # %if.else674
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB66_278
# BB#270:                               # %if.else674
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB66_278
# BB#271:                               # %land.lhs.true682
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB66_273
# BB#272:                               # %lor.lhs.false685
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB66_273
# BB#277:                               # %lor.lhs.false734.if.else738_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB66_278:                             # %if.else738
	andq	%r15, %rcx
	cmpq	$3, %rcx
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rsi
	jne	.LBB66_280
# BB#279:                               # %if.else738
	movq	%rdx, %rsi
.LBB66_280:                             # %if.else738
	andq	%r15, %rax
	cmpq	$3, %rax
	sbbq	%rax, %rax
	testq	%rsi, %rax
	jne	.LBB66_282
.LBB66_281:                             # %if.else738
	movq	%rdx, %rcx
.LBB66_282:                             # %if.else738
	leaq	8(%rcx,%rcx,2), %rax
	jmp	.LBB66_283
.LBB66_237:                             # %sw.bb591
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$2, %rax
	jne	.LBB66_244
# BB#238:                               # %sw.bb591
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB66_244
# BB#239:                               # %land.lhs.true597
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB66_240
# BB#243:                               # %land.lhs.true603
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	movq	$3, %rbx
	je	.LBB66_242
	jmp	.LBB66_244
.LBB66_209:                             # %sw.bb492
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$2, %rax
	jne	.LBB66_214
# BB#210:                               # %sw.bb492
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB66_214
# BB#211:                               # %land.lhs.true496
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB66_141
# BB#212:                               # %lor.lhs.false499
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB66_141
# BB#213:                               # %lor.lhs.false499.if.else503_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB66_214:                             # %if.else503
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB66_219
# BB#215:                               # %if.else503
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB66_219
# BB#216:                               # %land.lhs.true507
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB66_273
# BB#217:                               # %lor.lhs.false510
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB66_273
# BB#218:                               # %lor.lhs.false510.if.else514_crit_edge
	movl	which_alternative(%rip), %ecx
	movl	ix86_cpu(%rip), %eax
.LBB66_219:                             # %if.else514
	andq	%r15, %rcx
	cmpq	$1, %rcx
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rsi
	jne	.LBB66_221
# BB#220:                               # %if.else514
	movq	%rdx, %rsi
.LBB66_221:                             # %if.else514
	andq	%r15, %rax
	cmpq	$3, %rax
	jmp	.LBB66_193
.LBB66_236:
	movabsq	$0, %rax
.LBB66_208:                             # %if.else485
	xorq	$1, %rax
	leaq	8(%rax,%rax,2), %rax
	jmp	.LBB66_283
.LBB66_86:                              # %land.lhs.true131.if.else135_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB66_87:                              # %if.else135
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#88:                                # %land.lhs.true137
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	jne	.LBB66_89
.LBB66_287:                             # %sw.bb789
	movq	$1, %rbx
	jmp	.LBB66_242
.LBB66_89:                              # %if.else141
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB66_94
# BB#90:                                # %if.else141
	movl	which_alternative(%rip), %ecx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	je	.LBB66_94
# BB#91:                                # %land.lhs.true145
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
.LBB66_92:                              # %land.lhs.true145
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB66_141
# BB#93:                                # %if.else149thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB66_94:                              # %if.else149
	andq	%rbx, %rax
.LBB66_64:                              # %if.else59
	cmpq	$3, %rax
	jne	.LBB66_174
# BB#65:                                # %land.lhs.true61
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	jne	.LBB66_174
.LBB66_66:                              # %sw.bb791
	movq	$56, %rbx
	jmp	.LBB66_242
.LBB66_174:                             # %sw.bb792
	movq	$1, %rbx
	jmp	.LBB66_242
.LBB66_240:                             # %lor.lhs.false600
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB66_244
# BB#241:                               # %lor.lhs.false600
	movq	$3, %rbx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB66_242
.LBB66_244:                             # %if.else606
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB66_249
# BB#245:                               # %if.else606
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	ja	.LBB66_249
# BB#246:                               # %land.lhs.true612
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB66_141
# BB#247:                               # %lor.lhs.false615
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB66_248
.LBB66_141:                             # %sw.bb782
	movq	$2, %rbx
	jmp	.LBB66_242
.LBB66_248:                             # %lor.lhs.false615.if.else619_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB66_249:                             # %if.else619
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB66_254
# BB#250:                               # %if.else619
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	ja	.LBB66_254
# BB#251:                               # %land.lhs.true625
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB66_273
# BB#252:                               # %lor.lhs.false628
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB66_253
.LBB66_273:                             # %sw.bb786
	movq	$1, %rbx
.LBB66_242:                             # %return
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB66_253:                             # %lor.lhs.false628.if.else632_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB66_254:                             # %if.else632
	andq	%r15, %rax
	cmpq	$3, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rsi
	jne	.LBB66_256
# BB#255:                               # %if.else632
	movq	%rdx, %rsi
.LBB66_256:                             # %if.else632
	andq	%r15, %rcx
	cmpq	$2, %rcx
	sbbq	%rcx, %rcx
	testq	%rsi, %rcx
	jne	.LBB66_258
# BB#257:                               # %if.else632
	movq	%rdx, %rax
.LBB66_258:                             # %if.else632
	leaq	8(%rax,%rax,2), %rax
	jmp	.LBB66_283
.Ltmp620:
	.size	fpu_unit_conflict_cost, .Ltmp620-fpu_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI66_0:
	.quad	.LBB66_166
	.quad	.LBB66_151
	.quad	.LBB66_174
	.quad	.LBB66_166
	.quad	.LBB66_151
	.quad	.LBB66_174
	.quad	.LBB66_142
	.quad	.LBB66_131
	.quad	.LBB66_120
	.quad	.LBB66_106
	.quad	.LBB66_174
	.quad	.LBB66_120
	.quad	.LBB66_120
	.quad	.LBB66_95
	.quad	.LBB66_78
	.quad	.LBB66_174
	.quad	.LBB66_95
	.quad	.LBB66_95
	.quad	.LBB66_95
	.quad	.LBB66_95
	.quad	.LBB66_67
	.quad	.LBB66_51
	.quad	.LBB66_67
	.quad	.LBB66_51
	.quad	.LBB66_67
	.quad	.LBB66_51
	.quad	.LBB66_67
	.quad	.LBB66_51
	.quad	.LBB66_67
	.quad	.LBB66_51
	.quad	.LBB66_67
	.quad	.LBB66_51
	.quad	.LBB66_67
	.quad	.LBB66_51
	.quad	.LBB66_42
	.quad	.LBB66_174
	.quad	.LBB66_40
	.quad	.LBB66_42
	.quad	.LBB66_174
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
	.quad	.LBB66_40
.LJTI66_1:
	.quad	.LBB66_276
	.quad	.LBB66_274
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_276
	.quad	.LBB66_276
	.quad	.LBB66_274
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_259
	.quad	.LBB66_259
	.quad	.LBB66_259
	.quad	.LBB66_259
	.quad	.LBB66_274
	.quad	.LBB66_274
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_237
	.quad	.LBB66_174
	.quad	.LBB66_223
	.quad	.LBB66_223
	.quad	.LBB66_223
	.quad	.LBB66_223
	.quad	.LBB66_222
	.quad	.LBB66_222
	.quad	.LBB66_209
	.quad	.LBB66_198
	.quad	.LBB66_174
	.quad	.LBB66_222
	.quad	.LBB66_198
	.quad	.LBB66_222
	.quad	.LBB66_198
	.quad	.LBB66_222
	.quad	.LBB66_198
	.quad	.LBB66_222
	.quad	.LBB66_198
	.quad	.LBB66_196
	.quad	.LBB66_196
	.quad	.LBB66_196
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_196
	.quad	.LBB66_196
	.quad	.LBB66_196
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_196
	.quad	.LBB66_196
	.quad	.LBB66_196
	.quad	.LBB66_174
	.quad	.LBB66_174
	.quad	.LBB66_222
	.quad	.LBB66_222
	.quad	.LBB66_174
	.quad	.LBB66_222
	.quad	.LBB66_222
	.quad	.LBB66_174
	.quad	.LBB66_222
	.quad	.LBB66_222
	.quad	.LBB66_174
	.quad	.LBB66_222
	.quad	.LBB66_222
	.quad	.LBB66_174
	.quad	.LBB66_175
	.quad	.LBB66_175
	.quad	.LBB66_175
	.quad	.LBB66_175
	.quad	.LBB66_175
	.quad	.LBB66_175
.LJTI66_2:
	.quad	.LBB66_242
	.quad	.LBB66_141
	.quad	.LBB66_273
	.quad	.LBB66_273
	.quad	.LBB66_273
	.quad	.LBB66_273
	.quad	.LBB66_285
	.quad	.LBB66_286
	.quad	.LBB66_287
	.quad	.LBB66_141
	.quad	.LBB66_66
	.quad	.LBB66_174

	.text
	.align	16, 0x90
	.type	fpu_unit_blockage,@function
fpu_unit_blockage:                      # @fpu_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp625:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp626:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp627:
	.cfi_def_cfa_offset 32
.Ltmp628:
	.cfi_offset %rbx, -32
.Ltmp629:
	.cfi_offset %r14, -24
.Ltmp630:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB67_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB67_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB67_31
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB67_29
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$364, %rdx              # imm = 0x16C
	jg	.LBB67_25
# BB#5:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB67_10
# BB#6:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB67_174
# BB#7:                                 # %sw.bb769
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB67_174
# BB#8:                                 # %land.lhs.true773
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB67_174
# BB#9:                                 # %if.then779
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.fpu_unit_blockage, %rcx
	movq	$32215, %rdx            # imm = 0x7DD7
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB67_31:                              # %cond.end
	leaq	-618(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$3, %rdx
	jae	.LBB67_32
# BB#35:                                # %sw.bb5
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB67_37
# BB#36:                                # %sw.bb5
	movq	%rcx, %rdx
.LBB67_37:                              # %sw.bb5
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	sbbq	%rsi, %rsi
	testq	%rdx, %rsi
	jne	.LBB67_39
# BB#38:                                # %sw.bb5
	movq	%rcx, %rax
.LBB67_39:                              # %sw.bb5
	leaq	8(%rax,%rax,2), %rax
	jmp	.LBB67_283
.LBB67_29:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$56, %rax
	ja	.LBB67_174
# BB#30:                                # %cond.end
	jmpq	*.LJTI67_0(,%rax,8)
.LBB67_40:                              # %sw.bb12
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$7, %rax
	je	.LBB67_283
# BB#41:                                # %select.mid2
	movq	$10, %rax
	jmp	.LBB67_283
.LBB67_32:                              # %cond.end
	addq	$-621, %rax             # imm = 0xFFFFFFFFFFFFFD93
	andq	%rcx, %rax
	cmpq	$1, %rax
	ja	.LBB67_174
# BB#33:                                # %sw.bb
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	movq	$8, %rax
	je	.LBB67_283
# BB#34:                                # %select.mid
	movq	$11, %rax
	jmp	.LBB67_283
.LBB67_25:                              # %cond.end
	addq	$-365, %rax             # imm = 0xFFFFFFFFFFFFFE93
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$27, %rcx
	ja	.LBB67_174
# BB#26:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$267911679, %rax        # imm = 0xFF801FF
	jne	.LBB67_27
	jmp	.LBB67_174
.LBB67_10:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB67_23
# BB#11:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$36, %rax
	ja	.LBB67_174
# BB#12:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	je	.LBB67_13
.LBB67_27:                              # %sw.bb764
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$3, %rax
	je	.LBB67_283
# BB#28:                                # %select.mid8
	movq	$8, %rax
.LBB67_283:                             # %sw.epilog
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$11, %rcx
	ja	.LBB67_288
# BB#284:                               # %sw.epilog
	movq	$3, %rbx
	jmpq	*.LJTI67_2(,%rcx,8)
.LBB67_288:                             # %sw.default793
	movabsq	$.L.str, %rdi
	movabsq	$.L__FUNCTION__.fpu_unit_blockage, %rdx
	movq	$32262, %rsi            # imm = 0x7E06
	callq	fancy_abort
.LBB67_23:                              # %cond.end
	addq	$-90, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$94, %rax
	ja	.LBB67_174
# BB#24:                                # %cond.end
	jmpq	*.LJTI67_1(,%rax,8)
.LBB67_222:                             # %sw.bb523
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	je	.LBB67_181
	jmp	.LBB67_185
.LBB67_67:                              # %sw.bb72
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_74
# BB#68:                                # %land.lhs.true74
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_273
# BB#69:                                # %if.else78
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_74
# BB#70:                                # %land.lhs.true80
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#71:                                # %if.else84
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_74
# BB#72:                                # %land.lhs.true86
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB67_285
# BB#73:                                # %land.lhs.true86.if.else90thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_74:                              # %if.else90
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#75:                                # %land.lhs.true92
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_287
# BB#76:                                # %if.else96
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#77:                                # %land.lhs.true98
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB67_62
.LBB67_51:                              # %sw.bb30
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_58
# BB#52:                                # %land.lhs.true32
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_273
# BB#53:                                # %if.else36
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_58
# BB#54:                                # %land.lhs.true38
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#55:                                # %if.else41
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_58
# BB#56:                                # %land.lhs.true43
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB67_285
# BB#57:                                # %land.lhs.true43.if.else47thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_58:                              # %if.else47
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#59:                                # %land.lhs.true49
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_287
# BB#60:                                # %if.else53
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#61:                                # %land.lhs.true55
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	jmp	.LBB67_62
.LBB67_95:                              # %sw.bb162
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_102
# BB#96:                                # %land.lhs.true164
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_273
# BB#97:                                # %if.else168
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_102
# BB#98:                                # %land.lhs.true170
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#99:                                # %if.else174
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_102
# BB#100:                               # %land.lhs.true176
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB67_285
# BB#101:                               # %land.lhs.true176.if.else180thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_102:                             # %if.else180
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#103:                               # %land.lhs.true182
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_287
# BB#104:                               # %if.else186
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#105:                               # %land.lhs.true188
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	jmp	.LBB67_62
.LBB67_120:                             # %sw.bb252
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_127
# BB#121:                               # %land.lhs.true254
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_273
# BB#122:                               # %if.else258
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_127
# BB#123:                               # %land.lhs.true260
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#124:                               # %if.else264
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_127
# BB#125:                               # %land.lhs.true266
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB67_285
# BB#126:                               # %land.lhs.true266.if.else270thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_127:                             # %if.else270
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#128:                               # %land.lhs.true272
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_287
# BB#129:                               # %if.else276
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#130:                               # %land.lhs.true278
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
.LBB67_62:                              # %land.lhs.true55
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_141
# BB#63:                                # %if.else59
	movl	ix86_cpu(%rip), %eax
	jmp	.LBB67_64
.LBB67_166:                             # %sw.bb390
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_171
# BB#167:                               # %land.lhs.true392
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB67_273
# BB#168:                               # %if.else396
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_171
# BB#169:                               # %land.lhs.true398
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#170:                               # %land.lhs.true398.if.else402thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_171:                             # %if.else402
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#172:                               # %land.lhs.true404
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB67_287
# BB#173:                               # %if.else408
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	je	.LBB67_165
	jmp	.LBB67_174
.LBB67_151:                             # %sw.bb353
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$2, %rax
	jne	.LBB67_155
# BB#152:                               # %sw.bb353
	testq	%rbx, %rcx
	jne	.LBB67_155
# BB#153:                               # %land.lhs.true357
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB67_273
# BB#154:                               # %land.lhs.true357.if.else361_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB67_155:                             # %if.else361
	movq	%rax, %rdx
	andq	%rbx, %rdx
	cmpq	$2, %rdx
	jne	.LBB67_159
# BB#156:                               # %if.else361
	testq	%rbx, %rcx
	jne	.LBB67_159
# BB#157:                               # %land.lhs.true365
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#158:                               # %land.lhs.true365.if.else369_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB67_159:                             # %if.else369
	movq	%rax, %rdx
	andq	%rbx, %rdx
	cmpq	$3, %rdx
	jne	.LBB67_163
# BB#160:                               # %if.else369
	testq	%rbx, %rcx
	jne	.LBB67_163
# BB#161:                               # %land.lhs.true373
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB67_287
# BB#162:                               # %land.lhs.true373.if.else377_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB67_163:                             # %if.else377
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#164:                               # %if.else377
	testq	%rbx, %rcx
	jne	.LBB67_174
.LBB67_165:                             # %land.lhs.true381
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
.LBB67_140:                             # %land.lhs.true315
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_141
	jmp	.LBB67_174
.LBB67_42:                              # %sw.bb17
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %edx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rdx
	jne	.LBB67_44
# BB#43:                                # %sw.bb17
	testq	%rbx, %rax
	jne	.LBB67_44
.LBB67_286:                             # %sw.bb788
	movq	$68, %rbx
	jmp	.LBB67_242
.LBB67_13:                              # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	je	.LBB67_174
# BB#14:                                # %sw.bb751
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %edx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rdx
	jne	.LBB67_16
# BB#15:                                # %sw.bb751
	testq	%rbx, %rax
	je	.LBB67_273
.LBB67_16:                              # %if.else756
	testq	%rbx, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rsi
	jne	.LBB67_18
# BB#17:                                # %if.else756
	movq	%rcx, %rsi
.LBB67_18:                              # %if.else756
	cmpq	$3, %rdx
	movq	%rax, %rdx
	jne	.LBB67_20
# BB#19:                                # %if.else756
	movq	%rcx, %rdx
.LBB67_20:                              # %if.else756
	testq	%rsi, %rdx
	jne	.LBB67_22
# BB#21:                                # %if.else756
	movq	%rcx, %rax
.LBB67_22:                              # %if.else756
	leaq	8(%rax,%rax,2), %rax
	jmp	.LBB67_283
.LBB67_196:                             # %sw.bb462
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$4, %rax
	je	.LBB67_283
# BB#197:                               # %select.mid4
	movq	$8, %rax
	jmp	.LBB67_283
.LBB67_142:                             # %sw.bb324
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_147
# BB#143:                               # %land.lhs.true326
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB67_273
# BB#144:                               # %if.else330
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_147
# BB#145:                               # %land.lhs.true332
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#146:                               # %land.lhs.true332.if.else336thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_147:                             # %if.else336
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#148:                               # %land.lhs.true338
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB67_287
# BB#149:                               # %if.else342
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#150:                               # %land.lhs.true344
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	jmp	.LBB67_140
.LBB67_131:                             # %sw.bb295
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_136
# BB#132:                               # %land.lhs.true297
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB67_273
# BB#133:                               # %if.else301
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_136
# BB#134:                               # %land.lhs.true303
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#135:                               # %land.lhs.true303.if.else307thread-pre-split_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_136:                             # %if.else307
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#137:                               # %land.lhs.true309
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	je	.LBB67_287
# BB#138:                               # %if.else313
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#139:                               # %land.lhs.true315
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	jmp	.LBB67_140
.LBB67_106:                             # %sw.bb205
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_115
# BB#107:                               # %land.lhs.true207
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_273
# BB#108:                               # %if.else211
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_112
# BB#109:                               # %if.else211
	movl	which_alternative(%rip), %ecx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	je	.LBB67_112
# BB#110:                               # %land.lhs.true215
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#111:                               # %if.else219thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB67_112:                             # %if.else219
	movq	%rax, %rcx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	jne	.LBB67_115
# BB#113:                               # %land.lhs.true221
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	je	.LBB67_285
# BB#114:                               # %land.lhs.true221.if.else225_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_115:                             # %if.else225
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#116:                               # %land.lhs.true227
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_287
# BB#117:                               # %if.else231
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB67_94
# BB#118:                               # %if.else231
	movl	which_alternative(%rip), %ecx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	je	.LBB67_94
# BB#119:                               # %land.lhs.true235
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB67_92
.LBB67_78:                              # %sw.bb115
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_87
# BB#79:                                # %land.lhs.true117
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	je	.LBB67_273
# BB#80:                                # %if.else121
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_84
# BB#81:                                # %if.else121
	movl	which_alternative(%rip), %ecx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	je	.LBB67_84
# BB#82:                                # %land.lhs.true125
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_273
# BB#83:                                # %if.else129thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB67_84:                              # %if.else129
	movq	%rax, %rcx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	jne	.LBB67_87
# BB#85:                                # %land.lhs.true131
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	jne	.LBB67_86
.LBB67_285:                             # %sw.bb787
	movq	$37, %rbx
	jmp	.LBB67_242
.LBB67_44:                              # %if.else22
	testq	%rbx, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rsi
	jne	.LBB67_46
# BB#45:                                # %if.else22
	movq	%rcx, %rsi
.LBB67_46:                              # %if.else22
	cmpq	$3, %rdx
	movq	%rax, %rdx
	jne	.LBB67_48
# BB#47:                                # %if.else22
	movq	%rcx, %rdx
.LBB67_48:                              # %if.else22
	testq	%rsi, %rdx
	jne	.LBB67_50
# BB#49:                                # %if.else22
	movq	%rcx, %rax
.LBB67_50:                              # %if.else22
	orq	$10, %rax
	jmp	.LBB67_283
.LBB67_175:                             # %sw.bb419
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB67_180
# BB#176:                               # %sw.bb419
	testq	%r15, %rax
	jne	.LBB67_180
# BB#177:                               # %land.lhs.true423
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB67_242
# BB#178:                               # %lor.lhs.false426
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB67_242
# BB#179:                               # %lor.lhs.false426.if.else430_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB67_180:                             # %if.else430
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB67_185
.LBB67_181:                             # %if.else430
	testq	%r15, %rax
	jne	.LBB67_185
# BB#182:                               # %land.lhs.true434
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB67_141
# BB#183:                               # %lor.lhs.false437
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB67_141
# BB#184:                               # %lor.lhs.false437.if.else441_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB67_185:                             # %if.else441
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB67_190
# BB#186:                               # %if.else441
	testq	%r15, %rax
	jne	.LBB67_190
# BB#187:                               # %land.lhs.true445
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB67_273
# BB#188:                               # %lor.lhs.false448
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB67_273
# BB#189:                               # %lor.lhs.false448.if.else452_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB67_190:                             # %if.else452
	andq	%r15, %rcx
	cmpq	$3, %rcx
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rsi
	jne	.LBB67_192
# BB#191:                               # %if.else452
	movq	%rdx, %rsi
.LBB67_192:                             # %if.else452
	testq	%r15, %rax
.LBB67_193:                             # %if.else452
	movq	%rcx, %rax
	jne	.LBB67_195
# BB#194:                               # %if.else452
	movq	%rdx, %rax
.LBB67_195:                             # %if.else452
	testq	%rax, %rsi
	je	.LBB67_281
	jmp	.LBB67_282
.LBB67_198:                             # %sw.bb467
	movq	%r14, %rdi
	callq	extract_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_205
# BB#199:                               # %land.lhs.true469
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB67_141
# BB#200:                               # %lor.lhs.false472
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB67_141
# BB#201:                               # %if.else476
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_205
# BB#202:                               # %land.lhs.true478
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB67_273
# BB#203:                               # %lor.lhs.false481
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB67_273
# BB#204:                               # %lor.lhs.false481.if.else485_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_205:                             # %if.else485
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB67_207
# BB#206:
	movabsq	$0, %rax
	jmp	.LBB67_208
.LBB67_274:                             # %sw.bb703
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	movq	$3, %rax
	je	.LBB67_283
# BB#275:                               # %select.mid6
	movq	$11, %rax
	jmp	.LBB67_283
.LBB67_259:                             # %sw.bb644
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB67_264
# BB#260:                               # %sw.bb644
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB67_264
# BB#261:                               # %land.lhs.true652
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB67_242
# BB#262:                               # %lor.lhs.false655
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB67_242
# BB#263:                               # %lor.lhs.false655.if.else659_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB67_264:                             # %if.else659
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	je	.LBB67_265
	jmp	.LBB67_269
.LBB67_223:                             # %sw.bb554
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_228
# BB#224:                               # %sw.bb554
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jne	.LBB67_228
# BB#225:                               # %land.lhs.true558
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$3, %rbx
	je	.LBB67_242
# BB#226:                               # %lor.lhs.false561
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB67_242
# BB#227:                               # %if.else565thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB67_228:                             # %if.else565
	movq	%rax, %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jne	.LBB67_235
# BB#229:                               # %land.lhs.true567
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB67_141
# BB#230:                               # %lor.lhs.false570
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB67_141
# BB#231:                               # %if.else574
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_235
# BB#232:                               # %land.lhs.true576
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB67_273
# BB#233:                               # %lor.lhs.false579
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB67_273
# BB#234:                               # %lor.lhs.false579.if.else583_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_235:                             # %if.else583
	andq	%r15, %rax
	cmpq	$3, %rax
	jne	.LBB67_236
.LBB67_207:                             # %if.else485
	movabsq	$1, %rax
	jmp	.LBB67_208
.LBB67_276:                             # %sw.bb708
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rcx
	jne	.LBB67_269
.LBB67_265:                             # %if.else659
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB67_269
# BB#266:                               # %land.lhs.true667
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB67_141
# BB#267:                               # %lor.lhs.false670
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB67_141
# BB#268:                               # %lor.lhs.false670.if.else674_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB67_269:                             # %if.else674
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB67_278
# BB#270:                               # %if.else674
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	ja	.LBB67_278
# BB#271:                               # %land.lhs.true682
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB67_273
# BB#272:                               # %lor.lhs.false685
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB67_273
# BB#277:                               # %lor.lhs.false734.if.else738_crit_edge
	movl	ix86_cpu(%rip), %ecx
	movl	which_alternative(%rip), %eax
.LBB67_278:                             # %if.else738
	andq	%r15, %rcx
	cmpq	$3, %rcx
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rsi
	jne	.LBB67_280
# BB#279:                               # %if.else738
	movq	%rdx, %rsi
.LBB67_280:                             # %if.else738
	andq	%r15, %rax
	cmpq	$3, %rax
	sbbq	%rax, %rax
	testq	%rsi, %rax
	jne	.LBB67_282
.LBB67_281:                             # %if.else738
	movq	%rdx, %rcx
.LBB67_282:                             # %if.else738
	leaq	8(%rcx,%rcx,2), %rax
	jmp	.LBB67_283
.LBB67_237:                             # %sw.bb591
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$2, %rax
	jne	.LBB67_244
# BB#238:                               # %sw.bb591
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB67_244
# BB#239:                               # %land.lhs.true597
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB67_240
# BB#243:                               # %land.lhs.true603
	movl	which_alternative(%rip), %ecx
	cmpq	$1, %rcx
	movq	$3, %rbx
	je	.LBB67_242
	jmp	.LBB67_244
.LBB67_209:                             # %sw.bb492
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
	cmpq	$2, %rax
	jne	.LBB67_214
# BB#210:                               # %sw.bb492
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB67_214
# BB#211:                               # %land.lhs.true496
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB67_141
# BB#212:                               # %lor.lhs.false499
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB67_141
# BB#213:                               # %lor.lhs.false499.if.else503_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB67_214:                             # %if.else503
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB67_219
# BB#215:                               # %if.else503
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	jne	.LBB67_219
# BB#216:                               # %land.lhs.true507
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB67_273
# BB#217:                               # %lor.lhs.false510
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB67_273
# BB#218:                               # %lor.lhs.false510.if.else514_crit_edge
	movl	which_alternative(%rip), %ecx
	movl	ix86_cpu(%rip), %eax
.LBB67_219:                             # %if.else514
	andq	%r15, %rcx
	cmpq	$1, %rcx
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	movq	%rcx, %rsi
	jne	.LBB67_221
# BB#220:                               # %if.else514
	movq	%rdx, %rsi
.LBB67_221:                             # %if.else514
	andq	%r15, %rax
	cmpq	$3, %rax
	jmp	.LBB67_193
.LBB67_236:
	movabsq	$0, %rax
.LBB67_208:                             # %if.else485
	xorq	$1, %rax
	leaq	8(%rax,%rax,2), %rax
	jmp	.LBB67_283
.LBB67_86:                              # %land.lhs.true131.if.else135_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB67_87:                              # %if.else135
	andq	%rbx, %rax
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#88:                                # %land.lhs.true137
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$22, %rax
	jne	.LBB67_89
.LBB67_287:                             # %sw.bb789
	movq	$1, %rbx
	jmp	.LBB67_242
.LBB67_89:                              # %if.else141
	movl	ix86_cpu(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB67_94
# BB#90:                                # %if.else141
	movl	which_alternative(%rip), %ecx
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	je	.LBB67_94
# BB#91:                                # %land.lhs.true145
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
.LBB67_92:                              # %land.lhs.true145
	callq	mult_operator
	testq	%rbx, %rax
	jne	.LBB67_141
# BB#93:                                # %if.else149thread-pre-split
	movl	ix86_cpu(%rip), %eax
.LBB67_94:                              # %if.else149
	andq	%rbx, %rax
.LBB67_64:                              # %if.else59
	cmpq	$3, %rax
	jne	.LBB67_174
# BB#65:                                # %land.lhs.true61
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$26, %rax
	jne	.LBB67_174
.LBB67_66:                              # %sw.bb791
	movq	$56, %rbx
	jmp	.LBB67_242
.LBB67_174:                             # %sw.bb792
	movq	$1, %rbx
	jmp	.LBB67_242
.LBB67_240:                             # %lor.lhs.false600
	movq	%r14, %rdi
	callq	get_attr_memory
	movl	which_alternative(%rip), %ecx
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB67_244
# BB#241:                               # %lor.lhs.false600
	movq	$3, %rbx
	movq	%rcx, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB67_242
.LBB67_244:                             # %if.else606
	movl	ix86_cpu(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB67_249
# BB#245:                               # %if.else606
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	ja	.LBB67_249
# BB#246:                               # %land.lhs.true612
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	immediate_operand
	testq	%r15, %rax
	jne	.LBB67_141
# BB#247:                               # %lor.lhs.false615
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB67_248
.LBB67_141:                             # %sw.bb782
	movq	$2, %rbx
	jmp	.LBB67_242
.LBB67_248:                             # %lor.lhs.false615.if.else619_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB67_249:                             # %if.else619
	movq	%rax, %rdx
	andq	%r15, %rdx
	cmpq	$2, %rdx
	jne	.LBB67_254
# BB#250:                               # %if.else619
	movq	%rcx, %rdx
	andq	%r15, %rdx
	cmpq	$1, %rdx
	ja	.LBB67_254
# BB#251:                               # %land.lhs.true625
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB67_273
# BB#252:                               # %lor.lhs.false628
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB67_253
.LBB67_273:                             # %sw.bb786
	movq	$1, %rbx
.LBB67_242:                             # %return
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB67_253:                             # %lor.lhs.false628.if.else632_crit_edge
	movl	ix86_cpu(%rip), %eax
	movl	which_alternative(%rip), %ecx
.LBB67_254:                             # %if.else632
	andq	%r15, %rax
	cmpq	$3, %rax
	movabsq	$0, %rax
	movabsq	$1, %rdx
	movq	%rax, %rsi
	jne	.LBB67_256
# BB#255:                               # %if.else632
	movq	%rdx, %rsi
.LBB67_256:                             # %if.else632
	andq	%r15, %rcx
	cmpq	$2, %rcx
	sbbq	%rcx, %rcx
	testq	%rsi, %rcx
	jne	.LBB67_258
# BB#257:                               # %if.else632
	movq	%rdx, %rax
.LBB67_258:                             # %if.else632
	leaq	8(%rax,%rax,2), %rax
	jmp	.LBB67_283
.Ltmp631:
	.size	fpu_unit_blockage, .Ltmp631-fpu_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI67_0:
	.quad	.LBB67_166
	.quad	.LBB67_151
	.quad	.LBB67_174
	.quad	.LBB67_166
	.quad	.LBB67_151
	.quad	.LBB67_174
	.quad	.LBB67_142
	.quad	.LBB67_131
	.quad	.LBB67_120
	.quad	.LBB67_106
	.quad	.LBB67_174
	.quad	.LBB67_120
	.quad	.LBB67_120
	.quad	.LBB67_95
	.quad	.LBB67_78
	.quad	.LBB67_174
	.quad	.LBB67_95
	.quad	.LBB67_95
	.quad	.LBB67_95
	.quad	.LBB67_95
	.quad	.LBB67_67
	.quad	.LBB67_51
	.quad	.LBB67_67
	.quad	.LBB67_51
	.quad	.LBB67_67
	.quad	.LBB67_51
	.quad	.LBB67_67
	.quad	.LBB67_51
	.quad	.LBB67_67
	.quad	.LBB67_51
	.quad	.LBB67_67
	.quad	.LBB67_51
	.quad	.LBB67_67
	.quad	.LBB67_51
	.quad	.LBB67_42
	.quad	.LBB67_174
	.quad	.LBB67_40
	.quad	.LBB67_42
	.quad	.LBB67_174
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
	.quad	.LBB67_40
.LJTI67_1:
	.quad	.LBB67_276
	.quad	.LBB67_274
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_276
	.quad	.LBB67_276
	.quad	.LBB67_274
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_259
	.quad	.LBB67_259
	.quad	.LBB67_259
	.quad	.LBB67_259
	.quad	.LBB67_274
	.quad	.LBB67_274
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_237
	.quad	.LBB67_174
	.quad	.LBB67_223
	.quad	.LBB67_223
	.quad	.LBB67_223
	.quad	.LBB67_223
	.quad	.LBB67_222
	.quad	.LBB67_222
	.quad	.LBB67_209
	.quad	.LBB67_198
	.quad	.LBB67_174
	.quad	.LBB67_222
	.quad	.LBB67_198
	.quad	.LBB67_222
	.quad	.LBB67_198
	.quad	.LBB67_222
	.quad	.LBB67_198
	.quad	.LBB67_222
	.quad	.LBB67_198
	.quad	.LBB67_196
	.quad	.LBB67_196
	.quad	.LBB67_196
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_196
	.quad	.LBB67_196
	.quad	.LBB67_196
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_196
	.quad	.LBB67_196
	.quad	.LBB67_196
	.quad	.LBB67_174
	.quad	.LBB67_174
	.quad	.LBB67_222
	.quad	.LBB67_222
	.quad	.LBB67_174
	.quad	.LBB67_222
	.quad	.LBB67_222
	.quad	.LBB67_174
	.quad	.LBB67_222
	.quad	.LBB67_222
	.quad	.LBB67_174
	.quad	.LBB67_222
	.quad	.LBB67_222
	.quad	.LBB67_174
	.quad	.LBB67_175
	.quad	.LBB67_175
	.quad	.LBB67_175
	.quad	.LBB67_175
	.quad	.LBB67_175
	.quad	.LBB67_175
.LJTI67_2:
	.quad	.LBB67_242
	.quad	.LBB67_141
	.quad	.LBB67_273
	.quad	.LBB67_273
	.quad	.LBB67_273
	.quad	.LBB67_273
	.quad	.LBB67_285
	.quad	.LBB67_286
	.quad	.LBB67_287
	.quad	.LBB67_141
	.quad	.LBB67_66
	.quad	.LBB67_174

	.text
	.align	16, 0x90
	.type	pent_u_unit_conflict_cost,@function
pent_u_unit_conflict_cost:              # @pent_u_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp637:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp638:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp639:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp640:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp641:
	.cfi_def_cfa_offset 48
.Ltmp642:
	.cfi_offset %rbx, -40
.Ltmp643:
	.cfi_offset %r12, -32
.Ltmp644:
	.cfi_offset %r14, -24
.Ltmp645:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB68_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB68_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$56, %rdx
	jg	.LBB68_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB68_16
# BB#4:                                 # %sw.bb291
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB68_16
# BB#5:                                 # %land.lhs.true295
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB68_16
# BB#6:                                 # %if.then301
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_u_unit_conflict_cost, %rcx
	movq	$31504, %rdx            # imm = 0x7B10
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB68_7:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$108, %rdx
	jg	.LBB68_11
# BB#8:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$57, %rax
	jne	.LBB68_16
	jmp	.LBB68_9
.LBB68_11:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$185, %rdx
	jg	.LBB68_17
# BB#12:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$109, %rax
	je	.LBB68_9
# BB#13:                                # %cond.end
	cmpq	$110, %rax
	jne	.LBB68_16
# BB#14:                                # %sw.bb277
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB68_16
# BB#15:                                # %land.lhs.true279
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
	jmp	.LBB68_16
.LBB68_17:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$399, %rdx              # imm = 0x18F
	jg	.LBB68_48
# BB#18:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$334, %rdx              # imm = 0x14E
	jg	.LBB68_47
# BB#19:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$316, %rdx              # imm = 0x13C
	jg	.LBB68_46
# BB#20:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$295, %rdx              # imm = 0x127
	jg	.LBB68_41
# BB#21:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$214, %rdx
	jg	.LBB68_28
# BB#22:                                # %cond.end
	addq	$-186, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	ja	.LBB68_16
# BB#23:                                # %cond.end
	cmpq	$1, %rcx
	jne	.LBB68_24
	jmp	.LBB68_16
.LBB68_48:                              # %cond.end
	addq	$-400, %rax             # imm = 0xFFFFFFFFFFFFFE70
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$85, %rax
	ja	.LBB68_16
# BB#49:                                # %cond.end
	jmpq	*.LJTI68_0(,%rax,8)
.LBB68_50:                              # %sw.bb
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_53
# BB#51:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB68_53
# BB#52:                                # %land.lhs.true7
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
.LBB68_53:                              # %if.else
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_16
	jmp	.LBB68_54
.LBB68_9:                               # %sw.bb285
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB68_10
# BB#101:                               # %sw.bb285
	movabsq	$1, %rax
	jmp	.LBB68_102
.LBB68_10:
	movabsq	$0, %rax
.LBB68_102:                             # %sw.bb285
	addq	%rax, %rax
.LBB68_103:                             # %sw.epilog
	movq	$3, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB68_107
# BB#104:                               # %sw.epilog
	andq	%rcx, %rax
	cmpq	$2, %rax
	je	.LBB68_16
# BB#105:                               # %sw.epilog
	cmpq	$1, %rax
	jne	.LBB68_108
.LBB68_106:                             # %sw.bb304
	movq	$2, %rbx
	jmp	.LBB68_107
.LBB68_47:                              # %cond.end
	addq	$-335, %rax             # imm = 0xFFFFFFFFFFFFFEB1
	jmp	.LBB68_40
.LBB68_46:                              # %cond.end
	addq	$-317, %rax             # imm = 0xFFFFFFFFFFFFFEC3
.LBB68_40:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jb	.LBB68_43
	jmp	.LBB68_16
.LBB68_41:                              # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$296, %rax              # imm = 0x128
	jne	.LBB68_42
# BB#91:                                # %sw.bb165
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB68_16
# BB#92:                                # %land.lhs.true169
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_94
# BB#93:                                # %land.lhs.true172
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
.LBB68_94:                              # %if.else176
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB68_16
	jmp	.LBB68_45
.LBB68_86:                              # %sw.bb139
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB68_88
# BB#87:                                # %lor.lhs.false142
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB68_89
.LBB68_88:                              # %land.lhs.true145
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
.LBB68_89:                              # %if.else149
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB68_55
# BB#90:                                # %lor.lhs.false152
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB68_16
	jmp	.LBB68_55
.LBB68_28:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$242, %rdx
	jg	.LBB68_39
# BB#29:                                # %cond.end
	addq	$-215, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$21, %rax
	ja	.LBB68_16
# BB#30:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	testq	$46, %rsi
	je	.LBB68_31
# BB#95:                                # %sw.bb213
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB68_98
# BB#96:                                # %land.lhs.true216
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_98
# BB#97:                                # %land.lhs.true219
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
.LBB68_98:                              # %if.else223
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB68_16
	jmp	.LBB68_45
.LBB68_42:                              # %cond.end
	cmpq	$297, %rax              # imm = 0x129
	jne	.LBB68_16
.LBB68_43:                              # %sw.bb193
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_45
# BB#44:                                # %land.lhs.true196
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
.LBB68_45:                              # %if.else200
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_16
	jmp	.LBB68_55
.LBB68_39:                              # %cond.end
	addq	$-243, %rax
	jmp	.LBB68_40
.LBB68_57:                              # %sw.bb23
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_61
# BB#58:                                # %sw.bb23
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB68_61
# BB#59:                                # %land.lhs.true28
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB68_61
# BB#60:                                # %land.lhs.true31
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
.LBB68_61:                              # %if.else35
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_16
# BB#62:                                # %if.else35
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB68_16
.LBB68_54:                              # %land.lhs.true12
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB68_55
	jmp	.LBB68_16
.LBB68_31:                              # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$3211264, %rdx          # imm = 0x310000
	je	.LBB68_32
.LBB68_24:                              # %sw.bb263
	movq	%r14, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
# BB#25:                                # %if.else267
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_106
# BB#26:                                # %lor.lhs.false270
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB68_27
# BB#99:                                # %lor.lhs.false270
	movabsq	$1, %rax
	jmp	.LBB68_100
.LBB68_74:                              # %sw.bb93
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB68_16
# BB#75:                                # %land.lhs.true95
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB68_78
# BB#76:                                # %land.lhs.true99
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB68_80
# BB#77:                                # %land.lhs.true99.lor.lhs.false102_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB68_78:                              # %lor.lhs.false102
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB68_80
# BB#79:                                # %lor.lhs.false106
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB68_81
.LBB68_80:                              # %land.lhs.true109
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
.LBB68_81:                              # %if.else113
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB68_16
# BB#82:                                # %land.lhs.true115
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB68_85
# BB#83:                                # %land.lhs.true119
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB68_55
# BB#84:                                # %land.lhs.true119.lor.lhs.false122_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB68_85:                              # %lor.lhs.false122
	movq	%rax, %rcx
	jmp	.LBB68_72
.LBB68_63:                              # %sw.bb53
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB68_66
# BB#64:                                # %land.lhs.true55
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB68_68
# BB#65:                                # %land.lhs.true55.lor.lhs.false58_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB68_66:                              # %lor.lhs.false58
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB68_68
# BB#67:                                # %lor.lhs.false62
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB68_69
.LBB68_68:                              # %land.lhs.true65
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB68_107
.LBB68_69:                              # %if.else69
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB68_72
# BB#70:                                # %land.lhs.true73
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB68_55
# BB#71:                                # %land.lhs.true73.lor.lhs.false76_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB68_72:                              # %lor.lhs.false76
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB68_55
# BB#73:                                # %lor.lhs.false80
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	jmp	.LBB68_38
.LBB68_27:
	movabsq	$0, %rax
.LBB68_100:                             # %lor.lhs.false270
	xorq	$1, %rax
	incq	%rax
	jmp	.LBB68_103
.LBB68_32:                              # %cond.end
	testq	%rax, %rax
	jne	.LBB68_16
# BB#33:                                # %sw.bb239
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB68_16
# BB#34:                                # %land.lhs.true241
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	$3, %rbx
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB68_36
# BB#35:                                # %land.lhs.true244
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB68_107
.LBB68_36:                              # %if.else248
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB68_16
# BB#37:                                # %land.lhs.true250
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
.LBB68_38:                              # %land.lhs.true250
	testq	%r15, %rax
	jne	.LBB68_16
.LBB68_55:                              # %land.lhs.true15
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB68_106
# BB#56:                                # %lor.lhs.false
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB68_106
.LBB68_16:                              # %sw.bb305
	movq	$1, %rbx
.LBB68_107:                             # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB68_108:                             # %sw.default306
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_u_unit_conflict_cost, %rcx
	movq	$31524, %rsi            # imm = 0x7B24
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp646:
	.size	pent_u_unit_conflict_cost, .Ltmp646-pent_u_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI68_0:
	.quad	.LBB68_9
	.quad	.LBB68_16
	.quad	.LBB68_16
	.quad	.LBB68_86
	.quad	.LBB68_86
	.quad	.LBB68_16
	.quad	.LBB68_16
	.quad	.LBB68_16
	.quad	.LBB68_86
	.quad	.LBB68_74
	.quad	.LBB68_86
	.quad	.LBB68_63
	.quad	.LBB68_86
	.quad	.LBB68_86
	.quad	.LBB68_86
	.quad	.LBB68_86
	.quad	.LBB68_86
	.quad	.LBB68_86
	.quad	.LBB68_57
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_16
	.quad	.LBB68_16
	.quad	.LBB68_16
	.quad	.LBB68_57
	.quad	.LBB68_57
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_16
	.quad	.LBB68_16
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50
	.quad	.LBB68_50

	.text
	.align	16, 0x90
	.type	pent_u_unit_blockage,@function
pent_u_unit_blockage:                   # @pent_u_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp652:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp653:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp654:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp655:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp656:
	.cfi_def_cfa_offset 48
.Ltmp657:
	.cfi_offset %rbx, -40
.Ltmp658:
	.cfi_offset %r12, -32
.Ltmp659:
	.cfi_offset %r14, -24
.Ltmp660:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB69_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB69_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$56, %rdx
	jg	.LBB69_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB69_16
# BB#4:                                 # %sw.bb291
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB69_16
# BB#5:                                 # %land.lhs.true295
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB69_16
# BB#6:                                 # %if.then301
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_u_unit_blockage, %rcx
	movq	$31195, %rdx            # imm = 0x79DB
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB69_7:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$108, %rdx
	jg	.LBB69_11
# BB#8:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$57, %rax
	jne	.LBB69_16
	jmp	.LBB69_9
.LBB69_11:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$185, %rdx
	jg	.LBB69_17
# BB#12:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$109, %rax
	je	.LBB69_9
# BB#13:                                # %cond.end
	cmpq	$110, %rax
	jne	.LBB69_16
# BB#14:                                # %sw.bb277
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB69_16
# BB#15:                                # %land.lhs.true279
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%rbx, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
	jmp	.LBB69_16
.LBB69_17:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$399, %rdx              # imm = 0x18F
	jg	.LBB69_48
# BB#18:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$334, %rdx              # imm = 0x14E
	jg	.LBB69_47
# BB#19:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$316, %rdx              # imm = 0x13C
	jg	.LBB69_46
# BB#20:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$295, %rdx              # imm = 0x127
	jg	.LBB69_41
# BB#21:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$214, %rdx
	jg	.LBB69_28
# BB#22:                                # %cond.end
	addq	$-186, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	ja	.LBB69_16
# BB#23:                                # %cond.end
	cmpq	$1, %rcx
	jne	.LBB69_24
	jmp	.LBB69_16
.LBB69_48:                              # %cond.end
	addq	$-400, %rax             # imm = 0xFFFFFFFFFFFFFE70
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$85, %rax
	ja	.LBB69_16
# BB#49:                                # %cond.end
	jmpq	*.LJTI69_0(,%rax,8)
.LBB69_50:                              # %sw.bb
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_53
# BB#51:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB69_53
# BB#52:                                # %land.lhs.true7
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
.LBB69_53:                              # %if.else
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_16
	jmp	.LBB69_54
.LBB69_9:                               # %sw.bb285
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	jne	.LBB69_10
# BB#101:                               # %sw.bb285
	movabsq	$1, %rax
	jmp	.LBB69_102
.LBB69_10:
	movabsq	$0, %rax
.LBB69_102:                             # %sw.bb285
	addq	%rax, %rax
.LBB69_103:                             # %sw.epilog
	movq	$3, %rbx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB69_107
# BB#104:                               # %sw.epilog
	andq	%rcx, %rax
	cmpq	$2, %rax
	je	.LBB69_16
# BB#105:                               # %sw.epilog
	cmpq	$1, %rax
	jne	.LBB69_108
.LBB69_106:                             # %sw.bb304
	movq	$2, %rbx
	jmp	.LBB69_107
.LBB69_47:                              # %cond.end
	addq	$-335, %rax             # imm = 0xFFFFFFFFFFFFFEB1
	jmp	.LBB69_40
.LBB69_46:                              # %cond.end
	addq	$-317, %rax             # imm = 0xFFFFFFFFFFFFFEC3
.LBB69_40:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jb	.LBB69_43
	jmp	.LBB69_16
.LBB69_41:                              # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$296, %rax              # imm = 0x128
	jne	.LBB69_42
# BB#91:                                # %sw.bb165
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB69_16
# BB#92:                                # %land.lhs.true169
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_94
# BB#93:                                # %land.lhs.true172
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
.LBB69_94:                              # %if.else176
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB69_16
	jmp	.LBB69_45
.LBB69_86:                              # %sw.bb139
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB69_88
# BB#87:                                # %lor.lhs.false142
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB69_89
.LBB69_88:                              # %land.lhs.true145
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
.LBB69_89:                              # %if.else149
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB69_55
# BB#90:                                # %lor.lhs.false152
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB69_16
	jmp	.LBB69_55
.LBB69_28:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$242, %rdx
	jg	.LBB69_39
# BB#29:                                # %cond.end
	addq	$-215, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$21, %rax
	ja	.LBB69_16
# BB#30:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	testq	$46, %rsi
	je	.LBB69_31
# BB#95:                                # %sw.bb213
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB69_98
# BB#96:                                # %land.lhs.true216
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_98
# BB#97:                                # %land.lhs.true219
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
.LBB69_98:                              # %if.else223
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB69_16
	jmp	.LBB69_45
.LBB69_42:                              # %cond.end
	cmpq	$297, %rax              # imm = 0x129
	jne	.LBB69_16
.LBB69_43:                              # %sw.bb193
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_45
# BB#44:                                # %land.lhs.true196
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
.LBB69_45:                              # %if.else200
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_16
	jmp	.LBB69_55
.LBB69_39:                              # %cond.end
	addq	$-243, %rax
	jmp	.LBB69_40
.LBB69_57:                              # %sw.bb23
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_61
# BB#58:                                # %sw.bb23
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB69_61
# BB#59:                                # %land.lhs.true28
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB69_61
# BB#60:                                # %land.lhs.true31
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
.LBB69_61:                              # %if.else35
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_16
# BB#62:                                # %if.else35
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB69_16
.LBB69_54:                              # %land.lhs.true12
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB69_55
	jmp	.LBB69_16
.LBB69_31:                              # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$3211264, %rdx          # imm = 0x310000
	je	.LBB69_32
.LBB69_24:                              # %sw.bb263
	movq	%r14, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
# BB#25:                                # %if.else267
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_106
# BB#26:                                # %lor.lhs.false270
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB69_27
# BB#99:                                # %lor.lhs.false270
	movabsq	$1, %rax
	jmp	.LBB69_100
.LBB69_74:                              # %sw.bb93
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB69_16
# BB#75:                                # %land.lhs.true95
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB69_78
# BB#76:                                # %land.lhs.true99
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB69_80
# BB#77:                                # %land.lhs.true99.lor.lhs.false102_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB69_78:                              # %lor.lhs.false102
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB69_80
# BB#79:                                # %lor.lhs.false106
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB69_81
.LBB69_80:                              # %land.lhs.true109
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
.LBB69_81:                              # %if.else113
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB69_16
# BB#82:                                # %land.lhs.true115
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB69_85
# BB#83:                                # %land.lhs.true119
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB69_55
# BB#84:                                # %land.lhs.true119.lor.lhs.false122_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB69_85:                              # %lor.lhs.false122
	movq	%rax, %rcx
	jmp	.LBB69_72
.LBB69_63:                              # %sw.bb53
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB69_66
# BB#64:                                # %land.lhs.true55
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB69_68
# BB#65:                                # %land.lhs.true55.lor.lhs.false58_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB69_66:                              # %lor.lhs.false58
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB69_68
# BB#67:                                # %lor.lhs.false62
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB69_69
.LBB69_68:                              # %land.lhs.true65
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB69_107
.LBB69_69:                              # %if.else69
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB69_72
# BB#70:                                # %land.lhs.true73
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB69_55
# BB#71:                                # %land.lhs.true73.lor.lhs.false76_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB69_72:                              # %lor.lhs.false76
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB69_55
# BB#73:                                # %lor.lhs.false80
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	jmp	.LBB69_38
.LBB69_27:
	movabsq	$0, %rax
.LBB69_100:                             # %lor.lhs.false270
	xorq	$1, %rax
	incq	%rax
	jmp	.LBB69_103
.LBB69_32:                              # %cond.end
	testq	%rax, %rax
	jne	.LBB69_16
# BB#33:                                # %sw.bb239
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB69_16
# BB#34:                                # %land.lhs.true241
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	$3, %rbx
	movq	%rax, %rdi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB69_36
# BB#35:                                # %land.lhs.true244
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB69_107
.LBB69_36:                              # %if.else248
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB69_16
# BB#37:                                # %land.lhs.true250
	movq	recog_data+16(%rip), %rax
	movq	$3, %rsi
	movq	%rax, %rdi
	callq	incdec_operand
.LBB69_38:                              # %land.lhs.true250
	testq	%r15, %rax
	jne	.LBB69_16
.LBB69_55:                              # %land.lhs.true15
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB69_106
# BB#56:                                # %lor.lhs.false
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB69_106
.LBB69_16:                              # %sw.bb305
	movq	$1, %rbx
.LBB69_107:                             # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB69_108:                             # %sw.default306
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_u_unit_blockage, %rcx
	movq	$31215, %rsi            # imm = 0x79EF
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp661:
	.size	pent_u_unit_blockage, .Ltmp661-pent_u_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI69_0:
	.quad	.LBB69_9
	.quad	.LBB69_16
	.quad	.LBB69_16
	.quad	.LBB69_86
	.quad	.LBB69_86
	.quad	.LBB69_16
	.quad	.LBB69_16
	.quad	.LBB69_16
	.quad	.LBB69_86
	.quad	.LBB69_74
	.quad	.LBB69_86
	.quad	.LBB69_63
	.quad	.LBB69_86
	.quad	.LBB69_86
	.quad	.LBB69_86
	.quad	.LBB69_86
	.quad	.LBB69_86
	.quad	.LBB69_86
	.quad	.LBB69_57
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_16
	.quad	.LBB69_16
	.quad	.LBB69_16
	.quad	.LBB69_57
	.quad	.LBB69_57
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_16
	.quad	.LBB69_16
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50
	.quad	.LBB69_50

	.text
	.align	16, 0x90
	.type	pent_uv_unit_conflict_cost,@function
pent_uv_unit_conflict_cost:             # @pent_uv_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp667:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp668:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp669:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp670:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp671:
	.cfi_def_cfa_offset 48
.Ltmp672:
	.cfi_offset %rbx, -40
.Ltmp673:
	.cfi_offset %r12, -32
.Ltmp674:
	.cfi_offset %r14, -24
.Ltmp675:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB70_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB70_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$634, %rdx              # imm = 0x27A
	jg	.LBB70_10
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$42, %rdx
	jg	.LBB70_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB70_107
# BB#5:                                 # %sw.bb469
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB70_107
# BB#6:                                 # %land.lhs.true473
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB70_107
# BB#7:                                 # %if.then479
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_uv_unit_conflict_cost, %rcx
	movq	$30886, %rdx            # imm = 0x78A6
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB70_10:                              # %cond.end
	addq	$-635, %rax             # imm = 0xFFFFFFFFFFFFFD85
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB70_107
# BB#11:                                # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB70_107
# BB#12:                                # %land.lhs.true
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_14
# BB#13:                                # %land.lhs.true7
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_14:                              # %if.else
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB70_107
	jmp	.LBB70_15
.LBB70_8:                               # %cond.end
	addq	$-43, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$475, %rax              # imm = 0x1DB
	ja	.LBB70_107
# BB#9:                                 # %cond.end
	jmpq	*.LJTI70_0(,%rax,8)
.LBB70_97:                              # %sw.bb421
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_15
# BB#98:                                # %land.lhs.true424
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	jne	.LBB70_15
	jmp	.LBB70_116
.LBB70_18:                              # %sw.bb22
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_21
# BB#19:                                # %land.lhs.true25
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB70_21
# BB#20:                                # %land.lhs.true27
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_21:                              # %if.else31
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_107
	jmp	.LBB70_22
.LBB70_108:                             # %sw.bb463
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB70_109
# BB#110:                               # %sw.bb463
	movabsq	$1, %rax
	jmp	.LBB70_111
.LBB70_52:                              # %sw.bb163
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB70_54
# BB#53:                                # %lor.lhs.false166
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB70_55
.LBB70_54:                              # %land.lhs.true169
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_55:                              # %if.else173
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB70_16
# BB#56:                                # %lor.lhs.false176
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB70_16
	jmp	.LBB70_107
.LBB70_109:
	movabsq	$0, %rax
.LBB70_111:                             # %sw.bb463
	addq	%rax, %rax
.LBB70_112:                             # %sw.epilog
	movq	$3, %rbx
	testq	%r15, %rax
	je	.LBB70_116
# BB#113:                               # %sw.epilog
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB70_107
# BB#114:                               # %sw.epilog
	cmpq	$1, %rax
	je	.LBB70_115
# BB#117:                               # %sw.default484
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_uv_unit_conflict_cost, %rcx
	movq	$30906, %rsi            # imm = 0x78BA
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB70_99:                              # %sw.bb441
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
# BB#100:                               # %if.else445
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_115
# BB#101:                               # %lor.lhs.false448
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB70_102
# BB#103:                               # %lor.lhs.false448
	movabsq	$1, %rax
	jmp	.LBB70_104
.LBB70_86:                              # %sw.bb349
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB70_89
# BB#87:                                # %land.lhs.true352
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_89
# BB#88:                                # %land.lhs.true355
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_89:                              # %if.else359
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB70_69
.LBB70_77:                              # %sw.bb299
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB70_80
# BB#78:                                # %land.lhs.true302
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_80
# BB#79:                                # %land.lhs.true305
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_80:                              # %if.else309
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	jmp	.LBB70_69
.LBB70_65:                              # %sw.bb249
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB70_68
# BB#66:                                # %land.lhs.true252
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_68
# BB#67:                                # %land.lhs.true255
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_68:                              # %if.else259
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	jmp	.LBB70_69
.LBB70_90:                              # %sw.bb375
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB70_93
# BB#91:                                # %land.lhs.true378
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_93
# BB#92:                                # %land.lhs.true381
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_93:                              # %if.else385
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB70_69:                              # %if.else259
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB70_107
	jmp	.LBB70_15
.LBB70_94:                              # %sw.bb401
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB70_96
# BB#95:                                # %land.lhs.true404
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_96:                              # %if.else408
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB70_16
	jmp	.LBB70_107
.LBB70_23:                              # %sw.bb47
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_27
# BB#24:                                # %sw.bb47
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB70_27
# BB#25:                                # %land.lhs.true52
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB70_27
# BB#26:                                # %land.lhs.true55
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_27:                              # %if.else59
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_107
# BB#28:                                # %if.else59
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB70_107
.LBB70_22:                              # %land.lhs.true34
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB70_16
	jmp	.LBB70_107
.LBB70_105:                             # %sw.bb455
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB70_107
# BB#106:                               # %land.lhs.true457
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
	jmp	.LBB70_107
.LBB70_57:                              # %sw.bb189
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB70_107
# BB#58:                                # %land.lhs.true193
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_60
# BB#59:                                # %land.lhs.true196
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_60:                              # %if.else200
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB70_15
	jmp	.LBB70_107
.LBB70_81:                              # %sw.bb325
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB70_107
# BB#82:                                # %land.lhs.true327
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	movq	$3, %rbx
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB70_84
# BB#83:                                # %land.lhs.true330
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB70_116
.LBB70_84:                              # %if.else334
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB70_107
# BB#85:                                # %land.lhs.true336
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	jmp	.LBB70_75
.LBB70_70:                              # %sw.bb275
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB70_107
# BB#71:                                # %land.lhs.true277
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB70_73
# BB#72:                                # %land.lhs.true280
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_73:                              # %if.else284
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB70_107
# BB#74:                                # %land.lhs.true286
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
.LBB70_75:                              # %land.lhs.true286
	callq	incdec_operand
	jmp	.LBB70_76
.LBB70_61:                              # %sw.bb217
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB70_107
# BB#62:                                # %land.lhs.true223
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_64
# BB#63:                                # %land.lhs.true226
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_64:                              # %if.else230
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB70_107
.LBB70_15:                              # %land.lhs.true11
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_107
	jmp	.LBB70_16
.LBB70_40:                              # %sw.bb117
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB70_107
# BB#41:                                # %land.lhs.true119
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB70_44
# BB#42:                                # %land.lhs.true123
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB70_46
# BB#43:                                # %land.lhs.true123.lor.lhs.false126_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB70_44:                              # %lor.lhs.false126
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB70_46
# BB#45:                                # %lor.lhs.false130
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB70_47
.LBB70_46:                              # %land.lhs.true133
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_47:                              # %if.else137
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB70_107
# BB#48:                                # %land.lhs.true139
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB70_51
# BB#49:                                # %land.lhs.true143
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB70_16
# BB#50:                                # %land.lhs.true143.lor.lhs.false146_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB70_51:                              # %lor.lhs.false146
	movq	%rax, %rcx
	jmp	.LBB70_38
.LBB70_29:                              # %sw.bb77
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB70_32
# BB#30:                                # %land.lhs.true79
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB70_34
# BB#31:                                # %land.lhs.true79.lor.lhs.false82_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB70_32:                              # %lor.lhs.false82
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB70_34
# BB#33:                                # %lor.lhs.false86
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB70_35
.LBB70_34:                              # %land.lhs.true89
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB70_116
.LBB70_35:                              # %if.else93
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB70_38
# BB#36:                                # %land.lhs.true97
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB70_16
# BB#37:                                # %land.lhs.true97.lor.lhs.false100_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB70_38:                              # %lor.lhs.false100
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB70_16
# BB#39:                                # %lor.lhs.false104
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
.LBB70_76:                              # %land.lhs.true286
	testq	%r15, %rax
	jne	.LBB70_107
.LBB70_16:                              # %land.lhs.true14
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB70_115
# BB#17:                                # %lor.lhs.false
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB70_107
.LBB70_115:                             # %sw.bb482
	movq	$2, %rbx
	jmp	.LBB70_116
.LBB70_107:                             # %sw.bb483
	movq	$1, %rbx
.LBB70_116:                             # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB70_102:
	movabsq	$0, %rax
.LBB70_104:                             # %lor.lhs.false448
	xorq	$1, %rax
	incq	%rax
	jmp	.LBB70_112
.Ltmp676:
	.size	pent_uv_unit_conflict_cost, .Ltmp676-pent_uv_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI70_0:
	.quad	.LBB70_108
	.quad	.LBB70_108
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_108
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_105
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_105
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_99
	.quad	.LBB70_97
	.quad	.LBB70_99
	.quad	.LBB70_99
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_94
	.quad	.LBB70_90
	.quad	.LBB70_90
	.quad	.LBB70_90
	.quad	.LBB70_90
	.quad	.LBB70_94
	.quad	.LBB70_94
	.quad	.LBB70_86
	.quad	.LBB70_86
	.quad	.LBB70_86
	.quad	.LBB70_86
	.quad	.LBB70_86
	.quad	.LBB70_86
	.quad	.LBB70_81
	.quad	.LBB70_77
	.quad	.LBB70_77
	.quad	.LBB70_77
	.quad	.LBB70_77
	.quad	.LBB70_77
	.quad	.LBB70_70
	.quad	.LBB70_65
	.quad	.LBB70_65
	.quad	.LBB70_65
	.quad	.LBB70_77
	.quad	.LBB70_65
	.quad	.LBB70_65
	.quad	.LBB70_65
	.quad	.LBB70_97
	.quad	.LBB70_107
	.quad	.LBB70_99
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_99
	.quad	.LBB70_99
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_61
	.quad	.LBB70_97
	.quad	.LBB70_57
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_57
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_108
	.quad	.LBB70_97
	.quad	.LBB70_108
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_108
	.quad	.LBB70_97
	.quad	.LBB70_108
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_97
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_108
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_107
	.quad	.LBB70_108
	.quad	.LBB70_52
	.quad	.LBB70_52
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_52
	.quad	.LBB70_40
	.quad	.LBB70_52
	.quad	.LBB70_29
	.quad	.LBB70_52
	.quad	.LBB70_52
	.quad	.LBB70_52
	.quad	.LBB70_52
	.quad	.LBB70_52
	.quad	.LBB70_52
	.quad	.LBB70_23
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_23
	.quad	.LBB70_23
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_18
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_107
	.quad	.LBB70_97

	.text
	.align	16, 0x90
	.type	pent_uv_unit_blockage,@function
pent_uv_unit_blockage:                  # @pent_uv_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp682:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp683:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp684:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp685:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp686:
	.cfi_def_cfa_offset 48
.Ltmp687:
	.cfi_offset %rbx, -40
.Ltmp688:
	.cfi_offset %r12, -32
.Ltmp689:
	.cfi_offset %r14, -24
.Ltmp690:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB71_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB71_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$634, %rdx              # imm = 0x27A
	jg	.LBB71_10
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$42, %rdx
	jg	.LBB71_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB71_107
# BB#5:                                 # %sw.bb469
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB71_107
# BB#6:                                 # %land.lhs.true473
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB71_107
# BB#7:                                 # %if.then479
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_uv_unit_blockage, %rcx
	movq	$30374, %rdx            # imm = 0x76A6
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB71_10:                              # %cond.end
	addq	$-635, %rax             # imm = 0xFFFFFFFFFFFFFD85
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$1, %rax
	ja	.LBB71_107
# BB#11:                                # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB71_107
# BB#12:                                # %land.lhs.true
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_14
# BB#13:                                # %land.lhs.true7
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_14:                              # %if.else
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB71_107
	jmp	.LBB71_15
.LBB71_8:                               # %cond.end
	addq	$-43, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$475, %rax              # imm = 0x1DB
	ja	.LBB71_107
# BB#9:                                 # %cond.end
	jmpq	*.LJTI71_0(,%rax,8)
.LBB71_97:                              # %sw.bb421
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_15
# BB#98:                                # %land.lhs.true424
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	jne	.LBB71_15
	jmp	.LBB71_116
.LBB71_18:                              # %sw.bb22
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_21
# BB#19:                                # %land.lhs.true25
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB71_21
# BB#20:                                # %land.lhs.true27
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_21:                              # %if.else31
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_107
	jmp	.LBB71_22
.LBB71_108:                             # %sw.bb463
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB71_109
# BB#110:                               # %sw.bb463
	movabsq	$1, %rax
	jmp	.LBB71_111
.LBB71_52:                              # %sw.bb163
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB71_54
# BB#53:                                # %lor.lhs.false166
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB71_55
.LBB71_54:                              # %land.lhs.true169
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_55:                              # %if.else173
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB71_16
# BB#56:                                # %lor.lhs.false176
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB71_16
	jmp	.LBB71_107
.LBB71_109:
	movabsq	$0, %rax
.LBB71_111:                             # %sw.bb463
	addq	%rax, %rax
.LBB71_112:                             # %sw.epilog
	movq	$3, %rbx
	testq	%r15, %rax
	je	.LBB71_116
# BB#113:                               # %sw.epilog
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB71_107
# BB#114:                               # %sw.epilog
	cmpq	$1, %rax
	je	.LBB71_115
# BB#117:                               # %sw.default484
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.pent_uv_unit_blockage, %rcx
	movq	$30394, %rsi            # imm = 0x76BA
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB71_99:                              # %sw.bb441
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
# BB#100:                               # %if.else445
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_115
# BB#101:                               # %lor.lhs.false448
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB71_102
# BB#103:                               # %lor.lhs.false448
	movabsq	$1, %rax
	jmp	.LBB71_104
.LBB71_86:                              # %sw.bb349
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB71_89
# BB#87:                                # %land.lhs.true352
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_89
# BB#88:                                # %land.lhs.true355
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_89:                              # %if.else359
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB71_69
.LBB71_77:                              # %sw.bb299
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB71_80
# BB#78:                                # %land.lhs.true302
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_80
# BB#79:                                # %land.lhs.true305
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_80:                              # %if.else309
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	jmp	.LBB71_69
.LBB71_65:                              # %sw.bb249
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB71_68
# BB#66:                                # %land.lhs.true252
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_68
# BB#67:                                # %land.lhs.true255
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_68:                              # %if.else259
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	jmp	.LBB71_69
.LBB71_90:                              # %sw.bb375
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB71_93
# BB#91:                                # %land.lhs.true378
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_93
# BB#92:                                # %land.lhs.true381
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_93:                              # %if.else385
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB71_69:                              # %if.else259
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB71_107
	jmp	.LBB71_15
.LBB71_94:                              # %sw.bb401
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB71_96
# BB#95:                                # %land.lhs.true404
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_96:                              # %if.else408
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB71_16
	jmp	.LBB71_107
.LBB71_23:                              # %sw.bb47
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_27
# BB#24:                                # %sw.bb47
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB71_27
# BB#25:                                # %land.lhs.true52
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	je	.LBB71_27
# BB#26:                                # %land.lhs.true55
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_27:                              # %if.else59
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_107
# BB#28:                                # %if.else59
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB71_107
.LBB71_22:                              # %land.lhs.true34
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const_int_operand
	testq	%r15, %rax
	jne	.LBB71_16
	jmp	.LBB71_107
.LBB71_105:                             # %sw.bb455
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB71_107
# BB#106:                               # %land.lhs.true457
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
	jmp	.LBB71_107
.LBB71_57:                              # %sw.bb189
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB71_107
# BB#58:                                # %land.lhs.true193
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_60
# BB#59:                                # %land.lhs.true196
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_60:                              # %if.else200
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB71_15
	jmp	.LBB71_107
.LBB71_81:                              # %sw.bb325
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB71_107
# BB#82:                                # %land.lhs.true327
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	movq	$3, %rbx
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB71_84
# BB#83:                                # %land.lhs.true330
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	je	.LBB71_116
.LBB71_84:                              # %if.else334
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB71_107
# BB#85:                                # %land.lhs.true336
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	jmp	.LBB71_75
.LBB71_70:                              # %sw.bb275
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB71_107
# BB#71:                                # %land.lhs.true277
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	jne	.LBB71_73
# BB#72:                                # %land.lhs.true280
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_73:                              # %if.else284
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB71_107
# BB#74:                                # %land.lhs.true286
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
.LBB71_75:                              # %land.lhs.true286
	callq	incdec_operand
	jmp	.LBB71_76
.LBB71_61:                              # %sw.bb217
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB71_107
# BB#62:                                # %land.lhs.true223
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_64
# BB#63:                                # %land.lhs.true226
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_64:                              # %if.else230
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	ja	.LBB71_107
.LBB71_15:                              # %land.lhs.true11
	movq	%r14, %rdi
	callq	get_attr_imm_disp
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_107
	jmp	.LBB71_16
.LBB71_40:                              # %sw.bb117
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB71_107
# BB#41:                                # %land.lhs.true119
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB71_44
# BB#42:                                # %land.lhs.true123
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB71_46
# BB#43:                                # %land.lhs.true123.lor.lhs.false126_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB71_44:                              # %lor.lhs.false126
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB71_46
# BB#45:                                # %lor.lhs.false130
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB71_47
.LBB71_46:                              # %land.lhs.true133
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_47:                              # %if.else137
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB71_107
# BB#48:                                # %land.lhs.true139
	movl	ix86_cpu(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	andq	%r12, %rdx
	testq	%r15, %rdx
	je	.LBB71_51
# BB#49:                                # %land.lhs.true143
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB71_16
# BB#50:                                # %land.lhs.true143.lor.lhs.false146_crit_edge
	movl	ix86_cpu(%rip), %eax
.LBB71_51:                              # %lor.lhs.false146
	movq	%rax, %rcx
	jmp	.LBB71_38
.LBB71_29:                              # %sw.bb77
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r12d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB71_32
# BB#30:                                # %land.lhs.true79
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB71_34
# BB#31:                                # %land.lhs.true79.lor.lhs.false82_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB71_32:                              # %lor.lhs.false82
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB71_34
# BB#33:                                # %lor.lhs.false86
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB71_35
.LBB71_34:                              # %land.lhs.true89
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$3, %rax
	movq	$3, %rbx
	je	.LBB71_116
.LBB71_35:                              # %if.else93
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r12, %rax
	testq	%r15, %rax
	je	.LBB71_38
# BB#36:                                # %land.lhs.true97
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB71_16
# BB#37:                                # %land.lhs.true97.lor.lhs.false100_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB71_38:                              # %lor.lhs.false100
	shlq	%cl, %rbx
	andq	%r12, %rbx
	testq	%r15, %rbx
	je	.LBB71_16
# BB#39:                                # %lor.lhs.false104
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
.LBB71_76:                              # %land.lhs.true286
	testq	%r15, %rax
	jne	.LBB71_107
.LBB71_16:                              # %land.lhs.true14
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB71_115
# BB#17:                                # %lor.lhs.false
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB71_107
.LBB71_115:                             # %sw.bb482
	movq	$2, %rbx
	jmp	.LBB71_116
.LBB71_107:                             # %sw.bb483
	movq	$1, %rbx
.LBB71_116:                             # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB71_102:
	movabsq	$0, %rax
.LBB71_104:                             # %lor.lhs.false448
	xorq	$1, %rax
	incq	%rax
	jmp	.LBB71_112
.Ltmp691:
	.size	pent_uv_unit_blockage, .Ltmp691-pent_uv_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI71_0:
	.quad	.LBB71_108
	.quad	.LBB71_108
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_108
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_105
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_105
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_99
	.quad	.LBB71_97
	.quad	.LBB71_99
	.quad	.LBB71_99
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_94
	.quad	.LBB71_90
	.quad	.LBB71_90
	.quad	.LBB71_90
	.quad	.LBB71_90
	.quad	.LBB71_94
	.quad	.LBB71_94
	.quad	.LBB71_86
	.quad	.LBB71_86
	.quad	.LBB71_86
	.quad	.LBB71_86
	.quad	.LBB71_86
	.quad	.LBB71_86
	.quad	.LBB71_81
	.quad	.LBB71_77
	.quad	.LBB71_77
	.quad	.LBB71_77
	.quad	.LBB71_77
	.quad	.LBB71_77
	.quad	.LBB71_70
	.quad	.LBB71_65
	.quad	.LBB71_65
	.quad	.LBB71_65
	.quad	.LBB71_77
	.quad	.LBB71_65
	.quad	.LBB71_65
	.quad	.LBB71_65
	.quad	.LBB71_97
	.quad	.LBB71_107
	.quad	.LBB71_99
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_99
	.quad	.LBB71_99
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_61
	.quad	.LBB71_97
	.quad	.LBB71_57
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_57
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_108
	.quad	.LBB71_97
	.quad	.LBB71_108
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_108
	.quad	.LBB71_97
	.quad	.LBB71_108
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_97
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_108
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_107
	.quad	.LBB71_108
	.quad	.LBB71_52
	.quad	.LBB71_52
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_52
	.quad	.LBB71_40
	.quad	.LBB71_52
	.quad	.LBB71_29
	.quad	.LBB71_52
	.quad	.LBB71_52
	.quad	.LBB71_52
	.quad	.LBB71_52
	.quad	.LBB71_52
	.quad	.LBB71_52
	.quad	.LBB71_23
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_23
	.quad	.LBB71_23
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_18
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_107
	.quad	.LBB71_97

	.text
	.align	16, 0x90
	.type	ppro_p0_unit_conflict_cost,@function
ppro_p0_unit_conflict_cost:             # @ppro_p0_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp696:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp697:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp698:
	.cfi_def_cfa_offset 32
.Ltmp699:
	.cfi_offset %rbx, -32
.Ltmp700:
	.cfi_offset %r14, -24
.Ltmp701:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB72_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB72_2:                               # %cond.end
	movq	$1, %rbx
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$32, %rdx
	jg	.LBB72_5
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB72_4
# BB#175:                               # %sw.bb286
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB72_180
# BB#176:                               # %land.lhs.true290
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %rbx
	jns	.LBB72_180
# BB#177:                               # %if.then296
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.ppro_p0_unit_conflict_cost, %rcx
	movq	$29844, %rdx            # imm = 0x7494
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB72_5:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$634, %rdx              # imm = 0x27A
	jg	.LBB72_53
# BB#6:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB72_51
# BB#7:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$506, %rdx              # imm = 0x1FA
	jg	.LBB72_49
# BB#8:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$402, %rdx              # imm = 0x192
	jg	.LBB72_47
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$265, %rdx              # imm = 0x109
	jg	.LBB72_45
# BB#10:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$83, %rdx
	jg	.LBB72_15
# BB#11:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$33, %rax
	je	.LBB72_173
# BB#12:                                # %cond.end
	cmpq	$36, %rax
	jne	.LBB72_13
.LBB72_173:                             # %sw.bb280
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$5, %rax
	je	.LBB72_69
# BB#174:                               # %select.mid16
	movq	$8, %rax
	jmp	.LBB72_69
.LBB72_4:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_53:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$635, %rax              # imm = 0x27B
	jne	.LBB72_54
# BB#59:                                # %sw.bb6
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB72_180
# BB#60:                                # %land.lhs.true8
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB72_58
.LBB72_51:                              # %cond.end
	addq	$-618, %rax             # imm = 0xFFFFFFFFFFFFFD96
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jae	.LBB72_52
# BB#61:                                # %sw.bb15
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$4, %rax
	jb	.LBB72_69
# BB#62:                                # %select.mid
	movq	$8, %rax
	jmp	.LBB72_69
.LBB72_54:                              # %cond.end
	cmpq	$636, %rax              # imm = 0x27C
	jne	.LBB72_55
# BB#56:                                # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB72_180
# BB#57:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB72_58:                              # %return
	callq	const0_operand
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_49:                              # %cond.end
	addq	$-507, %rax             # imm = 0xFFFFFFFFFFFFFE05
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$1, %rbx
	cmpq	$51, %rax
	ja	.LBB72_180
# BB#50:                                # %cond.end
	jmpq	*.LJTI72_0(,%rax,8)
.LBB72_73:                              # %sw.bb32
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	jne	.LBB72_75
# BB#74:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_55:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_47:                              # %cond.end
	addq	$-403, %rax             # imm = 0xFFFFFFFFFFFFFE6D
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$1, %rbx
	cmpq	$24, %rax
	ja	.LBB72_180
# BB#48:                                # %cond.end
	jmpq	*.LJTI72_1(,%rax,8)
.LBB72_135:                             # %sw.bb163
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB72_116
# BB#136:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB72_126
.LBB72_52:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_45:                              # %cond.end
	addq	$-266, %rax             # imm = 0xFFFFFFFFFFFFFEF6
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$13, %rcx
	jbe	.LBB72_179
# BB#46:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_15:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$132, %rdx
	jg	.LBB72_23
# BB#16:                                # %cond.end
	addq	$-84, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$20, %rax
	jbe	.LBB72_18
# BB#17:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_179:                             # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$13459, %rax            # imm = 0x3493
	movq	$1, %rbx
	jne	.LBB72_72
	jmp	.LBB72_180
.LBB72_63:                              # %sw.bb21
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	jne	.LBB72_65
# BB#64:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_83:                              # %sw.bb56
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	jne	.LBB72_85
# BB#84:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_23:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$166, %rdx
	jg	.LBB72_30
# BB#24:                                # %cond.end
	addq	$-133, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$17, %rcx
	jbe	.LBB72_26
# BB#25:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_75:                              # %if.else36
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB72_67
# BB#76:
	movabsq	$0, %rax
	jmp	.LBB72_68
.LBB72_65:                              # %if.else25
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB72_67
# BB#66:
	movabsq	$0, %rax
	jmp	.LBB72_68
.LBB72_91:                              # %sw.bb80
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	jne	.LBB72_93
# BB#92:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_137:                             # %sw.bb169
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB72_139
# BB#138:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_118:                             # %sw.bb130
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$1, %rcx
	je	.LBB72_69
# BB#119:                               # %select.mid2
	movq	$8, %rax
	jmp	.LBB72_69
.LBB72_13:                              # %cond.end
	cmpq	$45, %rax
	jne	.LBB72_14
# BB#168:                               # %sw.bb260
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB72_169
# BB#170:                               # %sw.bb260
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%rbx, %rax
	cmpq	$6, %rax
	jb	.LBB72_171
# BB#172:                               # %land.lhs.true274
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_85:                              # %if.else60
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB72_67
# BB#86:
	movabsq	$0, %rax
	jmp	.LBB72_68
.LBB72_110:                             # %sw.bb118
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB72_111
# BB#112:                               # %sw.bb118
	movabsq	$1, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB72_69
.LBB72_103:                             # %sw.bb103
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB72_105
# BB#104:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_18:                              # %cond.end
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$1969216, %rdx          # imm = 0x1E0C40
	je	.LBB72_19
# BB#166:                               # %sw.bb233
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$6, %rax
	jb	.LBB72_69
# BB#167:                               # %select.mid14
	movq	$8, %rax
	jmp	.LBB72_69
.LBB72_30:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$201, %rdx
	jg	.LBB72_35
# BB#31:                                # %cond.end
	addq	$-167, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$17, %rcx
	jbe	.LBB72_33
# BB#32:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_93:                              # %if.else84
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB72_94
.LBB72_67:                              # %if.else25
	movabsq	$1, %rax
.LBB72_68:                              # %if.else25
	addq	$7, %rax
	jmp	.LBB72_69
.LBB72_14:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_139:                             # %lor.lhs.false171
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB72_116
# BB#140:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB72_126
.LBB72_114:                             # %sw.bb124
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$14, %rax
	je	.LBB72_116
# BB#115:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB72_126
.LBB72_99:                              # %sw.bb97
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB72_100
# BB#101:                               # %sw.bb97
	movabsq	$1, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB72_69
.LBB72_95:                              # %sw.bb91
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB72_96
# BB#97:                                # %sw.bb91
	movabsq	$1, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB72_69
.LBB72_87:                              # %sw.bb67
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB72_88
# BB#89:                                # %sw.bb67
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB72_109
# BB#90:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_77:                              # %sw.bb43
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB72_78
# BB#79:                                # %sw.bb43
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB72_80
# BB#81:                                # %land.lhs.true49
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	jmp	.LBB72_82
.LBB72_130:                             # %sw.bb151
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB72_132
# BB#131:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_127:                             # %sw.bb143
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB72_180
# BB#128:                               # %lor.lhs.false145
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB72_116
# BB#129:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB72_126
.LBB72_120:                             # %sw.bb135
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB72_122
# BB#121:                               # %sw.bb135
	movq	%rcx, %rdx
.LBB72_122:                             # %sw.bb135
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB72_124
# BB#123:                               # %sw.bb135
	movq	%rcx, %rsi
.LBB72_124:                             # %sw.bb135
	orq	%rsi, %rdx
	jne	.LBB72_126
# BB#125:                               # %sw.bb135
	movq	%rcx, %rax
	jmp	.LBB72_126
.LBB72_26:                              # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$174272, %rax           # imm = 0x2A8C0
	jne	.LBB72_162
# BB#27:                                # %cond.end
	testq	%rcx, %rcx
	jne	.LBB72_28
# BB#164:                               # %sw.bb226
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$6, %rax
	jb	.LBB72_69
# BB#165:                               # %select.mid12
	movq	$8, %rax
	jmp	.LBB72_69
.LBB72_111:
	movabsq	$0, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB72_69
.LBB72_35:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$220, %rdx
	jg	.LBB72_43
# BB#36:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$214, %rdx
	jg	.LBB72_41
# BB#37:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$202, %rax
	je	.LBB72_155
# BB#38:                                # %cond.end
	cmpq	$207, %rax
	jne	.LBB72_39
# BB#150:                               # %sw.bb197
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB72_152
# BB#151:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_105:                             # %land.lhs.true105
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB72_106
# BB#107:                               # %land.lhs.true105
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB72_108
.LBB72_109:                             # %land.lhs.true73
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
.LBB72_82:                              # %return
	callq	mult_operator
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_94:
	movabsq	$0, %rax
	jmp	.LBB72_68
.LBB72_33:                              # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$259803, %rax           # imm = 0x3F6DB
	je	.LBB72_34
.LBB72_162:                             # %sw.bb220
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$6, %rax
	je	.LBB72_69
# BB#163:                               # %select.mid10
	movq	$8, %rax
	jmp	.LBB72_69
.LBB72_100:
	movabsq	$0, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB72_69
.LBB72_96:
	movabsq	$0, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB72_69
.LBB72_43:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$221, %rax
	jne	.LBB72_44
# BB#141:                               # %sw.bb179
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$3, %rcx
	je	.LBB72_69
# BB#142:                               # %select.mid4
	movq	$8, %rax
	jmp	.LBB72_69
.LBB72_132:                             # %lor.lhs.false153
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB72_180
# BB#133:                               # %lor.lhs.false157
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB72_134
.LBB72_116:                             # %sw.bb124
	movabsq	$1, %rax
	xorq	$1, %rax
.LBB72_126:                             # %sw.bb135
	movq	$3, %rcx
	shlq	%cl, %rax
.LBB72_69:                              # %sw.epilog
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$8, %rcx
	ja	.LBB72_178
# BB#70:                                # %sw.epilog
	cmpq	$2, %rcx
	movq	$1, %rbx
	je	.LBB72_71
.LBB72_180:                             # %return
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB72_71:                              # %sw.epilog
	jne	.LBB72_178
.LBB72_72:                              # %sw.bb300
	movq	$17, %rbx
	jmp	.LBB72_180
.LBB72_178:                             # %sw.default307
	movabsq	$.L.str, %rdi
	movabsq	$.L__FUNCTION__.ppro_p0_unit_conflict_cost, %rdx
	movq	$29882, %rsi            # imm = 0x74BA
	callq	fancy_abort
.LBB72_169:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_171:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_19:                              # %cond.end
	testq	%rax, %rax
	movq	$1, %rbx
	jne	.LBB72_180
# BB#20:                                # %sw.bb242
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	movq	$1, %rbx
	je	.LBB72_180
# BB#21:                                # %sw.bb242
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB72_180
# BB#22:                                # %land.lhs.true254
	movq	recog_data+8(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	jmp	.LBB72_180
.LBB72_88:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_78:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_80:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_41:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$215, %rax
	jne	.LBB72_42
# BB#143:                               # %sw.bb184
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$2, %rcx
	je	.LBB72_69
# BB#144:                               # %select.mid6
	movq	$8, %rax
	jmp	.LBB72_69
.LBB72_44:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_106:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_108:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_28:                              # %cond.end
	cmpq	$8, %rcx
	jne	.LBB72_29
# BB#160:                               # %sw.bb215
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$6, %rax
	je	.LBB72_69
# BB#161:                               # %select.mid8
	movq	$8, %rax
	jmp	.LBB72_69
.LBB72_42:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_155:                             # %sw.bb205
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB72_157
# BB#156:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_39:                              # %cond.end
	cmpq	$208, %rax
	jne	.LBB72_40
# BB#145:                               # %sw.bb189
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB72_147
# BB#146:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_134:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB72_126
.LBB72_29:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_152:                             # %lor.lhs.false199
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	jne	.LBB72_153
# BB#154:                               # %lor.lhs.false199
	movabsq	$1, %rax
	jmp	.LBB72_126
.LBB72_34:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_157:                             # %lor.lhs.false207
	movq	recog_data+16(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	jne	.LBB72_158
# BB#159:                               # %lor.lhs.false207
	movabsq	$1, %rax
	jmp	.LBB72_126
.LBB72_40:
	movq	$1, %rbx
	jmp	.LBB72_180
.LBB72_147:                             # %lor.lhs.false191
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	jne	.LBB72_148
# BB#149:                               # %lor.lhs.false191
	movabsq	$1, %rax
	jmp	.LBB72_126
.LBB72_153:
	movabsq	$0, %rax
	jmp	.LBB72_126
.LBB72_158:
	movabsq	$0, %rax
	jmp	.LBB72_126
.LBB72_148:
	movabsq	$0, %rax
	jmp	.LBB72_126
.Ltmp702:
	.size	ppro_p0_unit_conflict_cost, .Ltmp702-ppro_p0_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI72_0:
	.quad	.LBB72_114
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_110
	.quad	.LBB72_103
	.quad	.LBB72_180
	.quad	.LBB72_110
	.quad	.LBB72_103
	.quad	.LBB72_180
	.quad	.LBB72_99
	.quad	.LBB72_95
	.quad	.LBB72_91
	.quad	.LBB72_87
	.quad	.LBB72_180
	.quad	.LBB72_91
	.quad	.LBB72_91
	.quad	.LBB72_83
	.quad	.LBB72_77
	.quad	.LBB72_180
	.quad	.LBB72_83
	.quad	.LBB72_83
	.quad	.LBB72_83
	.quad	.LBB72_83
	.quad	.LBB72_73
	.quad	.LBB72_63
	.quad	.LBB72_73
	.quad	.LBB72_63
	.quad	.LBB72_73
	.quad	.LBB72_63
	.quad	.LBB72_73
	.quad	.LBB72_63
	.quad	.LBB72_73
	.quad	.LBB72_63
	.quad	.LBB72_73
	.quad	.LBB72_63
	.quad	.LBB72_73
	.quad	.LBB72_63
.LJTI72_1:
	.quad	.LBB72_137
	.quad	.LBB72_135
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_137
	.quad	.LBB72_130
	.quad	.LBB72_135
	.quad	.LBB72_127
	.quad	.LBB72_137
	.quad	.LBB72_135
	.quad	.LBB72_135
	.quad	.LBB72_120
	.quad	.LBB72_135
	.quad	.LBB72_135
	.quad	.LBB72_118
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_180
	.quad	.LBB72_118
	.quad	.LBB72_118

	.text
	.align	16, 0x90
	.type	ppro_p0_unit_blockage,@function
ppro_p0_unit_blockage:                  # @ppro_p0_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp707:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp708:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp709:
	.cfi_def_cfa_offset 32
.Ltmp710:
	.cfi_offset %rbx, -32
.Ltmp711:
	.cfi_offset %r14, -24
.Ltmp712:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB73_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB73_2:                               # %cond.end
	movq	$1, %rbx
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$32, %rdx
	jg	.LBB73_5
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB73_4
# BB#175:                               # %sw.bb286
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB73_180
# BB#176:                               # %land.lhs.true290
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %rbx
	jns	.LBB73_180
# BB#177:                               # %if.then296
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.ppro_p0_unit_blockage, %rcx
	movq	$29148, %rdx            # imm = 0x71DC
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB73_5:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$634, %rdx              # imm = 0x27A
	jg	.LBB73_53
# BB#6:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$617, %rdx              # imm = 0x269
	jg	.LBB73_51
# BB#7:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$506, %rdx              # imm = 0x1FA
	jg	.LBB73_49
# BB#8:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$402, %rdx              # imm = 0x192
	jg	.LBB73_47
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$265, %rdx              # imm = 0x109
	jg	.LBB73_45
# BB#10:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$83, %rdx
	jg	.LBB73_15
# BB#11:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$33, %rax
	je	.LBB73_173
# BB#12:                                # %cond.end
	cmpq	$36, %rax
	jne	.LBB73_13
.LBB73_173:                             # %sw.bb280
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$5, %rax
	je	.LBB73_69
# BB#174:                               # %select.mid16
	movq	$8, %rax
	jmp	.LBB73_69
.LBB73_4:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_53:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$635, %rax              # imm = 0x27B
	jne	.LBB73_54
# BB#59:                                # %sw.bb6
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB73_180
# BB#60:                                # %land.lhs.true8
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB73_58
.LBB73_51:                              # %cond.end
	addq	$-618, %rax             # imm = 0xFFFFFFFFFFFFFD96
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jae	.LBB73_52
# BB#61:                                # %sw.bb15
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$4, %rax
	jb	.LBB73_69
# BB#62:                                # %select.mid
	movq	$8, %rax
	jmp	.LBB73_69
.LBB73_54:                              # %cond.end
	cmpq	$636, %rax              # imm = 0x27C
	jne	.LBB73_55
# BB#56:                                # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB73_180
# BB#57:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
.LBB73_58:                              # %return
	callq	const0_operand
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_49:                              # %cond.end
	addq	$-507, %rax             # imm = 0xFFFFFFFFFFFFFE05
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$1, %rbx
	cmpq	$51, %rax
	ja	.LBB73_180
# BB#50:                                # %cond.end
	jmpq	*.LJTI73_0(,%rax,8)
.LBB73_73:                              # %sw.bb32
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	jne	.LBB73_75
# BB#74:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_55:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_47:                              # %cond.end
	addq	$-403, %rax             # imm = 0xFFFFFFFFFFFFFE6D
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$1, %rbx
	cmpq	$24, %rax
	ja	.LBB73_180
# BB#48:                                # %cond.end
	jmpq	*.LJTI73_1(,%rax,8)
.LBB73_135:                             # %sw.bb163
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB73_116
# BB#136:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB73_126
.LBB73_52:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_45:                              # %cond.end
	addq	$-266, %rax             # imm = 0xFFFFFFFFFFFFFEF6
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$13, %rcx
	jbe	.LBB73_179
# BB#46:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_15:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$132, %rdx
	jg	.LBB73_23
# BB#16:                                # %cond.end
	addq	$-84, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$20, %rax
	jbe	.LBB73_18
# BB#17:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_179:                             # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$13459, %rax            # imm = 0x3493
	movq	$1, %rbx
	jne	.LBB73_72
	jmp	.LBB73_180
.LBB73_63:                              # %sw.bb21
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	jne	.LBB73_65
# BB#64:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_83:                              # %sw.bb56
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	jne	.LBB73_85
# BB#84:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_23:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$166, %rdx
	jg	.LBB73_30
# BB#24:                                # %cond.end
	addq	$-133, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$17, %rcx
	jbe	.LBB73_26
# BB#25:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_75:                              # %if.else36
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB73_67
# BB#76:
	movabsq	$0, %rax
	jmp	.LBB73_68
.LBB73_65:                              # %if.else25
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB73_67
# BB#66:
	movabsq	$0, %rax
	jmp	.LBB73_68
.LBB73_91:                              # %sw.bb80
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	jne	.LBB73_93
# BB#92:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_137:                             # %sw.bb169
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB73_139
# BB#138:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_118:                             # %sw.bb130
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$1, %rcx
	je	.LBB73_69
# BB#119:                               # %select.mid2
	movq	$8, %rax
	jmp	.LBB73_69
.LBB73_13:                              # %cond.end
	cmpq	$45, %rax
	jne	.LBB73_14
# BB#168:                               # %sw.bb260
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB73_169
# BB#170:                               # %sw.bb260
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%rbx, %rax
	cmpq	$6, %rax
	jb	.LBB73_171
# BB#172:                               # %land.lhs.true274
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_85:                              # %if.else60
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB73_67
# BB#86:
	movabsq	$0, %rax
	jmp	.LBB73_68
.LBB73_110:                             # %sw.bb118
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB73_111
# BB#112:                               # %sw.bb118
	movabsq	$1, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB73_69
.LBB73_103:                             # %sw.bb103
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB73_105
# BB#104:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_18:                              # %cond.end
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$1969216, %rdx          # imm = 0x1E0C40
	je	.LBB73_19
# BB#166:                               # %sw.bb233
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	movq	$6, %rax
	jb	.LBB73_69
# BB#167:                               # %select.mid14
	movq	$8, %rax
	jmp	.LBB73_69
.LBB73_30:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$201, %rdx
	jg	.LBB73_35
# BB#31:                                # %cond.end
	addq	$-167, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$17, %rcx
	jbe	.LBB73_33
# BB#32:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_93:                              # %if.else84
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB73_94
.LBB73_67:                              # %if.else25
	movabsq	$1, %rax
.LBB73_68:                              # %if.else25
	addq	$7, %rax
	jmp	.LBB73_69
.LBB73_14:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_139:                             # %lor.lhs.false171
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB73_116
# BB#140:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB73_126
.LBB73_114:                             # %sw.bb124
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$14, %rax
	je	.LBB73_116
# BB#115:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB73_126
.LBB73_99:                              # %sw.bb97
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB73_100
# BB#101:                               # %sw.bb97
	movabsq	$1, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB73_69
.LBB73_95:                              # %sw.bb91
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB73_96
# BB#97:                                # %sw.bb91
	movabsq	$1, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB73_69
.LBB73_87:                              # %sw.bb67
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB73_88
# BB#89:                                # %sw.bb67
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB73_109
# BB#90:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_77:                              # %sw.bb43
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB73_78
# BB#79:                                # %sw.bb43
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB73_80
# BB#81:                                # %land.lhs.true49
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	jmp	.LBB73_82
.LBB73_130:                             # %sw.bb151
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB73_132
# BB#131:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_127:                             # %sw.bb143
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB73_180
# BB#128:                               # %lor.lhs.false145
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB73_116
# BB#129:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB73_126
.LBB73_120:                             # %sw.bb135
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB73_122
# BB#121:                               # %sw.bb135
	movq	%rcx, %rdx
.LBB73_122:                             # %sw.bb135
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB73_124
# BB#123:                               # %sw.bb135
	movq	%rcx, %rsi
.LBB73_124:                             # %sw.bb135
	orq	%rsi, %rdx
	jne	.LBB73_126
# BB#125:                               # %sw.bb135
	movq	%rcx, %rax
	jmp	.LBB73_126
.LBB73_26:                              # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$174272, %rax           # imm = 0x2A8C0
	jne	.LBB73_162
# BB#27:                                # %cond.end
	testq	%rcx, %rcx
	jne	.LBB73_28
# BB#164:                               # %sw.bb226
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	movq	$6, %rax
	jb	.LBB73_69
# BB#165:                               # %select.mid12
	movq	$8, %rax
	jmp	.LBB73_69
.LBB73_111:
	movabsq	$0, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB73_69
.LBB73_35:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$220, %rdx
	jg	.LBB73_43
# BB#36:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$214, %rdx
	jg	.LBB73_41
# BB#37:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$202, %rax
	je	.LBB73_155
# BB#38:                                # %cond.end
	cmpq	$207, %rax
	jne	.LBB73_39
# BB#150:                               # %sw.bb197
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB73_152
# BB#151:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_105:                             # %land.lhs.true105
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB73_106
# BB#107:                               # %land.lhs.true105
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB73_108
.LBB73_109:                             # %land.lhs.true73
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
.LBB73_82:                              # %return
	callq	mult_operator
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_94:
	movabsq	$0, %rax
	jmp	.LBB73_68
.LBB73_33:                              # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$259803, %rax           # imm = 0x3F6DB
	je	.LBB73_34
.LBB73_162:                             # %sw.bb220
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$6, %rax
	je	.LBB73_69
# BB#163:                               # %select.mid10
	movq	$8, %rax
	jmp	.LBB73_69
.LBB73_100:
	movabsq	$0, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB73_69
.LBB73_96:
	movabsq	$0, %rax
	leaq	3(,%rax,4), %rax
	jmp	.LBB73_69
.LBB73_43:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$221, %rax
	jne	.LBB73_44
# BB#141:                               # %sw.bb179
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$3, %rcx
	je	.LBB73_69
# BB#142:                               # %select.mid4
	movq	$8, %rax
	jmp	.LBB73_69
.LBB73_132:                             # %lor.lhs.false153
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB73_180
# BB#133:                               # %lor.lhs.false157
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB73_134
.LBB73_116:                             # %sw.bb124
	movabsq	$1, %rax
	xorq	$1, %rax
.LBB73_126:                             # %sw.bb135
	movq	$3, %rcx
	shlq	%cl, %rax
.LBB73_69:                              # %sw.epilog
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$8, %rcx
	ja	.LBB73_178
# BB#70:                                # %sw.epilog
	cmpq	$2, %rcx
	movq	$1, %rbx
	je	.LBB73_71
.LBB73_180:                             # %return
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB73_71:                              # %sw.epilog
	jne	.LBB73_178
.LBB73_72:                              # %sw.bb300
	movq	$17, %rbx
	jmp	.LBB73_180
.LBB73_178:                             # %sw.default307
	movabsq	$.L.str, %rdi
	movabsq	$.L__FUNCTION__.ppro_p0_unit_blockage, %rdx
	movq	$29186, %rsi            # imm = 0x7202
	callq	fancy_abort
.LBB73_169:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_171:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_19:                              # %cond.end
	testq	%rax, %rax
	movq	$1, %rbx
	jne	.LBB73_180
# BB#20:                                # %sw.bb242
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	movq	$1, %rbx
	je	.LBB73_180
# BB#21:                                # %sw.bb242
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB73_180
# BB#22:                                # %land.lhs.true254
	movq	recog_data+8(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	symbolic_operand
	jmp	.LBB73_180
.LBB73_88:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_78:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_80:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_41:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$215, %rax
	jne	.LBB73_42
# BB#143:                               # %sw.bb184
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$2, %rcx
	je	.LBB73_69
# BB#144:                               # %select.mid6
	movq	$8, %rax
	jmp	.LBB73_69
.LBB73_44:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_106:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_108:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_28:                              # %cond.end
	cmpq	$8, %rcx
	jne	.LBB73_29
# BB#160:                               # %sw.bb215
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	movq	$6, %rax
	je	.LBB73_69
# BB#161:                               # %select.mid8
	movq	$8, %rax
	jmp	.LBB73_69
.LBB73_42:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_155:                             # %sw.bb205
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB73_157
# BB#156:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_39:                              # %cond.end
	cmpq	$208, %rax
	jne	.LBB73_40
# BB#145:                               # %sw.bb189
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB73_147
# BB#146:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_134:
	movabsq	$0, %rax
	xorq	$1, %rax
	jmp	.LBB73_126
.LBB73_29:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_152:                             # %lor.lhs.false199
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	jne	.LBB73_153
# BB#154:                               # %lor.lhs.false199
	movabsq	$1, %rax
	jmp	.LBB73_126
.LBB73_34:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_157:                             # %lor.lhs.false207
	movq	recog_data+16(%rip), %rax
	movq	$5, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	jne	.LBB73_158
# BB#159:                               # %lor.lhs.false207
	movabsq	$1, %rax
	jmp	.LBB73_126
.LBB73_40:
	movq	$1, %rbx
	jmp	.LBB73_180
.LBB73_147:                             # %lor.lhs.false191
	movq	recog_data+16(%rip), %rax
	movq	$4, %rsi
	movq	%rax, %rdi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	jne	.LBB73_148
# BB#149:                               # %lor.lhs.false191
	movabsq	$1, %rax
	jmp	.LBB73_126
.LBB73_153:
	movabsq	$0, %rax
	jmp	.LBB73_126
.LBB73_158:
	movabsq	$0, %rax
	jmp	.LBB73_126
.LBB73_148:
	movabsq	$0, %rax
	jmp	.LBB73_126
.Ltmp713:
	.size	ppro_p0_unit_blockage, .Ltmp713-ppro_p0_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI73_0:
	.quad	.LBB73_114
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_110
	.quad	.LBB73_103
	.quad	.LBB73_180
	.quad	.LBB73_110
	.quad	.LBB73_103
	.quad	.LBB73_180
	.quad	.LBB73_99
	.quad	.LBB73_95
	.quad	.LBB73_91
	.quad	.LBB73_87
	.quad	.LBB73_180
	.quad	.LBB73_91
	.quad	.LBB73_91
	.quad	.LBB73_83
	.quad	.LBB73_77
	.quad	.LBB73_180
	.quad	.LBB73_83
	.quad	.LBB73_83
	.quad	.LBB73_83
	.quad	.LBB73_83
	.quad	.LBB73_73
	.quad	.LBB73_63
	.quad	.LBB73_73
	.quad	.LBB73_63
	.quad	.LBB73_73
	.quad	.LBB73_63
	.quad	.LBB73_73
	.quad	.LBB73_63
	.quad	.LBB73_73
	.quad	.LBB73_63
	.quad	.LBB73_73
	.quad	.LBB73_63
	.quad	.LBB73_73
	.quad	.LBB73_63
.LJTI73_1:
	.quad	.LBB73_137
	.quad	.LBB73_135
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_137
	.quad	.LBB73_130
	.quad	.LBB73_135
	.quad	.LBB73_127
	.quad	.LBB73_137
	.quad	.LBB73_135
	.quad	.LBB73_135
	.quad	.LBB73_120
	.quad	.LBB73_135
	.quad	.LBB73_135
	.quad	.LBB73_118
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_180
	.quad	.LBB73_118
	.quad	.LBB73_118

	.text
	.align	16, 0x90
	.type	k6_alux_unit_conflict_cost,@function
k6_alux_unit_conflict_cost:             # @k6_alux_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp718:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp719:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp720:
	.cfi_def_cfa_offset 32
.Ltmp721:
	.cfi_offset %rbx, -32
.Ltmp722:
	.cfi_offset %r14, -24
.Ltmp723:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB74_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB74_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$637, %rax              # imm = 0x27D
	ja	.LBB74_54
# BB#3:                                 # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI74_0(,%rax,8)
.LBB74_55:                              # %sw.bb193
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB74_7
# BB#56:
	movabsq	$0, %rax
	jmp	.LBB74_8
.LBB74_61:                              # %sw.bb192
	movq	%r14, %rdi
	callq	extract_insn_cached
.LBB74_62:                              # %return
	movq	$1, %rbx
	jmp	.LBB74_63
.LBB74_60:                              # %sw.bb213
	movq	$2, %rbx
	jmp	.LBB74_63
.LBB74_22:                              # %sw.bb47
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB74_62
# BB#23:                                # %if.else51
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB74_7
# BB#24:
	movabsq	$0, %rax
	jmp	.LBB74_8
.LBB74_37:                              # %sw.bb118
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	je	.LBB74_26
	jmp	.LBB74_54
.LBB74_31:                              # %sw.bb87
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB74_54
	jmp	.LBB74_26
.LBB74_29:                              # %sw.bb75
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB74_26
# BB#30:                                # %lor.lhs.false78
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB74_26
	jmp	.LBB74_54
.LBB74_4:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB74_62
# BB#5:                                 # %if.else
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB74_7
# BB#6:
	movabsq	$0, %rax
	jmp	.LBB74_8
.LBB74_32:                              # %sw.bb95
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB74_62
# BB#33:                                # %if.else98
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB74_7
# BB#34:
	movabsq	$0, %rax
	jmp	.LBB74_8
.LBB74_57:                              # %sw.bb199
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB74_54
# BB#58:                                # %land.lhs.true203
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB74_54
# BB#59:                                # %if.then209
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alux_unit_conflict_cost, %rcx
	movq	$28467, %rdx            # imm = 0x6F33
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB74_46:                              # %sw.bb153
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB74_49
# BB#47:                                # %lor.lhs.false157
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB74_54
# BB#48:                                # %land.lhs.true161
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB74_54
.LBB74_49:                              # %land.lhs.true165
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB74_51
# BB#50:                                # %lor.lhs.false171
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB74_54
.LBB74_51:                              # %land.lhs.true174
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB74_54
# BB#52:                                # %land.lhs.true178
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB74_54
	jmp	.LBB74_53
.LBB74_38:                              # %sw.bb127
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB74_26
# BB#39:                                # %sw.bb127
	cmpq	$3, %rax
	jne	.LBB74_44
# BB#40:                                # %lor.lhs.false129
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB74_54
# BB#41:                                # %land.lhs.true133
	movl	x86_qimode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB74_54
# BB#42:                                # %land.lhs.true137
	cmpq	$3, %rax
	je	.LBB74_26
# BB#43:                                # %land.lhs.true137
	cmpq	$5, %rax
	je	.LBB74_26
.LBB74_44:                              # %lor.lhs.false141
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB74_54
# BB#45:                                # %lor.lhs.false141
	cmpq	$2, %rax
	je	.LBB74_26
	jmp	.LBB74_54
.LBB74_35:                              # %sw.bb105
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB74_26
# BB#36:                                # %lor.lhs.false108
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB74_26
	jmp	.LBB74_54
.LBB74_28:                              # %sw.bb67
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
.LBB74_53:                              # %land.lhs.true178
	cmpq	$2, %rax
	jne	.LBB74_26
	jmp	.LBB74_54
.LBB74_25:                              # %sw.bb59
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB74_54
.LBB74_26:                              # %land.lhs.true61
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
.LBB74_27:                              # %land.lhs.true61
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB74_63
	jmp	.LBB74_54
.LBB74_15:                              # %sw.bb21
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB74_54
# BB#16:                                # %land.lhs.true
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB74_63
# BB#17:                                # %lor.lhs.false26
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB74_63
# BB#18:                                # %if.else30
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB74_54
# BB#19:                                # %land.lhs.true32
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB74_54
# BB#20:                                # %land.lhs.true36
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB74_54
# BB#21:                                # %land.lhs.true39
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	jmp	.LBB74_27
.LBB74_11:                              # %sw.bb9
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB74_63
# BB#12:                                # %lor.lhs.false
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB74_63
# BB#13:                                # %if.else14
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	jne	.LBB74_14
.LBB74_7:                               # %if.else
	movabsq	$1, %rax
.LBB74_8:                               # %if.else
	leaq	1(%rax,%rax), %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$1, %rbx
	je	.LBB74_63
# BB#9:                                 # %sw.epilog
	cmpq	$3, %rax
	jne	.LBB74_10
.LBB74_54:                              # %sw.bb214
	movq	$17, %rbx
.LBB74_63:                              # %return
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB74_14:
	movabsq	$0, %rax
	jmp	.LBB74_8
.LBB74_10:                              # %sw.default215
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alux_unit_conflict_cost, %rcx
	movq	$28490, %rsi            # imm = 0x6F4A
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp724:
	.size	k6_alux_unit_conflict_cost, .Ltmp724-k6_alux_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI74_0:
	.quad	.LBB74_57
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_46
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_61
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_38
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_61
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_37
	.quad	.LBB74_37
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_55
	.quad	.LBB74_37
	.quad	.LBB74_35
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_61
	.quad	.LBB74_55
	.quad	.LBB74_61
	.quad	.LBB74_32
	.quad	.LBB74_55
	.quad	.LBB74_61
	.quad	.LBB74_32
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_31
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_29
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_29
	.quad	.LBB74_29
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_28
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_25
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_60
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_61
	.quad	.LBB74_55
	.quad	.LBB74_61
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_61
	.quad	.LBB74_55
	.quad	.LBB74_61
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_61
	.quad	.LBB74_22
	.quad	.LBB74_22
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_63
	.quad	.LBB74_22
	.quad	.LBB74_15
	.quad	.LBB74_22
	.quad	.LBB74_11
	.quad	.LBB74_22
	.quad	.LBB74_22
	.quad	.LBB74_22
	.quad	.LBB74_22
	.quad	.LBB74_22
	.quad	.LBB74_22
	.quad	.LBB74_4
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_63
	.quad	.LBB74_4
	.quad	.LBB74_4
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_63
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_63
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_55
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_54
	.quad	.LBB74_31
	.quad	.LBB74_31

	.text
	.align	16, 0x90
	.type	k6_alux_unit_blockage,@function
k6_alux_unit_blockage:                  # @k6_alux_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp729:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp730:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp731:
	.cfi_def_cfa_offset 32
.Ltmp732:
	.cfi_offset %rbx, -32
.Ltmp733:
	.cfi_offset %r14, -24
.Ltmp734:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB75_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB75_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$637, %rax              # imm = 0x27D
	ja	.LBB75_54
# BB#3:                                 # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI75_0(,%rax,8)
.LBB75_55:                              # %sw.bb193
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB75_7
# BB#56:
	movabsq	$0, %rax
	jmp	.LBB75_8
.LBB75_61:                              # %sw.bb192
	movq	%r14, %rdi
	callq	extract_insn_cached
.LBB75_62:                              # %return
	movq	$1, %rbx
	jmp	.LBB75_63
.LBB75_60:                              # %sw.bb213
	movq	$2, %rbx
	jmp	.LBB75_63
.LBB75_22:                              # %sw.bb47
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB75_62
# BB#23:                                # %if.else51
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB75_7
# BB#24:
	movabsq	$0, %rax
	jmp	.LBB75_8
.LBB75_37:                              # %sw.bb118
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	je	.LBB75_26
	jmp	.LBB75_54
.LBB75_31:                              # %sw.bb87
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB75_54
	jmp	.LBB75_26
.LBB75_29:                              # %sw.bb75
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB75_26
# BB#30:                                # %lor.lhs.false78
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB75_26
	jmp	.LBB75_54
.LBB75_4:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB75_62
# BB#5:                                 # %if.else
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB75_7
# BB#6:
	movabsq	$0, %rax
	jmp	.LBB75_8
.LBB75_32:                              # %sw.bb95
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB75_62
# BB#33:                                # %if.else98
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	je	.LBB75_7
# BB#34:
	movabsq	$0, %rax
	jmp	.LBB75_8
.LBB75_57:                              # %sw.bb199
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB75_54
# BB#58:                                # %land.lhs.true203
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB75_54
# BB#59:                                # %if.then209
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alux_unit_blockage, %rcx
	movq	$27955, %rdx            # imm = 0x6D33
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB75_46:                              # %sw.bb153
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB75_49
# BB#47:                                # %lor.lhs.false157
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB75_54
# BB#48:                                # %land.lhs.true161
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB75_54
.LBB75_49:                              # %land.lhs.true165
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB75_51
# BB#50:                                # %lor.lhs.false171
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB75_54
.LBB75_51:                              # %land.lhs.true174
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB75_54
# BB#52:                                # %land.lhs.true178
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB75_54
	jmp	.LBB75_53
.LBB75_38:                              # %sw.bb127
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$5, %rax
	je	.LBB75_26
# BB#39:                                # %sw.bb127
	cmpq	$3, %rax
	jne	.LBB75_44
# BB#40:                                # %lor.lhs.false129
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB75_54
# BB#41:                                # %land.lhs.true133
	movl	x86_qimode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB75_54
# BB#42:                                # %land.lhs.true137
	cmpq	$3, %rax
	je	.LBB75_26
# BB#43:                                # %land.lhs.true137
	cmpq	$5, %rax
	je	.LBB75_26
.LBB75_44:                              # %lor.lhs.false141
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB75_54
# BB#45:                                # %lor.lhs.false141
	cmpq	$2, %rax
	je	.LBB75_26
	jmp	.LBB75_54
.LBB75_35:                              # %sw.bb105
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB75_26
# BB#36:                                # %lor.lhs.false108
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB75_26
	jmp	.LBB75_54
.LBB75_28:                              # %sw.bb67
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
.LBB75_53:                              # %land.lhs.true178
	cmpq	$2, %rax
	jne	.LBB75_26
	jmp	.LBB75_54
.LBB75_25:                              # %sw.bb59
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB75_54
.LBB75_26:                              # %land.lhs.true61
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
.LBB75_27:                              # %land.lhs.true61
	callq	general_operand
	testq	%r15, %rax
	movq	$1, %rbx
	jne	.LBB75_63
	jmp	.LBB75_54
.LBB75_15:                              # %sw.bb21
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB75_54
# BB#16:                                # %land.lhs.true
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB75_63
# BB#17:                                # %lor.lhs.false26
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB75_63
# BB#18:                                # %if.else30
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB75_54
# BB#19:                                # %land.lhs.true32
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB75_54
# BB#20:                                # %land.lhs.true36
	movq	recog_data+16(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB75_54
# BB#21:                                # %land.lhs.true39
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	jmp	.LBB75_27
.LBB75_11:                              # %sw.bb9
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB75_63
# BB#12:                                # %lor.lhs.false
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB75_63
# BB#13:                                # %if.else14
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	general_operand
	testq	%r15, %rax
	jne	.LBB75_14
.LBB75_7:                               # %if.else
	movabsq	$1, %rax
.LBB75_8:                               # %if.else
	leaq	1(%rax,%rax), %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	movq	$1, %rbx
	je	.LBB75_63
# BB#9:                                 # %sw.epilog
	cmpq	$3, %rax
	jne	.LBB75_10
.LBB75_54:                              # %sw.bb214
	movq	$17, %rbx
.LBB75_63:                              # %return
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB75_14:
	movabsq	$0, %rax
	jmp	.LBB75_8
.LBB75_10:                              # %sw.default215
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alux_unit_blockage, %rcx
	movq	$27978, %rsi            # imm = 0x6D4A
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp735:
	.size	k6_alux_unit_blockage, .Ltmp735-k6_alux_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI75_0:
	.quad	.LBB75_57
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_46
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_61
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_38
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_61
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_37
	.quad	.LBB75_37
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_55
	.quad	.LBB75_37
	.quad	.LBB75_35
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_61
	.quad	.LBB75_55
	.quad	.LBB75_61
	.quad	.LBB75_32
	.quad	.LBB75_55
	.quad	.LBB75_61
	.quad	.LBB75_32
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_31
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_29
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_29
	.quad	.LBB75_29
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_28
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_25
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_60
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_61
	.quad	.LBB75_55
	.quad	.LBB75_61
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_61
	.quad	.LBB75_55
	.quad	.LBB75_61
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_61
	.quad	.LBB75_22
	.quad	.LBB75_22
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_63
	.quad	.LBB75_22
	.quad	.LBB75_15
	.quad	.LBB75_22
	.quad	.LBB75_11
	.quad	.LBB75_22
	.quad	.LBB75_22
	.quad	.LBB75_22
	.quad	.LBB75_22
	.quad	.LBB75_22
	.quad	.LBB75_22
	.quad	.LBB75_4
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_63
	.quad	.LBB75_4
	.quad	.LBB75_4
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_63
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_63
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_55
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_54
	.quad	.LBB75_31
	.quad	.LBB75_31

	.text
	.align	16, 0x90
	.type	k6_alu_unit_conflict_cost,@function
k6_alu_unit_conflict_cost:              # @k6_alu_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp740:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp741:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp742:
	.cfi_def_cfa_offset 32
.Ltmp743:
	.cfi_offset %rbx, -32
.Ltmp744:
	.cfi_offset %r14, -24
.Ltmp745:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB76_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB76_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$637, %rax              # imm = 0x27D
	ja	.LBB76_140
# BB#3:                                 # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI76_0(,%rax,8)
.LBB76_150:                             # %sw.bb354
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB76_10
# BB#151:
	movabsq	$0, %rax
	jmp	.LBB76_11
.LBB76_39:                              # %sw.bb70
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB76_41
# BB#40:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_123:                             # %sw.bb238
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	jne	.LBB76_149
# BB#124:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_45:                              # %sw.bb79
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB76_46
# BB#47:                                # %sw.bb79
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB76_48
# BB#49:                                # %lor.lhs.false84
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB76_43
# BB#50:
	movabsq	$0, %rax
	jmp	.LBB76_44
.LBB76_41:                              # %lor.lhs.false73
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB76_42
.LBB76_43:                              # %lor.lhs.false73
	movabsq	$1, %rax
	jmp	.LBB76_44
.LBB76_42:
	movabsq	$0, %rax
.LBB76_44:                              # %lor.lhs.false73
	xorq	$1, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_160:                             # %sw.bb403
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB76_140
# BB#161:                               # %land.lhs.true407
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB76_140
# BB#162:                               # %if.then413
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alu_unit_conflict_cost, %rcx
	movq	$27443, %rdx            # imm = 0x6B33
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB76_152:                             # %sw.bb360
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %ecx
	movl	which_alternative(%rip), %eax
	testq	%rcx, %rcx
	je	.LBB76_157
# BB#153:                               # %sw.bb360
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$6, %rcx
	jb	.LBB76_157
# BB#154:                               # %land.lhs.true374
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB76_156
# BB#155:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_141:                             # %sw.bb310
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB76_144
# BB#142:                               # %lor.lhs.false314
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB76_149
# BB#143:                               # %land.lhs.true318
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB76_149
.LBB76_144:                             # %land.lhs.true322
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB76_146
# BB#145:                               # %lor.lhs.false328
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB76_149
.LBB76_146:                             # %land.lhs.true331
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB76_149
# BB#147:                               # %land.lhs.true335
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB76_149
# BB#148:                               # %land.lhs.true335
	cmpq	$2, %rax
	jne	.LBB76_108
.LBB76_149:                             # %if.else242
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB76_107
	jmp	.LBB76_140
.LBB76_125:                             # %sw.bb252
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB76_128
# BB#126:                               # %lor.lhs.false254
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB76_135
# BB#127:                               # %land.lhs.true258
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB76_134
.LBB76_128:                             # %land.lhs.true262
	cmpq	$3, %rax
	jne	.LBB76_130
# BB#129:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_118:                             # %sw.bb223
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB76_119
# BB#120:                               # %lor.lhs.false226
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB76_108
# BB#121:                               # %if.else231
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB76_10
# BB#122:
	movabsq	$0, %rax
	jmp	.LBB76_11
.LBB76_109:                             # %sw.bb185
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %ecx
	movl	which_alternative(%rip), %eax
	testq	%rcx, %rcx
	je	.LBB76_114
# BB#110:                               # %sw.bb185
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jb	.LBB76_114
# BB#111:                               # %land.lhs.true197
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB76_113
# BB#112:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_105:                             # %sw.bb169
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB76_140
# BB#106:                               # %sw.bb169
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jbe	.LBB76_107
	jmp	.LBB76_140
.LBB76_101:                             # %sw.bb159
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB76_102
# BB#103:                               # %if.else162
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB76_10
# BB#104:
	movabsq	$0, %rax
	jmp	.LBB76_11
.LBB76_91:                              # %sw.bb145
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB76_93
# BB#92:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_81:                              # %sw.bb131
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB76_83
# BB#82:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_71:                              # %sw.bb117
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB76_73
# BB#72:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_61:                              # %sw.bb104
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB76_64
# BB#62:                                # %land.lhs.true106
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB76_63
.LBB76_64:                              # %lor.lhs.false109
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB76_66
# BB#65:                                # %lor.lhs.false109
	movq	%rcx, %rdx
.LBB76_66:                              # %lor.lhs.false109
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB76_68
# BB#67:                                # %lor.lhs.false109
	movq	%rcx, %rsi
.LBB76_68:                              # %lor.lhs.false109
	orq	%rsi, %rdx
	jne	.LBB76_70
# BB#69:                                # %lor.lhs.false109
	movq	%rcx, %rax
.LBB76_70:                              # %lor.lhs.false109
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_51:                              # %sw.bb91
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB76_54
# BB#52:                                # %land.lhs.true93
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB76_53
.LBB76_54:                              # %lor.lhs.false96
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB76_56
# BB#55:                                # %lor.lhs.false96
	movq	%rcx, %rdx
.LBB76_56:                              # %lor.lhs.false96
	movl	which_alternative(%rip), %esi
	cmpq	$3, %rsi
	movq	%rax, %rsi
	jne	.LBB76_58
# BB#57:                                # %lor.lhs.false96
	movq	%rcx, %rsi
.LBB76_58:                              # %lor.lhs.false96
	orq	%rsi, %rdx
	jne	.LBB76_60
# BB#59:                                # %lor.lhs.false96
	movq	%rcx, %rax
.LBB76_60:                              # %lor.lhs.false96
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_35:                              # %sw.bb49
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$1, %rbx
	jne	.LBB76_108
# BB#36:                                # %land.lhs.true51
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB76_108
# BB#37:                                # %lor.lhs.false55
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB76_108
# BB#38:                                # %lor.lhs.false55
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	je	.LBB76_33
	jmp	.LBB76_108
.LBB76_31:                              # %sw.bb35
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB76_108
# BB#32:                                # %lor.lhs.false37
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB76_108
.LBB76_33:                              # %lor.lhs.false40
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB76_140
# BB#34:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB76_108
	jmp	.LBB76_140
.LBB76_22:                              # %sw.bb24
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB76_24
# BB#23:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_16:                              # %sw.bb11
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB76_17
# BB#18:                                # %lor.lhs.false13
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB76_19
# BB#20:                                # %if.else17
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB76_10
# BB#21:
	movabsq	$0, %rax
	jmp	.LBB76_11
.LBB76_4:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB76_5
# BB#6:                                 # %lor.lhs.false
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB76_7
# BB#8:                                 # %if.else
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB76_9
.LBB76_10:                              # %if.else
	movabsq	$1, %rax
.LBB76_11:                              # %if.else
	leaq	1(%rax,%rax), %rax
.LBB76_12:                              # %sw.epilog
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %rbx
	jb	.LBB76_108
# BB#13:                                # %sw.epilog
	cmpq	$3, %rax
	je	.LBB76_140
# BB#14:                                # %sw.epilog
	cmpq	$2, %rax
	jne	.LBB76_163
.LBB76_15:                              # %sw.bb417
	movq	$2, %rbx
	jmp	.LBB76_108
.LBB76_46:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_48:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_93:                              # %lor.lhs.false148
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB76_94
# BB#95:                                # %lor.lhs.false148
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB76_96
# BB#97:                                # %lor.lhs.false153
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB76_98
# BB#99:                                # %lor.lhs.false153
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_83:                              # %lor.lhs.false134
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB76_84
# BB#85:                                # %lor.lhs.false134
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB76_86
# BB#87:                                # %lor.lhs.false139
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB76_88
# BB#89:                                # %lor.lhs.false139
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_73:                              # %lor.lhs.false120
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB76_74
# BB#75:                                # %lor.lhs.false120
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB76_76
# BB#77:                                # %lor.lhs.false125
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB76_78
# BB#79:                                # %lor.lhs.false125
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_24:                              # %lor.lhs.false27
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB76_26
# BB#25:                                # %lor.lhs.false27
	movq	%rcx, %rdx
.LBB76_26:                              # %lor.lhs.false27
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB76_28
# BB#27:                                # %lor.lhs.false27
	movq	%rcx, %rsi
.LBB76_28:                              # %lor.lhs.false27
	orq	%rsi, %rdx
	jne	.LBB76_30
# BB#29:                                # %lor.lhs.false27
	movq	%rcx, %rax
.LBB76_30:                              # %lor.lhs.false27
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_17:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_5:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_130:                             # %land.lhs.true262
	cmpq	$5, %rax
	jne	.LBB76_132
# BB#131:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_119:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_102:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_156:                             # %land.lhs.true374.if.else378_crit_edge
	movl	which_alternative(%rip), %eax
.LBB76_157:                             # %if.else378
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB76_140
# BB#158:                               # %land.lhs.true390
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB76_107
# BB#159:                               # %lor.lhs.false392
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB76_117
.LBB76_113:                             # %land.lhs.true197.if.else201_crit_edge
	movl	which_alternative(%rip), %eax
.LBB76_114:                             # %if.else201
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB76_140
# BB#115:                               # %land.lhs.true211
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB76_107
# BB#116:                               # %lor.lhs.false213
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
.LBB76_117:                             # %lor.lhs.false213
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB76_140
	jmp	.LBB76_107
.LBB76_63:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_53:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_19:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_7:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_9:
	movabsq	$0, %rax
	jmp	.LBB76_11
.LBB76_132:                             # %lor.lhs.false266
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB76_134
# BB#133:                               # %lor.lhs.false266
	cmpq	$2, %rax
	je	.LBB76_108
.LBB76_134:                             # %if.else273
	cmpq	$3, %rax
	jne	.LBB76_137
.LBB76_135:                             # %land.lhs.true275
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB76_107
# BB#136:                               # %lor.lhs.false279
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB76_140
	jmp	.LBB76_107
.LBB76_94:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_96:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_98:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_84:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_86:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_88:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_74:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_76:
	movq	$1, %rbx
	jmp	.LBB76_108
.LBB76_78:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB76_12
.LBB76_137:                             # %land.lhs.true293
	cmpq	$5, %rax
	je	.LBB76_140
# BB#138:                               # %land.lhs.true297
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB76_107
# BB#139:                               # %land.lhs.true297
	cmpq	$2, %rax
	je	.LBB76_140
.LBB76_107:                             # %land.lhs.true179
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	je	.LBB76_108
.LBB76_140:                             # %sw.bb418
	movq	$17, %rbx
.LBB76_108:                             # %return
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB76_163:                             # %sw.default419
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alu_unit_conflict_cost, %rcx
	movq	$27466, %rsi            # imm = 0x6B4A
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp746:
	.size	k6_alu_unit_conflict_cost, .Ltmp746-k6_alu_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI76_0:
	.quad	.LBB76_160
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_152
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_150
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_141
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_150
	.quad	.LBB76_150
	.quad	.LBB76_150
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_125
	.quad	.LBB76_150
	.quad	.LBB76_150
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_123
	.quad	.LBB76_123
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_123
	.quad	.LBB76_118
	.quad	.LBB76_150
	.quad	.LBB76_150
	.quad	.LBB76_150
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_109
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_150
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_105
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_101
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_91
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_81
	.quad	.LBB76_71
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_61
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_51
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_15
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_45
	.quad	.LBB76_39
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_45
	.quad	.LBB76_35
	.quad	.LBB76_39
	.quad	.LBB76_31
	.quad	.LBB76_45
	.quad	.LBB76_39
	.quad	.LBB76_39
	.quad	.LBB76_22
	.quad	.LBB76_39
	.quad	.LBB76_39
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_108
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_140
	.quad	.LBB76_16
	.quad	.LBB76_4

	.text
	.align	16, 0x90
	.type	k6_alu_unit_blockage,@function
k6_alu_unit_blockage:                   # @k6_alu_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp751:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp752:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp753:
	.cfi_def_cfa_offset 32
.Ltmp754:
	.cfi_offset %rbx, -32
.Ltmp755:
	.cfi_offset %r14, -24
.Ltmp756:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB77_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB77_2:                               # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$637, %rax              # imm = 0x27D
	ja	.LBB77_140
# BB#3:                                 # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI77_0(,%rax,8)
.LBB77_150:                             # %sw.bb354
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB77_10
# BB#151:
	movabsq	$0, %rax
	jmp	.LBB77_11
.LBB77_39:                              # %sw.bb70
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB77_41
# BB#40:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_123:                             # %sw.bb238
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	jne	.LBB77_149
# BB#124:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_45:                              # %sw.bb79
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB77_46
# BB#47:                                # %sw.bb79
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB77_48
# BB#49:                                # %lor.lhs.false84
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB77_43
# BB#50:
	movabsq	$0, %rax
	jmp	.LBB77_44
.LBB77_41:                              # %lor.lhs.false73
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB77_42
.LBB77_43:                              # %lor.lhs.false73
	movabsq	$1, %rax
	jmp	.LBB77_44
.LBB77_42:
	movabsq	$0, %rax
.LBB77_44:                              # %lor.lhs.false73
	xorq	$1, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_160:                             # %sw.bb403
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB77_140
# BB#161:                               # %land.lhs.true407
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB77_140
# BB#162:                               # %if.then413
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alu_unit_blockage, %rcx
	movq	$26821, %rdx            # imm = 0x68C5
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB77_152:                             # %sw.bb360
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %ecx
	movl	which_alternative(%rip), %eax
	testq	%rcx, %rcx
	je	.LBB77_157
# BB#153:                               # %sw.bb360
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$6, %rcx
	jb	.LBB77_157
# BB#154:                               # %land.lhs.true374
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB77_156
# BB#155:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_141:                             # %sw.bb310
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB77_144
# BB#142:                               # %lor.lhs.false314
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB77_149
# BB#143:                               # %land.lhs.true318
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB77_149
.LBB77_144:                             # %land.lhs.true322
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	ja	.LBB77_146
# BB#145:                               # %lor.lhs.false328
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
	testq	%r15, %rax
	jne	.LBB77_149
.LBB77_146:                             # %land.lhs.true331
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB77_149
# BB#147:                               # %land.lhs.true335
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	ja	.LBB77_149
# BB#148:                               # %land.lhs.true335
	cmpq	$2, %rax
	jne	.LBB77_108
.LBB77_149:                             # %if.else242
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	je	.LBB77_107
	jmp	.LBB77_140
.LBB77_125:                             # %sw.bb252
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB77_128
# BB#126:                               # %lor.lhs.false254
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB77_135
# BB#127:                               # %land.lhs.true258
	movl	x86_qimode_math(%rip), %esi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB77_134
.LBB77_128:                             # %land.lhs.true262
	cmpq	$3, %rax
	jne	.LBB77_130
# BB#129:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_118:                             # %sw.bb223
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB77_119
# BB#120:                               # %lor.lhs.false226
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	jne	.LBB77_108
# BB#121:                               # %if.else231
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB77_10
# BB#122:
	movabsq	$0, %rax
	jmp	.LBB77_11
.LBB77_109:                             # %sw.bb185
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %ecx
	movl	which_alternative(%rip), %eax
	testq	%rcx, %rcx
	je	.LBB77_114
# BB#110:                               # %sw.bb185
	leaq	-4(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$5, %rcx
	jb	.LBB77_114
# BB#111:                               # %land.lhs.true197
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%r15, %rax
	je	.LBB77_113
# BB#112:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_105:                             # %sw.bb169
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jb	.LBB77_140
# BB#106:                               # %sw.bb169
	addq	$-3, %rax
	andq	%r15, %rax
	cmpq	$1, %rax
	jbe	.LBB77_107
	jmp	.LBB77_140
.LBB77_101:                             # %sw.bb159
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB77_102
# BB#103:                               # %if.else162
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB77_10
# BB#104:
	movabsq	$0, %rax
	jmp	.LBB77_11
.LBB77_91:                              # %sw.bb145
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB77_93
# BB#92:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_81:                              # %sw.bb131
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB77_83
# BB#82:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_71:                              # %sw.bb117
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB77_73
# BB#72:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_61:                              # %sw.bb104
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB77_64
# BB#62:                                # %land.lhs.true106
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB77_63
.LBB77_64:                              # %lor.lhs.false109
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB77_66
# BB#65:                                # %lor.lhs.false109
	movq	%rcx, %rdx
.LBB77_66:                              # %lor.lhs.false109
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB77_68
# BB#67:                                # %lor.lhs.false109
	movq	%rcx, %rsi
.LBB77_68:                              # %lor.lhs.false109
	orq	%rsi, %rdx
	jne	.LBB77_70
# BB#69:                                # %lor.lhs.false109
	movq	%rcx, %rax
.LBB77_70:                              # %lor.lhs.false109
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_51:                              # %sw.bb91
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	je	.LBB77_54
# BB#52:                                # %land.lhs.true93
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	je	.LBB77_53
.LBB77_54:                              # %lor.lhs.false96
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%r15, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	je	.LBB77_56
# BB#55:                                # %lor.lhs.false96
	movq	%rcx, %rdx
.LBB77_56:                              # %lor.lhs.false96
	movl	which_alternative(%rip), %esi
	cmpq	$3, %rsi
	movq	%rax, %rsi
	jne	.LBB77_58
# BB#57:                                # %lor.lhs.false96
	movq	%rcx, %rsi
.LBB77_58:                              # %lor.lhs.false96
	orq	%rsi, %rdx
	jne	.LBB77_60
# BB#59:                                # %lor.lhs.false96
	movq	%rcx, %rax
.LBB77_60:                              # %lor.lhs.false96
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_35:                              # %sw.bb49
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	movq	$1, %rbx
	jne	.LBB77_108
# BB#36:                                # %land.lhs.true51
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB77_108
# BB#37:                                # %lor.lhs.false55
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB77_108
# BB#38:                                # %lor.lhs.false55
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	je	.LBB77_33
	jmp	.LBB77_108
.LBB77_31:                              # %sw.bb35
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB77_108
# BB#32:                                # %lor.lhs.false37
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB77_108
.LBB77_33:                              # %lor.lhs.false40
	movl	ix86_cpu(%rip), %ecx
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB77_140
# BB#34:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB77_108
	jmp	.LBB77_140
.LBB77_22:                              # %sw.bb24
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	jne	.LBB77_24
# BB#23:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_16:                              # %sw.bb11
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB77_17
# BB#18:                                # %lor.lhs.false13
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB77_19
# BB#20:                                # %if.else17
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	jne	.LBB77_10
# BB#21:
	movabsq	$0, %rax
	jmp	.LBB77_11
.LBB77_4:                               # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB77_5
# BB#6:                                 # %lor.lhs.false
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	testq	%r15, %rax
	je	.LBB77_7
# BB#8:                                 # %if.else
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	je	.LBB77_9
.LBB77_10:                              # %if.else
	movabsq	$1, %rax
.LBB77_11:                              # %if.else
	leaq	1(%rax,%rax), %rax
.LBB77_12:                              # %sw.epilog
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %rbx
	jb	.LBB77_108
# BB#13:                                # %sw.epilog
	cmpq	$3, %rax
	je	.LBB77_140
# BB#14:                                # %sw.epilog
	cmpq	$2, %rax
	jne	.LBB77_163
.LBB77_15:                              # %sw.bb417
	movq	$2, %rbx
	jmp	.LBB77_108
.LBB77_46:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_48:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_93:                              # %lor.lhs.false148
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB77_94
# BB#95:                                # %lor.lhs.false148
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB77_96
# BB#97:                                # %lor.lhs.false153
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB77_98
# BB#99:                                # %lor.lhs.false153
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_83:                              # %lor.lhs.false134
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB77_84
# BB#85:                                # %lor.lhs.false134
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB77_86
# BB#87:                                # %lor.lhs.false139
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB77_88
# BB#89:                                # %lor.lhs.false139
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_73:                              # %lor.lhs.false120
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$10, %rax
	je	.LBB77_74
# BB#75:                                # %lor.lhs.false120
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB77_76
# BB#77:                                # %lor.lhs.false125
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB77_78
# BB#79:                                # %lor.lhs.false125
	movabsq	$1, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_24:                              # %lor.lhs.false27
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rdx
	jne	.LBB77_26
# BB#25:                                # %lor.lhs.false27
	movq	%rcx, %rdx
.LBB77_26:                              # %lor.lhs.false27
	movl	which_alternative(%rip), %esi
	cmpq	$2, %rsi
	movq	%rax, %rsi
	jne	.LBB77_28
# BB#27:                                # %lor.lhs.false27
	movq	%rcx, %rsi
.LBB77_28:                              # %lor.lhs.false27
	orq	%rsi, %rdx
	jne	.LBB77_30
# BB#29:                                # %lor.lhs.false27
	movq	%rcx, %rax
.LBB77_30:                              # %lor.lhs.false27
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_17:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_5:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_130:                             # %land.lhs.true262
	cmpq	$5, %rax
	jne	.LBB77_132
# BB#131:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_119:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_102:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_156:                             # %land.lhs.true374.if.else378_crit_edge
	movl	which_alternative(%rip), %eax
.LBB77_157:                             # %if.else378
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB77_140
# BB#158:                               # %land.lhs.true390
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB77_107
# BB#159:                               # %lor.lhs.false392
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	jmp	.LBB77_117
.LBB77_113:                             # %land.lhs.true197.if.else201_crit_edge
	movl	which_alternative(%rip), %eax
.LBB77_114:                             # %if.else201
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB77_140
# BB#115:                               # %land.lhs.true211
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB77_107
# BB#116:                               # %lor.lhs.false213
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
.LBB77_117:                             # %lor.lhs.false213
	callq	symbolic_operand
	testq	%r15, %rax
	jne	.LBB77_140
	jmp	.LBB77_107
.LBB77_63:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_53:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_19:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_7:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_9:
	movabsq	$0, %rax
	jmp	.LBB77_11
.LBB77_132:                             # %lor.lhs.false266
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %edx
	movq	$1, %rbx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB77_134
# BB#133:                               # %lor.lhs.false266
	cmpq	$2, %rax
	je	.LBB77_108
.LBB77_134:                             # %if.else273
	cmpq	$3, %rax
	jne	.LBB77_137
.LBB77_135:                             # %land.lhs.true275
	movl	x86_partial_reg_stall(%rip), %edx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB77_107
# BB#136:                               # %lor.lhs.false279
	movl	x86_qimode_math(%rip), %ecx
	andq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB77_140
	jmp	.LBB77_107
.LBB77_94:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_96:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_98:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_84:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_86:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_88:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_74:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_76:
	movq	$1, %rbx
	jmp	.LBB77_108
.LBB77_78:
	movabsq	$0, %rax
	leaq	(%rax,%rax,2), %rax
	jmp	.LBB77_12
.LBB77_137:                             # %land.lhs.true293
	cmpq	$5, %rax
	je	.LBB77_140
# BB#138:                               # %land.lhs.true297
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB77_107
# BB#139:                               # %land.lhs.true297
	cmpq	$2, %rax
	je	.LBB77_140
.LBB77_107:                             # %land.lhs.true179
	movq	%r14, %rdi
	callq	get_attr_memory
	testq	%r15, %rax
	movq	$1, %rbx
	je	.LBB77_108
.LBB77_140:                             # %sw.bb418
	movq	$17, %rbx
.LBB77_108:                             # %return
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB77_163:                             # %sw.default419
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_alu_unit_blockage, %rcx
	movq	$26844, %rsi            # imm = 0x68DC
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp757:
	.size	k6_alu_unit_blockage, .Ltmp757-k6_alu_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI77_0:
	.quad	.LBB77_160
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_152
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_150
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_141
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_150
	.quad	.LBB77_150
	.quad	.LBB77_150
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_125
	.quad	.LBB77_150
	.quad	.LBB77_150
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_123
	.quad	.LBB77_123
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_123
	.quad	.LBB77_118
	.quad	.LBB77_150
	.quad	.LBB77_150
	.quad	.LBB77_150
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_109
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_150
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_105
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_101
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_91
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_81
	.quad	.LBB77_71
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_61
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_51
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_15
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_45
	.quad	.LBB77_39
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_45
	.quad	.LBB77_35
	.quad	.LBB77_39
	.quad	.LBB77_31
	.quad	.LBB77_45
	.quad	.LBB77_39
	.quad	.LBB77_39
	.quad	.LBB77_22
	.quad	.LBB77_39
	.quad	.LBB77_39
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_108
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_140
	.quad	.LBB77_16
	.quad	.LBB77_4

	.text
	.align	16, 0x90
	.type	k6_load_unit_conflict_cost,@function
k6_load_unit_conflict_cost:             # @k6_load_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp762:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp763:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp764:
	.cfi_def_cfa_offset 32
.Ltmp765:
	.cfi_offset %rbx, -32
.Ltmp766:
	.cfi_offset %r14, -24
.Ltmp767:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB78_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB78_2:                               # %cond.end
	movq	$1, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$800, %rdx              # imm = 0x320
	jg	.LBB78_33
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$763, %rdx              # imm = 0x2FB
	jg	.LBB78_32
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$725, %rdx              # imm = 0x2D5
	jg	.LBB78_54
# BB#5:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$560, %rdx              # imm = 0x230
	jg	.LBB78_30
# BB#6:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$489, %rdx              # imm = 0x1E9
	jg	.LBB78_24
# BB#7:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$447, %rdx              # imm = 0x1BF
	jg	.LBB78_23
# BB#8:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$422, %rdx              # imm = 0x1A6
	jg	.LBB78_22
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$164, %rdx
	jg	.LBB78_12
# BB#10:                                # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$133, %rax
	ja	.LBB78_55
# BB#11:                                # %cond.end
	jmpq	*.LJTI78_2(,%rax,8)
.LBB78_44:                              # %sw.bb17
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB78_35
	jmp	.LBB78_45
.LBB78_33:                              # %cond.end
	addq	$-801, %rax             # imm = 0xFFFFFFFFFFFFFCDF
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$4, %rcx
	ja	.LBB78_55
# BB#34:                                # %cond.end
	cmpq	$1, %rcx
	jne	.LBB78_35
	jmp	.LBB78_55
.LBB78_32:                              # %cond.end
	addq	$-764, %rax             # imm = 0xFFFFFFFFFFFFFD04
.LBB78_14:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jb	.LBB78_35
	jmp	.LBB78_55
.LBB78_54:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$726, %rax              # imm = 0x2D6
	je	.LBB78_35
	jmp	.LBB78_55
.LBB78_30:                              # %cond.end
	addq	$-561, %rax             # imm = 0xFFFFFFFFFFFFFDCF
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$97, %rax
	ja	.LBB78_55
# BB#31:                                # %cond.end
	jmpq	*.LJTI78_0(,%rax,8)
.LBB78_36:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	jne	.LBB78_38
# BB#37:
	movabsq	$0, %rax
	jmp	.LBB78_39
.LBB78_24:                              # %cond.end
	addq	$-490, %rax             # imm = 0xFFFFFFFFFFFFFE16
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$34, %rax
	ja	.LBB78_55
# BB#25:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$34015809532, %rcx      # imm = 0x7EB800FFC
	testq	%rcx, %rsi
	jne	.LBB78_35
# BB#26:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$67235843, %rdx         # imm = 0x401F003
	je	.LBB78_27
# BB#42:                                # %sw.bb11
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB78_38
# BB#43:
	movabsq	$0, %rax
	jmp	.LBB78_39
.LBB78_23:                              # %cond.end
	addq	$-448, %rax             # imm = 0xFFFFFFFFFFFFFE40
	jmp	.LBB78_14
.LBB78_22:                              # %cond.end
	addq	$-423, %rax             # imm = 0xFFFFFFFFFFFFFE59
	jmp	.LBB78_14
.LBB78_12:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$184, %rdx
	jg	.LBB78_15
# BB#13:                                # %cond.end
	addq	$-165, %rax
	jmp	.LBB78_14
.LBB78_27:                              # %cond.end
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$8126464, %rdx          # imm = 0x7C0000
	je	.LBB78_55
# BB#28:                                # %sw.bb5
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	jne	.LBB78_38
# BB#29:
	movabsq	$0, %rax
	jmp	.LBB78_39
.LBB78_15:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$229, %rdx
	jg	.LBB78_18
# BB#16:                                # %cond.end
	addq	$-185, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$16, %rcx
	ja	.LBB78_55
# BB#17:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$130945, %rax           # imm = 0x1FF81
	jne	.LBB78_35
	jmp	.LBB78_55
.LBB78_18:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$267, %rdx              # imm = 0x10B
	jg	.LBB78_20
# BB#19:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$230, %rax
	je	.LBB78_35
	jmp	.LBB78_55
.LBB78_20:                              # %cond.end
	addq	$-268, %rax             # imm = 0xFFFFFFFFFFFFFEF4
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$138, %rcx
	ja	.LBB78_55
# BB#21:                                # %cond.end
	jmpq	*.LJTI78_1(,%rcx,8)
.LBB78_47:                              # %sw.bb33
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB78_38
# BB#48:
	movabsq	$0, %rax
	jmp	.LBB78_39
.LBB78_49:                              # %sw.bb39
	movq	%rbx, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB78_50
.LBB78_38:                              # %sw.bb
	movabsq	$1, %rax
.LBB78_39:                              # %sw.epilog
	testq	%rax, %rax
	je	.LBB78_55
# BB#40:                                # %sw.epilog
	je	.LBB78_41
.LBB78_35:                              # %sw.bb59
	movq	$10, %r14
.LBB78_55:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB78_50:
	movabsq	$0, %rax
	jmp	.LBB78_39
.LBB78_51:                              # %sw.bb45
	movq	32(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB78_35
# BB#52:                                # %land.lhs.true49
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB78_35
# BB#53:                                # %if.then55
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_load_unit_conflict_cost, %rcx
	movq	$26032, %rdx            # imm = 0x65B0
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB78_46:                              # %sw.bb24
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB78_35
.LBB78_45:                              # %land.lhs.true
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB78_55
	jmp	.LBB78_35
.LBB78_41:                              # %sw.default60
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_load_unit_conflict_cost, %rcx
	movq	$26222, %rsi            # imm = 0x666E
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp768:
	.size	k6_load_unit_conflict_cost, .Ltmp768-k6_load_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI78_0:
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_36
	.quad	.LBB78_36
	.quad	.LBB78_36
	.quad	.LBB78_36
	.quad	.LBB78_36
	.quad	.LBB78_36
	.quad	.LBB78_35
	.quad	.LBB78_35
.LJTI78_1:
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
.LJTI78_2:
	.quad	.LBB78_51
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_49
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_46
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_44
	.quad	.LBB78_44
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_47
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_55
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35
	.quad	.LBB78_35

	.text
	.align	16, 0x90
	.type	k6_load_unit_blockage,@function
k6_load_unit_blockage:                  # @k6_load_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp773:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp774:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp775:
	.cfi_def_cfa_offset 32
.Ltmp776:
	.cfi_offset %rbx, -32
.Ltmp777:
	.cfi_offset %r14, -24
.Ltmp778:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB79_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB79_2:                               # %cond.end
	movq	$1, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$800, %rdx              # imm = 0x320
	jg	.LBB79_33
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$763, %rdx              # imm = 0x2FB
	jg	.LBB79_32
# BB#4:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$725, %rdx              # imm = 0x2D5
	jg	.LBB79_54
# BB#5:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$560, %rdx              # imm = 0x230
	jg	.LBB79_30
# BB#6:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$489, %rdx              # imm = 0x1E9
	jg	.LBB79_24
# BB#7:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$447, %rdx              # imm = 0x1BF
	jg	.LBB79_23
# BB#8:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$422, %rdx              # imm = 0x1A6
	jg	.LBB79_22
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$164, %rdx
	jg	.LBB79_12
# BB#10:                                # %cond.end
	incq	%rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$133, %rax
	ja	.LBB79_55
# BB#11:                                # %cond.end
	jmpq	*.LJTI79_2(,%rax,8)
.LBB79_44:                              # %sw.bb17
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB79_35
	jmp	.LBB79_45
.LBB79_33:                              # %cond.end
	addq	$-801, %rax             # imm = 0xFFFFFFFFFFFFFCDF
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$4, %rcx
	ja	.LBB79_55
# BB#34:                                # %cond.end
	cmpq	$1, %rcx
	jne	.LBB79_35
	jmp	.LBB79_55
.LBB79_32:                              # %cond.end
	addq	$-764, %rax             # imm = 0xFFFFFFFFFFFFFD04
.LBB79_14:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jb	.LBB79_35
	jmp	.LBB79_55
.LBB79_54:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$726, %rax              # imm = 0x2D6
	je	.LBB79_35
	jmp	.LBB79_55
.LBB79_30:                              # %cond.end
	addq	$-561, %rax             # imm = 0xFFFFFFFFFFFFFDCF
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$97, %rax
	ja	.LBB79_55
# BB#31:                                # %cond.end
	jmpq	*.LJTI79_0(,%rax,8)
.LBB79_36:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	jne	.LBB79_38
# BB#37:
	movabsq	$0, %rax
	jmp	.LBB79_39
.LBB79_24:                              # %cond.end
	addq	$-490, %rax             # imm = 0xFFFFFFFFFFFFFE16
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$34, %rax
	ja	.LBB79_55
# BB#25:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$34015809532, %rcx      # imm = 0x7EB800FFC
	testq	%rcx, %rsi
	jne	.LBB79_35
# BB#26:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$67235843, %rdx         # imm = 0x401F003
	je	.LBB79_27
# BB#42:                                # %sw.bb11
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB79_38
# BB#43:
	movabsq	$0, %rax
	jmp	.LBB79_39
.LBB79_23:                              # %cond.end
	addq	$-448, %rax             # imm = 0xFFFFFFFFFFFFFE40
	jmp	.LBB79_14
.LBB79_22:                              # %cond.end
	addq	$-423, %rax             # imm = 0xFFFFFFFFFFFFFE59
	jmp	.LBB79_14
.LBB79_12:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$184, %rdx
	jg	.LBB79_15
# BB#13:                                # %cond.end
	addq	$-165, %rax
	jmp	.LBB79_14
.LBB79_27:                              # %cond.end
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	testq	$8126464, %rdx          # imm = 0x7C0000
	je	.LBB79_55
# BB#28:                                # %sw.bb5
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data(%rip), %rdi
	xorq	%rsi, %rsi
	callq	constant_call_address_operand
	testq	%r15, %rax
	jne	.LBB79_38
# BB#29:
	movabsq	$0, %rax
	jmp	.LBB79_39
.LBB79_15:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$229, %rdx
	jg	.LBB79_18
# BB#16:                                # %cond.end
	addq	$-185, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$16, %rcx
	ja	.LBB79_55
# BB#17:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$130945, %rax           # imm = 0x1FF81
	jne	.LBB79_35
	jmp	.LBB79_55
.LBB79_18:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$267, %rdx              # imm = 0x10B
	jg	.LBB79_20
# BB#19:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$230, %rax
	je	.LBB79_35
	jmp	.LBB79_55
.LBB79_20:                              # %cond.end
	addq	$-268, %rax             # imm = 0xFFFFFFFFFFFFFEF4
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$138, %rcx
	ja	.LBB79_55
# BB#21:                                # %cond.end
	jmpq	*.LJTI79_1(,%rcx,8)
.LBB79_47:                              # %sw.bb33
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	testq	%rcx, %rax
	je	.LBB79_38
# BB#48:
	movabsq	$0, %rax
	jmp	.LBB79_39
.LBB79_49:                              # %sw.bb39
	movq	%rbx, %rdi
	callq	get_attr_memory
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$1, %rcx
	je	.LBB79_50
.LBB79_38:                              # %sw.bb
	movabsq	$1, %rax
.LBB79_39:                              # %sw.epilog
	testq	%rax, %rax
	je	.LBB79_55
# BB#40:                                # %sw.epilog
	je	.LBB79_41
.LBB79_35:                              # %sw.bb59
	movq	$10, %r14
.LBB79_55:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB79_50:
	movabsq	$0, %rax
	jmp	.LBB79_39
.LBB79_51:                              # %sw.bb45
	movq	32(%rbx), %rax
	movzbl	(%rax), %ecx
	cmpq	$40, %rcx
	je	.LBB79_35
# BB#52:                                # %land.lhs.true49
	movq	%rax, %rdi
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB79_35
# BB#53:                                # %if.then55
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_load_unit_blockage, %rcx
	movq	$25623, %rdx            # imm = 0x6417
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB79_46:                              # %sw.bb24
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB79_35
.LBB79_45:                              # %land.lhs.true
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	jne	.LBB79_55
	jmp	.LBB79_35
.LBB79_41:                              # %sw.default60
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_load_unit_blockage, %rcx
	movq	$25813, %rsi            # imm = 0x64D5
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp779:
	.size	k6_load_unit_blockage, .Ltmp779-k6_load_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI79_0:
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_36
	.quad	.LBB79_36
	.quad	.LBB79_36
	.quad	.LBB79_36
	.quad	.LBB79_36
	.quad	.LBB79_36
	.quad	.LBB79_35
	.quad	.LBB79_35
.LJTI79_1:
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
.LJTI79_2:
	.quad	.LBB79_51
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_49
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_46
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_44
	.quad	.LBB79_44
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_47
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_55
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35
	.quad	.LBB79_35

	.text
	.align	16, 0x90
	.type	k6_store_unit_conflict_cost,@function
k6_store_unit_conflict_cost:            # @k6_store_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp784:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp785:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp786:
	.cfi_def_cfa_offset 32
.Ltmp787:
	.cfi_offset %rbx, -32
.Ltmp788:
	.cfi_offset %r14, -24
.Ltmp789:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB80_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB80_2:                               # %cond.end
	movq	$1, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$44, %rdx
	jg	.LBB80_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB80_56
# BB#4:                                 # %sw.bb92
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB80_56
# BB#5:                                 # %land.lhs.true96
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB80_56
# BB#6:                                 # %if.then102
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_store_unit_conflict_cost, %rcx
	movq	$25384, %rdx            # imm = 0x6328
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB80_7:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$83, %rdx
	jg	.LBB80_12
# BB#8:                                 # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$45, %rax
	jne	.LBB80_56
# BB#9:                                 # %sw.bb72
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB80_56
# BB#10:                                # %sw.bb72
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB80_56
# BB#11:                                # %land.lhs.true86
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	jmp	.LBB80_56
.LBB80_12:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$201, %rdx
	jg	.LBB80_17
# BB#13:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$84, %rax
	jne	.LBB80_56
# BB#14:                                # %sw.bb54
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB80_56
# BB#15:                                # %sw.bb54
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB80_56
# BB#16:                                # %land.lhs.true66
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	jmp	.LBB80_56
.LBB80_17:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$582, %rdx              # imm = 0x246
	jg	.LBB80_36
# BB#18:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$402, %rdx              # imm = 0x192
	jg	.LBB80_31
# BB#19:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$220, %rdx
	jg	.LBB80_28
# BB#20:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$214, %rdx
	jg	.LBB80_27
# BB#21:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$202, %rax
	je	.LBB80_48
# BB#22:                                # %cond.end
	cmpq	$207, %rax
	jne	.LBB80_23
# BB#45:                                # %sw.bb37
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB80_56
# BB#46:                                # %lor.lhs.false39
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB80_51
# BB#47:
	movabsq	$0, %rax
	jmp	.LBB80_52
.LBB80_36:                              # %cond.end
	leaq	-583(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$30, %rdx
	jae	.LBB80_37
# BB#55:                                # %sw.bb105
	movq	$10, %r14
	jmp	.LBB80_56
.LBB80_31:                              # %cond.end
	addq	$-403, %rax             # imm = 0xFFFFFFFFFFFFFE6D
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$12, %rcx
	ja	.LBB80_56
# BB#32:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$609, %rax              # imm = 0x261
	je	.LBB80_33
# BB#43:                                # %sw.bb15
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$1, %rcx
	je	.LBB80_53
# BB#44:                                # %select.mid
	movq	$2, %rax
	jmp	.LBB80_53
.LBB80_28:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$221, %rax
	jne	.LBB80_56
# BB#29:                                # %sw.bb20
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$3, %rcx
	je	.LBB80_53
# BB#30:                                # %select.mid2
	movq	$2, %rax
	jmp	.LBB80_53
.LBB80_27:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$215, %rax
	je	.LBB80_34
	jmp	.LBB80_56
.LBB80_37:                              # %cond.end
	andq	%rcx, %rax
	cmpq	$635, %rax              # imm = 0x27B
	jne	.LBB80_38
# BB#41:                                # %sw.bb6
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB80_56
# BB#42:                                # %land.lhs.true8
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	jmp	.LBB80_56
.LBB80_33:                              # %cond.end
	cmpq	$12, %rcx
	jne	.LBB80_56
.LBB80_34:                              # %sw.bb25
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$2, %rcx
	je	.LBB80_53
# BB#35:                                # %select.mid4
	movq	$2, %rax
	jmp	.LBB80_53
.LBB80_48:                              # %sw.bb45
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB80_56
# BB#49:                                # %lor.lhs.false47
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB80_51
# BB#50:
	movabsq	$0, %rax
	jmp	.LBB80_52
.LBB80_23:                              # %cond.end
	cmpq	$208, %rax
	jne	.LBB80_56
# BB#24:                                # %sw.bb30
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB80_56
# BB#25:                                # %lor.lhs.false
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB80_26
.LBB80_51:                              # %lor.lhs.false47
	movabsq	$1, %rax
.LBB80_52:                              # %lor.lhs.false47
	addq	%rax, %rax
.LBB80_53:                              # %sw.epilog
	orq	$2, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB80_54
.LBB80_56:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB80_38:                              # %cond.end
	cmpq	$636, %rax              # imm = 0x27C
	jne	.LBB80_56
# BB#39:                                # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB80_56
# BB#40:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	jmp	.LBB80_56
.LBB80_26:
	movabsq	$0, %rax
	jmp	.LBB80_52
.LBB80_54:                              # %sw.default107
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_store_unit_conflict_cost, %rcx
	movq	$25404, %rsi            # imm = 0x633C
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp790:
	.size	k6_store_unit_conflict_cost, .Ltmp790-k6_store_unit_conflict_cost
	.cfi_endproc

	.align	16, 0x90
	.type	k6_store_unit_blockage,@function
k6_store_unit_blockage:                 # @k6_store_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp795:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp796:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp797:
	.cfi_def_cfa_offset 32
.Ltmp798:
	.cfi_offset %rbx, -32
.Ltmp799:
	.cfi_offset %r14, -24
.Ltmp800:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB81_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB81_2:                               # %cond.end
	movq	$1, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$44, %rdx
	jg	.LBB81_7
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB81_56
# BB#4:                                 # %sw.bb92
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB81_56
# BB#5:                                 # %land.lhs.true96
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB81_56
# BB#6:                                 # %if.then102
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_store_unit_blockage, %rcx
	movq	$25175, %rdx            # imm = 0x6257
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB81_7:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$83, %rdx
	jg	.LBB81_12
# BB#8:                                 # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$45, %rax
	jne	.LBB81_56
# BB#9:                                 # %sw.bb72
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB81_56
# BB#10:                                # %sw.bb72
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$6, %rax
	jb	.LBB81_56
# BB#11:                                # %land.lhs.true86
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	jmp	.LBB81_56
.LBB81_12:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$201, %rdx
	jg	.LBB81_17
# BB#13:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$84, %rax
	jne	.LBB81_56
# BB#14:                                # %sw.bb54
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	flag_pic(%rip), %eax
	testq	%rax, %rax
	je	.LBB81_56
# BB#15:                                # %sw.bb54
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%r15, %rax
	cmpq	$5, %rax
	jb	.LBB81_56
# BB#16:                                # %land.lhs.true66
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	jmp	.LBB81_56
.LBB81_17:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$582, %rdx              # imm = 0x246
	jg	.LBB81_36
# BB#18:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$402, %rdx              # imm = 0x192
	jg	.LBB81_31
# BB#19:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$220, %rdx
	jg	.LBB81_28
# BB#20:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$214, %rdx
	jg	.LBB81_27
# BB#21:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$202, %rax
	je	.LBB81_48
# BB#22:                                # %cond.end
	cmpq	$207, %rax
	jne	.LBB81_23
# BB#45:                                # %sw.bb37
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB81_56
# BB#46:                                # %lor.lhs.false39
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB81_51
# BB#47:
	movabsq	$0, %rax
	jmp	.LBB81_52
.LBB81_36:                              # %cond.end
	leaq	-583(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$30, %rdx
	jae	.LBB81_37
# BB#55:                                # %sw.bb105
	movq	$10, %r14
	jmp	.LBB81_56
.LBB81_31:                              # %cond.end
	addq	$-403, %rax             # imm = 0xFFFFFFFFFFFFFE6D
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$12, %rcx
	ja	.LBB81_56
# BB#32:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	testq	$609, %rax              # imm = 0x261
	je	.LBB81_33
# BB#43:                                # %sw.bb15
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$1, %rcx
	je	.LBB81_53
# BB#44:                                # %select.mid
	movq	$2, %rax
	jmp	.LBB81_53
.LBB81_28:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$221, %rax
	jne	.LBB81_56
# BB#29:                                # %sw.bb20
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$3, %rcx
	je	.LBB81_53
# BB#30:                                # %select.mid2
	movq	$2, %rax
	jmp	.LBB81_53
.LBB81_27:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$215, %rax
	je	.LBB81_34
	jmp	.LBB81_56
.LBB81_37:                              # %cond.end
	andq	%rcx, %rax
	cmpq	$635, %rax              # imm = 0x27B
	jne	.LBB81_38
# BB#41:                                # %sw.bb6
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB81_56
# BB#42:                                # %land.lhs.true8
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	const0_operand
	jmp	.LBB81_56
.LBB81_33:                              # %cond.end
	cmpq	$12, %rcx
	jne	.LBB81_56
.LBB81_34:                              # %sw.bb25
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$2, %rcx
	je	.LBB81_53
# BB#35:                                # %select.mid4
	movq	$2, %rax
	jmp	.LBB81_53
.LBB81_48:                              # %sw.bb45
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB81_56
# BB#49:                                # %lor.lhs.false47
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	je	.LBB81_51
# BB#50:
	movabsq	$0, %rax
	jmp	.LBB81_52
.LBB81_23:                              # %cond.end
	cmpq	$208, %rax
	jne	.LBB81_56
# BB#24:                                # %sw.bb30
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB81_56
# BB#25:                                # %lor.lhs.false
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%r15, %rax
	jne	.LBB81_26
.LBB81_51:                              # %lor.lhs.false47
	movabsq	$1, %rax
.LBB81_52:                              # %lor.lhs.false47
	addq	%rax, %rax
.LBB81_53:                              # %sw.epilog
	orq	$2, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jne	.LBB81_54
.LBB81_56:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB81_38:                              # %cond.end
	cmpq	$636, %rax              # imm = 0x27C
	jne	.LBB81_56
# BB#39:                                # %sw.bb
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB81_56
# BB#40:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	const0_operand
	jmp	.LBB81_56
.LBB81_26:
	movabsq	$0, %rax
	jmp	.LBB81_52
.LBB81_54:                              # %sw.default107
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_store_unit_blockage, %rcx
	movq	$25195, %rsi            # imm = 0x626B
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp801:
	.size	k6_store_unit_blockage, .Ltmp801-k6_store_unit_blockage
	.cfi_endproc

	.align	16, 0x90
	.type	k6_fpu_unit_conflict_cost,@function
k6_fpu_unit_conflict_cost:              # @k6_fpu_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp806:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp807:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp808:
	.cfi_def_cfa_offset 32
.Ltmp809:
	.cfi_offset %rbx, -32
.Ltmp810:
	.cfi_offset %r14, -24
.Ltmp811:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB82_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB82_2:                               # %cond.end
	movq	$2, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB82_15
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB82_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB82_62
# BB#5:                                 # %sw.bb127
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB82_62
# BB#6:                                 # %land.lhs.true131
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB82_62
# BB#7:                                 # %if.then137
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_fpu_unit_conflict_cost, %rcx
	movq	$24966, %rdx            # imm = 0x6186
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB82_15:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$33, %rax
	ja	.LBB82_62
# BB#16:                                # %cond.end
	jmpq	*.LJTI82_0(,%rax,8)
.LBB82_22:                              # %sw.bb10
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB82_63
# BB#23:                                # %if.else14
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB82_24
# BB#25:                                # %if.else14
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB82_60
.LBB82_8:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB82_13
# BB#9:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$36, %rax
	ja	.LBB82_62
# BB#10:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	jne	.LBB82_63
# BB#11:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	jne	.LBB82_12
	jmp	.LBB82_62
.LBB82_13:                              # %cond.end
	addq	$-90, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$94, %rcx
	ja	.LBB82_62
# BB#14:                                # %cond.end
	jmpq	*.LJTI82_1(,%rcx,8)
.LBB82_12:                              # %sw.bb121
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	testq	%rcx, %rcx
	jne	.LBB82_59
	jmp	.LBB82_60
.LBB82_17:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB82_63
# BB#18:                                # %if.else
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB82_19
# BB#20:                                # %if.else
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB82_60
.LBB82_31:                              # %sw.bb33
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB82_63
# BB#32:                                # %if.else37
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB82_33
# BB#34:                                # %if.else37
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB82_60
.LBB82_39:                              # %sw.bb57
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB82_63
# BB#40:                                # %if.else61
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB82_41
# BB#42:                                # %if.else61
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB82_60
.LBB82_53:                              # %sw.bb95
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB82_54
# BB#55:                                # %sw.bb95
	movabsq	$1, %rax
	jmp	.LBB82_60
.LBB82_50:                              # %sw.bb80
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB82_62
# BB#51:                                # %land.lhs.true82
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB82_63
# BB#52:                                # %if.else86
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB82_62
	jmp	.LBB82_38
.LBB82_24:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB82_60
.LBB82_19:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB82_60
.LBB82_33:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB82_60
.LBB82_58:                              # %sw.bb112
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$3, %rcx
	jb	.LBB82_60
	jmp	.LBB82_59
.LBB82_47:                              # %sw.bb74
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB82_48
# BB#49:                                # %sw.bb74
	movabsq	$1, %rax
	jmp	.LBB82_60
.LBB82_44:                              # %sw.bb68
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB82_45
# BB#46:                                # %sw.bb68
	movabsq	$1, %rax
	jmp	.LBB82_60
.LBB82_36:                              # %sw.bb44
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB82_63
# BB#37:                                # %if.else48
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB82_62
.LBB82_38:                              # %land.lhs.true50
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB82_30
.LBB82_27:                              # %sw.bb21
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB82_63
# BB#28:                                # %if.else25
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB82_62
# BB#29:                                # %land.lhs.true
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
.LBB82_30:                              # %land.lhs.true
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB82_63
	jmp	.LBB82_62
.LBB82_54:
	movabsq	$0, %rax
	jmp	.LBB82_60
.LBB82_41:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB82_60
.LBB82_48:
	movabsq	$0, %rax
	jmp	.LBB82_60
.LBB82_45:
	movabsq	$0, %rax
	jmp	.LBB82_60
.LBB82_57:                              # %sw.bb106
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$2, %rcx
	jae	.LBB82_59
	jmp	.LBB82_60
.LBB82_56:                              # %sw.bb101
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$1, %rcx
	je	.LBB82_60
.LBB82_59:                              # %select.mid4
	movq	$2, %rax
.LBB82_60:                              # %sw.epilog
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jb	.LBB82_63
# BB#61:                                # %sw.epilog
	jne	.LBB82_64
.LBB82_62:                              # %sw.bb141
	movq	$56, %r14
.LBB82_63:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB82_64:                              # %sw.default142
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_fpu_unit_conflict_cost, %rcx
	movq	$24986, %rsi            # imm = 0x619A
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp812:
	.size	k6_fpu_unit_conflict_cost, .Ltmp812-k6_fpu_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI82_0:
	.quad	.LBB82_53
	.quad	.LBB82_50
	.quad	.LBB82_62
	.quad	.LBB82_53
	.quad	.LBB82_50
	.quad	.LBB82_62
	.quad	.LBB82_47
	.quad	.LBB82_44
	.quad	.LBB82_39
	.quad	.LBB82_36
	.quad	.LBB82_62
	.quad	.LBB82_39
	.quad	.LBB82_39
	.quad	.LBB82_31
	.quad	.LBB82_27
	.quad	.LBB82_62
	.quad	.LBB82_31
	.quad	.LBB82_31
	.quad	.LBB82_31
	.quad	.LBB82_31
	.quad	.LBB82_22
	.quad	.LBB82_17
	.quad	.LBB82_22
	.quad	.LBB82_17
	.quad	.LBB82_22
	.quad	.LBB82_17
	.quad	.LBB82_22
	.quad	.LBB82_17
	.quad	.LBB82_22
	.quad	.LBB82_17
	.quad	.LBB82_22
	.quad	.LBB82_17
	.quad	.LBB82_22
	.quad	.LBB82_17
.LJTI82_1:
	.quad	.LBB82_58
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_58
	.quad	.LBB82_58
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_58
	.quad	.LBB82_58
	.quad	.LBB82_58
	.quad	.LBB82_58
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_57
	.quad	.LBB82_62
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_12
	.quad	.LBB82_12
	.quad	.LBB82_56
	.quad	.LBB82_63
	.quad	.LBB82_62
	.quad	.LBB82_12
	.quad	.LBB82_63
	.quad	.LBB82_12
	.quad	.LBB82_63
	.quad	.LBB82_12
	.quad	.LBB82_63
	.quad	.LBB82_12
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_63
	.quad	.LBB82_62
	.quad	.LBB82_62
	.quad	.LBB82_12
	.quad	.LBB82_12
	.quad	.LBB82_62
	.quad	.LBB82_12
	.quad	.LBB82_12
	.quad	.LBB82_62
	.quad	.LBB82_12
	.quad	.LBB82_12
	.quad	.LBB82_62
	.quad	.LBB82_12
	.quad	.LBB82_12
	.quad	.LBB82_62
	.quad	.LBB82_12
	.quad	.LBB82_12
	.quad	.LBB82_12
	.quad	.LBB82_12
	.quad	.LBB82_12
	.quad	.LBB82_12

	.text
	.align	16, 0x90
	.type	k6_fpu_unit_blockage,@function
k6_fpu_unit_blockage:                   # @k6_fpu_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp817:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp818:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp819:
	.cfi_def_cfa_offset 32
.Ltmp820:
	.cfi_offset %rbx, -32
.Ltmp821:
	.cfi_offset %r14, -24
.Ltmp822:
	.cfi_offset %r15, -16
	movq	%rdi, %rbx
	movslq	40(%rbx), %rax
	testq	%rax, %rax
	jns	.LBB83_2
# BB#1:                                 # %cond.false
	movq	%rbx, %rdi
	callq	recog_memoized_1
.LBB83_2:                               # %cond.end
	movq	$2, %r14
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$524, %rdx              # imm = 0x20C
	jg	.LBB83_15
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$18, %rdx
	jg	.LBB83_8
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB83_62
# BB#5:                                 # %sw.bb127
	movq	32(%rbx), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB83_62
# BB#6:                                 # %land.lhs.true131
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB83_62
# BB#7:                                 # %if.then137
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_fpu_unit_blockage, %rcx
	movq	$24655, %rdx            # imm = 0x604F
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB83_15:                              # %cond.end
	addq	$-525, %rax             # imm = 0xFFFFFFFFFFFFFDF3
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$33, %rax
	ja	.LBB83_62
# BB#16:                                # %cond.end
	jmpq	*.LJTI83_0(,%rax,8)
.LBB83_22:                              # %sw.bb10
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB83_63
# BB#23:                                # %if.else14
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB83_24
# BB#25:                                # %if.else14
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB83_60
.LBB83_8:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$89, %rdx
	jg	.LBB83_13
# BB#9:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$36, %rax
	ja	.LBB83_62
# BB#10:                                # %cond.end
	movq	$1, %rdx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	movabsq	$38817759232, %rcx      # imm = 0x909B80000
	testq	%rcx, %rsi
	jne	.LBB83_63
# BB#11:                                # %cond.end
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$77309411328, %rax      # imm = 0x1200000000
	testq	%rax, %rdx
	jne	.LBB83_12
	jmp	.LBB83_62
.LBB83_13:                              # %cond.end
	addq	$-90, %rax
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$94, %rcx
	ja	.LBB83_62
# BB#14:                                # %cond.end
	jmpq	*.LJTI83_1(,%rcx,8)
.LBB83_12:                              # %sw.bb121
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	testq	%rcx, %rcx
	jne	.LBB83_59
	jmp	.LBB83_60
.LBB83_17:                              # %sw.bb
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB83_63
# BB#18:                                # %if.else
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB83_19
# BB#20:                                # %if.else
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB83_60
.LBB83_31:                              # %sw.bb33
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB83_63
# BB#32:                                # %if.else37
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB83_33
# BB#34:                                # %if.else37
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB83_60
.LBB83_39:                              # %sw.bb57
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB83_63
# BB#40:                                # %if.else61
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB83_41
# BB#42:                                # %if.else61
	movabsq	$1, %rax
	incq	%rax
	jmp	.LBB83_60
.LBB83_53:                              # %sw.bb95
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB83_54
# BB#55:                                # %sw.bb95
	movabsq	$1, %rax
	jmp	.LBB83_60
.LBB83_50:                              # %sw.bb80
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB83_62
# BB#51:                                # %land.lhs.true82
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB83_63
# BB#52:                                # %if.else86
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB83_62
	jmp	.LBB83_38
.LBB83_24:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB83_60
.LBB83_19:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB83_60
.LBB83_33:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB83_60
.LBB83_58:                              # %sw.bb112
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$3, %rcx
	jb	.LBB83_60
	jmp	.LBB83_59
.LBB83_47:                              # %sw.bb74
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$17, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB83_48
# BB#49:                                # %sw.bb74
	movabsq	$1, %rax
	jmp	.LBB83_60
.LBB83_44:                              # %sw.bb68
	movq	%rbx, %rdi
	callq	extract_insn_cached
	movq	recog_data+24(%rip), %rdi
	movq	$18, %rsi
	callq	mult_operator
	testq	%r15, %rax
	je	.LBB83_45
# BB#46:                                # %sw.bb68
	movabsq	$1, %rax
	jmp	.LBB83_60
.LBB83_36:                              # %sw.bb44
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB83_63
# BB#37:                                # %if.else48
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB83_62
.LBB83_38:                              # %land.lhs.true50
	movq	recog_data+24(%rip), %rdi
	movq	$15, %rsi
	jmp	.LBB83_30
.LBB83_27:                              # %sw.bb21
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movq	%rbx, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$22, %rax
	je	.LBB83_63
# BB#28:                                # %if.else25
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	je	.LBB83_62
# BB#29:                                # %land.lhs.true
	movq	recog_data+24(%rip), %rdi
	movq	$16, %rsi
.LBB83_30:                              # %land.lhs.true
	callq	mult_operator
	testq	%r15, %rax
	jne	.LBB83_63
	jmp	.LBB83_62
.LBB83_54:
	movabsq	$0, %rax
	jmp	.LBB83_60
.LBB83_41:
	movabsq	$0, %rax
	incq	%rax
	jmp	.LBB83_60
.LBB83_48:
	movabsq	$0, %rax
	jmp	.LBB83_60
.LBB83_45:
	movabsq	$0, %rax
	jmp	.LBB83_60
.LBB83_57:                              # %sw.bb106
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$2, %rcx
	jae	.LBB83_59
	jmp	.LBB83_60
.LBB83_56:                              # %sw.bb101
	movq	%rbx, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$1, %rcx
	je	.LBB83_60
.LBB83_59:                              # %select.mid4
	movq	$2, %rax
.LBB83_60:                              # %sw.epilog
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jb	.LBB83_63
# BB#61:                                # %sw.epilog
	jne	.LBB83_64
.LBB83_62:                              # %sw.bb141
	movq	$56, %r14
.LBB83_63:                              # %return
	movq	%r14, %rax
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB83_64:                              # %sw.default142
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.k6_fpu_unit_blockage, %rcx
	movq	$24675, %rsi            # imm = 0x6063
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.Ltmp823:
	.size	k6_fpu_unit_blockage, .Ltmp823-k6_fpu_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI83_0:
	.quad	.LBB83_53
	.quad	.LBB83_50
	.quad	.LBB83_62
	.quad	.LBB83_53
	.quad	.LBB83_50
	.quad	.LBB83_62
	.quad	.LBB83_47
	.quad	.LBB83_44
	.quad	.LBB83_39
	.quad	.LBB83_36
	.quad	.LBB83_62
	.quad	.LBB83_39
	.quad	.LBB83_39
	.quad	.LBB83_31
	.quad	.LBB83_27
	.quad	.LBB83_62
	.quad	.LBB83_31
	.quad	.LBB83_31
	.quad	.LBB83_31
	.quad	.LBB83_31
	.quad	.LBB83_22
	.quad	.LBB83_17
	.quad	.LBB83_22
	.quad	.LBB83_17
	.quad	.LBB83_22
	.quad	.LBB83_17
	.quad	.LBB83_22
	.quad	.LBB83_17
	.quad	.LBB83_22
	.quad	.LBB83_17
	.quad	.LBB83_22
	.quad	.LBB83_17
	.quad	.LBB83_22
	.quad	.LBB83_17
.LJTI83_1:
	.quad	.LBB83_58
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_58
	.quad	.LBB83_58
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_58
	.quad	.LBB83_58
	.quad	.LBB83_58
	.quad	.LBB83_58
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_57
	.quad	.LBB83_62
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_12
	.quad	.LBB83_12
	.quad	.LBB83_56
	.quad	.LBB83_63
	.quad	.LBB83_62
	.quad	.LBB83_12
	.quad	.LBB83_63
	.quad	.LBB83_12
	.quad	.LBB83_63
	.quad	.LBB83_12
	.quad	.LBB83_63
	.quad	.LBB83_12
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_63
	.quad	.LBB83_62
	.quad	.LBB83_62
	.quad	.LBB83_12
	.quad	.LBB83_12
	.quad	.LBB83_62
	.quad	.LBB83_12
	.quad	.LBB83_12
	.quad	.LBB83_62
	.quad	.LBB83_12
	.quad	.LBB83_12
	.quad	.LBB83_62
	.quad	.LBB83_12
	.quad	.LBB83_12
	.quad	.LBB83_62
	.quad	.LBB83_12
	.quad	.LBB83_12
	.quad	.LBB83_12
	.quad	.LBB83_12
	.quad	.LBB83_12
	.quad	.LBB83_12

	.text
	.align	16, 0x90
	.type	athlon_vectordec_unit_blockage,@function
athlon_vectordec_unit_blockage:         # @athlon_vectordec_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp829:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp830:
	.cfi_def_cfa_offset 24
	pushq	%r12
.Ltmp831:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp832:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp833:
	.cfi_def_cfa_offset 48
.Ltmp834:
	.cfi_offset %rbx, -40
.Ltmp835:
	.cfi_offset %r12, -32
.Ltmp836:
	.cfi_offset %r14, -24
.Ltmp837:
	.cfi_offset %r15, -16
	movq	%rdi, %r15
	movslq	40(%r15), %rax
	movq	%rsi, %r14
	testq	%rax, %rax
	jns	.LBB84_2
# BB#1:                                 # %cond.false
	movq	%r15, %rdi
	callq	recog_memoized_1
.LBB84_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$804, %rdx              # imm = 0x324
	jg	.LBB84_30
# BB#3:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$17, %rdx
	jg	.LBB84_7
# BB#4:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB84_100
# BB#5:                                 # %sw.bb125
	movq	32(%r15), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB84_97
# BB#6:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_30:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$805, %rax              # imm = 0x325
	jne	.LBB84_100
# BB#31:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_7:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$672, %rdx              # imm = 0x2A0
	jg	.LBB84_85
# BB#8:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$571, %rdx              # imm = 0x23B
	jg	.LBB84_28
# BB#9:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$491, %rdx              # imm = 0x1EB
	jg	.LBB84_25
# BB#10:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$447, %rdx              # imm = 0x1BF
	jg	.LBB84_23
# BB#11:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$422, %rdx              # imm = 0x1A6
	jg	.LBB84_21
# BB#12:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$404, %rdx              # imm = 0x194
	jg	.LBB84_19
# BB#13:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$343, %rdx              # imm = 0x157
	jg	.LBB84_16
# BB#14:                                # %cond.end
	addq	$-18, %rax
	movabsq	$4294967295, %r12       # imm = 0xFFFFFFFF
	andq	%r12, %rax
	cmpq	$271, %rax              # imm = 0x10F
	ja	.LBB84_100
# BB#15:                                # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI84_1(,%rax,8)
.LBB84_49:                              # %sw.bb30
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB84_50
# BB#51:                                # %sw.bb30
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_85:                              # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$673, %rax              # imm = 0x2A1
	jne	.LBB84_100
	jmp	.LBB84_86
.LBB84_97:                              # %land.lhs.true129
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %rbx
	jns	.LBB84_182
# BB#98:                                # %if.then135
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_vectordec_unit_blockage, %rcx
	movq	$23760, %rdx            # imm = 0x5CD0
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB84_28:                              # %cond.end
	addq	$-572, %rax             # imm = 0xFFFFFFFFFFFFFDC4
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$86, %rcx
	ja	.LBB84_100
# BB#29:                                # %cond.end
	movq	$1, %rbx
	jmpq	*.LJTI84_0(,%rcx,8)
.LBB84_86:                              # %sw.bb104
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB84_87
# BB#88:                                # %sw.bb104
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_87:
	movabsq	$0, %rax
.LBB84_75:                              # %sw.epilog
	testq	%rax, %rax
	jne	.LBB84_99
# BB#76:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_99:                              # %sw.epilog
	jne	.LBB84_100
# BB#180:                               # %sw.default283
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_vectordec_unit_blockage, %rcx
	movq	$24364, %rsi            # imm = 0x5F2C
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB84_25:                              # %cond.end
	addq	$-492, %rax             # imm = 0xFFFFFFFFFFFFFE14
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$32, %rax
	ja	.LBB84_100
# BB#26:                                # %cond.end
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$8505983999, %rcx       # imm = 0x1FAFF03FF
	testq	%rcx, %rdx
	je	.LBB84_32
# BB#27:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_23:                              # %cond.end
	addq	$-448, %rax             # imm = 0xFFFFFFFFFFFFFE40
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jae	.LBB84_100
# BB#24:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_21:                              # %cond.end
	addq	$-423, %rax             # imm = 0xFFFFFFFFFFFFFE59
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
	jae	.LBB84_100
# BB#22:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_19:                              # %cond.end
	addq	$-405, %rax             # imm = 0xFFFFFFFFFFFFFE6B
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jae	.LBB84_100
# BB#20:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_16:                              # %cond.end
	addq	$-344, %rax             # imm = 0xFFFFFFFFFFFFFEA8
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$39, %rcx
	ja	.LBB84_100
# BB#17:                                # %cond.end
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$1098439981057, %rcx    # imm = 0xFFC01FF801
	testq	%rcx, %rax
	je	.LBB84_100
# BB#18:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_32:                              # %cond.end
	cmpq	$15, %rax
	jne	.LBB84_100
# BB#33:                                # %sw.bb
	movq	%r15, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$1, %rax
	je	.LBB84_34
# BB#35:                                # %sw.bb
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_34:
	movabsq	$0, %rax
	jmp	.LBB84_75
.LBB84_94:                              # %sw.bb119
	movq	%r15, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rdi
	xorq	%rsi, %rsi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB84_95
# BB#96:                                # %sw.bb119
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_89:                              # %sw.bb111
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB84_91
# BB#90:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_82:                              # %sw.bb99
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	je	.LBB84_83
# BB#84:                                # %sw.bb99
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_77:                              # %sw.bb92
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB84_78
# BB#79:                                # %lor.lhs.false94
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB84_80
# BB#81:                                # %lor.lhs.false94
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_71:                              # %sw.bb79
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jbe	.LBB84_72
# BB#73:                                # %sw.bb79
	movabsq	$1, %rcx
	jmp	.LBB84_74
.LBB84_64:                              # %sw.bb60
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	leaq	-3(%rax), %rcx
	andq	%r12, %rcx
	cmpq	$2, %rcx
	jae	.LBB84_66
# BB#65:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_57:                              # %sw.bb45
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	ja	.LBB84_100
# BB#58:                                # %land.lhs.true49
	movq	%r15, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB84_59
# BB#62:                                # %land.lhs.true55
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB84_100
# BB#63:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_52:                              # %sw.bb35
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB84_100
# BB#53:                                # %land.lhs.true
	movq	%r15, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB84_55
# BB#54:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_46:                              # %sw.bb21
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	decq	%rax
	andq	%r12, %rax
	cmpq	$2, %rax
	jbe	.LBB84_47
# BB#48:                                # %sw.bb21
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_43:                              # %sw.bb16
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	je	.LBB84_44
# BB#45:                                # %sw.bb16
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_36:                              # %sw.bb6
	movq	%r15, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB84_38
# BB#37:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_50:
	movabsq	$0, %rax
	jmp	.LBB84_75
.LBB84_95:
	movabsq	$0, %rax
	jmp	.LBB84_75
.LBB84_91:                              # %lor.lhs.false113
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r12, %rax
	jne	.LBB84_92
# BB#93:                                # %lor.lhs.false113
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_83:
	movabsq	$0, %rax
	jmp	.LBB84_75
.LBB84_78:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_80:
	movabsq	$0, %rax
	jmp	.LBB84_75
.LBB84_72:
	movabsq	$0, %rcx
.LBB84_74:                              # %sw.bb79
	addq	$-3, %rax
	andq	%r12, %rax
	cmpq	$2, %rax
	sbbq	%rax, %rax
	andq	%rcx, %rax
	notq	%rax
	andq	$1, %rax
	jmp	.LBB84_75
.LBB84_66:                              # %lor.lhs.false64
	andq	%r12, %rax
	cmpq	$2, %rax
	ja	.LBB84_100
# BB#67:                                # %land.lhs.true70
	movq	%r15, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB84_69
# BB#68:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_59:                              # %lor.lhs.false52
	movq	%r15, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB84_100
# BB#60:                                # %lor.lhs.false52
	movl	which_alternative(%rip), %eax
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB84_100
# BB#61:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_55:                              # %lor.lhs.false39
	movq	%r15, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB84_100
# BB#56:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_47:
	movabsq	$0, %rax
	jmp	.LBB84_75
.LBB84_44:
	movabsq	$0, %rax
	jmp	.LBB84_75
.LBB84_38:                              # %lor.lhs.false
	movq	%r15, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$1, %rax
	jne	.LBB84_40
# BB#39:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_92:
	movabsq	$0, %rax
	jmp	.LBB84_75
.LBB84_69:                              # %lor.lhs.false73
	movq	%r15, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	jne	.LBB84_100
# BB#70:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_100:                             # %sw.bb139
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB84_102
# BB#101:                               # %cond.false148
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB84_102:                             # %cond.end150
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$804, %rdx              # imm = 0x324
	jg	.LBB84_181
# BB#103:                               # %cond.end150
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$17, %rdx
	jg	.LBB84_107
# BB#104:                               # %cond.end150
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB84_118
# BB#105:                               # %sw.bb266
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB84_178
# BB#106:
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_181:                             # %cond.end150
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$805, %rax              # imm = 0x325
	movq	$1, %rbx
	jne	.LBB84_118
	jmp	.LBB84_182
.LBB84_107:                             # %cond.end150
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$672, %rdx              # imm = 0x2A0
	jg	.LBB84_169
# BB#108:                               # %cond.end150
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$571, %rdx              # imm = 0x23B
	jg	.LBB84_129
# BB#109:                               # %cond.end150
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$491, %rdx              # imm = 0x1EB
	jg	.LBB84_124
# BB#110:                               # %cond.end150
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$447, %rdx              # imm = 0x1BF
	jg	.LBB84_123
# BB#111:                               # %cond.end150
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$422, %rdx              # imm = 0x1A6
	jg	.LBB84_120
# BB#112:                               # %cond.end150
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$404, %rdx              # imm = 0x194
	jg	.LBB84_119
# BB#113:                               # %cond.end150
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$343, %rdx              # imm = 0x157
	jg	.LBB84_116
# BB#114:                               # %cond.end150
	addq	$-18, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$271, %rax              # imm = 0x10F
	ja	.LBB84_118
# BB#115:                               # %cond.end150
	movq	$1, %rbx
	jmpq	*.LJTI84_3(,%rax,8)
.LBB84_140:                             # %sw.bb179
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB84_141
# BB#142:                               # %sw.bb179
	movabsq	$1, %rbx
	jmp	.LBB84_182
.LBB84_169:                             # %cond.end150
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$673, %rax              # imm = 0x2A1
	jne	.LBB84_118
	jmp	.LBB84_170
.LBB84_178:                             # %land.lhs.true273
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %rbx
	jns	.LBB84_182
# BB#179:                               # %if.then279
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_vectordec_unit_blockage, %rcx
	movq	$24162, %rdx            # imm = 0x5E62
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB84_129:                             # %cond.end150
	addq	$-572, %rax             # imm = 0xFFFFFFFFFFFFFDC4
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$86, %rcx
	ja	.LBB84_118
# BB#130:                               # %cond.end150
	movq	$1, %rbx
	jmpq	*.LJTI84_2(,%rcx,8)
.LBB84_170:                             # %sw.bb248
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
.LBB84_171:                             # %return
	sbbq	%rbx, %rbx
	andq	$1, %rbx
	jmp	.LBB84_182
.LBB84_124:                             # %cond.end150
	addq	$-492, %rax             # imm = 0xFFFFFFFFFFFFFE14
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$32, %rax
	ja	.LBB84_118
# BB#125:                               # %cond.end150
	movq	$1, %rdx
	movq	%rax, %rcx
	shlq	%cl, %rdx
	movabsq	$8505983999, %rcx       # imm = 0x1FAFF03FF
	testq	%rcx, %rdx
	movq	$1, %rbx
	jne	.LBB84_182
# BB#126:                               # %cond.end150
	cmpq	$15, %rax
	jne	.LBB84_118
# BB#127:                               # %sw.bb152
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB84_128
# BB#131:                               # %sw.bb152
	movabsq	$1, %rbx
	jmp	.LBB84_182
.LBB84_123:                             # %cond.end150
	addq	$-448, %rax             # imm = 0xFFFFFFFFFFFFFE40
	jmp	.LBB84_121
.LBB84_120:                             # %cond.end150
	addq	$-423, %rax             # imm = 0xFFFFFFFFFFFFFE59
.LBB84_121:                             # %cond.end150
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$2, %rcx
.LBB84_122:                             # %cond.end150
	movq	$1, %rbx
	jb	.LBB84_182
	jmp	.LBB84_118
.LBB84_119:                             # %cond.end150
	addq	$-405, %rax             # imm = 0xFFFFFFFFFFFFFE6B
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$3, %rcx
	jmp	.LBB84_122
.LBB84_116:                             # %cond.end150
	addq	$-344, %rax             # imm = 0xFFFFFFFFFFFFFEA8
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rax, %rcx
	cmpq	$39, %rcx
	ja	.LBB84_118
# BB#117:                               # %cond.end150
	movq	$1, %rax
	shlq	%cl, %rax
	movabsq	$1098439981057, %rcx    # imm = 0xFFC01FF801
	testq	%rcx, %rax
	movq	$1, %rbx
	jne	.LBB84_182
.LBB84_118:                             # %sw.default282
	xorq	%rbx, %rbx
.LBB84_182:                             # %return
	movq	%rbx, %rax
.LBB84_183:                             # %return
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB84_128:
	movabsq	$0, %rbx
	jmp	.LBB84_182
.LBB84_40:                              # %lor.lhs.false10
	movq	%r15, %rdi
	callq	get_attr_memory
	andq	%r12, %rax
	cmpq	$2, %rax
	je	.LBB84_41
# BB#42:                                # %lor.lhs.false10
	movabsq	$1, %rax
	jmp	.LBB84_75
.LBB84_175:                             # %sw.bb261
	movq	%r14, %rdi
	callq	extract_insn_cached
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB84_176
# BB#177:                               # %sw.bb261
	movabsq	$1, %rbx
	jmp	.LBB84_182
.LBB84_172:                             # %sw.bb254
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB84_174
# BB#173:                               # %land.lhs.true256
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	xorq	%rbx, %rbx
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB84_182
.LBB84_174:                             # %if.else260
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_166:                             # %sw.bb244
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$4, %rax
	jne	.LBB84_167
# BB#168:                               # %sw.bb244
	movabsq	$1, %rbx
	jmp	.LBB84_182
.LBB84_163:                             # %sw.bb237
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB84_165
# BB#164:                               # %land.lhs.true239
	movq	recog_data+8(%rip), %rax
	xorq	%rsi, %rsi
	xorq	%rbx, %rbx
	movq	%rax, %rdi
	callq	memory_operand
	testq	%r15, %rax
	je	.LBB84_182
.LBB84_165:                             # %if.else243
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_159:                             # %sw.bb225
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	cmpq	$3, %rcx
	sbbq	%rax, %rax
	addq	$-3, %rcx
	andq	%r15, %rcx
	cmpq	$1, %rcx
	jbe	.LBB84_160
# BB#161:                               # %sw.bb225
	movabsq	$1, %rcx
	jmp	.LBB84_162
.LBB84_154:                             # %sw.bb207
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	leaq	-3(%rax), %rcx
	andq	%r15, %rcx
	cmpq	$2, %rcx
	jb	.LBB84_158
# BB#155:                               # %land.lhs.true211
	andq	%r15, %rax
	xorq	%rbx, %rbx
	cmpq	$2, %rax
	ja	.LBB84_182
# BB#156:                               # %lor.lhs.false217
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB84_158
# BB#157:                               # %land.lhs.true220
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB84_182
.LBB84_158:                             # %if.else224
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_147:                             # %sw.bb193
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	cmpq	$1, %rax
	ja	.LBB84_182
# BB#148:                               # %lor.lhs.false197
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	jne	.LBB84_149
# BB#151:                               # %lor.lhs.false203
	movl	which_alternative(%rip), %eax
	jmp	.LBB84_152
.LBB84_143:                             # %sw.bb183
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	xorq	%rbx, %rbx
	cmpq	$1, %rax
	jne	.LBB84_182
# BB#144:                               # %lor.lhs.false185
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB84_146
# BB#145:                               # %land.lhs.true188
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB84_182
.LBB84_146:                             # %if.else192
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_139:                             # %sw.bb171
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	decq	%rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jmp	.LBB84_171
.LBB84_136:                             # %sw.bb167
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jne	.LBB84_137
# BB#138:                               # %sw.bb167
	movabsq	$1, %rbx
	jmp	.LBB84_182
.LBB84_132:                             # %sw.bb157
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	jne	.LBB84_135
# BB#133:                               # %land.lhs.true159
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$1, %rax
	je	.LBB84_135
# BB#134:                               # %land.lhs.true162
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	xorq	%rbx, %rbx
	cmpq	$2, %rax
	jne	.LBB84_182
.LBB84_135:                             # %if.else166
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_141:
	movabsq	$0, %rbx
	jmp	.LBB84_182
.LBB84_41:
	movabsq	$0, %rax
	jmp	.LBB84_75
.LBB84_176:
	movabsq	$0, %rbx
	jmp	.LBB84_182
.LBB84_167:
	movabsq	$0, %rbx
	jmp	.LBB84_182
.LBB84_160:
	movabsq	$0, %rcx
.LBB84_162:                             # %sw.bb225
	orq	%rcx, %rax
	notq	%rax
	andq	$1, %rax
	jmp	.LBB84_183
.LBB84_149:                             # %land.lhs.true200
	movq	%r14, %rdi
	callq	get_attr_memory
	andq	%r15, %rax
	cmpq	$2, %rax
	jne	.LBB84_182
# BB#150:                               # %land.lhs.true200
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
.LBB84_152:                             # %lor.lhs.false203
	cmpq	$1, %rax
	jne	.LBB84_182
# BB#153:                               # %if.else206
	movq	$1, %rbx
	jmp	.LBB84_182
.LBB84_137:
	movabsq	$0, %rbx
	jmp	.LBB84_182
.Ltmp838:
	.size	athlon_vectordec_unit_blockage, .Ltmp838-athlon_vectordec_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI84_0:
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_86
	.quad	.LBB84_182
	.quad	.LBB84_86
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
.LJTI84_1:
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_94
	.quad	.LBB84_94
	.quad	.LBB84_94
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_94
	.quad	.LBB84_94
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_94
	.quad	.LBB84_94
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_89
	.quad	.LBB84_94
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_86
	.quad	.LBB84_82
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_77
	.quad	.LBB84_77
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_71
	.quad	.LBB84_71
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_64
	.quad	.LBB84_64
	.quad	.LBB84_64
	.quad	.LBB84_64
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_57
	.quad	.LBB84_100
	.quad	.LBB84_52
	.quad	.LBB84_52
	.quad	.LBB84_52
	.quad	.LBB84_52
	.quad	.LBB84_49
	.quad	.LBB84_46
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_49
	.quad	.LBB84_100
	.quad	.LBB84_49
	.quad	.LBB84_100
	.quad	.LBB84_49
	.quad	.LBB84_100
	.quad	.LBB84_49
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_49
	.quad	.LBB84_43
	.quad	.LBB84_100
	.quad	.LBB84_49
	.quad	.LBB84_43
	.quad	.LBB84_100
	.quad	.LBB84_49
	.quad	.LBB84_43
	.quad	.LBB84_100
	.quad	.LBB84_49
	.quad	.LBB84_43
	.quad	.LBB84_100
	.quad	.LBB84_36
	.quad	.LBB84_36
	.quad	.LBB84_36
	.quad	.LBB84_36
	.quad	.LBB84_36
	.quad	.LBB84_36
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_100
	.quad	.LBB84_182
	.quad	.LBB84_182
.LJTI84_2:
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_170
	.quad	.LBB84_182
	.quad	.LBB84_170
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
.LJTI84_3:
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_175
	.quad	.LBB84_175
	.quad	.LBB84_175
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_175
	.quad	.LBB84_175
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_175
	.quad	.LBB84_175
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_172
	.quad	.LBB84_175
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_170
	.quad	.LBB84_166
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_163
	.quad	.LBB84_163
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_159
	.quad	.LBB84_159
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_154
	.quad	.LBB84_154
	.quad	.LBB84_154
	.quad	.LBB84_154
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_147
	.quad	.LBB84_118
	.quad	.LBB84_143
	.quad	.LBB84_143
	.quad	.LBB84_143
	.quad	.LBB84_143
	.quad	.LBB84_140
	.quad	.LBB84_139
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_140
	.quad	.LBB84_118
	.quad	.LBB84_140
	.quad	.LBB84_118
	.quad	.LBB84_140
	.quad	.LBB84_118
	.quad	.LBB84_140
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_140
	.quad	.LBB84_136
	.quad	.LBB84_118
	.quad	.LBB84_140
	.quad	.LBB84_136
	.quad	.LBB84_118
	.quad	.LBB84_140
	.quad	.LBB84_136
	.quad	.LBB84_118
	.quad	.LBB84_140
	.quad	.LBB84_136
	.quad	.LBB84_118
	.quad	.LBB84_132
	.quad	.LBB84_132
	.quad	.LBB84_132
	.quad	.LBB84_132
	.quad	.LBB84_132
	.quad	.LBB84_132
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_182
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_118
	.quad	.LBB84_182
	.quad	.LBB84_182

	.text
	.align	16, 0x90
	.type	athlon_ieu_unit_conflict_cost,@function
athlon_ieu_unit_conflict_cost:          # @athlon_ieu_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp843:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp844:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp845:
	.cfi_def_cfa_offset 32
.Ltmp846:
	.cfi_offset %rbx, -32
.Ltmp847:
	.cfi_offset %r14, -24
.Ltmp848:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB85_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB85_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$44, %rdx
	jg	.LBB85_5
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB85_4
# BB#173:                               # %sw.bb337
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB85_175
# BB#174:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_5:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$582, %rdx              # imm = 0x246
	jg	.LBB85_41
# BB#6:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$506, %rdx              # imm = 0x1FA
	jg	.LBB85_39
# BB#7:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$402, %rdx              # imm = 0x192
	jg	.LBB85_37
# BB#8:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	cmpq	$201, %rdx
	jg	.LBB85_27
# BB#9:                                 # %cond.end
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$50, %rdx
	jg	.LBB85_12
# BB#10:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$45, %rax
	jne	.LBB85_11
# BB#164:                               # %sw.bb311
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%rbx, %rax
	cmpq	$6, %rax
	jb	.LBB85_165
# BB#166:                               # %sw.bb311
	movl	flag_pic(%rip), %eax
	testq	%rbx, %rax
	je	.LBB85_167
# BB#168:                               # %lor.lhs.false325
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%rbx, %rax
	je	.LBB85_169
# BB#170:                               # %lor.lhs.false325
	movl	flag_pic(%rip), %eax
	testq	%rbx, %rax
	je	.LBB85_171
# BB#172:                               # %land.lhs.true330
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
.LBB85_141:                             # %land.lhs.true243
	callq	symbolic_operand
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_4:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_41:                              # %cond.end
	leaq	-583(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$30, %rdx
	jae	.LBB85_42
.LBB85_179:                             # %sw.bb350
	movq	$15, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_175:                             # %land.lhs.true341
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %rbx
	jns	.LBB85_161
# BB#176:                               # %if.then347
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_ieu_unit_conflict_cost, %rcx
	movq	$23517, %rdx            # imm = 0x5BDD
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB85_39:                              # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$507, %rax              # imm = 0x1FB
	jne	.LBB85_40
# BB#52:                                # %sw.bb7
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$14, %rax
	je	.LBB85_47
# BB#53:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_37:                              # %cond.end
	addq	$-403, %rax             # imm = 0xFFFFFFFFFFFFFE6D
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$1, %rbx
	cmpq	$14, %rax
	ja	.LBB85_161
# BB#38:                                # %cond.end
	jmpq	*.LJTI85_0(,%rax,8)
.LBB85_74:                              # %sw.bb58
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB85_76
# BB#75:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_40:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_27:                              # %cond.end
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$220, %rdx
	jg	.LBB85_35
# BB#28:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$214, %rdx
	jg	.LBB85_33
# BB#29:                                # %cond.end
	cmpq	$202, %rax
	je	.LBB85_118
# BB#30:                                # %cond.end
	cmpq	$207, %rax
	jne	.LBB85_31
# BB#110:                               # %sw.bb119
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$4, %rax
	je	.LBB85_111
# BB#112:                               # %sw.bb119
	movl	which_alternative(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB85_113
# BB#114:                               # %lor.lhs.false124
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	je	.LBB85_116
# BB#115:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_12:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$59, %rdx
	jg	.LBB85_15
# BB#13:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$51, %rax
	jne	.LBB85_14
# BB#155:                               # %sw.bb272
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB85_157
# BB#156:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_42:                              # %cond.end
	andq	%rcx, %rax
	cmpq	$618, %rax              # imm = 0x26A
	je	.LBB85_45
# BB#43:                                # %cond.end
	cmpq	$620, %rax              # imm = 0x26C
	jne	.LBB85_44
.LBB85_45:                              # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	je	.LBB85_47
# BB#46:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_35:                              # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$221, %rax
	jne	.LBB85_36
# BB#84:                                # %sw.bb79
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB85_86
# BB#85:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_11:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_33:                              # %cond.end
	cmpq	$215, %rax
	jne	.LBB85_34
# BB#93:                                # %sw.bb92
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB85_95
# BB#94:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_15:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$65, %rdx
	jg	.LBB85_20
# BB#16:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$60, %rax
	movq	$1, %rbx
	jne	.LBB85_161
# BB#17:                                # %sw.bb219
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	jmp	.LBB85_18
.LBB85_36:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_78:                              # %sw.bb67
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB85_79
# BB#80:                                # %sw.bb67
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB85_81
# BB#82:                                # %lor.lhs.false72
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB85_47
# BB#83:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_76:                              # %lor.lhs.false61
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB85_47
# BB#77:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_14:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_44:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_86:                              # %land.lhs.true81
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%rbx, %rax
	je	.LBB85_87
# BB#88:                                # %land.lhs.true81
	movl	which_alternative(%rip), %eax
	andq	%rbx, %rax
	cmpq	$3, %rax
	je	.LBB85_89
# BB#90:                                # %lor.lhs.false86
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%rbx, %rax
	jne	.LBB85_91
# BB#92:                                # %lor.lhs.false86
	movabsq	$1, %rax
	jmp	.LBB85_49
.LBB85_34:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_20:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$83, %rdx
	jg	.LBB85_23
# BB#21:                                # %cond.end
	addq	$-66, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$1, %rbx
	cmpq	$11, %rax
	ja	.LBB85_161
# BB#22:                                # %cond.end
	jmpq	*.LJTI85_1(,%rax,8)
.LBB85_151:                             # %sw.bb210
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB85_153
# BB#152:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_118:                             # %sw.bb133
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$4, %rax
	je	.LBB85_119
# BB#120:                               # %sw.bb133
	movl	which_alternative(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB85_121
# BB#122:                               # %lor.lhs.false138
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	je	.LBB85_124
# BB#123:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_31:                              # %cond.end
	cmpq	$208, %rax
	jne	.LBB85_32
# BB#102:                               # %sw.bb105
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$4, %rax
	je	.LBB85_103
# BB#104:                               # %sw.bb105
	movl	which_alternative(%rip), %eax
	testq	%rbx, %rax
	jne	.LBB85_105
# BB#106:                               # %lor.lhs.false110
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	je	.LBB85_108
# BB#107:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_66:                              # %sw.bb37
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB85_68
# BB#67:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_60:                              # %sw.bb24
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB85_63
# BB#61:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB85_161
# BB#62:                                # %land.lhs.true.lor.lhs.false27_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB85_63:                              # %lor.lhs.false27
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB85_161
# BB#64:                                # %lor.lhs.false31
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB85_47
# BB#65:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_54:                              # %sw.bb13
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB85_55
# BB#56:                                # %sw.bb13
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB85_57
# BB#58:                                # %lor.lhs.false18
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB85_47
# BB#59:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_165:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_167:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_157:                             # %lor.lhs.false275
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB85_158
# BB#162:                               # %land.lhs.true287
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %rbx
	ja	.LBB85_161
	jmp	.LBB85_163
.LBB85_95:                              # %land.lhs.true94
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%rbx, %rax
	je	.LBB85_96
# BB#97:                                # %land.lhs.true94
	movl	which_alternative(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB85_98
# BB#99:                                # %lor.lhs.false99
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%rbx, %rax
	jne	.LBB85_100
# BB#101:                               # %lor.lhs.false99
	movabsq	$1, %rax
	jmp	.LBB85_49
.LBB85_23:                              # %cond.end
	leaq	-88(%rax), %rcx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	jae	.LBB85_24
# BB#130:                               # %sw.bb160
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$1, %rcx
	je	.LBB85_50
# BB#131:                               # %select.mid
	movq	$3, %rax
	jmp	.LBB85_50
.LBB85_79:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_81:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_32:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_169:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_171:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_87:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_89:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_91:
	movabsq	$0, %rax
	jmp	.LBB85_49
.LBB85_158:                             # %lor.lhs.false279
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB85_161
# BB#159:                               # %land.lhs.true283
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB85_161
# BB#160:                               # %land.lhs.true283
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jae	.LBB85_161
.LBB85_163:                             # %lor.lhs.false293
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
.LBB85_18:                              # %sw.bb219
	movq	$1, %rax
	jmp	.LBB85_19
.LBB85_24:                              # %cond.end
	andq	%rbx, %rax
	cmpq	$84, %rax
	jne	.LBB85_25
# BB#132:                               # %sw.bb165
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%rbx, %rax
	cmpq	$5, %rax
	jb	.LBB85_133
# BB#134:                               # %sw.bb165
	movl	flag_pic(%rip), %eax
	testq	%rbx, %rax
	je	.LBB85_135
# BB#136:                               # %lor.lhs.false177
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%rbx, %rax
	je	.LBB85_137
# BB#138:                               # %lor.lhs.false177
	movl	flag_pic(%rip), %eax
	testq	%rbx, %rax
	je	.LBB85_139
# BB#140:                               # %land.lhs.true182
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	jmp	.LBB85_141
.LBB85_68:                              # %land.lhs.true39
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB85_71
# BB#69:                                # %land.lhs.true43
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	movl	which_alternative(%rip), %ecx
	orq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB85_161
# BB#70:                                # %land.lhs.true43.lor.lhs.false48_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB85_71:                              # %lor.lhs.false48
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB85_161
# BB#72:                                # %lor.lhs.false52
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB85_47
# BB#73:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_111:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_113:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_119:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_121:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_55:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_57:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_96:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_98:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_100:
	movabsq	$0, %rax
	jmp	.LBB85_49
.LBB85_25:                              # %cond.end
	cmpq	$90, %rax
	jne	.LBB85_26
# BB#126:                               # %sw.bb147
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %edx
	cmpq	$2, %rdx
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rsi
	jbe	.LBB85_128
# BB#127:                               # %sw.bb147
	movq	%rcx, %rsi
.LBB85_128:                             # %sw.bb147
	addq	$-3, %rdx
	andq	%rbx, %rdx
	cmpq	$2, %rdx
	sbbq	%rdx, %rdx
	testq	%rsi, %rdx
	jne	.LBB85_49
# BB#129:                               # %sw.bb147
	movq	%rcx, %rax
	jmp	.LBB85_49
.LBB85_116:                             # %lor.lhs.false127
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$10, %rax
	je	.LBB85_47
# BB#117:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_124:                             # %lor.lhs.false141
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$10, %rax
	je	.LBB85_47
# BB#125:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_103:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_105:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_153:                             # %lor.lhs.false213
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	je	.LBB85_47
# BB#154:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_26:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_108:                             # %lor.lhs.false113
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$10, %rax
	jne	.LBB85_109
.LBB85_47:                              # %sw.bb
	movabsq	$1, %rax
.LBB85_48:                              # %sw.bb
	xorq	$1, %rax
.LBB85_49:                              # %sw.epilog
	leaq	(%rax,%rax,2), %rax
.LBB85_50:                              # %sw.epilog
	leaq	-2(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$2, %rdx
	jae	.LBB85_177
# BB#51:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_177:                             # %sw.epilog
	testq	%rcx, %rax
	movq	$1, %rbx
	je	.LBB85_161
# BB#178:                               # %sw.epilog
	andq	%rcx, %rax
	cmpq	$1, %rax
	je	.LBB85_179
# BB#180:                               # %sw.default353
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_ieu_unit_conflict_cost, %rcx
	movq	$23540, %rsi            # imm = 0x5BF4
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB85_144:                             # %sw.bb193
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB85_146
# BB#145:                               # %land.lhs.true196
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB85_161
.LBB85_146:                             # %lor.lhs.false200
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB85_147
# BB#148:                               # %lor.lhs.false203
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	jne	.LBB85_149
# BB#150:                               # %lor.lhs.false203
	movabsq	$1, %rax
	jmp	.LBB85_49
.LBB85_161:                             # %land.lhs.true243
	movq	%rbx, %rax
.LBB85_19:                              # %sw.bb219
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB85_142:                             # %sw.bb188
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	testq	%rcx, %rcx
	je	.LBB85_50
# BB#143:                               # %select.mid2
	movq	$3, %rax
	jmp	.LBB85_50
.LBB85_133:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_135:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_137:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_139:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_109:
	movabsq	$0, %rax
	jmp	.LBB85_48
.LBB85_147:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB85_19
.LBB85_149:
	movabsq	$0, %rax
	jmp	.LBB85_49
.Ltmp849:
	.size	athlon_ieu_unit_conflict_cost, .Ltmp849-athlon_ieu_unit_conflict_cost
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI85_0:
	.quad	.LBB85_78
	.quad	.LBB85_74
	.quad	.LBB85_161
	.quad	.LBB85_161
	.quad	.LBB85_161
	.quad	.LBB85_78
	.quad	.LBB85_66
	.quad	.LBB85_74
	.quad	.LBB85_60
	.quad	.LBB85_78
	.quad	.LBB85_74
	.quad	.LBB85_74
	.quad	.LBB85_54
	.quad	.LBB85_74
	.quad	.LBB85_74
.LJTI85_1:
	.quad	.LBB85_151
	.quad	.LBB85_151
	.quad	.LBB85_161
	.quad	.LBB85_161
	.quad	.LBB85_161
	.quad	.LBB85_151
	.quad	.LBB85_144
	.quad	.LBB85_161
	.quad	.LBB85_161
	.quad	.LBB85_161
	.quad	.LBB85_161
	.quad	.LBB85_142

	.text
	.align	16, 0x90
	.type	athlon_ieu_unit_blockage,@function
athlon_ieu_unit_blockage:               # @athlon_ieu_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r15
.Ltmp854:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp855:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp856:
	.cfi_def_cfa_offset 32
.Ltmp857:
	.cfi_offset %rbx, -32
.Ltmp858:
	.cfi_offset %r14, -24
.Ltmp859:
	.cfi_offset %r15, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB86_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB86_2:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$44, %rdx
	jg	.LBB86_5
# BB#3:                                 # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB86_4
# BB#173:                               # %sw.bb337
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	jne	.LBB86_175
# BB#174:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_5:                               # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$582, %rdx              # imm = 0x246
	jg	.LBB86_41
# BB#6:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$506, %rdx              # imm = 0x1FA
	jg	.LBB86_39
# BB#7:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$402, %rdx              # imm = 0x192
	jg	.LBB86_37
# BB#8:                                 # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movq	$32, %rcx
	cmpq	$201, %rdx
	jg	.LBB86_27
# BB#9:                                 # %cond.end
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$50, %rdx
	jg	.LBB86_12
# BB#10:                                # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$45, %rax
	jne	.LBB86_11
# BB#164:                               # %sw.bb311
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%rbx, %rax
	cmpq	$6, %rax
	jb	.LBB86_165
# BB#166:                               # %sw.bb311
	movl	flag_pic(%rip), %eax
	testq	%rbx, %rax
	je	.LBB86_167
# BB#168:                               # %lor.lhs.false325
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
	callq	symbolic_operand
	testq	%rbx, %rax
	je	.LBB86_169
# BB#170:                               # %lor.lhs.false325
	movl	flag_pic(%rip), %eax
	testq	%rbx, %rax
	je	.LBB86_171
# BB#172:                               # %land.lhs.true330
	movq	recog_data+8(%rip), %rdi
	movq	$4, %rsi
.LBB86_141:                             # %land.lhs.true243
	callq	symbolic_operand
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_4:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_41:                              # %cond.end
	leaq	-583(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$30, %rdx
	jae	.LBB86_42
.LBB86_179:                             # %sw.bb350
	movq	$15, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_175:                             # %land.lhs.true341
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	movq	$1, %rbx
	jns	.LBB86_161
# BB#176:                               # %if.then347
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_ieu_unit_blockage, %rcx
	movq	$22849, %rdx            # imm = 0x5941
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.LBB86_39:                              # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$507, %rax              # imm = 0x1FB
	jne	.LBB86_40
# BB#52:                                # %sw.bb7
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$14, %rax
	je	.LBB86_47
# BB#53:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_37:                              # %cond.end
	addq	$-403, %rax             # imm = 0xFFFFFFFFFFFFFE6D
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$1, %rbx
	cmpq	$14, %rax
	ja	.LBB86_161
# BB#38:                                # %cond.end
	jmpq	*.LJTI86_0(,%rax,8)
.LBB86_74:                              # %sw.bb58
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	jne	.LBB86_76
# BB#75:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_40:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_27:                              # %cond.end
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$220, %rdx
	jg	.LBB86_35
# BB#28:                                # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$214, %rdx
	jg	.LBB86_33
# BB#29:                                # %cond.end
	cmpq	$202, %rax
	je	.LBB86_118
# BB#30:                                # %cond.end
	cmpq	$207, %rax
	jne	.LBB86_31
# BB#110:                               # %sw.bb119
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$4, %rax
	je	.LBB86_111
# BB#112:                               # %sw.bb119
	movl	which_alternative(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB86_113
# BB#114:                               # %lor.lhs.false124
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	je	.LBB86_116
# BB#115:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_12:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$59, %rdx
	jg	.LBB86_15
# BB#13:                                # %cond.end
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	cmpq	$51, %rax
	jne	.LBB86_14
# BB#155:                               # %sw.bb272
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB86_157
# BB#156:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_42:                              # %cond.end
	andq	%rcx, %rax
	cmpq	$618, %rax              # imm = 0x26A
	je	.LBB86_45
# BB#43:                                # %cond.end
	cmpq	$620, %rax              # imm = 0x26C
	jne	.LBB86_44
.LBB86_45:                              # %sw.bb
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	movabsq	$4294967294, %rcx       # imm = 0xFFFFFFFE
	andq	%rax, %rcx
	cmpq	$2, %rcx
	je	.LBB86_47
# BB#46:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_35:                              # %cond.end
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rax
	cmpq	$221, %rax
	jne	.LBB86_36
# BB#84:                                # %sw.bb79
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$3, %rax
	jne	.LBB86_86
# BB#85:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_11:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_33:                              # %cond.end
	cmpq	$215, %rax
	jne	.LBB86_34
# BB#93:                                # %sw.bb92
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	cmpq	$2, %rax
	jne	.LBB86_95
# BB#94:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_15:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$65, %rdx
	jg	.LBB86_20
# BB#16:                                # %cond.end
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rax
	cmpq	$60, %rax
	movq	$1, %rbx
	jne	.LBB86_161
# BB#17:                                # %sw.bb219
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	jmp	.LBB86_18
.LBB86_36:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_78:                              # %sw.bb67
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB86_79
# BB#80:                                # %sw.bb67
	movl	which_alternative(%rip), %eax
	testq	%r15, %rax
	jne	.LBB86_81
# BB#82:                                # %lor.lhs.false72
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB86_47
# BB#83:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_76:                              # %lor.lhs.false61
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB86_47
# BB#77:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_14:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_44:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_86:                              # %land.lhs.true81
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%rbx, %rax
	je	.LBB86_87
# BB#88:                                # %land.lhs.true81
	movl	which_alternative(%rip), %eax
	andq	%rbx, %rax
	cmpq	$3, %rax
	je	.LBB86_89
# BB#90:                                # %lor.lhs.false86
	movq	recog_data+16(%rip), %rdi
	movq	$2, %rsi
	callq	incdec_operand
	testq	%rbx, %rax
	jne	.LBB86_91
# BB#92:                                # %lor.lhs.false86
	movabsq	$1, %rax
	jmp	.LBB86_49
.LBB86_34:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_20:                              # %cond.end
	movq	$32, %rcx
	movq	%rax, %rdx
	shlq	%cl, %rdx
	movq	$32, %rcx
	sarq	%cl, %rdx
	cmpq	$83, %rdx
	jg	.LBB86_23
# BB#21:                                # %cond.end
	addq	$-66, %rax
	movabsq	$4294967295, %r15       # imm = 0xFFFFFFFF
	andq	%r15, %rax
	movq	$1, %rbx
	cmpq	$11, %rax
	ja	.LBB86_161
# BB#22:                                # %cond.end
	jmpq	*.LJTI86_1(,%rax,8)
.LBB86_151:                             # %sw.bb210
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$7, %rax
	jne	.LBB86_153
# BB#152:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_118:                             # %sw.bb133
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$4, %rax
	je	.LBB86_119
# BB#120:                               # %sw.bb133
	movl	which_alternative(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB86_121
# BB#122:                               # %lor.lhs.false138
	movq	recog_data+16(%rip), %rdi
	movq	$5, %rsi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	je	.LBB86_124
# BB#123:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_31:                              # %cond.end
	cmpq	$208, %rax
	jne	.LBB86_32
# BB#102:                               # %sw.bb105
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$4, %rax
	je	.LBB86_103
# BB#104:                               # %sw.bb105
	movl	which_alternative(%rip), %eax
	testq	%rbx, %rax
	jne	.LBB86_105
# BB#106:                               # %lor.lhs.false110
	movq	recog_data+16(%rip), %rdi
	movq	$4, %rsi
	callq	pic_symbolic_operand
	testq	%rbx, %rax
	je	.LBB86_108
# BB#107:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_66:                              # %sw.bb37
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	testq	%rax, %rax
	je	.LBB86_68
# BB#67:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_60:                              # %sw.bb24
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB86_63
# BB#61:                                # %land.lhs.true
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	jne	.LBB86_161
# BB#62:                                # %land.lhs.true.lor.lhs.false27_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB86_63:                              # %lor.lhs.false27
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB86_161
# BB#64:                                # %lor.lhs.false31
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB86_47
# BB#65:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_54:                              # %sw.bb13
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$4, %rax
	je	.LBB86_55
# BB#56:                                # %sw.bb13
	movl	which_alternative(%rip), %eax
	andq	%r15, %rax
	cmpq	$2, %rax
	je	.LBB86_57
# BB#58:                                # %lor.lhs.false18
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$11, %rax
	je	.LBB86_47
# BB#59:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_165:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_167:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_157:                             # %lor.lhs.false275
	movl	which_alternative(%rip), %eax
	cmpq	$1, %rax
	jbe	.LBB86_158
# BB#162:                               # %land.lhs.true287
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$2, %rax
	movq	$1, %rbx
	ja	.LBB86_161
	jmp	.LBB86_163
.LBB86_95:                              # %land.lhs.true94
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%rbx, %rax
	je	.LBB86_96
# BB#97:                                # %land.lhs.true94
	movl	which_alternative(%rip), %eax
	andq	%rbx, %rax
	cmpq	$2, %rax
	je	.LBB86_98
# BB#99:                                # %lor.lhs.false99
	movq	recog_data+16(%rip), %rdi
	movq	$3, %rsi
	callq	incdec_operand
	testq	%rbx, %rax
	jne	.LBB86_100
# BB#101:                               # %lor.lhs.false99
	movabsq	$1, %rax
	jmp	.LBB86_49
.LBB86_23:                              # %cond.end
	leaq	-88(%rax), %rcx
	movabsq	$4294967295, %rbx       # imm = 0xFFFFFFFF
	andq	%rbx, %rcx
	cmpq	$2, %rcx
	jae	.LBB86_24
# BB#130:                               # %sw.bb160
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	cmpq	$1, %rcx
	je	.LBB86_50
# BB#131:                               # %select.mid
	movq	$3, %rax
	jmp	.LBB86_50
.LBB86_79:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_81:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_32:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_169:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_171:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_87:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_89:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_91:
	movabsq	$0, %rax
	jmp	.LBB86_49
.LBB86_158:                             # %lor.lhs.false279
	movl	ix86_cpu(%rip), %ecx
	movl	x86_partial_reg_stall(%rip), %esi
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rdx, %rsi
	testq	%r15, %rsi
	je	.LBB86_161
# BB#159:                               # %land.lhs.true283
	movl	x86_himode_math(%rip), %ecx
	andq	%rdx, %rcx
	testq	%r15, %rcx
	je	.LBB86_161
# BB#160:                               # %land.lhs.true283
	addq	$-2, %rax
	andq	%r15, %rax
	cmpq	$3, %rax
	jae	.LBB86_161
.LBB86_163:                             # %lor.lhs.false293
	movq	recog_data+8(%rip), %rdi
	movq	$3, %rsi
	callq	aligned_operand
.LBB86_18:                              # %sw.bb219
	movq	$1, %rax
	jmp	.LBB86_19
.LBB86_24:                              # %cond.end
	andq	%rbx, %rax
	cmpq	$84, %rax
	jne	.LBB86_25
# BB#132:                               # %sw.bb165
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %eax
	addq	$-4, %rax
	andq	%rbx, %rax
	cmpq	$5, %rax
	jb	.LBB86_133
# BB#134:                               # %sw.bb165
	movl	flag_pic(%rip), %eax
	testq	%rbx, %rax
	je	.LBB86_135
# BB#136:                               # %lor.lhs.false177
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	callq	symbolic_operand
	testq	%rbx, %rax
	je	.LBB86_137
# BB#138:                               # %lor.lhs.false177
	movl	flag_pic(%rip), %eax
	testq	%rbx, %rax
	je	.LBB86_139
# BB#140:                               # %land.lhs.true182
	movq	recog_data+8(%rip), %rdi
	movq	$5, %rsi
	jmp	.LBB86_141
.LBB86_68:                              # %land.lhs.true39
	movl	ix86_cpu(%rip), %ecx
	movl	x86_double_with_add(%rip), %r14d
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB86_71
# BB#69:                                # %land.lhs.true43
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	movl	which_alternative(%rip), %ecx
	orq	%rax, %rcx
	testq	%r15, %rcx
	jne	.LBB86_161
# BB#70:                                # %land.lhs.true43.lor.lhs.false48_crit_edge
	movl	ix86_cpu(%rip), %ecx
.LBB86_71:                              # %lor.lhs.false48
	movq	$1, %rbx
	movq	$1, %rax
	shlq	%cl, %rax
	andq	%r14, %rax
	testq	%r15, %rax
	je	.LBB86_161
# BB#72:                                # %lor.lhs.false52
	movq	recog_data+16(%rip), %rdi
	xorq	%rsi, %rsi
	callq	const1_operand
	testq	%r15, %rax
	je	.LBB86_47
# BB#73:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_111:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_113:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_119:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_121:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_55:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_57:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_96:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_98:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_100:
	movabsq	$0, %rax
	jmp	.LBB86_49
.LBB86_25:                              # %cond.end
	cmpq	$90, %rax
	jne	.LBB86_26
# BB#126:                               # %sw.bb147
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %edx
	cmpq	$2, %rdx
	movabsq	$0, %rax
	movabsq	$1, %rcx
	movq	%rax, %rsi
	jbe	.LBB86_128
# BB#127:                               # %sw.bb147
	movq	%rcx, %rsi
.LBB86_128:                             # %sw.bb147
	addq	$-3, %rdx
	andq	%rbx, %rdx
	cmpq	$2, %rdx
	sbbq	%rdx, %rdx
	testq	%rsi, %rdx
	jne	.LBB86_49
# BB#129:                               # %sw.bb147
	movq	%rcx, %rax
	jmp	.LBB86_49
.LBB86_116:                             # %lor.lhs.false127
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$10, %rax
	je	.LBB86_47
# BB#117:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_124:                             # %lor.lhs.false141
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$10, %rax
	je	.LBB86_47
# BB#125:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_103:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_105:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_153:                             # %lor.lhs.false213
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%r15, %rax
	cmpq	$8, %rax
	je	.LBB86_47
# BB#154:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_26:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_108:                             # %lor.lhs.false113
	movq	%r14, %rdi
	callq	get_attr_type
	andq	%rbx, %rax
	cmpq	$10, %rax
	jne	.LBB86_109
.LBB86_47:                              # %sw.bb
	movabsq	$1, %rax
.LBB86_48:                              # %sw.bb
	xorq	$1, %rax
.LBB86_49:                              # %sw.epilog
	leaq	(%rax,%rax,2), %rax
.LBB86_50:                              # %sw.epilog
	leaq	-2(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$2, %rdx
	jae	.LBB86_177
# BB#51:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_177:                             # %sw.epilog
	testq	%rcx, %rax
	movq	$1, %rbx
	je	.LBB86_161
# BB#178:                               # %sw.epilog
	andq	%rcx, %rax
	cmpq	$1, %rax
	je	.LBB86_179
# BB#180:                               # %sw.default353
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_ieu_unit_blockage, %rcx
	movq	$22872, %rsi            # imm = 0x5958
	movq	%rax, %rdi
	movq	%rcx, %rdx
	callq	fancy_abort
.LBB86_144:                             # %sw.bb193
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movq	recog_data(%rip), %rdi
	movq	$2, %rsi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB86_146
# BB#145:                               # %land.lhs.true196
	movl	ix86_cpu(%rip), %ecx
	movl	x86_movx(%rip), %eax
	movq	$1, %rbx
	movq	$1, %rdx
	shlq	%cl, %rdx
	andq	%rax, %rdx
	testq	%r15, %rdx
	je	.LBB86_161
.LBB86_146:                             # %lor.lhs.false200
	movq	recog_data(%rip), %rax
	movq	$2, %rsi
	movq	%rax, %rdi
	callq	q_regs_operand
	testq	%r15, %rax
	je	.LBB86_147
# BB#148:                               # %lor.lhs.false203
	movl	ix86_cpu(%rip), %eax
	movl	x86_movx(%rip), %edx
	movq	$1, %rsi
	movq	%rax, %rcx
	shlq	%cl, %rsi
	andq	%rdx, %rsi
	testq	%r15, %rsi
	jne	.LBB86_149
# BB#150:                               # %lor.lhs.false203
	movabsq	$1, %rax
	jmp	.LBB86_49
.LBB86_161:                             # %land.lhs.true243
	movq	%rbx, %rax
.LBB86_19:                              # %sw.bb219
	popq	%rbx
	popq	%r14
	popq	%r15
	retq
.LBB86_142:                             # %sw.bb188
	movq	%r14, %rdi
	callq	extract_constrain_insn_cached
	movl	which_alternative(%rip), %ecx
	xorq	%rax, %rax
	testq	%rcx, %rcx
	je	.LBB86_50
# BB#143:                               # %select.mid2
	movq	$3, %rax
	jmp	.LBB86_50
.LBB86_133:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_135:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_137:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_139:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_109:
	movabsq	$0, %rax
	jmp	.LBB86_48
.LBB86_147:
	movq	$1, %rbx
	movq	%rbx, %rax
	jmp	.LBB86_19
.LBB86_149:
	movabsq	$0, %rax
	jmp	.LBB86_49
.Ltmp860:
	.size	athlon_ieu_unit_blockage, .Ltmp860-athlon_ieu_unit_blockage
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI86_0:
	.quad	.LBB86_78
	.quad	.LBB86_74
	.quad	.LBB86_161
	.quad	.LBB86_161
	.quad	.LBB86_161
	.quad	.LBB86_78
	.quad	.LBB86_66
	.quad	.LBB86_74
	.quad	.LBB86_60
	.quad	.LBB86_78
	.quad	.LBB86_74
	.quad	.LBB86_74
	.quad	.LBB86_54
	.quad	.LBB86_74
	.quad	.LBB86_74
.LJTI86_1:
	.quad	.LBB86_151
	.quad	.LBB86_151
	.quad	.LBB86_161
	.quad	.LBB86_161
	.quad	.LBB86_161
	.quad	.LBB86_151
	.quad	.LBB86_144
	.quad	.LBB86_161
	.quad	.LBB86_161
	.quad	.LBB86_161
	.quad	.LBB86_161
	.quad	.LBB86_142

	.text
	.align	16, 0x90
	.type	athlon_muldiv_unit_conflict_cost,@function
athlon_muldiv_unit_conflict_cost:       # @athlon_muldiv_unit_conflict_cost
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp864:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp865:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp866:
	.cfi_def_cfa_offset 32
.Ltmp867:
	.cfi_offset %rbx, -24
.Ltmp868:
	.cfi_offset %r14, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB87_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB87_2:                               # %cond.end
	leaq	-249(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$17, %rdx
	jae	.LBB87_3
# BB#7:                                 # %sw.epilog.thread
	movq	$1, %rbx
.LBB87_8:                               # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB87_3:                               # %cond.end
	movq	$42, %rbx
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB87_8
# BB#4:                                 # %sw.bb4
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB87_8
# BB#5:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB87_8
# BB#6:                                 # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_muldiv_unit_conflict_cost, %rcx
	movq	$22187, %rdx            # imm = 0x56AB
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp869:
	.size	athlon_muldiv_unit_conflict_cost, .Ltmp869-athlon_muldiv_unit_conflict_cost
	.cfi_endproc

	.align	16, 0x90
	.type	athlon_muldiv_unit_blockage,@function
athlon_muldiv_unit_blockage:            # @athlon_muldiv_unit_blockage
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%r14
.Ltmp873:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp874:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp875:
	.cfi_def_cfa_offset 32
.Ltmp876:
	.cfi_offset %rbx, -24
.Ltmp877:
	.cfi_offset %r14, -16
	movq	%rdi, %r14
	movslq	40(%r14), %rax
	testq	%rax, %rax
	jns	.LBB88_2
# BB#1:                                 # %cond.false
	movq	%r14, %rdi
	callq	recog_memoized_1
.LBB88_2:                               # %cond.end
	leaq	-249(%rax), %rdx
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	andq	%rcx, %rdx
	cmpq	$17, %rdx
	jae	.LBB88_3
# BB#7:                                 # %sw.epilog.thread
	movq	$1, %rbx
.LBB88_8:                               # %return
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	retq
.LBB88_3:                               # %cond.end
	movq	$42, %rbx
	andq	%rcx, %rax
	cmpq	%rcx, %rax
	jne	.LBB88_8
# BB#4:                                 # %sw.bb4
	movq	32(%r14), %rdi
	movzbl	(%rdi), %eax
	cmpq	$40, %rax
	je	.LBB88_8
# BB#5:                                 # %land.lhs.true
	callq	asm_noperands
	movq	$32, %rcx
	shlq	%cl, %rax
	movq	$32, %rcx
	sarq	%cl, %rax
	testq	%rax, %rax
	jns	.LBB88_8
# BB#6:                                 # %if.then
	movabsq	$.L.str, %rax
	movabsq	$.L__FUNCTION__.athlon_muldiv_unit_blockage, %rcx
	movq	$22131, %rdx            # imm = 0x5673
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_fatal_insn_not_found
.Ltmp878:
	.size	athlon_muldiv_unit_blockage, .Ltmp878-athlon_muldiv_unit_blockage
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"insn-attrtab.c"
	.size	.L.str, 15

	.type	.L__FUNCTION__.insn_current_length,@object # @__FUNCTION__.insn_current_length
.L__FUNCTION__.insn_current_length:
	.asciz	"insn_current_length"
	.size	.L__FUNCTION__.insn_current_length, 20

	.type	.L__FUNCTION__.insn_variable_length_p,@object # @__FUNCTION__.insn_variable_length_p
.L__FUNCTION__.insn_variable_length_p:
	.asciz	"insn_variable_length_p"
	.size	.L__FUNCTION__.insn_variable_length_p, 23

	.type	.L__FUNCTION__.insn_default_length,@object # @__FUNCTION__.insn_default_length
.L__FUNCTION__.insn_default_length:
	.asciz	"insn_default_length"
	.size	.L__FUNCTION__.insn_default_length, 20

	.type	.L__FUNCTION__.result_ready_cost,@object # @__FUNCTION__.result_ready_cost
.L__FUNCTION__.result_ready_cost:
	.asciz	"result_ready_cost"
	.size	.L__FUNCTION__.result_ready_cost, 18

	.type	.L__FUNCTION__.athlon_load_unit_ready_cost,@object # @__FUNCTION__.athlon_load_unit_ready_cost
.L__FUNCTION__.athlon_load_unit_ready_cost:
	.asciz	"athlon_load_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_load_unit_ready_cost, 28

	.type	.L__FUNCTION__.athlon_fp_store_unit_ready_cost,@object # @__FUNCTION__.athlon_fp_store_unit_ready_cost
.L__FUNCTION__.athlon_fp_store_unit_ready_cost:
	.asciz	"athlon_fp_store_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_fp_store_unit_ready_cost, 32

	.type	.L__FUNCTION__.athlon_fp_muladd_unit_ready_cost,@object # @__FUNCTION__.athlon_fp_muladd_unit_ready_cost
.L__FUNCTION__.athlon_fp_muladd_unit_ready_cost:
	.asciz	"athlon_fp_muladd_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_fp_muladd_unit_ready_cost, 33

	.type	.L__FUNCTION__.athlon_fp_add_unit_ready_cost,@object # @__FUNCTION__.athlon_fp_add_unit_ready_cost
.L__FUNCTION__.athlon_fp_add_unit_ready_cost:
	.asciz	"athlon_fp_add_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_fp_add_unit_ready_cost, 30

	.type	.L__FUNCTION__.athlon_fp_mul_unit_ready_cost,@object # @__FUNCTION__.athlon_fp_mul_unit_ready_cost
.L__FUNCTION__.athlon_fp_mul_unit_ready_cost:
	.asciz	"athlon_fp_mul_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_fp_mul_unit_ready_cost, 30

	.type	.L__FUNCTION__.athlon_fp_unit_ready_cost,@object # @__FUNCTION__.athlon_fp_unit_ready_cost
.L__FUNCTION__.athlon_fp_unit_ready_cost:
	.asciz	"athlon_fp_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_fp_unit_ready_cost, 26

	.type	.L__FUNCTION__.athlon_muldiv_unit_ready_cost,@object # @__FUNCTION__.athlon_muldiv_unit_ready_cost
.L__FUNCTION__.athlon_muldiv_unit_ready_cost:
	.asciz	"athlon_muldiv_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_muldiv_unit_ready_cost, 30

	.type	.L__FUNCTION__.athlon_muldiv_unit_blockage_range,@object # @__FUNCTION__.athlon_muldiv_unit_blockage_range
.L__FUNCTION__.athlon_muldiv_unit_blockage_range:
	.asciz	"athlon_muldiv_unit_blockage_range"
	.size	.L__FUNCTION__.athlon_muldiv_unit_blockage_range, 34

	.type	.L__FUNCTION__.athlon_ieu_unit_ready_cost,@object # @__FUNCTION__.athlon_ieu_unit_ready_cost
.L__FUNCTION__.athlon_ieu_unit_ready_cost:
	.asciz	"athlon_ieu_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_ieu_unit_ready_cost, 27

	.type	.L__FUNCTION__.athlon_ieu_unit_blockage_range,@object # @__FUNCTION__.athlon_ieu_unit_blockage_range
.L__FUNCTION__.athlon_ieu_unit_blockage_range:
	.asciz	"athlon_ieu_unit_blockage_range"
	.size	.L__FUNCTION__.athlon_ieu_unit_blockage_range, 31

	.type	.L__FUNCTION__.athlon_directdec_unit_ready_cost,@object # @__FUNCTION__.athlon_directdec_unit_ready_cost
.L__FUNCTION__.athlon_directdec_unit_ready_cost:
	.asciz	"athlon_directdec_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_directdec_unit_ready_cost, 33

	.type	.L__FUNCTION__.athlon_vectordec_unit_ready_cost,@object # @__FUNCTION__.athlon_vectordec_unit_ready_cost
.L__FUNCTION__.athlon_vectordec_unit_ready_cost:
	.asciz	"athlon_vectordec_unit_ready_cost"
	.size	.L__FUNCTION__.athlon_vectordec_unit_ready_cost, 33

	.type	.L__FUNCTION__.athlon_vectordec_unit_blockage_range,@object # @__FUNCTION__.athlon_vectordec_unit_blockage_range
.L__FUNCTION__.athlon_vectordec_unit_blockage_range:
	.asciz	"athlon_vectordec_unit_blockage_range"
	.size	.L__FUNCTION__.athlon_vectordec_unit_blockage_range, 37

	.type	.L__FUNCTION__.k6_fpu_unit_ready_cost,@object # @__FUNCTION__.k6_fpu_unit_ready_cost
.L__FUNCTION__.k6_fpu_unit_ready_cost:
	.asciz	"k6_fpu_unit_ready_cost"
	.size	.L__FUNCTION__.k6_fpu_unit_ready_cost, 23

	.type	.L__FUNCTION__.k6_fpu_unit_blockage_range,@object # @__FUNCTION__.k6_fpu_unit_blockage_range
.L__FUNCTION__.k6_fpu_unit_blockage_range:
	.asciz	"k6_fpu_unit_blockage_range"
	.size	.L__FUNCTION__.k6_fpu_unit_blockage_range, 27

	.type	.L__FUNCTION__.k6_store_unit_ready_cost,@object # @__FUNCTION__.k6_store_unit_ready_cost
.L__FUNCTION__.k6_store_unit_ready_cost:
	.asciz	"k6_store_unit_ready_cost"
	.size	.L__FUNCTION__.k6_store_unit_ready_cost, 25

	.type	.L__FUNCTION__.k6_store_unit_blockage_range,@object # @__FUNCTION__.k6_store_unit_blockage_range
.L__FUNCTION__.k6_store_unit_blockage_range:
	.asciz	"k6_store_unit_blockage_range"
	.size	.L__FUNCTION__.k6_store_unit_blockage_range, 29

	.type	.L__FUNCTION__.k6_load_unit_ready_cost,@object # @__FUNCTION__.k6_load_unit_ready_cost
.L__FUNCTION__.k6_load_unit_ready_cost:
	.asciz	"k6_load_unit_ready_cost"
	.size	.L__FUNCTION__.k6_load_unit_ready_cost, 24

	.type	.L__FUNCTION__.k6_load_unit_blockage_range,@object # @__FUNCTION__.k6_load_unit_blockage_range
.L__FUNCTION__.k6_load_unit_blockage_range:
	.asciz	"k6_load_unit_blockage_range"
	.size	.L__FUNCTION__.k6_load_unit_blockage_range, 28

	.type	.L__FUNCTION__.k6_branch_unit_ready_cost,@object # @__FUNCTION__.k6_branch_unit_ready_cost
.L__FUNCTION__.k6_branch_unit_ready_cost:
	.asciz	"k6_branch_unit_ready_cost"
	.size	.L__FUNCTION__.k6_branch_unit_ready_cost, 26

	.type	.L__FUNCTION__.k6_alu_unit_ready_cost,@object # @__FUNCTION__.k6_alu_unit_ready_cost
.L__FUNCTION__.k6_alu_unit_ready_cost:
	.asciz	"k6_alu_unit_ready_cost"
	.size	.L__FUNCTION__.k6_alu_unit_ready_cost, 23

	.type	.L__FUNCTION__.k6_alu_unit_blockage_range,@object # @__FUNCTION__.k6_alu_unit_blockage_range
.L__FUNCTION__.k6_alu_unit_blockage_range:
	.asciz	"k6_alu_unit_blockage_range"
	.size	.L__FUNCTION__.k6_alu_unit_blockage_range, 27

	.type	.L__FUNCTION__.k6_alux_unit_ready_cost,@object # @__FUNCTION__.k6_alux_unit_ready_cost
.L__FUNCTION__.k6_alux_unit_ready_cost:
	.asciz	"k6_alux_unit_ready_cost"
	.size	.L__FUNCTION__.k6_alux_unit_ready_cost, 24

	.type	.L__FUNCTION__.k6_alux_unit_blockage_range,@object # @__FUNCTION__.k6_alux_unit_blockage_range
.L__FUNCTION__.k6_alux_unit_blockage_range:
	.asciz	"k6_alux_unit_blockage_range"
	.size	.L__FUNCTION__.k6_alux_unit_blockage_range, 28

	.type	.L__FUNCTION__.ppro_p34_unit_ready_cost,@object # @__FUNCTION__.ppro_p34_unit_ready_cost
.L__FUNCTION__.ppro_p34_unit_ready_cost:
	.asciz	"ppro_p34_unit_ready_cost"
	.size	.L__FUNCTION__.ppro_p34_unit_ready_cost, 25

	.type	.L__FUNCTION__.ppro_p2_unit_ready_cost,@object # @__FUNCTION__.ppro_p2_unit_ready_cost
.L__FUNCTION__.ppro_p2_unit_ready_cost:
	.asciz	"ppro_p2_unit_ready_cost"
	.size	.L__FUNCTION__.ppro_p2_unit_ready_cost, 24

	.type	.L__FUNCTION__.ppro_p01_unit_ready_cost,@object # @__FUNCTION__.ppro_p01_unit_ready_cost
.L__FUNCTION__.ppro_p01_unit_ready_cost:
	.asciz	"ppro_p01_unit_ready_cost"
	.size	.L__FUNCTION__.ppro_p01_unit_ready_cost, 25

	.type	.L__FUNCTION__.ppro_p0_unit_ready_cost,@object # @__FUNCTION__.ppro_p0_unit_ready_cost
.L__FUNCTION__.ppro_p0_unit_ready_cost:
	.asciz	"ppro_p0_unit_ready_cost"
	.size	.L__FUNCTION__.ppro_p0_unit_ready_cost, 24

	.type	.L__FUNCTION__.ppro_p0_unit_blockage_range,@object # @__FUNCTION__.ppro_p0_unit_blockage_range
.L__FUNCTION__.ppro_p0_unit_blockage_range:
	.asciz	"ppro_p0_unit_blockage_range"
	.size	.L__FUNCTION__.ppro_p0_unit_blockage_range, 28

	.type	.L__FUNCTION__.pent_v_unit_ready_cost,@object # @__FUNCTION__.pent_v_unit_ready_cost
.L__FUNCTION__.pent_v_unit_ready_cost:
	.asciz	"pent_v_unit_ready_cost"
	.size	.L__FUNCTION__.pent_v_unit_ready_cost, 23

	.type	.L__FUNCTION__.pent_uv_unit_ready_cost,@object # @__FUNCTION__.pent_uv_unit_ready_cost
.L__FUNCTION__.pent_uv_unit_ready_cost:
	.asciz	"pent_uv_unit_ready_cost"
	.size	.L__FUNCTION__.pent_uv_unit_ready_cost, 24

	.type	.L__FUNCTION__.pent_uv_unit_blockage_range,@object # @__FUNCTION__.pent_uv_unit_blockage_range
.L__FUNCTION__.pent_uv_unit_blockage_range:
	.asciz	"pent_uv_unit_blockage_range"
	.size	.L__FUNCTION__.pent_uv_unit_blockage_range, 28

	.type	.L__FUNCTION__.pent_u_unit_ready_cost,@object # @__FUNCTION__.pent_u_unit_ready_cost
.L__FUNCTION__.pent_u_unit_ready_cost:
	.asciz	"pent_u_unit_ready_cost"
	.size	.L__FUNCTION__.pent_u_unit_ready_cost, 23

	.type	.L__FUNCTION__.pent_u_unit_blockage_range,@object # @__FUNCTION__.pent_u_unit_blockage_range
.L__FUNCTION__.pent_u_unit_blockage_range:
	.asciz	"pent_u_unit_blockage_range"
	.size	.L__FUNCTION__.pent_u_unit_blockage_range, 27

	.type	.L__FUNCTION__.fpu_unit_ready_cost,@object # @__FUNCTION__.fpu_unit_ready_cost
.L__FUNCTION__.fpu_unit_ready_cost:
	.asciz	"fpu_unit_ready_cost"
	.size	.L__FUNCTION__.fpu_unit_ready_cost, 20

	.type	.L__FUNCTION__.fpu_unit_blockage_range,@object # @__FUNCTION__.fpu_unit_blockage_range
.L__FUNCTION__.fpu_unit_blockage_range:
	.asciz	"fpu_unit_blockage_range"
	.size	.L__FUNCTION__.fpu_unit_blockage_range, 24

	.type	.L__FUNCTION__.pent_mul_unit_ready_cost,@object # @__FUNCTION__.pent_mul_unit_ready_cost
.L__FUNCTION__.pent_mul_unit_ready_cost:
	.asciz	"pent_mul_unit_ready_cost"
	.size	.L__FUNCTION__.pent_mul_unit_ready_cost, 25

	.type	.L__FUNCTION__.pent_mul_unit_blockage_range,@object # @__FUNCTION__.pent_mul_unit_blockage_range
.L__FUNCTION__.pent_mul_unit_blockage_range:
	.asciz	"pent_mul_unit_blockage_range"
	.size	.L__FUNCTION__.pent_mul_unit_blockage_range, 29

	.type	.L__FUNCTION__.pent_np_unit_ready_cost,@object # @__FUNCTION__.pent_np_unit_ready_cost
.L__FUNCTION__.pent_np_unit_ready_cost:
	.asciz	"pent_np_unit_ready_cost"
	.size	.L__FUNCTION__.pent_np_unit_ready_cost, 24

	.type	.L__FUNCTION__.pent_np_unit_blockage_range,@object # @__FUNCTION__.pent_np_unit_blockage_range
.L__FUNCTION__.pent_np_unit_blockage_range:
	.asciz	"pent_np_unit_blockage_range"
	.size	.L__FUNCTION__.pent_np_unit_blockage_range, 28

	.type	.L__FUNCTION__.get_attr_athlon_fpunits,@object # @__FUNCTION__.get_attr_athlon_fpunits
.L__FUNCTION__.get_attr_athlon_fpunits:
	.asciz	"get_attr_athlon_fpunits"
	.size	.L__FUNCTION__.get_attr_athlon_fpunits, 24

	.type	.L__FUNCTION__.get_attr_athlon_decode,@object # @__FUNCTION__.get_attr_athlon_decode
.L__FUNCTION__.get_attr_athlon_decode:
	.asciz	"get_attr_athlon_decode"
	.size	.L__FUNCTION__.get_attr_athlon_decode, 23

	.type	.L__FUNCTION__.get_attr_fp_int_src,@object # @__FUNCTION__.get_attr_fp_int_src
.L__FUNCTION__.get_attr_fp_int_src:
	.asciz	"get_attr_fp_int_src"
	.size	.L__FUNCTION__.get_attr_fp_int_src, 20

	.type	.L__FUNCTION__.get_attr_imm_disp,@object # @__FUNCTION__.get_attr_imm_disp
.L__FUNCTION__.get_attr_imm_disp:
	.asciz	"get_attr_imm_disp"
	.size	.L__FUNCTION__.get_attr_imm_disp, 18

	.type	.L__FUNCTION__.get_attr_i387,@object # @__FUNCTION__.get_attr_i387
.L__FUNCTION__.get_attr_i387:
	.asciz	"get_attr_i387"
	.size	.L__FUNCTION__.get_attr_i387, 14

	.type	.L__FUNCTION__.get_attr_length_address,@object # @__FUNCTION__.get_attr_length_address
.L__FUNCTION__.get_attr_length_address:
	.asciz	"get_attr_length_address"
	.size	.L__FUNCTION__.get_attr_length_address, 24

	.type	.L__FUNCTION__.get_attr_length_immediate,@object # @__FUNCTION__.get_attr_length_immediate
.L__FUNCTION__.get_attr_length_immediate:
	.asciz	"get_attr_length_immediate"
	.size	.L__FUNCTION__.get_attr_length_immediate, 26

	.type	.L__FUNCTION__.get_attr_memory,@object # @__FUNCTION__.get_attr_memory
.L__FUNCTION__.get_attr_memory:
	.asciz	"get_attr_memory"
	.size	.L__FUNCTION__.get_attr_memory, 16

	.type	.L__FUNCTION__.get_attr_modrm,@object # @__FUNCTION__.get_attr_modrm
.L__FUNCTION__.get_attr_modrm:
	.asciz	"get_attr_modrm"
	.size	.L__FUNCTION__.get_attr_modrm, 15

	.type	.L__FUNCTION__.get_attr_mode,@object # @__FUNCTION__.get_attr_mode
.L__FUNCTION__.get_attr_mode:
	.asciz	"get_attr_mode"
	.size	.L__FUNCTION__.get_attr_mode, 14

	.type	.L__FUNCTION__.get_attr_ppro_uops,@object # @__FUNCTION__.get_attr_ppro_uops
.L__FUNCTION__.get_attr_ppro_uops:
	.asciz	"get_attr_ppro_uops"
	.size	.L__FUNCTION__.get_attr_ppro_uops, 19

	.type	.L__FUNCTION__.get_attr_pent_pair,@object # @__FUNCTION__.get_attr_pent_pair
.L__FUNCTION__.get_attr_pent_pair:
	.asciz	"get_attr_pent_pair"
	.size	.L__FUNCTION__.get_attr_pent_pair, 19

	.type	.L__FUNCTION__.get_attr_pent_prefix,@object # @__FUNCTION__.get_attr_pent_prefix
.L__FUNCTION__.get_attr_pent_prefix:
	.asciz	"get_attr_pent_prefix"
	.size	.L__FUNCTION__.get_attr_pent_prefix, 21

	.type	.L__FUNCTION__.get_attr_prefix_0f,@object # @__FUNCTION__.get_attr_prefix_0f
.L__FUNCTION__.get_attr_prefix_0f:
	.asciz	"get_attr_prefix_0f"
	.size	.L__FUNCTION__.get_attr_prefix_0f, 19

	.type	.L__FUNCTION__.get_attr_prefix_rep,@object # @__FUNCTION__.get_attr_prefix_rep
.L__FUNCTION__.get_attr_prefix_rep:
	.asciz	"get_attr_prefix_rep"
	.size	.L__FUNCTION__.get_attr_prefix_rep, 20

	.type	.L__FUNCTION__.get_attr_prefix_data16,@object # @__FUNCTION__.get_attr_prefix_data16
.L__FUNCTION__.get_attr_prefix_data16:
	.asciz	"get_attr_prefix_data16"
	.size	.L__FUNCTION__.get_attr_prefix_data16, 23

	.type	.L__FUNCTION__.get_attr_type,@object # @__FUNCTION__.get_attr_type
.L__FUNCTION__.get_attr_type:
	.asciz	"get_attr_type"
	.size	.L__FUNCTION__.get_attr_type, 14

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"pent_np"
	.size	.L.str1, 8

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"pent_mul"
	.size	.L.str2, 9

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	"fpu"
	.size	.L.str3, 4

	.type	.L.str4,@object         # @.str4
.L.str4:
	.asciz	"pent_u"
	.size	.L.str4, 7

	.type	.L.str5,@object         # @.str5
.L.str5:
	.asciz	"pent_uv"
	.size	.L.str5, 8

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	"pent_v"
	.size	.L.str6, 7

	.type	.L.str7,@object         # @.str7
.L.str7:
	.asciz	"ppro_p0"
	.size	.L.str7, 8

	.type	.L.str8,@object         # @.str8
.L.str8:
	.asciz	"ppro_p01"
	.size	.L.str8, 9

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	"ppro_p2"
	.size	.L.str9, 8

	.type	.L.str10,@object        # @.str10
.L.str10:
	.asciz	"ppro_p34"
	.size	.L.str10, 9

	.type	.L.str11,@object        # @.str11
.L.str11:
	.asciz	"k6_alux"
	.size	.L.str11, 8

	.type	.L.str12,@object        # @.str12
.L.str12:
	.asciz	"k6_alu"
	.size	.L.str12, 7

	.type	.L.str13,@object        # @.str13
.L.str13:
	.asciz	"k6_branch"
	.size	.L.str13, 10

	.type	.L.str14,@object        # @.str14
.L.str14:
	.asciz	"k6_load"
	.size	.L.str14, 8

	.type	.L.str15,@object        # @.str15
.L.str15:
	.asciz	"k6_store"
	.size	.L.str15, 9

	.type	.L.str16,@object        # @.str16
.L.str16:
	.asciz	"k6_fpu"
	.size	.L.str16, 7

	.type	.L.str17,@object        # @.str17
.L.str17:
	.asciz	"athlon_vectordec"
	.size	.L.str17, 17

	.type	.L.str18,@object        # @.str18
.L.str18:
	.asciz	"athlon_directdec"
	.size	.L.str18, 17

	.type	.L.str19,@object        # @.str19
.L.str19:
	.asciz	"athlon_ieu"
	.size	.L.str19, 11

	.type	.L.str20,@object        # @.str20
.L.str20:
	.asciz	"athlon_muldiv"
	.size	.L.str20, 14

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	"athlon_fp"
	.size	.L.str21, 10

	.type	.L.str22,@object        # @.str22
.L.str22:
	.asciz	"athlon_fp_mul"
	.size	.L.str22, 14

	.type	.L.str23,@object        # @.str23
.L.str23:
	.asciz	"athlon_fp_add"
	.size	.L.str23, 14

	.type	.L.str24,@object        # @.str24
.L.str24:
	.asciz	"athlon_fp_muladd"
	.size	.L.str24, 17

	.type	.L.str25,@object        # @.str25
.L.str25:
	.asciz	"athlon_fp_store"
	.size	.L.str25, 16

	.type	.L.str26,@object        # @.str26
.L.str26:
	.asciz	"athlon_load"
	.size	.L.str26, 12

	.type	function_units,@object  # @function_units
	.section	.rodata,"a",@progbits
	.globl	function_units
	.align	16
function_units:
	.quad	.L.str1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.zero	4
	.quad	pent_np_unit_ready_cost
	.quad	pent_np_unit_conflict_cost
	.long	46                      # 0x2e
	.zero	4
	.quad	pent_np_unit_blockage_range
	.quad	pent_np_unit_blockage
	.quad	.L.str2
	.long	2                       # 0x2
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	70                      # 0x46
	.zero	4
	.quad	pent_mul_unit_ready_cost
	.quad	pent_mul_unit_conflict_cost
	.long	70                      # 0x46
	.zero	4
	.quad	pent_mul_unit_blockage_range
	.quad	pent_mul_unit_blockage
	.quad	.L.str3
	.long	4                       # 0x4
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	68                      # 0x44
	.zero	4
	.quad	fpu_unit_ready_cost
	.quad	fpu_unit_conflict_cost
	.long	68                      # 0x44
	.zero	4
	.quad	fpu_unit_blockage_range
	.quad	fpu_unit_blockage
	.quad	.L.str4
	.long	8                       # 0x8
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.zero	4
	.quad	pent_u_unit_ready_cost
	.quad	pent_u_unit_conflict_cost
	.long	3                       # 0x3
	.zero	4
	.quad	pent_u_unit_blockage_range
	.quad	pent_u_unit_blockage
	.quad	.L.str5
	.long	16                      # 0x10
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	3                       # 0x3
	.zero	4
	.quad	pent_uv_unit_ready_cost
	.quad	pent_uv_unit_conflict_cost
	.long	3                       # 0x3
	.zero	4
	.quad	pent_uv_unit_blockage_range
	.quad	pent_uv_unit_blockage
	.quad	.L.str6
	.long	32                      # 0x20
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	pent_v_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str7
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	17                      # 0x11
	.zero	4
	.quad	ppro_p0_unit_ready_cost
	.quad	ppro_p0_unit_conflict_cost
	.long	17                      # 0x11
	.zero	4
	.quad	ppro_p0_unit_blockage_range
	.quad	ppro_p0_unit_blockage
	.quad	.L.str8
	.long	128                     # 0x80
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	ppro_p01_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str9
	.long	256                     # 0x100
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	ppro_p2_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str10
	.long	512                     # 0x200
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	ppro_p34_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str11
	.long	1024                    # 0x400
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	17                      # 0x11
	.zero	4
	.quad	k6_alux_unit_ready_cost
	.quad	k6_alux_unit_conflict_cost
	.long	17                      # 0x11
	.zero	4
	.quad	k6_alux_unit_blockage_range
	.quad	k6_alux_unit_blockage
	.quad	.L.str12
	.long	2048                    # 0x800
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	17                      # 0x11
	.zero	4
	.quad	k6_alu_unit_ready_cost
	.quad	k6_alu_unit_conflict_cost
	.long	17                      # 0x11
	.zero	4
	.quad	k6_alu_unit_blockage_range
	.quad	k6_alu_unit_blockage
	.quad	.L.str13
	.long	4096                    # 0x1000
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	k6_branch_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str14
	.long	8192                    # 0x2000
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.zero	4
	.quad	k6_load_unit_ready_cost
	.quad	k6_load_unit_conflict_cost
	.long	10                      # 0xa
	.zero	4
	.quad	k6_load_unit_blockage_range
	.quad	k6_load_unit_blockage
	.quad	.L.str15
	.long	16384                   # 0x4000
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	10                      # 0xa
	.zero	4
	.quad	k6_store_unit_ready_cost
	.quad	k6_store_unit_conflict_cost
	.long	10                      # 0xa
	.zero	4
	.quad	k6_store_unit_blockage_range
	.quad	k6_store_unit_blockage
	.quad	.L.str16
	.long	32768                   # 0x8000
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	56                      # 0x38
	.zero	4
	.quad	k6_fpu_unit_ready_cost
	.quad	k6_fpu_unit_conflict_cost
	.long	56                      # 0x38
	.zero	4
	.quad	k6_fpu_unit_blockage_range
	.quad	k6_fpu_unit_blockage
	.quad	.L.str17
	.long	65536                   # 0x10000
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	athlon_vectordec_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	athlon_vectordec_unit_blockage_range
	.quad	athlon_vectordec_unit_blockage
	.quad	.L.str18
	.long	131072                  # 0x20000
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	athlon_directdec_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str19
	.long	262144                  # 0x40000
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	15                      # 0xf
	.zero	4
	.quad	athlon_ieu_unit_ready_cost
	.quad	athlon_ieu_unit_conflict_cost
	.long	15                      # 0xf
	.zero	4
	.quad	athlon_ieu_unit_blockage_range
	.quad	athlon_ieu_unit_blockage
	.quad	.L.str20
	.long	524288                  # 0x80000
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.zero	4
	.quad	athlon_muldiv_unit_ready_cost
	.quad	athlon_muldiv_unit_conflict_cost
	.long	42                      # 0x2a
	.zero	4
	.quad	athlon_muldiv_unit_blockage_range
	.quad	athlon_muldiv_unit_blockage
	.quad	.L.str21
	.long	1048576                 # 0x100000
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	athlon_fp_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str22
	.long	2097152                 # 0x200000
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	athlon_fp_mul_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str23
	.long	4194304                 # 0x400000
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	athlon_fp_add_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str24
	.long	8388608                 # 0x800000
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	athlon_fp_muladd_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str25
	.long	16777216                # 0x1000000
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	athlon_fp_store_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.quad	.L.str26
	.long	33554432                # 0x2000000
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.zero	4
	.quad	athlon_load_unit_ready_cost
	.quad	0
	.long	1                       # 0x1
	.zero	4
	.quad	0
	.quad	0
	.size	function_units, 1872

	.type	length_unit_log,@object # @length_unit_log
	.bss
	.globl	length_unit_log
	.align	4
length_unit_log:
	.long	0                       # 0x0
	.size	length_unit_log, 4

	.type	.L__FUNCTION__.athlon_muldiv_unit_blockage,@object # @__FUNCTION__.athlon_muldiv_unit_blockage
	.section	.rodata.str1.1,"aMS",@progbits,1
.L__FUNCTION__.athlon_muldiv_unit_blockage:
	.asciz	"athlon_muldiv_unit_blockage"
	.size	.L__FUNCTION__.athlon_muldiv_unit_blockage, 28

	.type	.L__FUNCTION__.athlon_muldiv_unit_conflict_cost,@object # @__FUNCTION__.athlon_muldiv_unit_conflict_cost
.L__FUNCTION__.athlon_muldiv_unit_conflict_cost:
	.asciz	"athlon_muldiv_unit_conflict_cost"
	.size	.L__FUNCTION__.athlon_muldiv_unit_conflict_cost, 33

	.type	.L__FUNCTION__.athlon_ieu_unit_blockage,@object # @__FUNCTION__.athlon_ieu_unit_blockage
.L__FUNCTION__.athlon_ieu_unit_blockage:
	.asciz	"athlon_ieu_unit_blockage"
	.size	.L__FUNCTION__.athlon_ieu_unit_blockage, 25

	.type	.L__FUNCTION__.athlon_ieu_unit_conflict_cost,@object # @__FUNCTION__.athlon_ieu_unit_conflict_cost
.L__FUNCTION__.athlon_ieu_unit_conflict_cost:
	.asciz	"athlon_ieu_unit_conflict_cost"
	.size	.L__FUNCTION__.athlon_ieu_unit_conflict_cost, 30

	.type	.L__FUNCTION__.athlon_vectordec_unit_blockage,@object # @__FUNCTION__.athlon_vectordec_unit_blockage
.L__FUNCTION__.athlon_vectordec_unit_blockage:
	.asciz	"athlon_vectordec_unit_blockage"
	.size	.L__FUNCTION__.athlon_vectordec_unit_blockage, 31

	.type	.L__FUNCTION__.k6_fpu_unit_blockage,@object # @__FUNCTION__.k6_fpu_unit_blockage
.L__FUNCTION__.k6_fpu_unit_blockage:
	.asciz	"k6_fpu_unit_blockage"
	.size	.L__FUNCTION__.k6_fpu_unit_blockage, 21

	.type	.L__FUNCTION__.k6_fpu_unit_conflict_cost,@object # @__FUNCTION__.k6_fpu_unit_conflict_cost
.L__FUNCTION__.k6_fpu_unit_conflict_cost:
	.asciz	"k6_fpu_unit_conflict_cost"
	.size	.L__FUNCTION__.k6_fpu_unit_conflict_cost, 26

	.type	.L__FUNCTION__.k6_store_unit_blockage,@object # @__FUNCTION__.k6_store_unit_blockage
.L__FUNCTION__.k6_store_unit_blockage:
	.asciz	"k6_store_unit_blockage"
	.size	.L__FUNCTION__.k6_store_unit_blockage, 23

	.type	.L__FUNCTION__.k6_store_unit_conflict_cost,@object # @__FUNCTION__.k6_store_unit_conflict_cost
.L__FUNCTION__.k6_store_unit_conflict_cost:
	.asciz	"k6_store_unit_conflict_cost"
	.size	.L__FUNCTION__.k6_store_unit_conflict_cost, 28

	.type	.L__FUNCTION__.k6_load_unit_blockage,@object # @__FUNCTION__.k6_load_unit_blockage
.L__FUNCTION__.k6_load_unit_blockage:
	.asciz	"k6_load_unit_blockage"
	.size	.L__FUNCTION__.k6_load_unit_blockage, 22

	.type	.L__FUNCTION__.k6_load_unit_conflict_cost,@object # @__FUNCTION__.k6_load_unit_conflict_cost
.L__FUNCTION__.k6_load_unit_conflict_cost:
	.asciz	"k6_load_unit_conflict_cost"
	.size	.L__FUNCTION__.k6_load_unit_conflict_cost, 27

	.type	.L__FUNCTION__.k6_alu_unit_blockage,@object # @__FUNCTION__.k6_alu_unit_blockage
.L__FUNCTION__.k6_alu_unit_blockage:
	.asciz	"k6_alu_unit_blockage"
	.size	.L__FUNCTION__.k6_alu_unit_blockage, 21

	.type	.L__FUNCTION__.k6_alu_unit_conflict_cost,@object # @__FUNCTION__.k6_alu_unit_conflict_cost
.L__FUNCTION__.k6_alu_unit_conflict_cost:
	.asciz	"k6_alu_unit_conflict_cost"
	.size	.L__FUNCTION__.k6_alu_unit_conflict_cost, 26

	.type	.L__FUNCTION__.k6_alux_unit_blockage,@object # @__FUNCTION__.k6_alux_unit_blockage
.L__FUNCTION__.k6_alux_unit_blockage:
	.asciz	"k6_alux_unit_blockage"
	.size	.L__FUNCTION__.k6_alux_unit_blockage, 22

	.type	.L__FUNCTION__.k6_alux_unit_conflict_cost,@object # @__FUNCTION__.k6_alux_unit_conflict_cost
.L__FUNCTION__.k6_alux_unit_conflict_cost:
	.asciz	"k6_alux_unit_conflict_cost"
	.size	.L__FUNCTION__.k6_alux_unit_conflict_cost, 27

	.type	.L__FUNCTION__.ppro_p0_unit_blockage,@object # @__FUNCTION__.ppro_p0_unit_blockage
.L__FUNCTION__.ppro_p0_unit_blockage:
	.asciz	"ppro_p0_unit_blockage"
	.size	.L__FUNCTION__.ppro_p0_unit_blockage, 22

	.type	.L__FUNCTION__.ppro_p0_unit_conflict_cost,@object # @__FUNCTION__.ppro_p0_unit_conflict_cost
.L__FUNCTION__.ppro_p0_unit_conflict_cost:
	.asciz	"ppro_p0_unit_conflict_cost"
	.size	.L__FUNCTION__.ppro_p0_unit_conflict_cost, 27

	.type	.L__FUNCTION__.pent_uv_unit_blockage,@object # @__FUNCTION__.pent_uv_unit_blockage
.L__FUNCTION__.pent_uv_unit_blockage:
	.asciz	"pent_uv_unit_blockage"
	.size	.L__FUNCTION__.pent_uv_unit_blockage, 22

	.type	.L__FUNCTION__.pent_uv_unit_conflict_cost,@object # @__FUNCTION__.pent_uv_unit_conflict_cost
.L__FUNCTION__.pent_uv_unit_conflict_cost:
	.asciz	"pent_uv_unit_conflict_cost"
	.size	.L__FUNCTION__.pent_uv_unit_conflict_cost, 27

	.type	.L__FUNCTION__.pent_u_unit_blockage,@object # @__FUNCTION__.pent_u_unit_blockage
.L__FUNCTION__.pent_u_unit_blockage:
	.asciz	"pent_u_unit_blockage"
	.size	.L__FUNCTION__.pent_u_unit_blockage, 21

	.type	.L__FUNCTION__.pent_u_unit_conflict_cost,@object # @__FUNCTION__.pent_u_unit_conflict_cost
.L__FUNCTION__.pent_u_unit_conflict_cost:
	.asciz	"pent_u_unit_conflict_cost"
	.size	.L__FUNCTION__.pent_u_unit_conflict_cost, 26

	.type	.L__FUNCTION__.fpu_unit_blockage,@object # @__FUNCTION__.fpu_unit_blockage
.L__FUNCTION__.fpu_unit_blockage:
	.asciz	"fpu_unit_blockage"
	.size	.L__FUNCTION__.fpu_unit_blockage, 18

	.type	.L__FUNCTION__.fpu_unit_conflict_cost,@object # @__FUNCTION__.fpu_unit_conflict_cost
.L__FUNCTION__.fpu_unit_conflict_cost:
	.asciz	"fpu_unit_conflict_cost"
	.size	.L__FUNCTION__.fpu_unit_conflict_cost, 23

	.type	.L__FUNCTION__.pent_mul_unit_blockage,@object # @__FUNCTION__.pent_mul_unit_blockage
.L__FUNCTION__.pent_mul_unit_blockage:
	.asciz	"pent_mul_unit_blockage"
	.size	.L__FUNCTION__.pent_mul_unit_blockage, 23

	.type	.L__FUNCTION__.pent_mul_unit_conflict_cost,@object # @__FUNCTION__.pent_mul_unit_conflict_cost
.L__FUNCTION__.pent_mul_unit_conflict_cost:
	.asciz	"pent_mul_unit_conflict_cost"
	.size	.L__FUNCTION__.pent_mul_unit_conflict_cost, 28

	.type	.L__FUNCTION__.pent_np_unit_blockage,@object # @__FUNCTION__.pent_np_unit_blockage
.L__FUNCTION__.pent_np_unit_blockage:
	.asciz	"pent_np_unit_blockage"
	.size	.L__FUNCTION__.pent_np_unit_blockage, 22

	.type	.L__FUNCTION__.pent_np_unit_conflict_cost,@object # @__FUNCTION__.pent_np_unit_conflict_cost
.L__FUNCTION__.pent_np_unit_conflict_cost:
	.asciz	"pent_np_unit_conflict_cost"
	.size	.L__FUNCTION__.pent_np_unit_conflict_cost, 27


	.ident	"clang version 3.5 (trunk)"
	.section	".note.GNU-stack","",@progbits
