; ModuleID = 'rtlanal.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.set_of_data = type { %struct.rtx_def*, %struct.rtx_def* }
%struct.parms_set_data = type { i32, i64 }

@global_rtl = external global [11 x %struct.rtx_def*]
@fixed_regs = external global [53 x i8]
@pic_offset_table_rtx = external global %struct.rtx_def*
@rtx_format = external constant [153 x i8*]
@rtx_length = external constant [153 x i8]
@rtx_class = external constant [153 x i8]
@mode_size = external constant [59 x i8]
@target_flags = common global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"rtlanal.c\00", align 1
@__FUNCTION__.insn_dependent_p = private unnamed_addr constant [17 x i8] c"insn_dependent_p\00", align 1
@const_int_rtx = external global [129 x %struct.rtx_def*]
@mode_class = external constant [59 x i32]
@__FUNCTION__.reg_overlap_mentioned_p = private unnamed_addr constant [24 x i8] c"reg_overlap_mentioned_p\00", align 1
@__FUNCTION__.dead_or_set_p = private unnamed_addr constant [14 x i8] c"dead_or_set_p\00", align 1
@__FUNCTION__.find_reg_fusage = private unnamed_addr constant [16 x i8] c"find_reg_fusage\00", align 1
@__FUNCTION__.remove_note = private unnamed_addr constant [12 x i8] c"remove_note\00", align 1
@__FUNCTION__.replace_rtx = private unnamed_addr constant [12 x i8] c"replace_rtx\00", align 1
@mode_bitsize = external constant [59 x i16]
@__FUNCTION__.subreg_regno_offset = private unnamed_addr constant [20 x i8] c"subreg_regno_offset\00", align 1
@__FUNCTION__.find_first_parameter_load = private unnamed_addr constant [26 x i8] c"find_first_parameter_load\00", align 1

; Function Attrs: nounwind readonly uwtable
define i32 @rtx_unstable_p(%struct.rtx_def* readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 66, label %sw.bb
    i32 71, label %return
    i32 70, label %sw.bb5
    i32 58, label %sw.bb5
    i32 54, label %sw.bb5
    i32 55, label %sw.bb5
    i32 56, label %sw.bb5
    i32 68, label %sw.bb5
    i32 67, label %sw.bb5
    i32 61, label %sw.bb6
    i32 41, label %sw.bb20
  ]

sw.bb:                                            ; preds = %entry
  %bf.clear2 = and i32 %bf.load, 67108864
  %tobool = icmp eq i32 %bf.clear2, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.bb
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @rtx_unstable_p(%struct.rtx_def* %1)
  %tobool3 = icmp ne i32 %call, 0
  br label %lor.end

lor.end:                                          ; preds = %sw.bb, %lor.rhs
  %2 = phi i1 [ true, %sw.bb ], [ %tobool3, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  br label %return

sw.bb5:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %return

sw.bb6:                                           ; preds = %entry
  %3 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %3, %x
  %4 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 8
  %cmp7 = icmp eq %struct.rtx_def* %4, %x
  %or.cond = or i1 %cmp, %cmp7
  br i1 %or.cond, label %return, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %sw.bb6
  %5 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !tbaa !1
  %cmp9 = icmp ne %struct.rtx_def* %5, %x
  %6 = load i8* getelementptr inbounds ([53 x i8]* @fixed_regs, i64 0, i64 16), align 1
  %tobool10 = icmp eq i8 %6, 0
  %or.cond96 = or i1 %cmp9, %tobool10
  %bf.clear14 = and i32 %bf.load, 67108864
  %tobool15 = icmp eq i32 %bf.clear14, 0
  %or.cond97 = and i1 %or.cond96, %tobool15
  br i1 %or.cond97, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false8
  %7 = load %struct.rtx_def** @pic_offset_table_rtx, align 8, !tbaa !1
  %not.cmp16 = icmp ne %struct.rtx_def* %7, %x
  %. = zext i1 %not.cmp16 to i32
  br label %return

sw.bb20:                                          ; preds = %entry
  %bf.clear23 = and i32 %bf.load, 134217728
  %tobool24 = icmp eq i32 %bf.clear23, 0
  br i1 %tobool24, label %sw.epilog, label %return

sw.epilog:                                        ; preds = %sw.bb20, %entry
  %idxprom95 = zext i32 %bf.clear to i64
  %arrayidx27 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom95
  %8 = load i8** %arrayidx27, align 8, !tbaa !1
  %arrayidx29 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom95
  %9 = load i8* %arrayidx29, align 1, !tbaa !5
  %cmp31103 = icmp eq i8 %9, 0
  br i1 %cmp31103, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %10 = zext i8 %9 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv106 = phi i64 [ %10, %for.body.lr.ph ], [ %indvars.iv.next107, %for.cond.backedge ]
  %indvars.iv.next107 = add nsw i64 %indvars.iv106, -1
  %arrayidx34 = getelementptr inbounds i8* %8, i64 %indvars.iv.next107
  %11 = load i8* %arrayidx34, align 1, !tbaa !5
  switch i8 %11, label %for.cond.backedge [
    i8 101, label %if.then38
    i8 69, label %for.cond53.preheader
  ]

for.cond.backedge:                                ; preds = %for.cond53, %for.cond53.preheader, %for.body, %if.then38
  %12 = trunc i64 %indvars.iv.next107 to i32
  %cmp31 = icmp sgt i32 %12, 0
  br i1 %cmp31, label %for.body, label %return

for.cond53.preheader:                             ; preds = %for.body
  %arrayidx56 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next107
  %rtvec = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtvec_def**
  %13 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem99 = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 0
  %14 = load i32* %num_elem99, align 4, !tbaa !6
  %cmp57100 = icmp sgt i32 %14, 0
  br i1 %cmp57100, label %for.body59, label %for.cond.backedge

if.then38:                                        ; preds = %for.body
  %arrayidx41 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next107
  %rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx42, align 8, !tbaa !1
  %call43 = tail call i32 @rtx_unstable_p(%struct.rtx_def* %15)
  %tobool44 = icmp eq i32 %call43, 0
  br i1 %tobool44, label %for.cond.backedge, label %return

for.cond53:                                       ; preds = %for.body59
  %16 = trunc i64 %indvars.iv.next to i32
  %cmp57 = icmp slt i32 %16, %14
  br i1 %cmp57, label %for.body59, label %for.cond.backedge

for.body59:                                       ; preds = %for.cond53.preheader, %for.cond53
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond53 ], [ 0, %for.cond53.preheader ]
  %arrayidx65 = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 1, i64 %indvars.iv
  %17 = load %struct.rtx_def** %arrayidx65, align 8, !tbaa !1
  %call66 = tail call i32 @rtx_unstable_p(%struct.rtx_def* %17)
  %tobool67 = icmp eq i32 %call66, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool67, label %for.cond53, label %return

return:                                           ; preds = %if.then38, %for.cond.backedge, %for.body59, %sw.epilog, %sw.bb20, %if.end, %sw.bb6, %lor.lhs.false8, %entry, %sw.bb5, %lor.end
  %retval.0 = phi i32 [ 0, %sw.bb5 ], [ %lor.ext, %lor.end ], [ 1, %entry ], [ 0, %lor.lhs.false8 ], [ 0, %sw.bb6 ], [ %., %if.end ], [ 1, %sw.bb20 ], [ 0, %sw.epilog ], [ 1, %for.body59 ], [ 1, %if.then38 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @rtx_varies_p(%struct.rtx_def* readonly %x, i32 %for_alias) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 66, label %sw.bb
    i32 71, label %return
    i32 58, label %sw.bb5
    i32 54, label %sw.bb5
    i32 55, label %sw.bb5
    i32 56, label %sw.bb5
    i32 68, label %sw.bb5
    i32 67, label %sw.bb5
    i32 61, label %sw.bb6
    i32 135, label %sw.bb15
    i32 41, label %sw.bb31
  ]

sw.bb:                                            ; preds = %entry
  %bf.clear2 = and i32 %bf.load, 67108864
  %tobool = icmp eq i32 %bf.clear2, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.bb
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @rtx_varies_p(%struct.rtx_def* %1, i32 %for_alias)
  %tobool3 = icmp ne i32 %call, 0
  br label %lor.end

lor.end:                                          ; preds = %sw.bb, %lor.rhs
  %2 = phi i1 [ true, %sw.bb ], [ %tobool3, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  br label %return

sw.bb5:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  br label %return

sw.bb6:                                           ; preds = %entry
  %3 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %3, %x
  %4 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 8
  %cmp7 = icmp eq %struct.rtx_def* %4, %x
  %or.cond = or i1 %cmp, %cmp7
  br i1 %or.cond, label %return, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %sw.bb6
  %5 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !tbaa !1
  %cmp9 = icmp ne %struct.rtx_def* %5, %x
  %6 = load i8* getelementptr inbounds ([53 x i8]* @fixed_regs, i64 0, i64 16), align 1
  %tobool10 = icmp eq i8 %6, 0
  %or.cond113 = or i1 %cmp9, %tobool10
  br i1 %or.cond113, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false8
  %7 = load %struct.rtx_def** @pic_offset_table_rtx, align 8, !tbaa !1
  %not.cmp11 = icmp ne %struct.rtx_def* %7, %x
  %. = zext i1 %not.cmp11 to i32
  br label %return

sw.bb15:                                          ; preds = %entry
  %tobool16 = icmp eq i32 %for_alias, 0
  br i1 %tobool16, label %land.lhs.true17, label %lor.rhs23

land.lhs.true17:                                  ; preds = %sw.bb15
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx20, align 8, !tbaa !1
  %call21 = tail call i32 @rtx_varies_p(%struct.rtx_def* %8, i32 0)
  %tobool22 = icmp eq i32 %call21, 0
  br i1 %tobool22, label %lor.rhs23, label %lor.end29

lor.rhs23:                                        ; preds = %land.lhs.true17, %sw.bb15
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx26, align 8, !tbaa !1
  %call27 = tail call i32 @rtx_varies_p(%struct.rtx_def* %9, i32 %for_alias)
  %tobool28 = icmp ne i32 %call27, 0
  br label %lor.end29

lor.end29:                                        ; preds = %land.lhs.true17, %lor.rhs23
  %10 = phi i1 [ true, %land.lhs.true17 ], [ %tobool28, %lor.rhs23 ]
  %lor.ext30 = zext i1 %10 to i32
  br label %return

sw.bb31:                                          ; preds = %entry
  %bf.clear34 = and i32 %bf.load, 134217728
  %tobool35 = icmp eq i32 %bf.clear34, 0
  br i1 %tobool35, label %sw.epilog, label %return

sw.epilog:                                        ; preds = %sw.bb31, %entry
  %idxprom112 = zext i32 %bf.clear to i64
  %arrayidx38 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom112
  %11 = load i8** %arrayidx38, align 8, !tbaa !1
  %arrayidx40 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom112
  %12 = load i8* %arrayidx40, align 1, !tbaa !5
  %cmp42119 = icmp eq i8 %12, 0
  br i1 %cmp42119, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %13 = zext i8 %12 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv122 = phi i64 [ %13, %for.body.lr.ph ], [ %indvars.iv.next123, %for.cond.backedge ]
  %indvars.iv.next123 = add nsw i64 %indvars.iv122, -1
  %arrayidx45 = getelementptr inbounds i8* %11, i64 %indvars.iv.next123
  %14 = load i8* %arrayidx45, align 1, !tbaa !5
  switch i8 %14, label %for.cond.backedge [
    i8 101, label %if.then49
    i8 69, label %for.cond64.preheader
  ]

for.cond.backedge:                                ; preds = %for.cond64, %for.cond64.preheader, %for.body, %if.then49
  %15 = trunc i64 %indvars.iv.next123 to i32
  %cmp42 = icmp sgt i32 %15, 0
  br i1 %cmp42, label %for.body, label %return

for.cond64.preheader:                             ; preds = %for.body
  %arrayidx67 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next123
  %rtvec = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem115 = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 0
  %17 = load i32* %num_elem115, align 4, !tbaa !6
  %cmp68116 = icmp sgt i32 %17, 0
  br i1 %cmp68116, label %for.body70, label %for.cond.backedge

if.then49:                                        ; preds = %for.body
  %arrayidx52 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next123
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx53, align 8, !tbaa !1
  %call54 = tail call i32 @rtx_varies_p(%struct.rtx_def* %18, i32 %for_alias)
  %tobool55 = icmp eq i32 %call54, 0
  br i1 %tobool55, label %for.cond.backedge, label %return

for.cond64:                                       ; preds = %for.body70
  %19 = trunc i64 %indvars.iv.next to i32
  %cmp68 = icmp slt i32 %19, %17
  br i1 %cmp68, label %for.body70, label %for.cond.backedge

for.body70:                                       ; preds = %for.cond64.preheader, %for.cond64
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond64 ], [ 0, %for.cond64.preheader ]
  %arrayidx76 = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 1, i64 %indvars.iv
  %20 = load %struct.rtx_def** %arrayidx76, align 8, !tbaa !1
  %call77 = tail call i32 @rtx_varies_p(%struct.rtx_def* %20, i32 %for_alias)
  %tobool78 = icmp eq i32 %call77, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool78, label %for.cond64, label %return

return:                                           ; preds = %if.then49, %for.cond.backedge, %for.body70, %sw.epilog, %sw.bb31, %if.end, %sw.bb6, %lor.lhs.false8, %entry, %lor.end29, %sw.bb5, %lor.end
  %retval.0 = phi i32 [ %lor.ext30, %lor.end29 ], [ 0, %sw.bb5 ], [ %lor.ext, %lor.end ], [ 1, %entry ], [ 0, %lor.lhs.false8 ], [ 0, %sw.bb6 ], [ %., %if.end ], [ 1, %sw.bb31 ], [ 0, %sw.epilog ], [ 1, %for.body70 ], [ 1, %if.then49 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @rtx_addr_can_trap_p(%struct.rtx_def* readonly %x) #0 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.backedge, %entry
  %x.tr = phi %struct.rtx_def* [ %x, %entry ], [ %x.tr.be, %tailrecurse.backedge ]
  %0 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %return.loopexit156 [
    i32 68, label %sw.bb
    i32 67, label %return
    i32 61, label %sw.bb4
    i32 58, label %sw.bb20
    i32 75, label %sw.bb23
    i32 135, label %sw.bb106
    i32 100, label %sw.bb106
    i32 96, label %sw.bb111
    i32 97, label %sw.bb111
    i32 98, label %sw.bb111
    i32 99, label %sw.bb111
    i32 101, label %sw.bb111
  ]

sw.bb:                                            ; preds = %tailrecurse
  %bf.lshr = lshr i32 %bf.load, 30
  %bf.clear2 = and i32 %bf.lshr, 1
  br label %return

sw.bb4:                                           ; preds = %tailrecurse
  %1 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %1, %x.tr
  %2 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 8
  %cmp5 = icmp eq %struct.rtx_def* %2, %x.tr
  %or.cond = or i1 %cmp, %cmp5
  %3 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8
  %cmp7 = icmp eq %struct.rtx_def* %3, %x.tr
  %or.cond137 = or i1 %or.cond, %cmp7
  br i1 %or.cond137, label %return, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %sw.bb4
  %4 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !tbaa !1
  %cmp9 = icmp ne %struct.rtx_def* %4, %x.tr
  %5 = load i8* getelementptr inbounds ([53 x i8]* @fixed_regs, i64 0, i64 16), align 1
  %tobool = icmp eq i8 %5, 0
  %or.cond138 = or i1 %cmp9, %tobool
  br i1 %or.cond138, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %6 = load i32* %rtuint, align 4, !tbaa !9
  %.off = add i32 %6, -53
  %not. = icmp ugt i32 %.off, 4
  %. = zext i1 %not. to i32
  ret i32 %.

sw.bb20:                                          ; preds = %tailrecurse
  %arrayidx22 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 0
  br label %tailrecurse.backedge

tailrecurse.backedge:                             ; preds = %sw.bb20, %sw.bb106, %sw.bb111
  %x.tr.be.in.in = phi %union.rtunion_def* [ %arrayidx22, %sw.bb20 ], [ %arrayidx108, %sw.bb106 ], [ %arrayidx113, %sw.bb111 ]
  %x.tr.be.in = bitcast %union.rtunion_def* %x.tr.be.in.in to %struct.rtx_def**
  %x.tr.be = load %struct.rtx_def** %x.tr.be.in, align 8
  br label %tailrecurse

sw.bb23:                                          ; preds = %tailrecurse
  %fld24 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1
  %rtx26 = bitcast [1 x %union.rtunion_def]* %fld24 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx26, align 8, !tbaa !1
  %call27 = tail call i32 @rtx_addr_can_trap_p(%struct.rtx_def* %7)
  %tobool28 = icmp eq i32 %call27, 0
  br i1 %tobool28, label %land.lhs.true29, label %lor.rhs

land.lhs.true29:                                  ; preds = %sw.bb23
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 1
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx32, align 8, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load33 = load i32* %9, align 8
  %bf.clear34 = and i32 %bf.load33, 65535
  %cmp35 = icmp eq i32 %bf.clear34, 54
  br i1 %cmp35, label %return, label %lor.rhs

lor.rhs:                                          ; preds = %sw.bb23, %land.lhs.true29
  %10 = load %struct.rtx_def** @pic_offset_table_rtx, align 8, !tbaa !1
  %cmp40 = icmp eq %struct.rtx_def* %7, %10
  br i1 %cmp40, label %land.rhs, label %return

land.rhs:                                         ; preds = %lor.rhs
  %arrayidx43 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 1
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx44, align 8, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load45 = load i32* %12, align 8
  %bf.clear46 = and i32 %bf.load45, 65535
  switch i32 %bf.clear46, label %lor.rhs97 [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 55, label %return
    i32 58, label %return
    i32 134, label %return
    i32 56, label %return
    i32 140, label %return
  ]

lor.rhs97:                                        ; preds = %land.rhs
  br label %return

sw.bb106:                                         ; preds = %tailrecurse, %tailrecurse
  %arrayidx108 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 1
  br label %tailrecurse.backedge

sw.bb111:                                         ; preds = %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse
  %arrayidx113 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 0
  br label %tailrecurse.backedge

return.loopexit156:                               ; preds = %tailrecurse
  br label %return

return:                                           ; preds = %tailrecurse, %return.loopexit156, %land.lhs.true29, %lor.rhs97, %lor.rhs, %land.rhs, %land.rhs, %land.rhs, %land.rhs, %land.rhs, %land.rhs, %land.rhs, %land.rhs, %sw.bb4, %lor.lhs.false8, %sw.bb
  %retval.0 = phi i32 [ %bf.clear2, %sw.bb ], [ 0, %lor.lhs.false8 ], [ 0, %sw.bb4 ], [ 0, %land.lhs.true29 ], [ 1, %lor.rhs ], [ 0, %land.rhs ], [ 1, %lor.rhs97 ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 0, %land.rhs ], [ 1, %return.loopexit156 ], [ 0, %tailrecurse ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @rtx_addr_varies_p(%struct.rtx_def* readonly %x, i32 %for_alias) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 66
  br i1 %cmp1, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.end
  %bf.clear4 = and i32 %bf.load, 16711680
  %cmp5 = icmp eq i32 %bf.clear4, 3342336
  br i1 %cmp5, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then2
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @rtx_varies_p(%struct.rtx_def* %1, i32 %for_alias)
  %tobool = icmp ne i32 %call, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then2
  %2 = phi i1 [ true, %if.then2 ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  br label %return

if.end6:                                          ; preds = %if.end
  %idxprom71 = zext i32 %bf.clear to i64
  %arrayidx7 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom71
  %3 = load i8** %arrayidx7, align 8, !tbaa !1
  %arrayidx9 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom71
  %4 = load i8* %arrayidx9, align 1, !tbaa !5
  %cmp1077 = icmp eq i8 %4, 0
  br i1 %cmp1077, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end6
  %5 = zext i8 %4 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv80 = phi i64 [ %5, %for.body.lr.ph ], [ %indvars.iv.next81, %for.cond.backedge ]
  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1
  %arrayidx13 = getelementptr inbounds i8* %3, i64 %indvars.iv.next81
  %6 = load i8* %arrayidx13, align 1, !tbaa !5
  switch i8 %6, label %for.cond.backedge [
    i8 101, label %if.then17
    i8 69, label %for.cond32.preheader
  ]

for.cond.backedge:                                ; preds = %for.cond32, %for.cond32.preheader, %for.body, %if.then17
  %7 = trunc i64 %indvars.iv.next81 to i32
  %cmp10 = icmp sgt i32 %7, 0
  br i1 %cmp10, label %for.body, label %return

for.cond32.preheader:                             ; preds = %for.body
  %arrayidx35 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next81
  %rtvec = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtvec_def**
  %8 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem73 = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 0
  %9 = load i32* %num_elem73, align 4, !tbaa !6
  %cmp3674 = icmp sgt i32 %9, 0
  br i1 %cmp3674, label %for.body38, label %for.cond.backedge

if.then17:                                        ; preds = %for.body
  %arrayidx20 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next81
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx21, align 8, !tbaa !1
  %call22 = tail call i32 @rtx_addr_varies_p(%struct.rtx_def* %10, i32 %for_alias)
  %tobool23 = icmp eq i32 %call22, 0
  br i1 %tobool23, label %for.cond.backedge, label %return

for.cond32:                                       ; preds = %for.body38
  %11 = trunc i64 %indvars.iv.next to i32
  %cmp36 = icmp slt i32 %11, %9
  br i1 %cmp36, label %for.body38, label %for.cond.backedge

for.body38:                                       ; preds = %for.cond32.preheader, %for.cond32
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond32 ], [ 0, %for.cond32.preheader ]
  %arrayidx44 = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 1, i64 %indvars.iv
  %12 = load %struct.rtx_def** %arrayidx44, align 8, !tbaa !1
  %call45 = tail call i32 @rtx_addr_varies_p(%struct.rtx_def* %12, i32 %for_alias)
  %tobool46 = icmp eq i32 %call45, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool46, label %for.cond32, label %return

return:                                           ; preds = %if.then17, %for.cond.backedge, %for.body38, %if.end6, %entry, %lor.end
  %retval.0 = phi i32 [ %lor.ext, %lor.end ], [ 0, %entry ], [ 0, %if.end6 ], [ 1, %for.body38 ], [ 1, %if.then17 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i64 @get_integer_term(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 58
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load1.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %bf.load17 = phi i32 [ %bf.load1.pre, %if.then ], [ %bf.load, %entry ]
  %x.addr.0 = phi %struct.rtx_def* [ %1, %if.then ], [ %x, %entry ]
  %bf.clear2 = and i32 %bf.load17, 65535
  switch i32 %bf.clear2, label %return [
    i32 76, label %land.lhs.true
    i32 75, label %land.lhs.true20
  ]

land.lhs.true:                                    ; preds = %if.end
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 1
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx6, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load7 = load i32* %3, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 54
  br i1 %cmp9, label %if.then10, label %return

if.then10:                                        ; preds = %land.lhs.true
  %rtwint = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0, i32 0
  %4 = load i64* %rtwint, align 8, !tbaa !10
  %sub = sub nsw i64 0, %4
  br label %return

land.lhs.true20:                                  ; preds = %if.end
  %arrayidx22 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 1
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx23, align 8, !tbaa !1
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load24 = load i32* %6, align 8
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 54
  br i1 %cmp26, label %if.then27, label %return

if.then27:                                        ; preds = %land.lhs.true20
  %rtwint33 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0, i32 0
  %7 = load i64* %rtwint33, align 8, !tbaa !10
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true, %land.lhs.true20, %if.then27, %if.then10
  %retval.0 = phi i64 [ %sub, %if.then10 ], [ %7, %if.then27 ], [ 0, %land.lhs.true20 ], [ 0, %land.lhs.true ], [ 0, %if.end ]
  ret i64 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @get_related_value(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 58
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load1 = load i32* %2, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  switch i32 %bf.clear2, label %return [
    i32 75, label %land.lhs.true
    i32 76, label %land.lhs.true17
  ]

land.lhs.true:                                    ; preds = %if.end
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx6, align 8, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load7 = load i32* %4, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 54
  br i1 %cmp9, label %if.then10, label %return

if.then10:                                        ; preds = %land.lhs.true
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx13, align 8, !tbaa !1
  br label %return

land.lhs.true17:                                  ; preds = %if.end
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx20, align 8, !tbaa !1
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load21 = load i32* %7, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 54
  br i1 %cmp23, label %if.then24, label %return

if.then24:                                        ; preds = %land.lhs.true17
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx27, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true, %land.lhs.true17, %entry, %if.then24, %if.then10
  %retval.0 = phi %struct.rtx_def* [ %5, %if.then10 ], [ %8, %if.then24 ], [ null, %entry ], [ null, %land.lhs.true17 ], [ null, %land.lhs.true ], [ null, %if.end ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_jump_table_offset(%struct.rtx_def* %insn, %struct.rtx_def** %earliest) #1 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %old_insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8, !tbaa !1
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 33
  br i1 %cmp, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 7
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool, label %return, label %lor.lhs.false1

lor.lhs.false1:                                   ; preds = %lor.lhs.false
  %arrayidx3 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 2
  %rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx4, align 8, !tbaa !1
  %tobool5 = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool5, label %return, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load7 = load i32* %3, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 33
  br i1 %cmp9, label %lor.lhs.false10, label %return

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 3
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx13, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load14 = load i32* %5, align 8
  %6 = and i32 %bf.load14, 65534
  %switch = icmp eq i32 %6, 44
  %7 = load i8* getelementptr inbounds ([153 x i8]* @rtx_class, i64 0, i64 33), align 1
  %cmp27 = icmp eq i8 %7, 105
  %or.cond451 = and i1 %switch, %cmp27
  br i1 %or.cond451, label %cond.true, label %return

cond.true:                                        ; preds = %lor.lhs.false10
  %arrayidx30 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx31, align 8, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load32 = load i32* %9, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 47
  br i1 %cmp34, label %cond.end44, label %cond.false

cond.false:                                       ; preds = %cond.true
  %call = tail call %struct.rtx_def* @single_set_2(%struct.rtx_def* %insn, %struct.rtx_def* %8)
  br label %cond.end44

cond.end44:                                       ; preds = %cond.true, %cond.false
  %cond45 = phi %struct.rtx_def* [ %call, %cond.false ], [ %8, %cond.true ]
  %tobool46 = icmp eq %struct.rtx_def* %cond45, null
  br i1 %tobool46, label %return, label %if.end

if.end:                                           ; preds = %cond.end44
  %arrayidx48 = getelementptr inbounds %struct.rtx_def* %cond45, i64 0, i32 1, i64 1
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx49, align 8, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load50 = load i32* %11, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 72
  br i1 %cmp52, label %land.lhs.true54, label %for.cond.preheader

land.lhs.true54:                                  ; preds = %if.end
  %arrayidx56 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 2
  %rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx57, align 8, !tbaa !1
  %13 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 0
  %bf.load58 = load i32* %13, align 8
  %bf.clear59 = and i32 %bf.load58, 65535
  %cmp60 = icmp eq i32 %bf.clear59, 67
  br i1 %cmp60, label %if.then62, label %for.cond.preheader

if.then62:                                        ; preds = %land.lhs.true54
  %arrayidx64 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 1
  %rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx65, align 8, !tbaa !1
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 0
  %bf.load67423.pre = load i32* %.phi.trans.insert, align 8
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then62, %land.lhs.true54, %if.end
  %bf.load67423 = phi i32 [ %bf.load50, %if.end ], [ %bf.load50, %land.lhs.true54 ], [ %bf.load67423.pre, %if.then62 ]
  %x.1.ph = phi %struct.rtx_def* [ %10, %if.end ], [ %10, %land.lhs.true54 ], [ %14, %if.then62 ]
  %bf.clear68424 = and i32 %bf.load67423, 65535
  %cmp69425 = icmp ne i32 %bf.clear68424, 61
  %cmp71426 = icmp eq %struct.rtx_def* %x.1.ph, null
  %or.cond427 = or i1 %cmp69425, %cmp71426
  br i1 %or.cond427, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.cond.preheader, %for.inc
  %x.1428 = phi %struct.rtx_def* [ %call73, %for.inc ], [ %x.1.ph, %for.cond.preheader ]
  %call73 = call %struct.rtx_def* @find_last_value(%struct.rtx_def* %x.1428, %struct.rtx_def** %insn.addr, %struct.rtx_def* null, i32 0)
  %15 = getelementptr inbounds %struct.rtx_def* %call73, i64 0, i32 0
  %bf.load67 = load i32* %15, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp ne i32 %bf.clear68, 61
  %cmp71 = icmp eq %struct.rtx_def* %call73, %x.1428
  %or.cond = or i1 %cmp69, %cmp71
  br i1 %or.cond, label %for.cond.for.end_crit_edge, label %for.inc

for.cond.for.end_crit_edge:                       ; preds = %for.inc
  %.pre = load %struct.rtx_def** %rtx13, align 8, !tbaa !1
  %.phi.trans.insert443 = getelementptr inbounds %struct.rtx_def* %.pre, i64 0, i32 0
  %bf.load77.pre = load i32* %.phi.trans.insert443, align 8
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %for.cond.preheader
  %bf.load77 = phi i32 [ %bf.load77.pre, %for.cond.for.end_crit_edge ], [ %bf.load14, %for.cond.preheader ]
  %bf.clear68.lcssa = phi i32 [ %bf.clear68, %for.cond.for.end_crit_edge ], [ %bf.clear68424, %for.cond.preheader ]
  %x.1.lcssa = phi %struct.rtx_def* [ %call73, %for.cond.for.end_crit_edge ], [ %x.1.ph, %for.cond.preheader ]
  %bf.clear78 = and i32 %bf.load77, 65535
  %cmp79 = icmp eq i32 %bf.clear78, 45
  %bf.clear83.off = add i32 %bf.clear68.lcssa, -75
  %switch370 = icmp ult i32 %bf.clear83.off, 2
  %or.cond376 = and i1 %cmp79, %switch370
  br i1 %or.cond376, label %for.cond92.preheader, label %if.end155

for.cond92.preheader:                             ; preds = %for.end
  %.pre447 = load %struct.rtx_def** %insn.addr, align 8, !tbaa !1
  br label %for.body95

for.body95:                                       ; preds = %for.cond92.preheader, %for.inc132
  %indvars.iv440 = phi i64 [ 0, %for.cond92.preheader ], [ %indvars.iv.next441, %for.inc132 ]
  store %struct.rtx_def* %.pre447, %struct.rtx_def** %old_insn, align 8, !tbaa !1
  %arrayidx98 = getelementptr inbounds %struct.rtx_def* %x.1.lcssa, i64 0, i32 1, i64 %indvars.iv440
  %rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**
  %16 = load %struct.rtx_def** %rtx99, align 8, !tbaa !1
  %17 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !1
  %cmp100 = icmp eq %struct.rtx_def* %16, %17
  %18 = load %struct.rtx_def** @pic_offset_table_rtx, align 8
  %cmp103 = icmp eq %struct.rtx_def* %16, %18
  %or.cond364 = or i1 %cmp100, %cmp103
  %19 = trunc i64 %indvars.iv440 to i32
  br i1 %or.cond364, label %for.end133, label %for.cond107.preheader

for.cond107.preheader:                            ; preds = %for.body95
  %20 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 0
  %bf.load108414 = load i32* %20, align 8
  %bf.clear109415 = and i32 %bf.load108414, 65535
  %cmp110416 = icmp ne i32 %bf.clear109415, 61
  %cmp113417 = icmp eq %struct.rtx_def* %16, null
  %or.cond365418 = or i1 %cmp110416, %cmp113417
  br i1 %or.cond365418, label %for.end119, label %for.inc117

for.inc117:                                       ; preds = %for.cond107.preheader, %for.inc117
  %y.0419 = phi %struct.rtx_def* [ %call118, %for.inc117 ], [ %16, %for.cond107.preheader ]
  %call118 = call %struct.rtx_def* @find_last_value(%struct.rtx_def* %y.0419, %struct.rtx_def** %old_insn, %struct.rtx_def* null, i32 0)
  %21 = getelementptr inbounds %struct.rtx_def* %call118, i64 0, i32 0
  %bf.load108 = load i32* %21, align 8
  %bf.clear109 = and i32 %bf.load108, 65535
  %cmp110 = icmp ne i32 %bf.clear109, 61
  %cmp113 = icmp eq %struct.rtx_def* %call118, %y.0419
  %or.cond365 = or i1 %cmp110, %cmp113
  br i1 %or.cond365, label %for.end119, label %for.inc117

for.end119:                                       ; preds = %for.inc117, %for.cond107.preheader
  %bf.clear109.lcssa = phi i32 [ %bf.clear109415, %for.cond107.preheader ], [ %bf.clear109, %for.inc117 ]
  %y.0.lcssa = phi %struct.rtx_def* [ %16, %for.cond107.preheader ], [ %call118, %for.inc117 ]
  %cmp122 = icmp eq i32 %bf.clear109.lcssa, 67
  br i1 %cmp122, label %land.lhs.true124, label %for.inc132

land.lhs.true124:                                 ; preds = %for.end119
  %arrayidx126 = getelementptr inbounds %struct.rtx_def* %y.0.lcssa, i64 0, i32 1, i64 0
  %rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**
  %22 = load %struct.rtx_def** %rtx127, align 8, !tbaa !1
  %cmp128 = icmp eq %struct.rtx_def* %22, %1
  br i1 %cmp128, label %for.end133, label %for.inc132

for.inc132:                                       ; preds = %for.end119, %land.lhs.true124
  %indvars.iv.next441 = add nuw nsw i64 %indvars.iv440, 1
  %23 = trunc i64 %indvars.iv.next441 to i32
  %cmp93 = icmp slt i32 %23, 2
  br i1 %cmp93, label %for.body95, label %return

for.end133:                                       ; preds = %land.lhs.true124, %for.body95
  %cmp134 = icmp sgt i32 %19, 1
  br i1 %cmp134, label %return, label %if.end137

if.end137:                                        ; preds = %for.end133
  %sub = sub i64 1, %indvars.iv440
  %sext450 = shl i64 %sub, 32
  %idxprom138 = ashr exact i64 %sext450, 32
  %arrayidx140 = getelementptr inbounds %struct.rtx_def* %x.1.lcssa, i64 0, i32 1, i64 %idxprom138
  %rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**
  %24 = load %struct.rtx_def** %rtx141, align 8, !tbaa !1
  %25 = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 0
  %bf.load143407 = load i32* %25, align 8
  %bf.clear144408 = and i32 %bf.load143407, 65535
  %cmp145409 = icmp ne i32 %bf.clear144408, 61
  %cmp148410 = icmp eq %struct.rtx_def* %24, null
  %or.cond366411 = or i1 %cmp145409, %cmp148410
  br i1 %or.cond366411, label %if.end155, label %for.inc152

for.inc152:                                       ; preds = %if.end137, %for.inc152
  %x.2412 = phi %struct.rtx_def* [ %call153, %for.inc152 ], [ %24, %if.end137 ]
  %call153 = call %struct.rtx_def* @find_last_value(%struct.rtx_def* %x.2412, %struct.rtx_def** %insn.addr, %struct.rtx_def* null, i32 0)
  %26 = getelementptr inbounds %struct.rtx_def* %call153, i64 0, i32 0
  %bf.load143 = load i32* %26, align 8
  %bf.clear144 = and i32 %bf.load143, 65535
  %cmp145 = icmp ne i32 %bf.clear144, 61
  %cmp148 = icmp eq %struct.rtx_def* %call153, %x.2412
  %or.cond366 = or i1 %cmp145, %cmp148
  br i1 %or.cond366, label %if.end155, label %for.inc152

if.end155:                                        ; preds = %for.inc152, %if.end137, %for.end
  %x.3 = phi %struct.rtx_def* [ %x.1.lcssa, %for.end ], [ %24, %if.end137 ], [ %call153, %for.inc152 ]
  %27 = getelementptr inbounds %struct.rtx_def* %x.3, i64 0, i32 0
  %bf.load156 = load i32* %27, align 8
  %28 = and i32 %bf.load156, 65534
  %switch371 = icmp eq i32 %28, 120
  br i1 %switch371, label %if.then165, label %if.end182

if.then165:                                       ; preds = %if.end155
  %arrayidx167 = getelementptr inbounds %struct.rtx_def* %x.3, i64 0, i32 1, i64 0
  %rtx168 = bitcast %union.rtunion_def* %arrayidx167 to %struct.rtx_def**
  %29 = load %struct.rtx_def** %rtx168, align 8, !tbaa !1
  %30 = getelementptr inbounds %struct.rtx_def* %29, i64 0, i32 0
  %bf.load170400 = load i32* %30, align 8
  %bf.clear171401 = and i32 %bf.load170400, 65535
  %cmp172402 = icmp ne i32 %bf.clear171401, 61
  %cmp175403 = icmp eq %struct.rtx_def* %29, null
  %or.cond367404 = or i1 %cmp172402, %cmp175403
  br i1 %or.cond367404, label %if.end182, label %for.inc179

for.inc179:                                       ; preds = %if.then165, %for.inc179
  %x.4405 = phi %struct.rtx_def* [ %call180, %for.inc179 ], [ %29, %if.then165 ]
  %call180 = call %struct.rtx_def* @find_last_value(%struct.rtx_def* %x.4405, %struct.rtx_def** %insn.addr, %struct.rtx_def* null, i32 0)
  %31 = getelementptr inbounds %struct.rtx_def* %call180, i64 0, i32 0
  %bf.load170 = load i32* %31, align 8
  %bf.clear171 = and i32 %bf.load170, 65535
  %cmp172 = icmp ne i32 %bf.clear171, 61
  %cmp175 = icmp eq %struct.rtx_def* %call180, %x.4405
  %or.cond367 = or i1 %cmp172, %cmp175
  br i1 %or.cond367, label %if.end182, label %for.inc179

if.end182:                                        ; preds = %for.inc179, %if.then165, %if.end155
  %bf.load183 = phi i32 [ %bf.load156, %if.end155 ], [ %bf.load170400, %if.then165 ], [ %bf.load170, %for.inc179 ]
  %x.5 = phi %struct.rtx_def* [ %x.3, %if.end155 ], [ %29, %if.then165 ], [ %call180, %for.inc179 ]
  %bf.clear184 = and i32 %bf.load183, 65535
  %cmp185 = icmp eq i32 %bf.clear184, 66
  br i1 %cmp185, label %if.end188, label %return

if.end188:                                        ; preds = %if.end182
  %arrayidx190 = getelementptr inbounds %struct.rtx_def* %x.5, i64 0, i32 1, i64 0
  %rtx191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.rtx_def**
  %32 = load %struct.rtx_def** %rtx191, align 8, !tbaa !1
  %33 = getelementptr inbounds %struct.rtx_def* %32, i64 0, i32 0
  %bf.load193392 = load i32* %33, align 8
  %bf.clear194393 = and i32 %bf.load193392, 65535
  %cmp195394 = icmp ne i32 %bf.clear194393, 61
  %cmp198395 = icmp eq %struct.rtx_def* %32, null
  %or.cond368396 = or i1 %cmp195394, %cmp198395
  br i1 %or.cond368396, label %for.end204, label %for.inc202

for.inc202:                                       ; preds = %if.end188, %for.inc202
  %x.6397 = phi %struct.rtx_def* [ %call203, %for.inc202 ], [ %32, %if.end188 ]
  %call203 = call %struct.rtx_def* @find_last_value(%struct.rtx_def* %x.6397, %struct.rtx_def** %insn.addr, %struct.rtx_def* null, i32 0)
  %34 = getelementptr inbounds %struct.rtx_def* %call203, i64 0, i32 0
  %bf.load193 = load i32* %34, align 8
  %bf.clear194 = and i32 %bf.load193, 65535
  %cmp195 = icmp ne i32 %bf.clear194, 61
  %cmp198 = icmp eq %struct.rtx_def* %call203, %x.6397
  %or.cond368 = or i1 %cmp195, %cmp198
  br i1 %or.cond368, label %for.end204, label %for.inc202

for.end204:                                       ; preds = %for.inc202, %if.end188
  %bf.clear194.lcssa = phi i32 [ %bf.clear194393, %if.end188 ], [ %bf.clear194, %for.inc202 ]
  %x.6.lcssa = phi %struct.rtx_def* [ %32, %if.end188 ], [ %call203, %for.inc202 ]
  %cmp207 = icmp eq i32 %bf.clear194.lcssa, 75
  br i1 %cmp207, label %for.cond211.preheader, label %return

for.cond211.preheader:                            ; preds = %for.end204
  %35 = load %struct.rtx_def** %insn.addr, align 8, !tbaa !1
  br label %for.body214

for.body214:                                      ; preds = %for.cond211.preheader, %for.inc246
  %indvars.iv438 = phi i64 [ 0, %for.cond211.preheader ], [ %indvars.iv.next439, %for.inc246 ]
  store %struct.rtx_def* %35, %struct.rtx_def** %old_insn, align 8, !tbaa !1
  %arrayidx217 = getelementptr inbounds %struct.rtx_def* %x.6.lcssa, i64 0, i32 1, i64 %indvars.iv438
  %rtx218 = bitcast %union.rtunion_def* %arrayidx217 to %struct.rtx_def**
  %36 = load %struct.rtx_def** %rtx218, align 8, !tbaa !1
  %37 = getelementptr inbounds %struct.rtx_def* %36, i64 0, i32 0
  %bf.load220383 = load i32* %37, align 8
  %bf.clear221384 = and i32 %bf.load220383, 65535
  %cmp222385 = icmp ne i32 %bf.clear221384, 61
  %cmp225386 = icmp eq %struct.rtx_def* %36, null
  %or.cond369387 = or i1 %cmp222385, %cmp225386
  br i1 %or.cond369387, label %for.end231, label %for.inc229

for.inc229:                                       ; preds = %for.body214, %for.inc229
  %y.1388 = phi %struct.rtx_def* [ %call230, %for.inc229 ], [ %36, %for.body214 ]
  %call230 = call %struct.rtx_def* @find_last_value(%struct.rtx_def* %y.1388, %struct.rtx_def** %old_insn, %struct.rtx_def* null, i32 0)
  %38 = getelementptr inbounds %struct.rtx_def* %call230, i64 0, i32 0
  %bf.load220 = load i32* %38, align 8
  %bf.clear221 = and i32 %bf.load220, 65535
  %cmp222 = icmp ne i32 %bf.clear221, 61
  %cmp225 = icmp eq %struct.rtx_def* %call230, %y.1388
  %or.cond369 = or i1 %cmp222, %cmp225
  br i1 %or.cond369, label %for.end231, label %for.inc229

for.end231:                                       ; preds = %for.inc229, %for.body214
  %bf.clear221.lcssa = phi i32 [ %bf.clear221384, %for.body214 ], [ %bf.clear221, %for.inc229 ]
  %y.1.lcssa = phi %struct.rtx_def* [ %36, %for.body214 ], [ %call230, %for.inc229 ]
  switch i32 %bf.clear221.lcssa, label %for.inc246 [
    i32 58, label %land.lhs.true241
    i32 67, label %land.lhs.true241
  ]

land.lhs.true241:                                 ; preds = %for.end231, %for.end231
  %call242 = tail call i32 @reg_mentioned_p(%struct.rtx_def* %1, %struct.rtx_def* %y.1.lcssa)
  %tobool243 = icmp eq i32 %call242, 0
  br i1 %tobool243, label %for.inc246, label %for.end248

for.inc246:                                       ; preds = %for.end231, %land.lhs.true241
  %indvars.iv.next439 = add nuw nsw i64 %indvars.iv438, 1
  %39 = trunc i64 %indvars.iv.next439 to i32
  %cmp212 = icmp slt i32 %39, 2
  br i1 %cmp212, label %for.body214, label %return

for.end248:                                       ; preds = %land.lhs.true241
  %40 = trunc i64 %indvars.iv438 to i32
  %cmp249 = icmp sgt i32 %40, 1
  br i1 %cmp249, label %return, label %if.end252

if.end252:                                        ; preds = %for.end248
  %sub253 = sub i64 1, %indvars.iv438
  %sext = shl i64 %sub253, 32
  %idxprom254 = ashr exact i64 %sext, 32
  %arrayidx256 = getelementptr inbounds %struct.rtx_def* %x.6.lcssa, i64 0, i32 1, i64 %idxprom254
  %rtx257 = bitcast %union.rtunion_def* %arrayidx256 to %struct.rtx_def**
  %41 = load %struct.rtx_def** %rtx257, align 8, !tbaa !1
  %42 = getelementptr inbounds %struct.rtx_def* %41, i64 0, i32 0
  %bf.load258 = load i32* %42, align 8
  %bf.clear259 = and i32 %bf.load258, 65535
  %bf.clear259.off = add i32 %bf.clear259, -75
  %switch372 = icmp ult i32 %bf.clear259.off, 2
  br i1 %switch372, label %for.cond268.preheader, label %if.end288

for.cond268.preheader:                            ; preds = %if.end252
  %43 = load %struct.rtx_def** @pic_offset_table_rtx, align 8, !tbaa !1
  br label %for.body271

for.cond268:                                      ; preds = %for.body271
  %44 = trunc i64 %indvars.iv.next to i32
  %cmp269 = icmp slt i32 %44, 2
  br i1 %cmp269, label %for.body271, label %if.end288

for.body271:                                      ; preds = %for.cond268.preheader, %for.cond268
  %indvars.iv = phi i64 [ 0, %for.cond268.preheader ], [ %indvars.iv.next, %for.cond268 ]
  %arrayidx274 = getelementptr inbounds %struct.rtx_def* %41, i64 0, i32 1, i64 %indvars.iv
  %rtx275 = bitcast %union.rtunion_def* %arrayidx274 to %struct.rtx_def**
  %45 = load %struct.rtx_def** %rtx275, align 8, !tbaa !1
  %cmp276 = icmp eq %struct.rtx_def* %45, %43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp276, label %if.then278, label %for.cond268

if.then278:                                       ; preds = %for.body271
  %sub279 = sub i64 1, %indvars.iv
  %sext449 = shl i64 %sub279, 32
  %idxprom280 = ashr exact i64 %sext449, 32
  %arrayidx282 = getelementptr inbounds %struct.rtx_def* %41, i64 0, i32 1, i64 %idxprom280
  %rtx283 = bitcast %union.rtunion_def* %arrayidx282 to %struct.rtx_def**
  %46 = load %struct.rtx_def** %rtx283, align 8, !tbaa !1
  br label %if.end288

if.end288:                                        ; preds = %for.cond268, %if.end252, %if.then278
  %x.7 = phi %struct.rtx_def* [ %46, %if.then278 ], [ %41, %if.end252 ], [ %41, %for.cond268 ]
  %tobool289 = icmp eq %struct.rtx_def** %earliest, null
  br i1 %tobool289, label %return, label %if.then290

if.then290:                                       ; preds = %if.end288
  store %struct.rtx_def* %35, %struct.rtx_def** %earliest, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %for.inc132, %for.inc246, %lor.lhs.false10, %if.then290, %if.end288, %for.end248, %for.end204, %if.end182, %for.end133, %entry, %lor.lhs.false, %lor.lhs.false1, %lor.lhs.false6, %cond.end44
  %retval.0 = phi %struct.rtx_def* [ null, %lor.lhs.false10 ], [ null, %cond.end44 ], [ null, %lor.lhs.false6 ], [ null, %lor.lhs.false1 ], [ null, %lor.lhs.false ], [ null, %entry ], [ null, %for.end133 ], [ null, %if.end182 ], [ null, %for.end204 ], [ null, %for.end248 ], [ %x.7, %if.end288 ], [ %x.7, %if.then290 ], [ null, %for.inc246 ], [ null, %for.inc132 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @single_set_2(%struct.rtx_def* nocapture readonly %insn, %struct.rtx_def* nocapture readonly %pat) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %pat, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 39
  br i1 %cmp, label %for.cond.preheader, label %return

for.cond.preheader:                               ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %pat, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %1 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem97 = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 0
  %2 = load i32* %num_elem97, align 4, !tbaa !6
  %cmp198 = icmp sgt i32 %2, 0
  br i1 %cmp198, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %3 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %link.0.in26.i = bitcast %union.rtunion_def* %arrayidx2.i to %struct.rtx_def**
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %set_verified.0100 = phi i32 [ 1, %for.body.lr.ph ], [ %set_verified.2, %for.inc ]
  %set.099 = phi %struct.rtx_def* [ null, %for.body.lr.ph ], [ %set.2, %for.inc ]
  %arrayidx5 = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 1, i64 %indvars.iv
  %4 = load %struct.rtx_def** %arrayidx5, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load6 = load i32* %5, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  switch i32 %bf.clear7, label %return [
    i32 48, label %for.inc
    i32 49, label %for.inc
    i32 47, label %sw.bb8
  ]

sw.bb8:                                           ; preds = %for.body
  %tobool = icmp eq i32 %set_verified.0100, 0
  br i1 %tobool, label %if.then9, label %if.end16

if.then9:                                         ; preds = %sw.bb8
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %set.099, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %bf.load.i = load i32* %3, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom25.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom25.i
  %7 = load i8* %arrayidx.i, align 1, !tbaa !5
  %cmp.i = icmp eq i8 %7, 105
  br i1 %cmp.i, label %if.end.i, label %if.else19

if.end.i:                                         ; preds = %if.then9
  %link.027.i = load %struct.rtx_def** %link.0.in26.i, align 8
  %tobool28.i = icmp eq %struct.rtx_def* %link.027.i, null
  br i1 %tobool28.i, label %if.end16, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %cmp7.i = icmp eq %struct.rtx_def* %6, null
  br i1 %cmp7.i, label %for.body.us.i, label %for.body.i

for.body.us.i:                                    ; preds = %for.body.lr.ph.i, %for.inc.us.i
  %link.029.us.i = phi %struct.rtx_def* [ %link.0.us.i, %for.inc.us.i ], [ %link.027.i, %for.body.lr.ph.i ]
  %8 = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 0
  %bf.load3.us.i = load i32* %8, align 8
  %bf.clear4.us.i = and i32 %bf.load3.us.i, 16711680
  %cmp5.us.i = icmp eq i32 %bf.clear4.us.i, 655360
  br i1 %cmp5.us.i, label %land.lhs.true, label %for.inc.us.i

for.inc.us.i:                                     ; preds = %for.body.us.i
  %arrayidx17.us.i = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 1, i64 1
  %link.0.in.us.i = bitcast %union.rtunion_def* %arrayidx17.us.i to %struct.rtx_def**
  %link.0.us.i = load %struct.rtx_def** %link.0.in.us.i, align 8
  %tobool.us.i = icmp eq %struct.rtx_def* %link.0.us.i, null
  br i1 %tobool.us.i, label %if.end16, label %for.body.us.i

for.body.i:                                       ; preds = %for.body.lr.ph.i, %for.inc.i
  %link.029.i = phi %struct.rtx_def* [ %link.0.i, %for.inc.i ], [ %link.027.i, %for.body.lr.ph.i ]
  %9 = getelementptr inbounds %struct.rtx_def* %link.029.i, i64 0, i32 0
  %bf.load3.i = load i32* %9, align 8
  %bf.clear4.i = and i32 %bf.load3.i, 16711680
  %cmp5.i = icmp eq i32 %bf.clear4.i, 655360
  br i1 %cmp5.i, label %lor.lhs.false.i, label %for.inc.i

lor.lhs.false.i:                                  ; preds = %for.body.i
  %arrayidx10.i = getelementptr inbounds %struct.rtx_def* %link.029.i, i64 0, i32 1, i64 0
  %rtx11.i = bitcast %union.rtunion_def* %arrayidx10.i to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx11.i, align 8, !tbaa !1
  %cmp12.i = icmp eq %struct.rtx_def* %10, %6
  br i1 %cmp12.i, label %find_reg_note.exit, label %for.inc.i

for.inc.i:                                        ; preds = %lor.lhs.false.i, %for.body.i
  %arrayidx17.i = getelementptr inbounds %struct.rtx_def* %link.029.i, i64 0, i32 1, i64 1
  %link.0.in.i = bitcast %union.rtunion_def* %arrayidx17.i to %struct.rtx_def**
  %link.0.i = load %struct.rtx_def** %link.0.in.i, align 8
  %tobool.i = icmp eq %struct.rtx_def* %link.0.i, null
  br i1 %tobool.i, label %if.end16, label %for.body.i

find_reg_note.exit:                               ; preds = %lor.lhs.false.i
  %tobool12 = icmp eq %struct.rtx_def* %link.029.i, null
  br i1 %tobool12, label %if.end16, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body.us.i, %find_reg_note.exit
  %call13 = tail call i32 @side_effects_p(%struct.rtx_def* %set.099)
  %tobool14 = icmp eq i32 %call13, 0
  br i1 %tobool14, label %for.inc, label %if.end16

if.end16:                                         ; preds = %for.inc.i, %for.inc.us.i, %find_reg_note.exit, %land.lhs.true, %if.end.i, %sw.bb8
  %set_verified.1 = phi i32 [ %set_verified.0100, %sw.bb8 ], [ 1, %if.end.i ], [ 1, %land.lhs.true ], [ 1, %find_reg_note.exit ], [ 1, %for.inc.us.i ], [ 1, %for.inc.i ]
  %tobool17 = icmp eq %struct.rtx_def* %set.099, null
  br i1 %tobool17, label %for.inc, label %if.end16.if.else19_crit_edge

if.end16.if.else19_crit_edge:                     ; preds = %if.end16
  %bf.load.i42.pre = load i32* %3, align 8
  br label %if.else19

if.else19:                                        ; preds = %if.end16.if.else19_crit_edge, %if.then9
  %bf.load.i42 = phi i32 [ %bf.load.i42.pre, %if.end16.if.else19_crit_edge ], [ %bf.load.i, %if.then9 ]
  %set_verified.191 = phi i32 [ %set_verified.1, %if.end16.if.else19_crit_edge ], [ 1, %if.then9 ]
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx22, align 8, !tbaa !1
  %bf.clear.i43 = and i32 %bf.load.i42, 65535
  %idxprom25.i44 = zext i32 %bf.clear.i43 to i64
  %arrayidx.i45 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom25.i44
  %12 = load i8* %arrayidx.i45, align 1, !tbaa !5
  %cmp.i46 = icmp eq i8 %12, 105
  br i1 %cmp.i46, label %if.end.i51, label %return

if.end.i51:                                       ; preds = %if.else19
  %link.027.i49 = load %struct.rtx_def** %link.0.in26.i, align 8
  %tobool28.i50 = icmp eq %struct.rtx_def* %link.027.i49, null
  br i1 %tobool28.i50, label %return, label %for.body.lr.ph.i53

for.body.lr.ph.i53:                               ; preds = %if.end.i51
  %cmp7.i52 = icmp eq %struct.rtx_def* %11, null
  br i1 %cmp7.i52, label %for.body.us.i59, label %for.body.i70

for.body.us.i59:                                  ; preds = %for.body.lr.ph.i53, %for.inc.us.i64
  %link.029.us.i54 = phi %struct.rtx_def* [ %link.0.us.i62, %for.inc.us.i64 ], [ %link.027.i49, %for.body.lr.ph.i53 ]
  %13 = getelementptr inbounds %struct.rtx_def* %link.029.us.i54, i64 0, i32 0
  %bf.load3.us.i55 = load i32* %13, align 8
  %bf.clear4.us.i57 = and i32 %bf.load3.us.i55, 16711680
  %cmp5.us.i58 = icmp eq i32 %bf.clear4.us.i57, 655360
  br i1 %cmp5.us.i58, label %lor.lhs.false, label %for.inc.us.i64

for.inc.us.i64:                                   ; preds = %for.body.us.i59
  %arrayidx17.us.i60 = getelementptr inbounds %struct.rtx_def* %link.029.us.i54, i64 0, i32 1, i64 1
  %link.0.in.us.i61 = bitcast %union.rtunion_def* %arrayidx17.us.i60 to %struct.rtx_def**
  %link.0.us.i62 = load %struct.rtx_def** %link.0.in.us.i61, align 8
  %tobool.us.i63 = icmp eq %struct.rtx_def* %link.0.us.i62, null
  br i1 %tobool.us.i63, label %return, label %for.body.us.i59

for.body.i70:                                     ; preds = %for.body.lr.ph.i53, %for.inc.i79
  %link.029.i65 = phi %struct.rtx_def* [ %link.0.i77, %for.inc.i79 ], [ %link.027.i49, %for.body.lr.ph.i53 ]
  %14 = getelementptr inbounds %struct.rtx_def* %link.029.i65, i64 0, i32 0
  %bf.load3.i66 = load i32* %14, align 8
  %bf.clear4.i68 = and i32 %bf.load3.i66, 16711680
  %cmp5.i69 = icmp eq i32 %bf.clear4.i68, 655360
  br i1 %cmp5.i69, label %lor.lhs.false.i74, label %for.inc.i79

lor.lhs.false.i74:                                ; preds = %for.body.i70
  %arrayidx10.i71 = getelementptr inbounds %struct.rtx_def* %link.029.i65, i64 0, i32 1, i64 0
  %rtx11.i72 = bitcast %union.rtunion_def* %arrayidx10.i71 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx11.i72, align 8, !tbaa !1
  %cmp12.i73 = icmp eq %struct.rtx_def* %15, %11
  br i1 %cmp12.i73, label %find_reg_note.exit81, label %for.inc.i79

for.inc.i79:                                      ; preds = %lor.lhs.false.i74, %for.body.i70
  %arrayidx17.i75 = getelementptr inbounds %struct.rtx_def* %link.029.i65, i64 0, i32 1, i64 1
  %link.0.in.i76 = bitcast %union.rtunion_def* %arrayidx17.i75 to %struct.rtx_def**
  %link.0.i77 = load %struct.rtx_def** %link.0.in.i76, align 8
  %tobool.i78 = icmp eq %struct.rtx_def* %link.0.i77, null
  br i1 %tobool.i78, label %return, label %for.body.i70

find_reg_note.exit81:                             ; preds = %lor.lhs.false.i74
  %tobool24 = icmp eq %struct.rtx_def* %link.029.i65, null
  br i1 %tobool24, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.us.i59, %find_reg_note.exit81
  %call25 = tail call i32 @side_effects_p(%struct.rtx_def* %4)
  %tobool26 = icmp eq i32 %call25, 0
  br i1 %tobool26, label %for.inc, label %return

for.inc:                                          ; preds = %land.lhs.true, %if.end16, %lor.lhs.false, %for.body, %for.body
  %set.2 = phi %struct.rtx_def* [ %set.099, %lor.lhs.false ], [ %set.099, %for.body ], [ %set.099, %for.body ], [ %4, %if.end16 ], [ %4, %land.lhs.true ]
  %set_verified.2 = phi i32 [ %set_verified.191, %lor.lhs.false ], [ %set_verified.0100, %for.body ], [ %set_verified.0100, %for.body ], [ 0, %if.end16 ], [ 0, %land.lhs.true ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %16 = trunc i64 %indvars.iv.next to i32
  %cmp1 = icmp slt i32 %16, %2
  br i1 %cmp1, label %for.body, label %return

return:                                           ; preds = %lor.lhs.false, %find_reg_note.exit81, %for.body, %for.inc, %if.else19, %if.end.i51, %for.inc.i79, %for.inc.us.i64, %for.cond.preheader, %entry
  %retval.0 = phi %struct.rtx_def* [ null, %entry ], [ null, %for.cond.preheader ], [ null, %for.inc.us.i64 ], [ null, %for.inc.i79 ], [ null, %lor.lhs.false ], [ null, %find_reg_note.exit81 ], [ null, %for.body ], [ %set.2, %for.inc ], [ null, %if.else19 ], [ null, %if.end.i51 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @find_last_value(%struct.rtx_def* %x, %struct.rtx_def** nocapture %pinsn, %struct.rtx_def* readnone %valid_to, i32 %allow_hwreg) #1 {
entry:
  %data.i.i = alloca %struct.set_of_data, align 8
  %0 = load %struct.rtx_def** %pinsn, align 8, !tbaa !1
  %p.0.in.in114 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %p.0.in115 = bitcast %union.rtunion_def* %p.0.in.in114 to %struct.rtx_def**
  %p.0116 = load %struct.rtx_def** %p.0.in115, align 8
  %tobool117 = icmp eq %struct.rtx_def* %p.0116, null
  br i1 %tobool117, label %return, label %land.rhs.lr.ph

land.rhs.lr.ph:                                   ; preds = %entry
  %1 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %arrayidx11.i = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx11.i to i32*
  %2 = bitcast %struct.set_of_data* %data.i.i to i8*
  %found.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i, i64 0, i32 0
  %pat1.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i, i64 0, i32 1
  %cmp54 = icmp eq %struct.rtx_def* %valid_to, null
  %tobool72 = icmp ne i32 %allow_hwreg, 0
  br label %land.rhs

land.rhs:                                         ; preds = %land.rhs.lr.ph, %for.cond.backedge
  %p.0118 = phi %struct.rtx_def* [ %p.0116, %land.rhs.lr.ph ], [ %p.0, %for.cond.backedge ]
  %3 = getelementptr inbounds %struct.rtx_def* %p.0118, i64 0, i32 0
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 36
  br i1 %cmp, label %return, label %for.body

for.body:                                         ; preds = %land.rhs
  %idxprom106 = zext i32 %bf.clear to i64
  %arrayidx3 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom106
  %4 = load i8* %arrayidx3, align 1, !tbaa !5
  %cmp4 = icmp eq i8 %4, 105
  br i1 %cmp4, label %cond.true, label %for.cond.backedge

for.cond.backedge:                                ; preds = %for.body, %reg_set_p.exit
  %p.0.in.in = getelementptr inbounds %struct.rtx_def* %p.0118, i64 0, i32 1, i64 1
  %p.0.in = bitcast %union.rtunion_def* %p.0.in.in to %struct.rtx_def**
  %p.0 = load %struct.rtx_def** %p.0.in, align 8
  %tobool = icmp eq %struct.rtx_def* %p.0, null
  br i1 %tobool, label %return, label %land.rhs

cond.true:                                        ; preds = %for.body
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %p.0118, i64 0, i32 1, i64 3
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx15, align 8, !tbaa !1
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load16 = load i32* %6, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %cmp18 = icmp eq i32 %bf.clear17, 47
  br i1 %cmp18, label %if.end.i, label %cond.false

cond.false:                                       ; preds = %cond.true
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %p.0118, %struct.rtx_def* %5)
  br label %if.end.i

if.end.i:                                         ; preds = %cond.false, %cond.true
  %cond29 = phi %struct.rtx_def* [ %call, %cond.false ], [ %5, %cond.true ]
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %p.0118, i64 0, i32 1, i64 6
  %link.0.in26.i = bitcast %union.rtunion_def* %arrayidx2.i to %struct.rtx_def**
  %link.027.i = load %struct.rtx_def** %link.0.in26.i, align 8
  %tobool28.i = icmp eq %struct.rtx_def* %link.027.i, null
  br i1 %tobool28.i, label %find_reg_note.exit, label %for.body.us.i

for.body.us.i:                                    ; preds = %if.end.i, %for.inc.us.i
  %link.029.us.i = phi %struct.rtx_def* [ %link.0.us.i, %for.inc.us.i ], [ %link.027.i, %if.end.i ]
  %7 = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 0
  %bf.load3.us.i = load i32* %7, align 8
  %bf.clear4.us.i = and i32 %bf.load3.us.i, 16711680
  %cmp5.us.i = icmp eq i32 %bf.clear4.us.i, 262144
  br i1 %cmp5.us.i, label %find_reg_note.exit, label %for.inc.us.i

for.inc.us.i:                                     ; preds = %for.body.us.i
  %arrayidx17.us.i = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 1, i64 1
  %link.0.in.us.i = bitcast %union.rtunion_def* %arrayidx17.us.i to %struct.rtx_def**
  %link.0.us.i = load %struct.rtx_def** %link.0.in.us.i, align 8
  %tobool.us.i = icmp eq %struct.rtx_def* %link.0.us.i, null
  br i1 %tobool.us.i, label %find_reg_note.exit, label %for.body.us.i

find_reg_note.exit:                               ; preds = %for.body.us.i, %for.inc.us.i, %if.end.i
  %retval.0.i = phi %struct.rtx_def* [ null, %if.end.i ], [ %link.029.us.i, %for.body.us.i ], [ null, %for.inc.us.i ]
  %tobool31 = icmp eq %struct.rtx_def* %cond29, null
  br i1 %tobool31, label %if.end75, label %land.lhs.true

land.lhs.true:                                    ; preds = %find_reg_note.exit
  %fld32 = getelementptr inbounds %struct.rtx_def* %cond29, i64 0, i32 1
  %rtx34 = bitcast [1 x %union.rtunion_def]* %fld32 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx34, align 8, !tbaa !1
  %call35 = call i32 @rtx_equal_p(%struct.rtx_def* %x, %struct.rtx_def* %8) #4
  %tobool36 = icmp eq i32 %call35, 0
  br i1 %tobool36, label %if.end75, label %if.then37

if.then37:                                        ; preds = %land.lhs.true
  %arrayidx39 = getelementptr inbounds %struct.rtx_def* %cond29, i64 0, i32 1, i64 1
  %rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx40, align 8, !tbaa !1
  %tobool41 = icmp eq %struct.rtx_def* %retval.0.i, null
  br i1 %tobool41, label %if.end, label %land.lhs.true42

land.lhs.true42:                                  ; preds = %if.then37
  %arrayidx44 = getelementptr inbounds %struct.rtx_def* %retval.0.i, i64 0, i32 1, i64 0
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx45, align 8, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load46 = load i32* %11, align 8
  %bf.clear47 = and i32 %bf.load46, 65535
  %cmp48 = icmp eq i32 %bf.clear47, 3
  %. = select i1 %cmp48, %struct.rtx_def* %9, %struct.rtx_def* %10
  br label %if.end

if.end:                                           ; preds = %land.lhs.true42, %if.then37
  %src.0 = phi %struct.rtx_def* [ %9, %if.then37 ], [ %., %land.lhs.true42 ]
  br i1 %cmp54, label %land.lhs.true61, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %arrayidx57 = getelementptr inbounds %struct.rtx_def* %p.0118, i64 0, i32 1, i64 1
  %rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx58, align 8, !tbaa !1
  %call59 = call i32 @modified_between_p(%struct.rtx_def* %src.0, %struct.rtx_def* %12, %struct.rtx_def* %valid_to)
  %tobool60 = icmp eq i32 %call59, 0
  br i1 %tobool60, label %land.lhs.true61, label %if.end75

land.lhs.true61:                                  ; preds = %lor.lhs.false, %if.end
  %13 = getelementptr inbounds %struct.rtx_def* %src.0, i64 0, i32 0
  %bf.load62 = load i32* %13, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 61
  br i1 %cmp64, label %land.lhs.true66, label %if.then73

land.lhs.true66:                                  ; preds = %land.lhs.true61
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %src.0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx68 to i32*
  %14 = load i32* %rtuint, align 4, !tbaa !9
  %cmp69 = icmp ugt i32 %14, 52
  %or.cond = or i1 %cmp69, %tobool72
  br i1 %or.cond, label %if.then73, label %if.end75

if.then73:                                        ; preds = %land.lhs.true66, %land.lhs.true61
  store %struct.rtx_def* %p.0118, %struct.rtx_def** %pinsn, align 8, !tbaa !1
  br label %return

if.end75:                                         ; preds = %lor.lhs.false, %land.lhs.true, %find_reg_note.exit, %land.lhs.true66
  %bf.load.i107 = load i32* %3, align 8
  %bf.clear.i108 = and i32 %bf.load.i107, 65535
  %idxprom35.i = zext i32 %bf.clear.i108 to i64
  %arrayidx.i109 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom35.i
  %15 = load i8* %arrayidx.i109, align 1, !tbaa !5
  %cmp.i110 = icmp eq i8 %15, 105
  %cmp4.i = icmp eq i32 %bf.clear.i108, 34
  %or.cond.i = and i1 %cmp.i110, %cmp4.i
  br i1 %or.cond.i, label %land.lhs.true.i, label %if.end22.i

land.lhs.true.i:                                  ; preds = %if.end75
  %bf.load6.i = load i32* %1, align 8
  %bf.clear7.i = and i32 %bf.load6.i, 65535
  switch i32 %bf.clear7.i, label %lor.lhs.false18.i [
    i32 61, label %land.lhs.true10.i
    i32 66, label %return
  ]

land.lhs.true10.i:                                ; preds = %land.lhs.true.i
  %16 = load i32* %rtuint.i, align 4, !tbaa !9
  %cmp12.i = icmp ult i32 %16, 53
  br i1 %cmp12.i, label %return, label %lor.lhs.false18.i

lor.lhs.false18.i:                                ; preds = %land.lhs.true10.i, %land.lhs.true.i
  %call.i = call i32 @find_reg_fusage(%struct.rtx_def* %p.0118, i32 49, %struct.rtx_def* %x) #4
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %lor.lhs.false18.if.end22_crit_edge.i, label %return

lor.lhs.false18.if.end22_crit_edge.i:             ; preds = %lor.lhs.false18.i
  %bf.load.i.pre.i = load i32* %3, align 8
  br label %if.end22.i

if.end22.i:                                       ; preds = %lor.lhs.false18.if.end22_crit_edge.i, %if.end75
  %bf.load.i.i = phi i32 [ %bf.load.i.pre.i, %lor.lhs.false18.if.end22_crit_edge.i ], [ %bf.load.i107, %if.end75 ]
  call void @llvm.lifetime.start(i64 16, i8* %2) #4
  store %struct.rtx_def* null, %struct.rtx_def** %found.i.i, align 8, !tbaa !12
  store %struct.rtx_def* %x, %struct.rtx_def** %pat1.i.i, align 8, !tbaa !14
  %bf.clear.i.i = and i32 %bf.load.i.i, 65535
  %idxprom6.i.i = zext i32 %bf.clear.i.i to i64
  %arrayidx.i.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom6.i.i
  %17 = load i8* %arrayidx.i.i, align 1, !tbaa !5
  %cmp.i.i = icmp eq i8 %17, 105
  br i1 %cmp.i.i, label %cond.true.i.i, label %reg_set_p.exit

cond.true.i.i:                                    ; preds = %if.end22.i
  %18 = load %struct.rtx_def** %rtx15, align 8, !tbaa !1
  br label %reg_set_p.exit

reg_set_p.exit:                                   ; preds = %if.end22.i, %cond.true.i.i
  %cond.i.i = phi %struct.rtx_def* [ %18, %cond.true.i.i ], [ %p.0118, %if.end22.i ]
  call void @note_stores(%struct.rtx_def* %cond.i.i, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @set_of_1, i8* %2) #4
  %19 = load %struct.rtx_def** %found.i.i, align 8, !tbaa !12
  call void @llvm.lifetime.end(i64 16, i8* %2) #4
  %cmp24.i = icmp eq %struct.rtx_def* %19, null
  br i1 %cmp24.i, label %for.cond.backedge, label %return

return:                                           ; preds = %land.rhs, %for.cond.backedge, %lor.lhs.false18.i, %land.lhs.true10.i, %land.lhs.true.i, %reg_set_p.exit, %entry, %if.then73
  %retval.0 = phi %struct.rtx_def* [ %src.0, %if.then73 ], [ %x, %entry ], [ %x, %reg_set_p.exit ], [ %x, %land.lhs.true.i ], [ %x, %land.lhs.true10.i ], [ %x, %lor.lhs.false18.i ], [ %x, %for.cond.backedge ], [ %x, %land.rhs ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @reg_mentioned_p(%struct.rtx_def* %reg, %struct.rtx_def* %in) #1 {
entry:
  %cmp = icmp eq %struct.rtx_def* %in, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq %struct.rtx_def* %reg, %in
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %0 = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 67, label %if.then5
    i32 61, label %sw.bb
    i32 62, label %return
    i32 69, label %return
    i32 59, label %return
    i32 54, label %sw.bb22
    i32 56, label %return
    i32 55, label %return
  ]

if.then5:                                         ; preds = %if.end3
  %arrayidx = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp6 = icmp eq %struct.rtx_def* %1, %reg
  %conv = zext i1 %cmp6 to i32
  br label %return

sw.bb:                                            ; preds = %if.end3
  %2 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %bf.load10 = load i32* %2, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 61
  br i1 %cmp12, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx15 to i32*
  %3 = load i32* %rtuint, align 4, !tbaa !9
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtuint18 = bitcast %union.rtunion_def* %arrayidx17 to i32*
  %4 = load i32* %rtuint18, align 4, !tbaa !9
  %cmp19 = icmp eq i32 %3, %4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb
  %5 = phi i1 [ false, %sw.bb ], [ %cmp19, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  br label %return

sw.bb22:                                          ; preds = %if.end3
  %6 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %bf.load23 = load i32* %6, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 54
  br i1 %cmp25, label %land.rhs27, label %land.end35

land.rhs27:                                       ; preds = %sw.bb22
  %rtwint = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 1, i64 0, i32 0
  %7 = load i64* %rtwint, align 8, !tbaa !10
  %rtwint32 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0, i32 0
  %8 = load i64* %rtwint32, align 8, !tbaa !10
  %cmp33 = icmp eq i64 %7, %8
  br label %land.end35

land.end35:                                       ; preds = %land.rhs27, %sw.bb22
  %9 = phi i1 [ false, %sw.bb22 ], [ %cmp33, %land.rhs27 ]
  %land.ext36 = zext i1 %9 to i32
  br label %return

sw.epilog:                                        ; preds = %if.end3
  %10 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %bf.load38 = load i32* %10, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, %bf.clear
  br i1 %cmp40, label %land.lhs.true, label %if.end43

land.lhs.true:                                    ; preds = %sw.epilog
  %call = tail call i32 @rtx_equal_p(%struct.rtx_def* %reg, %struct.rtx_def* %in) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end43, label %return

if.end43:                                         ; preds = %land.lhs.true, %sw.epilog
  %idxprom122 = zext i32 %bf.clear to i64
  %arrayidx44 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom122
  %11 = load i8** %arrayidx44, align 8, !tbaa !1
  %arrayidx46 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom122
  %12 = load i8* %arrayidx46, align 1, !tbaa !5
  %cmp48125 = icmp eq i8 %12, 0
  br i1 %cmp48125, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end43
  %13 = zext i8 %12 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv128 = phi i64 [ %13, %for.body.lr.ph ], [ %indvars.iv.next129, %for.cond.backedge ]
  %indvars.iv.next129 = add nsw i64 %indvars.iv128, -1
  %arrayidx51 = getelementptr inbounds i8* %11, i64 %indvars.iv.next129
  %14 = load i8* %arrayidx51, align 1, !tbaa !5
  switch i8 %14, label %for.cond.backedge [
    i8 69, label %if.then55
    i8 101, label %land.lhs.true79
  ]

for.cond.backedge:                                ; preds = %for.cond60, %for.body, %land.lhs.true79
  %15 = trunc i64 %indvars.iv.next129 to i32
  %cmp48 = icmp sgt i32 %15, 0
  br i1 %cmp48, label %for.body, label %return

if.then55:                                        ; preds = %for.body
  %arrayidx58 = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 1, i64 %indvars.iv.next129
  %rtvec = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 0
  %17 = load i32* %num_elem, align 4, !tbaa !6
  %18 = sext i32 %17 to i64
  br label %for.cond60

for.cond60:                                       ; preds = %for.body63, %if.then55
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body63 ], [ %18, %if.then55 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %19 = trunc i64 %indvars.iv to i32
  %cmp61 = icmp sgt i32 %19, 0
  br i1 %cmp61, label %for.body63, label %for.cond.backedge

for.body63:                                       ; preds = %for.cond60
  %20 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %arrayidx69 = getelementptr inbounds %struct.rtvec_def* %20, i64 0, i32 1, i64 %indvars.iv.next
  %21 = load %struct.rtx_def** %arrayidx69, align 8, !tbaa !1
  %call70 = tail call i32 @reg_mentioned_p(%struct.rtx_def* %reg, %struct.rtx_def* %21)
  %tobool71 = icmp eq i32 %call70, 0
  br i1 %tobool71, label %for.cond60, label %return

land.lhs.true79:                                  ; preds = %for.body
  %arrayidx82 = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 1, i64 %indvars.iv.next129
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %22 = load %struct.rtx_def** %rtx83, align 8, !tbaa !1
  %call84 = tail call i32 @reg_mentioned_p(%struct.rtx_def* %reg, %struct.rtx_def* %22)
  %tobool85 = icmp eq i32 %call84, 0
  br i1 %tobool85, label %for.cond.backedge, label %return

return:                                           ; preds = %land.lhs.true79, %for.cond.backedge, %for.body63, %if.end43, %land.lhs.true, %if.end3, %if.end3, %if.end3, %if.end3, %if.end3, %if.end, %entry, %land.end35, %land.end, %if.then5
  %retval.0 = phi i32 [ %conv, %if.then5 ], [ %land.ext36, %land.end35 ], [ %land.ext, %land.end ], [ 0, %entry ], [ 1, %if.end ], [ 0, %if.end3 ], [ 0, %if.end3 ], [ 0, %if.end3 ], [ 0, %if.end3 ], [ 0, %if.end3 ], [ 1, %land.lhs.true ], [ 0, %if.end43 ], [ 1, %for.body63 ], [ 1, %land.lhs.true79 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @count_occurrences(%struct.rtx_def* %x, %struct.rtx_def* %find, i32 %count_dest) #1 {
entry:
  %cmp92 = icmp eq %struct.rtx_def* %x, %find
  br i1 %cmp92, label %return, label %if.end.lr.ph

if.end.lr.ph:                                     ; preds = %entry
  %tobool10 = icmp eq i32 %count_dest, 0
  br i1 %tobool10, label %if.end, label %if.end.us

if.end.us:                                        ; preds = %if.end.lr.ph
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load.us.pre = load i32* %.phi.trans.insert, align 8
  %bf.clear.us.pre = and i32 %bf.load.us.pre, 65535
  switch i32 %bf.clear.us.pre, label %sw.epilog [
    i32 61, label %return
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 68, label %return
    i32 36, label %return
    i32 59, label %return
    i32 69, label %return
    i32 66, label %sw.bb1
    i32 47, label %sw.bb7.us
  ]

sw.bb7.us:                                        ; preds = %if.end.us
  br label %sw.epilog

if.end:                                           ; preds = %if.end.lr.ph, %if.then11
  %x.tr93 = phi %struct.rtx_def* [ %3, %if.then11 ], [ %x, %if.end.lr.ph ]
  %0 = getelementptr inbounds %struct.rtx_def* %x.tr93, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 61, label %return
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 68, label %return
    i32 36, label %return
    i32 59, label %return
    i32 69, label %return
    i32 66, label %sw.bb1
    i32 47, label %sw.bb7
  ]

sw.bb1:                                           ; preds = %if.end, %if.end.us
  %x.tr.lcssa78 = phi %struct.rtx_def* [ %x, %if.end.us ], [ %x.tr93, %if.end ]
  %1 = getelementptr inbounds %struct.rtx_def* %find, i64 0, i32 0
  %bf.load2 = load i32* %1, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 66
  br i1 %cmp4, label %land.lhs.true, label %sw.epilog

land.lhs.true:                                    ; preds = %sw.bb1
  %call = tail call i32 @rtx_equal_p(%struct.rtx_def* %x.tr.lcssa78, %struct.rtx_def* %find) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %sw.epilog, label %return

sw.bb7:                                           ; preds = %if.end
  %fld = getelementptr inbounds %struct.rtx_def* %x.tr93, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp8 = icmp eq %struct.rtx_def* %2, %find
  br i1 %cmp8, label %if.then11, label %sw.epilog

if.then11:                                        ; preds = %sw.bb7
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %x.tr93, i64 0, i32 1, i64 1
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx14, align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %3, %find
  br i1 %cmp, label %return, label %if.end

sw.epilog:                                        ; preds = %sw.bb7, %if.end, %sw.bb7.us, %if.end.us, %land.lhs.true, %sw.bb1
  %bf.clear81 = phi i32 [ 66, %land.lhs.true ], [ 66, %sw.bb1 ], [ 47, %sw.bb7.us ], [ %bf.clear.us.pre, %if.end.us ], [ 47, %sw.bb7 ], [ %bf.clear, %if.end ]
  %x.tr79 = phi %struct.rtx_def* [ %x.tr.lcssa78, %land.lhs.true ], [ %x.tr.lcssa78, %sw.bb1 ], [ %x, %sw.bb7.us ], [ %x, %if.end.us ], [ %x.tr93, %if.end ], [ %x.tr93, %sw.bb7 ]
  %idxprom75 = zext i32 %bf.clear81 to i64
  %arrayidx19 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom75
  %4 = load i8* %arrayidx19, align 1, !tbaa !5
  %cmp2087 = icmp eq i8 %4, 0
  br i1 %cmp2087, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %arrayidx17 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom75
  %5 = load i8** %arrayidx17, align 8, !tbaa !1
  %conv = zext i8 %4 to i32
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc46
  %indvars.iv141 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next142, %for.inc46 ]
  %count.090 = phi i32 [ 0, %for.body.lr.ph ], [ %count.2, %for.inc46 ]
  %format_ptr.089 = phi i8* [ %5, %for.body.lr.ph ], [ %incdec.ptr, %for.inc46 ]
  %incdec.ptr = getelementptr inbounds i8* %format_ptr.089, i64 1
  %6 = load i8* %format_ptr.089, align 1, !tbaa !5
  %conv22 = sext i8 %6 to i32
  switch i32 %conv22, label %for.inc46 [
    i32 101, label %sw.bb23
    i32 69, label %for.cond30.preheader
  ]

for.cond30.preheader:                             ; preds = %for.body
  %arrayidx33 = getelementptr inbounds %struct.rtx_def* %x.tr79, i64 0, i32 1, i64 %indvars.iv141
  %rtvec = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem82 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %8 = load i32* %num_elem82, align 4, !tbaa !6
  %cmp3483 = icmp sgt i32 %8, 0
  br i1 %cmp3483, label %for.body36, label %for.inc46

sw.bb23:                                          ; preds = %for.body
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %x.tr79, i64 0, i32 1, i64 %indvars.iv141
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx27, align 8, !tbaa !1
  %call28 = tail call i32 @count_occurrences(%struct.rtx_def* %9, %struct.rtx_def* %find, i32 %count_dest)
  %add = add nsw i32 %call28, %count.090
  br label %for.inc46

for.body36:                                       ; preds = %for.cond30.preheader, %for.body36
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body36 ], [ 0, %for.cond30.preheader ]
  %10 = phi %struct.rtvec_def* [ %12, %for.body36 ], [ %7, %for.cond30.preheader ]
  %count.185 = phi i32 [ %add44, %for.body36 ], [ %count.090, %for.cond30.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.rtvec_def* %10, i64 0, i32 1, i64 %indvars.iv
  %11 = load %struct.rtx_def** %arrayidx42, align 8, !tbaa !1
  %call43 = tail call i32 @count_occurrences(%struct.rtx_def* %11, %struct.rtx_def* %find, i32 %count_dest)
  %add44 = add nsw i32 %call43, %count.185
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %12, i64 0, i32 0
  %13 = load i32* %num_elem, align 4, !tbaa !6
  %14 = trunc i64 %indvars.iv.next to i32
  %cmp34 = icmp slt i32 %14, %13
  br i1 %cmp34, label %for.body36, label %for.inc46

for.inc46:                                        ; preds = %for.body36, %for.cond30.preheader, %sw.bb23, %for.body
  %count.2 = phi i32 [ %count.090, %for.body ], [ %add, %sw.bb23 ], [ %count.090, %for.cond30.preheader ], [ %add44, %for.body36 ]
  %indvars.iv.next142 = add nuw nsw i64 %indvars.iv141, 1
  %15 = trunc i64 %indvars.iv.next142 to i32
  %cmp20 = icmp slt i32 %15, %conv
  br i1 %cmp20, label %for.body, label %return

return:                                           ; preds = %if.then11, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %for.inc46, %entry, %if.end.us, %if.end.us, %if.end.us, %if.end.us, %if.end.us, %if.end.us, %if.end.us, %if.end.us, %sw.epilog, %land.lhs.true
  %retval.0 = phi i32 [ 1, %land.lhs.true ], [ 0, %sw.epilog ], [ 1, %entry ], [ 0, %if.end.us ], [ 0, %if.end.us ], [ 0, %if.end.us ], [ 0, %if.end.us ], [ 0, %if.end.us ], [ 0, %if.end.us ], [ 0, %if.end.us ], [ 0, %if.end.us ], [ %count.2, %for.inc46 ], [ 1, %if.then11 ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ]
  ret i32 %retval.0
}

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind readonly uwtable
define i32 @no_labels_between_p(%struct.rtx_def* readonly %beg, %struct.rtx_def* readnone %end) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %beg, %end
  br i1 %cmp, label %return, label %for.cond

for.cond:                                         ; preds = %entry, %for.body
  %beg.pn = phi %struct.rtx_def* [ %p.0, %for.body ], [ %beg, %entry ]
  %p.0.in.in = getelementptr inbounds %struct.rtx_def* %beg.pn, i64 0, i32 1, i64 2
  %p.0.in = bitcast %union.rtunion_def* %p.0.in.in to %struct.rtx_def**
  %p.0 = load %struct.rtx_def** %p.0.in, align 8
  %cmp1 = icmp eq %struct.rtx_def* %p.0, %end
  br i1 %cmp1, label %return, label %for.body

for.body:                                         ; preds = %for.cond
  %0 = getelementptr inbounds %struct.rtx_def* %p.0, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 36
  br i1 %cmp2, label %return, label %for.cond

return:                                           ; preds = %for.cond, %for.body, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %for.cond ], [ 0, %for.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @no_jumps_between_p(%struct.rtx_def* nocapture readonly %beg, %struct.rtx_def* readnone %end) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %beg.pn = phi %struct.rtx_def* [ %beg, %entry ], [ %p.0, %for.body ]
  %p.0.in.in = getelementptr inbounds %struct.rtx_def* %beg.pn, i64 0, i32 1, i64 2
  %p.0.in = bitcast %union.rtunion_def* %p.0.in.in to %struct.rtx_def**
  %p.0 = load %struct.rtx_def** %p.0.in, align 8
  %cmp = icmp eq %struct.rtx_def* %p.0, %end
  br i1 %cmp, label %return, label %for.body

for.body:                                         ; preds = %for.cond
  %0 = getelementptr inbounds %struct.rtx_def* %p.0, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 33
  br i1 %cmp1, label %return, label %for.cond

return:                                           ; preds = %for.cond, %for.body
  %retval.0 = phi i32 [ 0, %for.body ], [ 1, %for.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @reg_used_between_p(%struct.rtx_def* %reg, %struct.rtx_def* readonly %from_insn, %struct.rtx_def* readnone %to_insn) #1 {
entry:
  %cmp = icmp eq %struct.rtx_def* %from_insn, %to_insn
  br i1 %cmp, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %insn.0.in.in34 = getelementptr inbounds %struct.rtx_def* %from_insn, i64 0, i32 1, i64 2
  %insn.0.in35 = bitcast %union.rtunion_def* %insn.0.in.in34 to %struct.rtx_def**
  %insn.036 = load %struct.rtx_def** %insn.0.in35, align 8
  %cmp137 = icmp eq %struct.rtx_def* %insn.036, %to_insn
  br i1 %cmp137, label %return, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.cond.backedge
  %insn.038 = phi %struct.rtx_def* [ %insn.0, %for.cond.backedge ], [ %insn.036, %for.cond.preheader ]
  %0 = getelementptr inbounds %struct.rtx_def* %insn.038, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom33 = zext i32 %bf.clear to i64
  %arrayidx2 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom33
  %1 = load i8* %arrayidx2, align 1, !tbaa !5
  %cmp3 = icmp eq i8 %1, 105
  br i1 %cmp3, label %land.lhs.true, label %for.cond.backedge

land.lhs.true:                                    ; preds = %for.body
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %insn.038, i64 0, i32 1, i64 3
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx7, align 8, !tbaa !1
  %call = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %reg, %struct.rtx_def* %2)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %bf.load8 = load i32* %0, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 34
  br i1 %cmp10, label %land.lhs.true12, label %for.cond.backedge

land.lhs.true12:                                  ; preds = %lor.lhs.false
  %call13 = tail call i32 @find_reg_fusage(%struct.rtx_def* %insn.038, i32 48, %struct.rtx_def* %reg)
  %tobool14 = icmp eq i32 %call13, 0
  br i1 %tobool14, label %lor.lhs.false15, label %return

lor.lhs.false15:                                  ; preds = %land.lhs.true12
  %call16 = tail call i32 @find_reg_fusage(%struct.rtx_def* %insn.038, i32 49, %struct.rtx_def* %reg)
  %tobool17 = icmp eq i32 %call16, 0
  br i1 %tobool17, label %for.cond.backedge, label %return

for.cond.backedge:                                ; preds = %lor.lhs.false15, %for.body, %lor.lhs.false
  %insn.0.in.in = getelementptr inbounds %struct.rtx_def* %insn.038, i64 0, i32 1, i64 2
  %insn.0.in = bitcast %union.rtunion_def* %insn.0.in.in to %struct.rtx_def**
  %insn.0 = load %struct.rtx_def** %insn.0.in, align 8
  %cmp1 = icmp eq %struct.rtx_def* %insn.0, %to_insn
  br i1 %cmp1, label %return, label %for.body

return:                                           ; preds = %lor.lhs.false15, %land.lhs.true12, %land.lhs.true, %for.cond.backedge, %for.cond.preheader, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %for.cond.preheader ], [ 1, %lor.lhs.false15 ], [ 1, %land.lhs.true12 ], [ 1, %land.lhs.true ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %in) #1 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load1.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %bf.load1 = phi i32 [ %bf.load1.pre, %if.then ], [ %bf.load, %entry ]
  %x.addr.0 = phi %struct.rtx_def* [ %1, %if.then ], [ %x, %entry ]
  %2 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 0
  %bf.clear2 = and i32 %bf.load1, 65535
  switch i32 %bf.clear2, label %lor.lhs.false31 [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 55, label %return
    i32 58, label %return
    i32 134, label %return
    i32 56, label %return
    i32 140, label %return
  ]

lor.lhs.false31:                                  ; preds = %if.end
  %3 = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 0
  %bf.load32 = load i32* %3, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  switch i32 %bf.clear33, label %if.end64 [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 55, label %return
    i32 58, label %return
    i32 134, label %return
    i32 56, label %return
    i32 140, label %return
  ]

if.end64:                                         ; preds = %lor.lhs.false31
  switch i32 %bf.clear2, label %sw.epilog [
    i32 63, label %sw.bb
    i32 61, label %sw.bb75
    i32 66, label %sw.bb142
    i32 62, label %sw.bb175
    i32 59, label %sw.bb175
    i32 69, label %sw.bb175
    i32 39, label %sw.bb177
  ]

sw.bb:                                            ; preds = %if.end64
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx69, align 8, !tbaa !1
  %arrayidx71 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx71 to i32*
  %5 = load i32* %rtuint, align 4, !tbaa !9
  %cmp72 = icmp ult i32 %5, 53
  br i1 %cmp72, label %if.then73, label %cond.end138

if.then73:                                        ; preds = %sw.bb
  %6 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load.i = load i32* %6, align 8
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %bf.clear.i = and i32 %bf.lshr.i, 255
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 1
  %rtuint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  %7 = load i32* %rtuint5.i, align 4, !tbaa !9
  %bf.lshr7.i = lshr i32 %bf.load1, 16
  %bf.clear8.i = and i32 %bf.lshr7.i, 255
  %call.i = tail call i32 @subreg_regno_offset(i32 %5, i32 %bf.clear.i, i32 %7, i32 %bf.clear8.i) #4
  %add.i = add i32 %call.i, %5
  br label %do_reg

sw.bb75:                                          ; preds = %if.end64
  %arrayidx77 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtuint78 = bitcast %union.rtunion_def* %arrayidx77 to i32*
  %8 = load i32* %rtuint78, align 4, !tbaa !9
  br label %do_reg

do_reg:                                           ; preds = %if.then73, %sw.bb75
  %regno.0 = phi i32 [ %8, %sw.bb75 ], [ %add.i, %if.then73 ]
  %cmp79 = icmp ult i32 %regno.0, 53
  br i1 %cmp79, label %cond.true, label %cond.end138

cond.true:                                        ; preds = %do_reg
  %9 = and i32 %regno.0, -8
  %10 = icmp eq i32 %9, 8
  %regno.0.off = add i32 %regno.0, -21
  %11 = icmp ult i32 %regno.0.off, 8
  %or.cond = or i1 %10, %11
  %regno.0.off271 = add i32 %regno.0, -45
  %12 = icmp ult i32 %regno.0.off271, 8
  %or.cond277 = or i1 %or.cond, %12
  %regno.0.off272 = add i32 %regno.0, -29
  %13 = icmp ult i32 %regno.0.off272, 8
  %or.cond279 = or i1 %or.cond277, %13
  %bf.load95 = load i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load95, 16
  %bf.clear96 = and i32 %bf.lshr, 255
  br i1 %or.cond279, label %cond.true94, label %cond.false

cond.true94:                                      ; preds = %cond.true
  %idxprom274 = zext i32 %bf.clear96 to i64
  %arrayidx97 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom274
  %14 = load i32* %arrayidx97, align 4, !tbaa !5
  %cmp98 = icmp eq i32 %14, 5
  br i1 %cmp98, label %cond.end138, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true94
  %cmp104 = icmp eq i32 %14, 6
  %phitmp = select i1 %cmp104, i32 2, i32 1
  br label %cond.end138

cond.false:                                       ; preds = %cond.true
  switch i32 %bf.clear96, label %cond.false120 [
    i32 18, label %cond.true109
    i32 24, label %cond.true116
  ]

cond.true109:                                     ; preds = %cond.false
  %15 = load i32* @target_flags, align 4, !tbaa !9
  %and = lshr i32 %15, 25
  %16 = and i32 %and, 1
  %17 = xor i32 %16, 3
  br label %cond.end138

cond.true116:                                     ; preds = %cond.false
  %18 = load i32* @target_flags, align 4, !tbaa !9
  %and117 = lshr i32 %18, 24
  %19 = and i32 %and117, 2
  %20 = xor i32 %19, 6
  br label %cond.end138

cond.false120:                                    ; preds = %cond.false
  %idxprom124273 = zext i32 %bf.clear96 to i64
  %arrayidx125 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom124273
  %21 = load i8* %arrayidx125, align 1, !tbaa !5
  %conv = zext i8 %21 to i32
  %22 = load i32* @target_flags, align 4, !tbaa !9
  %and126 = lshr i32 %22, 23
  %23 = and i32 %and126, 4
  %24 = add i32 %23, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %24
  %div = sdiv i32 %sub, %24
  br label %cond.end138

cond.end138:                                      ; preds = %sw.bb, %cond.true94, %lor.rhs, %do_reg, %cond.true116, %cond.false120, %cond.true109
  %regno.0281 = phi i32 [ %regno.0, %cond.true109 ], [ %regno.0, %cond.true116 ], [ %regno.0, %cond.false120 ], [ %regno.0, %do_reg ], [ %regno.0, %cond.true94 ], [ %regno.0, %lor.rhs ], [ %5, %sw.bb ]
  %cond139 = phi i32 [ %17, %cond.true109 ], [ %20, %cond.true116 ], [ %div, %cond.false120 ], [ 1, %do_reg ], [ 2, %cond.true94 ], [ %phitmp, %lor.rhs ], [ 1, %sw.bb ]
  %add140 = add i32 %cond139, %regno.0281
  %call141 = tail call i32 @refers_to_regno_p(i32 %regno.0281, i32 %add140, %struct.rtx_def* %in, %struct.rtx_def** null)
  br label %return

sw.bb142:                                         ; preds = %if.end64
  %cmp145 = icmp eq i32 %bf.clear33, 66
  br i1 %cmp145, label %return, label %if.end148

if.end148:                                        ; preds = %sw.bb142
  %idxprom151270 = zext i32 %bf.clear33 to i64
  %arrayidx152 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom151270
  %25 = load i8** %arrayidx152, align 8, !tbaa !1
  %arrayidx156 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom151270
  %26 = load i8* %arrayidx156, align 1, !tbaa !5
  %cmp159285 = icmp eq i8 %26, 0
  br i1 %cmp159285, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end148
  %27 = zext i8 %26 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv = phi i64 [ %27, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.backedge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx162 = getelementptr inbounds i8* %25, i64 %indvars.iv.next
  %28 = load i8* %arrayidx162, align 1, !tbaa !5
  %cmp164 = icmp eq i8 %28, 101
  br i1 %cmp164, label %land.lhs.true166, label %for.cond.backedge

land.lhs.true166:                                 ; preds = %for.body
  %arrayidx169 = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 1, i64 %indvars.iv.next
  %rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**
  %29 = load %struct.rtx_def** %rtx170, align 8, !tbaa !1
  %call171 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x.addr.0, %struct.rtx_def* %29)
  %tobool172 = icmp eq i32 %call171, 0
  br i1 %tobool172, label %for.cond.backedge, label %return

for.cond.backedge:                                ; preds = %land.lhs.true166, %for.body
  %30 = trunc i64 %indvars.iv.next to i32
  %cmp159 = icmp sgt i32 %30, 0
  br i1 %cmp159, label %for.body, label %return

sw.bb175:                                         ; preds = %if.end64, %if.end64, %if.end64
  %call176 = tail call i32 @reg_mentioned_p(%struct.rtx_def* %x.addr.0, %struct.rtx_def* %in)
  br label %return

sw.bb177:                                         ; preds = %if.end64
  %arrayidx180 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx180 to %struct.rtvec_def**
  %31 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %31, i64 0, i32 0
  %32 = load i32* %num_elem, align 4, !tbaa !6
  %cmp183289 = icmp sgt i32 %32, 0
  br i1 %cmp183289, label %for.body185.lr.ph, label %return

for.body185.lr.ph:                                ; preds = %sw.bb177
  %33 = sext i32 %32 to i64
  br label %for.body185

for.body185:                                      ; preds = %for.cond182.backedge.for.body185_crit_edge, %for.body185.lr.ph
  %34 = phi %struct.rtvec_def* [ %31, %for.body185.lr.ph ], [ %.pre, %for.cond182.backedge.for.body185_crit_edge ]
  %indvars.iv293 = phi i64 [ %33, %for.body185.lr.ph ], [ %indvars.iv.next294, %for.cond182.backedge.for.body185_crit_edge ]
  %indvars.iv.next294 = add nsw i64 %indvars.iv293, -1
  %arrayidx190 = getelementptr inbounds %struct.rtvec_def* %34, i64 0, i32 1, i64 %indvars.iv.next294
  %35 = load %struct.rtx_def** %arrayidx190, align 8, !tbaa !1
  %arrayidx192 = getelementptr inbounds %struct.rtx_def* %35, i64 0, i32 1, i64 0
  %rtx193 = bitcast %union.rtunion_def* %arrayidx192 to %struct.rtx_def**
  %36 = load %struct.rtx_def** %rtx193, align 8, !tbaa !1
  %cmp194 = icmp eq %struct.rtx_def* %36, null
  br i1 %cmp194, label %for.cond182.backedge, label %land.lhs.true196

land.lhs.true196:                                 ; preds = %for.body185
  %call206 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %36, %struct.rtx_def* %in)
  %tobool207 = icmp eq i32 %call206, 0
  br i1 %tobool207, label %for.cond182.backedge, label %return

for.cond182.backedge:                             ; preds = %land.lhs.true196, %for.body185
  %37 = trunc i64 %indvars.iv.next294 to i32
  %cmp183 = icmp sgt i32 %37, 0
  br i1 %cmp183, label %for.cond182.backedge.for.body185_crit_edge, label %return

for.cond182.backedge.for.body185_crit_edge:       ; preds = %for.cond182.backedge
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  br label %for.body185

sw.epilog:                                        ; preds = %if.end64
  tail call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 1459, i8* getelementptr inbounds ([24 x i8]* @__FUNCTION__.reg_overlap_mentioned_p, i64 0, i64 0)) #5
  unreachable

return:                                           ; preds = %land.lhs.true196, %for.cond182.backedge, %land.lhs.true166, %for.cond.backedge, %sw.bb177, %if.end148, %sw.bb142, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %lor.lhs.false31, %lor.lhs.false31, %lor.lhs.false31, %lor.lhs.false31, %lor.lhs.false31, %lor.lhs.false31, %lor.lhs.false31, %lor.lhs.false31, %sw.bb175, %cond.end138
  %retval.0 = phi i32 [ %call176, %sw.bb175 ], [ %call141, %cond.end138 ], [ 0, %lor.lhs.false31 ], [ 0, %lor.lhs.false31 ], [ 0, %lor.lhs.false31 ], [ 0, %lor.lhs.false31 ], [ 0, %lor.lhs.false31 ], [ 0, %lor.lhs.false31 ], [ 0, %lor.lhs.false31 ], [ 0, %lor.lhs.false31 ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 1, %sw.bb142 ], [ 0, %if.end148 ], [ 0, %sw.bb177 ], [ 1, %land.lhs.true166 ], [ 0, %for.cond.backedge ], [ 1, %land.lhs.true196 ], [ 0, %for.cond182.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @find_reg_fusage(%struct.rtx_def* nocapture readonly %insn, i32 %code, %struct.rtx_def* %datum) #1 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool = icmp eq %struct.rtx_def* %datum, null
  br i1 %tobool, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 1862, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.find_reg_fusage, i64 0, i64 0)) #5
  unreachable

if.end2:                                          ; preds = %if.end
  %1 = getelementptr inbounds %struct.rtx_def* %datum, i64 0, i32 0
  %bf.load3 = load i32* %1, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 61
  br i1 %cmp5, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.end2
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 7
  %link.0.in143 = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %link.0144 = load %struct.rtx_def** %link.0.in143, align 8
  %tobool7145 = icmp eq %struct.rtx_def* %link.0144, null
  br i1 %tobool7145, label %return, label %for.body

for.body:                                         ; preds = %if.then6, %for.inc
  %link.0146 = phi %struct.rtx_def* [ %link.0, %for.inc ], [ %link.0144, %if.then6 ]
  %fld8 = getelementptr inbounds %struct.rtx_def* %link.0146, i64 0, i32 1
  %rtx10 = bitcast [1 x %union.rtunion_def]* %fld8 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx10, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load11 = load i32* %3, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, %code
  br i1 %cmp13, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx19, align 8, !tbaa !1
  %call = tail call i32 @rtx_equal_p(%struct.rtx_def* %datum, %struct.rtx_def* %4) #4
  %tobool20 = icmp eq i32 %call, 0
  br i1 %tobool20, label %for.inc, label %return

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %arrayidx24 = getelementptr inbounds %struct.rtx_def* %link.0146, i64 0, i32 1, i64 1
  %link.0.in = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %link.0 = load %struct.rtx_def** %link.0.in, align 8
  %tobool7 = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool7, label %return, label %for.body

if.else:                                          ; preds = %if.end2
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %datum, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx27 to i32*
  %5 = load i32* %rtuint, align 4, !tbaa !9
  %cmp28 = icmp ult i32 %5, 53
  br i1 %cmp28, label %if.then29, label %return

if.then29:                                        ; preds = %if.else
  %6 = and i32 %5, -8
  %7 = icmp eq i32 %6, 8
  %.off = add i32 %5, -21
  %8 = icmp ult i32 %.off, 8
  %or.cond = or i1 %7, %8
  %.off129 = add i32 %5, -45
  %9 = icmp ult i32 %.off129, 8
  %or.cond135 = or i1 %or.cond, %9
  %.off130 = add i32 %5, -29
  %10 = icmp ult i32 %.off130, 8
  %or.cond137 = or i1 %or.cond135, %10
  %bf.lshr = lshr i32 %bf.load3, 16
  %bf.clear45 = and i32 %bf.lshr, 255
  br i1 %or.cond137, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then29
  %idxprom132 = zext i32 %bf.clear45 to i64
  %arrayidx46 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom132
  %11 = load i32* %arrayidx46, align 4, !tbaa !5
  %cmp47 = icmp eq i32 %11, 5
  br i1 %cmp47, label %cond.end85, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp53 = icmp eq i32 %11, 6
  %phitmp = select i1 %cmp53, i32 2, i32 1
  br label %cond.end85

cond.false:                                       ; preds = %if.then29
  switch i32 %bf.clear45, label %cond.false70 [
    i32 18, label %cond.true58
    i32 24, label %cond.true66
  ]

cond.true58:                                      ; preds = %cond.false
  %12 = load i32* @target_flags, align 4, !tbaa !9
  %and = lshr i32 %12, 25
  %13 = and i32 %and, 1
  %14 = xor i32 %13, 3
  br label %cond.end85

cond.true66:                                      ; preds = %cond.false
  %15 = load i32* @target_flags, align 4, !tbaa !9
  %and67 = lshr i32 %15, 24
  %16 = and i32 %and67, 2
  %17 = xor i32 %16, 6
  br label %cond.end85

cond.false70:                                     ; preds = %cond.false
  %idxprom74131 = zext i32 %bf.clear45 to i64
  %arrayidx75 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom74131
  %18 = load i8* %arrayidx75, align 1, !tbaa !5
  %conv = zext i8 %18 to i32
  %19 = load i32* @target_flags, align 4, !tbaa !9
  %and76 = lshr i32 %19, 23
  %20 = and i32 %and76, 4
  %21 = add i32 %20, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %21
  %div = sdiv i32 %sub, %21
  br label %cond.end85

cond.end85:                                       ; preds = %cond.true, %lor.rhs, %cond.true58, %cond.false70, %cond.true66
  %cond86 = phi i32 [ %14, %cond.true58 ], [ %17, %cond.true66 ], [ %div, %cond.false70 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ]
  %add87 = add i32 %cond86, %5
  %cmp89140 = icmp ult i32 %5, %add87
  br i1 %cmp89140, label %for.body91, label %return

for.cond88:                                       ; preds = %for.body91
  %cmp89 = icmp ult i32 %inc, %add87
  br i1 %cmp89, label %for.body91, label %return

for.body91:                                       ; preds = %cond.end85, %for.cond88
  %i.0141 = phi i32 [ %inc, %for.cond88 ], [ %5, %cond.end85 ]
  %call92 = tail call i32 @find_regno_fusage(%struct.rtx_def* %insn, i32 %code, i32 %i.0141)
  %tobool93 = icmp eq i32 %call92, 0
  %inc = add i32 %i.0141, 1
  br i1 %tobool93, label %for.cond88, label %return

return:                                           ; preds = %land.lhs.true, %for.inc, %for.body91, %for.cond88, %if.then6, %cond.end85, %if.else, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %if.else ], [ 0, %cond.end85 ], [ 0, %if.then6 ], [ 1, %for.body91 ], [ 0, %for.cond88 ], [ 1, %land.lhs.true ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @reg_referenced_p(%struct.rtx_def* %x, %struct.rtx_def* %body) #1 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %if.end178, %entry
  %body.tr = phi %struct.rtx_def* [ %body, %entry ], [ %35, %if.end178 ]
  %0 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %return [
    i32 47, label %sw.bb
    i32 41, label %sw.bb78
    i32 50, label %sw.bb93
    i32 48, label %sw.bb93
    i32 72, label %sw.bb93
    i32 52, label %sw.bb95
    i32 46, label %sw.bb100
    i32 42, label %sw.bb105
    i32 43, label %sw.bb105
    i32 39, label %sw.bb128
    i32 49, label %sw.bb151
    i32 38, label %sw.bb171
  ]

sw.bb:                                            ; preds = %tailrecurse
  %arrayidx = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %1)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %sw.bb
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx3, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load4 = load i32* %3, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  switch i32 %bf.clear5, label %land.lhs.true70 [
    i32 69, label %if.end77
    i32 59, label %if.end77
    i32 61, label %if.end77
    i32 63, label %land.lhs.true26
  ]

land.lhs.true26:                                  ; preds = %if.end
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx32, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load33 = load i32* %5, align 8
  %bf.clear34 = and i32 %bf.load33, 65535
  %cmp35 = icmp eq i32 %bf.clear34, 61
  br i1 %cmp35, label %land.lhs.true36, label %land.lhs.true70

land.lhs.true36:                                  ; preds = %land.lhs.true26
  %bf.lshr = lshr i32 %bf.load33, 16
  %bf.clear44 = and i32 %bf.lshr, 255
  %idxprom223 = zext i32 %bf.clear44 to i64
  %arrayidx45 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom223
  %6 = load i8* %arrayidx45, align 1, !tbaa !5
  %conv = zext i8 %6 to i32
  %7 = load i32* @target_flags, align 4, !tbaa !9
  %and = lshr i32 %7, 23
  %8 = and i32 %and, 4
  %9 = add i32 %8, 4
  %sub224 = or i32 %8, 3
  %add = add nsw i32 %sub224, %conv
  %div = sdiv i32 %add, %9
  %bf.lshr54 = lshr i32 %bf.load4, 16
  %bf.clear55 = and i32 %bf.lshr54, 255
  %idxprom56225 = zext i32 %bf.clear55 to i64
  %arrayidx57 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom56225
  %10 = load i8* %arrayidx57, align 1, !tbaa !5
  %conv58 = zext i8 %10 to i32
  %add63 = add nsw i32 %conv58, %sub224
  %div67 = sdiv i32 %add63, %9
  %cmp68 = icmp eq i32 %div, %div67
  br i1 %cmp68, label %if.end77, label %land.lhs.true70

land.lhs.true70:                                  ; preds = %if.end, %land.lhs.true36, %land.lhs.true26
  %call74 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %2)
  %tobool75 = icmp eq i32 %call74, 0
  br i1 %tobool75, label %if.end77, label %return

if.end77:                                         ; preds = %if.end, %if.end, %if.end, %land.lhs.true70, %land.lhs.true36
  br label %return

sw.bb78:                                          ; preds = %tailrecurse
  %arrayidx80 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1, i64 3
  %rtvec = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtvec_def**
  %11 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %11, i64 0, i32 0
  %12 = load i32* %num_elem, align 4, !tbaa !6
  %13 = sext i32 %12 to i64
  br label %for.cond

for.cond:                                         ; preds = %for.body, %sw.bb78
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ %13, %sw.bb78 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %14 = trunc i64 %indvars.iv to i32
  %cmp82 = icmp sgt i32 %14, 0
  br i1 %cmp82, label %for.body, label %return

for.body:                                         ; preds = %for.cond
  %15 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %arrayidx88 = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 1, i64 %indvars.iv.next
  %16 = load %struct.rtx_def** %arrayidx88, align 8, !tbaa !1
  %call89 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %16)
  %tobool90 = icmp eq i32 %call89, 0
  br i1 %tobool90, label %for.cond, label %return

sw.bb93:                                          ; preds = %tailrecurse, %tailrecurse, %tailrecurse
  %call94 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %body.tr)
  br label %return

sw.bb95:                                          ; preds = %tailrecurse
  %arrayidx97 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1, i64 0
  %rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx98, align 8, !tbaa !1
  %call99 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %17)
  br label %return

sw.bb100:                                         ; preds = %tailrecurse
  %arrayidx102 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1, i64 0
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx103, align 8, !tbaa !1
  %call104 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %18)
  br label %return

sw.bb105:                                         ; preds = %tailrecurse, %tailrecurse
  %arrayidx107 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1, i64 0
  %rtvec108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtvec_def**
  %19 = load %struct.rtvec_def** %rtvec108, align 8, !tbaa !1
  %num_elem109 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 0
  %20 = load i32* %num_elem109, align 4, !tbaa !6
  %21 = sext i32 %20 to i64
  br label %for.cond111

for.cond111:                                      ; preds = %for.body114, %sw.bb105
  %indvars.iv248 = phi i64 [ %indvars.iv.next249, %for.body114 ], [ %21, %sw.bb105 ]
  %indvars.iv.next249 = add nsw i64 %indvars.iv248, -1
  %22 = trunc i64 %indvars.iv248 to i32
  %cmp112 = icmp sgt i32 %22, 0
  br i1 %cmp112, label %for.body114, label %return

for.body114:                                      ; preds = %for.cond111
  %23 = load %struct.rtvec_def** %rtvec108, align 8, !tbaa !1
  %arrayidx120 = getelementptr inbounds %struct.rtvec_def* %23, i64 0, i32 1, i64 %indvars.iv.next249
  %24 = load %struct.rtx_def** %arrayidx120, align 8, !tbaa !1
  %call121 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %24)
  %tobool122 = icmp eq i32 %call121, 0
  br i1 %tobool122, label %for.cond111, label %return

sw.bb128:                                         ; preds = %tailrecurse
  %arrayidx130 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1, i64 0
  %rtvec131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtvec_def**
  %25 = load %struct.rtvec_def** %rtvec131, align 8, !tbaa !1
  %num_elem132 = getelementptr inbounds %struct.rtvec_def* %25, i64 0, i32 0
  %26 = load i32* %num_elem132, align 4, !tbaa !6
  %27 = sext i32 %26 to i64
  br label %for.cond134

for.cond134:                                      ; preds = %for.body137, %sw.bb128
  %indvars.iv250 = phi i64 [ %indvars.iv.next251, %for.body137 ], [ %27, %sw.bb128 ]
  %indvars.iv.next251 = add nsw i64 %indvars.iv250, -1
  %28 = trunc i64 %indvars.iv250 to i32
  %cmp135 = icmp sgt i32 %28, 0
  br i1 %cmp135, label %for.body137, label %return

for.body137:                                      ; preds = %for.cond134
  %29 = load %struct.rtvec_def** %rtvec131, align 8, !tbaa !1
  %arrayidx143 = getelementptr inbounds %struct.rtvec_def* %29, i64 0, i32 1, i64 %indvars.iv.next251
  %30 = load %struct.rtx_def** %arrayidx143, align 8, !tbaa !1
  %call144 = tail call i32 @reg_referenced_p(%struct.rtx_def* %x, %struct.rtx_def* %30)
  %tobool145 = icmp eq i32 %call144, 0
  br i1 %tobool145, label %for.cond134, label %return

sw.bb151:                                         ; preds = %tailrecurse
  %arrayidx153 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1, i64 0
  %rtx154 = bitcast %union.rtunion_def* %arrayidx153 to %struct.rtx_def**
  %31 = load %struct.rtx_def** %rtx154, align 8, !tbaa !1
  %32 = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 0
  %bf.load155 = load i32* %32, align 8
  %bf.clear156 = and i32 %bf.load155, 65535
  %cmp157 = icmp eq i32 %bf.clear156, 66
  br i1 %cmp157, label %if.then159, label %if.end170

if.then159:                                       ; preds = %sw.bb151
  %arrayidx164 = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 1, i64 0
  %rtx165 = bitcast %union.rtunion_def* %arrayidx164 to %struct.rtx_def**
  %33 = load %struct.rtx_def** %rtx165, align 8, !tbaa !1
  %call166 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %33)
  %tobool167 = icmp eq i32 %call166, 0
  br i1 %tobool167, label %if.end170, label %return

if.end170:                                        ; preds = %if.then159, %sw.bb151
  br label %return

sw.bb171:                                         ; preds = %tailrecurse
  %fld172 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1
  %rtx174 = bitcast [1 x %union.rtunion_def]* %fld172 to %struct.rtx_def**
  %34 = load %struct.rtx_def** %rtx174, align 8, !tbaa !1
  %call175 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %34)
  %tobool176 = icmp eq i32 %call175, 0
  br i1 %tobool176, label %if.end178, label %return

if.end178:                                        ; preds = %sw.bb171
  %arrayidx180 = getelementptr inbounds %struct.rtx_def* %body.tr, i64 0, i32 1, i64 1
  %rtx181 = bitcast %union.rtunion_def* %arrayidx180 to %struct.rtx_def**
  %35 = load %struct.rtx_def** %rtx181, align 8, !tbaa !1
  br label %tailrecurse

return:                                           ; preds = %tailrecurse, %sw.bb171, %for.cond134, %for.body137, %for.cond111, %for.body114, %for.cond, %for.body, %if.then159, %land.lhs.true70, %sw.bb, %if.end170, %sw.bb100, %sw.bb95, %sw.bb93, %if.end77
  %retval.0 = phi i32 [ 0, %if.end170 ], [ %call104, %sw.bb100 ], [ %call99, %sw.bb95 ], [ %call94, %sw.bb93 ], [ 0, %if.end77 ], [ 1, %sw.bb ], [ 1, %land.lhs.true70 ], [ 1, %if.then159 ], [ 0, %for.cond ], [ 1, %for.body ], [ 0, %for.cond111 ], [ 1, %for.body114 ], [ 0, %for.cond134 ], [ 1, %for.body137 ], [ 0, %tailrecurse ], [ 1, %sw.bb171 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @reg_referenced_between_p(%struct.rtx_def* %reg, %struct.rtx_def* readonly %from_insn, %struct.rtx_def* readnone %to_insn) #1 {
entry:
  %cmp = icmp eq %struct.rtx_def* %from_insn, %to_insn
  br i1 %cmp, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %insn.0.in.in29 = getelementptr inbounds %struct.rtx_def* %from_insn, i64 0, i32 1, i64 2
  %insn.0.in30 = bitcast %union.rtunion_def* %insn.0.in.in29 to %struct.rtx_def**
  %insn.031 = load %struct.rtx_def** %insn.0.in30, align 8
  %cmp132 = icmp eq %struct.rtx_def* %insn.031, %to_insn
  br i1 %cmp132, label %return, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.cond.backedge
  %insn.033 = phi %struct.rtx_def* [ %insn.0, %for.cond.backedge ], [ %insn.031, %for.cond.preheader ]
  %0 = getelementptr inbounds %struct.rtx_def* %insn.033, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom28 = zext i32 %bf.clear to i64
  %arrayidx2 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom28
  %1 = load i8* %arrayidx2, align 1, !tbaa !5
  %cmp3 = icmp eq i8 %1, 105
  br i1 %cmp3, label %land.lhs.true, label %for.cond.backedge

land.lhs.true:                                    ; preds = %for.body
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %insn.033, i64 0, i32 1, i64 3
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx7, align 8, !tbaa !1
  %call = tail call i32 @reg_referenced_p(%struct.rtx_def* %reg, %struct.rtx_def* %2)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true
  %bf.load8 = load i32* %0, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 34
  br i1 %cmp10, label %land.lhs.true12, label %for.cond.backedge

land.lhs.true12:                                  ; preds = %lor.lhs.false
  %call13 = tail call i32 @find_reg_fusage(%struct.rtx_def* %insn.033, i32 48, %struct.rtx_def* %reg)
  %tobool14 = icmp eq i32 %call13, 0
  br i1 %tobool14, label %for.cond.backedge, label %return

for.cond.backedge:                                ; preds = %land.lhs.true12, %for.body, %lor.lhs.false
  %insn.0.in.in = getelementptr inbounds %struct.rtx_def* %insn.033, i64 0, i32 1, i64 2
  %insn.0.in = bitcast %union.rtunion_def* %insn.0.in.in to %struct.rtx_def**
  %insn.0 = load %struct.rtx_def** %insn.0.in, align 8
  %cmp1 = icmp eq %struct.rtx_def* %insn.0, %to_insn
  br i1 %cmp1, label %return, label %for.body

return:                                           ; preds = %land.lhs.true12, %land.lhs.true, %for.cond.backedge, %for.cond.preheader, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %for.cond.preheader ], [ 1, %land.lhs.true12 ], [ 1, %land.lhs.true ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @reg_set_between_p(%struct.rtx_def* %reg, %struct.rtx_def* readonly %from_insn, %struct.rtx_def* readnone %to_insn) #1 {
entry:
  %data.i.i = alloca %struct.set_of_data, align 8
  %cmp = icmp eq %struct.rtx_def* %from_insn, %to_insn
  br i1 %cmp, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %arrayidx11.i = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx11.i to i32*
  %insn.0.in.in17 = getelementptr inbounds %struct.rtx_def* %from_insn, i64 0, i32 1, i64 2
  %insn.0.in18 = bitcast %union.rtunion_def* %insn.0.in.in17 to %struct.rtx_def**
  %insn.019 = load %struct.rtx_def** %insn.0.in18, align 8
  %cmp120 = icmp eq %struct.rtx_def* %insn.019, %to_insn
  br i1 %cmp120, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %0 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %1 = bitcast %struct.set_of_data* %data.i.i to i8*
  %found.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i, i64 0, i32 0
  %pat1.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %insn.021 = phi %struct.rtx_def* [ %insn.019, %for.body.lr.ph ], [ %insn.0, %for.cond.backedge ]
  %2 = getelementptr inbounds %struct.rtx_def* %insn.021, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom15 = zext i32 %bf.clear to i64
  %arrayidx2 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom15
  %3 = load i8* %arrayidx2, align 1, !tbaa !5
  %cmp3 = icmp eq i8 %3, 105
  br i1 %cmp3, label %land.lhs.true, label %for.cond.backedge

for.cond.backedge:                                ; preds = %for.body, %reg_set_p.exit
  %insn.0.in.in = getelementptr inbounds %struct.rtx_def* %insn.021, i64 0, i32 1, i64 2
  %insn.0.in = bitcast %union.rtunion_def* %insn.0.in.in to %struct.rtx_def**
  %insn.0 = load %struct.rtx_def** %insn.0.in, align 8
  %cmp1 = icmp eq %struct.rtx_def* %insn.0, %to_insn
  br i1 %cmp1, label %return, label %for.body

land.lhs.true:                                    ; preds = %for.body
  %cmp4.i = icmp eq i32 %bf.clear, 34
  br i1 %cmp4.i, label %land.lhs.true.i, label %if.end22.i

land.lhs.true.i:                                  ; preds = %land.lhs.true
  %bf.load6.i = load i32* %0, align 8
  %bf.clear7.i = and i32 %bf.load6.i, 65535
  switch i32 %bf.clear7.i, label %lor.lhs.false18.i [
    i32 61, label %land.lhs.true10.i
    i32 66, label %return
  ]

land.lhs.true10.i:                                ; preds = %land.lhs.true.i
  %4 = load i32* %rtuint.i, align 4, !tbaa !9
  %cmp12.i = icmp ult i32 %4, 53
  br i1 %cmp12.i, label %return, label %lor.lhs.false18.i

lor.lhs.false18.i:                                ; preds = %land.lhs.true10.i, %land.lhs.true.i
  %call.i = call i32 @find_reg_fusage(%struct.rtx_def* %insn.021, i32 49, %struct.rtx_def* %reg) #4
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %lor.lhs.false18.if.end22_crit_edge.i, label %return

lor.lhs.false18.if.end22_crit_edge.i:             ; preds = %lor.lhs.false18.i
  %bf.load.i.pre.i = load i32* %2, align 8
  br label %if.end22.i

if.end22.i:                                       ; preds = %lor.lhs.false18.if.end22_crit_edge.i, %land.lhs.true
  %bf.load.i.i = phi i32 [ %bf.load.i.pre.i, %lor.lhs.false18.if.end22_crit_edge.i ], [ %bf.load, %land.lhs.true ]
  call void @llvm.lifetime.start(i64 16, i8* %1) #4
  store %struct.rtx_def* null, %struct.rtx_def** %found.i.i, align 8, !tbaa !12
  store %struct.rtx_def* %reg, %struct.rtx_def** %pat1.i.i, align 8, !tbaa !14
  %bf.clear.i.i = and i32 %bf.load.i.i, 65535
  %idxprom6.i.i = zext i32 %bf.clear.i.i to i64
  %arrayidx.i.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom6.i.i
  %5 = load i8* %arrayidx.i.i, align 1, !tbaa !5
  %cmp.i.i = icmp eq i8 %5, 105
  br i1 %cmp.i.i, label %cond.true.i.i, label %reg_set_p.exit

cond.true.i.i:                                    ; preds = %if.end22.i
  %arrayidx3.i.i = getelementptr inbounds %struct.rtx_def* %insn.021, i64 0, i32 1, i64 3
  %rtx.i.i = bitcast %union.rtunion_def* %arrayidx3.i.i to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx.i.i, align 8, !tbaa !1
  br label %reg_set_p.exit

reg_set_p.exit:                                   ; preds = %if.end22.i, %cond.true.i.i
  %cond.i.i = phi %struct.rtx_def* [ %6, %cond.true.i.i ], [ %insn.021, %if.end22.i ]
  call void @note_stores(%struct.rtx_def* %cond.i.i, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @set_of_1, i8* %1) #4
  %7 = load %struct.rtx_def** %found.i.i, align 8, !tbaa !12
  call void @llvm.lifetime.end(i64 16, i8* %1) #4
  %cmp24.i = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp24.i, label %for.cond.backedge, label %return

return:                                           ; preds = %for.cond.backedge, %lor.lhs.false18.i, %land.lhs.true10.i, %land.lhs.true.i, %reg_set_p.exit, %for.cond.preheader, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %for.cond.preheader ], [ 0, %for.cond.backedge ], [ 1, %lor.lhs.false18.i ], [ 1, %land.lhs.true10.i ], [ 1, %land.lhs.true.i ], [ 1, %reg_set_p.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @reg_set_p(%struct.rtx_def* %reg, %struct.rtx_def* %insn) #1 {
entry:
  %data.i = alloca %struct.set_of_data, align 8
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom35 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom35
  %1 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp = icmp eq i8 %1, 105
  %cmp4 = icmp eq i32 %bf.clear, 34
  %or.cond = and i1 %cmp, %cmp4
  br i1 %or.cond, label %land.lhs.true, label %if.end22

land.lhs.true:                                    ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %bf.load6 = load i32* %2, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  switch i32 %bf.clear7, label %lor.lhs.false18 [
    i32 61, label %land.lhs.true10
    i32 66, label %return
  ]

land.lhs.true10:                                  ; preds = %land.lhs.true
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx11 to i32*
  %3 = load i32* %rtuint, align 4, !tbaa !9
  %cmp12 = icmp ult i32 %3, 53
  br i1 %cmp12, label %return, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %land.lhs.true, %land.lhs.true10
  %call = call i32 @find_reg_fusage(%struct.rtx_def* %insn, i32 49, %struct.rtx_def* %reg)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.lhs.false18.if.end22_crit_edge, label %return

lor.lhs.false18.if.end22_crit_edge:               ; preds = %lor.lhs.false18
  %bf.load.i.pre = load i32* %0, align 8
  br label %if.end22

if.end22:                                         ; preds = %lor.lhs.false18.if.end22_crit_edge, %entry
  %bf.load.i = phi i32 [ %bf.load.i.pre, %lor.lhs.false18.if.end22_crit_edge ], [ %bf.load, %entry ]
  %4 = bitcast %struct.set_of_data* %data.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #4
  %found.i = getelementptr inbounds %struct.set_of_data* %data.i, i64 0, i32 0
  store %struct.rtx_def* null, %struct.rtx_def** %found.i, align 8, !tbaa !12
  %pat1.i = getelementptr inbounds %struct.set_of_data* %data.i, i64 0, i32 1
  store %struct.rtx_def* %reg, %struct.rtx_def** %pat1.i, align 8, !tbaa !14
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom6.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom6.i
  %5 = load i8* %arrayidx.i, align 1, !tbaa !5
  %cmp.i = icmp eq i8 %5, 105
  br i1 %cmp.i, label %cond.true.i, label %set_of.exit

cond.true.i:                                      ; preds = %if.end22
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  br label %set_of.exit

set_of.exit:                                      ; preds = %if.end22, %cond.true.i
  %cond.i = phi %struct.rtx_def* [ %6, %cond.true.i ], [ %insn, %if.end22 ]
  call void @note_stores(%struct.rtx_def* %cond.i, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @set_of_1, i8* %4) #4
  %7 = load %struct.rtx_def** %found.i, align 8, !tbaa !12
  call void @llvm.lifetime.end(i64 16, i8* %4) #4
  %cmp24 = icmp ne %struct.rtx_def* %7, null
  %conv25 = zext i1 %cmp24 to i32
  br label %return

return:                                           ; preds = %land.lhs.true, %land.lhs.true10, %lor.lhs.false18, %set_of.exit
  %retval.0 = phi i32 [ %conv25, %set_of.exit ], [ 1, %lor.lhs.false18 ], [ 1, %land.lhs.true10 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @set_of(%struct.rtx_def* %pat, %struct.rtx_def* %insn) #1 {
entry:
  %data = alloca %struct.set_of_data, align 8
  %found = getelementptr inbounds %struct.set_of_data* %data, i64 0, i32 0
  store %struct.rtx_def* null, %struct.rtx_def** %found, align 8, !tbaa !12
  %pat1 = getelementptr inbounds %struct.set_of_data* %data, i64 0, i32 1
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat1, align 8, !tbaa !14
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom6 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom6
  %1 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %cond.true, label %cond.end

cond.true:                                        ; preds = %entry
  %arrayidx3 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.rtx_def* [ %2, %cond.true ], [ %insn, %entry ]
  %3 = bitcast %struct.set_of_data* %data to i8*
  call void @note_stores(%struct.rtx_def* %cond, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @set_of_1, i8* %3)
  %4 = load %struct.rtx_def** %found, align 8, !tbaa !12
  ret %struct.rtx_def* %4
}

; Function Attrs: nounwind uwtable
define i32 @regs_set_between_p(%struct.rtx_def* %x, %struct.rtx_def* readonly %start, %struct.rtx_def* readnone %end) #1 {
entry:
  %data.i.i.i = alloca %struct.set_of_data, align 8
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 58, label %return
    i32 68, label %return
    i32 67, label %return
    i32 59, label %return
    i32 69, label %return
    i32 61, label %sw.bb1
  ]

sw.bb1:                                           ; preds = %entry
  %cmp.i = icmp eq %struct.rtx_def* %start, %end
  br i1 %cmp.i, label %return, label %for.cond.preheader.i

for.cond.preheader.i:                             ; preds = %sw.bb1
  %arrayidx11.i.i = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint.i.i = bitcast %union.rtunion_def* %arrayidx11.i.i to i32*
  %insn.0.in.in17.i = getelementptr inbounds %struct.rtx_def* %start, i64 0, i32 1, i64 2
  %insn.0.in18.i = bitcast %union.rtunion_def* %insn.0.in.in17.i to %struct.rtx_def**
  %insn.019.i = load %struct.rtx_def** %insn.0.in18.i, align 8
  %cmp120.i = icmp eq %struct.rtx_def* %insn.019.i, %end
  br i1 %cmp120.i, label %return, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %1 = bitcast %struct.set_of_data* %data.i.i.i to i8*
  %found.i.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i.i, i64 0, i32 0
  %pat1.i.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i.i, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %for.cond.backedge.i, %for.body.lr.ph.i
  %insn.021.i = phi %struct.rtx_def* [ %insn.019.i, %for.body.lr.ph.i ], [ %insn.0.i, %for.cond.backedge.i ]
  %2 = getelementptr inbounds %struct.rtx_def* %insn.021.i, i64 0, i32 0
  %bf.load.i = load i32* %2, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom15.i = zext i32 %bf.clear.i to i64
  %arrayidx2.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom15.i
  %3 = load i8* %arrayidx2.i, align 1, !tbaa !5
  %cmp3.i = icmp eq i8 %3, 105
  br i1 %cmp3.i, label %land.lhs.true.i, label %for.cond.backedge.i

for.cond.backedge.i:                              ; preds = %reg_set_p.exit.i, %for.body.i
  %insn.0.in.in.i = getelementptr inbounds %struct.rtx_def* %insn.021.i, i64 0, i32 1, i64 2
  %insn.0.in.i = bitcast %union.rtunion_def* %insn.0.in.in.i to %struct.rtx_def**
  %insn.0.i = load %struct.rtx_def** %insn.0.in.i, align 8
  %cmp1.i = icmp eq %struct.rtx_def* %insn.0.i, %end
  br i1 %cmp1.i, label %return, label %for.body.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %cmp4.i.i = icmp eq i32 %bf.clear.i, 34
  br i1 %cmp4.i.i, label %land.lhs.true.i.i, label %if.end22.i.i

land.lhs.true.i.i:                                ; preds = %land.lhs.true.i
  %bf.load6.i.i = load i32* %0, align 8
  %bf.clear7.i.i = and i32 %bf.load6.i.i, 65535
  switch i32 %bf.clear7.i.i, label %lor.lhs.false18.i.i [
    i32 61, label %land.lhs.true10.i.i
    i32 66, label %return
  ]

land.lhs.true10.i.i:                              ; preds = %land.lhs.true.i.i
  %4 = load i32* %rtuint.i.i, align 4, !tbaa !9
  %cmp12.i.i = icmp ult i32 %4, 53
  br i1 %cmp12.i.i, label %return, label %lor.lhs.false18.i.i

lor.lhs.false18.i.i:                              ; preds = %land.lhs.true10.i.i, %land.lhs.true.i.i
  %call.i.i = call i32 @find_reg_fusage(%struct.rtx_def* %insn.021.i, i32 49, %struct.rtx_def* %x) #4
  %tobool.i.i = icmp eq i32 %call.i.i, 0
  br i1 %tobool.i.i, label %lor.lhs.false18.if.end22_crit_edge.i.i, label %return

lor.lhs.false18.if.end22_crit_edge.i.i:           ; preds = %lor.lhs.false18.i.i
  %bf.load.i.pre.i.i = load i32* %2, align 8
  br label %if.end22.i.i

if.end22.i.i:                                     ; preds = %lor.lhs.false18.if.end22_crit_edge.i.i, %land.lhs.true.i
  %bf.load.i.i.i = phi i32 [ %bf.load.i.pre.i.i, %lor.lhs.false18.if.end22_crit_edge.i.i ], [ %bf.load.i, %land.lhs.true.i ]
  call void @llvm.lifetime.start(i64 16, i8* %1) #4
  store %struct.rtx_def* null, %struct.rtx_def** %found.i.i.i, align 8, !tbaa !12
  store %struct.rtx_def* %x, %struct.rtx_def** %pat1.i.i.i, align 8, !tbaa !14
  %bf.clear.i.i.i = and i32 %bf.load.i.i.i, 65535
  %idxprom6.i.i.i = zext i32 %bf.clear.i.i.i to i64
  %arrayidx.i.i.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom6.i.i.i
  %5 = load i8* %arrayidx.i.i.i, align 1, !tbaa !5
  %cmp.i.i.i = icmp eq i8 %5, 105
  br i1 %cmp.i.i.i, label %cond.true.i.i.i, label %reg_set_p.exit.i

cond.true.i.i.i:                                  ; preds = %if.end22.i.i
  %arrayidx3.i.i.i = getelementptr inbounds %struct.rtx_def* %insn.021.i, i64 0, i32 1, i64 3
  %rtx.i.i.i = bitcast %union.rtunion_def* %arrayidx3.i.i.i to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx.i.i.i, align 8, !tbaa !1
  br label %reg_set_p.exit.i

reg_set_p.exit.i:                                 ; preds = %cond.true.i.i.i, %if.end22.i.i
  %cond.i.i.i = phi %struct.rtx_def* [ %6, %cond.true.i.i.i ], [ %insn.021.i, %if.end22.i.i ]
  call void @note_stores(%struct.rtx_def* %cond.i.i.i, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @set_of_1, i8* %1) #4
  %7 = load %struct.rtx_def** %found.i.i.i, align 8, !tbaa !12
  call void @llvm.lifetime.end(i64 16, i8* %1) #4
  %cmp24.i.i = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp24.i.i, label %for.cond.backedge.i, label %return

sw.epilog:                                        ; preds = %entry
  %idxprom60 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom60
  %8 = load i8** %arrayidx, align 8, !tbaa !1
  %arrayidx3 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom60
  %9 = load i8* %arrayidx3, align 1, !tbaa !5
  %cmp65 = icmp eq i8 %9, 0
  br i1 %cmp65, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %10 = zext i8 %9 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv68 = phi i64 [ %10, %for.body.lr.ph ], [ %indvars.iv.next69, %for.cond.backedge ]
  %indvars.iv.next69 = add nsw i64 %indvars.iv68, -1
  %arrayidx6 = getelementptr inbounds i8* %8, i64 %indvars.iv.next69
  %11 = load i8* %arrayidx6, align 1, !tbaa !5
  %cmp8 = icmp eq i8 %11, 101
  br i1 %cmp8, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next69
  %rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call12 = call i32 @regs_set_between_p(%struct.rtx_def* %12, %struct.rtx_def* %start, %struct.rtx_def* %end)
  %tobool = icmp eq i32 %call12, 0
  br i1 %tobool, label %if.elsethread-pre-split, label %return

if.elsethread-pre-split:                          ; preds = %land.lhs.true
  %.pr = load i8* %arrayidx6, align 1, !tbaa !5
  br label %if.else

if.else:                                          ; preds = %if.elsethread-pre-split, %for.body
  %13 = phi i8 [ %.pr, %if.elsethread-pre-split ], [ %11, %for.body ]
  %cmp16 = icmp eq i8 %13, 69
  br i1 %cmp16, label %if.then18, label %for.cond.backedge

for.cond.backedge:                                ; preds = %for.cond23, %if.else
  %14 = trunc i64 %indvars.iv.next69 to i32
  %cmp = icmp sgt i32 %14, 0
  br i1 %cmp, label %for.body, label %return

if.then18:                                        ; preds = %if.else
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next69
  %rtvec = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtvec_def**
  %15 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 0
  %16 = load i32* %num_elem, align 4, !tbaa !6
  %17 = sext i32 %16 to i64
  br label %for.cond23

for.cond23:                                       ; preds = %for.body26, %if.then18
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body26 ], [ %17, %if.then18 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %18 = trunc i64 %indvars.iv to i32
  %cmp24 = icmp sgt i32 %18, 0
  br i1 %cmp24, label %for.body26, label %for.cond.backedge

for.body26:                                       ; preds = %for.cond23
  %19 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %arrayidx32 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 1, i64 %indvars.iv.next
  %20 = load %struct.rtx_def** %arrayidx32, align 8, !tbaa !1
  %call33 = call i32 @regs_set_between_p(%struct.rtx_def* %20, %struct.rtx_def* %start, %struct.rtx_def* %end)
  %tobool34 = icmp eq i32 %call33, 0
  br i1 %tobool34, label %for.cond23, label %return

return:                                           ; preds = %reg_set_p.exit.i, %lor.lhs.false18.i.i, %land.lhs.true10.i.i, %land.lhs.true.i.i, %for.cond.backedge.i, %land.lhs.true, %for.cond.backedge, %for.body26, %sw.epilog, %for.cond.preheader.i, %sw.bb1, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %sw.bb1 ], [ 0, %for.cond.preheader.i ], [ 0, %sw.epilog ], [ 1, %for.body26 ], [ 1, %land.lhs.true ], [ 0, %for.cond.backedge ], [ 1, %reg_set_p.exit.i ], [ 1, %lor.lhs.false18.i.i ], [ 1, %land.lhs.true10.i.i ], [ 1, %land.lhs.true.i.i ], [ 0, %for.cond.backedge.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @modified_between_p(%struct.rtx_def* %x, %struct.rtx_def* readonly %start, %struct.rtx_def* readnone %end) #1 {
entry:
  %data.i.i.i = alloca %struct.set_of_data, align 8
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 58, label %return
    i32 68, label %return
    i32 67, label %return
    i32 59, label %sw.bb1
    i32 69, label %sw.bb1
    i32 66, label %sw.bb2
    i32 61, label %sw.bb5
  ]

sw.bb1:                                           ; preds = %entry, %entry
  br label %return

sw.bb2:                                           ; preds = %entry
  %bf.clear4 = and i32 %bf.load, 67108864
  %tobool = icmp eq i32 %bf.clear4, 0
  br i1 %tobool, label %return, label %sw.epilog

sw.bb5:                                           ; preds = %entry
  %cmp.i = icmp eq %struct.rtx_def* %start, %end
  br i1 %cmp.i, label %return, label %for.cond.preheader.i

for.cond.preheader.i:                             ; preds = %sw.bb5
  %arrayidx11.i.i = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint.i.i = bitcast %union.rtunion_def* %arrayidx11.i.i to i32*
  %insn.0.in.in17.i = getelementptr inbounds %struct.rtx_def* %start, i64 0, i32 1, i64 2
  %insn.0.in18.i = bitcast %union.rtunion_def* %insn.0.in.in17.i to %struct.rtx_def**
  %insn.019.i = load %struct.rtx_def** %insn.0.in18.i, align 8
  %cmp120.i = icmp eq %struct.rtx_def* %insn.019.i, %end
  br i1 %cmp120.i, label %return, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %1 = bitcast %struct.set_of_data* %data.i.i.i to i8*
  %found.i.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i.i, i64 0, i32 0
  %pat1.i.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i.i, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %for.cond.backedge.i, %for.body.lr.ph.i
  %insn.021.i = phi %struct.rtx_def* [ %insn.019.i, %for.body.lr.ph.i ], [ %insn.0.i, %for.cond.backedge.i ]
  %2 = getelementptr inbounds %struct.rtx_def* %insn.021.i, i64 0, i32 0
  %bf.load.i = load i32* %2, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom15.i = zext i32 %bf.clear.i to i64
  %arrayidx2.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom15.i
  %3 = load i8* %arrayidx2.i, align 1, !tbaa !5
  %cmp3.i = icmp eq i8 %3, 105
  br i1 %cmp3.i, label %land.lhs.true.i, label %for.cond.backedge.i

for.cond.backedge.i:                              ; preds = %reg_set_p.exit.i, %for.body.i
  %insn.0.in.in.i = getelementptr inbounds %struct.rtx_def* %insn.021.i, i64 0, i32 1, i64 2
  %insn.0.in.i = bitcast %union.rtunion_def* %insn.0.in.in.i to %struct.rtx_def**
  %insn.0.i = load %struct.rtx_def** %insn.0.in.i, align 8
  %cmp1.i = icmp eq %struct.rtx_def* %insn.0.i, %end
  br i1 %cmp1.i, label %return, label %for.body.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %cmp4.i.i = icmp eq i32 %bf.clear.i, 34
  br i1 %cmp4.i.i, label %land.lhs.true.i.i, label %if.end22.i.i

land.lhs.true.i.i:                                ; preds = %land.lhs.true.i
  %bf.load6.i.i = load i32* %0, align 8
  %bf.clear7.i.i = and i32 %bf.load6.i.i, 65535
  switch i32 %bf.clear7.i.i, label %lor.lhs.false18.i.i [
    i32 61, label %land.lhs.true10.i.i
    i32 66, label %return
  ]

land.lhs.true10.i.i:                              ; preds = %land.lhs.true.i.i
  %4 = load i32* %rtuint.i.i, align 4, !tbaa !9
  %cmp12.i.i = icmp ult i32 %4, 53
  br i1 %cmp12.i.i, label %return, label %lor.lhs.false18.i.i

lor.lhs.false18.i.i:                              ; preds = %land.lhs.true10.i.i, %land.lhs.true.i.i
  %call.i.i = call i32 @find_reg_fusage(%struct.rtx_def* %insn.021.i, i32 49, %struct.rtx_def* %x) #4
  %tobool.i.i = icmp eq i32 %call.i.i, 0
  br i1 %tobool.i.i, label %lor.lhs.false18.if.end22_crit_edge.i.i, label %return

lor.lhs.false18.if.end22_crit_edge.i.i:           ; preds = %lor.lhs.false18.i.i
  %bf.load.i.pre.i.i = load i32* %2, align 8
  br label %if.end22.i.i

if.end22.i.i:                                     ; preds = %lor.lhs.false18.if.end22_crit_edge.i.i, %land.lhs.true.i
  %bf.load.i.i.i = phi i32 [ %bf.load.i.pre.i.i, %lor.lhs.false18.if.end22_crit_edge.i.i ], [ %bf.load.i, %land.lhs.true.i ]
  call void @llvm.lifetime.start(i64 16, i8* %1) #4
  store %struct.rtx_def* null, %struct.rtx_def** %found.i.i.i, align 8, !tbaa !12
  store %struct.rtx_def* %x, %struct.rtx_def** %pat1.i.i.i, align 8, !tbaa !14
  %bf.clear.i.i.i = and i32 %bf.load.i.i.i, 65535
  %idxprom6.i.i.i = zext i32 %bf.clear.i.i.i to i64
  %arrayidx.i.i.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom6.i.i.i
  %5 = load i8* %arrayidx.i.i.i, align 1, !tbaa !5
  %cmp.i.i.i = icmp eq i8 %5, 105
  br i1 %cmp.i.i.i, label %cond.true.i.i.i, label %reg_set_p.exit.i

cond.true.i.i.i:                                  ; preds = %if.end22.i.i
  %arrayidx3.i.i.i = getelementptr inbounds %struct.rtx_def* %insn.021.i, i64 0, i32 1, i64 3
  %rtx.i.i.i = bitcast %union.rtunion_def* %arrayidx3.i.i.i to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx.i.i.i, align 8, !tbaa !1
  br label %reg_set_p.exit.i

reg_set_p.exit.i:                                 ; preds = %cond.true.i.i.i, %if.end22.i.i
  %cond.i.i.i = phi %struct.rtx_def* [ %6, %cond.true.i.i.i ], [ %insn.021.i, %if.end22.i.i ]
  call void @note_stores(%struct.rtx_def* %cond.i.i.i, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @set_of_1, i8* %1) #4
  %7 = load %struct.rtx_def** %found.i.i.i, align 8, !tbaa !12
  call void @llvm.lifetime.end(i64 16, i8* %1) #4
  %cmp24.i.i = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp24.i.i, label %for.cond.backedge.i, label %return

sw.epilog:                                        ; preds = %sw.bb2, %entry
  %idxprom68 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom68
  %8 = load i8** %arrayidx, align 8, !tbaa !1
  %arrayidx7 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom68
  %9 = load i8* %arrayidx7, align 1, !tbaa !5
  %cmp73 = icmp eq i8 %9, 0
  br i1 %cmp73, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %10 = zext i8 %9 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv76 = phi i64 [ %10, %for.body.lr.ph ], [ %indvars.iv.next77, %for.cond.backedge ]
  %indvars.iv.next77 = add nsw i64 %indvars.iv76, -1
  %arrayidx10 = getelementptr inbounds i8* %8, i64 %indvars.iv.next77
  %11 = load i8* %arrayidx10, align 1, !tbaa !5
  %cmp12 = icmp eq i8 %11, 101
  br i1 %cmp12, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next77
  %rtx = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call16 = call i32 @modified_between_p(%struct.rtx_def* %12, %struct.rtx_def* %start, %struct.rtx_def* %end)
  %tobool17 = icmp eq i32 %call16, 0
  br i1 %tobool17, label %if.elsethread-pre-split, label %return

if.elsethread-pre-split:                          ; preds = %land.lhs.true
  %.pr = load i8* %arrayidx10, align 1, !tbaa !5
  br label %if.else

if.else:                                          ; preds = %if.elsethread-pre-split, %for.body
  %13 = phi i8 [ %.pr, %if.elsethread-pre-split ], [ %11, %for.body ]
  %cmp22 = icmp eq i8 %13, 69
  br i1 %cmp22, label %if.then24, label %for.cond.backedge

for.cond.backedge:                                ; preds = %for.cond29, %if.else
  %14 = trunc i64 %indvars.iv.next77 to i32
  %cmp = icmp sgt i32 %14, 0
  br i1 %cmp, label %for.body, label %return

if.then24:                                        ; preds = %if.else
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next77
  %rtvec = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**
  %15 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 0
  %16 = load i32* %num_elem, align 4, !tbaa !6
  %17 = sext i32 %16 to i64
  br label %for.cond29

for.cond29:                                       ; preds = %for.body32, %if.then24
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body32 ], [ %17, %if.then24 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %18 = trunc i64 %indvars.iv to i32
  %cmp30 = icmp sgt i32 %18, 0
  br i1 %cmp30, label %for.body32, label %for.cond.backedge

for.body32:                                       ; preds = %for.cond29
  %19 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %arrayidx38 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 1, i64 %indvars.iv.next
  %20 = load %struct.rtx_def** %arrayidx38, align 8, !tbaa !1
  %call39 = call i32 @modified_between_p(%struct.rtx_def* %20, %struct.rtx_def* %start, %struct.rtx_def* %end)
  %tobool40 = icmp eq i32 %call39, 0
  br i1 %tobool40, label %for.cond29, label %return

return:                                           ; preds = %reg_set_p.exit.i, %lor.lhs.false18.i.i, %land.lhs.true10.i.i, %land.lhs.true.i.i, %for.cond.backedge.i, %land.lhs.true, %for.cond.backedge, %for.body32, %sw.epilog, %for.cond.preheader.i, %sw.bb5, %sw.bb2, %entry, %entry, %entry, %entry, %entry, %entry, %sw.bb1
  %retval.0 = phi i32 [ 1, %sw.bb1 ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 1, %sw.bb2 ], [ 0, %sw.bb5 ], [ 0, %for.cond.preheader.i ], [ 0, %sw.epilog ], [ 1, %for.body32 ], [ 1, %land.lhs.true ], [ 0, %for.cond.backedge ], [ 1, %reg_set_p.exit.i ], [ 1, %lor.lhs.false18.i.i ], [ 1, %land.lhs.true10.i.i ], [ 1, %land.lhs.true.i.i ], [ 0, %for.cond.backedge.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @modified_in_p(%struct.rtx_def* %x, %struct.rtx_def* %insn) #1 {
entry:
  %data.i.i = alloca %struct.set_of_data, align 8
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 58, label %return
    i32 68, label %return
    i32 67, label %return
    i32 59, label %sw.bb1
    i32 69, label %sw.bb1
    i32 66, label %sw.bb2
    i32 61, label %sw.bb5
  ]

sw.bb1:                                           ; preds = %entry, %entry
  br label %return

sw.bb2:                                           ; preds = %entry
  %bf.clear4 = and i32 %bf.load, 67108864
  %tobool = icmp eq i32 %bf.clear4, 0
  br i1 %tobool, label %return, label %sw.epilog

sw.bb5:                                           ; preds = %entry
  %1 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load.i = load i32* %1, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom35.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom35.i
  %2 = load i8* %arrayidx.i, align 1, !tbaa !5
  %cmp.i = icmp eq i8 %2, 105
  %cmp4.i = icmp eq i32 %bf.clear.i, 34
  %or.cond.i = and i1 %cmp.i, %cmp4.i
  br i1 %or.cond.i, label %land.lhs.true10.i, label %if.end22.i

land.lhs.true10.i:                                ; preds = %sw.bb5
  %arrayidx11.i = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx11.i to i32*
  %3 = load i32* %rtuint.i, align 4, !tbaa !9
  %cmp12.i = icmp ult i32 %3, 53
  br i1 %cmp12.i, label %return, label %lor.lhs.false18.i

lor.lhs.false18.i:                                ; preds = %land.lhs.true10.i
  %call.i = call i32 @find_reg_fusage(%struct.rtx_def* %insn, i32 49, %struct.rtx_def* %x) #4
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %lor.lhs.false18.if.end22_crit_edge.i, label %return

lor.lhs.false18.if.end22_crit_edge.i:             ; preds = %lor.lhs.false18.i
  %bf.load.i.pre.i = load i32* %1, align 8
  br label %if.end22.i

if.end22.i:                                       ; preds = %lor.lhs.false18.if.end22_crit_edge.i, %sw.bb5
  %bf.load.i.i = phi i32 [ %bf.load.i.pre.i, %lor.lhs.false18.if.end22_crit_edge.i ], [ %bf.load.i, %sw.bb5 ]
  %4 = bitcast %struct.set_of_data* %data.i.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %4) #4
  %found.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i, i64 0, i32 0
  store %struct.rtx_def* null, %struct.rtx_def** %found.i.i, align 8, !tbaa !12
  %pat1.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i, i64 0, i32 1
  store %struct.rtx_def* %x, %struct.rtx_def** %pat1.i.i, align 8, !tbaa !14
  %bf.clear.i.i = and i32 %bf.load.i.i, 65535
  %idxprom6.i.i = zext i32 %bf.clear.i.i to i64
  %arrayidx.i.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom6.i.i
  %5 = load i8* %arrayidx.i.i, align 1, !tbaa !5
  %cmp.i.i = icmp eq i8 %5, 105
  br i1 %cmp.i.i, label %cond.true.i.i, label %set_of.exit.i

cond.true.i.i:                                    ; preds = %if.end22.i
  %arrayidx3.i.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx.i.i = bitcast %union.rtunion_def* %arrayidx3.i.i to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx.i.i, align 8, !tbaa !1
  br label %set_of.exit.i

set_of.exit.i:                                    ; preds = %cond.true.i.i, %if.end22.i
  %cond.i.i = phi %struct.rtx_def* [ %6, %cond.true.i.i ], [ %insn, %if.end22.i ]
  call void @note_stores(%struct.rtx_def* %cond.i.i, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @set_of_1, i8* %4) #4
  %7 = load %struct.rtx_def** %found.i.i, align 8, !tbaa !12
  call void @llvm.lifetime.end(i64 16, i8* %4) #4
  %cmp24.i = icmp ne %struct.rtx_def* %7, null
  %conv25.i = zext i1 %cmp24.i to i32
  br label %return

sw.epilog:                                        ; preds = %sw.bb2, %entry
  %idxprom66 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom66
  %8 = load i8** %arrayidx, align 8, !tbaa !1
  %arrayidx7 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom66
  %9 = load i8* %arrayidx7, align 1, !tbaa !5
  %cmp69 = icmp eq i8 %9, 0
  br i1 %cmp69, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %10 = zext i8 %9 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv72 = phi i64 [ %10, %for.body.lr.ph ], [ %indvars.iv.next73, %for.cond.backedge ]
  %indvars.iv.next73 = add nsw i64 %indvars.iv72, -1
  %arrayidx10 = getelementptr inbounds i8* %8, i64 %indvars.iv.next73
  %11 = load i8* %arrayidx10, align 1, !tbaa !5
  %cmp12 = icmp eq i8 %11, 101
  br i1 %cmp12, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next73
  %rtx = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call16 = call i32 @modified_in_p(%struct.rtx_def* %12, %struct.rtx_def* %insn)
  %tobool17 = icmp eq i32 %call16, 0
  br i1 %tobool17, label %if.elsethread-pre-split, label %return

if.elsethread-pre-split:                          ; preds = %land.lhs.true
  %.pr = load i8* %arrayidx10, align 1, !tbaa !5
  br label %if.else

if.else:                                          ; preds = %if.elsethread-pre-split, %for.body
  %13 = phi i8 [ %.pr, %if.elsethread-pre-split ], [ %11, %for.body ]
  %cmp22 = icmp eq i8 %13, 69
  br i1 %cmp22, label %if.then24, label %for.cond.backedge

for.cond.backedge:                                ; preds = %for.cond29, %if.else
  %14 = trunc i64 %indvars.iv.next73 to i32
  %cmp = icmp sgt i32 %14, 0
  br i1 %cmp, label %for.body, label %return

if.then24:                                        ; preds = %if.else
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next73
  %rtvec = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**
  %15 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 0
  %16 = load i32* %num_elem, align 4, !tbaa !6
  %17 = sext i32 %16 to i64
  br label %for.cond29

for.cond29:                                       ; preds = %for.body32, %if.then24
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body32 ], [ %17, %if.then24 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %18 = trunc i64 %indvars.iv to i32
  %cmp30 = icmp sgt i32 %18, 0
  br i1 %cmp30, label %for.body32, label %for.cond.backedge

for.body32:                                       ; preds = %for.cond29
  %19 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %arrayidx38 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 1, i64 %indvars.iv.next
  %20 = load %struct.rtx_def** %arrayidx38, align 8, !tbaa !1
  %call39 = call i32 @modified_in_p(%struct.rtx_def* %20, %struct.rtx_def* %insn)
  %tobool40 = icmp eq i32 %call39, 0
  br i1 %tobool40, label %for.cond29, label %return

return:                                           ; preds = %land.lhs.true, %for.cond.backedge, %for.body32, %sw.epilog, %set_of.exit.i, %lor.lhs.false18.i, %land.lhs.true10.i, %sw.bb2, %entry, %entry, %entry, %entry, %entry, %entry, %sw.bb1
  %retval.0 = phi i32 [ 1, %sw.bb1 ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 1, %sw.bb2 ], [ %conv25.i, %set_of.exit.i ], [ 1, %lor.lhs.false18.i ], [ 1, %land.lhs.true10.i ], [ 0, %sw.epilog ], [ 1, %for.body32 ], [ 1, %land.lhs.true ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @insn_dependent_p(%struct.rtx_def* nocapture readonly %x, %struct.rtx_def* nocapture readonly %y) #1 {
entry:
  %tmp = alloca %struct.rtx_def*, align 8
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom31 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom31
  %1 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 0
  %bf.load2 = load i32* %2, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %idxprom432 = zext i32 %bf.clear3 to i64
  %arrayidx5 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom432
  %3 = load i8* %arrayidx5, align 1, !tbaa !5
  %cmp7 = icmp eq i8 %3, 105
  br i1 %cmp7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 988, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.insn_dependent_p, i64 0, i64 0)) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  store %struct.rtx_def* %4, %struct.rtx_def** %tmp, align 8, !tbaa !1
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 3
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx12, align 8, !tbaa !1
  %6 = bitcast %struct.rtx_def** %tmp to i8*
  call void @note_stores(%struct.rtx_def* %5, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @insn_dependent_p_1, i8* %6)
  %7 = load %struct.rtx_def** %tmp, align 8, !tbaa !1
  %cmp13 = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp13, label %return, label %if.end16

if.end16:                                         ; preds = %if.end
  %8 = load %struct.rtx_def** %rtx12, align 8, !tbaa !1
  store %struct.rtx_def* %8, %struct.rtx_def** %tmp, align 8, !tbaa !1
  %9 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  call void @note_stores(%struct.rtx_def* %9, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @insn_dependent_p_1, i8* %6)
  %10 = load %struct.rtx_def** %tmp, align 8, !tbaa !1
  %cmp23 = icmp eq %struct.rtx_def* %10, null
  %. = zext i1 %cmp23 to i32
  br label %return

return:                                           ; preds = %if.end16, %if.end
  %retval.0 = phi i32 [ 1, %if.end ], [ %., %if.end16 ]
  ret i32 %retval.0
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #3

; Function Attrs: nounwind uwtable
define void @note_stores(%struct.rtx_def* %x, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* nocapture %fun, i8* %data) #1 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 38
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load1.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %bf.load1 = phi i32 [ %bf.load1.pre, %if.then ], [ %bf.load, %entry ]
  %x.addr.0 = phi %struct.rtx_def* [ %1, %if.then ], [ %x, %entry ]
  %bf.clear2 = and i32 %bf.load1, 65535
  switch i32 %bf.clear2, label %if.end91 [
    i32 47, label %while.cond
    i32 49, label %while.cond
    i32 39, label %if.then72
  ]

while.cond:                                       ; preds = %while.cond, %while.cond, %while.cond, %lor.lhs.false27, %lor.lhs.false27, %lor.lhs.false27, %land.lhs.true, %lor.lhs.false20, %if.end, %if.end
  %x.addr.0.pn = phi %struct.rtx_def* [ %x.addr.0, %if.end ], [ %x.addr.0, %if.end ], [ %dest.0, %lor.lhs.false20 ], [ %dest.0, %land.lhs.true ], [ %dest.0, %lor.lhs.false27 ], [ %dest.0, %lor.lhs.false27 ], [ %dest.0, %lor.lhs.false27 ], [ %dest.0, %while.cond ], [ %dest.0, %while.cond ], [ %dest.0, %while.cond ]
  %dest.0.in.in = getelementptr inbounds %struct.rtx_def* %x.addr.0.pn, i64 0, i32 1, i64 0
  %dest.0.in = bitcast %union.rtunion_def* %dest.0.in.in to %struct.rtx_def**
  %dest.0 = load %struct.rtx_def** %dest.0.in, align 8
  %2 = getelementptr inbounds %struct.rtx_def* %dest.0, i64 0, i32 0
  %bf.load11 = load i32* %2, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  switch i32 %bf.clear12, label %if.else [
    i32 63, label %land.lhs.true
    i32 133, label %while.cond
    i32 132, label %while.cond
    i32 64, label %while.cond
    i32 39, label %if.then44
  ]

land.lhs.true:                                    ; preds = %while.cond
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %dest.0, i64 0, i32 1, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx16, align 8, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load17 = load i32* %4, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 61
  br i1 %cmp19, label %lor.lhs.false20, label %while.cond

lor.lhs.false20:                                  ; preds = %land.lhs.true
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx25 to i32*
  %5 = load i32* %rtuint, align 4, !tbaa !9
  %cmp26 = icmp ugt i32 %5, 52
  br i1 %cmp26, label %while.cond, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %lor.lhs.false20
  switch i32 %bf.clear12, label %if.else [
    i32 133, label %while.cond
    i32 132, label %while.cond
    i32 64, label %while.cond
    i32 39, label %if.then44
  ]

if.then44:                                        ; preds = %while.cond, %lor.lhs.false27
  %arrayidx46 = getelementptr inbounds %struct.rtx_def* %dest.0, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 0
  %7 = load i32* %num_elem, align 4, !tbaa !6
  %cmp47126 = icmp sgt i32 %7, 0
  br i1 %cmp47126, label %for.body.lr.ph, label %if.end91

for.body.lr.ph:                                   ; preds = %if.then44
  %8 = sext i32 %7 to i64
  br label %for.body

for.body:                                         ; preds = %for.cond.backedge.for.body_crit_edge, %for.body.lr.ph
  %9 = phi %struct.rtvec_def* [ %6, %for.body.lr.ph ], [ %.pre135, %for.cond.backedge.for.body_crit_edge ]
  %indvars.iv = phi i64 [ %8, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.backedge.for.body_crit_edge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx51 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 %indvars.iv.next
  %10 = load %struct.rtx_def** %arrayidx51, align 8, !tbaa !1
  %arrayidx53 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 0
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx54, align 8, !tbaa !1
  %cmp55 = icmp eq %struct.rtx_def* %11, null
  br i1 %cmp55, label %for.cond.backedge, label %if.then56

for.cond.backedge:                                ; preds = %for.body, %if.then56
  %12 = trunc i64 %indvars.iv.next to i32
  %cmp47 = icmp sgt i32 %12, 0
  br i1 %cmp47, label %for.cond.backedge.for.body_crit_edge, label %if.end91

for.cond.backedge.for.body_crit_edge:             ; preds = %for.cond.backedge
  %.pre135 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  br label %for.body

if.then56:                                        ; preds = %for.body
  tail call void %fun(%struct.rtx_def* %11, %struct.rtx_def* %x.addr.0, i8* %data) #4
  br label %for.cond.backedge

if.else:                                          ; preds = %while.cond, %lor.lhs.false27
  tail call void %fun(%struct.rtx_def* %dest.0, %struct.rtx_def* %x.addr.0, i8* %data) #4
  br label %if.end91

if.then72:                                        ; preds = %if.end
  %arrayidx74 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtvec75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtvec_def**
  %13 = load %struct.rtvec_def** %rtvec75, align 8, !tbaa !1
  %num_elem76 = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 0
  %14 = load i32* %num_elem76, align 4, !tbaa !6
  %cmp79129 = icmp sgt i32 %14, 0
  br i1 %cmp79129, label %for.body80.lr.ph, label %if.end91

for.body80.lr.ph:                                 ; preds = %if.then72
  %15 = sext i32 %14 to i64
  br label %for.body80

for.body80:                                       ; preds = %for.body80.for.body80_crit_edge, %for.body80.lr.ph
  %16 = phi %struct.rtvec_def* [ %13, %for.body80.lr.ph ], [ %.pre, %for.body80.for.body80_crit_edge ]
  %indvars.iv132 = phi i64 [ %15, %for.body80.lr.ph ], [ %indvars.iv.next133, %for.body80.for.body80_crit_edge ]
  %indvars.iv.next133 = add nsw i64 %indvars.iv132, -1
  %arrayidx86 = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 1, i64 %indvars.iv.next133
  %17 = load %struct.rtx_def** %arrayidx86, align 8, !tbaa !1
  tail call void @note_stores(%struct.rtx_def* %17, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* %fun, i8* %data)
  %18 = trunc i64 %indvars.iv.next133 to i32
  %cmp79 = icmp sgt i32 %18, 0
  br i1 %cmp79, label %for.body80.for.body80_crit_edge, label %if.end91

for.body80.for.body80_crit_edge:                  ; preds = %for.body80
  %.pre = load %struct.rtvec_def** %rtvec75, align 8, !tbaa !1
  br label %for.body80

if.end91:                                         ; preds = %for.body80, %for.cond.backedge, %if.then72, %if.then44, %if.end, %if.else
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @insn_dependent_p_1(%struct.rtx_def* %x, %struct.rtx_def* nocapture readnone %pat, i8* nocapture %data) #1 {
entry:
  %0 = bitcast i8* %data to %struct.rtx_def**
  %1 = load %struct.rtx_def** %0, align 8, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %call = tail call i32 @reg_mentioned_p(%struct.rtx_def* %x, %struct.rtx_def* %1)
  %tobool1 = icmp eq i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %0, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %land.lhs.true, %entry, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @set_of_1(%struct.rtx_def* %x, %struct.rtx_def* %pat, i8* nocapture %data1) #1 {
entry:
  %pat1 = getelementptr inbounds i8* %data1, i64 8
  %0 = bitcast i8* %pat1 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %0, align 8, !tbaa !14
  %call = tail call i32 @rtx_equal_p(%struct.rtx_def* %x, %struct.rtx_def* %1) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %3 = load %struct.rtx_def** %0, align 8, !tbaa !14
  %call3 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %3, %struct.rtx_def* %x)
  %tobool4 = icmp eq i32 %call3, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  %found = bitcast i8* %data1 to %struct.rtx_def**
  store %struct.rtx_def* %pat, %struct.rtx_def** %found, align 8, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false, %if.then
  ret void
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @find_reg_note(%struct.rtx_def* nocapture readonly %insn, i32 %kind, %struct.rtx_def* readnone %datum) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom25 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom25
  %1 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %link.0.in26 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %link.027 = load %struct.rtx_def** %link.0.in26, align 8
  %tobool28 = icmp eq %struct.rtx_def* %link.027, null
  br i1 %tobool28, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %cmp7 = icmp eq %struct.rtx_def* %datum, null
  br i1 %cmp7, label %for.body.us, label %for.body

for.body.us:                                      ; preds = %for.body.lr.ph, %for.inc.us
  %link.029.us = phi %struct.rtx_def* [ %link.0.us, %for.inc.us ], [ %link.027, %for.body.lr.ph ]
  %2 = getelementptr inbounds %struct.rtx_def* %link.029.us, i64 0, i32 0
  %bf.load3.us = load i32* %2, align 8
  %bf.lshr.us = lshr i32 %bf.load3.us, 16
  %bf.clear4.us = and i32 %bf.lshr.us, 255
  %cmp5.us = icmp eq i32 %bf.clear4.us, %kind
  br i1 %cmp5.us, label %return, label %for.inc.us

for.inc.us:                                       ; preds = %for.body.us
  %arrayidx17.us = getelementptr inbounds %struct.rtx_def* %link.029.us, i64 0, i32 1, i64 1
  %link.0.in.us = bitcast %union.rtunion_def* %arrayidx17.us to %struct.rtx_def**
  %link.0.us = load %struct.rtx_def** %link.0.in.us, align 8
  %tobool.us = icmp eq %struct.rtx_def* %link.0.us, null
  br i1 %tobool.us, label %return, label %for.body.us

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %link.029 = phi %struct.rtx_def* [ %link.0, %for.inc ], [ %link.027, %for.body.lr.ph ]
  %3 = getelementptr inbounds %struct.rtx_def* %link.029, i64 0, i32 0
  %bf.load3 = load i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load3, 16
  %bf.clear4 = and i32 %bf.lshr, 255
  %cmp5 = icmp eq i32 %bf.clear4, %kind
  br i1 %cmp5, label %lor.lhs.false, label %for.inc

lor.lhs.false:                                    ; preds = %for.body
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %link.029, i64 0, i32 1, i64 0
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx11, align 8, !tbaa !1
  %cmp12 = icmp eq %struct.rtx_def* %4, %datum
  br i1 %cmp12, label %return, label %for.inc

for.inc:                                          ; preds = %for.body, %lor.lhs.false
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %link.029, i64 0, i32 1, i64 1
  %link.0.in = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %link.0 = load %struct.rtx_def** %link.0.in, align 8
  %tobool = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool, label %return, label %for.body

return:                                           ; preds = %lor.lhs.false, %for.inc, %for.body.us, %for.inc.us, %if.end, %entry
  %retval.0 = phi %struct.rtx_def* [ null, %entry ], [ null, %if.end ], [ %link.029.us, %for.body.us ], [ null, %for.inc.us ], [ %link.029, %lor.lhs.false ], [ null, %for.inc ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @side_effects_p(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 58, label %return
    i32 55, label %return
    i32 56, label %return
    i32 69, label %return
    i32 59, label %return
    i32 61, label %return
    i32 62, label %return
    i32 40, label %return
    i32 44, label %return
    i32 45, label %return
    i32 49, label %sw.bb1
    i32 97, label %sw.bb4
    i32 96, label %sw.bb4
    i32 99, label %sw.bb4
    i32 98, label %sw.bb4
    i32 100, label %sw.bb4
    i32 101, label %sw.bb4
    i32 50, label %sw.bb4
    i32 43, label %sw.bb4
    i32 66, label %sw.bb5
    i32 41, label %sw.bb5
  ]

sw.bb1:                                           ; preds = %entry
  %bf.clear3 = and i32 %bf.load, 16711680
  %cmp = icmp ne i32 %bf.clear3, 0
  %conv = zext i1 %cmp to i32
  br label %return

sw.bb4:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %return

sw.bb5:                                           ; preds = %entry, %entry
  %bf.clear8 = and i32 %bf.load, 134217728
  %tobool = icmp eq i32 %bf.clear8, 0
  br i1 %tobool, label %sw.epilog, label %return

sw.epilog:                                        ; preds = %sw.bb5, %entry
  %idxprom67 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom67
  %1 = load i8** %arrayidx, align 8, !tbaa !1
  %arrayidx10 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom67
  %2 = load i8* %arrayidx10, align 1, !tbaa !5
  %cmp1273 = icmp eq i8 %2, 0
  br i1 %cmp1273, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %3 = zext i8 %2 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv76 = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv.next77, %for.cond.backedge ]
  %indvars.iv.next77 = add nsw i64 %indvars.iv76, -1
  %arrayidx15 = getelementptr inbounds i8* %1, i64 %indvars.iv.next77
  %4 = load i8* %arrayidx15, align 1, !tbaa !5
  switch i8 %4, label %for.cond.backedge [
    i8 101, label %if.then19
    i8 69, label %for.cond31.preheader
  ]

for.cond.backedge:                                ; preds = %for.cond31, %for.cond31.preheader, %for.body, %if.then19
  %5 = trunc i64 %indvars.iv.next77 to i32
  %cmp12 = icmp sgt i32 %5, 0
  br i1 %cmp12, label %for.body, label %return

for.cond31.preheader:                             ; preds = %for.body
  %arrayidx34 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next77
  %rtvec = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem69 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 0
  %7 = load i32* %num_elem69, align 4, !tbaa !6
  %cmp3570 = icmp sgt i32 %7, 0
  br i1 %cmp3570, label %for.body37, label %for.cond.backedge

if.then19:                                        ; preds = %for.body
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next77
  %rtx = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @side_effects_p(%struct.rtx_def* %8)
  %tobool22 = icmp eq i32 %call, 0
  br i1 %tobool22, label %for.cond.backedge, label %return

for.cond31:                                       ; preds = %for.body37
  %9 = trunc i64 %indvars.iv.next to i32
  %cmp35 = icmp slt i32 %9, %7
  br i1 %cmp35, label %for.body37, label %for.cond.backedge

for.body37:                                       ; preds = %for.cond31.preheader, %for.cond31
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond31 ], [ 0, %for.cond31.preheader ]
  %arrayidx43 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 1, i64 %indvars.iv
  %10 = load %struct.rtx_def** %arrayidx43, align 8, !tbaa !1
  %call44 = tail call i32 @side_effects_p(%struct.rtx_def* %10)
  %tobool45 = icmp eq i32 %call44, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45, label %for.cond31, label %return

return:                                           ; preds = %if.then19, %for.cond.backedge, %for.body37, %sw.epilog, %sw.bb5, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.bb4, %sw.bb1
  %retval.0 = phi i32 [ 1, %sw.bb4 ], [ %conv, %sw.bb1 ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 1, %sw.bb5 ], [ 0, %sw.epilog ], [ 1, %for.body37 ], [ 1, %if.then19 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @multiple_sets(%struct.rtx_def* nocapture readonly %insn) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom37 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom37
  %1 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load3 = load i32* %3, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 39
  br i1 %cmp5, label %for.cond.preheader, label %return

for.cond.preheader:                               ; preds = %if.end
  %arrayidx1238 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtvec39 = bitcast %union.rtunion_def* %arrayidx1238 to %struct.rtvec_def**
  %4 = load %struct.rtvec_def** %rtvec39, align 8, !tbaa !1
  %num_elem40 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 0
  %5 = load i32* %num_elem40, align 4, !tbaa !6
  %cmp1341 = icmp sgt i32 %5, 0
  br i1 %cmp1341, label %for.body, label %return

for.body:                                         ; preds = %for.cond.preheader, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.cond.preheader ]
  %found.042 = phi i32 [ %found.1, %for.inc ], [ 0, %for.cond.preheader ]
  %arrayidx22 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 1, i64 %indvars.iv
  %6 = load %struct.rtx_def** %arrayidx22, align 8, !tbaa !1
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load23 = load i32* %7, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 47
  br i1 %cmp25, label %if.then27, label %for.inc

if.then27:                                        ; preds = %for.body
  %tobool = icmp eq i32 %found.042, 0
  br i1 %tobool, label %for.inc, label %return

for.inc:                                          ; preds = %if.then27, %for.body
  %found.1 = phi i32 [ %found.042, %for.body ], [ 1, %if.then27 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %8 = trunc i64 %indvars.iv.next to i32
  %cmp13 = icmp slt i32 %8, %5
  br i1 %cmp13, label %for.body, label %return

return:                                           ; preds = %if.then27, %for.inc, %for.cond.preheader, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %if.end ], [ 0, %for.cond.preheader ], [ 1, %if.then27 ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @set_noop_p(%struct.rtx_def* nocapture readonly %set) #1 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %set, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %set, i64 0, i32 1, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx3, align 8, !tbaa !1
  %call = tail call i32 @side_effects_p(%struct.rtx_def* %0)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %entry
  %call4 = tail call i32 @side_effects_p(%struct.rtx_def* %1)
  %tobool5 = icmp eq i32 %call4, 0
  br i1 %tobool5, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end
  %3 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load6 = load i32* %3, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 66
  br i1 %cmp8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %land.lhs.true
  %call10 = tail call i32 @rtx_equal_p(%struct.rtx_def* %1, %struct.rtx_def* %0) #4
  br label %return

if.end11:                                         ; preds = %land.lhs.true, %if.end
  %4 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !1
  %cmp12 = icmp eq %struct.rtx_def* %1, %4
  %cmp14 = icmp eq %struct.rtx_def* %0, %4
  %or.cond = and i1 %cmp12, %cmp14
  br i1 %or.cond, label %return, label %if.end16

if.end16:                                         ; preds = %if.end11
  switch i32 %bf.clear, label %if.end42 [
    i32 132, label %if.then24
    i32 133, label %if.then24
    i32 64, label %if.then38
  ]

if.then24:                                        ; preds = %if.end16, %if.end16
  %fld25 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1
  %rtx27 = bitcast [1 x %union.rtunion_def]* %fld25 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx27, align 8, !tbaa !1
  %call28 = tail call i32 @rtx_equal_p(%struct.rtx_def* %5, %struct.rtx_def* %0) #4
  %tobool29 = icmp eq i32 %call28, 0
  br i1 %tobool29, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then24
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 2
  %rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx32, align 8, !tbaa !1
  %7 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %cmp33 = icmp eq %struct.rtx_def* %6, %7
  br label %land.end

land.end:                                         ; preds = %if.then24, %land.rhs
  %8 = phi i1 [ false, %if.then24 ], [ %cmp33, %land.rhs ]
  %land.ext = zext i1 %8 to i32
  br label %return

if.then38:                                        ; preds = %if.end16
  %arrayidx40 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx41, align 8, !tbaa !1
  br label %if.end42

if.end42:                                         ; preds = %if.end16, %if.then38
  %dst.0 = phi %struct.rtx_def* [ %9, %if.then38 ], [ %1, %if.end16 ]
  %10 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load43 = load i32* %10, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 63
  br i1 %cmp45, label %land.lhs.true46, label %if.end65

land.lhs.true46:                                  ; preds = %if.end42
  %11 = getelementptr inbounds %struct.rtx_def* %dst.0, i64 0, i32 0
  %bf.load47 = load i32* %11, align 8
  %bf.clear48 = and i32 %bf.load47, 65535
  %cmp49 = icmp eq i32 %bf.clear48, 63
  br i1 %cmp49, label %if.then50, label %if.end65

if.then50:                                        ; preds = %land.lhs.true46
  %arrayidx52 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx52 to i32*
  %12 = load i32* %rtuint, align 4, !tbaa !9
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %dst.0, i64 0, i32 1, i64 1
  %rtuint55 = bitcast %union.rtunion_def* %arrayidx54 to i32*
  %13 = load i32* %rtuint55, align 4, !tbaa !9
  %cmp56 = icmp eq i32 %12, %13
  br i1 %cmp56, label %if.end58, label %return

if.end58:                                         ; preds = %if.then50
  %arrayidx60 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx61, align 8, !tbaa !1
  %arrayidx63 = getelementptr inbounds %struct.rtx_def* %dst.0, i64 0, i32 1, i64 0
  %rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx64, align 8, !tbaa !1
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 0
  %bf.load66.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.end58, %land.lhs.true46, %if.end42
  %bf.load66 = phi i32 [ %bf.load66.pre, %if.end58 ], [ %bf.load43, %land.lhs.true46 ], [ %bf.load43, %if.end42 ]
  %src.0 = phi %struct.rtx_def* [ %14, %if.end58 ], [ %0, %land.lhs.true46 ], [ %0, %if.end42 ]
  %dst.1 = phi %struct.rtx_def* [ %15, %if.end58 ], [ %dst.0, %land.lhs.true46 ], [ %dst.0, %if.end42 ]
  %bf.clear67 = and i32 %bf.load66, 65535
  %cmp68 = icmp eq i32 %bf.clear67, 61
  br i1 %cmp68, label %land.lhs.true69, label %land.end81

land.lhs.true69:                                  ; preds = %if.end65
  %16 = getelementptr inbounds %struct.rtx_def* %dst.1, i64 0, i32 0
  %bf.load70 = load i32* %16, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  %cmp72 = icmp eq i32 %bf.clear71, 61
  br i1 %cmp72, label %land.rhs73, label %land.end81

land.rhs73:                                       ; preds = %land.lhs.true69
  %arrayidx75 = getelementptr inbounds %struct.rtx_def* %src.0, i64 0, i32 1, i64 0
  %rtuint76 = bitcast %union.rtunion_def* %arrayidx75 to i32*
  %17 = load i32* %rtuint76, align 4, !tbaa !9
  %arrayidx78 = getelementptr inbounds %struct.rtx_def* %dst.1, i64 0, i32 1, i64 0
  %rtuint79 = bitcast %union.rtunion_def* %arrayidx78 to i32*
  %18 = load i32* %rtuint79, align 4, !tbaa !9
  %cmp80 = icmp eq i32 %17, %18
  br label %land.end81

land.end81:                                       ; preds = %land.rhs73, %land.lhs.true69, %if.end65
  %19 = phi i1 [ false, %land.lhs.true69 ], [ false, %if.end65 ], [ %cmp80, %land.rhs73 ]
  %land.ext82 = zext i1 %19 to i32
  br label %return

return:                                           ; preds = %if.then50, %if.end11, %entry, %lor.lhs.false, %land.end81, %land.end, %if.then9
  %retval.0 = phi i32 [ %call10, %if.then9 ], [ %land.ext, %land.end ], [ %land.ext82, %land.end81 ], [ 0, %lor.lhs.false ], [ 0, %entry ], [ 1, %if.end11 ], [ 0, %if.then50 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @noop_move_p(%struct.rtx_def* nocapture readonly %insn) #1 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %1 = load i32* %rtint, align 4, !tbaa !9
  %cmp = icmp eq i32 %1, 2147483647
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load.i = load i32* %2, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom25.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom25.i
  %3 = load i8* %arrayidx.i, align 1, !tbaa !5
  %cmp.i = icmp eq i8 %3, 105
  br i1 %cmp.i, label %if.end.i, label %if.end8

if.end.i:                                         ; preds = %if.end
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %link.0.in26.i = bitcast %union.rtunion_def* %arrayidx2.i to %struct.rtx_def**
  %link.027.i = load %struct.rtx_def** %link.0.in26.i, align 8
  %tobool28.i = icmp eq %struct.rtx_def* %link.027.i, null
  br i1 %tobool28.i, label %if.end.i63, label %for.body.us.i

for.body.us.i:                                    ; preds = %if.end.i, %for.inc.us.i
  %link.029.us.i = phi %struct.rtx_def* [ %link.0.us.i, %for.inc.us.i ], [ %link.027.i, %if.end.i ]
  %4 = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 0
  %bf.load3.us.i = load i32* %4, align 8
  %bf.clear4.us.i = and i32 %bf.load3.us.i, 16711680
  %cmp5.us.i = icmp eq i32 %bf.clear4.us.i, 262144
  br i1 %cmp5.us.i, label %return, label %for.inc.us.i

for.inc.us.i:                                     ; preds = %for.body.us.i
  %arrayidx17.us.i = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 1, i64 1
  %link.0.in.us.i = bitcast %union.rtunion_def* %arrayidx17.us.i to %struct.rtx_def**
  %link.0.us.i = load %struct.rtx_def** %link.0.in.us.i, align 8
  %tobool.us.i = icmp eq %struct.rtx_def* %link.0.us.i, null
  br i1 %tobool.us.i, label %if.end4, label %for.body.us.i

if.end4:                                          ; preds = %for.inc.us.i
  br i1 %cmp.i, label %if.end.i63, label %if.end8

if.end.i63:                                       ; preds = %if.end.i, %if.end4
  %arrayidx2.i59 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %link.0.in26.i60 = bitcast %union.rtunion_def* %arrayidx2.i59 to %struct.rtx_def**
  %link.027.i61 = load %struct.rtx_def** %link.0.in26.i60, align 8
  %tobool28.i62 = icmp eq %struct.rtx_def* %link.027.i61, null
  br i1 %tobool28.i62, label %if.end8, label %for.body.us.i70

for.body.us.i70:                                  ; preds = %if.end.i63, %for.inc.us.i75
  %link.029.us.i65 = phi %struct.rtx_def* [ %link.0.us.i73, %for.inc.us.i75 ], [ %link.027.i61, %if.end.i63 ]
  %5 = getelementptr inbounds %struct.rtx_def* %link.029.us.i65, i64 0, i32 0
  %bf.load3.us.i66 = load i32* %5, align 8
  %bf.clear4.us.i68 = and i32 %bf.load3.us.i66, 16711680
  %cmp5.us.i69 = icmp eq i32 %bf.clear4.us.i68, 393216
  br i1 %cmp5.us.i69, label %return, label %for.inc.us.i75

for.inc.us.i75:                                   ; preds = %for.body.us.i70
  %arrayidx17.us.i71 = getelementptr inbounds %struct.rtx_def* %link.029.us.i65, i64 0, i32 1, i64 1
  %link.0.in.us.i72 = bitcast %union.rtunion_def* %arrayidx17.us.i71 to %struct.rtx_def**
  %link.0.us.i73 = load %struct.rtx_def** %link.0.in.us.i72, align 8
  %tobool.us.i74 = icmp eq %struct.rtx_def* %link.0.us.i73, null
  br i1 %tobool.us.i74, label %if.end8, label %for.body.us.i70

if.end8:                                          ; preds = %for.inc.us.i75, %if.end, %if.end4, %if.end.i63
  %6 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp9 = icmp eq i32 %bf.clear, 47
  br i1 %cmp9, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.end8
  %call10 = tail call i32 @set_noop_p(%struct.rtx_def* %0)
  %tobool11 = icmp eq i32 %call10, 0
  br i1 %tobool11, label %land.lhs.true.if.end13_crit_edge, label %return

land.lhs.true.if.end13_crit_edge:                 ; preds = %land.lhs.true
  %bf.load14.pre = load i32* %6, align 8
  br label %if.end13

if.end13:                                         ; preds = %land.lhs.true.if.end13_crit_edge, %if.end8
  %bf.load14 = phi i32 [ %bf.load14.pre, %land.lhs.true.if.end13_crit_edge ], [ %bf.load, %if.end8 ]
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 39
  br i1 %cmp16, label %for.cond.preheader, label %return

for.cond.preheader:                               ; preds = %if.end13
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem86 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %8 = load i32* %num_elem86, align 4, !tbaa !6
  %cmp2087 = icmp sgt i32 %8, 0
  br i1 %cmp2087, label %for.body, label %return

for.body:                                         ; preds = %for.cond.preheader, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.cond.preheader ]
  %9 = phi %struct.rtvec_def* [ %12, %for.inc ], [ %7, %for.cond.preheader ]
  %arrayidx24 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 %indvars.iv
  %10 = load %struct.rtx_def** %arrayidx24, align 8, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load25 = load i32* %11, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  switch i32 %bf.clear26, label %return [
    i32 48, label %for.inc
    i32 49, label %for.inc
    i32 47, label %lor.lhs.false36
  ]

lor.lhs.false36:                                  ; preds = %for.body
  %call37 = tail call i32 @set_noop_p(%struct.rtx_def* %10)
  %tobool38 = icmp eq i32 %call37, 0
  br i1 %tobool38, label %return, label %lor.lhs.false36.for.inc_crit_edge

lor.lhs.false36.for.inc_crit_edge:                ; preds = %lor.lhs.false36
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  br label %for.inc

for.inc:                                          ; preds = %lor.lhs.false36.for.inc_crit_edge, %for.body, %for.body
  %12 = phi %struct.rtvec_def* [ %.pre, %lor.lhs.false36.for.inc_crit_edge ], [ %9, %for.body ], [ %9, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %12, i64 0, i32 0
  %13 = load i32* %num_elem, align 4, !tbaa !6
  %14 = trunc i64 %indvars.iv.next to i32
  %cmp20 = icmp slt i32 %14, %13
  br i1 %cmp20, label %for.body, label %return

return:                                           ; preds = %for.body.us.i, %for.body.us.i70, %for.body, %lor.lhs.false36, %for.inc, %for.cond.preheader, %if.end13, %land.lhs.true, %entry
  %retval.0 = phi i32 [ 1, %entry ], [ 1, %land.lhs.true ], [ 0, %if.end13 ], [ 1, %for.cond.preheader ], [ 0, %for.body ], [ 0, %lor.lhs.false36 ], [ 1, %for.inc ], [ 0, %for.body.us.i70 ], [ 0, %for.body.us.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @refers_to_regno_p(i32 %regno, i32 %endregno, %struct.rtx_def* readonly %x, %struct.rtx_def** readnone %loc) #1 {
entry:
  %cmp495 = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp495, label %return, label %if.end

if.end:                                           ; preds = %entry, %repeat.backedge
  %x.addr.0496 = phi %struct.rtx_def* [ %x.addr.0.be, %repeat.backedge ], [ %x, %entry ]
  %0 = getelementptr inbounds %struct.rtx_def* %x.addr.0496, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 61, label %sw.bb
    i32 63, label %sw.bb76
    i32 49, label %sw.bb191
    i32 47, label %sw.bb191
  ]

sw.bb:                                            ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x.addr.0496, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !9
  %cmp1 = icmp eq i32 %1, 7
  %cmp2 = icmp eq i32 %1, 16
  %or.cond = or i1 %cmp1, %cmp2
  %cmp4 = icmp eq i32 %1, 20
  %or.cond351 = or i1 %or.cond, %cmp4
  %cmp5 = icmp ugt i32 %regno, 52
  %or.cond352 = and i1 %or.cond351, %cmp5
  %cmp7 = icmp ult i32 %regno, 58
  %or.cond353 = and i1 %or.cond352, %cmp7
  br i1 %or.cond353, label %return, label %if.end9

if.end9:                                          ; preds = %sw.bb
  %cmp10 = icmp ult i32 %1, %endregno
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end9
  %cmp11 = icmp ult i32 %1, 53
  br i1 %cmp11, label %cond.true, label %cond.end71

cond.true:                                        ; preds = %land.rhs
  %2 = and i32 %1, -8
  %3 = icmp eq i32 %2, 8
  %.off = add i32 %1, -21
  %4 = icmp ult i32 %.off, 8
  %or.cond463 = or i1 %3, %4
  %.off457 = add i32 %1, -45
  %5 = icmp ult i32 %.off457, 8
  %or.cond465 = or i1 %or.cond463, %5
  %.off458 = add i32 %1, -29
  %6 = icmp ult i32 %.off458, 8
  %or.cond467 = or i1 %or.cond465, %6
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear29 = and i32 %bf.lshr, 255
  br i1 %or.cond467, label %cond.true27, label %cond.false

cond.true27:                                      ; preds = %cond.true
  %idxprom460 = zext i32 %bf.clear29 to i64
  %arrayidx30 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom460
  %7 = load i32* %arrayidx30, align 4, !tbaa !5
  %cmp31 = icmp eq i32 %7, 5
  br i1 %cmp31, label %cond.end71, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true27
  %cmp37 = icmp eq i32 %7, 6
  %phitmp461 = select i1 %cmp37, i32 2, i32 1
  br label %cond.end71

cond.false:                                       ; preds = %cond.true
  switch i32 %bf.clear29, label %cond.false53 [
    i32 18, label %cond.true42
    i32 24, label %cond.true49
  ]

cond.true42:                                      ; preds = %cond.false
  %8 = load i32* @target_flags, align 4, !tbaa !9
  %and = lshr i32 %8, 25
  %9 = and i32 %and, 1
  %10 = xor i32 %9, 3
  br label %cond.end71

cond.true49:                                      ; preds = %cond.false
  %11 = load i32* @target_flags, align 4, !tbaa !9
  %and50 = lshr i32 %11, 24
  %12 = and i32 %and50, 2
  %13 = xor i32 %12, 6
  br label %cond.end71

cond.false53:                                     ; preds = %cond.false
  %idxprom57459 = zext i32 %bf.clear29 to i64
  %arrayidx58 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom57459
  %14 = load i8* %arrayidx58, align 1, !tbaa !5
  %conv = zext i8 %14 to i32
  %15 = load i32* @target_flags, align 4, !tbaa !9
  %and59 = lshr i32 %15, 23
  %16 = and i32 %and59, 4
  %17 = add i32 %16, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %17
  %div = sdiv i32 %sub, %17
  br label %cond.end71

cond.end71:                                       ; preds = %cond.true27, %lor.rhs, %land.rhs, %cond.true49, %cond.false53, %cond.true42
  %cond72 = phi i32 [ %10, %cond.true42 ], [ %13, %cond.true49 ], [ %div, %cond.false53 ], [ 1, %land.rhs ], [ 2, %cond.true27 ], [ %phitmp461, %lor.rhs ]
  %add73 = add i32 %cond72, %1
  %cmp74 = icmp ugt i32 %add73, %regno
  br label %land.end

land.end:                                         ; preds = %cond.end71, %if.end9
  %18 = phi i1 [ false, %if.end9 ], [ %cmp74, %cond.end71 ]
  %land.ext = zext i1 %18 to i32
  br label %return

sw.bb76:                                          ; preds = %if.end
  %arrayidx78 = getelementptr inbounds %struct.rtx_def* %x.addr.0496, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %20 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 0
  %bf.load79 = load i32* %20, align 8
  %bf.clear80 = and i32 %bf.load79, 65535
  %cmp81 = icmp eq i32 %bf.clear80, 61
  br i1 %cmp81, label %land.lhs.true83, label %sw.epilog

land.lhs.true83:                                  ; preds = %sw.bb76
  %arrayidx88 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 0
  %rtuint89 = bitcast %union.rtunion_def* %arrayidx88 to i32*
  %21 = load i32* %rtuint89, align 4, !tbaa !9
  %cmp90 = icmp ult i32 %21, 53
  br i1 %cmp90, label %if.then92, label %sw.epilog

if.then92:                                        ; preds = %land.lhs.true83
  %bf.lshr.i = lshr i32 %bf.load79, 16
  %bf.clear.i = and i32 %bf.lshr.i, 255
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %x.addr.0496, i64 0, i32 1, i64 1
  %rtuint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  %22 = load i32* %rtuint5.i, align 4, !tbaa !9
  %bf.lshr7.i = lshr i32 %bf.load, 16
  %bf.clear8.i = and i32 %bf.lshr7.i, 255
  %call.i = tail call i32 @subreg_regno_offset(i32 %21, i32 %bf.clear.i, i32 %22, i32 %bf.clear8.i) #4
  %add.i = add i32 %call.i, %21
  %cmp93 = icmp ult i32 %add.i, 53
  br i1 %cmp93, label %cond.true95, label %cond.end180

cond.true95:                                      ; preds = %if.then92
  %23 = and i32 %regno, -8
  %24 = icmp eq i32 %23, 8
  %regno.off = add i32 %regno, -21
  %25 = icmp ult i32 %regno.off, 8
  %or.cond469 = or i1 %24, %25
  %regno.off453 = add i32 %regno, -45
  %26 = icmp ult i32 %regno.off453, 8
  %or.cond471 = or i1 %or.cond469, %26
  %regno.off454 = add i32 %regno, -29
  %27 = icmp ult i32 %regno.off454, 8
  %or.cond473 = or i1 %or.cond471, %27
  %bf.load120 = load i32* %0, align 8
  %bf.lshr121 = lshr i32 %bf.load120, 16
  %bf.clear122 = and i32 %bf.lshr121, 255
  br i1 %or.cond473, label %cond.true119, label %cond.false137

cond.true119:                                     ; preds = %cond.true95
  %idxprom123456 = zext i32 %bf.clear122 to i64
  %arrayidx124 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom123456
  %28 = load i32* %arrayidx124, align 4, !tbaa !5
  %cmp125 = icmp eq i32 %28, 5
  br i1 %cmp125, label %cond.end180, label %lor.rhs127

lor.rhs127:                                       ; preds = %cond.true119
  %cmp133 = icmp eq i32 %28, 6
  %phitmp = select i1 %cmp133, i32 2, i32 1
  br label %cond.end180

cond.false137:                                    ; preds = %cond.true95
  switch i32 %bf.clear122, label %cond.false157 [
    i32 18, label %cond.true143
    i32 24, label %cond.true153
  ]

cond.true143:                                     ; preds = %cond.false137
  %29 = load i32* @target_flags, align 4, !tbaa !9
  %and144 = lshr i32 %29, 25
  %30 = and i32 %and144, 1
  %31 = xor i32 %30, 3
  br label %cond.end180

cond.true153:                                     ; preds = %cond.false137
  %32 = load i32* @target_flags, align 4, !tbaa !9
  %and154 = lshr i32 %32, 24
  %33 = and i32 %and154, 2
  %34 = xor i32 %33, 6
  br label %cond.end180

cond.false157:                                    ; preds = %cond.false137
  %idxprom161455 = zext i32 %bf.clear122 to i64
  %arrayidx162 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom161455
  %35 = load i8* %arrayidx162, align 1, !tbaa !5
  %conv163 = zext i8 %35 to i32
  %36 = load i32* @target_flags, align 4, !tbaa !9
  %and164 = lshr i32 %36, 23
  %37 = and i32 %and164, 4
  %38 = add i32 %37, 4
  %add167 = add i32 %conv163, -1
  %sub168 = add i32 %add167, %38
  %div172 = sdiv i32 %sub168, %38
  br label %cond.end180

cond.end180:                                      ; preds = %cond.true119, %lor.rhs127, %if.then92, %cond.true153, %cond.false157, %cond.true143
  %cond181 = phi i32 [ %31, %cond.true143 ], [ %34, %cond.true153 ], [ %div172, %cond.false157 ], [ 1, %if.then92 ], [ 2, %cond.true119 ], [ %phitmp, %lor.rhs127 ]
  %cmp183 = icmp ult i32 %add.i, %endregno
  br i1 %cmp183, label %land.rhs185, label %land.end188

land.rhs185:                                      ; preds = %cond.end180
  %add182 = add i32 %cond181, %add.i
  %cmp186 = icmp ugt i32 %add182, %regno
  br label %land.end188

land.end188:                                      ; preds = %land.rhs185, %cond.end180
  %39 = phi i1 [ false, %cond.end180 ], [ %cmp186, %land.rhs185 ]
  %land.ext189 = zext i1 %39 to i32
  br label %return

sw.bb191:                                         ; preds = %if.end, %if.end
  %fld192 = getelementptr inbounds %struct.rtx_def* %x.addr.0496, i64 0, i32 1
  %rtx194 = bitcast [1 x %union.rtunion_def]* %fld192 to %struct.rtx_def**
  %cmp195 = icmp eq %struct.rtx_def** %rtx194, %loc
  br i1 %cmp195, label %if.end261, label %land.lhs.true197

land.lhs.true197:                                 ; preds = %sw.bb191
  %40 = load %struct.rtx_def** %rtx194, align 8, !tbaa !1
  %41 = getelementptr inbounds %struct.rtx_def* %40, i64 0, i32 0
  %bf.load201 = load i32* %41, align 8
  %bf.clear202 = and i32 %bf.load201, 65535
  %cmp203 = icmp eq i32 %bf.clear202, 63
  br i1 %cmp203, label %land.lhs.true205, label %lor.lhs.false246

land.lhs.true205:                                 ; preds = %land.lhs.true197
  %arrayidx210 = getelementptr inbounds %struct.rtx_def* %40, i64 0, i32 1, i64 0
  %rtx211 = bitcast %union.rtunion_def* %arrayidx210 to %struct.rtx_def**
  %cmp212 = icmp eq %struct.rtx_def** %rtx211, %loc
  br i1 %cmp212, label %lor.lhs.false246, label %land.lhs.true214

land.lhs.true214:                                 ; preds = %land.lhs.true205
  %42 = load %struct.rtx_def** %rtx211, align 8, !tbaa !1
  %43 = getelementptr inbounds %struct.rtx_def* %42, i64 0, i32 0
  %bf.load221 = load i32* %43, align 8
  %bf.clear222 = and i32 %bf.load221, 65535
  %cmp223 = icmp eq i32 %bf.clear222, 61
  br i1 %cmp223, label %land.lhs.true225, label %lor.lhs.false246

land.lhs.true225:                                 ; preds = %land.lhs.true214
  %arrayidx233 = getelementptr inbounds %struct.rtx_def* %42, i64 0, i32 1, i64 0
  %rtuint234 = bitcast %union.rtunion_def* %arrayidx233 to i32*
  %44 = load i32* %rtuint234, align 4, !tbaa !9
  %cmp235 = icmp ugt i32 %44, 52
  br i1 %cmp235, label %land.lhs.true237, label %lor.lhs.false246

land.lhs.true237:                                 ; preds = %land.lhs.true225
  %call244 = tail call i32 @refers_to_regno_p(i32 %regno, i32 %endregno, %struct.rtx_def* %42, %struct.rtx_def** %loc)
  %tobool245 = icmp eq i32 %call244, 0
  br i1 %tobool245, label %land.lhs.true237.lor.lhs.false246_crit_edge, label %return

land.lhs.true237.lor.lhs.false246_crit_edge:      ; preds = %land.lhs.true237
  %.pre534 = load %struct.rtx_def** %rtx194, align 8, !tbaa !1
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %.pre534, i64 0, i32 0
  %bf.load250.pre = load i32* %.phi.trans.insert, align 8
  br label %lor.lhs.false246

lor.lhs.false246:                                 ; preds = %land.lhs.true237.lor.lhs.false246_crit_edge, %land.lhs.true205, %land.lhs.true225, %land.lhs.true214, %land.lhs.true197
  %bf.load250 = phi i32 [ %bf.load250.pre, %land.lhs.true237.lor.lhs.false246_crit_edge ], [ %bf.load201, %land.lhs.true205 ], [ %bf.load201, %land.lhs.true225 ], [ %bf.load201, %land.lhs.true214 ], [ %bf.load201, %land.lhs.true197 ]
  %45 = phi %struct.rtx_def* [ %.pre534, %land.lhs.true237.lor.lhs.false246_crit_edge ], [ %40, %land.lhs.true205 ], [ %40, %land.lhs.true225 ], [ %40, %land.lhs.true214 ], [ %40, %land.lhs.true197 ]
  %bf.clear251 = and i32 %bf.load250, 65535
  %cmp252 = icmp eq i32 %bf.clear251, 61
  br i1 %cmp252, label %if.end261, label %land.lhs.true254

land.lhs.true254:                                 ; preds = %lor.lhs.false246
  %call258 = tail call i32 @refers_to_regno_p(i32 %regno, i32 %endregno, %struct.rtx_def* %45, %struct.rtx_def** %loc)
  %tobool259 = icmp eq i32 %call258, 0
  br i1 %tobool259, label %if.end261, label %return

if.end261:                                        ; preds = %land.lhs.true254, %lor.lhs.false246, %sw.bb191
  %cmp262 = icmp eq i32 %bf.clear, 49
  br i1 %cmp262, label %return, label %lor.lhs.false264

lor.lhs.false264:                                 ; preds = %if.end261
  %arrayidx266 = getelementptr inbounds %struct.rtx_def* %x.addr.0496, i64 0, i32 1, i64 1
  %rtx267 = bitcast %union.rtunion_def* %arrayidx266 to %struct.rtx_def**
  %cmp268 = icmp eq %struct.rtx_def** %rtx267, %loc
  br i1 %cmp268, label %return, label %repeat.backedge

repeat.backedge:                                  ; preds = %lor.lhs.false264, %if.then298
  %x.addr.0.be.in = phi %struct.rtx_def** [ %rtx301, %if.then298 ], [ %rtx267, %lor.lhs.false264 ]
  %x.addr.0.be = load %struct.rtx_def** %x.addr.0.be.in, align 8
  %cmp = icmp eq %struct.rtx_def* %x.addr.0.be, null
  br i1 %cmp, label %return, label %if.end

sw.epilog:                                        ; preds = %if.end, %sw.bb76, %land.lhs.true83
  %idxprom275452 = zext i32 %bf.clear to i64
  %arrayidx276 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom275452
  %46 = load i8** %arrayidx276, align 8, !tbaa !1
  %arrayidx278 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom275452
  %47 = load i8* %arrayidx278, align 1, !tbaa !5
  %cmp281491 = icmp eq i8 %47, 0
  br i1 %cmp281491, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %48 = zext i8 %47 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv532 = phi i64 [ %48, %for.body.lr.ph ], [ %indvars.iv.next533, %for.cond.backedge ]
  %indvars.iv.next533 = add nsw i64 %indvars.iv532, -1
  %arrayidx284 = getelementptr inbounds i8* %46, i64 %indvars.iv.next533
  %49 = load i8* %arrayidx284, align 1, !tbaa !5
  switch i8 %49, label %for.cond.backedge [
    i8 101, label %land.lhs.true288
    i8 69, label %if.then317
  ]

land.lhs.true288:                                 ; preds = %for.body
  %arrayidx291 = getelementptr inbounds %struct.rtx_def* %x.addr.0496, i64 0, i32 1, i64 %indvars.iv.next533
  %rtx292 = bitcast %union.rtunion_def* %arrayidx291 to %struct.rtx_def**
  %cmp293 = icmp eq %struct.rtx_def** %rtx292, %loc
  br i1 %cmp293, label %for.cond.backedge, label %if.then295

if.then295:                                       ; preds = %land.lhs.true288
  %50 = trunc i64 %indvars.iv.next533 to i32
  %cmp296 = icmp eq i32 %50, 0
  br i1 %cmp296, label %if.then298, label %if.else

if.then298:                                       ; preds = %if.then295
  %arrayidx300 = getelementptr inbounds %struct.rtx_def* %x.addr.0496, i64 0, i32 1, i64 0
  %rtx301 = bitcast %union.rtunion_def* %arrayidx300 to %struct.rtx_def**
  br label %repeat.backedge

if.else:                                          ; preds = %if.then295
  %51 = load %struct.rtx_def** %rtx292, align 8, !tbaa !1
  %call306 = tail call i32 @refers_to_regno_p(i32 %regno, i32 %endregno, %struct.rtx_def* %51, %struct.rtx_def** %loc)
  %tobool307 = icmp eq i32 %call306, 0
  br i1 %tobool307, label %for.cond.backedge, label %return

for.cond.backedge:                                ; preds = %for.cond322.backedge, %for.body, %land.lhs.true288, %if.then317, %if.else
  %52 = trunc i64 %indvars.iv.next533 to i32
  %cmp281 = icmp sgt i32 %52, 0
  br i1 %cmp281, label %for.body, label %return

if.then317:                                       ; preds = %for.body
  %arrayidx320 = getelementptr inbounds %struct.rtx_def* %x.addr.0496, i64 0, i32 1, i64 %indvars.iv.next533
  %rtvec = bitcast %union.rtunion_def* %arrayidx320 to %struct.rtvec_def**
  %53 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %53, i64 0, i32 0
  %54 = load i32* %num_elem, align 4, !tbaa !6
  %cmp323488 = icmp sgt i32 %54, 0
  br i1 %cmp323488, label %for.body325.lr.ph, label %for.cond.backedge

for.body325.lr.ph:                                ; preds = %if.then317
  %55 = sext i32 %54 to i64
  br label %for.body325

for.body325:                                      ; preds = %for.cond322.backedge.for.body325_crit_edge, %for.body325.lr.ph
  %56 = phi %struct.rtvec_def* [ %53, %for.body325.lr.ph ], [ %.pre, %for.cond322.backedge.for.body325_crit_edge ]
  %indvars.iv = phi i64 [ %55, %for.body325.lr.ph ], [ %indvars.iv.next, %for.cond322.backedge.for.body325_crit_edge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx331 = getelementptr inbounds %struct.rtvec_def* %56, i64 0, i32 1, i64 %indvars.iv.next
  %cmp332 = icmp eq %struct.rtx_def** %arrayidx331, %loc
  br i1 %cmp332, label %for.cond322.backedge, label %land.lhs.true334

land.lhs.true334:                                 ; preds = %for.body325
  %57 = load %struct.rtx_def** %arrayidx331, align 8, !tbaa !1
  %call342 = tail call i32 @refers_to_regno_p(i32 %regno, i32 %endregno, %struct.rtx_def* %57, %struct.rtx_def** %loc)
  %tobool343 = icmp eq i32 %call342, 0
  br i1 %tobool343, label %for.cond322.backedge, label %return

for.cond322.backedge:                             ; preds = %land.lhs.true334, %for.body325
  %58 = trunc i64 %indvars.iv.next to i32
  %cmp323 = icmp sgt i32 %58, 0
  br i1 %cmp323, label %for.cond322.backedge.for.body325_crit_edge, label %for.cond.backedge

for.cond322.backedge.for.body325_crit_edge:       ; preds = %for.cond322.backedge
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  br label %for.body325

return:                                           ; preds = %repeat.backedge, %land.lhs.true237, %land.lhs.true254, %lor.lhs.false264, %if.end261, %sw.epilog, %if.else, %for.cond.backedge, %land.lhs.true334, %entry, %sw.bb, %land.end188, %land.end
  %retval.0 = phi i32 [ %land.ext189, %land.end188 ], [ %land.ext, %land.end ], [ 1, %sw.bb ], [ 0, %entry ], [ 1, %land.lhs.true334 ], [ 1, %if.else ], [ 0, %for.cond.backedge ], [ 0, %repeat.backedge ], [ 1, %land.lhs.true237 ], [ 1, %land.lhs.true254 ], [ 0, %lor.lhs.false264 ], [ 0, %if.end261 ], [ 0, %sw.epilog ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @subreg_regno(%struct.rtx_def* nocapture readonly %x) #1 {
entry:
  %fld = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !9
  %2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtuint5 = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %3 = load i32* %rtuint5, align 4, !tbaa !9
  %4 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load6 = load i32* %4, align 8
  %bf.lshr7 = lshr i32 %bf.load6, 16
  %bf.clear8 = and i32 %bf.lshr7, 255
  %call = tail call i32 @subreg_regno_offset(i32 %1, i32 %bf.clear, i32 %3, i32 %bf.clear8)
  %add = add i32 %call, %1
  ret i32 %add
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @reg_set_last(%struct.rtx_def* %x, %struct.rtx_def* %insn) #1 {
entry:
  %data.i.i.i = alloca %struct.set_of_data, align 8
  %data.i = alloca %struct.set_of_data, align 8
  %tobool118 = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool118, label %return, label %land.lhs.true.lr.ph

land.lhs.true.lr.ph:                              ; preds = %entry
  %0 = bitcast %struct.set_of_data* %data.i to i8*
  %found.i = getelementptr inbounds %struct.set_of_data* %data.i, i64 0, i32 0
  %pat1.i = getelementptr inbounds %struct.set_of_data* %data.i, i64 0, i32 1
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  br label %land.lhs.true

land.lhs.true:                                    ; preds = %land.lhs.true.lr.ph, %for.inc
  %insn.addr.0119 = phi %struct.rtx_def* [ %insn, %land.lhs.true.lr.ph ], [ %18, %for.inc ]
  %1 = getelementptr inbounds %struct.rtx_def* %insn.addr.0119, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %for.body [
    i32 36, label %return
    i32 34, label %land.rhs4
  ]

land.rhs4:                                        ; preds = %land.lhs.true
  %2 = load i32* %rtuint, align 4, !tbaa !9
  %phitmp = icmp ugt i32 %2, 53
  br i1 %phitmp, label %for.body, label %return

for.body:                                         ; preds = %land.lhs.true, %land.rhs4
  %idxprom108 = zext i32 %bf.clear to i64
  %arrayidx9 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom108
  %3 = load i8* %arrayidx9, align 1, !tbaa !5
  %cmp10 = icmp eq i8 %3, 105
  br i1 %cmp10, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  call void @llvm.lifetime.start(i64 16, i8* %0) #4
  store %struct.rtx_def* null, %struct.rtx_def** %found.i, align 8, !tbaa !12
  store %struct.rtx_def* %x, %struct.rtx_def** %pat1.i, align 8, !tbaa !14
  %bf.load.i = load i32* %1, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom6.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom6.i
  %4 = load i8* %arrayidx.i, align 1, !tbaa !5
  %cmp.i = icmp eq i8 %4, 105
  br i1 %cmp.i, label %cond.true.i, label %set_of.exit

cond.true.i:                                      ; preds = %if.then
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %insn.addr.0119, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  br label %set_of.exit

set_of.exit:                                      ; preds = %if.then, %cond.true.i
  %cond.i = phi %struct.rtx_def* [ %5, %cond.true.i ], [ %insn.addr.0119, %if.then ]
  call void @note_stores(%struct.rtx_def* %cond.i, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @set_of_1, i8* %0) #4
  %6 = load %struct.rtx_def** %found.i, align 8, !tbaa !12
  call void @llvm.lifetime.end(i64 16, i8* %0) #4
  %tobool12 = icmp eq %struct.rtx_def* %6, null
  br i1 %tobool12, label %for.inc, label %if.then13

if.then13:                                        ; preds = %set_of.exit
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load14 = load i32* %7, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 47
  br i1 %cmp16, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %if.then13
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp20 = icmp eq %struct.rtx_def* %8, %x
  br i1 %cmp20, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx24 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx25, align 8, !tbaa !1
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load26 = load i32* %10, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  switch i32 %bf.clear27, label %if.else [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 55, label %return
    i32 58, label %return
    i32 134, label %return
    i32 56, label %return
    i32 140, label %return
    i32 61, label %land.lhs.true75
    i32 63, label %land.lhs.true75
  ]

land.lhs.true75:                                  ; preds = %if.end, %if.end
  %cmp.i109 = icmp eq %struct.rtx_def* %insn.addr.0119, %insn
  br i1 %cmp.i109, label %return, label %for.cond.preheader.i

for.cond.preheader.i:                             ; preds = %land.lhs.true75
  %arrayidx11.i.i = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 0
  %rtuint.i.i = bitcast %union.rtunion_def* %arrayidx11.i.i to i32*
  %insn.0.in.in17.i = getelementptr inbounds %struct.rtx_def* %insn.addr.0119, i64 0, i32 1, i64 2
  %insn.0.in18.i = bitcast %union.rtunion_def* %insn.0.in.in17.i to %struct.rtx_def**
  %insn.019.i = load %struct.rtx_def** %insn.0.in18.i, align 8
  %cmp120.i = icmp eq %struct.rtx_def* %insn.019.i, %insn
  br i1 %cmp120.i, label %return, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %for.cond.preheader.i
  %11 = bitcast %struct.set_of_data* %data.i.i.i to i8*
  %found.i.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i.i, i64 0, i32 0
  %pat1.i.i.i = getelementptr inbounds %struct.set_of_data* %data.i.i.i, i64 0, i32 1
  br label %for.body.i

for.body.i:                                       ; preds = %for.cond.backedge.i, %for.body.lr.ph.i
  %insn.021.i = phi %struct.rtx_def* [ %insn.019.i, %for.body.lr.ph.i ], [ %insn.0.i, %for.cond.backedge.i ]
  %12 = getelementptr inbounds %struct.rtx_def* %insn.021.i, i64 0, i32 0
  %bf.load.i110 = load i32* %12, align 8
  %bf.clear.i111 = and i32 %bf.load.i110, 65535
  %idxprom15.i = zext i32 %bf.clear.i111 to i64
  %arrayidx2.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom15.i
  %13 = load i8* %arrayidx2.i, align 1, !tbaa !5
  %cmp3.i = icmp eq i8 %13, 105
  br i1 %cmp3.i, label %land.lhs.true.i, label %for.cond.backedge.i

for.cond.backedge.i:                              ; preds = %reg_set_p.exit.i, %for.body.i
  %insn.0.in.in.i = getelementptr inbounds %struct.rtx_def* %insn.021.i, i64 0, i32 1, i64 2
  %insn.0.in.i = bitcast %union.rtunion_def* %insn.0.in.in.i to %struct.rtx_def**
  %insn.0.i = load %struct.rtx_def** %insn.0.in.i, align 8
  %cmp1.i = icmp eq %struct.rtx_def* %insn.0.i, %insn
  br i1 %cmp1.i, label %return, label %for.body.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %cmp4.i.i = icmp eq i32 %bf.clear.i111, 34
  br i1 %cmp4.i.i, label %land.lhs.true.i.i, label %if.end22.i.i

land.lhs.true.i.i:                                ; preds = %land.lhs.true.i
  %bf.load6.i.i = load i32* %10, align 8
  %bf.clear7.i.i = and i32 %bf.load6.i.i, 65535
  switch i32 %bf.clear7.i.i, label %lor.lhs.false18.i.i [
    i32 61, label %land.lhs.true10.i.i
    i32 66, label %if.else
  ]

land.lhs.true10.i.i:                              ; preds = %land.lhs.true.i.i
  %14 = load i32* %rtuint.i.i, align 4, !tbaa !9
  %cmp12.i.i = icmp ult i32 %14, 53
  br i1 %cmp12.i.i, label %if.else, label %lor.lhs.false18.i.i

lor.lhs.false18.i.i:                              ; preds = %land.lhs.true10.i.i, %land.lhs.true.i.i
  %call.i.i = call i32 @find_reg_fusage(%struct.rtx_def* %insn.021.i, i32 49, %struct.rtx_def* %9) #4
  %tobool.i.i = icmp eq i32 %call.i.i, 0
  br i1 %tobool.i.i, label %lor.lhs.false18.if.end22_crit_edge.i.i, label %if.else

lor.lhs.false18.if.end22_crit_edge.i.i:           ; preds = %lor.lhs.false18.i.i
  %bf.load.i.pre.i.i = load i32* %12, align 8
  br label %if.end22.i.i

if.end22.i.i:                                     ; preds = %lor.lhs.false18.if.end22_crit_edge.i.i, %land.lhs.true.i
  %bf.load.i.i.i = phi i32 [ %bf.load.i.pre.i.i, %lor.lhs.false18.if.end22_crit_edge.i.i ], [ %bf.load.i110, %land.lhs.true.i ]
  call void @llvm.lifetime.start(i64 16, i8* %11) #4
  store %struct.rtx_def* null, %struct.rtx_def** %found.i.i.i, align 8, !tbaa !12
  store %struct.rtx_def* %9, %struct.rtx_def** %pat1.i.i.i, align 8, !tbaa !14
  %bf.clear.i.i.i = and i32 %bf.load.i.i.i, 65535
  %idxprom6.i.i.i = zext i32 %bf.clear.i.i.i to i64
  %arrayidx.i.i.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom6.i.i.i
  %15 = load i8* %arrayidx.i.i.i, align 1, !tbaa !5
  %cmp.i.i.i = icmp eq i8 %15, 105
  br i1 %cmp.i.i.i, label %cond.true.i.i.i, label %reg_set_p.exit.i

cond.true.i.i.i:                                  ; preds = %if.end22.i.i
  %arrayidx3.i.i.i = getelementptr inbounds %struct.rtx_def* %insn.021.i, i64 0, i32 1, i64 3
  %rtx.i.i.i = bitcast %union.rtunion_def* %arrayidx3.i.i.i to %struct.rtx_def**
  %16 = load %struct.rtx_def** %rtx.i.i.i, align 8, !tbaa !1
  br label %reg_set_p.exit.i

reg_set_p.exit.i:                                 ; preds = %cond.true.i.i.i, %if.end22.i.i
  %cond.i.i.i = phi %struct.rtx_def* [ %16, %cond.true.i.i.i ], [ %insn.021.i, %if.end22.i.i ]
  call void @note_stores(%struct.rtx_def* %cond.i.i.i, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @set_of_1, i8* %11) #4
  %17 = load %struct.rtx_def** %found.i.i.i, align 8, !tbaa !12
  call void @llvm.lifetime.end(i64 16, i8* %11) #4
  %cmp24.i.i = icmp eq %struct.rtx_def* %17, null
  br i1 %cmp24.i.i, label %for.cond.backedge.i, label %if.else

if.else:                                          ; preds = %reg_set_p.exit.i, %land.lhs.true.i.i, %land.lhs.true10.i.i, %lor.lhs.false18.i.i, %if.end
  br label %return

for.inc:                                          ; preds = %set_of.exit, %for.body
  %arrayidx82 = getelementptr inbounds %struct.rtx_def* %insn.addr.0119, i64 0, i32 1, i64 1
  %rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx83, align 8, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %18, null
  br i1 %tobool, label %return, label %land.lhs.true

return:                                           ; preds = %land.lhs.true, %for.inc, %land.rhs4, %for.cond.backedge.i, %entry, %for.cond.preheader.i, %land.lhs.true75, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.then13, %lor.lhs.false, %if.else
  %retval.0 = phi %struct.rtx_def* [ null, %if.else ], [ null, %lor.lhs.false ], [ null, %if.then13 ], [ %9, %if.end ], [ %9, %if.end ], [ %9, %if.end ], [ %9, %if.end ], [ %9, %if.end ], [ %9, %if.end ], [ %9, %if.end ], [ %9, %if.end ], [ %9, %land.lhs.true75 ], [ %9, %for.cond.preheader.i ], [ null, %entry ], [ %9, %for.cond.backedge.i ], [ null, %land.rhs4 ], [ null, %for.inc ], [ null, %land.lhs.true ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define void @note_uses(%struct.rtx_def** %pbody, void (%struct.rtx_def**, i8*)* %fun, i8* %data) #1 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %sw.bb, %entry
  %pbody.tr = phi %struct.rtx_def** [ %pbody, %entry ], [ %rtx3, %sw.bb ]
  %0 = load %struct.rtx_def** %pbody.tr, align 8, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 38, label %sw.bb
    i32 39, label %sw.bb4
    i32 48, label %sw.bb11
    i32 41, label %sw.bb15
    i32 52, label %sw.bb33
    i32 46, label %sw.bb37
    i32 42, label %sw.bb41
    i32 43, label %sw.bb41
    i32 49, label %sw.bb59
    i32 47, label %sw.bb72
  ]

sw.bb:                                            ; preds = %tailrecurse
  %fld = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  tail call void %fun(%struct.rtx_def** %rtx, i8* %data) #4
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  br label %tailrecurse

sw.bb4:                                           ; preds = %tailrecurse
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtvec_def**
  %2 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %2, i64 0, i32 0
  %3 = load i32* %num_elem, align 4, !tbaa !6
  %cmp182 = icmp sgt i32 %3, 0
  br i1 %cmp182, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %sw.bb4
  %4 = sext i32 %3 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.lr.ph
  %5 = phi %struct.rtvec_def* [ %2, %for.body.lr.ph ], [ %.pre, %for.body.for.body_crit_edge ]
  %indvars.iv = phi i64 [ %4, %for.body.lr.ph ], [ %indvars.iv.next, %for.body.for.body_crit_edge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx10 = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 1, i64 %indvars.iv.next
  tail call void @note_uses(%struct.rtx_def** %arrayidx10, void (%struct.rtx_def**, i8*)* %fun, i8* %data)
  %6 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp sgt i32 %6, 0
  br i1 %cmp, label %for.body.for.body_crit_edge, label %return

for.body.for.body_crit_edge:                      ; preds = %for.body
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  br label %for.body

sw.bb11:                                          ; preds = %tailrecurse
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  tail call void %fun(%struct.rtx_def** %rtx14, i8* %data) #4
  br label %return

sw.bb15:                                          ; preds = %tailrecurse
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 3
  %rtvec18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec18, align 8, !tbaa !1
  %num_elem19 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %8 = load i32* %num_elem19, align 4, !tbaa !6
  %cmp22185 = icmp sgt i32 %8, 0
  br i1 %cmp22185, label %for.body23.lr.ph, label %return

for.body23.lr.ph:                                 ; preds = %sw.bb15
  %9 = sext i32 %8 to i64
  br label %for.body23

for.body23:                                       ; preds = %for.body23.for.body23_crit_edge, %for.body23.lr.ph
  %10 = phi %struct.rtvec_def* [ %7, %for.body23.lr.ph ], [ %.pre217, %for.body23.for.body23_crit_edge ]
  %indvars.iv213 = phi i64 [ %9, %for.body23.lr.ph ], [ %indvars.iv.next214, %for.body23.for.body23_crit_edge ]
  %indvars.iv.next214 = add nsw i64 %indvars.iv213, -1
  %arrayidx29 = getelementptr inbounds %struct.rtvec_def* %10, i64 0, i32 1, i64 %indvars.iv.next214
  tail call void %fun(%struct.rtx_def** %arrayidx29, i8* %data) #4
  %11 = trunc i64 %indvars.iv.next214 to i32
  %cmp22 = icmp sgt i32 %11, 0
  br i1 %cmp22, label %for.body23.for.body23_crit_edge, label %return

for.body23.for.body23_crit_edge:                  ; preds = %for.body23
  %.pre217 = load %struct.rtvec_def** %rtvec18, align 8, !tbaa !1
  br label %for.body23

sw.bb33:                                          ; preds = %tailrecurse
  %arrayidx35 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  tail call void %fun(%struct.rtx_def** %rtx36, i8* %data) #4
  br label %return

sw.bb37:                                          ; preds = %tailrecurse
  %arrayidx39 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  tail call void %fun(%struct.rtx_def** %rtx40, i8* %data) #4
  br label %return

sw.bb41:                                          ; preds = %tailrecurse, %tailrecurse
  %arrayidx43 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtvec44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtvec_def**
  %12 = load %struct.rtvec_def** %rtvec44, align 8, !tbaa !1
  %num_elem45 = getelementptr inbounds %struct.rtvec_def* %12, i64 0, i32 0
  %13 = load i32* %num_elem45, align 4, !tbaa !6
  %cmp48188 = icmp sgt i32 %13, 0
  br i1 %cmp48188, label %for.body49.lr.ph, label %return

for.body49.lr.ph:                                 ; preds = %sw.bb41
  %14 = sext i32 %13 to i64
  br label %for.body49

for.body49:                                       ; preds = %for.body49.for.body49_crit_edge, %for.body49.lr.ph
  %15 = phi %struct.rtvec_def* [ %12, %for.body49.lr.ph ], [ %.pre218, %for.body49.for.body49_crit_edge ]
  %indvars.iv215 = phi i64 [ %14, %for.body49.lr.ph ], [ %indvars.iv.next216, %for.body49.for.body49_crit_edge ]
  %indvars.iv.next216 = add nsw i64 %indvars.iv215, -1
  %arrayidx55 = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 1, i64 %indvars.iv.next216
  tail call void %fun(%struct.rtx_def** %arrayidx55, i8* %data) #4
  %16 = trunc i64 %indvars.iv.next216 to i32
  %cmp48 = icmp sgt i32 %16, 0
  br i1 %cmp48, label %for.body49.for.body49_crit_edge, label %return

for.body49.for.body49_crit_edge:                  ; preds = %for.body49
  %.pre218 = load %struct.rtvec_def** %rtvec44, align 8, !tbaa !1
  br label %for.body49

sw.bb59:                                          ; preds = %tailrecurse
  %arrayidx61 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx62, align 8, !tbaa !1
  %18 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 0
  %bf.load63 = load i32* %18, align 8
  %bf.clear64 = and i32 %bf.load63, 65535
  %cmp65 = icmp eq i32 %bf.clear64, 66
  br i1 %cmp65, label %if.then, label %return

if.then:                                          ; preds = %sw.bb59
  %arrayidx70 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 1, i64 0
  %rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**
  tail call void %fun(%struct.rtx_def** %rtx71, i8* %data) #4
  br label %return

sw.bb72:                                          ; preds = %tailrecurse
  %fld73 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx75 = bitcast [1 x %union.rtunion_def]* %fld73 to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx75, align 8, !tbaa !1
  %arrayidx77 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**
  tail call void %fun(%struct.rtx_def** %rtx78, i8* %data) #4
  %20 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 0
  %bf.load79 = load i32* %20, align 8
  %bf.clear80 = and i32 %bf.load79, 65535
  %cmp81 = icmp eq i32 %bf.clear80, 133
  br i1 %cmp81, label %if.then82, label %while.cond.preheader

if.then82:                                        ; preds = %sw.bb72
  %arrayidx84 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 1
  %rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**
  tail call void %fun(%struct.rtx_def** %rtx85, i8* %data) #4
  %arrayidx87 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 2
  %rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  tail call void %fun(%struct.rtx_def** %rtx88, i8* %data) #4
  %bf.load90190.pre = load i32* %20, align 8
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then82, %sw.bb72
  %bf.load90190 = phi i32 [ %bf.load90190.pre, %if.then82 ], [ %bf.load79, %sw.bb72 ]
  %bf.clear91191 = and i32 %bf.load90190, 65535
  %bf.clear91.off192 = add i32 %bf.clear91191, -63
  %21 = icmp ult i32 %bf.clear91.off192, 2
  br i1 %21, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %dest.0193 = phi %struct.rtx_def* [ %22, %while.body ], [ %19, %while.cond.preheader ]
  %arrayidx97 = getelementptr inbounds %struct.rtx_def* %dest.0193, i64 0, i32 1, i64 0
  %rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**
  %22 = load %struct.rtx_def** %rtx98, align 8, !tbaa !1
  %23 = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 0
  %bf.load90 = load i32* %23, align 8
  %bf.clear91 = and i32 %bf.load90, 65535
  %bf.clear91.off = add i32 %bf.clear91, -63
  %24 = icmp ult i32 %bf.clear91.off, 2
  br i1 %24, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %while.cond.preheader
  %bf.clear91.lcssa = phi i32 [ %bf.clear91191, %while.cond.preheader ], [ %bf.clear91, %while.body ]
  %dest.0.lcssa = phi %struct.rtx_def* [ %19, %while.cond.preheader ], [ %22, %while.body ]
  %cmp101 = icmp eq i32 %bf.clear91.lcssa, 66
  br i1 %cmp101, label %if.then102, label %return

if.then102:                                       ; preds = %while.end
  %arrayidx104 = getelementptr inbounds %struct.rtx_def* %dest.0.lcssa, i64 0, i32 1, i64 0
  %rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**
  tail call void %fun(%struct.rtx_def** %rtx105, i8* %data) #4
  br label %return

sw.default:                                       ; preds = %tailrecurse
  tail call void %fun(%struct.rtx_def** %pbody.tr, i8* %data) #4
  br label %return

return:                                           ; preds = %for.body49, %for.body23, %for.body, %sw.bb41, %sw.bb15, %sw.bb4, %while.end, %if.then102, %sw.bb59, %if.then, %sw.default, %sw.bb37, %sw.bb33, %sw.bb11
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @dead_or_set_p(%struct.rtx_def* nocapture readonly %insn, %struct.rtx_def* nocapture readonly %x) #1 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.then4 [
    i32 69, label %return
    i32 61, label %if.end5
  ]

if.then4:                                         ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 1678, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.dead_or_set_p, i64 0, i64 0)) #5
  unreachable

if.end5:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !9
  %cmp6 = icmp ugt i32 %1, 52
  br i1 %cmp6, label %cond.end66, label %cond.false

cond.false:                                       ; preds = %if.end5
  %2 = and i32 %1, -8
  %3 = icmp eq i32 %2, 8
  %.off = add i32 %1, -21
  %4 = icmp ult i32 %.off, 8
  %or.cond = or i1 %3, %4
  %.off95 = add i32 %1, -45
  %5 = icmp ult i32 %.off95, 8
  %or.cond101 = or i1 %or.cond, %5
  %.off96 = add i32 %1, -29
  %6 = icmp ult i32 %.off96, 8
  %or.cond103 = or i1 %or.cond101, %6
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear22 = and i32 %bf.lshr, 255
  br i1 %or.cond103, label %cond.true20, label %cond.false31

cond.true20:                                      ; preds = %cond.false
  %idxprom98 = zext i32 %bf.clear22 to i64
  %arrayidx23 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom98
  %7 = load i32* %arrayidx23, align 4, !tbaa !5
  %cmp24 = icmp eq i32 %7, 5
  br i1 %cmp24, label %cond.end62, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true20
  %cmp30 = icmp eq i32 %7, 6
  %phitmp = select i1 %cmp30, i32 2, i32 1
  br label %cond.end62

cond.false31:                                     ; preds = %cond.false
  switch i32 %bf.clear22, label %cond.false47 [
    i32 18, label %cond.true36
    i32 24, label %cond.true43
  ]

cond.true36:                                      ; preds = %cond.false31
  %8 = load i32* @target_flags, align 4, !tbaa !9
  %and = lshr i32 %8, 25
  %9 = and i32 %and, 1
  %10 = xor i32 %9, 3
  br label %cond.end62

cond.true43:                                      ; preds = %cond.false31
  %11 = load i32* @target_flags, align 4, !tbaa !9
  %and44 = lshr i32 %11, 24
  %12 = and i32 %and44, 2
  %13 = xor i32 %12, 6
  br label %cond.end62

cond.false47:                                     ; preds = %cond.false31
  %idxprom5197 = zext i32 %bf.clear22 to i64
  %arrayidx52 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom5197
  %14 = load i8* %arrayidx52, align 1, !tbaa !5
  %conv = zext i8 %14 to i32
  %15 = load i32* @target_flags, align 4, !tbaa !9
  %and53 = lshr i32 %15, 23
  %16 = and i32 %and53, 4
  %17 = add i32 %16, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %17
  %div = sdiv i32 %sub, %17
  br label %cond.end62

cond.end62:                                       ; preds = %cond.true20, %lor.rhs, %cond.true36, %cond.false47, %cond.true43
  %cond63 = phi i32 [ %10, %cond.true36 ], [ %13, %cond.true43 ], [ %div, %cond.false47 ], [ 2, %cond.true20 ], [ %phitmp, %lor.rhs ]
  %add64 = add i32 %1, -1
  %sub65 = add i32 %add64, %cond63
  br label %cond.end66

cond.end66:                                       ; preds = %if.end5, %cond.end62
  %cond67 = phi i32 [ %sub65, %cond.end62 ], [ %1, %if.end5 ]
  %cmp68104 = icmp ugt i32 %1, %cond67
  br i1 %cmp68104, label %return, label %for.body

for.cond:                                         ; preds = %for.body
  %cmp68 = icmp ugt i32 %inc, %cond67
  br i1 %cmp68, label %return, label %for.body

for.body:                                         ; preds = %cond.end66, %for.cond
  %i.0105 = phi i32 [ %inc, %for.cond ], [ %1, %cond.end66 ]
  %call = tail call i32 @dead_or_set_regno_p(%struct.rtx_def* %insn, i32 %i.0105)
  %tobool70 = icmp eq i32 %call, 0
  %inc = add i32 %i.0105, 1
  br i1 %tobool70, label %return, label %for.cond

return:                                           ; preds = %for.body, %for.cond, %cond.end66, %entry
  %retval.0 = phi i32 [ 1, %entry ], [ 1, %cond.end66 ], [ 0, %for.body ], [ 1, %for.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @dead_or_set_regno_p(%struct.rtx_def* nocapture readonly %insn, i32 %test_regno) #0 {
entry:
  %call = tail call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %insn, i32 1, i32 %test_regno)
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %land.lhs.true, label %if.end4

land.lhs.true:                                    ; preds = %if.end
  %call1 = tail call i32 @find_regno_fusage(%struct.rtx_def* %insn, i32 49, i32 %test_regno)
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %if.end4, label %return

if.end4:                                          ; preds = %land.lhs.true, %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load5 = load i32* %2, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 38
  br i1 %cmp7, label %if.then8, label %if.end12

if.then8:                                         ; preds = %if.end4
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx11, align 8, !tbaa !1
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load13.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then8, %if.end4
  %bf.load13 = phi i32 [ %bf.load13.pre, %if.then8 ], [ %bf.load5, %if.end4 ]
  %pattern.0 = phi %struct.rtx_def* [ %3, %if.then8 ], [ %1, %if.end4 ]
  %bf.clear14 = and i32 %bf.load13, 65535
  switch i32 %bf.clear14, label %return [
    i32 47, label %if.then16
    i32 39, label %if.then160
  ]

if.then16:                                        ; preds = %if.end12
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx22, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load23 = load i32* %5, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 63
  br i1 %cmp25, label %land.lhs.true26, label %if.end58

land.lhs.true26:                                  ; preds = %if.then16
  %bf.lshr = lshr i32 %bf.load23, 16
  %bf.clear28 = and i32 %bf.lshr, 255
  %idxprom431 = zext i32 %bf.clear28 to i64
  %arrayidx29 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom431
  %6 = load i8* %arrayidx29, align 1, !tbaa !5
  %conv = zext i8 %6 to i32
  %7 = load i32* @target_flags, align 4, !tbaa !9
  %and = lshr i32 %7, 23
  %8 = and i32 %and, 4
  %9 = add i32 %8, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %9
  %div = sdiv i32 %sub, %9
  %arrayidx35 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx36, align 8, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load37 = load i32* %11, align 8
  %bf.lshr38 = lshr i32 %bf.load37, 16
  %bf.clear39 = and i32 %bf.lshr38, 255
  %idxprom40432 = zext i32 %bf.clear39 to i64
  %arrayidx41 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom40432
  %12 = load i8* %arrayidx41, align 1, !tbaa !5
  %conv42 = zext i8 %12 to i32
  %add46451 = or i32 %8, 3
  %sub47 = add i32 %add46451, %conv42
  %div51 = sdiv i32 %sub47, %9
  %cmp52 = icmp eq i32 %div, %div51
  %. = select i1 %cmp52, %struct.rtx_def* %10, %struct.rtx_def* %4
  %.phi.trans.insert453 = getelementptr inbounds %struct.rtx_def* %., i64 0, i32 0
  %bf.load59.pre = load i32* %.phi.trans.insert453, align 8
  br label %if.end58

if.end58:                                         ; preds = %land.lhs.true26, %if.then16
  %bf.load59 = phi i32 [ %bf.load23, %if.then16 ], [ %bf.load59.pre, %land.lhs.true26 ]
  %dest.0 = phi %struct.rtx_def* [ %4, %if.then16 ], [ %., %land.lhs.true26 ]
  %bf.clear60 = and i32 %bf.load59, 65535
  %cmp61 = icmp eq i32 %bf.clear60, 61
  br i1 %cmp61, label %if.end64, label %return

if.end64:                                         ; preds = %if.end58
  %arrayidx66 = getelementptr inbounds %struct.rtx_def* %dest.0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx66 to i32*
  %13 = load i32* %rtuint, align 4, !tbaa !9
  %cmp67 = icmp ugt i32 %13, 52
  br i1 %cmp67, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end64
  %add69 = add i32 %13, 1
  br label %cond.end150

cond.false:                                       ; preds = %if.end64
  %14 = and i32 %13, -8
  %15 = icmp eq i32 %14, 8
  %.off425 = add i32 %13, -21
  %16 = icmp ult i32 %.off425, 8
  %or.cond = or i1 %15, %16
  %.off426 = add i32 %13, -45
  %17 = icmp ult i32 %.off426, 8
  %or.cond435 = or i1 %or.cond, %17
  %.off427 = add i32 %13, -29
  %18 = icmp ult i32 %.off427, 8
  %or.cond437 = or i1 %or.cond435, %18
  %bf.lshr94 = lshr i32 %bf.load59, 16
  %bf.clear95 = and i32 %bf.lshr94, 255
  br i1 %or.cond437, label %cond.true92, label %cond.false108

cond.true92:                                      ; preds = %cond.false
  %idxprom96429 = zext i32 %bf.clear95 to i64
  %arrayidx97 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom96429
  %19 = load i32* %arrayidx97, align 4, !tbaa !5
  %cmp98 = icmp eq i32 %19, 5
  br i1 %cmp98, label %cond.end147, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true92
  %cmp105 = icmp eq i32 %19, 6
  %phitmp430 = select i1 %cmp105, i32 2, i32 1
  br label %cond.end147

cond.false108:                                    ; preds = %cond.false
  switch i32 %bf.clear95, label %cond.false128 [
    i32 18, label %cond.true114
    i32 24, label %cond.true124
  ]

cond.true114:                                     ; preds = %cond.false108
  %20 = load i32* @target_flags, align 4, !tbaa !9
  %and115 = lshr i32 %20, 25
  %21 = and i32 %and115, 1
  %22 = xor i32 %21, 3
  br label %cond.end147

cond.true124:                                     ; preds = %cond.false108
  %23 = load i32* @target_flags, align 4, !tbaa !9
  %and125 = lshr i32 %23, 24
  %24 = and i32 %and125, 2
  %25 = xor i32 %24, 6
  br label %cond.end147

cond.false128:                                    ; preds = %cond.false108
  %idxprom132428 = zext i32 %bf.clear95 to i64
  %arrayidx133 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom132428
  %26 = load i8* %arrayidx133, align 1, !tbaa !5
  %conv134 = zext i8 %26 to i32
  %27 = load i32* @target_flags, align 4, !tbaa !9
  %and135 = lshr i32 %27, 23
  %28 = and i32 %and135, 4
  %29 = add i32 %28, 4
  %add138 = add i32 %conv134, -1
  %sub139 = add i32 %add138, %29
  %div143 = sdiv i32 %sub139, %29
  br label %cond.end147

cond.end147:                                      ; preds = %cond.true92, %lor.rhs, %cond.true114, %cond.false128, %cond.true124
  %cond148 = phi i32 [ %22, %cond.true114 ], [ %25, %cond.true124 ], [ %div143, %cond.false128 ], [ 2, %cond.true92 ], [ %phitmp430, %lor.rhs ]
  %add149 = add i32 %cond148, %13
  br label %cond.end150

cond.end150:                                      ; preds = %cond.end147, %cond.true
  %cond151 = phi i32 [ %add69, %cond.true ], [ %add149, %cond.end147 ]
  %cmp154 = icmp ugt i32 %cond151, %test_regno
  %not.cmp152 = icmp ule i32 %13, %test_regno
  %30 = and i1 %cmp154, %not.cmp152
  %land.ext = zext i1 %30 to i32
  br label %return

if.then160:                                       ; preds = %if.end12
  %arrayidx162 = getelementptr inbounds %struct.rtx_def* %pattern.0, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx162 to %struct.rtvec_def**
  %31 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %31, i64 0, i32 0
  %32 = load i32* %num_elem, align 4, !tbaa !6
  %cmp164447 = icmp sgt i32 %32, 0
  br i1 %cmp164447, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %if.then160
  %33 = load i32* @target_flags, align 4, !tbaa !9
  %and205 = lshr i32 %33, 23
  %34 = and i32 %and205, 4
  %35 = add i32 %34, 4
  %add226450 = or i32 %34, 3
  %and301 = lshr i32 %33, 25
  %36 = and i32 %and301, 1
  %37 = xor i32 %36, 3
  %and311 = lshr i32 %33, 24
  %38 = and i32 %and311, 2
  %39 = xor i32 %38, 6
  %40 = sext i32 %32 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv = phi i64 [ %40, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.backedge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx170 = getelementptr inbounds %struct.rtvec_def* %31, i64 0, i32 1, i64 %indvars.iv.next
  %41 = load %struct.rtx_def** %arrayidx170, align 8, !tbaa !1
  %42 = getelementptr inbounds %struct.rtx_def* %41, i64 0, i32 0
  %bf.load171 = load i32* %42, align 8
  %bf.clear172 = and i32 %bf.load171, 65535
  %cmp173 = icmp eq i32 %bf.clear172, 38
  br i1 %cmp173, label %if.then175, label %if.end179

if.then175:                                       ; preds = %for.body
  %arrayidx177 = getelementptr inbounds %struct.rtx_def* %41, i64 0, i32 1, i64 1
  %rtx178 = bitcast %union.rtunion_def* %arrayidx177 to %struct.rtx_def**
  %43 = load %struct.rtx_def** %rtx178, align 8, !tbaa !1
  %.phi.trans.insert455 = getelementptr inbounds %struct.rtx_def* %43, i64 0, i32 0
  %bf.load180.pre = load i32* %.phi.trans.insert455, align 8
  br label %if.end179

if.end179:                                        ; preds = %if.then175, %for.body
  %bf.load180 = phi i32 [ %bf.load180.pre, %if.then175 ], [ %bf.load171, %for.body ]
  %body.0 = phi %struct.rtx_def* [ %43, %if.then175 ], [ %41, %for.body ]
  %bf.clear181 = and i32 %bf.load180, 65535
  switch i32 %bf.clear181, label %for.cond.backedge [
    i32 47, label %if.then189
    i32 49, label %if.then189
  ]

if.then189:                                       ; preds = %if.end179, %if.end179
  %arrayidx192 = getelementptr inbounds %struct.rtx_def* %body.0, i64 0, i32 1, i64 0
  %rtx193 = bitcast %union.rtunion_def* %arrayidx192 to %struct.rtx_def**
  %44 = load %struct.rtx_def** %rtx193, align 8, !tbaa !1
  %45 = getelementptr inbounds %struct.rtx_def* %44, i64 0, i32 0
  %bf.load194 = load i32* %45, align 8
  %bf.clear195 = and i32 %bf.load194, 65535
  %cmp196 = icmp eq i32 %bf.clear195, 63
  br i1 %cmp196, label %land.lhs.true198, label %if.end238

land.lhs.true198:                                 ; preds = %if.then189
  %bf.lshr200 = lshr i32 %bf.load194, 16
  %bf.clear201 = and i32 %bf.lshr200, 255
  %idxprom202422 = zext i32 %bf.clear201 to i64
  %arrayidx203 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom202422
  %46 = load i8* %arrayidx203, align 1, !tbaa !5
  %conv204 = zext i8 %46 to i32
  %add208 = add i32 %conv204, -1
  %sub209 = add i32 %add208, %35
  %div213 = sdiv i32 %sub209, %35
  %arrayidx215 = getelementptr inbounds %struct.rtx_def* %44, i64 0, i32 1, i64 0
  %rtx216 = bitcast %union.rtunion_def* %arrayidx215 to %struct.rtx_def**
  %47 = load %struct.rtx_def** %rtx216, align 8, !tbaa !1
  %48 = getelementptr inbounds %struct.rtx_def* %47, i64 0, i32 0
  %bf.load217 = load i32* %48, align 8
  %bf.lshr218 = lshr i32 %bf.load217, 16
  %bf.clear219 = and i32 %bf.lshr218, 255
  %idxprom220423 = zext i32 %bf.clear219 to i64
  %arrayidx221 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom220423
  %49 = load i8* %arrayidx221, align 1, !tbaa !5
  %conv222 = zext i8 %49 to i32
  %sub227 = add i32 %add226450, %conv222
  %div231 = sdiv i32 %sub227, %35
  %cmp232 = icmp eq i32 %div213, %div231
  %.438 = select i1 %cmp232, %struct.rtx_def* %47, %struct.rtx_def* %44
  %.phi.trans.insert457 = getelementptr inbounds %struct.rtx_def* %.438, i64 0, i32 0
  %bf.load239.pre = load i32* %.phi.trans.insert457, align 8
  br label %if.end238

if.end238:                                        ; preds = %land.lhs.true198, %if.then189
  %bf.load239 = phi i32 [ %bf.load194, %if.then189 ], [ %bf.load239.pre, %land.lhs.true198 ]
  %dest190.0 = phi %struct.rtx_def* [ %44, %if.then189 ], [ %.438, %land.lhs.true198 ]
  %bf.clear240 = and i32 %bf.load239, 65535
  %cmp241 = icmp eq i32 %bf.clear240, 61
  br i1 %cmp241, label %if.end244, label %for.cond.backedge

if.end244:                                        ; preds = %if.end238
  %arrayidx246 = getelementptr inbounds %struct.rtx_def* %dest190.0, i64 0, i32 1, i64 0
  %rtuint247 = bitcast %union.rtunion_def* %arrayidx246 to i32*
  %50 = load i32* %rtuint247, align 4, !tbaa !9
  %cmp248 = icmp ugt i32 %50, 52
  br i1 %cmp248, label %cond.true250, label %cond.false252

cond.true250:                                     ; preds = %if.end244
  %add251 = add i32 %50, 1
  br label %cond.end337

cond.false252:                                    ; preds = %if.end244
  %51 = and i32 %50, -8
  %52 = icmp eq i32 %51, 8
  %.off = add i32 %50, -21
  %53 = icmp ult i32 %.off, 8
  %or.cond440 = or i1 %52, %53
  %.off418 = add i32 %50, -45
  %54 = icmp ult i32 %.off418, 8
  %or.cond442 = or i1 %or.cond440, %54
  %.off419 = add i32 %50, -29
  %55 = icmp ult i32 %.off419, 8
  %or.cond444 = or i1 %or.cond442, %55
  %bf.lshr278 = lshr i32 %bf.load239, 16
  %bf.clear279 = and i32 %bf.lshr278, 255
  br i1 %or.cond444, label %cond.true276, label %cond.false294

cond.true276:                                     ; preds = %cond.false252
  %idxprom280421 = zext i32 %bf.clear279 to i64
  %arrayidx281 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom280421
  %56 = load i32* %arrayidx281, align 4, !tbaa !5
  %cmp282 = icmp eq i32 %56, 5
  br i1 %cmp282, label %cond.end334, label %lor.rhs284

lor.rhs284:                                       ; preds = %cond.true276
  %cmp290 = icmp eq i32 %56, 6
  %phitmp = select i1 %cmp290, i32 2, i32 1
  br label %cond.end334

cond.false294:                                    ; preds = %cond.false252
  switch i32 %bf.clear279, label %cond.false314 [
    i32 18, label %cond.end334
    i32 24, label %cond.true310
  ]

cond.true310:                                     ; preds = %cond.false294
  br label %cond.end334

cond.false314:                                    ; preds = %cond.false294
  %idxprom318420 = zext i32 %bf.clear279 to i64
  %arrayidx319 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom318420
  %57 = load i8* %arrayidx319, align 1, !tbaa !5
  %conv320 = zext i8 %57 to i32
  %add324 = add i32 %conv320, -1
  %sub325 = add i32 %add324, %35
  %div329 = sdiv i32 %sub325, %35
  br label %cond.end334

cond.end334:                                      ; preds = %cond.false294, %cond.true276, %lor.rhs284, %cond.false314, %cond.true310
  %cond335 = phi i32 [ %39, %cond.true310 ], [ %div329, %cond.false314 ], [ 2, %cond.true276 ], [ %phitmp, %lor.rhs284 ], [ %37, %cond.false294 ]
  %add336 = add i32 %cond335, %50
  br label %cond.end337

cond.end337:                                      ; preds = %cond.end334, %cond.true250
  %cond338 = phi i32 [ %add251, %cond.true250 ], [ %add336, %cond.end334 ]
  %cmp339 = icmp ule i32 %50, %test_regno
  %cmp342 = icmp ugt i32 %cond338, %test_regno
  %or.cond445 = and i1 %cmp339, %cmp342
  br i1 %or.cond445, label %return, label %for.cond.backedge

for.cond.backedge:                                ; preds = %cond.end337, %if.end179, %if.end238
  %58 = trunc i64 %indvars.iv.next to i32
  %cmp164 = icmp sgt i32 %58, 0
  br i1 %cmp164, label %for.body, label %return

return:                                           ; preds = %cond.end337, %for.cond.backedge, %if.then160, %if.end12, %if.end58, %land.lhs.true, %entry, %cond.end150
  %retval.0 = phi i32 [ %land.ext, %cond.end150 ], [ 1, %entry ], [ 1, %land.lhs.true ], [ 0, %if.end58 ], [ 0, %if.end12 ], [ 0, %if.then160 ], [ 1, %cond.end337 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @find_regno_note(%struct.rtx_def* nocapture readonly %insn, i32 %kind, i32 %regno) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom206 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom206
  %1 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %link.0.in216 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %link.0217 = load %struct.rtx_def** %link.0.in216, align 8
  %tobool218 = icmp eq %struct.rtx_def* %link.0217, null
  br i1 %tobool218, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %2 = load i32* @target_flags, align 4, !tbaa !9
  %and163 = lshr i32 %2, 23
  %3 = and i32 %and163, 4
  %4 = add i32 %3, 4
  %and = lshr i32 %2, 25
  %5 = and i32 %and, 1
  %6 = xor i32 %5, 3
  %and150 = lshr i32 %2, 24
  %7 = and i32 %and150, 2
  %8 = xor i32 %7, 6
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %link.0219 = phi %struct.rtx_def* [ %link.0217, %for.body.lr.ph ], [ %link.0, %for.inc ]
  %9 = getelementptr inbounds %struct.rtx_def* %link.0219, i64 0, i32 0
  %bf.load3 = load i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load3, 16
  %bf.clear4 = and i32 %bf.lshr, 255
  %cmp5 = icmp eq i32 %bf.clear4, %kind
  br i1 %cmp5, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %link.0219, i64 0, i32 1, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx9, align 8, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load10 = load i32* %11, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 61
  br i1 %cmp12, label %land.lhs.true14, label %for.inc

land.lhs.true14:                                  ; preds = %land.lhs.true
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %12 = load i32* %rtuint, align 4, !tbaa !9
  %cmp20 = icmp ugt i32 %12, %regno
  br i1 %cmp20, label %for.inc, label %land.lhs.true22

land.lhs.true22:                                  ; preds = %land.lhs.true14
  %cmp35 = icmp ugt i32 %12, 52
  br i1 %cmp35, label %cond.end174, label %cond.false

cond.false:                                       ; preds = %land.lhs.true22
  %13 = and i32 %12, -8
  %14 = icmp eq i32 %13, 8
  %cmp78 = icmp ugt i32 %12, 44
  %or.cond = or i1 %14, %cmp78
  %.off = add i32 %12, -21
  %switch = icmp ult i32 %.off, 16
  %or.cond215 = or i1 %or.cond, %switch
  %bf.lshr112 = lshr i32 %bf.load10, 16
  %bf.clear113 = and i32 %bf.lshr112, 255
  br i1 %or.cond215, label %cond.true107, label %cond.false128

cond.true107:                                     ; preds = %cond.false
  %idxprom114208 = zext i32 %bf.clear113 to i64
  %arrayidx115 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom114208
  %15 = load i32* %arrayidx115, align 4, !tbaa !5
  %cmp116 = icmp eq i32 %15, 5
  br i1 %cmp116, label %cond.end174, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true107
  %cmp126 = icmp eq i32 %15, 6
  %phitmp = select i1 %cmp126, i32 2, i32 1
  br label %cond.end174

cond.false128:                                    ; preds = %cond.false
  switch i32 %bf.clear113, label %cond.false153 [
    i32 18, label %cond.end174
    i32 24, label %cond.true149
  ]

cond.true149:                                     ; preds = %cond.false128
  br label %cond.end174

cond.false153:                                    ; preds = %cond.false128
  %idxprom160207 = zext i32 %bf.clear113 to i64
  %arrayidx161 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom160207
  %16 = load i8* %arrayidx161, align 1, !tbaa !5
  %conv162 = zext i8 %16 to i32
  %add = add i32 %conv162, -1
  %sub = add i32 %add, %4
  %div = sdiv i32 %sub, %4
  br label %cond.end174

cond.end174:                                      ; preds = %cond.false128, %cond.true107, %lor.rhs, %cond.true149, %cond.false153, %land.lhs.true22
  %cond175 = phi i32 [ 1, %land.lhs.true22 ], [ %8, %cond.true149 ], [ %div, %cond.false153 ], [ 2, %cond.true107 ], [ %phitmp, %lor.rhs ], [ %6, %cond.false128 ]
  %add176 = add i32 %cond175, %12
  %cmp177 = icmp ugt i32 %add176, %regno
  br i1 %cmp177, label %return, label %for.inc

for.inc:                                          ; preds = %land.lhs.true14, %for.body, %land.lhs.true, %cond.end174
  %arrayidx182 = getelementptr inbounds %struct.rtx_def* %link.0219, i64 0, i32 1, i64 1
  %link.0.in = bitcast %union.rtunion_def* %arrayidx182 to %struct.rtx_def**
  %link.0 = load %struct.rtx_def** %link.0.in, align 8
  %tobool = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool, label %return, label %for.body

return:                                           ; preds = %cond.end174, %for.inc, %if.end, %entry
  %retval.0 = phi %struct.rtx_def* [ null, %entry ], [ null, %if.end ], [ %link.0219, %cond.end174 ], [ null, %for.inc ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @find_regno_fusage(%struct.rtx_def* nocapture readonly %insn, i32 %code, i32 %regno) #0 {
entry:
  %cmp = icmp ugt i32 %regno, 52
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 34
  br i1 %cmp1, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 7
  %link.0.in115 = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %link.0116 = load %struct.rtx_def** %link.0.in115, align 8
  %tobool117 = icmp eq %struct.rtx_def* %link.0116, null
  br i1 %tobool117, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %1 = load i32* @target_flags, align 4, !tbaa !9
  %and66 = lshr i32 %1, 23
  %2 = and i32 %and66, 4
  %3 = add i32 %2, 4
  %and = lshr i32 %1, 25
  %4 = and i32 %and, 1
  %5 = xor i32 %4, 3
  %and57 = lshr i32 %1, 24
  %6 = and i32 %and57, 2
  %7 = xor i32 %6, 6
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %link.0118 = phi %struct.rtx_def* [ %link.0116, %for.body.lr.ph ], [ %link.0, %for.inc ]
  %fld2 = getelementptr inbounds %struct.rtx_def* %link.0118, i64 0, i32 1
  %rtx4 = bitcast [1 x %union.rtunion_def]* %fld2 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx4, align 8, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load5 = load i32* %9, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, %code
  br i1 %cmp7, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 0
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx10, align 8, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load11 = load i32* %11, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 61
  br i1 %cmp13, label %land.lhs.true14, label %for.inc

land.lhs.true14:                                  ; preds = %land.lhs.true
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %12 = load i32* %rtuint, align 4, !tbaa !9
  %cmp17 = icmp ugt i32 %12, %regno
  br i1 %cmp17, label %for.inc, label %land.lhs.true18

land.lhs.true18:                                  ; preds = %land.lhs.true14
  %13 = and i32 %12, -8
  %14 = icmp eq i32 %13, 8
  %.off = add i32 %12, -21
  %15 = icmp ult i32 %.off, 8
  %or.cond = or i1 %14, %15
  %.off106 = add i32 %12, -45
  %16 = icmp ult i32 %.off106, 8
  %or.cond112 = or i1 %or.cond, %16
  %.off107 = add i32 %12, -29
  %17 = icmp ult i32 %.off107, 8
  %or.cond114 = or i1 %or.cond112, %17
  %bf.lshr = lshr i32 %bf.load11, 16
  %bf.clear35 = and i32 %bf.lshr, 255
  br i1 %or.cond114, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true18
  %idxprom109 = zext i32 %bf.clear35 to i64
  %arrayidx36 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom109
  %18 = load i32* %arrayidx36, align 4, !tbaa !5
  %cmp37 = icmp eq i32 %18, 5
  br i1 %cmp37, label %cond.end75, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp43 = icmp eq i32 %18, 6
  %phitmp = select i1 %cmp43, i32 2, i32 1
  br label %cond.end75

cond.false:                                       ; preds = %land.lhs.true18
  switch i32 %bf.clear35, label %cond.false60 [
    i32 18, label %cond.end75
    i32 24, label %cond.true56
  ]

cond.true56:                                      ; preds = %cond.false
  br label %cond.end75

cond.false60:                                     ; preds = %cond.false
  %idxprom64108 = zext i32 %bf.clear35 to i64
  %arrayidx65 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom64108
  %19 = load i8* %arrayidx65, align 1, !tbaa !5
  %conv = zext i8 %19 to i32
  %add = add i32 %conv, -1
  %sub = add i32 %add, %3
  %div = sdiv i32 %sub, %3
  br label %cond.end75

cond.end75:                                       ; preds = %cond.false, %cond.true, %lor.rhs, %cond.false60, %cond.true56
  %cond76 = phi i32 [ %7, %cond.true56 ], [ %div, %cond.false60 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ], [ %5, %cond.false ]
  %add77 = add i32 %cond76, %12
  %cmp78 = icmp ugt i32 %add77, %regno
  br i1 %cmp78, label %return, label %for.inc

for.inc:                                          ; preds = %land.lhs.true14, %for.body, %land.lhs.true, %cond.end75
  %arrayidx83 = getelementptr inbounds %struct.rtx_def* %link.0118, i64 0, i32 1, i64 1
  %link.0.in = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**
  %link.0 = load %struct.rtx_def** %link.0.in, align 8
  %tobool = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool, label %return, label %for.body

return:                                           ; preds = %cond.end75, %for.inc, %if.end, %entry, %lor.lhs.false
  %retval.0 = phi i32 [ 0, %lor.lhs.false ], [ 0, %entry ], [ 0, %if.end ], [ 1, %cond.end75 ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* nocapture readonly %insn) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom30 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom30
  %1 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %cond.true, label %return

cond.true:                                        ; preds = %entry
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load3 = load i32* %3, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 47
  br i1 %cmp5, label %cond.end15, label %cond.false

cond.false:                                       ; preds = %cond.true
  %call = tail call %struct.rtx_def* @single_set_2(%struct.rtx_def* %insn, %struct.rtx_def* %2)
  br label %cond.end15

cond.end15:                                       ; preds = %cond.true, %cond.false
  %cond16 = phi %struct.rtx_def* [ %call, %cond.false ], [ %2, %cond.true ]
  %cmp17 = icmp eq %struct.rtx_def* %cond16, null
  br i1 %cmp17, label %return, label %if.end.i

if.end.i:                                         ; preds = %cond.end15
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %link.0.in26.i = bitcast %union.rtunion_def* %arrayidx2.i to %struct.rtx_def**
  %link.027.i = load %struct.rtx_def** %link.0.in26.i, align 8
  %tobool28.i = icmp eq %struct.rtx_def* %link.027.i, null
  br i1 %tobool28.i, label %if.end.i40, label %for.body.us.i

for.body.us.i:                                    ; preds = %if.end.i, %for.inc.us.i
  %link.029.us.i = phi %struct.rtx_def* [ %link.0.us.i, %for.inc.us.i ], [ %link.027.i, %if.end.i ]
  %4 = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 0
  %bf.load3.us.i = load i32* %4, align 8
  %bf.clear4.us.i = and i32 %bf.load3.us.i, 16711680
  %cmp5.us.i = icmp eq i32 %bf.clear4.us.i, 196608
  br i1 %cmp5.us.i, label %return, label %for.inc.us.i

for.inc.us.i:                                     ; preds = %for.body.us.i
  %arrayidx17.us.i = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 1, i64 1
  %link.0.in.us.i = bitcast %union.rtunion_def* %arrayidx17.us.i to %struct.rtx_def**
  %link.0.us.i = load %struct.rtx_def** %link.0.in.us.i, align 8
  %tobool.us.i = icmp eq %struct.rtx_def* %link.0.us.i, null
  br i1 %tobool.us.i, label %if.end.i40, label %for.body.us.i

if.end.i40:                                       ; preds = %for.inc.us.i, %if.end.i
  %arrayidx2.i36 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %link.0.in26.i37 = bitcast %union.rtunion_def* %arrayidx2.i36 to %struct.rtx_def**
  %link.027.i38 = load %struct.rtx_def** %link.0.in26.i37, align 8
  %tobool28.i39 = icmp eq %struct.rtx_def* %link.027.i38, null
  br i1 %tobool28.i39, label %return, label %for.body.us.i47

for.body.us.i47:                                  ; preds = %if.end.i40, %for.inc.us.i52
  %link.029.us.i42 = phi %struct.rtx_def* [ %link.0.us.i50, %for.inc.us.i52 ], [ %link.027.i38, %if.end.i40 ]
  %5 = getelementptr inbounds %struct.rtx_def* %link.029.us.i42, i64 0, i32 0
  %bf.load3.us.i43 = load i32* %5, align 8
  %bf.clear4.us.i45 = and i32 %bf.load3.us.i43, 16711680
  %cmp5.us.i46 = icmp eq i32 %bf.clear4.us.i45, 262144
  br i1 %cmp5.us.i46, label %return, label %for.inc.us.i52

for.inc.us.i52:                                   ; preds = %for.body.us.i47
  %arrayidx17.us.i48 = getelementptr inbounds %struct.rtx_def* %link.029.us.i42, i64 0, i32 1, i64 1
  %link.0.in.us.i49 = bitcast %union.rtunion_def* %arrayidx17.us.i48 to %struct.rtx_def**
  %link.0.us.i50 = load %struct.rtx_def** %link.0.in.us.i49, align 8
  %tobool.us.i51 = icmp eq %struct.rtx_def* %link.0.us.i50, null
  br i1 %tobool.us.i51, label %return, label %for.body.us.i47

return:                                           ; preds = %for.body.us.i, %for.inc.us.i52, %for.body.us.i47, %entry, %if.end.i40, %cond.end15
  %retval.0 = phi %struct.rtx_def* [ null, %cond.end15 ], [ null, %if.end.i40 ], [ null, %entry ], [ null, %for.inc.us.i52 ], [ %link.029.us.i42, %for.body.us.i47 ], [ %link.029.us.i, %for.body.us.i ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @pure_call_p(%struct.rtx_def* nocapture readonly %insn) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %1 = and i32 %bf.load, 67174399
  %2 = icmp eq i32 %1, 67108898
  br i1 %2, label %if.end, label %return

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 7
  %link.0.in39 = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %link.040 = load %struct.rtx_def** %link.0.in39, align 8
  %tobool341 = icmp eq %struct.rtx_def* %link.040, null
  br i1 %tobool341, label %return, label %for.body

for.body:                                         ; preds = %if.end, %for.inc
  %link.042 = phi %struct.rtx_def* [ %link.0, %for.inc ], [ %link.040, %if.end ]
  %fld4 = getelementptr inbounds %struct.rtx_def* %link.042, i64 0, i32 1
  %rtx6 = bitcast [1 x %union.rtunion_def]* %fld4 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx6, align 8, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load7 = load i32* %4, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 48
  br i1 %cmp9, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx12, align 8, !tbaa !1
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load13 = load i32* %6, align 8
  %7 = and i32 %bf.load13, 16777215
  %8 = icmp eq i32 %7, 3342402
  br i1 %8, label %land.lhs.true21, label %for.inc

land.lhs.true21:                                  ; preds = %land.lhs.true
  %arrayidx23 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx24, align 8, !tbaa !1
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load25 = load i32* %10, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 62
  br i1 %cmp27, label %return, label %for.inc

for.inc:                                          ; preds = %for.body, %land.lhs.true, %land.lhs.true21
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %link.042, i64 0, i32 1, i64 1
  %link.0.in = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**
  %link.0 = load %struct.rtx_def** %link.0.in, align 8
  %tobool3 = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool3, label %return, label %for.body

return:                                           ; preds = %land.lhs.true21, %for.inc, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %if.end ], [ 1, %land.lhs.true21 ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @remove_note(%struct.rtx_def* nocapture %insn, %struct.rtx_def* readonly %note) #1 {
entry:
  %cmp = icmp eq %struct.rtx_def* %note, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp1 = icmp eq %struct.rtx_def* %0, %note
  br i1 %cmp1, label %if.then2, label %for.cond

if.then2:                                         ; preds = %if.end
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %note, i64 0, i32 1, i64 1
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx5, align 8, !tbaa !1
  %2 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %.c37 = ptrtoint %struct.rtx_def* %1 to i64
  store i64 %.c37, i64* %2, align 8, !tbaa !1
  br label %return

for.cond:                                         ; preds = %if.end, %for.body
  %link.0 = phi %struct.rtx_def* [ %3, %for.body ], [ %0, %if.end ]
  %tobool = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool, label %for.end, label %for.body

for.body:                                         ; preds = %for.cond
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %link.0, i64 0, i32 1, i64 1
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx15, align 8, !tbaa !1
  %cmp16 = icmp eq %struct.rtx_def* %3, %note
  br i1 %cmp16, label %if.then17, label %for.cond

if.then17:                                        ; preds = %for.body
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %note, i64 0, i32 1, i64 1
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx20, align 8, !tbaa !1
  %5 = getelementptr inbounds %union.rtunion_def* %arrayidx14, i64 0, i32 0
  %.c = ptrtoint %struct.rtx_def* %4 to i64
  store i64 %.c, i64* %5, align 8, !tbaa !1
  br label %return

for.end:                                          ; preds = %for.cond
  tail call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 1980, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.remove_note, i64 0, i64 0)) #5
  unreachable

return:                                           ; preds = %entry, %if.then17, %if.then2
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i32 @in_expr_list_p(%struct.rtx_def* readonly %listp, %struct.rtx_def* readnone %node) #0 {
entry:
  %tobool6 = icmp eq %struct.rtx_def* %listp, null
  br i1 %tobool6, label %return, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %x.07 = phi %struct.rtx_def* [ %1, %for.inc ], [ %listp, %entry ]
  %fld = getelementptr inbounds %struct.rtx_def* %x.07, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %0, %node
  br i1 %cmp, label %return, label %for.inc

for.inc:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %x.07, i64 0, i32 1, i64 1
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx3, align 8, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool, label %return, label %for.body

return:                                           ; preds = %for.body, %for.inc, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %for.body ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @remove_node_from_expr_list(%struct.rtx_def* readnone %node, %struct.rtx_def** nocapture %listp) #1 {
entry:
  %temp.024 = load %struct.rtx_def** %listp, align 8
  %tobool25 = icmp eq %struct.rtx_def* %temp.024, null
  br i1 %tobool25, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %if.end12
  %temp.027 = phi %struct.rtx_def* [ %temp.0, %if.end12 ], [ %temp.024, %entry ]
  %prev.026 = phi %struct.rtx_def* [ %temp.027, %if.end12 ], [ null, %entry ]
  %fld = getelementptr inbounds %struct.rtx_def* %temp.027, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %0, %node
  br i1 %cmp, label %if.then, label %if.end12

if.then:                                          ; preds = %while.body
  %tobool1 = icmp eq %struct.rtx_def* %prev.026, null
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %temp.027, i64 0, i32 1, i64 1
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx5, align 8, !tbaa !1
  br i1 %tobool1, label %if.else, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = getelementptr inbounds %struct.rtx_def* %prev.026, i64 0, i32 1, i64 1, i32 0
  %.c = ptrtoint %struct.rtx_def* %1 to i64
  store i64 %.c, i64* %2, align 8, !tbaa !1
  br label %while.end

if.else:                                          ; preds = %if.then
  store %struct.rtx_def* %1, %struct.rtx_def** %listp, align 8, !tbaa !1
  br label %while.end

if.end12:                                         ; preds = %while.body
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %temp.027, i64 0, i32 1, i64 1
  %rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**
  %temp.0 = load %struct.rtx_def** %rtx15, align 8
  %tobool = icmp eq %struct.rtx_def* %temp.0, null
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %if.end12, %entry, %if.then2, %if.else
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i32 @volatile_insn_p(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 58, label %return
    i32 55, label %return
    i32 56, label %return
    i32 69, label %return
    i32 59, label %return
    i32 61, label %return
    i32 62, label %return
    i32 49, label %return
    i32 40, label %return
    i32 44, label %return
    i32 45, label %return
    i32 50, label %return
    i32 66, label %return
    i32 43, label %sw.bb1
    i32 41, label %sw.bb2
  ]

sw.bb1:                                           ; preds = %entry
  br label %return

sw.bb2:                                           ; preds = %entry
  %bf.clear4 = and i32 %bf.load, 134217728
  %tobool = icmp eq i32 %bf.clear4, 0
  br i1 %tobool, label %sw.epilog, label %return

sw.epilog:                                        ; preds = %sw.bb2, %entry
  %idxprom60 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom60
  %1 = load i8** %arrayidx, align 8, !tbaa !1
  %arrayidx6 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom60
  %2 = load i8* %arrayidx6, align 1, !tbaa !5
  %cmp66 = icmp eq i8 %2, 0
  br i1 %cmp66, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %3 = zext i8 %2 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv69 = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv.next70, %for.cond.backedge ]
  %indvars.iv.next70 = add nsw i64 %indvars.iv69, -1
  %arrayidx9 = getelementptr inbounds i8* %1, i64 %indvars.iv.next70
  %4 = load i8* %arrayidx9, align 1, !tbaa !5
  switch i8 %4, label %for.cond.backedge [
    i8 101, label %if.then13
    i8 69, label %for.cond25.preheader
  ]

for.cond.backedge:                                ; preds = %for.cond25, %for.cond25.preheader, %for.body, %if.then13
  %5 = trunc i64 %indvars.iv.next70 to i32
  %cmp = icmp sgt i32 %5, 0
  br i1 %cmp, label %for.body, label %return

for.cond25.preheader:                             ; preds = %for.body
  %arrayidx28 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next70
  %rtvec = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem62 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 0
  %7 = load i32* %num_elem62, align 4, !tbaa !6
  %cmp2963 = icmp sgt i32 %7, 0
  br i1 %cmp2963, label %for.body31, label %for.cond.backedge

if.then13:                                        ; preds = %for.body
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next70
  %rtx = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @volatile_insn_p(%struct.rtx_def* %8)
  %tobool16 = icmp eq i32 %call, 0
  br i1 %tobool16, label %for.cond.backedge, label %return

for.cond25:                                       ; preds = %for.body31
  %9 = trunc i64 %indvars.iv.next to i32
  %cmp29 = icmp slt i32 %9, %7
  br i1 %cmp29, label %for.body31, label %for.cond.backedge

for.body31:                                       ; preds = %for.cond25.preheader, %for.cond25
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond25 ], [ 0, %for.cond25.preheader ]
  %arrayidx37 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 1, i64 %indvars.iv
  %10 = load %struct.rtx_def** %arrayidx37, align 8, !tbaa !1
  %call38 = tail call i32 @volatile_insn_p(%struct.rtx_def* %10)
  %tobool39 = icmp eq i32 %call38, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool39, label %for.cond25, label %return

return:                                           ; preds = %if.then13, %for.cond.backedge, %for.body31, %sw.epilog, %sw.bb2, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.bb1
  %retval.0 = phi i32 [ 1, %sw.bb1 ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 1, %sw.bb2 ], [ 0, %sw.epilog ], [ 1, %for.body31 ], [ 1, %if.then13 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @volatile_refs_p(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 58, label %return
    i32 55, label %return
    i32 56, label %return
    i32 69, label %return
    i32 59, label %return
    i32 61, label %return
    i32 62, label %return
    i32 49, label %return
    i32 40, label %return
    i32 44, label %return
    i32 45, label %return
    i32 50, label %sw.bb1
    i32 43, label %sw.bb1
    i32 66, label %sw.bb2
    i32 41, label %sw.bb2
  ]

sw.bb1:                                           ; preds = %entry, %entry
  br label %return

sw.bb2:                                           ; preds = %entry, %entry
  %bf.clear4 = and i32 %bf.load, 134217728
  %tobool = icmp eq i32 %bf.clear4, 0
  br i1 %tobool, label %sw.epilog, label %return

sw.epilog:                                        ; preds = %sw.bb2, %entry
  %idxprom60 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom60
  %1 = load i8** %arrayidx, align 8, !tbaa !1
  %arrayidx6 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom60
  %2 = load i8* %arrayidx6, align 1, !tbaa !5
  %cmp66 = icmp eq i8 %2, 0
  br i1 %cmp66, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %3 = zext i8 %2 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv69 = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv.next70, %for.cond.backedge ]
  %indvars.iv.next70 = add nsw i64 %indvars.iv69, -1
  %arrayidx9 = getelementptr inbounds i8* %1, i64 %indvars.iv.next70
  %4 = load i8* %arrayidx9, align 1, !tbaa !5
  switch i8 %4, label %for.cond.backedge [
    i8 101, label %if.then13
    i8 69, label %for.cond25.preheader
  ]

for.cond.backedge:                                ; preds = %for.cond25, %for.cond25.preheader, %for.body, %if.then13
  %5 = trunc i64 %indvars.iv.next70 to i32
  %cmp = icmp sgt i32 %5, 0
  br i1 %cmp, label %for.body, label %return

for.cond25.preheader:                             ; preds = %for.body
  %arrayidx28 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next70
  %rtvec = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem62 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 0
  %7 = load i32* %num_elem62, align 4, !tbaa !6
  %cmp2963 = icmp sgt i32 %7, 0
  br i1 %cmp2963, label %for.body31, label %for.cond.backedge

if.then13:                                        ; preds = %for.body
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next70
  %rtx = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @volatile_refs_p(%struct.rtx_def* %8)
  %tobool16 = icmp eq i32 %call, 0
  br i1 %tobool16, label %for.cond.backedge, label %return

for.cond25:                                       ; preds = %for.body31
  %9 = trunc i64 %indvars.iv.next to i32
  %cmp29 = icmp slt i32 %9, %7
  br i1 %cmp29, label %for.body31, label %for.cond.backedge

for.body31:                                       ; preds = %for.cond25.preheader, %for.cond25
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond25 ], [ 0, %for.cond25.preheader ]
  %arrayidx37 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 1, i64 %indvars.iv
  %10 = load %struct.rtx_def** %arrayidx37, align 8, !tbaa !1
  %call38 = tail call i32 @volatile_refs_p(%struct.rtx_def* %10)
  %tobool39 = icmp eq i32 %call38, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool39, label %for.cond25, label %return

return:                                           ; preds = %if.then13, %for.cond.backedge, %for.body31, %sw.epilog, %sw.bb2, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.bb1
  %retval.0 = phi i32 [ 1, %sw.bb1 ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 1, %sw.bb2 ], [ 0, %sw.epilog ], [ 1, %for.body31 ], [ 1, %if.then13 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @may_trap_p(%struct.rtx_def* readonly %x) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 68, label %return
    i32 67, label %return
    i32 58, label %return
    i32 59, label %return
    i32 69, label %return
    i32 61, label %return
    i32 62, label %return
    i32 40, label %sw.bb1
    i32 43, label %sw.bb1
    i32 52, label %sw.bb1
    i32 41, label %sw.bb2
    i32 66, label %sw.bb5
    i32 79, label %sw.bb6
    i32 80, label %sw.bb6
    i32 81, label %sw.bb6
    i32 82, label %sw.bb6
    i32 3, label %sw.bb83
    i32 104, label %sw.bb84
    i32 105, label %sw.bb84
    i32 106, label %sw.bb84
    i32 107, label %sw.bb84
    i32 74, label %sw.bb84
    i32 77, label %sw.epilog
    i32 129, label %sw.epilog
  ]

sw.bb1:                                           ; preds = %if.end, %if.end, %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %bf.lshr = lshr i32 %bf.load, 27
  %bf.clear4 = and i32 %bf.lshr, 1
  br label %return

sw.bb5:                                           ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @rtx_addr_can_trap_p(%struct.rtx_def* %1)
  br label %return

sw.bb6:                                           ; preds = %if.end, %if.end, %if.end, %if.end
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx9, align 8, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load10 = load i32* %3, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  switch i32 %bf.clear11, label %return [
    i32 67, label %lor.lhs.false61
    i32 68, label %lor.lhs.false61
    i32 54, label %lor.lhs.false61
    i32 55, label %lor.lhs.false61
    i32 58, label %lor.lhs.false61
    i32 134, label %lor.lhs.false61
    i32 56, label %lor.lhs.false61
    i32 140, label %lor.lhs.false61
  ]

lor.lhs.false61:                                  ; preds = %sw.bb6, %sw.bb6, %sw.bb6, %sw.bb6, %sw.bb6, %sw.bb6, %sw.bb6, %sw.bb6
  %bf.lshr63 = lshr i32 %bf.load, 16
  %bf.clear64 = and i32 %bf.lshr63, 255
  %idxprom204 = zext i32 %bf.clear64 to i64
  %arrayidx65 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom204
  %4 = load i32* %arrayidx65, align 4, !tbaa !5
  %cmp66 = icmp eq i32 %4, 2
  br i1 %cmp66, label %return, label %if.end68

if.end68:                                         ; preds = %lor.lhs.false61
  %cmp74 = icmp eq i32 %bf.clear11, 54
  br i1 %cmp74, label %land.lhs.true, label %sw.epilog

land.lhs.true:                                    ; preds = %if.end68
  %rtwint = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0, i32 0
  %5 = load i64* %rtwint, align 8, !tbaa !10
  %cmp80 = icmp eq i64 %5, 0
  br i1 %cmp80, label %return, label %sw.epilog

sw.bb83:                                          ; preds = %if.end
  br label %return

sw.bb84:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end
  %bf.lshr86 = lshr i32 %bf.load, 16
  %bf.clear87 = and i32 %bf.lshr86, 255
  %idxprom88201 = zext i32 %bf.clear87 to i64
  %arrayidx89 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom88201
  %6 = load i32* %arrayidx89, align 4, !tbaa !5
  %cmp90 = icmp eq i32 %6, 2
  br i1 %cmp90, label %return, label %if.end92

if.end92:                                         ; preds = %sw.bb84
  %fld93 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx95 = bitcast [1 x %union.rtunion_def]* %fld93 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx95, align 8, !tbaa !1
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load96 = load i32* %8, align 8
  %bf.lshr97 = lshr i32 %bf.load96, 16
  %bf.clear98 = and i32 %bf.lshr97, 255
  %idxprom99202 = zext i32 %bf.clear98 to i64
  %arrayidx100 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom99202
  %9 = load i32* %arrayidx100, align 4, !tbaa !5
  %cmp101 = icmp eq i32 %9, 2
  br i1 %cmp101, label %return, label %lor.lhs.false102

lor.lhs.false102:                                 ; preds = %if.end92
  %arrayidx104 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx105, align 8, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load106 = load i32* %11, align 8
  %bf.lshr107 = lshr i32 %bf.load106, 16
  %bf.clear108 = and i32 %bf.lshr107, 255
  %idxprom109203 = zext i32 %bf.clear108 to i64
  %arrayidx110 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom109203
  %12 = load i32* %arrayidx110, align 4, !tbaa !5
  %cmp111 = icmp eq i32 %12, 2
  br i1 %cmp111, label %return, label %sw.epilog

sw.default:                                       ; preds = %if.end
  %bf.lshr116 = lshr i32 %bf.load, 16
  %bf.clear117 = and i32 %bf.lshr116, 255
  %idxprom118205 = zext i32 %bf.clear117 to i64
  %arrayidx119 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom118205
  %13 = load i32* %arrayidx119, align 4, !tbaa !5
  %cmp120 = icmp eq i32 %13, 2
  br i1 %cmp120, label %return, label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end, %if.end, %lor.lhs.false102, %if.end68, %land.lhs.true
  %idxprom123200 = zext i32 %bf.clear to i64
  %arrayidx124 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom123200
  %14 = load i8** %arrayidx124, align 8, !tbaa !1
  %arrayidx126 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom123200
  %15 = load i8* %arrayidx126, align 1, !tbaa !5
  %cmp127211 = icmp eq i8 %15, 0
  br i1 %cmp127211, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %16 = zext i8 %15 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv214 = phi i64 [ %16, %for.body.lr.ph ], [ %indvars.iv.next215, %for.cond.backedge ]
  %indvars.iv.next215 = add nsw i64 %indvars.iv214, -1
  %arrayidx130 = getelementptr inbounds i8* %14, i64 %indvars.iv.next215
  %17 = load i8* %arrayidx130, align 1, !tbaa !5
  switch i8 %17, label %for.cond.backedge [
    i8 101, label %if.then134
    i8 69, label %for.cond148.preheader
  ]

for.cond.backedge:                                ; preds = %for.cond148, %for.cond148.preheader, %for.body, %if.then134
  %18 = trunc i64 %indvars.iv.next215 to i32
  %cmp127 = icmp sgt i32 %18, 0
  br i1 %cmp127, label %for.body, label %return

for.cond148.preheader:                            ; preds = %for.body
  %arrayidx151 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next215
  %rtvec = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtvec_def**
  %19 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem207 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 0
  %20 = load i32* %num_elem207, align 4, !tbaa !6
  %cmp152208 = icmp sgt i32 %20, 0
  br i1 %cmp152208, label %for.body154, label %for.cond.backedge

if.then134:                                       ; preds = %for.body
  %arrayidx137 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next215
  %rtx138 = bitcast %union.rtunion_def* %arrayidx137 to %struct.rtx_def**
  %21 = load %struct.rtx_def** %rtx138, align 8, !tbaa !1
  %call139 = tail call i32 @may_trap_p(%struct.rtx_def* %21)
  %tobool = icmp eq i32 %call139, 0
  br i1 %tobool, label %for.cond.backedge, label %return

for.cond148:                                      ; preds = %for.body154
  %22 = trunc i64 %indvars.iv.next to i32
  %cmp152 = icmp slt i32 %22, %20
  br i1 %cmp152, label %for.body154, label %for.cond.backedge

for.body154:                                      ; preds = %for.cond148.preheader, %for.cond148
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond148 ], [ 0, %for.cond148.preheader ]
  %arrayidx160 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 1, i64 %indvars.iv
  %23 = load %struct.rtx_def** %arrayidx160, align 8, !tbaa !1
  %call161 = tail call i32 @may_trap_p(%struct.rtx_def* %23)
  %tobool162 = icmp eq i32 %call161, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool162, label %for.cond148, label %return

return:                                           ; preds = %if.then134, %for.cond.backedge, %for.body154, %sw.epilog, %sw.default, %if.end92, %lor.lhs.false102, %sw.bb84, %land.lhs.true, %lor.lhs.false61, %sw.bb6, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %entry, %sw.bb83, %sw.bb5, %sw.bb2, %sw.bb1
  %retval.0 = phi i32 [ 1, %sw.bb83 ], [ %call, %sw.bb5 ], [ %bf.clear4, %sw.bb2 ], [ 1, %sw.bb1 ], [ 0, %entry ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 1, %sw.bb6 ], [ 1, %lor.lhs.false61 ], [ 1, %land.lhs.true ], [ 1, %sw.bb84 ], [ 1, %lor.lhs.false102 ], [ 1, %if.end92 ], [ 1, %sw.default ], [ 0, %sw.epilog ], [ 1, %for.body154 ], [ 1, %if.then134 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @inequality_comparisons_p(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 61, label %return
    i32 62, label %return
    i32 59, label %return
    i32 69, label %return
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 58, label %return
    i32 67, label %return
    i32 68, label %return
    i32 107, label %sw.bb1
    i32 111, label %sw.bb1
    i32 105, label %sw.bb1
    i32 109, label %sw.bb1
    i32 106, label %sw.bb1
    i32 110, label %sw.bb1
    i32 104, label %sw.bb1
    i32 108, label %sw.bb1
  ]

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %return

sw.epilog:                                        ; preds = %entry
  %idxprom53 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom53
  %1 = load i8* %arrayidx, align 1, !tbaa !5
  %conv = zext i8 %1 to i32
  %arrayidx3 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom53
  %2 = load i8** %arrayidx3, align 8, !tbaa !1
  %cmp55 = icmp eq i8 %1, 0
  br i1 %cmp55, label %return, label %for.body

for.body:                                         ; preds = %sw.epilog, %for.inc38
  %indvars.iv58 = phi i64 [ %indvars.iv.next59, %for.inc38 ], [ 0, %sw.epilog ]
  %arrayidx6 = getelementptr inbounds i8* %2, i64 %indvars.iv58
  %3 = load i8* %arrayidx6, align 1, !tbaa !5
  switch i8 %3, label %for.inc38 [
    i8 101, label %if.then
    i8 69, label %if.then18
  ]

if.then:                                          ; preds = %for.body
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv58
  %rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @inequality_comparisons_p(%struct.rtx_def* %4)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %for.inc38, label %return

if.then18:                                        ; preds = %for.body
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv58
  %rtvec = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtvec_def**
  %5 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 0
  %6 = load i32* %num_elem, align 4, !tbaa !6
  %7 = sext i32 %6 to i64
  br label %for.cond22

for.cond22:                                       ; preds = %for.body25, %if.then18
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body25 ], [ %7, %if.then18 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %8 = trunc i64 %indvars.iv to i32
  %cmp23 = icmp sgt i32 %8, 0
  br i1 %cmp23, label %for.body25, label %for.inc38

for.body25:                                       ; preds = %for.cond22
  %arrayidx31 = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 1, i64 %indvars.iv.next
  %9 = load %struct.rtx_def** %arrayidx31, align 8, !tbaa !1
  %call32 = tail call i32 @inequality_comparisons_p(%struct.rtx_def* %9)
  %tobool33 = icmp eq i32 %call32, 0
  br i1 %tobool33, label %for.cond22, label %return

for.inc38:                                        ; preds = %for.cond22, %for.body, %if.then
  %indvars.iv.next59 = add nuw nsw i64 %indvars.iv58, 1
  %10 = trunc i64 %indvars.iv.next59 to i32
  %cmp = icmp slt i32 %10, %conv
  br i1 %cmp, label %for.body, label %return

return:                                           ; preds = %if.then, %for.inc38, %for.body25, %sw.epilog, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.bb1
  %retval.0 = phi i32 [ 1, %sw.bb1 ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %sw.epilog ], [ 1, %for.body25 ], [ 1, %if.then ], [ 0, %for.inc38 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @replace_rtx(%struct.rtx_def* %x, %struct.rtx_def* readnone %from, %struct.rtx_def* readnone %to) #1 {
entry:
  %cmp = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp, label %if.end.thread, label %land.lhs.true

if.end.thread:                                    ; preds = %entry
  %cmp2182 = icmp eq %struct.rtx_def* %x, %from
  %to.mux184 = select i1 %cmp2182, %struct.rtx_def* %to, %struct.rtx_def* null
  br label %return

land.lhs.true:                                    ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 55
  br i1 %cmp1, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true
  %cmp2 = icmp eq %struct.rtx_def* %x, %from
  %brmerge = or i1 %cmp2, %cmp
  %to.mux = select i1 %cmp2, %struct.rtx_def* %to, %struct.rtx_def* null
  br i1 %brmerge, label %return, label %if.end7

if.end7:                                          ; preds = %if.end
  %1 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load8 = load i32* %1, align 8
  %bf.clear9 = and i32 %bf.load8, 65535
  switch i32 %bf.clear9, label %if.end66 [
    i32 63, label %if.then11
    i32 121, label %if.then37
  ]

if.then11:                                        ; preds = %if.end7
  %fld = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %2, %struct.rtx_def* %from, %struct.rtx_def* %to)
  %3 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 0
  %bf.load12 = load i32* %3, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %cmp14 = icmp eq i32 %bf.clear13, 54
  br i1 %cmp14, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.then11
  %bf.load16 = load i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load16, 16
  %bf.clear17 = and i32 %bf.lshr, 255
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load21 = load i32* %5, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 16
  %bf.clear23 = and i32 %bf.lshr22, 255
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx25 to i32*
  %6 = load i32* %rtuint, align 4, !tbaa !9
  %call26 = tail call %struct.rtx_def* @simplify_subreg(i32 %bf.clear17, %struct.rtx_def* %call, i32 %bf.clear23, i32 %6) #4
  %tobool = icmp eq %struct.rtx_def* %call26, null
  br i1 %tobool, label %if.then27, label %return

if.then27:                                        ; preds = %if.then15
  tail call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 2450, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.replace_rtx, i64 0, i64 0)) #5
  unreachable

if.else:                                          ; preds = %if.then11
  %7 = getelementptr inbounds [1 x %union.rtunion_def]* %fld, i64 0, i64 0, i32 0
  %call.c = ptrtoint %struct.rtx_def* %call to i64
  store i64 %call.c, i64* %7, align 8, !tbaa !1
  br label %return

if.then37:                                        ; preds = %if.end7
  %arrayidx40 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx41, align 8, !tbaa !1
  %call42 = tail call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %8, %struct.rtx_def* %from, %struct.rtx_def* %to)
  %9 = getelementptr inbounds %struct.rtx_def* %call42, i64 0, i32 0
  %bf.load43 = load i32* %9, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  %cmp45 = icmp eq i32 %bf.clear44, 54
  br i1 %cmp45, label %if.then46, label %if.else60

if.then46:                                        ; preds = %if.then37
  %bf.load47 = load i32* %1, align 8
  %bf.lshr48 = lshr i32 %bf.load47, 16
  %bf.clear49 = and i32 %bf.lshr48, 255
  %10 = load %struct.rtx_def** %rtx41, align 8, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load53 = load i32* %11, align 8
  %bf.lshr54 = lshr i32 %bf.load53, 16
  %bf.clear55 = and i32 %bf.lshr54, 255
  %call56 = tail call %struct.rtx_def* @simplify_unary_operation(i32 121, i32 %bf.clear49, %struct.rtx_def* %call42, i32 %bf.clear55) #4
  %tobool57 = icmp eq %struct.rtx_def* %call56, null
  br i1 %tobool57, label %if.then58, label %return

if.then58:                                        ; preds = %if.then46
  tail call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 2466, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.replace_rtx, i64 0, i64 0)) #5
  unreachable

if.else60:                                        ; preds = %if.then37
  %12 = getelementptr inbounds %union.rtunion_def* %arrayidx40, i64 0, i32 0
  %call42.c = ptrtoint %struct.rtx_def* %call42 to i64
  store i64 %call42.c, i64* %12, align 8, !tbaa !1
  br label %return

if.end66:                                         ; preds = %if.end7
  %idxprom173 = zext i32 %bf.clear9 to i64
  %arrayidx69 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom173
  %13 = load i8** %arrayidx69, align 8, !tbaa !1
  %arrayidx73 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom173
  %14 = load i8* %arrayidx73, align 1, !tbaa !5
  %cmp74178 = icmp eq i8 %14, 0
  br i1 %cmp74178, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end66
  %15 = zext i8 %14 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv180 = phi i64 [ %15, %for.body.lr.ph ], [ %indvars.iv.next181, %for.cond.backedge ]
  %indvars.iv.next181 = add nsw i64 %indvars.iv180, -1
  %arrayidx77 = getelementptr inbounds i8* %13, i64 %indvars.iv.next181
  %16 = load i8* %arrayidx77, align 1, !tbaa !5
  switch i8 %16, label %for.cond.backedge [
    i8 101, label %if.then81
    i8 69, label %if.then97
  ]

for.cond.backedge:                                ; preds = %for.body105, %if.then97, %for.body, %if.then81
  %17 = trunc i64 %indvars.iv.next181 to i32
  %cmp74 = icmp sgt i32 %17, 0
  br i1 %cmp74, label %for.body, label %return

if.then81:                                        ; preds = %for.body
  %arrayidx84 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next181
  %rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx85, align 8, !tbaa !1
  %call86 = tail call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %18, %struct.rtx_def* %from, %struct.rtx_def* %to)
  %19 = getelementptr inbounds %union.rtunion_def* %arrayidx84, i64 0, i32 0
  %call86.c = ptrtoint %struct.rtx_def* %call86 to i64
  store i64 %call86.c, i64* %19, align 8, !tbaa !1
  br label %for.cond.backedge

if.then97:                                        ; preds = %for.body
  %arrayidx100 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next181
  %rtvec = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtvec_def**
  %20 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %20, i64 0, i32 0
  %21 = load i32* %num_elem, align 4, !tbaa !6
  %cmp103175 = icmp sgt i32 %21, 0
  br i1 %cmp103175, label %for.body105.lr.ph, label %for.cond.backedge

for.body105.lr.ph:                                ; preds = %if.then97
  %22 = sext i32 %21 to i64
  br label %for.body105

for.body105:                                      ; preds = %for.body105.for.body105_crit_edge, %for.body105.lr.ph
  %23 = phi %struct.rtvec_def* [ %20, %for.body105.lr.ph ], [ %.pre, %for.body105.for.body105_crit_edge ]
  %indvars.iv = phi i64 [ %22, %for.body105.lr.ph ], [ %indvars.iv.next, %for.body105.for.body105_crit_edge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx111 = getelementptr inbounds %struct.rtvec_def* %23, i64 0, i32 1, i64 %indvars.iv.next
  %24 = load %struct.rtx_def** %arrayidx111, align 8, !tbaa !1
  %call112 = tail call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %24, %struct.rtx_def* %from, %struct.rtx_def* %to)
  %25 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %arrayidx119 = getelementptr inbounds %struct.rtvec_def* %25, i64 0, i32 1, i64 %indvars.iv.next
  store %struct.rtx_def* %call112, %struct.rtx_def** %arrayidx119, align 8, !tbaa !1
  %26 = trunc i64 %indvars.iv.next to i32
  %cmp103 = icmp sgt i32 %26, 0
  br i1 %cmp103, label %for.body105.for.body105_crit_edge, label %for.cond.backedge

for.body105.for.body105_crit_edge:                ; preds = %for.body105
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  br label %for.body105

return:                                           ; preds = %for.cond.backedge, %if.end66, %if.end.thread, %if.end, %if.else60, %if.then46, %if.else, %if.then15, %land.lhs.true
  %retval.0 = phi %struct.rtx_def* [ %x, %land.lhs.true ], [ %to.mux, %if.end ], [ %call26, %if.then15 ], [ %x, %if.else ], [ %call56, %if.then46 ], [ %x, %if.else60 ], [ %to.mux184, %if.end.thread ], [ %x, %if.end66 ], [ %x, %for.cond.backedge ]
  ret %struct.rtx_def* %retval.0
}

declare %struct.rtx_def* @simplify_subreg(i32, %struct.rtx_def*, i32, i32) #2

declare %struct.rtx_def* @simplify_unary_operation(i32, i32, %struct.rtx_def*, i32) #2

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @replace_regs(%struct.rtx_def* %x, %struct.rtx_def** readonly %reg_map, i32 %nregs, i32 %replace_dest) #1 {
entry:
  %cmp = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 62, label %return
    i32 59, label %return
    i32 69, label %return
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 58, label %return
    i32 68, label %return
    i32 67, label %return
    i32 61, label %sw.bb1
    i32 63, label %sw.bb30
    i32 47, label %sw.bb88
  ]

sw.bb1:                                           ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !9
  %cmp2 = icmp ult i32 %1, %nregs
  br i1 %cmp2, label %land.lhs.true, label %return

land.lhs.true:                                    ; preds = %sw.bb1
  %idxprom = zext i32 %1 to i64
  %arrayidx6 = getelementptr inbounds %struct.rtx_def** %reg_map, i64 %idxprom
  %2 = load %struct.rtx_def** %arrayidx6, align 8, !tbaa !1
  %cmp7 = icmp eq %struct.rtx_def* %2, null
  br i1 %cmp7, label %return, label %if.then8

if.then8:                                         ; preds = %land.lhs.true
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load14 = load i32* %3, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 63
  br i1 %cmp16, label %if.then17, label %return

if.then17:                                        ; preds = %if.then8
  %call = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %2) #4
  br label %return

sw.bb30:                                          ; preds = %if.end
  %fld31 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld31 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load33 = load i32* %5, align 8
  %bf.clear34 = and i32 %bf.load33, 65535
  %cmp35 = icmp eq i32 %bf.clear34, 61
  br i1 %cmp35, label %land.lhs.true36, label %sw.epilog

land.lhs.true36:                                  ; preds = %sw.bb30
  %arrayidx41 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtuint42 = bitcast %union.rtunion_def* %arrayidx41 to i32*
  %6 = load i32* %rtuint42, align 4, !tbaa !9
  %cmp43 = icmp ult i32 %6, %nregs
  br i1 %cmp43, label %land.lhs.true44, label %sw.epilog

land.lhs.true44:                                  ; preds = %land.lhs.true36
  %idxprom51 = zext i32 %6 to i64
  %arrayidx52 = getelementptr inbounds %struct.rtx_def** %reg_map, i64 %idxprom51
  %7 = load %struct.rtx_def** %arrayidx52, align 8, !tbaa !1
  %cmp53 = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp53, label %sw.epilog, label %land.lhs.true54

land.lhs.true54:                                  ; preds = %land.lhs.true44
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load63 = load i32* %8, align 8
  %bf.clear64 = and i32 %bf.load63, 65535
  %cmp65 = icmp eq i32 %bf.clear64, 63
  br i1 %cmp65, label %if.then66, label %sw.epilog

if.then66:                                        ; preds = %land.lhs.true54
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear76 = and i32 %bf.lshr, 255
  %bf.lshr81 = lshr i32 %bf.load33, 16
  %bf.clear82 = and i32 %bf.lshr81, 255
  %arrayidx84 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtuint85 = bitcast %union.rtunion_def* %arrayidx84 to i32*
  %9 = load i32* %rtuint85, align 4, !tbaa !9
  %call86 = tail call %struct.rtx_def* @simplify_gen_subreg(i32 %bf.clear76, %struct.rtx_def* %7, i32 %bf.clear82, i32 %9) #4
  br label %return

sw.bb88:                                          ; preds = %if.end
  %tobool = icmp eq i32 %replace_dest, 0
  %fld90 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx92 = bitcast [1 x %union.rtunion_def]* %fld90 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx92, align 8, !tbaa !1
  br i1 %tobool, label %if.else, label %if.then89

if.then89:                                        ; preds = %sw.bb88
  %call93 = tail call %struct.rtx_def* @replace_regs(%struct.rtx_def* %10, %struct.rtx_def** %reg_map, i32 %nregs, i32 0)
  %11 = getelementptr inbounds [1 x %union.rtunion_def]* %fld90, i64 0, i64 0, i32 0
  %call93.c = ptrtoint %struct.rtx_def* %call93 to i64
  store i64 %call93.c, i64* %11, align 8, !tbaa !1
  br label %if.end133

if.else:                                          ; preds = %sw.bb88
  %12 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load100 = load i32* %12, align 8
  %bf.clear101 = and i32 %bf.load100, 65535
  switch i32 %bf.clear101, label %if.end133 [
    i32 66, label %if.then109
    i32 64, label %if.then109
    i32 133, label %sw.epilog
  ]

if.then109:                                       ; preds = %if.else, %if.else
  %arrayidx114 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 0
  %rtx115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx115, align 8, !tbaa !1
  %call116 = tail call %struct.rtx_def* @replace_regs(%struct.rtx_def* %13, %struct.rtx_def** %reg_map, i32 %nregs, i32 0)
  %14 = load %struct.rtx_def** %rtx92, align 8, !tbaa !1
  %15 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 0, i32 0
  %call116.c = ptrtoint %struct.rtx_def* %call116 to i64
  store i64 %call116.c, i64* %15, align 8, !tbaa !1
  br label %if.end133

if.end133:                                        ; preds = %if.else, %if.then109, %if.then89
  %arrayidx135 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**
  %16 = load %struct.rtx_def** %rtx136, align 8, !tbaa !1
  %call137 = tail call %struct.rtx_def* @replace_regs(%struct.rtx_def* %16, %struct.rtx_def** %reg_map, i32 %nregs, i32 0)
  %17 = getelementptr inbounds %union.rtunion_def* %arrayidx135, i64 0, i32 0
  %call137.c = ptrtoint %struct.rtx_def* %call137 to i64
  store i64 %call137.c, i64* %17, align 8, !tbaa !1
  ret %struct.rtx_def* %x

sw.epilog:                                        ; preds = %if.else, %land.lhs.true44, %if.end, %sw.bb30, %land.lhs.true36, %land.lhs.true54
  %idxprom141255 = zext i32 %bf.clear to i64
  %arrayidx142 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom141255
  %18 = load i8** %arrayidx142, align 8, !tbaa !1
  %arrayidx144 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom141255
  %19 = load i8* %arrayidx144, align 1, !tbaa !5
  %cmp145260 = icmp eq i8 %19, 0
  br i1 %cmp145260, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %20 = zext i8 %19 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv262 = phi i64 [ %20, %for.body.lr.ph ], [ %indvars.iv.next263, %for.cond.backedge ]
  %indvars.iv.next263 = add nsw i64 %indvars.iv262, -1
  %arrayidx148 = getelementptr inbounds i8* %18, i64 %indvars.iv.next263
  %21 = load i8* %arrayidx148, align 1, !tbaa !5
  switch i8 %21, label %for.cond.backedge [
    i8 101, label %if.then152
    i8 69, label %for.cond169.preheader
  ]

for.cond.backedge:                                ; preds = %for.body175, %for.cond169.preheader, %for.body, %if.then152
  %22 = trunc i64 %indvars.iv.next263 to i32
  %cmp145 = icmp sgt i32 %22, 0
  br i1 %cmp145, label %for.body, label %return

for.cond169.preheader:                            ; preds = %for.body
  %arrayidx172 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next263
  %rtvec = bitcast %union.rtunion_def* %arrayidx172 to %struct.rtvec_def**
  %23 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem256 = getelementptr inbounds %struct.rtvec_def* %23, i64 0, i32 0
  %24 = load i32* %num_elem256, align 4, !tbaa !6
  %cmp173257 = icmp sgt i32 %24, 0
  br i1 %cmp173257, label %for.body175, label %for.cond.backedge

if.then152:                                       ; preds = %for.body
  %arrayidx155 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next263
  %rtx156 = bitcast %union.rtunion_def* %arrayidx155 to %struct.rtx_def**
  %25 = load %struct.rtx_def** %rtx156, align 8, !tbaa !1
  %call157 = tail call %struct.rtx_def* @replace_regs(%struct.rtx_def* %25, %struct.rtx_def** %reg_map, i32 %nregs, i32 %replace_dest)
  %26 = getelementptr inbounds %union.rtunion_def* %arrayidx155, i64 0, i32 0
  %call157.c = ptrtoint %struct.rtx_def* %call157 to i64
  store i64 %call157.c, i64* %26, align 8, !tbaa !1
  br label %for.cond.backedge

for.body175:                                      ; preds = %for.cond169.preheader, %for.body175
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body175 ], [ 0, %for.cond169.preheader ]
  %27 = phi %struct.rtvec_def* [ %30, %for.body175 ], [ %23, %for.cond169.preheader ]
  %arrayidx181 = getelementptr inbounds %struct.rtvec_def* %27, i64 0, i32 1, i64 %indvars.iv
  %28 = load %struct.rtx_def** %arrayidx181, align 8, !tbaa !1
  %call182 = tail call %struct.rtx_def* @replace_regs(%struct.rtx_def* %28, %struct.rtx_def** %reg_map, i32 %nregs, i32 %replace_dest)
  %29 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %arrayidx189 = getelementptr inbounds %struct.rtvec_def* %29, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %call182, %struct.rtx_def** %arrayidx189, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %30 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %30, i64 0, i32 0
  %31 = load i32* %num_elem, align 4, !tbaa !6
  %32 = trunc i64 %indvars.iv.next to i32
  %cmp173 = icmp slt i32 %32, %31
  br i1 %cmp173, label %for.body175, label %for.cond.backedge

return:                                           ; preds = %for.cond.backedge, %sw.epilog, %sw.bb1, %land.lhs.true, %if.then8, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %entry, %if.then66, %if.then17
  %retval.0 = phi %struct.rtx_def* [ %call86, %if.then66 ], [ %call, %if.then17 ], [ null, %entry ], [ %x, %if.end ], [ %x, %if.end ], [ %x, %if.end ], [ %x, %if.end ], [ %x, %if.end ], [ %x, %if.end ], [ %x, %if.end ], [ %x, %if.end ], [ %x, %if.end ], [ %2, %if.then8 ], [ %x, %land.lhs.true ], [ %x, %sw.bb1 ], [ %x, %sw.epilog ], [ %x, %for.cond.backedge ]
  ret %struct.rtx_def* %retval.0
}

declare %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

declare %struct.rtx_def* @simplify_gen_subreg(i32, %struct.rtx_def*, i32, i32) #2

; Function Attrs: nounwind readonly uwtable
define i32 @computed_jump_p(%struct.rtx_def* nocapture readonly %insn) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 33
  br i1 %cmp, label %if.then, label %if.end92

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %2 = load i8* getelementptr inbounds ([153 x i8]* @rtx_class, i64 0, i64 33), align 1, !tbaa !5
  %cmp.i = icmp eq i8 %2, 105
  br i1 %cmp.i, label %if.end.i, label %if.else

if.end.i:                                         ; preds = %if.then
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %link.0.in26.i = bitcast %union.rtunion_def* %arrayidx2.i to %struct.rtx_def**
  %link.027.i = load %struct.rtx_def** %link.0.in26.i, align 8
  %tobool28.i = icmp eq %struct.rtx_def* %link.027.i, null
  br i1 %tobool28.i, label %if.else, label %for.body.us.i

for.body.us.i:                                    ; preds = %if.end.i, %for.inc.us.i
  %link.029.us.i = phi %struct.rtx_def* [ %link.0.us.i, %for.inc.us.i ], [ %link.027.i, %if.end.i ]
  %3 = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 0
  %bf.load3.us.i = load i32* %3, align 8
  %bf.clear4.us.i = and i32 %bf.load3.us.i, 16711680
  %cmp5.us.i = icmp eq i32 %bf.clear4.us.i, 851968
  br i1 %cmp5.us.i, label %return, label %for.inc.us.i

for.inc.us.i:                                     ; preds = %for.body.us.i
  %arrayidx17.us.i = getelementptr inbounds %struct.rtx_def* %link.029.us.i, i64 0, i32 1, i64 1
  %link.0.in.us.i = bitcast %union.rtunion_def* %arrayidx17.us.i to %struct.rtx_def**
  %link.0.us.i = load %struct.rtx_def** %link.0.in.us.i, align 8
  %tobool.us.i = icmp eq %struct.rtx_def* %link.0.us.i, null
  br i1 %tobool.us.i, label %if.else, label %for.body.us.i

if.else:                                          ; preds = %for.inc.us.i, %if.then, %if.end.i
  %4 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load2 = load i32* %4, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  switch i32 %bf.clear3, label %if.end92 [
    i32 39, label %if.then5
    i32 47, label %land.lhs.true77
  ]

if.then5:                                         ; preds = %if.else
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtvec_def**
  %5 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 0
  %6 = load i32* %num_elem, align 4, !tbaa !6
  %cmp8118 = icmp sgt i32 %6, 0
  br i1 %cmp8118, label %for.body.lr.ph, label %if.end92

for.body.lr.ph:                                   ; preds = %if.then5
  %7 = sext i32 %6 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %indvars.iv122.in = phi i64 [ %7, %for.body.lr.ph ], [ %indvars.iv122, %for.inc ]
  %has_use_labelref.0120 = phi i32 [ 0, %for.body.lr.ph ], [ %has_use_labelref.1, %for.inc ]
  %indvars.iv122 = add i64 %indvars.iv122.in, -1
  %arrayidx12 = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 1, i64 %indvars.iv122
  %8 = load %struct.rtx_def** %arrayidx12, align 8, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load13 = load i32* %9, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp15 = icmp eq i32 %bf.clear14, 48
  br i1 %cmp15, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %arrayidx23 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 0
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx24, align 8, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load25 = load i32* %11, align 8
  %bf.clear26 = and i32 %bf.load25, 65535
  %cmp27 = icmp eq i32 %bf.clear26, 67
  %.has_use_labelref.0 = select i1 %cmp27, i32 1, i32 %has_use_labelref.0120
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %has_use_labelref.1 = phi i32 [ %has_use_labelref.0120, %for.body ], [ %.has_use_labelref.0, %land.lhs.true ]
  %12 = trunc i64 %indvars.iv122 to i32
  %cmp8 = icmp sgt i32 %12, 0
  br i1 %cmp8, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc
  %tobool29.not = icmp ne i32 %has_use_labelref.1, 0
  %cmp8118.not = xor i1 %cmp8118, true
  %brmerge = or i1 %tobool29.not, %cmp8118.not
  br i1 %brmerge, label %if.end92, label %for.body34.lr.ph

for.body34.lr.ph:                                 ; preds = %for.end
  %13 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !1
  %14 = sext i32 %6 to i64
  br label %for.body34

for.body34:                                       ; preds = %for.body34.lr.ph, %for.inc69
  %indvars.iv.in = phi i64 [ %14, %for.body34.lr.ph ], [ %indvars.iv, %for.inc69 ]
  %indvars.iv = add i64 %indvars.iv.in, -1
  %arrayidx40 = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 1, i64 %indvars.iv
  %15 = load %struct.rtx_def** %arrayidx40, align 8, !tbaa !1
  %16 = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 0
  %bf.load41 = load i32* %16, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 47
  br i1 %cmp43, label %land.lhs.true44, label %for.inc69

land.lhs.true44:                                  ; preds = %for.body34
  %fld51 = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 1
  %rtx53 = bitcast [1 x %union.rtunion_def]* %fld51 to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx53, align 8, !tbaa !1
  %cmp54 = icmp eq %struct.rtx_def* %17, %13
  br i1 %cmp54, label %land.lhs.true55, label %for.inc69

land.lhs.true55:                                  ; preds = %land.lhs.true44
  %arrayidx63 = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 1, i64 1
  %rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx64, align 8, !tbaa !1
  %call65 = tail call fastcc i32 @computed_jump_p_1(%struct.rtx_def* %18)
  %tobool66 = icmp eq i32 %call65, 0
  br i1 %tobool66, label %for.inc69, label %return

for.inc69:                                        ; preds = %land.lhs.true55, %for.body34, %land.lhs.true44
  %19 = trunc i64 %indvars.iv to i32
  %cmp33 = icmp sgt i32 %19, 0
  br i1 %cmp33, label %for.body34, label %if.end92

land.lhs.true77:                                  ; preds = %if.else
  %fld78 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1
  %rtx80 = bitcast [1 x %union.rtunion_def]* %fld78 to %struct.rtx_def**
  %20 = load %struct.rtx_def** %rtx80, align 8, !tbaa !1
  %21 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !1
  %cmp81 = icmp eq %struct.rtx_def* %20, %21
  br i1 %cmp81, label %land.lhs.true82, label %if.end92

land.lhs.true82:                                  ; preds = %land.lhs.true77
  %arrayidx84 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**
  %22 = load %struct.rtx_def** %rtx85, align 8, !tbaa !1
  %call86 = tail call fastcc i32 @computed_jump_p_1(%struct.rtx_def* %22)
  %tobool87 = icmp eq i32 %call86, 0
  br i1 %tobool87, label %if.end92, label %return

if.end92:                                         ; preds = %for.inc69, %for.end, %if.then5, %if.else, %land.lhs.true82, %land.lhs.true77, %entry
  br label %return

return:                                           ; preds = %for.body.us.i, %land.lhs.true55, %land.lhs.true82, %if.end92
  %retval.0 = phi i32 [ 0, %if.end92 ], [ 1, %land.lhs.true82 ], [ 1, %land.lhs.true55 ], [ 0, %for.body.us.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define internal fastcc i32 @computed_jump_p_1(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 67, label %return
    i32 59, label %return
    i32 58, label %sw.bb1
    i32 54, label %sw.bb1
    i32 55, label %sw.bb1
    i32 56, label %sw.bb1
    i32 68, label %sw.bb1
    i32 61, label %sw.bb1
    i32 66, label %sw.bb2
    i32 72, label %sw.bb10
  ]

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  br label %return

sw.bb2:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load3 = load i32* %2, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp = icmp eq i32 %bf.clear4, 68
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb2
  %bf.clear9 = and i32 %bf.load3, 67108864
  %phitmp = icmp eq i32 %bf.clear9, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb2
  %3 = phi i1 [ true, %sw.bb2 ], [ %phitmp, %land.rhs ]
  %lnot.ext = zext i1 %3 to i32
  br label %return

sw.bb10:                                          ; preds = %entry
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx13, align 8, !tbaa !1
  %call = tail call fastcc i32 @computed_jump_p_1(%struct.rtx_def* %4)
  %tobool14 = icmp eq i32 %call, 0
  br i1 %tobool14, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %sw.bb10
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 2
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx17, align 8, !tbaa !1
  %call18 = tail call fastcc i32 @computed_jump_p_1(%struct.rtx_def* %5)
  %tobool19 = icmp ne i32 %call18, 0
  br label %lor.end

lor.end:                                          ; preds = %sw.bb10, %lor.rhs
  %6 = phi i1 [ true, %sw.bb10 ], [ %tobool19, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32
  br label %return

sw.epilog:                                        ; preds = %entry
  %idxprom80 = zext i32 %bf.clear to i64
  %arrayidx20 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom80
  %7 = load i8** %arrayidx20, align 8, !tbaa !1
  %arrayidx22 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom80
  %8 = load i8* %arrayidx22, align 1, !tbaa !5
  %cmp2386 = icmp eq i8 %8, 0
  br i1 %cmp2386, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %9 = zext i8 %8 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv89 = phi i64 [ %9, %for.body.lr.ph ], [ %indvars.iv.next90, %for.cond.backedge ]
  %indvars.iv.next90 = add nsw i64 %indvars.iv89, -1
  %arrayidx26 = getelementptr inbounds i8* %7, i64 %indvars.iv.next90
  %10 = load i8* %arrayidx26, align 1, !tbaa !5
  switch i8 %10, label %for.cond.backedge [
    i8 101, label %land.lhs.true
    i8 69, label %for.cond42.preheader
  ]

land.lhs.true:                                    ; preds = %for.body
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next90
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx33, align 8, !tbaa !1
  %call34 = tail call fastcc i32 @computed_jump_p_1(%struct.rtx_def* %11)
  %tobool35 = icmp eq i32 %call34, 0
  br i1 %tobool35, label %for.cond.backedge, label %return

for.cond.backedge:                                ; preds = %for.cond42, %for.body, %land.lhs.true, %for.cond42.preheader
  %12 = trunc i64 %indvars.iv.next90 to i32
  %cmp23 = icmp sgt i32 %12, 0
  br i1 %cmp23, label %for.body, label %return

for.cond42.preheader:                             ; preds = %for.body
  %arrayidx45 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next90
  %rtvec = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtvec_def**
  %13 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem82 = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 0
  %14 = load i32* %num_elem82, align 4, !tbaa !6
  %cmp4683 = icmp sgt i32 %14, 0
  br i1 %cmp4683, label %for.body48, label %for.cond.backedge

for.cond42:                                       ; preds = %for.body48
  %15 = trunc i64 %indvars.iv.next to i32
  %cmp46 = icmp slt i32 %15, %14
  br i1 %cmp46, label %for.body48, label %for.cond.backedge

for.body48:                                       ; preds = %for.cond42.preheader, %for.cond42
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond42 ], [ 0, %for.cond42.preheader ]
  %arrayidx54 = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 1, i64 %indvars.iv
  %16 = load %struct.rtx_def** %arrayidx54, align 8, !tbaa !1
  %call55 = tail call fastcc i32 @computed_jump_p_1(%struct.rtx_def* %16)
  %tobool56 = icmp eq i32 %call55, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool56, label %for.cond42, label %return

return:                                           ; preds = %land.lhs.true, %for.cond.backedge, %for.body48, %sw.epilog, %entry, %entry, %lor.end, %land.end, %sw.bb1
  %retval.0 = phi i32 [ %lor.ext, %lor.end ], [ %lnot.ext, %land.end ], [ 1, %sw.bb1 ], [ 0, %entry ], [ 0, %entry ], [ 0, %sw.epilog ], [ 1, %for.body48 ], [ 1, %land.lhs.true ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @for_each_rtx(%struct.rtx_def** %x, i32 (%struct.rtx_def**, i8*)* %f, i8* %data) #1 {
entry:
  %call = tail call i32 %f(%struct.rtx_def** %x, i8* %data) #4
  switch i32 %call, label %if.then2 [
    i32 -1, label %return
    i32 0, label %if.end3
  ]

if.then2:                                         ; preds = %entry
  br label %return

if.end3:                                          ; preds = %entry
  %0 = load %struct.rtx_def** %x, align 8, !tbaa !1
  %cmp4 = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.end3
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom78 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom78
  %2 = load i8* %arrayidx, align 1, !tbaa !5
  %conv = zext i8 %2 to i32
  %arrayidx10 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom78
  %3 = load i8** %arrayidx10, align 8, !tbaa !1
  %cmp1185 = icmp eq i8 %2, 0
  br i1 %cmp1185, label %return, label %for.body

for.body:                                         ; preds = %if.end6, %for.inc50
  %indvars.iv89 = phi i64 [ %indvars.iv.next90, %for.inc50 ], [ 0, %if.end6 ]
  %arrayidx14 = getelementptr inbounds i8* %3, i64 %indvars.iv89
  %4 = load i8* %arrayidx14, align 1, !tbaa !5
  %conv15 = sext i8 %4 to i32
  switch i32 %conv15, label %for.inc50 [
    i32 101, label %sw.bb
    i32 86, label %sw.bb23
    i32 69, label %sw.bb23
  ]

sw.bb:                                            ; preds = %for.body
  %5 = load %struct.rtx_def** %x, align 8, !tbaa !1
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 %indvars.iv89
  %rtx = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %call18 = tail call i32 @for_each_rtx(%struct.rtx_def** %rtx, i32 (%struct.rtx_def**, i8*)* %f, i8* %data)
  %cmp19 = icmp eq i32 %call18, 0
  br i1 %cmp19, label %for.inc50, label %return

sw.bb23:                                          ; preds = %for.body, %for.body
  %6 = load %struct.rtx_def** %x, align 8
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 %indvars.iv89
  %rtvec = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %cmp27 = icmp eq %struct.rtvec_def* %7, null
  br i1 %cmp27, label %for.inc50, label %for.cond30.preheader

for.cond30.preheader:                             ; preds = %sw.bb23
  %num_elem82 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %8 = load i32* %num_elem82, align 4, !tbaa !6
  %cmp3583 = icmp sgt i32 %8, 0
  br i1 %cmp3583, label %for.body37, label %for.inc50

for.cond30:                                       ; preds = %for.body37
  %9 = load %struct.rtx_def** %x, align 8, !tbaa !1
  %arrayidx33 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 %indvars.iv89
  %rtvec34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtvec_def**
  %10 = load %struct.rtvec_def** %rtvec34, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %10, i64 0, i32 0
  %11 = load i32* %num_elem, align 4, !tbaa !6
  %12 = trunc i64 %indvars.iv.next to i32
  %cmp35 = icmp slt i32 %12, %11
  br i1 %cmp35, label %for.body37, label %for.inc50

for.body37:                                       ; preds = %for.cond30.preheader, %for.cond30
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond30 ], [ 0, %for.cond30.preheader ]
  %13 = phi %struct.rtvec_def* [ %10, %for.cond30 ], [ %7, %for.cond30.preheader ]
  %arrayidx43 = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 1, i64 %indvars.iv
  %call44 = tail call i32 @for_each_rtx(%struct.rtx_def** %arrayidx43, i32 (%struct.rtx_def**, i8*)* %f, i8* %data)
  %cmp45 = icmp eq i32 %call44, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp45, label %for.cond30, label %return

for.inc50:                                        ; preds = %for.cond30, %for.cond30.preheader, %sw.bb, %sw.bb23, %for.body
  %indvars.iv.next90 = add nuw nsw i64 %indvars.iv89, 1
  %14 = trunc i64 %indvars.iv.next90 to i32
  %cmp11 = icmp slt i32 %14, %conv
  br i1 %cmp11, label %for.body, label %return

return:                                           ; preds = %sw.bb, %for.inc50, %for.body37, %if.end6, %if.end3, %entry, %if.then2
  %retval.0 = phi i32 [ %call, %if.then2 ], [ 0, %entry ], [ 0, %if.end3 ], [ 0, %if.end6 ], [ %call44, %for.body37 ], [ %call18, %sw.bb ], [ 0, %for.inc50 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @regno_use_in(i32 %regno, %struct.rtx_def* readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !9
  %cmp1 = icmp eq i32 %1, %regno
  br i1 %cmp1, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true, %entry
  %idxprom70 = zext i32 %bf.clear to i64
  %arrayidx4 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom70
  %2 = load i8** %arrayidx4, align 8, !tbaa !1
  %arrayidx8 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom70
  %3 = load i8* %arrayidx8, align 1, !tbaa !5
  %cmp973 = icmp eq i8 %3, 0
  br i1 %cmp973, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %4 = zext i8 %3 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv76 = phi i64 [ %4, %for.body.lr.ph ], [ %indvars.iv.next77, %for.cond.backedge ]
  %indvars.iv.next77 = add nsw i64 %indvars.iv76, -1
  %arrayidx12 = getelementptr inbounds i8* %2, i64 %indvars.iv.next77
  %5 = load i8* %arrayidx12, align 1, !tbaa !5
  switch i8 %5, label %for.cond.backedge [
    i8 101, label %if.then16
    i8 69, label %if.then27
  ]

for.cond.backedge:                                ; preds = %for.cond32, %for.body, %if.then16
  %6 = trunc i64 %indvars.iv.next77 to i32
  %cmp9 = icmp sgt i32 %6, 0
  br i1 %cmp9, label %for.body, label %return

if.then16:                                        ; preds = %for.body
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next77
  %rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call %struct.rtx_def* @regno_use_in(i32 %regno, %struct.rtx_def* %7)
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %for.cond.backedge, label %return

if.then27:                                        ; preds = %for.body
  %arrayidx30 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next77
  %rtvec = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtvec_def**
  %8 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 0
  %9 = load i32* %num_elem, align 4, !tbaa !6
  %10 = sext i32 %9 to i64
  br label %for.cond32

for.cond32:                                       ; preds = %for.body35, %if.then27
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body35 ], [ %10, %if.then27 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %11 = trunc i64 %indvars.iv to i32
  %cmp33 = icmp sgt i32 %11, 0
  br i1 %cmp33, label %for.body35, label %for.cond.backedge

for.body35:                                       ; preds = %for.cond32
  %arrayidx41 = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 1, i64 %indvars.iv.next
  %12 = load %struct.rtx_def** %arrayidx41, align 8, !tbaa !1
  %call42 = tail call %struct.rtx_def* @regno_use_in(i32 %regno, %struct.rtx_def* %12)
  %tobool43 = icmp eq %struct.rtx_def* %call42, null
  br i1 %tobool43, label %for.cond32, label %return

return:                                           ; preds = %if.then16, %for.cond.backedge, %for.body35, %if.end, %land.lhs.true
  %retval.0 = phi %struct.rtx_def* [ %x, %land.lhs.true ], [ null, %if.end ], [ %call42, %for.body35 ], [ %call, %if.then16 ], [ null, %for.cond.backedge ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @commutative_operand_precedence(%struct.rtx_def* nocapture readonly %op) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp3 = icmp eq i32 %bf.clear, 55
  br i1 %cmp3, label %return, label %if.end5

if.end5:                                          ; preds = %if.end
  %bf.clear.off = add i32 %bf.clear, -67
  %switch = icmp ult i32 %bf.clear.off, 2
  br i1 %switch, label %return, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %if.end5
  switch i32 %bf.clear, label %if.end47 [
    i32 140, label %return
    i32 134, label %return
    i32 58, label %return
    i32 56, label %return
    i32 63, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load41 = load i32* %2, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %idxprom101 = zext i32 %bf.clear42 to i64
  %arrayidx43 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom101
  %3 = load i8* %arrayidx43, align 1, !tbaa !5
  %cmp44 = icmp eq i8 %3, 111
  br i1 %cmp44, label %return, label %if.end73

if.end47:                                         ; preds = %lor.lhs.false12
  switch i32 %bf.clear, label %if.end73 [
    i32 77, label %return
    i32 86, label %return
    i32 78, label %return
    i32 75, label %return
    i32 76, label %return
  ]

if.end73:                                         ; preds = %land.lhs.true, %if.end47
  %idxprom76100 = zext i32 %bf.clear to i64
  %arrayidx77 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom76100
  %4 = load i8* %arrayidx77, align 1, !tbaa !5
  %cmp79 = icmp eq i8 %4, 111
  %. = sext i1 %cmp79 to i32
  br label %return

return:                                           ; preds = %lor.lhs.false12, %lor.lhs.false12, %lor.lhs.false12, %lor.lhs.false12, %if.end5, %if.end73, %if.end47, %if.end47, %if.end47, %if.end47, %if.end47, %land.lhs.true, %if.end, %entry
  %retval.0 = phi i32 [ -5, %entry ], [ -4, %if.end ], [ -3, %if.end5 ], [ -2, %land.lhs.true ], [ 2, %if.end47 ], [ 2, %if.end47 ], [ 2, %if.end47 ], [ 2, %if.end47 ], [ 2, %if.end47 ], [ %., %if.end73 ], [ -3, %lor.lhs.false12 ], [ -3, %lor.lhs.false12 ], [ -3, %lor.lhs.false12 ], [ -3, %lor.lhs.false12 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @swap_commutative_operands_p(%struct.rtx_def* nocapture readonly %x, %struct.rtx_def* nocapture readonly %y) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load.i = load i32* %0, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 54
  br i1 %cmp.i, label %commutative_operand_precedence.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %cmp3.i = icmp eq i32 %bf.clear.i, 55
  br i1 %cmp3.i, label %commutative_operand_precedence.exit, label %if.end5.i

if.end5.i:                                        ; preds = %if.end.i
  %bf.clear.off.i = add i32 %bf.clear.i, -67
  %switch.i = icmp ult i32 %bf.clear.off.i, 2
  br i1 %switch.i, label %commutative_operand_precedence.exit, label %lor.lhs.false12.i

lor.lhs.false12.i:                                ; preds = %if.end5.i
  switch i32 %bf.clear.i, label %if.end47.i [
    i32 140, label %commutative_operand_precedence.exit
    i32 134, label %commutative_operand_precedence.exit
    i32 58, label %commutative_operand_precedence.exit
    i32 56, label %commutative_operand_precedence.exit
    i32 63, label %land.lhs.true.i
  ]

land.lhs.true.i:                                  ; preds = %lor.lhs.false12.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load41.i = load i32* %2, align 8
  %bf.clear42.i = and i32 %bf.load41.i, 65535
  %idxprom101.i = zext i32 %bf.clear42.i to i64
  %arrayidx43.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom101.i
  %3 = load i8* %arrayidx43.i, align 1, !tbaa !5
  %cmp44.i = icmp eq i8 %3, 111
  br i1 %cmp44.i, label %commutative_operand_precedence.exit, label %if.end73.i

if.end47.i:                                       ; preds = %lor.lhs.false12.i
  switch i32 %bf.clear.i, label %if.end73.i [
    i32 77, label %commutative_operand_precedence.exit
    i32 86, label %commutative_operand_precedence.exit
    i32 78, label %commutative_operand_precedence.exit
    i32 75, label %commutative_operand_precedence.exit
    i32 76, label %commutative_operand_precedence.exit
  ]

if.end73.i:                                       ; preds = %if.end47.i, %land.lhs.true.i
  %idxprom76100.i = zext i32 %bf.clear.i to i64
  %arrayidx77.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom76100.i
  %4 = load i8* %arrayidx77.i, align 1, !tbaa !5
  %cmp79.i = icmp eq i8 %4, 111
  %..i = sext i1 %cmp79.i to i32
  br label %commutative_operand_precedence.exit

commutative_operand_precedence.exit:              ; preds = %entry, %if.end.i, %if.end5.i, %lor.lhs.false12.i, %lor.lhs.false12.i, %lor.lhs.false12.i, %lor.lhs.false12.i, %land.lhs.true.i, %if.end47.i, %if.end47.i, %if.end47.i, %if.end47.i, %if.end47.i, %if.end73.i
  %retval.0.i = phi i32 [ -5, %entry ], [ -4, %if.end.i ], [ -3, %if.end5.i ], [ -2, %land.lhs.true.i ], [ 2, %if.end47.i ], [ 2, %if.end47.i ], [ 2, %if.end47.i ], [ 2, %if.end47.i ], [ 2, %if.end47.i ], [ %..i, %if.end73.i ], [ -3, %lor.lhs.false12.i ], [ -3, %lor.lhs.false12.i ], [ -3, %lor.lhs.false12.i ], [ -3, %lor.lhs.false12.i ]
  %5 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 0
  %bf.load.i2 = load i32* %5, align 8
  %bf.clear.i3 = and i32 %bf.load.i2, 65535
  %cmp.i4 = icmp eq i32 %bf.clear.i3, 54
  br i1 %cmp.i4, label %commutative_operand_precedence.exit26, label %if.end.i6

if.end.i6:                                        ; preds = %commutative_operand_precedence.exit
  %cmp3.i5 = icmp eq i32 %bf.clear.i3, 55
  br i1 %cmp3.i5, label %commutative_operand_precedence.exit26, label %if.end5.i9

if.end5.i9:                                       ; preds = %if.end.i6
  %bf.clear.off.i7 = add i32 %bf.clear.i3, -67
  %switch.i8 = icmp ult i32 %bf.clear.off.i7, 2
  br i1 %switch.i8, label %commutative_operand_precedence.exit26, label %lor.lhs.false12.i10

lor.lhs.false12.i10:                              ; preds = %if.end5.i9
  switch i32 %bf.clear.i3, label %if.end47.i19 [
    i32 140, label %commutative_operand_precedence.exit26
    i32 134, label %commutative_operand_precedence.exit26
    i32 58, label %commutative_operand_precedence.exit26
    i32 56, label %commutative_operand_precedence.exit26
    i32 63, label %land.lhs.true.i18
  ]

land.lhs.true.i18:                                ; preds = %lor.lhs.false12.i10
  %arrayidx.i11 = getelementptr inbounds %struct.rtx_def* %y, i64 0, i32 1, i64 0
  %rtx.i12 = bitcast %union.rtunion_def* %arrayidx.i11 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx.i12, align 8, !tbaa !1
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load41.i13 = load i32* %7, align 8
  %bf.clear42.i14 = and i32 %bf.load41.i13, 65535
  %idxprom101.i15 = zext i32 %bf.clear42.i14 to i64
  %arrayidx43.i16 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom101.i15
  %8 = load i8* %arrayidx43.i16, align 1, !tbaa !5
  %cmp44.i17 = icmp eq i8 %8, 111
  br i1 %cmp44.i17, label %commutative_operand_precedence.exit26, label %if.end73.i24

if.end47.i19:                                     ; preds = %lor.lhs.false12.i10
  switch i32 %bf.clear.i3, label %if.end73.i24 [
    i32 77, label %commutative_operand_precedence.exit26
    i32 86, label %commutative_operand_precedence.exit26
    i32 78, label %commutative_operand_precedence.exit26
    i32 75, label %commutative_operand_precedence.exit26
    i32 76, label %commutative_operand_precedence.exit26
  ]

if.end73.i24:                                     ; preds = %if.end47.i19, %land.lhs.true.i18
  %idxprom76100.i20 = zext i32 %bf.clear.i3 to i64
  %arrayidx77.i21 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom76100.i20
  %9 = load i8* %arrayidx77.i21, align 1, !tbaa !5
  %cmp79.i22 = icmp eq i8 %9, 111
  %..i23 = sext i1 %cmp79.i22 to i32
  br label %commutative_operand_precedence.exit26

commutative_operand_precedence.exit26:            ; preds = %commutative_operand_precedence.exit, %if.end.i6, %if.end5.i9, %lor.lhs.false12.i10, %lor.lhs.false12.i10, %lor.lhs.false12.i10, %lor.lhs.false12.i10, %land.lhs.true.i18, %if.end47.i19, %if.end47.i19, %if.end47.i19, %if.end47.i19, %if.end47.i19, %if.end73.i24
  %retval.0.i25 = phi i32 [ -5, %commutative_operand_precedence.exit ], [ -4, %if.end.i6 ], [ -3, %if.end5.i9 ], [ -2, %land.lhs.true.i18 ], [ 2, %if.end47.i19 ], [ 2, %if.end47.i19 ], [ 2, %if.end47.i19 ], [ 2, %if.end47.i19 ], [ 2, %if.end47.i19 ], [ %..i23, %if.end73.i24 ], [ -3, %lor.lhs.false12.i10 ], [ -3, %lor.lhs.false12.i10 ], [ -3, %lor.lhs.false12.i10 ], [ -3, %lor.lhs.false12.i10 ]
  %cmp = icmp slt i32 %retval.0.i, %retval.0.i25
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly uwtable
define i32 @auto_inc_p(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %bf.clear.off = add i32 %bf.clear, -96
  %switch = icmp ult i32 %bf.clear.off, 6
  br i1 %switch, label %sw.bb, label %sw.epilog

sw.bb:                                            ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %2 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !1
  %cmp = icmp eq %struct.rtx_def* %1, %2
  br i1 %cmp, label %sw.epilog, label %return

sw.epilog:                                        ; preds = %sw.bb, %entry
  br label %return

return:                                           ; preds = %sw.bb, %sw.epilog
  %retval.0 = phi i32 [ 0, %sw.epilog ], [ 1, %sw.bb ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @insns_safe_to_move_p(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def** %new_to) #1 {
entry:
  %tobool = icmp ne %struct.rtx_def** %new_to, null
  br i1 %tobool, label %if.then, label %while.cond.preheader

if.then:                                          ; preds = %entry
  store %struct.rtx_def* %to, %struct.rtx_def** %new_to, align 8, !tbaa !1
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then, %entry
  %tobool141 = icmp eq %struct.rtx_def* %from, null
  br i1 %tobool141, label %return, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  br i1 %tobool, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end22.us
  %r.044.us = phi %struct.rtx_def* [ %2, %if.end22.us ], [ %from, %while.body.lr.ph ]
  %past_to_p.043.us = phi i32 [ %past_to_p.0.mux.us, %if.end22.us ], [ 0, %while.body.lr.ph ]
  %eh_region_count.042.us = phi i32 [ %eh_region_count.1.us, %if.end22.us ], [ 0, %while.body.lr.ph ]
  %0 = getelementptr inbounds %struct.rtx_def* %r.044.us, i64 0, i32 0
  %bf.load.us = load i32* %0, align 8
  %bf.clear.us = and i32 %bf.load.us, 65535
  %cmp.us = icmp eq i32 %bf.clear.us, 37
  br i1 %cmp.us, label %if.then2.us, label %if.else.us

if.else.us:                                       ; preds = %while.body.us
  %tobool7.us = icmp eq i32 %past_to_p.043.us, 0
  br i1 %tobool7.us, label %if.end17.us, label %return

if.then2.us:                                      ; preds = %while.body.us
  %arrayidx.us = getelementptr inbounds %struct.rtx_def* %r.044.us, i64 0, i32 1, i64 4
  %rtint.us = bitcast %union.rtunion_def* %arrayidx.us to i32*
  %1 = load i32* %rtint.us, align 4, !tbaa !9
  switch i32 %1, label %if.end17.us [
    i32 -86, label %sw.bb.us
    i32 -85, label %sw.bb3.us
  ]

sw.bb3.us:                                        ; preds = %if.then2.us
  %cmp4.us = icmp eq i32 %eh_region_count.042.us, 0
  br i1 %cmp4.us, label %return, label %if.end6.us

if.end6.us:                                       ; preds = %sw.bb3.us
  %dec.us = add nsw i32 %eh_region_count.042.us, -1
  br label %if.end17.us

sw.bb.us:                                         ; preds = %if.then2.us
  %inc.us = add nsw i32 %eh_region_count.042.us, 1
  br label %if.end17.us

if.end17.us:                                      ; preds = %if.else.us, %if.then2.us, %if.end6.us, %sw.bb.us
  %eh_region_count.1.us = phi i32 [ %eh_region_count.042.us, %if.then2.us ], [ %dec.us, %if.end6.us ], [ %inc.us, %sw.bb.us ], [ %eh_region_count.042.us, %if.else.us ]
  %cmp11.not.us = icmp ne %struct.rtx_def* %r.044.us, %to
  %past_to_p.0.mux.us = select i1 %cmp11.not.us, i32 %past_to_p.043.us, i32 1
  %tobool18.us = icmp ne i32 %past_to_p.0.mux.us, 0
  %cmp19.us = icmp eq i32 %eh_region_count.1.us, 0
  %or.cond.us = and i1 %tobool18.us, %cmp19.us
  br i1 %or.cond.us, label %if.then21, label %if.end22.us

if.end22.us:                                      ; preds = %if.end17.us
  %arrayidx24.us = getelementptr inbounds %struct.rtx_def* %r.044.us, i64 0, i32 1, i64 2
  %rtx.us = bitcast %union.rtunion_def* %arrayidx24.us to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx.us, align 8, !tbaa !1
  %tobool1.us = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool1.us, label %return, label %while.body.us

while.body:                                       ; preds = %while.body.lr.ph, %if.end22
  %r.044 = phi %struct.rtx_def* [ %5, %if.end22 ], [ %from, %while.body.lr.ph ]
  %past_to_p.043 = phi i32 [ %past_to_p.0.mux, %if.end22 ], [ 0, %while.body.lr.ph ]
  %eh_region_count.042 = phi i32 [ %eh_region_count.1, %if.end22 ], [ 0, %while.body.lr.ph ]
  %3 = getelementptr inbounds %struct.rtx_def* %r.044, i64 0, i32 0
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %while.body
  %arrayidx = getelementptr inbounds %struct.rtx_def* %r.044, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %4 = load i32* %rtint, align 4, !tbaa !9
  switch i32 %4, label %if.end10 [
    i32 -86, label %sw.bb
    i32 -85, label %sw.bb3
  ]

sw.bb:                                            ; preds = %if.then2
  %inc = add nsw i32 %eh_region_count.042, 1
  br label %if.end10

sw.bb3:                                           ; preds = %if.then2
  %cmp4 = icmp eq i32 %eh_region_count.042, 0
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %sw.bb3
  %dec = add nsw i32 %eh_region_count.042, -1
  br label %if.end10

if.else:                                          ; preds = %while.body
  %tobool7 = icmp eq i32 %past_to_p.043, 0
  br i1 %tobool7, label %if.end10, label %return

if.end10:                                         ; preds = %if.else, %sw.bb, %if.end6, %if.then2
  %eh_region_count.1 = phi i32 [ %eh_region_count.042, %if.then2 ], [ %dec, %if.end6 ], [ %inc, %sw.bb ], [ %eh_region_count.042, %if.else ]
  %cmp11.not = icmp ne %struct.rtx_def* %r.044, %to
  %past_to_p.0.mux = select i1 %cmp11.not, i32 %past_to_p.043, i32 1
  br i1 %cmp11.not, label %if.end17, label %if.then14

if.then14:                                        ; preds = %if.end10
  %cmp15 = icmp eq i32 %eh_region_count.1, 0
  %conv = zext i1 %cmp15 to i32
  br label %return

if.end17:                                         ; preds = %if.end10
  %tobool18 = icmp ne i32 %past_to_p.0.mux, 0
  %cmp19 = icmp eq i32 %eh_region_count.1, 0
  %or.cond = and i1 %tobool18, %cmp19
  br i1 %or.cond, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end17, %if.end17.us
  %r.0.lcssa39 = phi %struct.rtx_def* [ %r.044.us, %if.end17.us ], [ %r.044, %if.end17 ]
  store %struct.rtx_def* %r.0.lcssa39, %struct.rtx_def** %new_to, align 8, !tbaa !1
  br label %return

if.end22:                                         ; preds = %if.end17
  %arrayidx24 = getelementptr inbounds %struct.rtx_def* %r.044, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %tobool1 = icmp eq %struct.rtx_def* %5, null
  br i1 %tobool1, label %return, label %while.body

return:                                           ; preds = %sw.bb3, %if.else, %if.end22, %sw.bb3.us, %if.else.us, %if.end22.us, %while.cond.preheader, %if.then21, %if.then14
  %retval.0 = phi i32 [ 1, %if.then21 ], [ %conv, %if.then14 ], [ 0, %while.cond.preheader ], [ 0, %if.end22.us ], [ 0, %if.else.us ], [ 0, %sw.bb3.us ], [ 0, %if.end22 ], [ 0, %if.else ], [ 0, %sw.bb3 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @loc_mentioned_in_p(%struct.rtx_def** readnone %loc, %struct.rtx_def* readonly %in) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom66 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom66
  %1 = load i8** %arrayidx, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom66
  %2 = load i8* %arrayidx2, align 1, !tbaa !5
  %cmp69 = icmp eq i8 %2, 0
  br i1 %cmp69, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %3 = zext i8 %2 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv73 = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv.next74, %for.cond.backedge ]
  %indvars.iv.next74 = add nsw i64 %indvars.iv73, -1
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %in, i64 0, i32 1, i64 %indvars.iv.next74
  %rtx = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %cmp6 = icmp eq %struct.rtx_def** %rtx, %loc
  br i1 %cmp6, label %return, label %if.end

if.end:                                           ; preds = %for.body
  %arrayidx9 = getelementptr inbounds i8* %1, i64 %indvars.iv.next74
  %4 = load i8* %arrayidx9, align 1, !tbaa !5
  switch i8 %4, label %for.cond.backedge [
    i8 101, label %if.then13
    i8 69, label %if.then25
  ]

for.cond.backedge:                                ; preds = %for.cond30, %if.end, %if.then13
  %5 = trunc i64 %indvars.iv.next74 to i32
  %cmp = icmp sgt i32 %5, 0
  br i1 %cmp, label %for.body, label %return

if.then13:                                        ; preds = %if.end
  %6 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = tail call i32 @loc_mentioned_in_p(%struct.rtx_def** %loc, %struct.rtx_def* %6)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %for.cond.backedge, label %return

if.then25:                                        ; preds = %if.end
  %rtvec = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %8 = load i32* %num_elem, align 4, !tbaa !6
  %9 = sext i32 %8 to i64
  br label %for.cond30

for.cond30:                                       ; preds = %for.body33, %if.then25
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body33 ], [ %9, %if.then25 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %10 = trunc i64 %indvars.iv to i32
  %cmp31 = icmp sgt i32 %10, 0
  br i1 %cmp31, label %for.body33, label %for.cond.backedge

for.body33:                                       ; preds = %for.cond30
  %arrayidx39 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 %indvars.iv.next
  %11 = load %struct.rtx_def** %arrayidx39, align 8, !tbaa !1
  %call40 = tail call i32 @loc_mentioned_in_p(%struct.rtx_def** %loc, %struct.rtx_def* %11)
  %tobool41 = icmp eq i32 %call40, 0
  br i1 %tobool41, label %for.cond30, label %return

return:                                           ; preds = %for.body, %if.then13, %for.cond.backedge, %for.body33, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %for.body33 ], [ 1, %for.body ], [ 1, %if.then13 ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @subreg_lsb(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %fld = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %2 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load1 = load i32* %2, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  %idxprom25 = zext i32 %bf.clear3 to i64
  %arrayidx4 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom25
  %3 = load i16* %arrayidx4, align 2, !tbaa !15
  %idxprom526 = zext i32 %bf.clear to i64
  %arrayidx6 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom526
  %4 = load i16* %arrayidx6, align 2, !tbaa !15
  %cmp = icmp ugt i16 %3, %4
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx10 to i32*
  %5 = load i32* %rtuint, align 4, !tbaa !9
  %6 = load i32* @target_flags, align 4, !tbaa !9
  %and = and i32 %6, 33554432
  %7 = lshr exact i32 %and, 23
  %8 = add i32 %7, 4
  %div = udiv i32 %5, %8
  %9 = lshr exact i32 %and, 20
  %10 = add i32 %9, 32
  %mul = mul i32 %10, %div
  %11 = or i32 %7, 3
  %rem = and i32 %11, %5
  %mul20 = shl nuw nsw i32 %rem, 3
  %add = add i32 %mul20, %mul
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i32 [ %add, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @subreg_regno_offset(i32 %xregno, i32 %xmode, i32 %offset, i32 %ymode) #1 {
entry:
  %cmp = icmp ugt i32 %xregno, 52
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 3031, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.subreg_regno_offset, i64 0, i64 0)) #5
  unreachable

if.end:                                           ; preds = %entry
  %0 = and i32 %xregno, -8
  %1 = icmp eq i32 %0, 8
  %xregno.off = add i32 %xregno, -21
  %2 = icmp ult i32 %xregno.off, 8
  %or.cond = or i1 %1, %2
  %xregno.off173 = add i32 %xregno, -45
  %3 = icmp ult i32 %xregno.off173, 8
  %or.cond182 = or i1 %or.cond, %3
  %xregno.off174 = add i32 %xregno, -29
  %4 = icmp ult i32 %xregno.off174, 8
  %or.cond184 = or i1 %or.cond182, %4
  br i1 %or.cond184, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %idxprom = sext i32 %xmode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %5 = load i32* %arrayidx, align 4, !tbaa !5
  %cmp14 = icmp eq i32 %5, 5
  br i1 %cmp14, label %cond.true64, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp17 = icmp eq i32 %5, 6
  %phitmp179 = select i1 %cmp17, i32 2, i32 1
  br label %cond.true64

cond.false:                                       ; preds = %if.end
  switch i32 %xmode, label %cond.false27 [
    i32 18, label %cond.end39.thread198
    i32 24, label %cond.true23
  ]

cond.end39.thread198:                             ; preds = %cond.false
  %6 = load i32* @target_flags, align 4, !tbaa !9
  %and199 = lshr i32 %6, 25
  %7 = and i32 %and199, 1
  %8 = xor i32 %7, 3
  br label %cond.false76

cond.true23:                                      ; preds = %cond.false
  %9 = load i32* @target_flags, align 4, !tbaa !9
  %and24 = lshr i32 %9, 24
  %10 = and i32 %and24, 2
  %11 = xor i32 %10, 6
  br label %cond.false76

cond.false27:                                     ; preds = %cond.false
  %idxprom28 = sext i32 %xmode to i64
  %arrayidx29 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom28
  %12 = load i8* %arrayidx29, align 1, !tbaa !5
  %conv = zext i8 %12 to i32
  %13 = load i32* @target_flags, align 4, !tbaa !9
  %and30 = lshr i32 %13, 23
  %14 = and i32 %and30, 4
  %15 = add i32 %14, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %15
  %div = sdiv i32 %sub, %15
  br label %cond.false76

cond.true64:                                      ; preds = %cond.true, %lor.rhs
  %cond40.ph = phi i32 [ 2, %cond.true ], [ %phitmp179, %lor.rhs ]
  %idxprom65 = sext i32 %ymode to i64
  %arrayidx66 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom65
  %16 = load i32* %arrayidx66, align 4, !tbaa !5
  %cmp67 = icmp eq i32 %16, 5
  br i1 %cmp67, label %cond.end107, label %lor.rhs69

lor.rhs69:                                        ; preds = %cond.true64
  %cmp72 = icmp eq i32 %16, 6
  %phitmp = select i1 %cmp72, i32 2, i32 1
  br label %cond.end107

cond.false76:                                     ; preds = %cond.true23, %cond.false27, %cond.end39.thread198
  %17 = phi i32 [ %6, %cond.end39.thread198 ], [ %13, %cond.false27 ], [ %9, %cond.true23 ]
  %cond40197 = phi i32 [ %8, %cond.end39.thread198 ], [ %div, %cond.false27 ], [ %11, %cond.true23 ]
  switch i32 %ymode, label %cond.false90 [
    i32 18, label %cond.true79
    i32 24, label %cond.true86
  ]

cond.true79:                                      ; preds = %cond.false76
  %and80 = lshr i32 %17, 25
  %18 = and i32 %and80, 1
  %19 = xor i32 %18, 3
  br label %cond.end107

cond.true86:                                      ; preds = %cond.false76
  %and87 = lshr i32 %17, 24
  %20 = and i32 %and87, 2
  %21 = xor i32 %20, 6
  br label %cond.end107

cond.false90:                                     ; preds = %cond.false76
  %idxprom91 = sext i32 %ymode to i64
  %arrayidx92 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom91
  %22 = load i8* %arrayidx92, align 1, !tbaa !5
  %conv93 = zext i8 %22 to i32
  %and94 = lshr i32 %17, 23
  %23 = and i32 %and94, 4
  %24 = add i32 %23, 4
  %add97 = add i32 %conv93, -1
  %sub98 = add i32 %add97, %24
  %div102 = sdiv i32 %sub98, %24
  br label %cond.end107

cond.end107:                                      ; preds = %cond.true64, %lor.rhs69, %cond.true79, %cond.false90, %cond.true86
  %cond40192 = phi i32 [ %cond40197, %cond.true79 ], [ %cond40197, %cond.true86 ], [ %cond40197, %cond.false90 ], [ %cond40.ph, %cond.true64 ], [ %cond40.ph, %lor.rhs69 ]
  %cond108 = phi i32 [ %19, %cond.true79 ], [ %21, %cond.true86 ], [ %div102, %cond.false90 ], [ 2, %cond.true64 ], [ %phitmp, %lor.rhs69 ]
  %cmp109 = icmp eq i32 %offset, 0
  %cmp112 = icmp eq i32 %cond40192, %cond108
  %or.cond191 = or i1 %cmp109, %cmp112
  br i1 %or.cond191, label %return, label %if.end115

if.end115:                                        ; preds = %cond.end107
  %idxprom116 = sext i32 %xmode to i64
  %arrayidx117 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom116
  %25 = load i8* %arrayidx117, align 1, !tbaa !5
  %idxprom119 = sext i32 %ymode to i64
  %arrayidx120 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom119
  %26 = load i8* %arrayidx120, align 1, !tbaa !5
  %div178 = udiv i8 %25, %26
  %cmp123 = icmp eq i8 %div178, 0
  br i1 %cmp123, label %if.then125, label %if.end126

if.then125:                                       ; preds = %if.end115
  tail call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 3041, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.subreg_regno_offset, i64 0, i64 0)) #5
  unreachable

if.end126:                                        ; preds = %if.end115
  %div122 = zext i8 %div178 to i32
  %conv121 = zext i8 %26 to i32
  %div130 = udiv i32 %offset, %conv121
  %div131 = sdiv i32 %cond40192, %cond108
  %div132 = sdiv i32 %div122, %div131
  %div133 = sdiv i32 %div130, %div132
  %mul = mul nsw i32 %div133, %cond108
  br label %return

return:                                           ; preds = %cond.end107, %if.end126
  %retval.0 = phi i32 [ %mul, %if.end126 ], [ 0, %cond.end107 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @find_first_parameter_load(%struct.rtx_def* readonly %call_insn, %struct.rtx_def* readnone %boundary) #1 {
entry:
  %parm = alloca %struct.parms_set_data, align 8
  %regs = getelementptr inbounds %struct.parms_set_data* %parm, i64 0, i32 1
  store i64 0, i64* %regs, align 8, !tbaa !17
  %nregs = getelementptr inbounds %struct.parms_set_data* %parm, i64 0, i32 0
  store i32 0, i32* %nregs, align 8, !tbaa !19
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call_insn, i64 0, i32 1, i64 7
  %p.0.in98 = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %p.099 = load %struct.rtx_def** %p.0.in98, align 8
  %tobool100 = icmp eq %struct.rtx_def* %p.099, null
  br i1 %tobool100, label %while.end, label %for.body

while.cond.preheader:                             ; preds = %for.inc
  %.pre = load i32* %nregs, align 8, !tbaa !19
  %tobool5093 = icmp eq i32 %.pre, 0
  %cmp5194 = icmp eq %struct.rtx_def* %call_insn, %boundary
  %or.cond95 = or i1 %tobool5093, %cmp5194
  br i1 %or.cond95, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %0 = bitcast %struct.parms_set_data* %parm to i8*
  br label %while.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0101 = phi %struct.rtx_def* [ %p.0, %for.inc ], [ %p.099, %entry ]
  %fld1 = getelementptr inbounds %struct.rtx_def* %p.0101, i64 0, i32 1
  %rtx3 = bitcast [1 x %union.rtunion_def]* %fld1 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx3, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 48
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx9, align 8, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load10 = load i32* %4, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 61
  br i1 %cmp12, label %if.then, label %for.inc

if.then:                                          ; preds = %land.lhs.true
  %arrayidx20 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx20 to i32*
  %5 = load i32* %rtuint, align 4, !tbaa !9
  %cmp21 = icmp ugt i32 %5, 52
  br i1 %cmp21, label %if.then22, label %if.end

if.then22:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 3104, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.find_first_parameter_load, i64 0, i64 0)) #5
  unreachable

if.end:                                           ; preds = %if.then
  %call = call zeroext i1 @ix86_function_arg_regno_p(i32 %5) #4
  br i1 %call, label %if.end33, label %for.inc

if.end33:                                         ; preds = %if.end
  %6 = load %struct.rtx_def** %rtx3, align 8, !tbaa !1
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx39, align 8, !tbaa !1
  %arrayidx41 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0
  %rtuint42 = bitcast %union.rtunion_def* %arrayidx41 to i32*
  %8 = load i32* %rtuint42, align 4, !tbaa !9
  %sh_prom = zext i32 %8 to i64
  %shl = shl i64 1, %sh_prom
  %9 = load i64* %regs, align 8, !tbaa !17
  %or = or i64 %shl, %9
  store i64 %or, i64* %regs, align 8, !tbaa !17
  %10 = load i32* %nregs, align 8, !tbaa !19
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %nregs, align 8, !tbaa !19
  br label %for.inc

for.inc:                                          ; preds = %for.body, %land.lhs.true, %if.end33, %if.end
  %arrayidx47 = getelementptr inbounds %struct.rtx_def* %p.0101, i64 0, i32 1, i64 1
  %p.0.in = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %p.0 = load %struct.rtx_def** %p.0.in, align 8
  %tobool = icmp eq %struct.rtx_def* %p.0, null
  br i1 %tobool, label %while.cond.preheader, label %for.body

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %11 = phi i32 [ %.pre, %while.body.lr.ph ], [ %16, %while.cond.backedge ]
  %before.096 = phi %struct.rtx_def* [ %call_insn, %while.body.lr.ph ], [ %12, %while.cond.backedge ]
  %arrayidx53 = getelementptr inbounds %struct.rtx_def* %before.096, i64 0, i32 1, i64 1
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx54, align 8, !tbaa !1
  %13 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 0
  %bf.load55 = load i32* %13, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  switch i32 %bf.clear56, label %if.end67 [
    i32 34, label %while.end
    i32 36, label %if.then63
  ]

if.then63:                                        ; preds = %while.body
  %cmp64 = icmp eq %struct.rtx_def* %12, %boundary
  br i1 %cmp64, label %while.end, label %if.then65

if.then65:                                        ; preds = %if.then63
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8]* @.str, i64 0, i64 0), i32 3133, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.find_first_parameter_load, i64 0, i64 0)) #5
  unreachable

if.end67:                                         ; preds = %while.body
  %idxprom92 = zext i32 %bf.clear56 to i64
  %arrayidx70 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom92
  %14 = load i8* %arrayidx70, align 1, !tbaa !5
  %cmp71 = icmp eq i8 %14, 105
  br i1 %cmp71, label %if.then73, label %while.cond.backedge

if.then73:                                        ; preds = %if.end67
  %arrayidx75 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 1, i64 3
  %rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx76, align 8, !tbaa !1
  call void @note_stores(%struct.rtx_def* %15, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @parms_set, i8* %0)
  %.pre104 = load i32* %nregs, align 8, !tbaa !19
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then73, %if.end67
  %16 = phi i32 [ %.pre104, %if.then73 ], [ %11, %if.end67 ]
  %tobool50 = icmp eq i32 %16, 0
  %cmp51 = icmp eq %struct.rtx_def* %12, %boundary
  %or.cond = or i1 %tobool50, %cmp51
  br i1 %or.cond, label %while.end, label %while.body

while.end:                                        ; preds = %while.cond.backedge, %while.body, %entry, %while.cond.preheader, %if.then63
  %before.1 = phi %struct.rtx_def* [ %boundary, %if.then63 ], [ %call_insn, %while.cond.preheader ], [ %call_insn, %entry ], [ %12, %while.body ], [ %12, %while.cond.backedge ]
  ret %struct.rtx_def* %before.1
}

declare zeroext i1 @ix86_function_arg_regno_p(i32) #2

; Function Attrs: nounwind uwtable
define internal void @parms_set(%struct.rtx_def* nocapture readonly %x, %struct.rtx_def* nocapture readnone %pat, i8* nocapture %data) #1 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !9
  %cmp1 = icmp ult i32 %1, 53
  br i1 %cmp1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %regs = getelementptr inbounds i8* %data, i64 8
  %2 = bitcast i8* %regs to i64*
  %3 = load i64* %2, align 8, !tbaa !17
  %sh_prom = zext i32 %1 to i64
  %shl = shl i64 1, %sh_prom
  %and = and i64 %3, %shl
  %tobool = icmp eq i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true2
  %neg = xor i64 %shl, -1
  %and12 = and i64 %3, %neg
  store i64 %and12, i64* %2, align 8, !tbaa !17
  %nregs = bitcast i8* %data to i32*
  %4 = load i32* %nregs, align 4, !tbaa !19
  %dec = add nsw i32 %4, -1
  store i32 %dec, i32* %nregs, align 4, !tbaa !19
  br label %if.end

if.end:                                           ; preds = %land.lhs.true2, %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

attributes #0 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !3, metadata !3, i64 0}
!6 = metadata !{metadata !7, metadata !8, i64 0}
!7 = metadata !{metadata !"rtvec_def", metadata !8, i64 0, metadata !3, i64 8}
!8 = metadata !{metadata !"int", metadata !3, i64 0}
!9 = metadata !{metadata !8, metadata !8, i64 0}
!10 = metadata !{metadata !11, metadata !11, i64 0}
!11 = metadata !{metadata !"long long", metadata !3, i64 0}
!12 = metadata !{metadata !13, metadata !2, i64 0}
!13 = metadata !{metadata !"set_of_data", metadata !2, i64 0, metadata !2, i64 8}
!14 = metadata !{metadata !13, metadata !2, i64 8}
!15 = metadata !{metadata !16, metadata !16, i64 0}
!16 = metadata !{metadata !"short", metadata !3, i64 0}
!17 = metadata !{metadata !18, metadata !11, i64 8}
!18 = metadata !{metadata !"parms_set_data", metadata !8, i64 0, metadata !11, i64 8}
!19 = metadata !{metadata !18, metadata !8, i64 0}
