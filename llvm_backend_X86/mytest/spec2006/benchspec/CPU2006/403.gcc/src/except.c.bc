; ModuleID = 'except.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type { %struct.eh_region*, %struct.eh_region**, %struct.eh_region*, %struct.eh_region*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, %struct.varray_head_tag*, %struct.varray_head_tag*, %struct.varray_head_tag*, %struct.call_site_record*, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.eh_region = type { %struct.eh_region*, %struct.eh_region*, %struct.eh_region*, i32, %struct.bitmap_head_def*, i32, %union.anon, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%union.anon = type { %struct.anon }
%struct.anon = type { %struct.eh_region*, %struct.eh_region*, %struct.eh_region*, %struct.rtx_def* }
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.call_site_record = type { %struct.rtx_def*, i32 }
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.3, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon.1 = type { i64 }
%union.anon.3 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.inline_remap = type { i32, %union.tree_node*, %struct.rtx_def*, %struct.varray_head_tag*, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, i32, i32, %struct.varray_head_tag*, i32, %struct.rtx_def*, %struct.rtvec_def*, %struct.rtvec_def*, %struct.rtvec_def*, %struct.rtx_def*, i8*, %struct.rtx_def**, i32, [30 x %struct.equiv_table], %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.equiv_table = type { %struct.rtx_def*, %struct.rtx_def* }
%struct.ttypes_filter = type { %union.tree_node*, i32 }
%struct.ehl_map_entry = type { %struct.rtx_def*, %struct.eh_region* }
%struct.reachable_info = type { %union.tree_node*, %union.tree_node*, %struct.rtx_def* }
%struct.action_record = type { i32, i32, i32 }

@flag_exceptions = external global i32
@doing_eh.warned = internal unnamed_addr global i1 false
@.str = private unnamed_addr constant [56 x i8] c"exception handling disabled, use -fexceptions to enable\00", align 1
@exception_handler_label_map = internal global %struct.htab* null, align 8
@type_to_runtime_map = internal global %struct.htab* null, align 8
@cfun = external global %struct.function*
@ggc_pending_trees = external global %struct.varray_head_tag*
@lang_protect_cleanup_actions = common global %union.tree_node* ()* null, align 8
@target_flags = external global i32
@word_mode = external global i32
@const_int_rtx = external global [129 x %struct.rtx_def*]
@rtx_class = external constant [153 x i8]
@flag_non_call_exceptions = common global i32 0, align 4
@.str1 = private unnamed_addr constant [57 x i8] c"argument of `__builtin_eh_return_regno' must be constant\00", align 1
@dbx64_register_map = external constant [53 x i32]
@svr4_dbx_register_map = external constant [53 x i32]
@ptr_mode = external global i32
@.str2 = private unnamed_addr constant [49 x i8] c"__builtin_eh_return not supported on this target\00", align 1
@.str3 = private unnamed_addr constant [19 x i8] c"action_record_data\00", align 1
@current_funcdef_number = external global i32
@targetm = external global %struct.gcc_target
@flag_pic = external global i32
@.str4 = private unnamed_addr constant [7 x i8] c"*.%s%u\00", align 1
@.str5 = private unnamed_addr constant [8 x i8] c"LLSDATT\00", align 1
@asm_out_file = external global %struct._IO_FILE*
@.str6 = private unnamed_addr constant [8 x i8] c".%s%u:\0A\00", align 1
@.str7 = private unnamed_addr constant [6 x i8] c"LLSDA\00", align 1
@.str8 = private unnamed_addr constant [21 x i8] c"@LPStart format (%s)\00", align 1
@.str9 = private unnamed_addr constant [19 x i8] c"@TType format (%s)\00", align 1
@.str10 = private unnamed_addr constant [9 x i8] c"LLSDATTD\00", align 1
@.str11 = private unnamed_addr constant [19 x i8] c"@TType base offset\00", align 1
@.str12 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str13 = private unnamed_addr constant [22 x i8] c"call-site format (%s)\00", align 1
@.str14 = private unnamed_addr constant [9 x i8] c"LLSDACSB\00", align 1
@.str15 = private unnamed_addr constant [9 x i8] c"LLSDACSE\00", align 1
@.str16 = private unnamed_addr constant [23 x i8] c"Call-site table length\00", align 1
@.str17 = private unnamed_addr constant [20 x i8] c"Action record table\00", align 1
@global_trees = external global [51 x %union.tree_node*]
@.str18 = private unnamed_addr constant [30 x i8] c"Exception specification table\00", align 1
@current_function_decl = external global %union.tree_node*
@lang_eh_type_covers = common global i32 (%union.tree_node*, %union.tree_node*)* null, align 8
@lang_eh_runtime_type = common global %union.tree_node* (%union.tree_node*)* null, align 8
@current_function_func_begin_label = external global %union.tree_node*
@.str19 = private unnamed_addr constant [5 x i8] c"LEHB\00", align 1
@call_site_base = internal unnamed_addr global i32 0, align 4
@.str20 = private unnamed_addr constant [5 x i8] c"LEHE\00", align 1
@.str21 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str22 = private unnamed_addr constant [16 x i8] c"region %d start\00", align 1
@.str23 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str24 = private unnamed_addr constant [12 x i8] c"landing pad\00", align 1
@.str25 = private unnamed_addr constant [7 x i8] c"action\00", align 1
@.str26 = private unnamed_addr constant [9 x i8] c"except.c\00", align 1
@__FUNCTION__.collect_one_action_chain = private unnamed_addr constant [25 x i8] c"collect_one_action_chain\00", align 1
@__FUNCTION__.reachable_next_level = private unnamed_addr constant [21 x i8] c"reachable_next_level\00", align 1
@__FUNCTION__.remove_eh_handler = private unnamed_addr constant [18 x i8] c"remove_eh_handler\00", align 1
@__FUNCTION__.remove_exception_handler_label = private unnamed_addr constant [31 x i8] c"remove_exception_handler_label\00", align 1
@call_used_regs = external global [53 x i8]
@.str27 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@libfunc_table = external global [97 x %struct.rtx_def*]
@__FUNCTION__.build_post_landing_pads = private unnamed_addr constant [24 x i8] c"build_post_landing_pads\00", align 1
@.str28 = private unnamed_addr constant [11 x i8] c"ttype_data\00", align 1
@.str29 = private unnamed_addr constant [12 x i8] c"ehspec_data\00", align 1
@__FUNCTION__.duplicate_eh_region_1 = private unnamed_addr constant [22 x i8] c"duplicate_eh_region_1\00", align 1
@__FUNCTION__.add_ehl_entry = private unnamed_addr constant [14 x i8] c"add_ehl_entry\00", align 1
@__FUNCTION__.remove_unreachable_regions = private unnamed_addr constant [27 x i8] c"remove_unreachable_regions\00", align 1
@__FUNCTION__.convert_from_eh_region_ranges_1 = private unnamed_addr constant [32 x i8] c"convert_from_eh_region_ranges_1\00", align 1
@__FUNCTION__.resolve_fixup_regions = private unnamed_addr constant [22 x i8] c"resolve_fixup_regions\00", align 1
@__FUNCTION__.mark_eh_region = private unnamed_addr constant [15 x i8] c"mark_eh_region\00", align 1

; Function Attrs: nounwind uwtable
define i32 @doing_eh(i32 %do_warn) #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.then, label %return

if.then:                                          ; preds = %entry
  %.b = load i1* @doing_eh.warned, align 1
  %tobool1 = xor i1 %.b, true
  %tobool2 = icmp ne i32 %do_warn, 0
  %or.cond = and i1 %tobool2, %tobool1
  br i1 %or.cond, label %if.then3, label %return

if.then3:                                         ; preds = %if.then
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([56 x i8]* @.str, i64 0, i64 0)) #4
  store i1 true, i1* @doing_eh.warned, align 1
  br label %return

return:                                           ; preds = %entry, %if.then3, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 0, %if.then3 ], [ 1, %entry ]
  ret i32 %retval.0
}

declare void @error(i8*, ...) #1

; Function Attrs: nounwind uwtable
define void @init_eh() #0 {
entry:
  tail call void @ggc_add_root(i8* bitcast (%struct.htab** @exception_handler_label_map to i8*), i32 1, i32 1, void (i8*)* @mark_ehl_map) #4
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = tail call %struct.htab* @htab_create(i64 31, i32 (i8*)* @t2r_hash, i32 (i8*, i8*)* @t2r_eq, void (i8*)* null) #4
  store %struct.htab* %call, %struct.htab** @type_to_runtime_map, align 8, !tbaa !5
  tail call void @ggc_add_root(i8* bitcast (%struct.htab** @type_to_runtime_map to i8*), i32 1, i32 8, void (i8*)* @t2r_mark) #4
  br label %return

return:                                           ; preds = %entry, %if.end
  ret void
}

declare void @ggc_add_root(i8*, i32, i32, void (i8*)*) #1

; Function Attrs: nounwind uwtable
define internal void @mark_ehl_map(i8* nocapture readonly %pp) #0 {
entry:
  %0 = bitcast i8* %pp to %struct.htab**
  %1 = load %struct.htab** %0, align 8, !tbaa !5
  %tobool = icmp eq %struct.htab* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @mark_ehl_map_entry, i8* null) #4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

declare %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #1

; Function Attrs: nounwind readonly uwtable
define internal i32 @t2r_hash(i8* nocapture readonly %pentry) #2 {
entry:
  %purpose = getelementptr inbounds i8* %pentry, i64 24
  %0 = bitcast i8* %purpose to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !7
  %2 = ptrtoint %union.tree_node* %1 to i64
  %.tr = trunc i64 %2 to i32
  %conv = and i32 %.tr, 262143
  ret i32 %conv
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @t2r_eq(i8* nocapture readonly %pentry, i8* readnone %pdata) #2 {
entry:
  %0 = bitcast i8* %pdata to %union.tree_node*
  %purpose = getelementptr inbounds i8* %pentry, i64 24
  %1 = bitcast i8* %purpose to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !7
  %cmp = icmp eq %union.tree_node* %2, %0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal void @t2r_mark(i8* nocapture readonly %addr) #0 {
entry:
  %0 = bitcast i8* %addr to %struct.htab**
  %1 = load %struct.htab** %0, align 8, !tbaa !5
  tail call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @t2r_mark_1, i8* null) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_eh_for_function() #0 {
entry:
  %call = tail call noalias i8* @xcalloc(i64 1, i64 144) #4
  %0 = bitcast i8* %call to %struct.eh_status*
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  store %struct.eh_status* %0, %struct.eh_status** %eh, align 8, !tbaa !10
  ret void
}

declare noalias i8* @xcalloc(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @mark_eh_status(%struct.eh_status* readonly %eh) #0 {
entry:
  %cmp = icmp eq %struct.eh_status* %eh, null
  br i1 %cmp, label %do.end138, label %if.end

if.end:                                           ; preds = %entry
  %region_array = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 1
  %0 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %tobool = icmp eq %struct.eh_region** %0, null
  br i1 %tobool, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.end
  %last_region_number = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 8
  %1 = load i32* %last_region_number, align 4, !tbaa !16
  %cmp2192 = icmp sgt i32 %1, 0
  br i1 %cmp2192, label %for.body.lr.ph, label %do.body30

for.body.lr.ph:                                   ; preds = %if.then1
  %2 = sext i32 %1 to i64
  br label %for.body

for.body:                                         ; preds = %for.inc.for.body_crit_edge, %for.body.lr.ph
  %3 = phi %struct.eh_region** [ %0, %for.body.lr.ph ], [ %.pre197, %for.inc.for.body_crit_edge ]
  %indvars.iv194 = phi i64 [ %2, %for.body.lr.ph ], [ %indvars.iv.next195, %for.inc.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds %struct.eh_region** %3, i64 %indvars.iv194
  %4 = load %struct.eh_region** %arrayidx, align 8, !tbaa !5
  %tobool4 = icmp eq %struct.eh_region* %4, null
  br i1 %tobool4, label %for.inc, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %region_number = getelementptr inbounds %struct.eh_region* %4, i64 0, i32 3
  %5 = load i32* %region_number, align 4, !tbaa !17
  %6 = trunc i64 %indvars.iv194 to i32
  %cmp5 = icmp eq i32 %5, %6
  br i1 %cmp5, label %if.then6, label %for.inc

if.then6:                                         ; preds = %land.lhs.true
  tail call fastcc void @mark_eh_region(%struct.eh_region* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body, %land.lhs.true, %if.then6
  %indvars.iv.next195 = add nsw i64 %indvars.iv194, -1
  %7 = trunc i64 %indvars.iv.next195 to i32
  %cmp2 = icmp sgt i32 %7, 0
  br i1 %cmp2, label %for.inc.for.body_crit_edge, label %do.body30

for.inc.for.body_crit_edge:                       ; preds = %for.inc
  %.pre197 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  br label %for.body

if.else:                                          ; preds = %if.end
  %region_tree = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 0
  %8 = load %struct.eh_region** %region_tree, align 8, !tbaa !19
  %tobool8 = icmp eq %struct.eh_region* %8, null
  br i1 %tobool8, label %do.body30, label %while.body

while.body:                                       ; preds = %if.else15, %while.body, %do.cond, %if.else
  %r10.0 = phi %struct.eh_region* [ %8, %if.else ], [ %9, %while.body ], [ %10, %if.else15 ], [ %12, %do.cond ]
  tail call fastcc void @mark_eh_region(%struct.eh_region* %r10.0)
  %inner = getelementptr inbounds %struct.eh_region* %r10.0, i64 0, i32 1
  %9 = load %struct.eh_region** %inner, align 8, !tbaa !20
  %tobool12 = icmp eq %struct.eh_region* %9, null
  br i1 %tobool12, label %if.else15, label %while.body

if.else15:                                        ; preds = %while.body
  %next_peer = getelementptr inbounds %struct.eh_region* %r10.0, i64 0, i32 2
  %10 = load %struct.eh_region** %next_peer, align 8, !tbaa !21
  %tobool16 = icmp eq %struct.eh_region* %10, null
  br i1 %tobool16, label %do.body, label %while.body

do.body:                                          ; preds = %if.else15, %do.cond
  %r10.1 = phi %struct.eh_region* [ %11, %do.cond ], [ %r10.0, %if.else15 ]
  %outer = getelementptr inbounds %struct.eh_region* %r10.1, i64 0, i32 0
  %11 = load %struct.eh_region** %outer, align 8, !tbaa !22
  %cmp20 = icmp eq %struct.eh_region* %11, null
  br i1 %cmp20, label %do.body30, label %do.cond

do.cond:                                          ; preds = %do.body
  %next_peer23 = getelementptr inbounds %struct.eh_region* %11, i64 0, i32 2
  %12 = load %struct.eh_region** %next_peer23, align 8, !tbaa !21
  %cmp24 = icmp eq %struct.eh_region* %12, null
  br i1 %cmp24, label %do.body, label %while.body

do.body30:                                        ; preds = %for.inc, %do.body, %if.then1, %if.else
  %protect_list = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 4
  %13 = load %union.tree_node** %protect_list, align 8, !tbaa !23
  %cmp31 = icmp eq %union.tree_node* %13, null
  br i1 %cmp31, label %do.body48, label %land.lhs.true32

land.lhs.true32:                                  ; preds = %do.body30
  %14 = bitcast %union.tree_node* %13 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %14) #4
  %tobool33 = icmp eq i32 %call, 0
  br i1 %tobool33, label %do.body35, label %do.body48

do.body35:                                        ; preds = %land.lhs.true32
  %15 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %15, i64 0, i32 1
  %16 = load i64* %elements_used, align 8, !tbaa !24
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %15, i64 0, i32 0
  %17 = load i64* %num_elements, align 8, !tbaa !27
  %cmp36 = icmp ult i64 %16, %17
  br i1 %cmp36, label %if.end40, label %if.then37

if.then37:                                        ; preds = %do.body35
  %mul = shl i64 %17, 1
  %call39 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %15, i64 %mul) #4
  store %struct.varray_head_tag* %call39, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used41.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call39, i64 0, i32 1
  %.pre196 = load i64* %elements_used41.phi.trans.insert, align 8, !tbaa !24
  br label %if.end40

if.end40:                                         ; preds = %do.body35, %if.then37
  %18 = phi i64 [ %16, %do.body35 ], [ %.pre196, %if.then37 ]
  %19 = phi %struct.varray_head_tag* [ %15, %do.body35 ], [ %call39, %if.then37 ]
  %elements_used41 = getelementptr inbounds %struct.varray_head_tag* %19, i64 0, i32 1
  %inc = add i64 %18, 1
  store i64 %inc, i64* %elements_used41, align 8, !tbaa !24
  %data = getelementptr inbounds %struct.varray_head_tag* %19, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx42 = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %18
  store %union.tree_node* %13, %union.tree_node** %arrayidx42, align 8, !tbaa !5
  br label %do.body48

do.body48:                                        ; preds = %land.lhs.true32, %do.body30, %if.end40
  %filter = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 5
  %20 = load %struct.rtx_def** %filter, align 8, !tbaa !28
  %cmp49 = icmp eq %struct.rtx_def* %20, null
  br i1 %cmp49, label %do.body57, label %land.lhs.true50

land.lhs.true50:                                  ; preds = %do.body48
  %21 = bitcast %struct.rtx_def* %20 to i8*
  %call51 = tail call i32 @ggc_set_mark(i8* %21) #4
  %tobool52 = icmp eq i32 %call51, 0
  br i1 %tobool52, label %if.then53, label %do.body57

if.then53:                                        ; preds = %land.lhs.true50
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %20) #4
  br label %do.body57

do.body57:                                        ; preds = %land.lhs.true50, %do.body48, %if.then53
  %exc_ptr = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 6
  %22 = load %struct.rtx_def** %exc_ptr, align 8, !tbaa !29
  %cmp59 = icmp eq %struct.rtx_def* %22, null
  br i1 %cmp59, label %do.end66, label %land.lhs.true60

land.lhs.true60:                                  ; preds = %do.body57
  %23 = bitcast %struct.rtx_def* %22 to i8*
  %call61 = tail call i32 @ggc_set_mark(i8* %23) #4
  %tobool62 = icmp eq i32 %call61, 0
  br i1 %tobool62, label %if.then63, label %do.end66

if.then63:                                        ; preds = %land.lhs.true60
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %22) #4
  br label %do.end66

do.end66:                                         ; preds = %land.lhs.true60, %do.body57, %if.then63
  %ttype_data = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 9
  %24 = load %struct.varray_head_tag** %ttype_data, align 8, !tbaa !30
  tail call void @ggc_mark_tree_varray(%struct.varray_head_tag* %24) #4
  %call_site_data = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 12
  %25 = load %struct.call_site_record** %call_site_data, align 8, !tbaa !31
  %tobool67 = icmp eq %struct.call_site_record* %25, null
  br i1 %tobool67, label %do.body89, label %if.then68

if.then68:                                        ; preds = %do.end66
  %call_site_data_used = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 13
  %26 = load i32* %call_site_data_used, align 4, !tbaa !32
  %cmp70190 = icmp sgt i32 %26, 0
  br i1 %cmp70190, label %do.body72.lr.ph, label %do.body89

do.body72.lr.ph:                                  ; preds = %if.then68
  %27 = sext i32 %26 to i64
  br label %do.body72

do.body72:                                        ; preds = %for.cond69.backedge.do.body72_crit_edge, %do.body72.lr.ph
  %28 = phi %struct.call_site_record* [ %25, %do.body72.lr.ph ], [ %.pre, %for.cond69.backedge.do.body72_crit_edge ]
  %indvars.iv = phi i64 [ %27, %do.body72.lr.ph ], [ %indvars.iv.next, %for.cond69.backedge.do.body72_crit_edge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %landing_pad = getelementptr inbounds %struct.call_site_record* %28, i64 %indvars.iv.next, i32 0
  %29 = load %struct.rtx_def** %landing_pad, align 8, !tbaa !33
  %cmp77 = icmp eq %struct.rtx_def* %29, null
  br i1 %cmp77, label %for.cond69.backedge, label %land.lhs.true78

land.lhs.true78:                                  ; preds = %do.body72
  %30 = bitcast %struct.rtx_def* %29 to i8*
  %call79 = tail call i32 @ggc_set_mark(i8* %30) #4
  %tobool80 = icmp eq i32 %call79, 0
  br i1 %tobool80, label %if.then81, label %for.cond69.backedge

for.cond69.backedge:                              ; preds = %land.lhs.true78, %do.body72, %if.then81
  %31 = trunc i64 %indvars.iv.next to i32
  %cmp70 = icmp sgt i32 %31, 0
  br i1 %cmp70, label %for.cond69.backedge.do.body72_crit_edge, label %do.body89

for.cond69.backedge.do.body72_crit_edge:          ; preds = %for.cond69.backedge
  %.pre = load %struct.call_site_record** %call_site_data, align 8, !tbaa !31
  br label %do.body72

if.then81:                                        ; preds = %land.lhs.true78
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %29) #4
  br label %for.cond69.backedge

do.body89:                                        ; preds = %for.cond69.backedge, %if.then68, %do.end66
  %ehr_stackadj = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 15
  %32 = load %struct.rtx_def** %ehr_stackadj, align 8, !tbaa !35
  %cmp91 = icmp eq %struct.rtx_def* %32, null
  br i1 %cmp91, label %do.body99, label %land.lhs.true92

land.lhs.true92:                                  ; preds = %do.body89
  %33 = bitcast %struct.rtx_def* %32 to i8*
  %call93 = tail call i32 @ggc_set_mark(i8* %33) #4
  %tobool94 = icmp eq i32 %call93, 0
  br i1 %tobool94, label %if.then95, label %do.body99

if.then95:                                        ; preds = %land.lhs.true92
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %32) #4
  br label %do.body99

do.body99:                                        ; preds = %land.lhs.true92, %do.body89, %if.then95
  %ehr_handler = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 16
  %34 = load %struct.rtx_def** %ehr_handler, align 8, !tbaa !36
  %cmp101 = icmp eq %struct.rtx_def* %34, null
  br i1 %cmp101, label %do.body109, label %land.lhs.true102

land.lhs.true102:                                 ; preds = %do.body99
  %35 = bitcast %struct.rtx_def* %34 to i8*
  %call103 = tail call i32 @ggc_set_mark(i8* %35) #4
  %tobool104 = icmp eq i32 %call103, 0
  br i1 %tobool104, label %if.then105, label %do.body109

if.then105:                                       ; preds = %land.lhs.true102
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %34) #4
  br label %do.body109

do.body109:                                       ; preds = %land.lhs.true102, %do.body99, %if.then105
  %ehr_label = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 17
  %36 = load %struct.rtx_def** %ehr_label, align 8, !tbaa !37
  %cmp111 = icmp eq %struct.rtx_def* %36, null
  br i1 %cmp111, label %do.body119, label %land.lhs.true112

land.lhs.true112:                                 ; preds = %do.body109
  %37 = bitcast %struct.rtx_def* %36 to i8*
  %call113 = tail call i32 @ggc_set_mark(i8* %37) #4
  %tobool114 = icmp eq i32 %call113, 0
  br i1 %tobool114, label %if.then115, label %do.body119

if.then115:                                       ; preds = %land.lhs.true112
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %36) #4
  br label %do.body119

do.body119:                                       ; preds = %land.lhs.true112, %do.body109, %if.then115
  %sjlj_fc = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 18
  %38 = load %struct.rtx_def** %sjlj_fc, align 8, !tbaa !38
  %cmp121 = icmp eq %struct.rtx_def* %38, null
  br i1 %cmp121, label %do.body129, label %land.lhs.true122

land.lhs.true122:                                 ; preds = %do.body119
  %39 = bitcast %struct.rtx_def* %38 to i8*
  %call123 = tail call i32 @ggc_set_mark(i8* %39) #4
  %tobool124 = icmp eq i32 %call123, 0
  br i1 %tobool124, label %if.then125, label %do.body129

if.then125:                                       ; preds = %land.lhs.true122
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %38) #4
  br label %do.body129

do.body129:                                       ; preds = %land.lhs.true122, %do.body119, %if.then125
  %sjlj_exit_after = getelementptr inbounds %struct.eh_status* %eh, i64 0, i32 19
  %40 = load %struct.rtx_def** %sjlj_exit_after, align 8, !tbaa !39
  %cmp131 = icmp eq %struct.rtx_def* %40, null
  br i1 %cmp131, label %do.end138, label %land.lhs.true132

land.lhs.true132:                                 ; preds = %do.body129
  %41 = bitcast %struct.rtx_def* %40 to i8*
  %call133 = tail call i32 @ggc_set_mark(i8* %41) #4
  %tobool134 = icmp eq i32 %call133, 0
  br i1 %tobool134, label %if.then135, label %do.end138

if.then135:                                       ; preds = %land.lhs.true132
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %40) #4
  br label %do.end138

do.end138:                                        ; preds = %land.lhs.true132, %do.body129, %if.then135, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @mark_eh_region(%struct.eh_region* readonly %region) #0 {
entry:
  %tobool = icmp eq %struct.eh_region* %region, null
  br i1 %tobool, label %do.end189, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 5
  %0 = load i32* %type, align 4, !tbaa !40
  switch i32 %0, label %sw.default [
    i32 0, label %do.body154
    i32 1, label %do.body
    i32 2, label %do.body13
    i32 3, label %do.body23
    i32 4, label %do.body75
    i32 5, label %do.body154
    i32 6, label %do.body102
    i32 7, label %do.body129
  ]

do.body:                                          ; preds = %if.end
  %u = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6
  %exp = bitcast %union.anon* %u to %union.tree_node**
  %1 = load %union.tree_node** %exp, align 8, !tbaa !41
  %cmp = icmp eq %union.tree_node* %1, null
  br i1 %cmp, label %do.body154, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.body
  %2 = bitcast %union.tree_node* %1 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %2) #4
  %tobool1 = icmp eq i32 %call, 0
  br i1 %tobool1, label %do.body3, label %do.body154

do.body3:                                         ; preds = %land.lhs.true
  %3 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 1
  %4 = load i64* %elements_used, align 8, !tbaa !24
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 0
  %5 = load i64* %num_elements, align 8, !tbaa !27
  %cmp4 = icmp ult i64 %4, %5
  br i1 %cmp4, label %if.end8, label %if.then5

if.then5:                                         ; preds = %do.body3
  %mul = shl i64 %5, 1
  %call7 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %3, i64 %mul) #4
  store %struct.varray_head_tag* %call7, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used9.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call7, i64 0, i32 1
  %.pre = load i64* %elements_used9.phi.trans.insert, align 8, !tbaa !24
  br label %if.end8

if.end8:                                          ; preds = %do.body3, %if.then5
  %6 = phi i64 [ %4, %do.body3 ], [ %.pre, %if.then5 ]
  %7 = phi %struct.varray_head_tag* [ %3, %do.body3 ], [ %call7, %if.then5 ]
  %elements_used9 = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 1
  %inc = add i64 %6, 1
  store i64 %inc, i64* %elements_used9, align 8, !tbaa !24
  %data = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %6
  store %union.tree_node* %1, %union.tree_node** %arrayidx, align 8, !tbaa !5
  br label %do.body154

do.body13:                                        ; preds = %if.end
  %continue_label = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6, i32 0, i32 3
  %8 = load %struct.rtx_def** %continue_label, align 8, !tbaa !43
  %cmp15 = icmp eq %struct.rtx_def* %8, null
  br i1 %cmp15, label %do.body154, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %do.body13
  %9 = bitcast %struct.rtx_def* %8 to i8*
  %call17 = tail call i32 @ggc_set_mark(i8* %9) #4
  %tobool18 = icmp eq i32 %call17, 0
  br i1 %tobool18, label %if.then19, label %do.body154

if.then19:                                        ; preds = %land.lhs.true16
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %8) #4
  br label %do.body154

do.body23:                                        ; preds = %if.end
  %type_list = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6, i32 0, i32 2
  %10 = load %struct.eh_region** %type_list, align 8
  %11 = bitcast %struct.eh_region* %10 to %union.tree_node*
  %cmp26 = icmp eq %struct.eh_region* %10, null
  br i1 %cmp26, label %do.body48, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %do.body23
  %12 = bitcast %struct.eh_region* %10 to i8*
  %call28 = tail call i32 @ggc_set_mark(i8* %12) #4
  %tobool29 = icmp eq i32 %call28, 0
  br i1 %tobool29, label %do.body31, label %do.body48

do.body31:                                        ; preds = %land.lhs.true27
  %13 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used32 = getelementptr inbounds %struct.varray_head_tag* %13, i64 0, i32 1
  %14 = load i64* %elements_used32, align 8, !tbaa !24
  %num_elements33 = getelementptr inbounds %struct.varray_head_tag* %13, i64 0, i32 0
  %15 = load i64* %num_elements33, align 8, !tbaa !27
  %cmp34 = icmp ult i64 %14, %15
  br i1 %cmp34, label %if.end39, label %if.then35

if.then35:                                        ; preds = %do.body31
  %mul37 = shl i64 %15, 1
  %call38 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %13, i64 %mul37) #4
  store %struct.varray_head_tag* %call38, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used40.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call38, i64 0, i32 1
  %.pre225 = load i64* %elements_used40.phi.trans.insert, align 8, !tbaa !24
  br label %if.end39

if.end39:                                         ; preds = %do.body31, %if.then35
  %16 = phi i64 [ %14, %do.body31 ], [ %.pre225, %if.then35 ]
  %17 = phi %struct.varray_head_tag* [ %13, %do.body31 ], [ %call38, %if.then35 ]
  %elements_used40 = getelementptr inbounds %struct.varray_head_tag* %17, i64 0, i32 1
  %inc41 = add i64 %16, 1
  store i64 %inc41, i64* %elements_used40, align 8, !tbaa !24
  %data42 = getelementptr inbounds %struct.varray_head_tag* %17, i64 0, i32 4
  %tree43 = bitcast %union.varray_data_tag* %data42 to [1 x %union.tree_node*]*
  %arrayidx44 = getelementptr inbounds [1 x %union.tree_node*]* %tree43, i64 0, i64 %16
  store %union.tree_node* %11, %union.tree_node** %arrayidx44, align 8, !tbaa !5
  br label %do.body48

do.body48:                                        ; preds = %land.lhs.true27, %do.body23, %if.end39
  %filter_list = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6, i32 0, i32 3
  %18 = load %struct.rtx_def** %filter_list, align 8
  %19 = bitcast %struct.rtx_def* %18 to %union.tree_node*
  %cmp52 = icmp eq %struct.rtx_def* %18, null
  br i1 %cmp52, label %do.body154, label %land.lhs.true53

land.lhs.true53:                                  ; preds = %do.body48
  %20 = bitcast %struct.rtx_def* %18 to i8*
  %call54 = tail call i32 @ggc_set_mark(i8* %20) #4
  %tobool55 = icmp eq i32 %call54, 0
  br i1 %tobool55, label %do.body57, label %do.body154

do.body57:                                        ; preds = %land.lhs.true53
  %21 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used58 = getelementptr inbounds %struct.varray_head_tag* %21, i64 0, i32 1
  %22 = load i64* %elements_used58, align 8, !tbaa !24
  %num_elements59 = getelementptr inbounds %struct.varray_head_tag* %21, i64 0, i32 0
  %23 = load i64* %num_elements59, align 8, !tbaa !27
  %cmp60 = icmp ult i64 %22, %23
  br i1 %cmp60, label %if.end65, label %if.then61

if.then61:                                        ; preds = %do.body57
  %mul63 = shl i64 %23, 1
  %call64 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %21, i64 %mul63) #4
  store %struct.varray_head_tag* %call64, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used66.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call64, i64 0, i32 1
  %.pre224 = load i64* %elements_used66.phi.trans.insert, align 8, !tbaa !24
  br label %if.end65

if.end65:                                         ; preds = %do.body57, %if.then61
  %24 = phi i64 [ %22, %do.body57 ], [ %.pre224, %if.then61 ]
  %25 = phi %struct.varray_head_tag* [ %21, %do.body57 ], [ %call64, %if.then61 ]
  %elements_used66 = getelementptr inbounds %struct.varray_head_tag* %25, i64 0, i32 1
  %inc67 = add i64 %24, 1
  store i64 %inc67, i64* %elements_used66, align 8, !tbaa !24
  %data68 = getelementptr inbounds %struct.varray_head_tag* %25, i64 0, i32 4
  %tree69 = bitcast %union.varray_data_tag* %data68 to [1 x %union.tree_node*]*
  %arrayidx70 = getelementptr inbounds [1 x %union.tree_node*]* %tree69, i64 0, i64 %24
  store %union.tree_node* %19, %union.tree_node** %arrayidx70, align 8, !tbaa !5
  br label %do.body154

do.body75:                                        ; preds = %if.end
  %u77 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6
  %type_list78 = bitcast %union.anon* %u77 to %union.tree_node**
  %26 = load %union.tree_node** %type_list78, align 8, !tbaa !45
  %cmp79 = icmp eq %union.tree_node* %26, null
  br i1 %cmp79, label %do.body154, label %land.lhs.true80

land.lhs.true80:                                  ; preds = %do.body75
  %27 = bitcast %union.tree_node* %26 to i8*
  %call81 = tail call i32 @ggc_set_mark(i8* %27) #4
  %tobool82 = icmp eq i32 %call81, 0
  br i1 %tobool82, label %do.body84, label %do.body154

do.body84:                                        ; preds = %land.lhs.true80
  %28 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used85 = getelementptr inbounds %struct.varray_head_tag* %28, i64 0, i32 1
  %29 = load i64* %elements_used85, align 8, !tbaa !24
  %num_elements86 = getelementptr inbounds %struct.varray_head_tag* %28, i64 0, i32 0
  %30 = load i64* %num_elements86, align 8, !tbaa !27
  %cmp87 = icmp ult i64 %29, %30
  br i1 %cmp87, label %if.end92, label %if.then88

if.then88:                                        ; preds = %do.body84
  %mul90 = shl i64 %30, 1
  %call91 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %28, i64 %mul90) #4
  store %struct.varray_head_tag* %call91, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used93.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call91, i64 0, i32 1
  %.pre226 = load i64* %elements_used93.phi.trans.insert, align 8, !tbaa !24
  br label %if.end92

if.end92:                                         ; preds = %do.body84, %if.then88
  %31 = phi i64 [ %29, %do.body84 ], [ %.pre226, %if.then88 ]
  %32 = phi %struct.varray_head_tag* [ %28, %do.body84 ], [ %call91, %if.then88 ]
  %elements_used93 = getelementptr inbounds %struct.varray_head_tag* %32, i64 0, i32 1
  %inc94 = add i64 %31, 1
  store i64 %inc94, i64* %elements_used93, align 8, !tbaa !24
  %data95 = getelementptr inbounds %struct.varray_head_tag* %32, i64 0, i32 4
  %tree96 = bitcast %union.varray_data_tag* %data95 to [1 x %union.tree_node*]*
  %arrayidx97 = getelementptr inbounds [1 x %union.tree_node*]* %tree96, i64 0, i64 %31
  store %union.tree_node* %26, %union.tree_node** %arrayidx97, align 8, !tbaa !5
  br label %do.body154

do.body102:                                       ; preds = %if.end
  %u104 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6
  %type105 = bitcast %union.anon* %u104 to %union.tree_node**
  %33 = load %union.tree_node** %type105, align 8, !tbaa !41
  %cmp106 = icmp eq %union.tree_node* %33, null
  br i1 %cmp106, label %do.body154, label %land.lhs.true107

land.lhs.true107:                                 ; preds = %do.body102
  %34 = bitcast %union.tree_node* %33 to i8*
  %call108 = tail call i32 @ggc_set_mark(i8* %34) #4
  %tobool109 = icmp eq i32 %call108, 0
  br i1 %tobool109, label %do.body111, label %do.body154

do.body111:                                       ; preds = %land.lhs.true107
  %35 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used112 = getelementptr inbounds %struct.varray_head_tag* %35, i64 0, i32 1
  %36 = load i64* %elements_used112, align 8, !tbaa !24
  %num_elements113 = getelementptr inbounds %struct.varray_head_tag* %35, i64 0, i32 0
  %37 = load i64* %num_elements113, align 8, !tbaa !27
  %cmp114 = icmp ult i64 %36, %37
  br i1 %cmp114, label %if.end119, label %if.then115

if.then115:                                       ; preds = %do.body111
  %mul117 = shl i64 %37, 1
  %call118 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %35, i64 %mul117) #4
  store %struct.varray_head_tag* %call118, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used120.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call118, i64 0, i32 1
  %.pre227 = load i64* %elements_used120.phi.trans.insert, align 8, !tbaa !24
  br label %if.end119

if.end119:                                        ; preds = %do.body111, %if.then115
  %38 = phi i64 [ %36, %do.body111 ], [ %.pre227, %if.then115 ]
  %39 = phi %struct.varray_head_tag* [ %35, %do.body111 ], [ %call118, %if.then115 ]
  %elements_used120 = getelementptr inbounds %struct.varray_head_tag* %39, i64 0, i32 1
  %inc121 = add i64 %38, 1
  store i64 %inc121, i64* %elements_used120, align 8, !tbaa !24
  %data122 = getelementptr inbounds %struct.varray_head_tag* %39, i64 0, i32 4
  %tree123 = bitcast %union.varray_data_tag* %data122 to [1 x %union.tree_node*]*
  %arrayidx124 = getelementptr inbounds [1 x %union.tree_node*]* %tree123, i64 0, i64 %38
  store %union.tree_node* %33, %union.tree_node** %arrayidx124, align 8, !tbaa !5
  br label %do.body154

do.body129:                                       ; preds = %if.end
  %u131 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6
  %cleanup_exp = bitcast %union.anon* %u131 to %union.tree_node**
  %40 = load %union.tree_node** %cleanup_exp, align 8, !tbaa !47
  %cmp132 = icmp eq %union.tree_node* %40, null
  br i1 %cmp132, label %do.body154, label %land.lhs.true133

land.lhs.true133:                                 ; preds = %do.body129
  %41 = bitcast %union.tree_node* %40 to i8*
  %call134 = tail call i32 @ggc_set_mark(i8* %41) #4
  %tobool135 = icmp eq i32 %call134, 0
  br i1 %tobool135, label %do.body137, label %do.body154

do.body137:                                       ; preds = %land.lhs.true133
  %42 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used138 = getelementptr inbounds %struct.varray_head_tag* %42, i64 0, i32 1
  %43 = load i64* %elements_used138, align 8, !tbaa !24
  %num_elements139 = getelementptr inbounds %struct.varray_head_tag* %42, i64 0, i32 0
  %44 = load i64* %num_elements139, align 8, !tbaa !27
  %cmp140 = icmp ult i64 %43, %44
  br i1 %cmp140, label %if.end145, label %if.then141

if.then141:                                       ; preds = %do.body137
  %mul143 = shl i64 %44, 1
  %call144 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %42, i64 %mul143) #4
  store %struct.varray_head_tag* %call144, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used146.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call144, i64 0, i32 1
  %.pre228 = load i64* %elements_used146.phi.trans.insert, align 8, !tbaa !24
  br label %if.end145

if.end145:                                        ; preds = %do.body137, %if.then141
  %45 = phi i64 [ %43, %do.body137 ], [ %.pre228, %if.then141 ]
  %46 = phi %struct.varray_head_tag* [ %42, %do.body137 ], [ %call144, %if.then141 ]
  %elements_used146 = getelementptr inbounds %struct.varray_head_tag* %46, i64 0, i32 1
  %inc147 = add i64 %45, 1
  store i64 %inc147, i64* %elements_used146, align 8, !tbaa !24
  %data148 = getelementptr inbounds %struct.varray_head_tag* %46, i64 0, i32 4
  %tree149 = bitcast %union.varray_data_tag* %data148 to [1 x %union.tree_node*]*
  %arrayidx150 = getelementptr inbounds [1 x %union.tree_node*]* %tree149, i64 0, i64 %45
  store %union.tree_node* %40, %union.tree_node** %arrayidx150, align 8, !tbaa !5
  br label %do.body154

sw.default:                                       ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 531, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.mark_eh_region, i64 0, i64 0)) #6
  unreachable

do.body154:                                       ; preds = %land.lhs.true, %do.body, %land.lhs.true16, %do.body13, %land.lhs.true53, %do.body48, %land.lhs.true80, %do.body75, %land.lhs.true107, %do.body102, %land.lhs.true133, %do.body129, %if.end, %if.end, %if.end8, %if.then19, %if.end65, %if.end92, %if.end119, %if.end145
  %label = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 7
  %47 = load %struct.rtx_def** %label, align 8, !tbaa !49
  %cmp156 = icmp eq %struct.rtx_def* %47, null
  br i1 %cmp156, label %do.body163, label %land.lhs.true157

land.lhs.true157:                                 ; preds = %do.body154
  %48 = bitcast %struct.rtx_def* %47 to i8*
  %call158 = tail call i32 @ggc_set_mark(i8* %48) #4
  %tobool159 = icmp eq i32 %call158, 0
  br i1 %tobool159, label %if.then160, label %do.body163

if.then160:                                       ; preds = %land.lhs.true157
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %47) #4
  br label %do.body163

do.body163:                                       ; preds = %land.lhs.true157, %do.body154, %if.then160
  %resume = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 10
  %49 = load %struct.rtx_def** %resume, align 8, !tbaa !50
  %cmp165 = icmp eq %struct.rtx_def* %49, null
  br i1 %cmp165, label %do.body172, label %land.lhs.true166

land.lhs.true166:                                 ; preds = %do.body163
  %50 = bitcast %struct.rtx_def* %49 to i8*
  %call167 = tail call i32 @ggc_set_mark(i8* %50) #4
  %tobool168 = icmp eq i32 %call167, 0
  br i1 %tobool168, label %if.then169, label %do.body172

if.then169:                                       ; preds = %land.lhs.true166
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %49) #4
  br label %do.body172

do.body172:                                       ; preds = %land.lhs.true166, %do.body163, %if.then169
  %landing_pad = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 8
  %51 = load %struct.rtx_def** %landing_pad, align 8, !tbaa !51
  %cmp174 = icmp eq %struct.rtx_def* %51, null
  br i1 %cmp174, label %do.body181, label %land.lhs.true175

land.lhs.true175:                                 ; preds = %do.body172
  %52 = bitcast %struct.rtx_def* %51 to i8*
  %call176 = tail call i32 @ggc_set_mark(i8* %52) #4
  %tobool177 = icmp eq i32 %call176, 0
  br i1 %tobool177, label %if.then178, label %do.body181

if.then178:                                       ; preds = %land.lhs.true175
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %51) #4
  br label %do.body181

do.body181:                                       ; preds = %land.lhs.true175, %do.body172, %if.then178
  %post_landing_pad = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 9
  %53 = load %struct.rtx_def** %post_landing_pad, align 8, !tbaa !52
  %cmp183 = icmp eq %struct.rtx_def* %53, null
  br i1 %cmp183, label %do.end189, label %land.lhs.true184

land.lhs.true184:                                 ; preds = %do.body181
  %54 = bitcast %struct.rtx_def* %53 to i8*
  %call185 = tail call i32 @ggc_set_mark(i8* %54) #4
  %tobool186 = icmp eq i32 %call185, 0
  br i1 %tobool186, label %if.then187, label %do.end189

if.then187:                                       ; preds = %land.lhs.true184
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %53) #4
  br label %do.end189

do.end189:                                        ; preds = %land.lhs.true184, %do.body181, %entry, %if.then187
  ret void
}

declare i32 @ggc_set_mark(i8*) #1

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #1

declare void @ggc_mark_rtx_children(%struct.rtx_def*) #1

declare void @ggc_mark_tree_varray(%struct.varray_head_tag*) #1

; Function Attrs: nounwind uwtable
define void @free_eh_status(%struct.function* nocapture %f) #0 {
entry:
  %eh1 = getelementptr inbounds %struct.function* %f, i64 0, i32 0
  %0 = load %struct.eh_status** %eh1, align 8, !tbaa !10
  %region_array = getelementptr inbounds %struct.eh_status* %0, i64 0, i32 1
  %1 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %tobool = icmp eq %struct.eh_region** %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %last_region_number = getelementptr inbounds %struct.eh_status* %0, i64 0, i32 8
  %2 = load i32* %last_region_number, align 4, !tbaa !16
  %cmp95 = icmp sgt i32 %2, 0
  br i1 %cmp95, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.then
  %3 = sext i32 %2 to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %4 = phi %struct.eh_region** [ %1, %for.body.lr.ph ], [ %.pre98, %for.inc ]
  %indvars.iv = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds %struct.eh_region** %4, i64 %indvars.iv
  %5 = load %struct.eh_region** %arrayidx, align 8, !tbaa !5
  %tobool3 = icmp eq %struct.eh_region* %5, null
  br i1 %tobool3, label %for.inc, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %region_number = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 3
  %6 = load i32* %region_number, align 4, !tbaa !17
  %7 = trunc i64 %indvars.iv to i32
  %cmp4 = icmp eq i32 %6, %7
  br i1 %cmp4, label %if.then5, label %for.inc

if.then5:                                         ; preds = %land.lhs.true
  %8 = bitcast %struct.eh_region* %5 to i8*
  tail call void @free(i8* %8) #4
  br label %for.inc

for.inc:                                          ; preds = %for.body, %land.lhs.true, %if.then5
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %9 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp sgt i32 %9, 0
  %.pre98 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %if.then
  %10 = phi %struct.eh_region** [ %1, %if.then ], [ %.pre98, %for.inc ]
  %11 = bitcast %struct.eh_region** %10 to i8*
  tail call void @free(i8* %11)
  br label %do.body29

if.else:                                          ; preds = %entry
  %region_tree = getelementptr inbounds %struct.eh_status* %0, i64 0, i32 0
  %12 = load %struct.eh_region** %region_tree, align 8, !tbaa !19
  %tobool7 = icmp eq %struct.eh_region* %12, null
  br i1 %tobool7, label %do.body29, label %while.body

while.body:                                       ; preds = %while.body, %do.end, %if.then16, %if.else
  %r9.0 = phi %struct.eh_region* [ %12, %if.else ], [ %14, %if.then16 ], [ %18, %do.end ], [ %13, %while.body ]
  %inner = getelementptr inbounds %struct.eh_region* %r9.0, i64 0, i32 1
  %13 = load %struct.eh_region** %inner, align 8, !tbaa !20
  %tobool11 = icmp eq %struct.eh_region* %13, null
  br i1 %tobool11, label %if.else14, label %while.body

if.else14:                                        ; preds = %while.body
  %next_peer = getelementptr inbounds %struct.eh_region* %r9.0, i64 0, i32 2
  %14 = load %struct.eh_region** %next_peer, align 8, !tbaa !21
  %tobool15 = icmp eq %struct.eh_region* %14, null
  br i1 %tobool15, label %do.body, label %if.then16

if.then16:                                        ; preds = %if.else14
  %15 = bitcast %struct.eh_region* %r9.0 to i8*
  tail call void @free(i8* %15) #4
  br label %while.body

do.body:                                          ; preds = %if.else14, %do.cond
  %r9.1 = phi %struct.eh_region* [ %16, %do.cond ], [ %r9.0, %if.else14 ]
  %outer = getelementptr inbounds %struct.eh_region* %r9.1, i64 0, i32 0
  %16 = load %struct.eh_region** %outer, align 8, !tbaa !22
  %17 = bitcast %struct.eh_region* %r9.1 to i8*
  tail call void @free(i8* %17) #4
  %cmp19 = icmp eq %struct.eh_region* %16, null
  br i1 %cmp19, label %do.body29, label %do.cond

do.cond:                                          ; preds = %do.body
  %next_peer22 = getelementptr inbounds %struct.eh_region* %16, i64 0, i32 2
  %18 = load %struct.eh_region** %next_peer22, align 8, !tbaa !21
  %cmp23 = icmp eq %struct.eh_region* %18, null
  br i1 %cmp23, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %19 = bitcast %struct.eh_region* %16 to i8*
  tail call void @free(i8* %19) #4
  br label %while.body

do.body29:                                        ; preds = %do.body, %if.else, %for.end
  %ttype_data = getelementptr inbounds %struct.eh_status* %0, i64 0, i32 9
  %20 = load %struct.varray_head_tag** %ttype_data, align 8, !tbaa !30
  %tobool30 = icmp eq %struct.varray_head_tag* %20, null
  br i1 %tobool30, label %do.body37, label %if.then31

if.then31:                                        ; preds = %do.body29
  %21 = bitcast %struct.varray_head_tag* %20 to i8*
  tail call void @free(i8* %21)
  store %struct.varray_head_tag* null, %struct.varray_head_tag** %ttype_data, align 8, !tbaa !30
  br label %do.body37

do.body37:                                        ; preds = %do.body29, %if.then31
  %ehspec_data = getelementptr inbounds %struct.eh_status* %0, i64 0, i32 10
  %22 = load %struct.varray_head_tag** %ehspec_data, align 8, !tbaa !53
  %tobool38 = icmp eq %struct.varray_head_tag* %22, null
  br i1 %tobool38, label %do.body45, label %if.then39

if.then39:                                        ; preds = %do.body37
  %23 = bitcast %struct.varray_head_tag* %22 to i8*
  tail call void @free(i8* %23)
  store %struct.varray_head_tag* null, %struct.varray_head_tag** %ehspec_data, align 8, !tbaa !53
  br label %do.body45

do.body45:                                        ; preds = %do.body37, %if.then39
  %action_record_data = getelementptr inbounds %struct.eh_status* %0, i64 0, i32 11
  %24 = load %struct.varray_head_tag** %action_record_data, align 8, !tbaa !54
  %tobool46 = icmp eq %struct.varray_head_tag* %24, null
  br i1 %tobool46, label %do.end52, label %if.then47

if.then47:                                        ; preds = %do.body45
  %25 = bitcast %struct.varray_head_tag* %24 to i8*
  tail call void @free(i8* %25)
  store %struct.varray_head_tag* null, %struct.varray_head_tag** %action_record_data, align 8, !tbaa !54
  br label %do.end52

do.end52:                                         ; preds = %do.body45, %if.then47
  %call_site_data = getelementptr inbounds %struct.eh_status* %0, i64 0, i32 12
  %26 = load %struct.call_site_record** %call_site_data, align 8, !tbaa !31
  %tobool53 = icmp eq %struct.call_site_record* %26, null
  br i1 %tobool53, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end52
  %27 = bitcast %struct.call_site_record* %26 to i8*
  tail call void @free(i8* %27)
  br label %if.end56

if.end56:                                         ; preds = %do.end52, %if.then54
  %28 = bitcast %struct.eh_status* %0 to i8*
  tail call void @free(i8* %28)
  store %struct.eh_status* null, %struct.eh_status** %eh1, align 8, !tbaa !10
  %29 = load %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  %tobool58 = icmp eq %struct.htab* %29, null
  br i1 %tobool58, label %if.end60, label %if.then59

if.then59:                                        ; preds = %if.end56
  tail call void @htab_delete(%struct.htab* %29) #4
  store %struct.htab* null, %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  br label %if.end60

if.end60:                                         ; preds = %if.end56, %if.then59
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #3

declare void @htab_delete(%struct.htab*) #1

; Function Attrs: nounwind uwtable
define void @expand_eh_region_start() #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call noalias i8* @xcalloc(i64 1, i64 112) #4
  %1 = bitcast i8* %call1 to %struct.eh_region*
  %2 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %2, i64 0, i32 0
  %3 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %cur_region2 = getelementptr inbounds %struct.eh_status* %3, i64 0, i32 2
  %4 = load %struct.eh_region** %cur_region2, align 8, !tbaa !55
  %outer = bitcast i8* %call1 to %struct.eh_region**
  store %struct.eh_region* %4, %struct.eh_region** %outer, align 8, !tbaa !22
  %tobool3 = icmp eq %struct.eh_region* %4, null
  br i1 %tobool3, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.end
  %inner = getelementptr inbounds %struct.eh_region* %4, i64 0, i32 1
  %5 = load %struct.eh_region** %inner, align 8, !tbaa !20
  %next_peer = getelementptr inbounds i8* %call1, i64 16
  %6 = bitcast i8* %next_peer to %struct.eh_region**
  store %struct.eh_region* %5, %struct.eh_region** %6, align 8, !tbaa !21
  store %struct.eh_region* %1, %struct.eh_region** %inner, align 8, !tbaa !20
  br label %if.end10

if.else:                                          ; preds = %if.end
  %region_tree = getelementptr inbounds %struct.eh_status* %3, i64 0, i32 0
  %7 = load %struct.eh_region** %region_tree, align 8, !tbaa !19
  %next_peer7 = getelementptr inbounds i8* %call1, i64 16
  %8 = bitcast i8* %next_peer7 to %struct.eh_region**
  store %struct.eh_region* %7, %struct.eh_region** %8, align 8, !tbaa !21
  store %struct.eh_region* %1, %struct.eh_region** %region_tree, align 8, !tbaa !19
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then4
  %9 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh11 = getelementptr inbounds %struct.function* %9, i64 0, i32 0
  %10 = load %struct.eh_status** %eh11, align 8, !tbaa !10
  %cur_region12 = getelementptr inbounds %struct.eh_status* %10, i64 0, i32 2
  store %struct.eh_region* %1, %struct.eh_region** %cur_region12, align 8, !tbaa !55
  %11 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh13 = getelementptr inbounds %struct.function* %11, i64 0, i32 0
  %12 = load %struct.eh_status** %eh13, align 8, !tbaa !10
  %last_region_number = getelementptr inbounds %struct.eh_status* %12, i64 0, i32 8
  %13 = load i32* %last_region_number, align 4, !tbaa !16
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %last_region_number, align 4, !tbaa !16
  %region_number = getelementptr inbounds i8* %call1, i64 24
  %14 = bitcast i8* %region_number to i32*
  store i32 %inc, i32* %14, align 4, !tbaa !17
  %call14 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -86) #4
  %15 = load i32* %14, align 4, !tbaa !17
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call14, i64 0, i32 1, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  store i32 %15, i32* %rtint, align 4, !tbaa !1
  br label %return

return:                                           ; preds = %entry, %if.end10
  ret void
}

declare %struct.rtx_def* @emit_note(i8*, i32) #1

; Function Attrs: nounwind uwtable
define void @expand_eh_region_end_cleanup(%union.tree_node* %handler) #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %cur_region1.i = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 2
  %3 = load %struct.eh_region** %cur_region1.i, align 8, !tbaa !55
  %call.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -85) #4
  %region_number.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 3
  %4 = load i32* %region_number.i, align 4, !tbaa !17
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %4, i32* %rtint.i, align 4, !tbaa !1
  %outer.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 0
  %5 = load %struct.eh_region** %outer.i, align 8, !tbaa !22
  %6 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh2.i = getelementptr inbounds %struct.function* %6, i64 0, i32 0
  %7 = load %struct.eh_status** %eh2.i, align 8, !tbaa !10
  %cur_region3.i = getelementptr inbounds %struct.eh_status* %7, i64 0, i32 2
  store %struct.eh_region* %5, %struct.eh_region** %cur_region3.i, align 8, !tbaa !55
  %type = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 5
  store i32 1, i32* %type, align 4, !tbaa !40
  %call2 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %label = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 7
  store %struct.rtx_def* %call2, %struct.rtx_def** %label, align 8, !tbaa !49
  %8 = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 6, i32 0, i32 0
  %handler.c = bitcast %union.tree_node* %handler to %struct.eh_region*
  store %struct.eh_region* %handler.c, %struct.eh_region** %8, align 8, !tbaa !41
  %call3 = tail call %struct.rtx_def* @gen_label_rtx() #4
  tail call void @emit_jump(%struct.rtx_def* %call3) #4
  %9 = load %struct.rtx_def** %label, align 8, !tbaa !49
  %call5 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %9) #4
  %10 = load %union.tree_node* ()** @lang_protect_cleanup_actions, align 8, !tbaa !5
  %tobool6 = icmp eq %union.tree_node* ()* %10, null
  br i1 %tobool6, label %if.end10, label %cond.end

cond.end:                                         ; preds = %if.end
  %call7 = tail call %union.tree_node* %10() #4
  %tobool8 = icmp eq %union.tree_node* %call7, null
  br i1 %tobool8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %cond.end
  %11 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i.i = icmp eq i32 %11, 0
  br i1 %tobool.i.i, label %if.end10, label %if.end.i

if.end.i:                                         ; preds = %if.then9
  %call1.i = tail call noalias i8* @xcalloc(i64 1, i64 112) #4
  %12 = bitcast i8* %call1.i to %struct.eh_region*
  %13 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i46 = getelementptr inbounds %struct.function* %13, i64 0, i32 0
  %14 = load %struct.eh_status** %eh.i46, align 8, !tbaa !10
  %cur_region2.i = getelementptr inbounds %struct.eh_status* %14, i64 0, i32 2
  %15 = load %struct.eh_region** %cur_region2.i, align 8, !tbaa !55
  %outer.i47 = bitcast i8* %call1.i to %struct.eh_region**
  store %struct.eh_region* %15, %struct.eh_region** %outer.i47, align 8, !tbaa !22
  %tobool3.i = icmp eq %struct.eh_region* %15, null
  br i1 %tobool3.i, label %if.else.i, label %if.then4.i

if.then4.i:                                       ; preds = %if.end.i
  %inner.i = getelementptr inbounds %struct.eh_region* %15, i64 0, i32 1
  %16 = load %struct.eh_region** %inner.i, align 8, !tbaa !20
  %next_peer.i = getelementptr inbounds i8* %call1.i, i64 16
  %17 = bitcast i8* %next_peer.i to %struct.eh_region**
  store %struct.eh_region* %16, %struct.eh_region** %17, align 8, !tbaa !21
  store %struct.eh_region* %12, %struct.eh_region** %inner.i, align 8, !tbaa !20
  br label %if.end10.i

if.else.i:                                        ; preds = %if.end.i
  %region_tree.i = getelementptr inbounds %struct.eh_status* %14, i64 0, i32 0
  %18 = load %struct.eh_region** %region_tree.i, align 8, !tbaa !19
  %next_peer7.i = getelementptr inbounds i8* %call1.i, i64 16
  %19 = bitcast i8* %next_peer7.i to %struct.eh_region**
  store %struct.eh_region* %18, %struct.eh_region** %19, align 8, !tbaa !21
  store %struct.eh_region* %12, %struct.eh_region** %region_tree.i, align 8, !tbaa !19
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.else.i, %if.then4.i
  %20 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh11.i = getelementptr inbounds %struct.function* %20, i64 0, i32 0
  %21 = load %struct.eh_status** %eh11.i, align 8, !tbaa !10
  %cur_region12.i = getelementptr inbounds %struct.eh_status* %21, i64 0, i32 2
  store %struct.eh_region* %12, %struct.eh_region** %cur_region12.i, align 8, !tbaa !55
  %22 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh13.i = getelementptr inbounds %struct.function* %22, i64 0, i32 0
  %23 = load %struct.eh_status** %eh13.i, align 8, !tbaa !10
  %last_region_number.i = getelementptr inbounds %struct.eh_status* %23, i64 0, i32 8
  %24 = load i32* %last_region_number.i, align 4, !tbaa !16
  %inc.i = add nsw i32 %24, 1
  store i32 %inc.i, i32* %last_region_number.i, align 4, !tbaa !16
  %region_number.i48 = getelementptr inbounds i8* %call1.i, i64 24
  %25 = bitcast i8* %region_number.i48 to i32*
  store i32 %inc.i, i32* %25, align 4, !tbaa !17
  %call14.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -86) #4
  %26 = load i32* %25, align 4, !tbaa !17
  %arrayidx.i49 = getelementptr inbounds %struct.rtx_def* %call14.i, i64 0, i32 1, i64 3
  %rtint.i50 = bitcast %union.rtunion_def* %arrayidx.i49 to i32*
  store i32 %26, i32* %rtint.i50, align 4, !tbaa !1
  br label %if.end10

if.end10:                                         ; preds = %cond.end, %if.end, %if.end10.i, %if.then9
  %tobool868 = phi i1 [ false, %cond.end ], [ true, %if.then9 ], [ true, %if.end10.i ], [ false, %if.end ]
  %cond67 = phi %union.tree_node* [ null, %cond.end ], [ %call7, %if.then9 ], [ %call7, %if.end10.i ], [ null, %if.end ]
  %27 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %27, 25
  %28 = and i32 %and, 1
  %29 = or i32 %28, 4
  %call13 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %29) #4
  %30 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i51 = getelementptr inbounds %struct.function* %30, i64 0, i32 0
  %31 = load %struct.eh_status** %eh.i51, align 8, !tbaa !10
  %exc_ptr1.i = getelementptr inbounds %struct.eh_status* %31, i64 0, i32 6
  %32 = load %struct.rtx_def** %exc_ptr1.i, align 8, !tbaa !29
  %tobool.i52 = icmp eq %struct.rtx_def* %32, null
  br i1 %tobool.i52, label %if.then.i54, label %get_exception_pointer.exit

if.then.i54:                                      ; preds = %if.end10
  %33 = load i32* @target_flags, align 4, !tbaa !1
  %and.i = lshr i32 %33, 25
  %34 = and i32 %and.i, 1
  %35 = or i32 %34, 4
  %call.i53 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %35) #4
  %36 = load %struct.eh_status** %eh.i51, align 8, !tbaa !10
  %exc_ptr4.i = getelementptr inbounds %struct.eh_status* %36, i64 0, i32 6
  store %struct.rtx_def* %call.i53, %struct.rtx_def** %exc_ptr4.i, align 8, !tbaa !29
  br label %get_exception_pointer.exit

get_exception_pointer.exit:                       ; preds = %if.end10, %if.then.i54
  %exc_ptr.0.i = phi %struct.rtx_def* [ %32, %if.end10 ], [ %call.i53, %if.then.i54 ]
  %call16 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call13, %struct.rtx_def* %exc_ptr.0.i) #4
  %37 = load i32* @word_mode, align 4, !tbaa !56
  %call17 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %37) #4
  %38 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i56 = getelementptr inbounds %struct.function* %38, i64 0, i32 0
  %39 = load %struct.eh_status** %eh.i56, align 8, !tbaa !10
  %filter1.i = getelementptr inbounds %struct.eh_status* %39, i64 0, i32 5
  %40 = load %struct.rtx_def** %filter1.i, align 8, !tbaa !28
  %tobool.i58 = icmp eq %struct.rtx_def* %40, null
  br i1 %tobool.i58, label %if.then.i61, label %get_exception_filter.exit

if.then.i61:                                      ; preds = %get_exception_pointer.exit
  %41 = load i32* @word_mode, align 4, !tbaa !56
  %call.i60 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %41) #4
  %42 = load %struct.eh_status** %eh.i56, align 8, !tbaa !10
  %filter3.i = getelementptr inbounds %struct.eh_status* %42, i64 0, i32 5
  store %struct.rtx_def* %call.i60, %struct.rtx_def** %filter3.i, align 8, !tbaa !28
  br label %get_exception_filter.exit

get_exception_filter.exit:                        ; preds = %get_exception_pointer.exit, %if.then.i61
  %filter.0.i = phi %struct.rtx_def* [ %40, %get_exception_pointer.exit ], [ %call.i60, %if.then.i61 ]
  %call21 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call17, %struct.rtx_def* %filter.0.i) #4
  %43 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !5
  %call22 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %handler, %struct.rtx_def* %43, i32 0, i32 0) #4
  %44 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %44, i64 0, i32 0
  %45 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %exc_ptr = getelementptr inbounds %struct.eh_status* %45, i64 0, i32 6
  %46 = load %struct.rtx_def** %exc_ptr, align 8, !tbaa !29
  %call24 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %46, %struct.rtx_def* %call13) #4
  %47 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh25 = getelementptr inbounds %struct.function* %47, i64 0, i32 0
  %48 = load %struct.eh_status** %eh25, align 8, !tbaa !10
  %filter = getelementptr inbounds %struct.eh_status* %48, i64 0, i32 5
  %49 = load %struct.rtx_def** %filter, align 8, !tbaa !28
  %call27 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %49, %struct.rtx_def* %call17) #4
  br i1 %tobool868, label %if.then29, label %if.end30

if.then29:                                        ; preds = %get_exception_filter.exit
  tail call void @expand_eh_region_end_must_not_throw(%union.tree_node* %cond67)
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %get_exception_filter.exit
  tail call void @do_pending_stack_adjust() #4
  %50 = load i32* %region_number.i, align 4, !tbaa !17
  %call31 = tail call %struct.rtx_def* @gen_rtx_fmt_i(i32 53, i32 0, i32 %50) #4
  %call32 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call31) #4
  %resume = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 10
  store %struct.rtx_def* %call32, %struct.rtx_def** %resume, align 8, !tbaa !50
  %call33 = tail call %struct.rtx_def* @emit_barrier() #4
  %call34 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call3) #4
  br label %return

return:                                           ; preds = %entry, %if.end30
  ret void
}

declare %struct.rtx_def* @gen_label_rtx() #1

declare void @emit_jump(%struct.rtx_def*) #1

declare %struct.rtx_def* @emit_label(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_reg_rtx(i32) #1

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_exception_pointer(%struct.function* readonly %fun) #0 {
entry:
  %eh = getelementptr inbounds %struct.function* %fun, i64 0, i32 0
  %0 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %exc_ptr1 = getelementptr inbounds %struct.eh_status* %0, i64 0, i32 6
  %1 = load %struct.rtx_def** %exc_ptr1, align 8, !tbaa !29
  %2 = load %struct.function** @cfun, align 8, !tbaa !5
  %cmp = icmp ne %struct.function* %2, %fun
  %tobool = icmp ne %struct.rtx_def* %1, null
  %or.cond = or i1 %cmp, %tobool
  br i1 %or.cond, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %3, 25
  %4 = and i32 %and, 1
  %5 = or i32 %4, 4
  %call = tail call %struct.rtx_def* @gen_reg_rtx(i32 %5) #4
  %6 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %exc_ptr4 = getelementptr inbounds %struct.eh_status* %6, i64 0, i32 6
  store %struct.rtx_def* %call, %struct.rtx_def** %exc_ptr4, align 8, !tbaa !29
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %exc_ptr.0 = phi %struct.rtx_def* [ %1, %entry ], [ %call, %if.then ]
  ret %struct.rtx_def* %exc_ptr.0
}

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #1

; Function Attrs: nounwind uwtable
define void @expand_eh_region_end_must_not_throw(%union.tree_node* %failure) #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %cur_region1.i = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 2
  %3 = load %struct.eh_region** %cur_region1.i, align 8, !tbaa !55
  %call.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -85) #4
  %region_number.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 3
  %4 = load i32* %region_number.i, align 4, !tbaa !17
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %4, i32* %rtint.i, align 4, !tbaa !1
  %outer.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 0
  %5 = load %struct.eh_region** %outer.i, align 8, !tbaa !22
  %6 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh2.i = getelementptr inbounds %struct.function* %6, i64 0, i32 0
  %7 = load %struct.eh_status** %eh2.i, align 8, !tbaa !10
  %cur_region3.i = getelementptr inbounds %struct.eh_status* %7, i64 0, i32 2
  store %struct.eh_region* %5, %struct.eh_region** %cur_region3.i, align 8, !tbaa !55
  %type = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 5
  store i32 5, i32* %type, align 4, !tbaa !40
  %call2 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %label = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 7
  store %struct.rtx_def* %call2, %struct.rtx_def** %label, align 8, !tbaa !49
  %call3 = tail call %struct.rtx_def* @gen_label_rtx() #4
  tail call void @emit_jump(%struct.rtx_def* %call3) #4
  %8 = load %struct.rtx_def** %label, align 8, !tbaa !49
  %call5 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %8) #4
  %9 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !5
  %call6 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %failure, %struct.rtx_def* %9, i32 0, i32 0) #4
  %call7 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call3) #4
  br label %return

return:                                           ; preds = %entry, %if.end
  ret void
}

declare void @do_pending_stack_adjust() #1

declare %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_i(i32, i32, i32) #1

declare %struct.rtx_def* @emit_barrier() #1

; Function Attrs: nounwind uwtable
define void @expand_start_all_catch() #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %if.then.i, label %if.end

if.then.i:                                        ; preds = %entry
  %.b.i = load i1* @doing_eh.warned, align 1
  br i1 %.b.i, label %return, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([56 x i8]* @.str, i64 0, i64 0)) #4
  store i1 true, i1* @doing_eh.warned, align 1
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %cur_region1.i = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 2
  %3 = load %struct.eh_region** %cur_region1.i, align 8, !tbaa !55
  %call.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -85) #4
  %region_number.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 3
  %4 = load i32* %region_number.i, align 4, !tbaa !17
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %4, i32* %rtint.i, align 4, !tbaa !1
  %outer.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 0
  %5 = load %struct.eh_region** %outer.i, align 8, !tbaa !22
  %6 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh2.i = getelementptr inbounds %struct.function* %6, i64 0, i32 0
  %7 = load %struct.eh_status** %eh2.i, align 8, !tbaa !10
  %cur_region3.i = getelementptr inbounds %struct.eh_status* %7, i64 0, i32 2
  store %struct.eh_region* %5, %struct.eh_region** %cur_region3.i, align 8, !tbaa !55
  %type = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 5
  store i32 2, i32* %type, align 4, !tbaa !40
  %8 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %8, i64 0, i32 0
  %9 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %try_region = getelementptr inbounds %struct.eh_status* %9, i64 0, i32 3
  %10 = load %struct.eh_region** %try_region, align 8, !tbaa !57
  %prev_try = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 6, i32 0, i32 2
  store %struct.eh_region* %10, %struct.eh_region** %prev_try, align 8, !tbaa !58
  %call2 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %continue_label = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 6, i32 0, i32 3
  store %struct.rtx_def* %call2, %struct.rtx_def** %continue_label, align 8, !tbaa !43
  %11 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh5 = getelementptr inbounds %struct.function* %11, i64 0, i32 0
  %12 = load %struct.eh_status** %eh5, align 8, !tbaa !10
  %try_region6 = getelementptr inbounds %struct.eh_status* %12, i64 0, i32 3
  store %struct.eh_region* %3, %struct.eh_region** %try_region6, align 8, !tbaa !57
  tail call void @emit_jump(%struct.rtx_def* %call2) #4
  br label %return

return:                                           ; preds = %if.then.i, %if.then3.i, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_start_catch(%union.tree_node* %type_or_list) #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %tobool1 = icmp eq %union.tree_node* %type_or_list, null
  br i1 %tobool1, label %if.end.i, label %if.then2

if.then2:                                         ; preds = %if.end
  %code = getelementptr inbounds %union.tree_node* %type_or_list, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 2
  br i1 %cmp, label %for.body.lr.ph, label %if.end5

if.end5:                                          ; preds = %if.then2
  %call4 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %type_or_list, %union.tree_node* null) #4
  %tobool649 = icmp eq %union.tree_node* %call4, null
  br i1 %tobool649, label %if.end8, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then2, %if.end5
  %type_list.052 = phi %union.tree_node* [ %call4, %if.end5 ], [ %type_or_list, %if.then2 ]
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %add_type_for_runtime.exit
  %type_node.050 = phi %union.tree_node* [ %type_list.052, %for.body.lr.ph ], [ %8, %add_type_for_runtime.exit ]
  %value = getelementptr inbounds %union.tree_node* %type_node.050, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !59
  %3 = load %struct.htab** @type_to_runtime_map, align 8, !tbaa !5
  %4 = bitcast %union.tree_node* %2 to i8*
  %5 = ptrtoint %union.tree_node* %2 to i64
  %.tr.i = trunc i64 %5 to i32
  %conv.i = and i32 %.tr.i, 262143
  %call.i = tail call i8** @htab_find_slot_with_hash(%struct.htab* %3, i8* %4, i32 %conv.i, i32 1) #4
  %6 = load i8** %call.i, align 8
  %cmp.i = icmp eq i8* %6, null
  br i1 %cmp.i, label %if.then.i44, label %add_type_for_runtime.exit

if.then.i44:                                      ; preds = %for.body
  %7 = load %union.tree_node* (%union.tree_node*)** @lang_eh_runtime_type, align 8, !tbaa !5
  %call2.i = tail call %union.tree_node* %7(%union.tree_node* %2) #4
  %call3.i = tail call %union.tree_node* @tree_cons(%union.tree_node* %2, %union.tree_node* %call2.i, %union.tree_node* null) #4
  %call3.c.i = bitcast %union.tree_node* %call3.i to i8*
  store i8* %call3.c.i, i8** %call.i, align 8, !tbaa !5
  br label %add_type_for_runtime.exit

add_type_for_runtime.exit:                        ; preds = %for.body, %if.then.i44
  %chain = getelementptr inbounds %union.tree_node* %type_node.050, i64 0, i32 0, i32 0, i32 0
  %8 = load %union.tree_node** %chain, align 8, !tbaa !60
  %tobool6 = icmp eq %union.tree_node* %8, null
  br i1 %tobool6, label %if.end8, label %for.body

if.end8:                                          ; preds = %add_type_for_runtime.exit, %if.end5
  %type_list.053 = phi %union.tree_node* [ null, %if.end5 ], [ %type_list.052, %add_type_for_runtime.exit ]
  %.pre = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i.i = icmp eq i32 %.pre, 0
  br i1 %tobool.i.i, label %expand_eh_region_start.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %if.end8
  %type_list.155 = phi %union.tree_node* [ %type_list.053, %if.end8 ], [ null, %if.end ]
  %call1.i = tail call noalias i8* @xcalloc(i64 1, i64 112) #4
  %9 = bitcast i8* %call1.i to %struct.eh_region*
  %10 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %10, i64 0, i32 0
  %11 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %cur_region2.i = getelementptr inbounds %struct.eh_status* %11, i64 0, i32 2
  %12 = load %struct.eh_region** %cur_region2.i, align 8, !tbaa !55
  %outer.i = bitcast i8* %call1.i to %struct.eh_region**
  store %struct.eh_region* %12, %struct.eh_region** %outer.i, align 8, !tbaa !22
  %tobool3.i = icmp eq %struct.eh_region* %12, null
  br i1 %tobool3.i, label %if.else.i, label %if.then4.i

if.then4.i:                                       ; preds = %if.end.i
  %inner.i = getelementptr inbounds %struct.eh_region* %12, i64 0, i32 1
  %13 = load %struct.eh_region** %inner.i, align 8, !tbaa !20
  %next_peer.i = getelementptr inbounds i8* %call1.i, i64 16
  %14 = bitcast i8* %next_peer.i to %struct.eh_region**
  store %struct.eh_region* %13, %struct.eh_region** %14, align 8, !tbaa !21
  store %struct.eh_region* %9, %struct.eh_region** %inner.i, align 8, !tbaa !20
  br label %if.end10.i

if.else.i:                                        ; preds = %if.end.i
  %region_tree.i = getelementptr inbounds %struct.eh_status* %11, i64 0, i32 0
  %15 = load %struct.eh_region** %region_tree.i, align 8, !tbaa !19
  %next_peer7.i = getelementptr inbounds i8* %call1.i, i64 16
  %16 = bitcast i8* %next_peer7.i to %struct.eh_region**
  store %struct.eh_region* %15, %struct.eh_region** %16, align 8, !tbaa !21
  store %struct.eh_region* %9, %struct.eh_region** %region_tree.i, align 8, !tbaa !19
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.else.i, %if.then4.i
  %17 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh11.i = getelementptr inbounds %struct.function* %17, i64 0, i32 0
  %18 = load %struct.eh_status** %eh11.i, align 8, !tbaa !10
  %cur_region12.i = getelementptr inbounds %struct.eh_status* %18, i64 0, i32 2
  store %struct.eh_region* %9, %struct.eh_region** %cur_region12.i, align 8, !tbaa !55
  %19 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh13.i = getelementptr inbounds %struct.function* %19, i64 0, i32 0
  %20 = load %struct.eh_status** %eh13.i, align 8, !tbaa !10
  %last_region_number.i = getelementptr inbounds %struct.eh_status* %20, i64 0, i32 8
  %21 = load i32* %last_region_number.i, align 4, !tbaa !16
  %inc.i = add nsw i32 %21, 1
  store i32 %inc.i, i32* %last_region_number.i, align 4, !tbaa !16
  %region_number.i = getelementptr inbounds i8* %call1.i, i64 24
  %22 = bitcast i8* %region_number.i to i32*
  store i32 %inc.i, i32* %22, align 4, !tbaa !17
  %call14.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -86) #4
  %23 = load i32* %22, align 4, !tbaa !17
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call14.i, i64 0, i32 1, i64 3
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %23, i32* %rtint.i, align 4, !tbaa !1
  br label %expand_eh_region_start.exit

expand_eh_region_start.exit:                      ; preds = %if.end8, %if.end10.i
  %type_list.156 = phi %union.tree_node* [ %type_list.053, %if.end8 ], [ %type_list.155, %if.end10.i ]
  %24 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %24, i64 0, i32 0
  %25 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %try_region = getelementptr inbounds %struct.eh_status* %25, i64 0, i32 3
  %26 = load %struct.eh_region** %try_region, align 8, !tbaa !57
  %cur_region = getelementptr inbounds %struct.eh_status* %25, i64 0, i32 2
  %27 = load %struct.eh_region** %cur_region, align 8, !tbaa !55
  %type = getelementptr inbounds %struct.eh_region* %27, i64 0, i32 5
  store i32 3, i32* %type, align 4, !tbaa !40
  %type_list10 = getelementptr inbounds %struct.eh_region* %27, i64 0, i32 6, i32 0, i32 2
  %type_list.1.c = bitcast %union.tree_node* %type_list.156 to %struct.eh_region*
  store %struct.eh_region* %type_list.1.c, %struct.eh_region** %type_list10, align 8, !tbaa !58
  %call11 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %label = getelementptr inbounds %struct.eh_region* %27, i64 0, i32 7
  store %struct.rtx_def* %call11, %struct.rtx_def** %label, align 8, !tbaa !49
  %last_catch = getelementptr inbounds %struct.eh_region* %26, i64 0, i32 6, i32 0, i32 1
  %28 = load %struct.eh_region** %last_catch, align 8, !tbaa !61
  %29 = getelementptr inbounds %struct.eh_region* %27, i64 0, i32 6, i32 0, i32 1
  store %struct.eh_region* %28, %struct.eh_region** %29, align 8, !tbaa !61
  %tobool15 = icmp eq %struct.eh_region* %28, null
  br i1 %tobool15, label %if.else, label %if.then16

if.then16:                                        ; preds = %expand_eh_region_start.exit
  %next_catch = getelementptr inbounds %struct.eh_region* %28, i64 0, i32 6, i32 0, i32 0
  store %struct.eh_region* %27, %struct.eh_region** %next_catch, align 8, !tbaa !62
  br label %if.end22

if.else:                                          ; preds = %expand_eh_region_start.exit
  %catch21 = getelementptr inbounds %struct.eh_region* %26, i64 0, i32 6, i32 0, i32 0
  store %struct.eh_region* %27, %struct.eh_region** %catch21, align 8, !tbaa !62
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then16
  store %struct.eh_region* %27, %struct.eh_region** %last_catch, align 8, !tbaa !61
  %call27 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call11) #4
  br label %return

return:                                           ; preds = %entry, %if.end22
  ret void
}

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define void @expand_end_catch() #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %cur_region1.i = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 2
  %3 = load %struct.eh_region** %cur_region1.i, align 8, !tbaa !55
  %call.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -85) #4
  %region_number.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 3
  %4 = load i32* %region_number.i, align 4, !tbaa !17
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %4, i32* %rtint.i, align 4, !tbaa !1
  %outer.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 0
  %5 = load %struct.eh_region** %outer.i, align 8, !tbaa !22
  %6 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh2.i = getelementptr inbounds %struct.function* %6, i64 0, i32 0
  %7 = load %struct.eh_status** %eh2.i, align 8, !tbaa !10
  %cur_region3.i = getelementptr inbounds %struct.eh_status* %7, i64 0, i32 2
  store %struct.eh_region* %5, %struct.eh_region** %cur_region3.i, align 8, !tbaa !55
  %8 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %8, i64 0, i32 0
  %9 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %try_region2 = getelementptr inbounds %struct.eh_status* %9, i64 0, i32 3
  %10 = load %struct.eh_region** %try_region2, align 8, !tbaa !57
  %continue_label = getelementptr inbounds %struct.eh_region* %10, i64 0, i32 6, i32 0, i32 3
  %11 = load %struct.rtx_def** %continue_label, align 8, !tbaa !43
  tail call void @emit_jump(%struct.rtx_def* %11) #4
  br label %return

return:                                           ; preds = %entry, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_all_catch() #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %try_region1 = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 3
  %3 = load %struct.eh_region** %try_region1, align 8, !tbaa !57
  %prev_try = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 6, i32 0, i32 2
  %4 = load %struct.eh_region** %prev_try, align 8, !tbaa !58
  store %struct.eh_region* %4, %struct.eh_region** %try_region1, align 8, !tbaa !57
  %continue_label = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 6, i32 0, i32 3
  %5 = load %struct.rtx_def** %continue_label, align 8, !tbaa !43
  %call6 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %5) #4
  br label %return

return:                                           ; preds = %entry, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_eh_region_end_allowed(%union.tree_node* %allowed, %union.tree_node* %failure) #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %cur_region1.i = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 2
  %3 = load %struct.eh_region** %cur_region1.i, align 8, !tbaa !55
  %call.i18 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -85) #4
  %region_number.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 3
  %4 = load i32* %region_number.i, align 4, !tbaa !17
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i18, i64 0, i32 1, i64 3
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %4, i32* %rtint.i, align 4, !tbaa !1
  %outer.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 0
  %5 = load %struct.eh_region** %outer.i, align 8, !tbaa !22
  %6 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh2.i = getelementptr inbounds %struct.function* %6, i64 0, i32 0
  %7 = load %struct.eh_status** %eh2.i, align 8, !tbaa !10
  %cur_region3.i = getelementptr inbounds %struct.eh_status* %7, i64 0, i32 2
  store %struct.eh_region* %5, %struct.eh_region** %cur_region3.i, align 8, !tbaa !55
  %type = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 5
  store i32 4, i32* %type, align 4, !tbaa !40
  %8 = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 6, i32 0, i32 0
  %allowed.c = bitcast %union.tree_node* %allowed to %struct.eh_region*
  store %struct.eh_region* %allowed.c, %struct.eh_region** %8, align 8, !tbaa !45
  %call3 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %label = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 7
  store %struct.rtx_def* %call3, %struct.rtx_def** %label, align 8, !tbaa !49
  %tobool422 = icmp eq %union.tree_node* %allowed, null
  br i1 %tobool422, label %for.end, label %for.body

for.body:                                         ; preds = %if.end, %add_type_for_runtime.exit
  %allowed.addr.023 = phi %union.tree_node* [ %16, %add_type_for_runtime.exit ], [ %allowed, %if.end ]
  %value = getelementptr inbounds %union.tree_node* %allowed.addr.023, i64 0, i32 0, i32 2
  %9 = bitcast i32* %value to %union.tree_node**
  %10 = load %union.tree_node** %9, align 8, !tbaa !59
  %11 = load %struct.htab** @type_to_runtime_map, align 8, !tbaa !5
  %12 = bitcast %union.tree_node* %10 to i8*
  %13 = ptrtoint %union.tree_node* %10 to i64
  %.tr.i = trunc i64 %13 to i32
  %conv.i = and i32 %.tr.i, 262143
  %call.i = tail call i8** @htab_find_slot_with_hash(%struct.htab* %11, i8* %12, i32 %conv.i, i32 1) #4
  %14 = load i8** %call.i, align 8
  %cmp.i = icmp eq i8* %14, null
  br i1 %cmp.i, label %if.then.i17, label %add_type_for_runtime.exit

if.then.i17:                                      ; preds = %for.body
  %15 = load %union.tree_node* (%union.tree_node*)** @lang_eh_runtime_type, align 8, !tbaa !5
  %call2.i = tail call %union.tree_node* %15(%union.tree_node* %10) #4
  %call3.i = tail call %union.tree_node* @tree_cons(%union.tree_node* %10, %union.tree_node* %call2.i, %union.tree_node* null) #4
  %call3.c.i = bitcast %union.tree_node* %call3.i to i8*
  store i8* %call3.c.i, i8** %call.i, align 8, !tbaa !5
  br label %add_type_for_runtime.exit

add_type_for_runtime.exit:                        ; preds = %for.body, %if.then.i17
  %chain = getelementptr inbounds %union.tree_node* %allowed.addr.023, i64 0, i32 0, i32 0, i32 0
  %16 = load %union.tree_node** %chain, align 8, !tbaa !60
  %tobool4 = icmp eq %union.tree_node* %16, null
  br i1 %tobool4, label %for.end, label %for.body

for.end:                                          ; preds = %add_type_for_runtime.exit, %if.end
  %call5 = tail call %struct.rtx_def* @gen_label_rtx() #4
  tail call void @emit_jump(%struct.rtx_def* %call5) #4
  %17 = load %struct.rtx_def** %label, align 8, !tbaa !49
  %call7 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %17) #4
  %18 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !5
  %call8 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %failure, %struct.rtx_def* %18, i32 0, i32 0) #4
  tail call void @do_pending_stack_adjust() #4
  %call9 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call5) #4
  br label %return

return:                                           ; preds = %entry, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_eh_region_end_throw(%union.tree_node* %type) #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %cur_region1.i = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 2
  %3 = load %struct.eh_region** %cur_region1.i, align 8, !tbaa !55
  %call.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -85) #4
  %region_number.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 3
  %4 = load i32* %region_number.i, align 4, !tbaa !17
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %4, i32* %rtint.i, align 4, !tbaa !1
  %outer.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 0
  %5 = load %struct.eh_region** %outer.i, align 8, !tbaa !22
  %6 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh2.i = getelementptr inbounds %struct.function* %6, i64 0, i32 0
  %7 = load %struct.eh_status** %eh2.i, align 8, !tbaa !10
  %cur_region3.i = getelementptr inbounds %struct.eh_status* %7, i64 0, i32 2
  store %struct.eh_region* %5, %struct.eh_region** %cur_region3.i, align 8, !tbaa !55
  %type2 = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 5
  store i32 6, i32* %type2, align 4, !tbaa !40
  %8 = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 6, i32 0, i32 0
  %type.c = bitcast %union.tree_node* %type to %struct.eh_region*
  store %struct.eh_region* %type.c, %struct.eh_region** %8, align 8, !tbaa !41
  br label %return

return:                                           ; preds = %entry, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_eh_region_end_fixup(%union.tree_node* %handler) #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %cur_region1.i = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 2
  %3 = load %struct.eh_region** %cur_region1.i, align 8, !tbaa !55
  %call.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -85) #4
  %region_number.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 3
  %4 = load i32* %region_number.i, align 4, !tbaa !17
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %4, i32* %rtint.i, align 4, !tbaa !1
  %outer.i = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 0
  %5 = load %struct.eh_region** %outer.i, align 8, !tbaa !22
  %6 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh2.i = getelementptr inbounds %struct.function* %6, i64 0, i32 0
  %7 = load %struct.eh_status** %eh2.i, align 8, !tbaa !10
  %cur_region3.i = getelementptr inbounds %struct.eh_status* %7, i64 0, i32 2
  store %struct.eh_region* %5, %struct.eh_region** %cur_region3.i, align 8, !tbaa !55
  %type = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 5
  store i32 7, i32* %type, align 4, !tbaa !40
  %8 = getelementptr inbounds %struct.eh_region* %3, i64 0, i32 6, i32 0, i32 0
  %handler.c = bitcast %union.tree_node* %handler to %struct.eh_region*
  store %struct.eh_region* %handler.c, %struct.eh_region** %8, align 8, !tbaa !47
  br label %return

return:                                           ; preds = %entry, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @begin_protect_partials() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %protect_list = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 4
  %2 = load %union.tree_node** %protect_list, align 8, !tbaa !23
  %call = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* null, %union.tree_node* %2) #4
  %3 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1 = getelementptr inbounds %struct.function* %3, i64 0, i32 0
  %4 = load %struct.eh_status** %eh1, align 8, !tbaa !10
  %protect_list2 = getelementptr inbounds %struct.eh_status* %4, i64 0, i32 4
  store %union.tree_node* %call, %union.tree_node** %protect_list2, align 8, !tbaa !23
  ret void
}

; Function Attrs: nounwind uwtable
define void @add_partial_entry(%union.tree_node* %handler) #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool.i.i = icmp eq i32 %0, 0
  br i1 %tobool.i.i, label %expand_eh_region_start.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %call1.i = tail call noalias i8* @xcalloc(i64 1, i64 112) #4
  %1 = bitcast i8* %call1.i to %struct.eh_region*
  %2 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %2, i64 0, i32 0
  %3 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %cur_region2.i = getelementptr inbounds %struct.eh_status* %3, i64 0, i32 2
  %4 = load %struct.eh_region** %cur_region2.i, align 8, !tbaa !55
  %outer.i = bitcast i8* %call1.i to %struct.eh_region**
  store %struct.eh_region* %4, %struct.eh_region** %outer.i, align 8, !tbaa !22
  %tobool3.i = icmp eq %struct.eh_region* %4, null
  br i1 %tobool3.i, label %if.else.i, label %if.then4.i

if.then4.i:                                       ; preds = %if.end.i
  %inner.i = getelementptr inbounds %struct.eh_region* %4, i64 0, i32 1
  %5 = load %struct.eh_region** %inner.i, align 8, !tbaa !20
  %next_peer.i = getelementptr inbounds i8* %call1.i, i64 16
  %6 = bitcast i8* %next_peer.i to %struct.eh_region**
  store %struct.eh_region* %5, %struct.eh_region** %6, align 8, !tbaa !21
  store %struct.eh_region* %1, %struct.eh_region** %inner.i, align 8, !tbaa !20
  br label %if.end10.i

if.else.i:                                        ; preds = %if.end.i
  %region_tree.i = getelementptr inbounds %struct.eh_status* %3, i64 0, i32 0
  %7 = load %struct.eh_region** %region_tree.i, align 8, !tbaa !19
  %next_peer7.i = getelementptr inbounds i8* %call1.i, i64 16
  %8 = bitcast i8* %next_peer7.i to %struct.eh_region**
  store %struct.eh_region* %7, %struct.eh_region** %8, align 8, !tbaa !21
  store %struct.eh_region* %1, %struct.eh_region** %region_tree.i, align 8, !tbaa !19
  br label %if.end10.i

if.end10.i:                                       ; preds = %if.else.i, %if.then4.i
  %9 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh11.i = getelementptr inbounds %struct.function* %9, i64 0, i32 0
  %10 = load %struct.eh_status** %eh11.i, align 8, !tbaa !10
  %cur_region12.i = getelementptr inbounds %struct.eh_status* %10, i64 0, i32 2
  store %struct.eh_region* %1, %struct.eh_region** %cur_region12.i, align 8, !tbaa !55
  %11 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh13.i = getelementptr inbounds %struct.function* %11, i64 0, i32 0
  %12 = load %struct.eh_status** %eh13.i, align 8, !tbaa !10
  %last_region_number.i = getelementptr inbounds %struct.eh_status* %12, i64 0, i32 8
  %13 = load i32* %last_region_number.i, align 4, !tbaa !16
  %inc.i = add nsw i32 %13, 1
  store i32 %inc.i, i32* %last_region_number.i, align 4, !tbaa !16
  %region_number.i = getelementptr inbounds i8* %call1.i, i64 24
  %14 = bitcast i8* %region_number.i to i32*
  store i32 %inc.i, i32* %14, align 4, !tbaa !17
  %call14.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -86) #4
  %15 = load i32* %14, align 4, !tbaa !17
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call14.i, i64 0, i32 1, i64 3
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %15, i32* %rtint.i, align 4, !tbaa !1
  br label %expand_eh_region_start.exit

expand_eh_region_start.exit:                      ; preds = %entry, %if.end10.i
  %16 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %16, i64 0, i32 0
  %17 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %protect_list = getelementptr inbounds %struct.eh_status* %17, i64 0, i32 4
  %18 = load %union.tree_node** %protect_list, align 8, !tbaa !23
  %value = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 2
  %19 = bitcast i32* %value to %union.tree_node**
  %20 = load %union.tree_node** %19, align 8, !tbaa !59
  %call = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %handler, %union.tree_node* %20) #4
  %21 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1 = getelementptr inbounds %struct.function* %21, i64 0, i32 0
  %22 = load %struct.eh_status** %eh1, align 8, !tbaa !10
  %protect_list2 = getelementptr inbounds %struct.eh_status* %22, i64 0, i32 4
  %23 = load %union.tree_node** %protect_list2, align 8, !tbaa !23
  %value4 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 2
  %24 = bitcast i32* %value4 to %union.tree_node**
  store %union.tree_node* %call, %union.tree_node** %24, align 8, !tbaa !59
  ret void
}

; Function Attrs: nounwind uwtable
define void @end_protect_partials() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %protect_list = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 4
  %2 = load %union.tree_node** %protect_list, align 8, !tbaa !23
  %value = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 2
  %3 = bitcast i32* %value to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !59
  %chain = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0
  %5 = load %union.tree_node** %chain, align 8, !tbaa !60
  store %union.tree_node* %5, %union.tree_node** %protect_list, align 8, !tbaa !23
  %tobool11 = icmp eq %union.tree_node* %4, null
  br i1 %tobool11, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %t.012 = phi %union.tree_node* [ %8, %for.body ], [ %4, %entry ]
  %value6 = getelementptr inbounds %union.tree_node* %t.012, i64 0, i32 0, i32 2
  %6 = bitcast i32* %value6 to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !59
  tail call void @expand_eh_region_end_cleanup(%union.tree_node* %7)
  %chain8 = getelementptr inbounds %union.tree_node* %t.012, i64 0, i32 0, i32 0, i32 0
  %8 = load %union.tree_node** %chain8, align 8, !tbaa !60
  %tobool = icmp eq %union.tree_node* %8, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @convert_from_eh_region_ranges() #0 {
entry:
  %insns = alloca %struct.rtx_def*, align 8
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %region_tree.i = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 0
  %2 = load %struct.eh_region** %region_tree.i, align 8, !tbaa !19
  %tobool.i = icmp eq %struct.eh_region* %2, null
  br i1 %tobool.i, label %collect_eh_region_array.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %last_region_number.i = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 8
  %3 = load i32* %last_region_number.i, align 4, !tbaa !16
  %add.i = add nsw i32 %3, 1
  %conv.i = sext i32 %add.i to i64
  %call.i = tail call noalias i8* @xcalloc(i64 %conv.i, i64 8) #4
  %4 = bitcast i8* %call.i to %struct.eh_region**
  %5 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh2.i = getelementptr inbounds %struct.function* %5, i64 0, i32 0
  %6 = load %struct.eh_status** %eh2.i, align 8, !tbaa !10
  %region_array.i = getelementptr inbounds %struct.eh_status* %6, i64 0, i32 1
  store %struct.eh_region** %4, %struct.eh_region*** %region_array.i, align 8, !tbaa !14
  br label %while.body.i

while.body.i:                                     ; preds = %if.else.i, %while.body.i, %do.cond.i, %if.end.i
  %i.0.i = phi %struct.eh_region* [ %2, %if.end.i ], [ %8, %while.body.i ], [ %9, %if.else.i ], [ %11, %do.cond.i ]
  %region_number.i = getelementptr inbounds %struct.eh_region* %i.0.i, i64 0, i32 3
  %7 = load i32* %region_number.i, align 4, !tbaa !17
  %idxprom.i = sext i32 %7 to i64
  %arrayidx.i = getelementptr inbounds %struct.eh_region** %4, i64 %idxprom.i
  store %struct.eh_region* %i.0.i, %struct.eh_region** %arrayidx.i, align 8, !tbaa !5
  %inner.i = getelementptr inbounds %struct.eh_region* %i.0.i, i64 0, i32 1
  %8 = load %struct.eh_region** %inner.i, align 8, !tbaa !20
  %tobool3.i = icmp eq %struct.eh_region* %8, null
  br i1 %tobool3.i, label %if.else.i, label %while.body.i

if.else.i:                                        ; preds = %while.body.i
  %next_peer.i = getelementptr inbounds %struct.eh_region* %i.0.i, i64 0, i32 2
  %9 = load %struct.eh_region** %next_peer.i, align 8, !tbaa !21
  %tobool6.i = icmp eq %struct.eh_region* %9, null
  br i1 %tobool6.i, label %do.body.i, label %while.body.i

do.body.i:                                        ; preds = %if.else.i, %do.cond.i
  %i.1.i = phi %struct.eh_region* [ %10, %do.cond.i ], [ %i.0.i, %if.else.i ]
  %outer.i = getelementptr inbounds %struct.eh_region* %i.1.i, i64 0, i32 0
  %10 = load %struct.eh_region** %outer.i, align 8, !tbaa !22
  %cmp.i = icmp eq %struct.eh_region* %10, null
  br i1 %cmp.i, label %collect_eh_region_array.exit.loopexit, label %do.cond.i

do.cond.i:                                        ; preds = %do.body.i
  %next_peer13.i = getelementptr inbounds %struct.eh_region* %10, i64 0, i32 2
  %11 = load %struct.eh_region** %next_peer13.i, align 8, !tbaa !21
  %cmp14.i = icmp eq %struct.eh_region* %11, null
  br i1 %cmp14.i, label %do.body.i, label %while.body.i

collect_eh_region_array.exit.loopexit:            ; preds = %do.body.i
  %.pre = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i3.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 0
  %.pre58 = load %struct.eh_status** %eh.i3.phi.trans.insert, align 8, !tbaa !10
  br label %collect_eh_region_array.exit

collect_eh_region_array.exit:                     ; preds = %collect_eh_region_array.exit.loopexit, %entry
  %12 = phi %struct.eh_status* [ %.pre58, %collect_eh_region_array.exit.loopexit ], [ %1, %entry ]
  %last_region_number.i4 = getelementptr inbounds %struct.eh_status* %12, i64 0, i32 8
  %13 = load i32* %last_region_number.i4, align 4, !tbaa !16
  %cmp43.i = icmp slt i32 %13, 1
  br i1 %cmp43.i, label %resolve_fixup_regions.exit, label %for.body.i

for.body.i:                                       ; preds = %collect_eh_region_array.exit, %for.inc23.for.body_crit_edge.i
  %14 = phi %struct.eh_status* [ %.pre51.i, %for.inc23.for.body_crit_edge.i ], [ %12, %collect_eh_region_array.exit ]
  %indvars.iv47.i = phi i64 [ %indvars.iv.next48.i, %for.inc23.for.body_crit_edge.i ], [ 1, %collect_eh_region_array.exit ]
  %region_array.i5 = getelementptr inbounds %struct.eh_status* %14, i64 0, i32 1
  %15 = load %struct.eh_region*** %region_array.i5, align 8, !tbaa !14
  %arrayidx.i6 = getelementptr inbounds %struct.eh_region** %15, i64 %indvars.iv47.i
  %16 = load %struct.eh_region** %arrayidx.i6, align 8, !tbaa !5
  %tobool.i7 = icmp eq %struct.eh_region* %16, null
  br i1 %tobool.i7, label %for.inc23.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %for.body.i
  %type.i = getelementptr inbounds %struct.eh_region* %16, i64 0, i32 5
  %17 = load i32* %type.i, align 4, !tbaa !40
  %cmp2.i = icmp eq i32 %17, 7
  br i1 %cmp2.i, label %for.body5.lr.ph.i, label %for.inc23.i

for.body5.lr.ph.i:                                ; preds = %lor.lhs.false.i
  %u13.i = getelementptr inbounds %struct.eh_region* %16, i64 0, i32 6
  %cleanup_exp.i = bitcast %union.anon* %u13.i to %union.tree_node**
  br label %for.body5.i

for.body5.i:                                      ; preds = %for.inc.i, %for.body5.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %for.body5.lr.ph.i ], [ %indvars.iv.next.i, %for.inc.i ]
  %arrayidx9.i = getelementptr inbounds %struct.eh_region** %15, i64 %indvars.iv.i
  %18 = load %struct.eh_region** %arrayidx9.i, align 8, !tbaa !5
  %type10.i = getelementptr inbounds %struct.eh_region* %18, i64 0, i32 5
  %19 = load i32* %type10.i, align 4, !tbaa !40
  %cmp11.i = icmp eq i32 %19, 1
  br i1 %cmp11.i, label %land.lhs.true.i, label %for.inc.i

land.lhs.true.i:                                  ; preds = %for.body5.i
  %u.i = getelementptr inbounds %struct.eh_region* %18, i64 0, i32 6
  %exp.i = bitcast %union.anon* %u.i to %union.tree_node**
  %20 = load %union.tree_node** %exp.i, align 8, !tbaa !41
  %21 = load %union.tree_node** %cleanup_exp.i, align 8, !tbaa !47
  %cmp15.i = icmp eq %union.tree_node* %20, %21
  br i1 %cmp15.i, label %if.end20.i, label %for.inc.i

for.inc.i:                                        ; preds = %land.lhs.true.i, %for.body5.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %22 = trunc i64 %indvars.iv.i to i32
  %cmp4.i = icmp slt i32 %22, %13
  br i1 %cmp4.i, label %for.body5.i, label %if.then19.i

if.then19.i:                                      ; preds = %for.inc.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 1180, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.resolve_fixup_regions, i64 0, i64 0)) #6
  unreachable

if.end20.i:                                       ; preds = %land.lhs.true.i
  %outer.i8 = getelementptr inbounds %struct.eh_region* %18, i64 0, i32 0
  %23 = load %struct.eh_region** %outer.i8, align 8, !tbaa !22
  %24 = getelementptr inbounds %struct.eh_region* %16, i64 0, i32 6, i32 0, i32 1
  store %struct.eh_region* %23, %struct.eh_region** %24, align 8, !tbaa !63
  br label %for.inc23.i

for.inc23.i:                                      ; preds = %if.end20.i, %lor.lhs.false.i, %for.body.i
  %25 = trunc i64 %indvars.iv47.i to i32
  %cmp.i9 = icmp slt i32 %25, %13
  br i1 %cmp.i9, label %for.inc23.for.body_crit_edge.i, label %resolve_fixup_regions.exit.loopexit

for.inc23.for.body_crit_edge.i:                   ; preds = %for.inc23.i
  %indvars.iv.next48.i = add nuw nsw i64 %indvars.iv47.i, 1
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 0
  %.pre51.i = load %struct.eh_status** %eh1.phi.trans.insert.i, align 8, !tbaa !10
  br label %for.body.i

resolve_fixup_regions.exit.loopexit:              ; preds = %for.inc23.i
  %.pre59 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.phi.trans.insert = getelementptr inbounds %struct.function* %.pre59, i64 0, i32 0
  %.pre60 = load %struct.eh_status** %eh.phi.trans.insert, align 8, !tbaa !10
  %last_region_number.phi.trans.insert = getelementptr inbounds %struct.eh_status* %.pre60, i64 0, i32 8
  %.pre61 = load i32* %last_region_number.phi.trans.insert, align 4, !tbaa !16
  br label %resolve_fixup_regions.exit

resolve_fixup_regions.exit:                       ; preds = %resolve_fixup_regions.exit.loopexit, %collect_eh_region_array.exit
  %26 = phi i32 [ %.pre61, %resolve_fixup_regions.exit.loopexit ], [ %13, %collect_eh_region_array.exit ]
  %add = add nsw i32 %26, 1
  %conv = sext i32 %add to i64
  %mul = shl nsw i64 %conv, 2
  %call = tail call noalias i8* @xmalloc(i64 %mul) #4
  %27 = bitcast i8* %call to i32*
  %call1 = tail call %struct.rtx_def* @get_insns() #4
  store %struct.rtx_def* %call1, %struct.rtx_def** %insns, align 8, !tbaa !5
  call fastcc void @convert_from_eh_region_ranges_1(%struct.rtx_def** %insns, i32* %27, i32 0)
  tail call void @free(i8* %call)
  %call.i10 = tail call %struct.rtx_def* @get_insns() #4
  %tobool115.i = icmp eq %struct.rtx_def* %call.i10, null
  br i1 %tobool115.i, label %for.end.i, label %for.body.i13

for.body.i13:                                     ; preds = %resolve_fixup_regions.exit, %for.inc.i22
  %insn.0116.i = phi %struct.rtx_def* [ %41, %for.inc.i22 ], [ %call.i10, %resolve_fixup_regions.exit ]
  %28 = getelementptr inbounds %struct.rtx_def* %insn.0116.i, i64 0, i32 0
  %bf.load.i = load i32* %28, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom112.i = zext i32 %bf.clear.i to i64
  %arrayidx.i11 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom112.i
  %29 = load i8* %arrayidx.i11, align 1, !tbaa !56
  %cmp.i12 = icmp eq i8 %29, 105
  br i1 %cmp.i12, label %land.lhs.true.i15, label %for.inc.i22

land.lhs.true.i15:                                ; preds = %for.body.i13
  %call2.i = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %insn.0116.i, i32 23, %struct.rtx_def* null) #4
  %tobool3.i14 = icmp eq %struct.rtx_def* %call2.i, null
  br i1 %tobool3.i14, label %for.inc.i22, label %land.lhs.true4.i

land.lhs.true4.i:                                 ; preds = %land.lhs.true.i15
  %arrayidx5.i = getelementptr inbounds %struct.rtx_def* %call2.i, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx5.i to %struct.rtx_def**
  %30 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !5
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %30, i64 0, i32 1, i64 0, i32 0
  %31 = load i64* %rtwint.i, align 8, !tbaa !64
  %cmp8.i = icmp sgt i64 %31, 0
  br i1 %cmp8.i, label %land.lhs.true10.i, label %for.inc.i22

land.lhs.true10.i:                                ; preds = %land.lhs.true4.i
  %32 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i16 = getelementptr inbounds %struct.function* %32, i64 0, i32 0
  %33 = load %struct.eh_status** %eh.i16, align 8, !tbaa !10
  %region_array.i17 = getelementptr inbounds %struct.eh_status* %33, i64 0, i32 1
  %34 = load %struct.eh_region*** %region_array.i17, align 8, !tbaa !14
  %arrayidx17.i = getelementptr inbounds %struct.eh_region** %34, i64 %31
  %35 = load %struct.eh_region** %arrayidx17.i, align 8, !tbaa !5
  %tobool18.i = icmp eq %struct.eh_region* %35, null
  br i1 %tobool18.i, label %for.inc.i22, label %land.lhs.true19.i

land.lhs.true19.i:                                ; preds = %land.lhs.true10.i
  %type.i18 = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 5
  %36 = load i32* %type.i18, align 4, !tbaa !40
  %cmp20.i = icmp eq i32 %36, 7
  br i1 %cmp20.i, label %if.then.i, label %for.inc.i22

if.then.i:                                        ; preds = %land.lhs.true19.i
  %37 = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 6, i32 0, i32 1
  %38 = load %struct.eh_region** %37, align 8, !tbaa !63
  %tobool23.i = icmp eq %struct.eh_region* %38, null
  br i1 %tobool23.i, label %if.else.i20, label %if.then24.i

if.then24.i:                                      ; preds = %if.then.i
  %region_number.i19 = getelementptr inbounds %struct.eh_region* %38, i64 0, i32 3
  %39 = load i32* %region_number.i19, align 4, !tbaa !17
  %conv28.i = sext i32 %39 to i64
  %call29.i = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv28.i) #4
  %40 = getelementptr inbounds %union.rtunion_def* %arrayidx5.i, i64 0, i32 0
  %call29.c.i = ptrtoint %struct.rtx_def* %call29.i to i64
  store i64 %call29.c.i, i64* %40, align 8, !tbaa !5
  br label %for.inc.i22

if.else.i20:                                      ; preds = %if.then.i
  tail call void @remove_note(%struct.rtx_def* %insn.0116.i, %struct.rtx_def* %call2.i) #4
  br label %for.inc.i22

for.inc.i22:                                      ; preds = %if.else.i20, %if.then24.i, %land.lhs.true19.i, %land.lhs.true10.i, %land.lhs.true4.i, %land.lhs.true.i15, %for.body.i13
  %arrayidx35.i = getelementptr inbounds %struct.rtx_def* %insn.0116.i, i64 0, i32 1, i64 2
  %rtx36.i = bitcast %union.rtunion_def* %arrayidx35.i to %struct.rtx_def**
  %41 = load %struct.rtx_def** %rtx36.i, align 8, !tbaa !5
  %tobool.i21 = icmp eq %struct.rtx_def* %41, null
  br i1 %tobool.i21, label %for.end.i, label %for.body.i13

for.end.i:                                        ; preds = %for.inc.i22, %resolve_fixup_regions.exit
  %42 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh37.i = getelementptr inbounds %struct.function* %42, i64 0, i32 0
  %43 = load %struct.eh_status** %eh37.i, align 8, !tbaa !10
  %last_region_number.i23 = getelementptr inbounds %struct.eh_status* %43, i64 0, i32 8
  %44 = load i32* %last_region_number.i23, align 4, !tbaa !16
  %cmp39113.i = icmp sgt i32 %44, 0
  br i1 %cmp39113.i, label %for.body41.lr.ph.i, label %remove_fixup_regions.exit

for.body41.lr.ph.i:                               ; preds = %for.end.i
  %45 = sext i32 %44 to i64
  br label %for.body41.i

for.body41.i:                                     ; preds = %for.inc83.for.body41_crit_edge.i, %for.body41.lr.ph.i
  %46 = phi %struct.eh_status* [ %43, %for.body41.lr.ph.i ], [ %.pre117.i, %for.inc83.for.body41_crit_edge.i ]
  %indvars.iv.i24 = phi i64 [ %45, %for.body41.lr.ph.i ], [ %indvars.iv.next.i29, %for.inc83.for.body41_crit_edge.i ]
  %region_array44.i = getelementptr inbounds %struct.eh_status* %46, i64 0, i32 1
  %47 = load %struct.eh_region*** %region_array44.i, align 8, !tbaa !14
  %arrayidx45.i = getelementptr inbounds %struct.eh_region** %47, i64 %indvars.iv.i24
  %48 = load %struct.eh_region** %arrayidx45.i, align 8, !tbaa !5
  %tobool46.i = icmp eq %struct.eh_region* %48, null
  br i1 %tobool46.i, label %for.inc83.i, label %if.end48.i

if.end48.i:                                       ; preds = %for.body41.i
  %type49.i = getelementptr inbounds %struct.eh_region* %48, i64 0, i32 5
  %49 = load i32* %type49.i, align 4, !tbaa !40
  switch i32 %49, label %for.inc83.i [
    i32 1, label %if.end54.thread.i
    i32 7, label %if.end59.i
  ]

if.end54.thread.i:                                ; preds = %if.end48.i
  %50 = getelementptr inbounds %struct.eh_region* %48, i64 0, i32 6, i32 0, i32 0
  store %struct.eh_region* null, %struct.eh_region** %50, align 8, !tbaa !41
  br label %for.inc83.i

if.end59.i:                                       ; preds = %if.end48.i
  %inner.i25 = getelementptr inbounds %struct.eh_region* %48, i64 0, i32 1
  %51 = load %struct.eh_region** %inner.i25, align 8, !tbaa !20
  %tobool60.i = icmp eq %struct.eh_region* %51, null
  br i1 %tobool60.i, label %if.end82.i, label %if.then61.i

if.then61.i:                                      ; preds = %if.end59.i
  %52 = getelementptr inbounds %struct.eh_region* %48, i64 0, i32 6, i32 0, i32 1
  %53 = load %struct.eh_region** %52, align 8, !tbaa !63
  br label %for.cond66.i

for.cond66.i:                                     ; preds = %for.cond66.i, %if.then61.i
  %p.0.i = phi %struct.eh_region* [ %51, %if.then61.i ], [ %54, %for.cond66.i ]
  %outer.i26 = getelementptr inbounds %struct.eh_region* %p.0.i, i64 0, i32 0
  store %struct.eh_region* %53, %struct.eh_region** %outer.i26, align 8, !tbaa !22
  %next_peer.i27 = getelementptr inbounds %struct.eh_region* %p.0.i, i64 0, i32 2
  %54 = load %struct.eh_region** %next_peer.i27, align 8, !tbaa !21
  %tobool67.i = icmp eq %struct.eh_region* %54, null
  br i1 %tobool67.i, label %for.end72.i, label %for.cond66.i

for.end72.i:                                      ; preds = %for.cond66.i
  %tobool73.i = icmp eq %struct.eh_region* %53, null
  br i1 %tobool73.i, label %if.else76.i, label %if.then74.i

if.then74.i:                                      ; preds = %for.end72.i
  %inner75.i = getelementptr inbounds %struct.eh_region* %53, i64 0, i32 1
  br label %if.end78.i

if.else76.i:                                      ; preds = %for.end72.i
  %55 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh77.i = getelementptr inbounds %struct.function* %55, i64 0, i32 0
  %56 = load %struct.eh_status** %eh77.i, align 8, !tbaa !10
  %region_tree.i28 = getelementptr inbounds %struct.eh_status* %56, i64 0, i32 0
  br label %if.end78.i

if.end78.i:                                       ; preds = %if.else76.i, %if.then74.i
  %pp.0.i = phi %struct.eh_region** [ %inner75.i, %if.then74.i ], [ %region_tree.i28, %if.else76.i ]
  %57 = load %struct.eh_region** %pp.0.i, align 8, !tbaa !5
  store %struct.eh_region* %57, %struct.eh_region** %next_peer.i27, align 8, !tbaa !21
  store %struct.eh_region* %51, %struct.eh_region** %pp.0.i, align 8, !tbaa !5
  store %struct.eh_region* null, %struct.eh_region** %inner.i25, align 8, !tbaa !20
  br label %if.end82.i

if.end82.i:                                       ; preds = %if.end78.i, %if.end59.i
  tail call fastcc void @remove_eh_handler(%struct.eh_region* %48) #4
  br label %for.inc83.i

for.inc83.i:                                      ; preds = %if.end82.i, %if.end54.thread.i, %if.end48.i, %for.body41.i
  %indvars.iv.next.i29 = add nsw i64 %indvars.iv.i24, -1
  %58 = trunc i64 %indvars.iv.next.i29 to i32
  %cmp39.i = icmp sgt i32 %58, 0
  br i1 %cmp39.i, label %for.inc83.for.body41_crit_edge.i, label %remove_fixup_regions.exit

for.inc83.for.body41_crit_edge.i:                 ; preds = %for.inc83.i
  %.pre.i30 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh43.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i30, i64 0, i32 0
  %.pre117.i = load %struct.eh_status** %eh43.phi.trans.insert.i, align 8, !tbaa !10
  br label %for.body41.i

remove_fixup_regions.exit:                        ; preds = %for.inc83.i, %for.end.i
  %59 = load %struct.rtx_def** %insns, align 8, !tbaa !5
  %call.i31 = tail call i32 @get_max_uid() #4
  %conv.i32 = sext i32 %call.i31 to i64
  %call1.i = tail call noalias i8* @xcalloc(i64 %conv.i32, i64 4) #4
  %60 = bitcast i8* %call1.i to i32*
  %61 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i33 = getelementptr inbounds %struct.function* %61, i64 0, i32 0
  %62 = load %struct.eh_status** %eh.i33, align 8, !tbaa !10
  %last_region_number.i34 = getelementptr inbounds %struct.eh_status* %62, i64 0, i32 8
  %63 = load i32* %last_region_number.i34, align 4, !tbaa !16
  %add.i35 = add nsw i32 %63, 1
  %conv2.i = sext i32 %add.i35 to i64
  %call3.i = tail call noalias i8* @xcalloc(i64 %conv2.i, i64 1) #4
  %64 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh4.i = getelementptr inbounds %struct.function* %64, i64 0, i32 0
  %65 = load %struct.eh_status** %eh4.i, align 8, !tbaa !10
  %last_region_number5.i = getelementptr inbounds %struct.eh_status* %65, i64 0, i32 8
  %66 = load i32* %last_region_number5.i, align 4, !tbaa !16
  %cmp164.i = icmp sgt i32 %66, 0
  br i1 %cmp164.i, label %for.body.lr.ph.i, label %for.cond68.preheader.i

for.body.lr.ph.i:                                 ; preds = %remove_fixup_regions.exit
  %region_array.i36 = getelementptr inbounds %struct.eh_status* %65, i64 0, i32 1
  %67 = load %struct.eh_region*** %region_array.i36, align 8, !tbaa !14
  %68 = sext i32 %66 to i64
  br label %for.body.i39

for.cond68.preheader.i:                           ; preds = %for.inc.i48, %remove_fixup_regions.exit
  %tobool69162.i = icmp eq %struct.rtx_def* %59, null
  br i1 %tobool69162.i, label %for.end81.i, label %for.body70.i

for.body.i39:                                     ; preds = %for.inc.i48, %for.body.lr.ph.i
  %indvars.iv167.i = phi i64 [ %68, %for.body.lr.ph.i ], [ %indvars.iv.next168.i, %for.inc.i48 ]
  %arrayidx.i37 = getelementptr inbounds %struct.eh_region** %67, i64 %indvars.iv167.i
  %69 = load %struct.eh_region** %arrayidx.i37, align 8, !tbaa !5
  %tobool.i38 = icmp eq %struct.eh_region* %69, null
  br i1 %tobool.i38, label %for.inc.i48, label %lor.lhs.false.i42

lor.lhs.false.i42:                                ; preds = %for.body.i39
  %region_number.i40 = getelementptr inbounds %struct.eh_region* %69, i64 0, i32 3
  %70 = load i32* %region_number.i40, align 4, !tbaa !17
  %71 = trunc i64 %indvars.iv167.i to i32
  %cmp8.i41 = icmp eq i32 %70, %71
  br i1 %cmp8.i41, label %if.end.i43, label %for.inc.i48

if.end.i43:                                       ; preds = %lor.lhs.false.i42
  %resume.i = getelementptr inbounds %struct.eh_region* %69, i64 0, i32 10
  %72 = load %struct.rtx_def** %resume.i, align 8, !tbaa !50
  %tobool10.i = icmp eq %struct.rtx_def* %72, null
  br i1 %tobool10.i, label %if.end25.i, label %if.then11.i

if.then11.i:                                      ; preds = %if.end.i43
  %arrayidx13.i = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 1, i64 0
  %rtint.i = bitcast %union.rtunion_def* %arrayidx13.i to i32*
  %73 = load i32* %rtint.i, align 4, !tbaa !1
  %idxprom14.i = sext i32 %73 to i64
  %arrayidx15.i = getelementptr inbounds i32* %60, i64 %idxprom14.i
  %74 = load i32* %arrayidx15.i, align 4, !tbaa !1
  %tobool16.i = icmp eq i32 %74, 0
  br i1 %tobool16.i, label %if.end18.i, label %if.then17.i

if.then17.i:                                      ; preds = %if.then11.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 1280, i8* getelementptr inbounds ([27 x i8]* @__FUNCTION__.remove_unreachable_regions, i64 0, i64 0)) #6
  unreachable

if.end18.i:                                       ; preds = %if.then11.i
  store i32 %70, i32* %arrayidx15.i, align 4, !tbaa !1
  br label %if.end25.i

if.end25.i:                                       ; preds = %if.end18.i, %if.end.i43
  %label.i = getelementptr inbounds %struct.eh_region* %69, i64 0, i32 7
  %75 = load %struct.rtx_def** %label.i, align 8, !tbaa !49
  %tobool26.i = icmp eq %struct.rtx_def* %75, null
  br i1 %tobool26.i, label %if.end43.i, label %if.then27.i

if.then27.i:                                      ; preds = %if.end25.i
  %arrayidx30.i = getelementptr inbounds %struct.rtx_def* %75, i64 0, i32 1, i64 0
  %rtint31.i = bitcast %union.rtunion_def* %arrayidx30.i to i32*
  %76 = load i32* %rtint31.i, align 4, !tbaa !1
  %idxprom32.i = sext i32 %76 to i64
  %arrayidx33.i = getelementptr inbounds i32* %60, i64 %idxprom32.i
  %77 = load i32* %arrayidx33.i, align 4, !tbaa !1
  %tobool34.i = icmp eq i32 %77, 0
  br i1 %tobool34.i, label %if.end36.i, label %if.then35.i

if.then35.i:                                      ; preds = %if.then27.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 1286, i8* getelementptr inbounds ([27 x i8]* @__FUNCTION__.remove_unreachable_regions, i64 0, i64 0)) #6
  unreachable

if.end36.i:                                       ; preds = %if.then27.i
  store i32 %70, i32* %arrayidx33.i, align 4, !tbaa !1
  br label %if.end43.i

if.end43.i:                                       ; preds = %if.end36.i, %if.end25.i
  %type.i44 = getelementptr inbounds %struct.eh_region* %69, i64 0, i32 5
  %78 = load i32* %type.i44, align 4, !tbaa !40
  %cmp44.i = icmp eq i32 %78, 2
  br i1 %cmp44.i, label %land.lhs.true.i46, label %for.inc.i48

land.lhs.true.i46:                                ; preds = %if.end43.i
  %continue_label.i = getelementptr inbounds %struct.eh_region* %69, i64 0, i32 6, i32 0, i32 3
  %79 = load %struct.rtx_def** %continue_label.i, align 8, !tbaa !43
  %tobool46.i45 = icmp eq %struct.rtx_def* %79, null
  br i1 %tobool46.i45, label %for.inc.i48, label %if.then47.i

if.then47.i:                                      ; preds = %land.lhs.true.i46
  %arrayidx52.i = getelementptr inbounds %struct.rtx_def* %79, i64 0, i32 1, i64 0
  %rtint53.i = bitcast %union.rtunion_def* %arrayidx52.i to i32*
  %80 = load i32* %rtint53.i, align 4, !tbaa !1
  %idxprom54.i = sext i32 %80 to i64
  %arrayidx55.i = getelementptr inbounds i32* %60, i64 %idxprom54.i
  %81 = load i32* %arrayidx55.i, align 4, !tbaa !1
  %tobool56.i = icmp eq i32 %81, 0
  br i1 %tobool56.i, label %if.end58.i, label %if.then57.i

if.then57.i:                                      ; preds = %if.then47.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 1292, i8* getelementptr inbounds ([27 x i8]* @__FUNCTION__.remove_unreachable_regions, i64 0, i64 0)) #6
  unreachable

if.end58.i:                                       ; preds = %if.then47.i
  store i32 %70, i32* %arrayidx55.i, align 4, !tbaa !1
  br label %for.inc.i48

for.inc.i48:                                      ; preds = %if.end58.i, %land.lhs.true.i46, %if.end43.i, %lor.lhs.false.i42, %for.body.i39
  %indvars.iv.next168.i = add nsw i64 %indvars.iv167.i, -1
  %82 = trunc i64 %indvars.iv.next168.i to i32
  %cmp.i47 = icmp sgt i32 %82, 0
  br i1 %cmp.i47, label %for.body.i39, label %for.cond68.preheader.i

for.body70.i:                                     ; preds = %for.cond68.preheader.i, %for.body70.i
  %insn.0163.i = phi %struct.rtx_def* [ %85, %for.body70.i ], [ %59, %for.cond68.preheader.i ]
  %fld71.i = getelementptr inbounds %struct.rtx_def* %insn.0163.i, i64 0, i32 1
  %rtint73.i = bitcast [1 x %union.rtunion_def]* %fld71.i to i32*
  %83 = load i32* %rtint73.i, align 4, !tbaa !1
  %idxprom74.i = sext i32 %83 to i64
  %arrayidx75.i = getelementptr inbounds i32* %60, i64 %idxprom74.i
  %84 = load i32* %arrayidx75.i, align 4, !tbaa !1
  %idxprom76.i = sext i32 %84 to i64
  %arrayidx77.i = getelementptr inbounds i8* %call3.i, i64 %idxprom76.i
  store i8 1, i8* %arrayidx77.i, align 1, !tbaa !65
  %arrayidx80.i = getelementptr inbounds %struct.rtx_def* %insn.0163.i, i64 0, i32 1, i64 2
  %rtx.i49 = bitcast %union.rtunion_def* %arrayidx80.i to %struct.rtx_def**
  %85 = load %struct.rtx_def** %rtx.i49, align 8, !tbaa !5
  %tobool69.i = icmp eq %struct.rtx_def* %85, null
  br i1 %tobool69.i, label %for.end81.i, label %for.body70.i

for.end81.i:                                      ; preds = %for.body70.i, %for.cond68.preheader.i
  br i1 %cmp164.i, label %for.body87.lr.ph.i, label %remove_unreachable_regions.exit

for.body87.lr.ph.i:                               ; preds = %for.end81.i
  %86 = sext i32 %66 to i64
  br label %for.body87.i

for.body87.i:                                     ; preds = %for.inc117.for.body87_crit_edge.i, %for.body87.lr.ph.i
  %87 = phi %struct.eh_status* [ %65, %for.body87.lr.ph.i ], [ %.pre169.i, %for.inc117.for.body87_crit_edge.i ]
  %indvars.iv.i50 = phi i64 [ %86, %for.body87.lr.ph.i ], [ %indvars.iv.next.i52, %for.inc117.for.body87_crit_edge.i ]
  %region_array90.i = getelementptr inbounds %struct.eh_status* %87, i64 0, i32 1
  %88 = load %struct.eh_region*** %region_array90.i, align 8, !tbaa !14
  %arrayidx91.i = getelementptr inbounds %struct.eh_region** %88, i64 %indvars.iv.i50
  %89 = load %struct.eh_region** %arrayidx91.i, align 8, !tbaa !5
  %tobool92.i = icmp eq %struct.eh_region* %89, null
  br i1 %tobool92.i, label %for.inc117.i, label %land.lhs.true93.i

land.lhs.true93.i:                                ; preds = %for.body87.i
  %region_number94.i = getelementptr inbounds %struct.eh_region* %89, i64 0, i32 3
  %90 = load i32* %region_number94.i, align 4, !tbaa !17
  %91 = trunc i64 %indvars.iv.i50 to i32
  %cmp95.i = icmp eq i32 %90, %91
  br i1 %cmp95.i, label %land.lhs.true97.i, label %for.inc117.i

land.lhs.true97.i:                                ; preds = %land.lhs.true93.i
  %arrayidx99.i = getelementptr inbounds i8* %call3.i, i64 %indvars.iv.i50
  %92 = load i8* %arrayidx99.i, align 1, !tbaa !65, !range !67
  %tobool100.i = icmp eq i8 %92, 0
  br i1 %tobool100.i, label %if.then101.i, label %for.inc117.i

if.then101.i:                                     ; preds = %land.lhs.true97.i
  %type102.i = getelementptr inbounds %struct.eh_region* %89, i64 0, i32 5
  %93 = load i32* %type102.i, align 4, !tbaa !40
  %cmp103.i = icmp eq i32 %93, 6
  br i1 %cmp103.i, label %land.lhs.true105.i, label %if.end115.i

land.lhs.true105.i:                               ; preds = %if.then101.i
  %outer.i51 = getelementptr inbounds %struct.eh_region* %89, i64 0, i32 0
  %94 = load %struct.eh_region** %outer.i51, align 8, !tbaa !22
  %tobool106.i = icmp eq %struct.eh_region* %94, null
  br i1 %tobool106.i, label %if.end115.i, label %land.lhs.true107.i

land.lhs.true107.i:                               ; preds = %land.lhs.true105.i
  %region_number109.i = getelementptr inbounds %struct.eh_region* %94, i64 0, i32 3
  %95 = load i32* %region_number109.i, align 4, !tbaa !17
  %idxprom110.i = sext i32 %95 to i64
  %arrayidx111.i = getelementptr inbounds i8* %call3.i, i64 %idxprom110.i
  %96 = load i8* %arrayidx111.i, align 1, !tbaa !65, !range !67
  %tobool112.i = icmp eq i8 %96, 0
  br i1 %tobool112.i, label %if.end115.i, label %for.inc117.i

if.end115.i:                                      ; preds = %land.lhs.true107.i, %land.lhs.true105.i, %if.then101.i
  tail call fastcc void @remove_eh_handler(%struct.eh_region* %89) #4
  br label %for.inc117.i

for.inc117.i:                                     ; preds = %if.end115.i, %land.lhs.true107.i, %land.lhs.true97.i, %land.lhs.true93.i, %for.body87.i
  %indvars.iv.next.i52 = add nsw i64 %indvars.iv.i50, -1
  %97 = trunc i64 %indvars.iv.next.i52 to i32
  %cmp85.i = icmp sgt i32 %97, 0
  br i1 %cmp85.i, label %for.inc117.for.body87_crit_edge.i, label %remove_unreachable_regions.exit

for.inc117.for.body87_crit_edge.i:                ; preds = %for.inc117.i
  %.pre.i53 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh89.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i53, i64 0, i32 0
  %.pre169.i = load %struct.eh_status** %eh89.phi.trans.insert.i, align 8, !tbaa !10
  br label %for.body87.i

remove_unreachable_regions.exit:                  ; preds = %for.inc117.i, %for.end81.i
  tail call void @free(i8* %call3.i) #4
  tail call void @free(i8* %call1.i) #4
  ret void
}

declare noalias i8* @xmalloc(i64) #1

declare %struct.rtx_def* @get_insns() #1

; Function Attrs: nounwind uwtable
define internal fastcc void @convert_from_eh_region_ranges_1(%struct.rtx_def** nocapture %pinsns, i32* %orig_sp, i32 %cur) #0 {
entry:
  %0 = load %struct.rtx_def** %pinsns, align 8, !tbaa !5
  %tobool165169 = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool165169, label %if.end120, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry, %if.end30
  %cur.addr.0.ph172 = phi i32 [ %cur.addr.1, %if.end30 ], [ %cur, %entry ]
  %sp.0.ph171 = phi i32* [ %sp.1, %if.end30 ], [ %orig_sp, %entry ]
  %insn.0.ph170 = phi %struct.rtx_def* [ %1, %if.end30 ], [ %0, %entry ]
  %cmp40 = icmp sgt i32 %cur.addr.0.ph172, 0
  %conv73 = sext i32 %cur.addr.0.ph172 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %insn.0166 = phi %struct.rtx_def* [ %insn.0.ph170, %for.body.lr.ph ], [ %1, %for.cond.backedge ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.0166, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.rtx_def* %insn.0166, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %if.then, label %if.else32

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn.0166, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %3 = load i32* %rtint, align 4, !tbaa !1
  %4 = and i32 %3, -2
  %5 = icmp eq i32 %4, -86
  br i1 %5, label %if.then5, label %for.cond.backedge

for.cond.backedge:                                ; preds = %if.then, %if.end82, %land.lhs.true87, %if.then95, %if.else32
  %tobool = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool, label %for.end, label %for.body

if.then5:                                         ; preds = %if.then
  %cmp3 = icmp eq i32 %3, -86
  br i1 %cmp3, label %if.then7, label %if.else25

if.then7:                                         ; preds = %if.then5
  %incdec.ptr = getelementptr inbounds i32* %sp.0.ph171, i64 1
  store i32 %cur.addr.0.ph172, i32* %sp.0.ph171, align 4, !tbaa !1
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %insn.0166, i64 0, i32 1, i64 3
  %rtint10 = bitcast %union.rtunion_def* %arrayidx9 to i32*
  %6 = load i32* %rtint10, align 4, !tbaa !1
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %7, i64 0, i32 0
  %8 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %region_array = getelementptr inbounds %struct.eh_status* %8, i64 0, i32 1
  %9 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %arrayidx11 = getelementptr inbounds %struct.eh_region** %9, i64 %idxprom
  %10 = load %struct.eh_region** %arrayidx11, align 8, !tbaa !5
  %type = getelementptr inbounds %struct.eh_region* %10, i64 0, i32 5
  %11 = load i32* %type, align 4, !tbaa !40
  switch i32 %11, label %if.end27 [
    i32 7, label %if.then13
    i32 3, label %if.then17
  ]

if.then13:                                        ; preds = %if.then7
  %12 = getelementptr inbounds %struct.eh_region* %10, i64 0, i32 6, i32 0, i32 1
  %13 = load %struct.eh_region** %12, align 8, !tbaa !63
  %tobool14 = icmp eq %struct.eh_region* %13, null
  br i1 %tobool14, label %if.end27, label %cond.true

cond.true:                                        ; preds = %if.then13
  %region_number = getelementptr inbounds %struct.eh_region* %13, i64 0, i32 3
  %14 = load i32* %region_number, align 4, !tbaa !17
  br label %if.end27

if.then17:                                        ; preds = %if.then7
  %outer = getelementptr inbounds %struct.eh_region* %10, i64 0, i32 0
  %15 = load %struct.eh_region** %outer, align 8, !tbaa !22
  %tobool18 = icmp eq %struct.eh_region* %15, null
  br i1 %tobool18, label %if.end27, label %cond.true19

cond.true19:                                      ; preds = %if.then17
  %region_number20 = getelementptr inbounds %struct.eh_region* %15, i64 0, i32 3
  %16 = load i32* %region_number20, align 4, !tbaa !17
  br label %if.end27

if.else25:                                        ; preds = %if.then5
  %incdec.ptr26 = getelementptr inbounds i32* %sp.0.ph171, i64 -1
  %17 = load i32* %incdec.ptr26, align 4, !tbaa !1
  br label %if.end27

if.end27:                                         ; preds = %cond.true19, %if.then17, %if.then7, %cond.true, %if.then13, %if.else25
  %sp.1 = phi i32* [ %incdec.ptr26, %if.else25 ], [ %incdec.ptr, %if.then13 ], [ %incdec.ptr, %cond.true ], [ %incdec.ptr, %if.then7 ], [ %incdec.ptr, %if.then17 ], [ %incdec.ptr, %cond.true19 ]
  %cur.addr.1 = phi i32 [ %17, %if.else25 ], [ 0, %if.then13 ], [ %14, %cond.true ], [ %6, %if.then7 ], [ 0, %if.then17 ], [ %16, %cond.true19 ]
  %18 = load %struct.rtx_def** %pinsns, align 8, !tbaa !5
  %cmp28 = icmp eq %struct.rtx_def* %insn.0166, %18
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end27
  store %struct.rtx_def* %1, %struct.rtx_def** %pinsns, align 8, !tbaa !5
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %if.end27
  tail call void @remove_insn(%struct.rtx_def* %insn.0166) #4
  %tobool165 = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool165, label %for.end, label %for.body.lr.ph

if.else32:                                        ; preds = %for.body
  %idxprom35162 = zext i32 %bf.clear to i64
  %arrayidx36 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom35162
  %19 = load i8* %arrayidx36, align 1, !tbaa !56
  %cmp37 = icmp eq i8 %19, 105
  br i1 %cmp37, label %if.then39, label %for.cond.backedge

if.then39:                                        ; preds = %if.else32
  br i1 %cmp40, label %land.lhs.true, label %if.end82

land.lhs.true:                                    ; preds = %if.then39
  %call = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %insn.0166, i32 23, %struct.rtx_def* null) #4
  %tobool42 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool42, label %land.lhs.true43, label %if.end82

land.lhs.true43:                                  ; preds = %land.lhs.true
  %bf.load44 = load i32* %2, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  %cmp46 = icmp eq i32 %bf.clear45, 34
  br i1 %cmp46, label %if.then72, label %lor.lhs.false48

lor.lhs.false48:                                  ; preds = %land.lhs.true43
  %20 = load i32* @flag_non_call_exceptions, align 4, !tbaa !1
  %tobool49 = icmp eq i32 %20, 0
  br i1 %tobool49, label %if.end82, label %land.lhs.true50

land.lhs.true50:                                  ; preds = %lor.lhs.false48
  %arrayidx52 = getelementptr inbounds %struct.rtx_def* %insn.0166, i64 0, i32 1, i64 3
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %21 = load %struct.rtx_def** %rtx53, align 8, !tbaa !5
  %22 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 0
  %bf.load54 = load i32* %22, align 8
  %23 = and i32 %bf.load54, 65534
  %switch = icmp eq i32 %23, 48
  br i1 %switch, label %if.end82, label %land.lhs.true66

land.lhs.true66:                                  ; preds = %land.lhs.true50
  %call70 = tail call i32 @may_trap_p(%struct.rtx_def* %21) #4
  %tobool71 = icmp eq i32 %call70, 0
  br i1 %tobool71, label %if.end82, label %if.then72

if.then72:                                        ; preds = %land.lhs.true66, %land.lhs.true43
  %call74 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv73) #4
  %arrayidx76 = getelementptr inbounds %struct.rtx_def* %insn.0166, i64 0, i32 1, i64 6
  %rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**
  %24 = load %struct.rtx_def** %rtx77, align 8, !tbaa !5
  %call78 = tail call %struct.rtx_def* @alloc_EXPR_LIST(i32 23, %struct.rtx_def* %call74, %struct.rtx_def* %24) #4
  %25 = getelementptr inbounds %union.rtunion_def* %arrayidx76, i64 0, i32 0
  %call78.c = ptrtoint %struct.rtx_def* %call78 to i64
  store i64 %call78.c, i64* %25, align 8, !tbaa !5
  br label %if.end82

if.end82:                                         ; preds = %land.lhs.true50, %land.lhs.true66, %lor.lhs.false48, %land.lhs.true, %if.then72, %if.then39
  %bf.load83 = load i32* %2, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 34
  br i1 %cmp85, label %land.lhs.true87, label %for.cond.backedge

land.lhs.true87:                                  ; preds = %if.end82
  %arrayidx89 = getelementptr inbounds %struct.rtx_def* %insn.0166, i64 0, i32 1, i64 3
  %rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %26 = load %struct.rtx_def** %rtx90, align 8, !tbaa !5
  %27 = getelementptr inbounds %struct.rtx_def* %26, i64 0, i32 0
  %bf.load91 = load i32* %27, align 8
  %bf.clear92 = and i32 %bf.load91, 65535
  %cmp93 = icmp eq i32 %bf.clear92, 141
  br i1 %cmp93, label %if.then95, label %for.cond.backedge

if.then95:                                        ; preds = %land.lhs.true87
  %arrayidx100 = getelementptr inbounds %struct.rtx_def* %26, i64 0, i32 1, i64 0
  %rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**
  tail call fastcc void @convert_from_eh_region_ranges_1(%struct.rtx_def** %rtx101, i32* %sp.0.ph171, i32 %cur.addr.0.ph172)
  %28 = load %struct.rtx_def** %rtx90, align 8, !tbaa !5
  %arrayidx106 = getelementptr inbounds %struct.rtx_def* %28, i64 0, i32 1, i64 1
  %rtx107 = bitcast %union.rtunion_def* %arrayidx106 to %struct.rtx_def**
  tail call fastcc void @convert_from_eh_region_ranges_1(%struct.rtx_def** %rtx107, i32* %sp.0.ph171, i32 %cur.addr.0.ph172)
  %29 = load %struct.rtx_def** %rtx90, align 8, !tbaa !5
  %arrayidx112 = getelementptr inbounds %struct.rtx_def* %29, i64 0, i32 1, i64 2
  %rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**
  tail call fastcc void @convert_from_eh_region_ranges_1(%struct.rtx_def** %rtx113, i32* %sp.0.ph171, i32 %cur.addr.0.ph172)
  br label %for.cond.backedge

for.end:                                          ; preds = %if.end30, %for.cond.backedge
  %sp.0.ph.lcssa = phi i32* [ %sp.0.ph171, %for.cond.backedge ], [ %sp.1, %if.end30 ]
  %cmp117 = icmp eq i32* %sp.0.ph.lcssa, %orig_sp
  br i1 %cmp117, label %if.end120, label %if.then119

if.then119:                                       ; preds = %for.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 1404, i8* getelementptr inbounds ([32 x i8]* @__FUNCTION__.convert_from_eh_region_ranges_1, i64 0, i64 0)) #6
  unreachable

if.end120:                                        ; preds = %entry, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @find_exception_handler_labels() #0 {
entry:
  %0 = load %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  %tobool = icmp eq %struct.htab* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  tail call void @htab_empty(%struct.htab* %0) #4
  br label %if.end

if.else:                                          ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %last_region_number = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 8
  %3 = load i32* %last_region_number, align 4, !tbaa !16
  %mul = mul nsw i32 %3, 3
  %div = sdiv i32 %mul, 2
  %conv = sext i32 %div to i64
  %call = tail call %struct.htab* @htab_create(i64 %conv, i32 (i8*)* @ehl_hash, i32 (i8*, i8*)* @ehl_eq, void (i8*)* @ehl_free) #4
  store %struct.htab* %call, %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1 = getelementptr inbounds %struct.function* %4, i64 0, i32 0
  %5 = load %struct.eh_status** %eh1, align 8, !tbaa !10
  %region_tree = getelementptr inbounds %struct.eh_status* %5, i64 0, i32 0
  %6 = load %struct.eh_region** %region_tree, align 8, !tbaa !19
  %cmp = icmp eq %struct.eh_region* %6, null
  br i1 %cmp, label %for.end, label %if.end4

if.end4:                                          ; preds = %if.end
  %last_region_number6 = getelementptr inbounds %struct.eh_status* %5, i64 0, i32 8
  %7 = load i32* %last_region_number6, align 4, !tbaa !16
  %cmp730 = icmp sgt i32 %7, 0
  br i1 %cmp730, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end4
  %8 = sext i32 %7 to i64
  br label %for.body

for.body:                                         ; preds = %for.inc.for.body_crit_edge, %for.body.lr.ph
  %9 = phi %struct.eh_status* [ %5, %for.body.lr.ph ], [ %.pre32, %for.inc.for.body_crit_edge ]
  %indvars.iv = phi i64 [ %8, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc.for.body_crit_edge ]
  %region_array = getelementptr inbounds %struct.eh_status* %9, i64 0, i32 1
  %10 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds %struct.eh_region** %10, i64 %indvars.iv
  %11 = load %struct.eh_region** %arrayidx, align 8, !tbaa !5
  %tobool10 = icmp eq %struct.eh_region* %11, null
  br i1 %tobool10, label %for.inc, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %region_number = getelementptr inbounds %struct.eh_region* %11, i64 0, i32 3
  %12 = load i32* %region_number, align 4, !tbaa !17
  %13 = trunc i64 %indvars.iv to i32
  %cmp11 = icmp eq i32 %12, %13
  br i1 %cmp11, label %if.end14, label %for.inc

if.end14:                                         ; preds = %lor.lhs.false
  %built_landing_pads = getelementptr inbounds %struct.eh_status* %9, i64 0, i32 7
  %14 = load i32* %built_landing_pads, align 4, !tbaa !68
  %tobool16 = icmp eq i32 %14, 0
  %landing_pad = getelementptr inbounds %struct.eh_region* %11, i64 0, i32 8
  %label = getelementptr inbounds %struct.eh_region* %11, i64 0, i32 7
  %lab.0.in = select i1 %tobool16, %struct.rtx_def** %label, %struct.rtx_def** %landing_pad
  %lab.0 = load %struct.rtx_def** %lab.0.in, align 8
  %tobool20 = icmp eq %struct.rtx_def* %lab.0, null
  br i1 %tobool20, label %for.inc, label %if.then21

if.then21:                                        ; preds = %if.end14
  %15 = getelementptr inbounds %struct.rtx_def* %lab.0, i64 0, i32 0
  %bf.load.i = load i32* %15, align 8
  %bf.set.i = or i32 %bf.load.i, 268435456
  store i32 %bf.set.i, i32* %15, align 8
  %call.i = tail call noalias i8* @xmalloc(i64 16) #4
  %label2.i = bitcast i8* %call.i to %struct.rtx_def**
  store %struct.rtx_def* %lab.0, %struct.rtx_def** %label2.i, align 8, !tbaa !69
  %region3.i = getelementptr inbounds i8* %call.i, i64 8
  %16 = bitcast i8* %region3.i to %struct.eh_region**
  store %struct.eh_region* %11, %struct.eh_region** %16, align 8, !tbaa !71
  %17 = load %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  %call4.i = tail call i8** @htab_find_slot(%struct.htab* %17, i8* %call.i, i32 1) #4
  %18 = load i8** %call4.i, align 8
  %tobool.i = icmp eq i8* %18, null
  br i1 %tobool.i, label %add_ehl_entry.exit, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.then21
  %19 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %19, i64 0, i32 0
  %20 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %built_landing_pads.i = getelementptr inbounds %struct.eh_status* %20, i64 0, i32 7
  %21 = load i32* %built_landing_pads.i, align 4, !tbaa !68
  %tobool5.i = icmp eq i32 %21, 0
  br i1 %tobool5.i, label %if.then.i, label %add_ehl_entry.exit

if.then.i:                                        ; preds = %land.lhs.true.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.add_ehl_entry, i64 0, i64 0)) #6
  unreachable

add_ehl_entry.exit:                               ; preds = %if.then21, %land.lhs.true.i
  store i8* %call.i, i8** %call4.i, align 8, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %if.end14, %lor.lhs.false, %for.body, %add_ehl_entry.exit
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %22 = trunc i64 %indvars.iv.next to i32
  %cmp7 = icmp sgt i32 %22, 0
  br i1 %cmp7, label %for.inc.for.body_crit_edge, label %for.end

for.inc.for.body_crit_edge:                       ; preds = %for.inc
  %.pre = load %struct.function** @cfun, align 8, !tbaa !5
  %eh9.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 0
  %.pre32 = load %struct.eh_status** %eh9.phi.trans.insert, align 8, !tbaa !10
  br label %for.body

for.end:                                          ; preds = %for.inc, %if.end4, %if.end
  ret void
}

declare void @htab_empty(%struct.htab*) #1

; Function Attrs: nounwind readonly uwtable
define internal i32 @ehl_hash(i8* nocapture readonly %pentry) #2 {
entry:
  %label = bitcast i8* %pentry to %struct.rtx_def**
  %0 = load %struct.rtx_def** %label, align 8, !tbaa !69
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 5
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtint, align 4, !tbaa !1
  %mul = mul i32 %1, -1640531527
  ret i32 %mul
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @ehl_eq(i8* nocapture readonly %pentry, i8* nocapture readonly %pdata) #2 {
entry:
  %label = bitcast i8* %pentry to %struct.rtx_def**
  %0 = load %struct.rtx_def** %label, align 8, !tbaa !69
  %label2 = bitcast i8* %pdata to %struct.rtx_def**
  %1 = load %struct.rtx_def** %label2, align 8, !tbaa !69
  %cmp = icmp eq %struct.rtx_def* %0, %1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal void @ehl_free(i8* nocapture %pentry) #0 {
entry:
  %label = bitcast i8* %pentry to %struct.rtx_def**
  %0 = load %struct.rtx_def** %label, align 8, !tbaa !69
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, -268435457
  store i32 %bf.clear, i32* %1, align 8
  tail call void @free(i8* %pentry)
  ret void
}

; Function Attrs: nounwind readonly uwtable
define zeroext i1 @current_function_has_exception_handlers() #2 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %last_region_number = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 8
  %2 = load i32* %last_region_number, align 4, !tbaa !16
  %cmp11 = icmp sgt i32 %2, 0
  br i1 %cmp11, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %region_array = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 1
  %3 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %4 = sext i32 %2 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %indvars.iv = phi i64 [ %4, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds %struct.eh_region** %3, i64 %indvars.iv
  %5 = load %struct.eh_region** %arrayidx, align 8, !tbaa !5
  %tobool = icmp eq %struct.eh_region* %5, null
  br i1 %tobool, label %for.inc, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %region_number = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 3
  %6 = load i32* %region_number, align 4, !tbaa !17
  %7 = trunc i64 %indvars.iv to i32
  %cmp2 = icmp eq i32 %6, %7
  br i1 %cmp2, label %if.end, label %for.inc

if.end:                                           ; preds = %lor.lhs.false
  %type = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 5
  %8 = load i32* %type, align 4, !tbaa !40
  %cmp3 = icmp eq i32 %8, 6
  br i1 %cmp3, label %for.inc, label %return

for.inc:                                          ; preds = %if.end, %lor.lhs.false, %for.body
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %9 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp sgt i32 %9, 0
  br i1 %cmp, label %for.body, label %return

return:                                           ; preds = %if.end, %for.inc, %entry
  %retval.0 = phi i1 [ false, %entry ], [ true, %if.end ], [ false, %for.inc ]
  ret i1 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @duplicate_eh_regions(%struct.function* nocapture readonly %ifun, %struct.inline_remap* %map) #0 {
entry:
  %eh = getelementptr inbounds %struct.function* %ifun, i64 0, i32 0
  %0 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %last_region_number = getelementptr inbounds %struct.eh_status* %0, i64 0, i32 8
  %1 = load i32* %last_region_number, align 4, !tbaa !16
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %add = add i32 %1, 1
  %conv = sext i32 %add to i64
  %call = tail call noalias i8* @xcalloc(i64 %conv, i64 8) #4
  %2 = bitcast i8* %call to %struct.eh_region**
  %cmp1150 = icmp slt i32 %1, 1
  br i1 %cmp1150, label %for.cond11.preheader.for.end28_crit_edge, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %insn_map.i = getelementptr inbounds %struct.inline_remap* %map, i64 0, i32 6
  br label %for.body

for.cond11.preheader:                             ; preds = %for.inc
  br i1 %cmp1150, label %for.cond11.preheader.for.end28_crit_edge, label %for.body14.lr.ph

for.cond11.preheader.for.end28_crit_edge:         ; preds = %if.end, %for.cond11.preheader
  %.pre = load %struct.eh_status** %eh, align 8, !tbaa !10
  br label %for.end28

for.body14.lr.ph:                                 ; preds = %for.cond11.preheader
  %.pre163 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %region_array17.phi.trans.insert = getelementptr inbounds %struct.eh_status* %.pre163, i64 0, i32 1
  %.pre164 = load %struct.eh_region*** %region_array17.phi.trans.insert, align 8, !tbaa !14
  br label %for.body14

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv161 = phi i64 [ %indvars.iv.next162, %for.inc ], [ 1, %for.body.lr.ph ]
  %3 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %region_array = getelementptr inbounds %struct.eh_status* %3, i64 0, i32 1
  %4 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds %struct.eh_region** %4, i64 %indvars.iv161
  %5 = load %struct.eh_region** %arrayidx, align 8, !tbaa !5
  %tobool = icmp eq %struct.eh_region* %5, null
  br i1 %tobool, label %for.body.for.inc_crit_edge, label %lor.lhs.false

for.body.for.inc_crit_edge:                       ; preds = %for.body
  %.pre165 = trunc i64 %indvars.iv161 to i32
  br label %for.inc

lor.lhs.false:                                    ; preds = %for.body
  %region_number = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 3
  %6 = load i32* %region_number, align 4, !tbaa !17
  %7 = trunc i64 %indvars.iv161 to i32
  %cmp4 = icmp eq i32 %6, %7
  br i1 %cmp4, label %if.end7, label %for.inc

if.end7:                                          ; preds = %lor.lhs.false
  %call.i = tail call noalias i8* @xcalloc(i64 1, i64 112) #4
  %8 = bitcast i8* %call.i to %struct.eh_region*
  %9 = load i32* %region_number, align 4, !tbaa !17
  %10 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %10, i64 0, i32 0
  %11 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %last_region_number.i = getelementptr inbounds %struct.eh_status* %11, i64 0, i32 8
  %12 = load i32* %last_region_number.i, align 4, !tbaa !16
  %add.i = add nsw i32 %12, %9
  %region_number1.i = getelementptr inbounds i8* %call.i, i64 24
  %13 = bitcast i8* %region_number1.i to i32*
  store i32 %add.i, i32* %13, align 4, !tbaa !17
  %type.i = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 5
  %14 = load i32* %type.i, align 4, !tbaa !40
  %type2.i = getelementptr inbounds i8* %call.i, i64 40
  %15 = bitcast i8* %type2.i to i32*
  store i32 %14, i32* %15, align 4, !tbaa !40
  switch i32 %14, label %sw.default.i [
    i32 1, label %sw.epilog.i
    i32 5, label %sw.epilog.i
    i32 2, label %sw.bb4.i
    i32 3, label %sw.bb12.i
    i32 4, label %sw.bb17.i
    i32 6, label %sw.bb23.i
  ]

sw.bb4.i:                                         ; preds = %if.end7
  %continue_label.i = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 6, i32 0, i32 3
  %16 = load %struct.rtx_def** %continue_label.i, align 8, !tbaa !43
  %tobool.i = icmp eq %struct.rtx_def* %16, null
  br i1 %tobool.i, label %sw.epilog.i, label %if.then.i

if.then.i:                                        ; preds = %sw.bb4.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 5
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %17 = load i32* %rtint.i, align 4, !tbaa !1
  %call8.i = tail call %struct.rtx_def* @get_label_from_map(%struct.inline_remap* %map, i32 %17) #4
  %continue_label11.i = getelementptr inbounds i8* %call.i, i64 72
  %18 = bitcast i8* %continue_label11.i to %struct.rtx_def**
  store %struct.rtx_def* %call8.i, %struct.rtx_def** %18, align 8, !tbaa !43
  br label %sw.epilog.i

sw.bb12.i:                                        ; preds = %if.end7
  %type_list.i = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 6, i32 0, i32 2
  %19 = load %struct.eh_region** %type_list.i, align 8
  %20 = bitcast %struct.eh_region* %19 to %union.tree_node*
  %type_list16.i = getelementptr inbounds i8* %call.i, i64 64
  %21 = bitcast i8* %type_list16.i to %union.tree_node**
  store %union.tree_node* %20, %union.tree_node** %21, align 8, !tbaa !58
  br label %sw.epilog.i

sw.bb17.i:                                        ; preds = %if.end7
  %u18.i = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 6
  %type_list19.i = bitcast %union.anon* %u18.i to %union.tree_node**
  %22 = load %union.tree_node** %type_list19.i, align 8, !tbaa !45
  %u20.i = getelementptr inbounds i8* %call.i, i64 48
  %type_list22.i = bitcast i8* %u20.i to %union.tree_node**
  store %union.tree_node* %22, %union.tree_node** %type_list22.i, align 8, !tbaa !45
  br label %sw.epilog.i

sw.bb23.i:                                        ; preds = %if.end7
  %u24.i = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 6
  %type25.i = bitcast %union.anon* %u24.i to %union.tree_node**
  %23 = load %union.tree_node** %type25.i, align 8, !tbaa !41
  %u26.i = getelementptr inbounds i8* %call.i, i64 48
  %type28.i = bitcast i8* %u26.i to %union.tree_node**
  store %union.tree_node* %23, %union.tree_node** %type28.i, align 8, !tbaa !41
  br label %sw.default.i

sw.default.i:                                     ; preds = %if.end7, %sw.bb23.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 1555, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.duplicate_eh_region_1, i64 0, i64 0)) #6
  unreachable

sw.epilog.i:                                      ; preds = %sw.bb17.i, %sw.bb12.i, %if.then.i, %sw.bb4.i, %if.end7, %if.end7
  %label.i = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 7
  %24 = load %struct.rtx_def** %label.i, align 8, !tbaa !49
  %tobool29.i = icmp eq %struct.rtx_def* %24, null
  br i1 %tobool29.i, label %if.end37.i, label %if.then30.i

if.then30.i:                                      ; preds = %sw.epilog.i
  %arrayidx33.i = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 1, i64 5
  %rtint34.i = bitcast %union.rtunion_def* %arrayidx33.i to i32*
  %25 = load i32* %rtint34.i, align 4, !tbaa !1
  %call35.i = tail call %struct.rtx_def* @get_label_from_map(%struct.inline_remap* %map, i32 %25) #4
  %label36.i = getelementptr inbounds i8* %call.i, i64 80
  %26 = bitcast i8* %label36.i to %struct.rtx_def**
  store %struct.rtx_def* %call35.i, %struct.rtx_def** %26, align 8, !tbaa !49
  br label %if.end37.i

if.end37.i:                                       ; preds = %if.then30.i, %sw.epilog.i
  %resume.i = getelementptr inbounds %struct.eh_region* %5, i64 0, i32 10
  %27 = load %struct.rtx_def** %resume.i, align 8, !tbaa !50
  %tobool38.i = icmp eq %struct.rtx_def* %27, null
  br i1 %tobool38.i, label %duplicate_eh_region_1.exit, label %if.then39.i

if.then39.i:                                      ; preds = %if.end37.i
  %arrayidx42.i = getelementptr inbounds %struct.rtx_def* %27, i64 0, i32 1, i64 0
  %rtint43.i = bitcast %union.rtunion_def* %arrayidx42.i to i32*
  %28 = load i32* %rtint43.i, align 4, !tbaa !1
  %idxprom.i = sext i32 %28 to i64
  %29 = load %struct.rtx_def*** %insn_map.i, align 8, !tbaa !72
  %arrayidx44.i = getelementptr inbounds %struct.rtx_def** %29, i64 %idxprom.i
  %30 = load %struct.rtx_def** %arrayidx44.i, align 8, !tbaa !5
  %resume45.i = getelementptr inbounds i8* %call.i, i64 104
  %31 = bitcast i8* %resume45.i to %struct.rtx_def**
  store %struct.rtx_def* %30, %struct.rtx_def** %31, align 8, !tbaa !50
  %cmp.i = icmp eq %struct.rtx_def* %30, null
  br i1 %cmp.i, label %if.then47.i, label %duplicate_eh_region_1.exit

if.then47.i:                                      ; preds = %if.then39.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 1564, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.duplicate_eh_region_1, i64 0, i64 0)) #6
  unreachable

duplicate_eh_region_1.exit:                       ; preds = %if.end37.i, %if.then39.i
  %arrayidx10 = getelementptr inbounds %struct.eh_region** %2, i64 %indvars.iv161
  store %struct.eh_region* %8, %struct.eh_region** %arrayidx10, align 8, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %for.body.for.inc_crit_edge, %lor.lhs.false, %duplicate_eh_region_1.exit
  %.pre-phi = phi i32 [ %.pre165, %for.body.for.inc_crit_edge ], [ %7, %lor.lhs.false ], [ %7, %duplicate_eh_region_1.exit ]
  %indvars.iv.next162 = add nuw nsw i64 %indvars.iv161, 1
  %cmp1 = icmp slt i32 %.pre-phi, %1
  br i1 %cmp1, label %for.body, label %for.cond11.preheader

for.body14:                                       ; preds = %for.inc26, %for.body14.lr.ph
  %indvars.iv157 = phi i64 [ %indvars.iv.next158, %for.inc26 ], [ 1, %for.body14.lr.ph ]
  %arrayidx18 = getelementptr inbounds %struct.eh_region** %.pre164, i64 %indvars.iv157
  %32 = load %struct.eh_region** %arrayidx18, align 8, !tbaa !5
  %tobool19 = icmp eq %struct.eh_region* %32, null
  br i1 %tobool19, label %for.inc26, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %for.body14
  %region_number21 = getelementptr inbounds %struct.eh_region* %32, i64 0, i32 3
  %33 = load i32* %region_number21, align 4, !tbaa !17
  %34 = trunc i64 %indvars.iv157 to i32
  %cmp22 = icmp eq i32 %33, %34
  br i1 %cmp22, label %if.end25, label %for.inc26

if.end25:                                         ; preds = %lor.lhs.false20
  %idxprom.i133 = sext i32 %33 to i64
  %arrayidx.i134 = getelementptr inbounds %struct.eh_region** %2, i64 %idxprom.i133
  %35 = load %struct.eh_region** %arrayidx.i134, align 8, !tbaa !5
  %type.i135 = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 5
  %36 = load i32* %type.i135, align 4, !tbaa !40
  switch i32 %36, label %sw.epilog.i141 [
    i32 2, label %sw.bb.i
    i32 3, label %sw.bb15.i
  ]

sw.bb.i:                                          ; preds = %if.end25
  %catch.i = getelementptr inbounds %struct.eh_region* %32, i64 0, i32 6, i32 0, i32 0
  %37 = load %struct.eh_region** %catch.i, align 8, !tbaa !62
  %region_number1.i136 = getelementptr inbounds %struct.eh_region* %37, i64 0, i32 3
  %38 = load i32* %region_number1.i136, align 4, !tbaa !17
  %idxprom2.i = sext i32 %38 to i64
  %arrayidx3.i = getelementptr inbounds %struct.eh_region** %2, i64 %idxprom2.i
  %39 = load %struct.eh_region** %arrayidx3.i, align 8, !tbaa !5
  %catch6.i = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 6, i32 0, i32 0
  store %struct.eh_region* %39, %struct.eh_region** %catch6.i, align 8, !tbaa !62
  %last_catch.i = getelementptr inbounds %struct.eh_region* %32, i64 0, i32 6, i32 0, i32 1
  %40 = load %struct.eh_region** %last_catch.i, align 8, !tbaa !61
  %region_number9.i = getelementptr inbounds %struct.eh_region* %40, i64 0, i32 3
  %41 = load i32* %region_number9.i, align 4, !tbaa !17
  %idxprom10.i = sext i32 %41 to i64
  %arrayidx11.i = getelementptr inbounds %struct.eh_region** %2, i64 %idxprom10.i
  %42 = load %struct.eh_region** %arrayidx11.i, align 8, !tbaa !5
  %last_catch14.i = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 6, i32 0, i32 1
  store %struct.eh_region* %42, %struct.eh_region** %last_catch14.i, align 8, !tbaa !61
  br label %sw.epilog.i141

sw.bb15.i:                                        ; preds = %if.end25
  %next_catch.i = getelementptr inbounds %struct.eh_region* %32, i64 0, i32 6, i32 0, i32 0
  %43 = load %struct.eh_region** %next_catch.i, align 8, !tbaa !62
  %tobool.i137 = icmp eq %struct.eh_region* %43, null
  br i1 %tobool.i137, label %if.end.i, label %if.then.i138

if.then.i138:                                     ; preds = %sw.bb15.i
  %region_number21.i = getelementptr inbounds %struct.eh_region* %43, i64 0, i32 3
  %44 = load i32* %region_number21.i, align 4, !tbaa !17
  %idxprom22.i = sext i32 %44 to i64
  %arrayidx23.i = getelementptr inbounds %struct.eh_region** %2, i64 %idxprom22.i
  %45 = load %struct.eh_region** %arrayidx23.i, align 8, !tbaa !5
  %next_catch26.i = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 6, i32 0, i32 0
  store %struct.eh_region* %45, %struct.eh_region** %next_catch26.i, align 8, !tbaa !62
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i138, %sw.bb15.i
  %46 = getelementptr inbounds %struct.eh_region* %32, i64 0, i32 6, i32 0, i32 1
  %47 = load %struct.eh_region** %46, align 8, !tbaa !61
  %tobool29.i139 = icmp eq %struct.eh_region* %47, null
  br i1 %tobool29.i139, label %sw.epilog.i141, label %if.then30.i140

if.then30.i140:                                   ; preds = %if.end.i
  %region_number34.i = getelementptr inbounds %struct.eh_region* %47, i64 0, i32 3
  %48 = load i32* %region_number34.i, align 4, !tbaa !17
  %idxprom35.i = sext i32 %48 to i64
  %arrayidx36.i = getelementptr inbounds %struct.eh_region** %2, i64 %idxprom35.i
  %49 = load %struct.eh_region** %arrayidx36.i, align 8, !tbaa !5
  %50 = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 6, i32 0, i32 1
  store %struct.eh_region* %49, %struct.eh_region** %50, align 8, !tbaa !61
  br label %sw.epilog.i141

sw.epilog.i141:                                   ; preds = %if.then30.i140, %if.end.i, %sw.bb.i, %if.end25
  %outer.i = getelementptr inbounds %struct.eh_region* %32, i64 0, i32 0
  %51 = load %struct.eh_region** %outer.i, align 8, !tbaa !22
  %tobool41.i = icmp eq %struct.eh_region* %51, null
  br i1 %tobool41.i, label %if.end48.i, label %if.then42.i

if.then42.i:                                      ; preds = %sw.epilog.i141
  %region_number44.i = getelementptr inbounds %struct.eh_region* %51, i64 0, i32 3
  %52 = load i32* %region_number44.i, align 4, !tbaa !17
  %idxprom45.i = sext i32 %52 to i64
  %arrayidx46.i = getelementptr inbounds %struct.eh_region** %2, i64 %idxprom45.i
  %53 = load %struct.eh_region** %arrayidx46.i, align 8, !tbaa !5
  %outer47.i = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 0
  store %struct.eh_region* %53, %struct.eh_region** %outer47.i, align 8, !tbaa !22
  br label %if.end48.i

if.end48.i:                                       ; preds = %if.then42.i, %sw.epilog.i141
  %inner.i = getelementptr inbounds %struct.eh_region* %32, i64 0, i32 1
  %54 = load %struct.eh_region** %inner.i, align 8, !tbaa !20
  %tobool49.i = icmp eq %struct.eh_region* %54, null
  br i1 %tobool49.i, label %if.end56.i, label %if.then50.i

if.then50.i:                                      ; preds = %if.end48.i
  %region_number52.i = getelementptr inbounds %struct.eh_region* %54, i64 0, i32 3
  %55 = load i32* %region_number52.i, align 4, !tbaa !17
  %idxprom53.i = sext i32 %55 to i64
  %arrayidx54.i = getelementptr inbounds %struct.eh_region** %2, i64 %idxprom53.i
  %56 = load %struct.eh_region** %arrayidx54.i, align 8, !tbaa !5
  %inner55.i = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 1
  store %struct.eh_region* %56, %struct.eh_region** %inner55.i, align 8, !tbaa !20
  br label %if.end56.i

if.end56.i:                                       ; preds = %if.then50.i, %if.end48.i
  %next_peer.i = getelementptr inbounds %struct.eh_region* %32, i64 0, i32 2
  %57 = load %struct.eh_region** %next_peer.i, align 8, !tbaa !21
  %tobool57.i = icmp eq %struct.eh_region* %57, null
  br i1 %tobool57.i, label %for.inc26, label %if.then58.i

if.then58.i:                                      ; preds = %if.end56.i
  %region_number60.i = getelementptr inbounds %struct.eh_region* %57, i64 0, i32 3
  %58 = load i32* %region_number60.i, align 4, !tbaa !17
  %idxprom61.i = sext i32 %58 to i64
  %arrayidx62.i = getelementptr inbounds %struct.eh_region** %2, i64 %idxprom61.i
  %59 = load %struct.eh_region** %arrayidx62.i, align 8, !tbaa !5
  %next_peer63.i = getelementptr inbounds %struct.eh_region* %35, i64 0, i32 2
  store %struct.eh_region* %59, %struct.eh_region** %next_peer63.i, align 8, !tbaa !21
  br label %for.inc26

for.inc26:                                        ; preds = %if.then58.i, %if.end56.i, %lor.lhs.false20, %for.body14
  %indvars.iv.next158 = add nuw nsw i64 %indvars.iv157, 1
  %lftr.wideiv159 = trunc i64 %indvars.iv.next158 to i32
  %exitcond160 = icmp eq i32 %lftr.wideiv159, %add
  br i1 %exitcond160, label %for.end28, label %for.body14

for.end28:                                        ; preds = %for.inc26, %for.cond11.preheader.for.end28_crit_edge
  %60 = phi %struct.eh_status* [ %.pre, %for.cond11.preheader.for.end28_crit_edge ], [ %.pre163, %for.inc26 ]
  %region_tree = getelementptr inbounds %struct.eh_status* %60, i64 0, i32 0
  %61 = load %struct.eh_region** %region_tree, align 8, !tbaa !19
  %region_number30 = getelementptr inbounds %struct.eh_region* %61, i64 0, i32 3
  %62 = load i32* %region_number30, align 4, !tbaa !17
  %idxprom31 = sext i32 %62 to i64
  %arrayidx32 = getelementptr inbounds %struct.eh_region** %2, i64 %idxprom31
  %63 = load %struct.eh_region** %arrayidx32, align 8, !tbaa !5
  %64 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh33 = getelementptr inbounds %struct.function* %64, i64 0, i32 0
  %65 = load %struct.eh_status** %eh33, align 8, !tbaa !10
  %cur_region = getelementptr inbounds %struct.eh_status* %65, i64 0, i32 2
  %66 = load %struct.eh_region** %cur_region, align 8, !tbaa !55
  %tobool34 = icmp eq %struct.eh_region* %66, null
  br i1 %tobool34, label %if.else62, label %if.then35

if.then35:                                        ; preds = %for.end28
  %inner = getelementptr inbounds %struct.eh_region* %66, i64 0, i32 1
  %67 = load %struct.eh_region** %inner, align 8, !tbaa !20
  %tobool36 = icmp eq %struct.eh_region* %67, null
  br i1 %tobool36, label %if.else, label %while.cond

while.cond:                                       ; preds = %if.then35, %while.cond
  %p.0 = phi %struct.eh_region* [ %68, %while.cond ], [ %67, %if.then35 ]
  %next_peer = getelementptr inbounds %struct.eh_region* %p.0, i64 0, i32 2
  %68 = load %struct.eh_region** %next_peer, align 8, !tbaa !21
  %tobool38 = icmp eq %struct.eh_region* %68, null
  br i1 %tobool38, label %while.end, label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.eh_region* %63, %struct.eh_region** %next_peer, align 8, !tbaa !21
  br label %for.cond43.preheader

if.else:                                          ; preds = %if.then35
  store %struct.eh_region* %63, %struct.eh_region** %inner, align 8, !tbaa !20
  br label %for.cond43.preheader

for.cond43.preheader:                             ; preds = %if.else, %while.end
  br i1 %cmp1150, label %if.end79, label %for.body46

for.body46:                                       ; preds = %for.cond43.preheader, %for.inc59
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc59 ], [ 1, %for.cond43.preheader ]
  %arrayidx48 = getelementptr inbounds %struct.eh_region** %2, i64 %indvars.iv
  %69 = load %struct.eh_region** %arrayidx48, align 8, !tbaa !5
  %tobool49 = icmp eq %struct.eh_region* %69, null
  br i1 %tobool49, label %for.inc59, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body46
  %outer = getelementptr inbounds %struct.eh_region* %69, i64 0, i32 0
  %70 = load %struct.eh_region** %outer, align 8, !tbaa !22
  %cmp52 = icmp eq %struct.eh_region* %70, null
  br i1 %cmp52, label %if.then54, label %for.inc59

if.then54:                                        ; preds = %land.lhs.true
  store %struct.eh_region* %66, %struct.eh_region** %outer, align 8, !tbaa !22
  br label %for.inc59

for.inc59:                                        ; preds = %for.body46, %land.lhs.true, %if.then54
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %add
  br i1 %exitcond, label %if.end79, label %for.body46

if.else62:                                        ; preds = %for.end28
  %region_tree65 = getelementptr inbounds %struct.eh_status* %65, i64 0, i32 0
  %71 = load %struct.eh_region** %region_tree65, align 8, !tbaa !19
  %tobool66 = icmp eq %struct.eh_region* %71, null
  br i1 %tobool66, label %if.else75, label %while.cond68

while.cond68:                                     ; preds = %if.else62, %while.cond68
  %p63.0 = phi %struct.eh_region* [ %72, %while.cond68 ], [ %71, %if.else62 ]
  %next_peer69 = getelementptr inbounds %struct.eh_region* %p63.0, i64 0, i32 2
  %72 = load %struct.eh_region** %next_peer69, align 8, !tbaa !21
  %tobool70 = icmp eq %struct.eh_region* %72, null
  br i1 %tobool70, label %while.end73, label %while.cond68

while.end73:                                      ; preds = %while.cond68
  store %struct.eh_region* %63, %struct.eh_region** %next_peer69, align 8, !tbaa !21
  br label %if.end79

if.else75:                                        ; preds = %if.else62
  store %struct.eh_region* %63, %struct.eh_region** %region_tree65, align 8, !tbaa !19
  br label %if.end79

if.end79:                                         ; preds = %for.inc59, %for.cond43.preheader, %while.end73, %if.else75
  tail call void @free(i8* %call)
  %73 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh80 = getelementptr inbounds %struct.function* %73, i64 0, i32 0
  %74 = load %struct.eh_status** %eh80, align 8, !tbaa !10
  %last_region_number81 = getelementptr inbounds %struct.eh_status* %74, i64 0, i32 8
  %75 = load i32* %last_region_number81, align 4, !tbaa !16
  %add82 = add nsw i32 %75, %1
  store i32 %add82, i32* %last_region_number81, align 4, !tbaa !16
  br label %return

return:                                           ; preds = %entry, %if.end79
  %retval.0 = phi i32 [ %75, %if.end79 ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @sjlj_emit_function_exit_after(%struct.rtx_def* %after) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %sjlj_exit_after = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 19
  store %struct.rtx_def* %after, %struct.rtx_def** %sjlj_exit_after, align 8, !tbaa !39
  ret void
}

; Function Attrs: nounwind uwtable
define void @finish_eh_generation() #0 {
entry:
  %dummy.i.i = alloca %struct.ttypes_filter, align 8
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %region_tree = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 0
  %2 = load %struct.eh_region** %region_tree, align 8, !tbaa !19
  %cmp = icmp eq %struct.eh_region* %2, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call %struct.rtx_def* @get_insns() #4
  call void @rebuild_jump_labels(%struct.rtx_def* %call) #4
  %call1 = call %struct.rtx_def* @get_insns() #4
  %call2 = call i32 @max_reg_num() #4
  call void @find_basic_blocks(%struct.rtx_def* %call1, i32 %call2, %struct._IO_FILE* null) #4
  %call3 = call zeroext i1 @cleanup_cfg(i32 16) #4
  %3 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %3, i64 0, i32 0
  %4 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %exc_ptr1.i = getelementptr inbounds %struct.eh_status* %4, i64 0, i32 6
  %5 = load %struct.rtx_def** %exc_ptr1.i, align 8, !tbaa !29
  %tobool.i = icmp eq %struct.rtx_def* %5, null
  br i1 %tobool.i, label %if.then.i, label %get_exception_pointer.exit

if.then.i:                                        ; preds = %if.end
  %6 = load i32* @target_flags, align 4, !tbaa !1
  %and.i = lshr i32 %6, 25
  %7 = and i32 %and.i, 1
  %8 = or i32 %7, 4
  %call.i = call %struct.rtx_def* @gen_reg_rtx(i32 %8) #4
  %9 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %exc_ptr4.i = getelementptr inbounds %struct.eh_status* %9, i64 0, i32 6
  store %struct.rtx_def* %call.i, %struct.rtx_def** %exc_ptr4.i, align 8, !tbaa !29
  %.pre = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i11.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 0
  %.pre98 = load %struct.eh_status** %eh.i11.phi.trans.insert, align 8, !tbaa !10
  br label %get_exception_pointer.exit

get_exception_pointer.exit:                       ; preds = %if.end, %if.then.i
  %10 = phi %struct.eh_status* [ %4, %if.end ], [ %.pre98, %if.then.i ]
  %11 = phi %struct.function* [ %3, %if.end ], [ %.pre, %if.then.i ]
  %filter1.i = getelementptr inbounds %struct.eh_status* %10, i64 0, i32 5
  %12 = load %struct.rtx_def** %filter1.i, align 8, !tbaa !28
  %tobool.i13 = icmp eq %struct.rtx_def* %12, null
  br i1 %tobool.i13, label %if.then.i16, label %get_exception_filter.exit

if.then.i16:                                      ; preds = %get_exception_pointer.exit
  %eh.i11 = getelementptr inbounds %struct.function* %11, i64 0, i32 0
  %13 = load i32* @word_mode, align 4, !tbaa !56
  %call.i15 = call %struct.rtx_def* @gen_reg_rtx(i32 %13) #4
  %14 = load %struct.eh_status** %eh.i11, align 8, !tbaa !10
  %filter3.i = getelementptr inbounds %struct.eh_status* %14, i64 0, i32 5
  store %struct.rtx_def* %call.i15, %struct.rtx_def** %filter3.i, align 8, !tbaa !28
  br label %get_exception_filter.exit

get_exception_filter.exit:                        ; preds = %get_exception_pointer.exit, %if.then.i16
  %call.i17 = call %struct.varray_head_tag* @varray_init(i64 16, i64 8, i8* getelementptr inbounds ([11 x i8]* @.str28, i64 0, i64 0)) #4
  %15 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i18 = getelementptr inbounds %struct.function* %15, i64 0, i32 0
  %16 = load %struct.eh_status** %eh.i18, align 8, !tbaa !10
  %ttype_data.i = getelementptr inbounds %struct.eh_status* %16, i64 0, i32 9
  store %struct.varray_head_tag* %call.i17, %struct.varray_head_tag** %ttype_data.i, align 8, !tbaa !30
  %call1.i = call %struct.varray_head_tag* @varray_init(i64 64, i64 1, i8* getelementptr inbounds ([12 x i8]* @.str29, i64 0, i64 0)) #4
  %17 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh2.i = getelementptr inbounds %struct.function* %17, i64 0, i32 0
  %18 = load %struct.eh_status** %eh2.i, align 8, !tbaa !10
  %ehspec_data.i = getelementptr inbounds %struct.eh_status* %18, i64 0, i32 10
  store %struct.varray_head_tag* %call1.i, %struct.varray_head_tag** %ehspec_data.i, align 8, !tbaa !53
  %call3.i = call %struct.htab* @htab_create(i64 31, i32 (i8*)* @ttypes_filter_hash, i32 (i8*, i8*)* @ttypes_filter_eq, void (i8*)* @free) #4
  %call4.i = call %struct.htab* @htab_create(i64 31, i32 (i8*)* @ehspec_filter_hash, i32 (i8*, i8*)* @ehspec_filter_eq, void (i8*)* @free) #4
  %19 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh5.i = getelementptr inbounds %struct.function* %19, i64 0, i32 0
  %20 = load %struct.eh_status** %eh5.i, align 8, !tbaa !10
  %last_region_number.i = getelementptr inbounds %struct.eh_status* %20, i64 0, i32 8
  %21 = load i32* %last_region_number.i, align 4, !tbaa !16
  %cmp85.i = icmp sgt i32 %21, 0
  br i1 %cmp85.i, label %for.body.lr.ph.i, label %assign_filter_values.exit

for.body.lr.ph.i:                                 ; preds = %get_exception_filter.exit
  %22 = bitcast %struct.ttypes_filter* %dummy.i.i to i8*
  %t.i68.i = getelementptr inbounds %struct.ttypes_filter* %dummy.i.i, i64 0, i32 0
  %23 = sext i32 %21 to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc46.for.body_crit_edge.i, %for.body.lr.ph.i
  %24 = phi %struct.eh_status* [ %20, %for.body.lr.ph.i ], [ %.pre87.i, %for.inc46.for.body_crit_edge.i ]
  %indvars.iv.i = phi i64 [ %23, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.inc46.for.body_crit_edge.i ]
  %region_array.i = getelementptr inbounds %struct.eh_status* %24, i64 0, i32 1
  %25 = load %struct.eh_region*** %region_array.i, align 8, !tbaa !14
  %arrayidx.i = getelementptr inbounds %struct.eh_region** %25, i64 %indvars.iv.i
  %26 = load %struct.eh_region** %arrayidx.i, align 8, !tbaa !5
  %tobool.i19 = icmp eq %struct.eh_region* %26, null
  br i1 %tobool.i19, label %for.inc46.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %for.body.i
  %region_number.i = getelementptr inbounds %struct.eh_region* %26, i64 0, i32 3
  %27 = load i32* %region_number.i, align 4, !tbaa !17
  %28 = trunc i64 %indvars.iv.i to i32
  %cmp7.i = icmp eq i32 %27, %28
  br i1 %cmp7.i, label %if.end.i, label %for.inc46.i

if.end.i:                                         ; preds = %lor.lhs.false.i
  %type.i = getelementptr inbounds %struct.eh_region* %26, i64 0, i32 5
  %29 = load i32* %type.i, align 4, !tbaa !40
  switch i32 %29, label %for.inc46.i [
    i32 3, label %sw.bb.i
    i32 4, label %sw.bb40.i
  ]

sw.bb.i:                                          ; preds = %if.end.i
  %filter_list.i = getelementptr inbounds %struct.eh_region* %26, i64 0, i32 6, i32 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %filter_list.i, align 8, !tbaa !43
  %type_list.i = getelementptr inbounds %struct.eh_region* %26, i64 0, i32 6, i32 0, i32 2
  %30 = load %struct.eh_region** %type_list.i, align 8
  %cmp10.i = icmp eq %struct.eh_region* %30, null
  br i1 %cmp10.i, label %if.else.i, label %for.body17.lr.ph.i

for.body17.lr.ph.i:                               ; preds = %sw.bb.i
  %31 = bitcast %struct.eh_region* %30 to %union.tree_node*
  br label %for.body17.i

for.body17.i:                                     ; preds = %for.body17.i, %for.body17.lr.ph.i
  %tp_node.084.i = phi %union.tree_node* [ %31, %for.body17.lr.ph.i ], [ %36, %for.body17.i ]
  %value.i = getelementptr inbounds %union.tree_node* %tp_node.084.i, i64 0, i32 0, i32 2
  %32 = bitcast i32* %value.i to %union.tree_node**
  %33 = load %union.tree_node** %32, align 8, !tbaa !59
  %call18.i = call fastcc i32 @add_ttypes_entry(%struct.htab* %call3.i, %union.tree_node* %33) #4
  %conv.i = sext i32 %call18.i to i64
  %call19.i = call %union.tree_node* @build_int_2_wide(i64 %conv.i, i64 0) #4
  %34 = load %struct.rtx_def** %filter_list.i, align 8
  %35 = bitcast %struct.rtx_def* %34 to %union.tree_node*
  %call23.i = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call19.i, %union.tree_node* %35) #4
  %call23.c.i = bitcast %union.tree_node* %call23.i to %struct.rtx_def*
  store %struct.rtx_def* %call23.c.i, %struct.rtx_def** %filter_list.i, align 8, !tbaa !43
  %chain.i = getelementptr inbounds %union.tree_node* %tp_node.084.i, i64 0, i32 0, i32 0, i32 0
  %36 = load %union.tree_node** %chain.i, align 8, !tbaa !60
  %tobool16.i = icmp eq %union.tree_node* %36, null
  br i1 %tobool16.i, label %for.inc46.i, label %for.body17.i

if.else.i:                                        ; preds = %sw.bb.i
  %call.i.i = call i8** @htab_find_slot_with_hash(%struct.htab* %call3.i, i8* null, i32 0, i32 1) #4
  %37 = load i8** %call.i.i, align 8
  %cmp.i.i = icmp eq i8* %37, null
  br i1 %cmp.i.i, label %if.then.i.i, label %add_ttypes_entry.exit.i

if.then.i.i:                                      ; preds = %if.else.i
  %call2.i.i = call noalias i8* @xmalloc(i64 16) #4
  %t.i.i = bitcast i8* %call2.i.i to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %t.i.i, align 8, !tbaa !74
  %38 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i.i = getelementptr inbounds %struct.function* %38, i64 0, i32 0
  %39 = load %struct.eh_status** %eh.i.i, align 8, !tbaa !10
  %ttype_data.i.i = getelementptr inbounds %struct.eh_status* %39, i64 0, i32 9
  %40 = load %struct.varray_head_tag** %ttype_data.i.i, align 8, !tbaa !30
  %elements_used.i.i = getelementptr inbounds %struct.varray_head_tag* %40, i64 0, i32 1
  %41 = load i64* %elements_used.i.i, align 8, !tbaa !24
  %add.i.i = add i64 %41, 1
  %conv3.i.i = trunc i64 %add.i.i to i32
  %filter.i.i = getelementptr inbounds i8* %call2.i.i, i64 8
  %42 = bitcast i8* %filter.i.i to i32*
  store i32 %conv3.i.i, i32* %42, align 4, !tbaa !76
  store i8* %call2.i.i, i8** %call.i.i, align 8, !tbaa !5
  %43 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh4.i.i = getelementptr inbounds %struct.function* %43, i64 0, i32 0
  %44 = load %struct.eh_status** %eh4.i.i, align 8, !tbaa !10
  %ttype_data5.i.i = getelementptr inbounds %struct.eh_status* %44, i64 0, i32 9
  %45 = load %struct.varray_head_tag** %ttype_data5.i.i, align 8, !tbaa !30
  %elements_used6.i.i = getelementptr inbounds %struct.varray_head_tag* %45, i64 0, i32 1
  %46 = load i64* %elements_used6.i.i, align 8, !tbaa !24
  %num_elements.i.i = getelementptr inbounds %struct.varray_head_tag* %45, i64 0, i32 0
  %47 = load i64* %num_elements.i.i, align 8, !tbaa !27
  %cmp9.i.i = icmp ult i64 %46, %47
  br i1 %cmp9.i.i, label %if.end.i.i, label %if.then11.i.i

if.then11.i.i:                                    ; preds = %if.then.i.i
  %mul.i.i = shl i64 %47, 1
  %call17.i.i = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %45, i64 %mul.i.i) #4
  %48 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh18.i.i = getelementptr inbounds %struct.function* %48, i64 0, i32 0
  %49 = load %struct.eh_status** %eh18.i.i, align 8, !tbaa !10
  %ttype_data19.i.i = getelementptr inbounds %struct.eh_status* %49, i64 0, i32 9
  store %struct.varray_head_tag* %call17.i.i, %struct.varray_head_tag** %ttype_data19.i.i, align 8, !tbaa !30
  %.pre.i.i = load %struct.function** @cfun, align 8, !tbaa !5
  %eh20.phi.trans.insert.i.i = getelementptr inbounds %struct.function* %.pre.i.i, i64 0, i32 0
  %.pre34.i.i = load %struct.eh_status** %eh20.phi.trans.insert.i.i, align 8, !tbaa !10
  %ttype_data21.phi.trans.insert.i.i = getelementptr inbounds %struct.eh_status* %.pre34.i.i, i64 0, i32 9
  %.pre35.i.i = load %struct.varray_head_tag** %ttype_data21.phi.trans.insert.i.i, align 8, !tbaa !30
  %elements_used22.phi.trans.insert.i.i = getelementptr inbounds %struct.varray_head_tag* %.pre35.i.i, i64 0, i32 1
  %.pre36.i.i = load i64* %elements_used22.phi.trans.insert.i.i, align 8, !tbaa !24
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then11.i.i, %if.then.i.i
  %50 = phi i64 [ %46, %if.then.i.i ], [ %.pre36.i.i, %if.then11.i.i ]
  %51 = phi %struct.varray_head_tag* [ %45, %if.then.i.i ], [ %.pre35.i.i, %if.then11.i.i ]
  %elements_used22.i.i = getelementptr inbounds %struct.varray_head_tag* %51, i64 0, i32 1
  %inc.i.i = add i64 %50, 1
  store i64 %inc.i.i, i64* %elements_used22.i.i, align 8, !tbaa !24
  %data.i.i = getelementptr inbounds %struct.varray_head_tag* %51, i64 0, i32 4
  %tree.i.i = bitcast %union.varray_data_tag* %data.i.i to [1 x %union.tree_node*]*
  %arrayidx.i.i = getelementptr inbounds [1 x %union.tree_node*]* %tree.i.i, i64 0, i64 %50
  store %union.tree_node* null, %union.tree_node** %arrayidx.i.i, align 8, !tbaa !5
  br label %add_ttypes_entry.exit.i

add_ttypes_entry.exit.i:                          ; preds = %if.end.i.i, %if.else.i
  %n.0.in.i.i = phi i8* [ %call2.i.i, %if.end.i.i ], [ %37, %if.else.i ]
  %filter26.i.i = getelementptr inbounds i8* %n.0.in.i.i, i64 8
  %52 = bitcast i8* %filter26.i.i to i32*
  %53 = load i32* %52, align 4, !tbaa !76
  %conv30.i = sext i32 %53 to i64
  %call31.i = call %union.tree_node* @build_int_2_wide(i64 %conv30.i, i64 0) #4
  %54 = load %struct.rtx_def** %filter_list.i, align 8
  %55 = bitcast %struct.rtx_def* %54 to %union.tree_node*
  %call35.i = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call31.i, %union.tree_node* %55) #4
  %call35.c.i = bitcast %union.tree_node* %call35.i to %struct.rtx_def*
  store %struct.rtx_def* %call35.c.i, %struct.rtx_def** %filter_list.i, align 8, !tbaa !43
  br label %for.inc46.i

sw.bb40.i:                                        ; preds = %if.end.i
  %u41.i = getelementptr inbounds %struct.eh_region* %26, i64 0, i32 6
  %type_list42.i = bitcast %union.anon* %u41.i to %union.tree_node**
  %56 = load %union.tree_node** %type_list42.i, align 8, !tbaa !45
  call void @llvm.lifetime.start(i64 16, i8* %22) #4
  store %union.tree_node* %56, %union.tree_node** %t.i68.i, align 8, !tbaa !74
  %call.i69.i = call i8** @htab_find_slot(%struct.htab* %call4.i, i8* %22, i32 1) #4
  %57 = load i8** %call.i69.i, align 8
  %cmp.i70.i = icmp eq i8* %57, null
  br i1 %cmp.i70.i, label %if.then.i74.i, label %add_ehspec_entry.exit.i

if.then.i74.i:                                    ; preds = %sw.bb40.i
  %call1.i.i = call noalias i8* @xmalloc(i64 16) #4
  %t2.i.i = bitcast i8* %call1.i.i to %union.tree_node**
  store %union.tree_node* %56, %union.tree_node** %t2.i.i, align 8, !tbaa !74
  %58 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i71.i = getelementptr inbounds %struct.function* %58, i64 0, i32 0
  %59 = load %struct.eh_status** %eh.i71.i, align 8, !tbaa !10
  %ehspec_data.i.i = getelementptr inbounds %struct.eh_status* %59, i64 0, i32 10
  %60 = load %struct.varray_head_tag** %ehspec_data.i.i, align 8, !tbaa !53
  %elements_used.i72.i = getelementptr inbounds %struct.varray_head_tag* %60, i64 0, i32 1
  %61 = load i64* %elements_used.i72.i, align 8, !tbaa !24
  %sub.i.i = xor i64 %61, 4294967295
  %conv.i.i = trunc i64 %sub.i.i to i32
  %filter.i73.i = getelementptr inbounds i8* %call1.i.i, i64 8
  %62 = bitcast i8* %filter.i73.i to i32*
  store i32 %conv.i.i, i32* %62, align 4, !tbaa !76
  store i8* %call1.i.i, i8** %call.i69.i, align 8, !tbaa !5
  %tobool38.i.i = icmp eq %union.tree_node* %56, null
  %63 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh339.i.i = getelementptr inbounds %struct.function* %63, i64 0, i32 0
  %64 = load %struct.eh_status** %eh339.i.i, align 8, !tbaa !10
  %ehspec_data440.i.i = getelementptr inbounds %struct.eh_status* %64, i64 0, i32 10
  br i1 %tobool38.i.i, label %do.body.i.i, label %for.body.i.i

for.body.i.i:                                     ; preds = %if.then.i74.i, %push_uleb128.exit.i.i
  %ehspec_data442.i.i = phi %struct.varray_head_tag** [ %ehspec_data4.i.i, %push_uleb128.exit.i.i ], [ %ehspec_data440.i.i, %if.then.i74.i ]
  %list.addr.041.i.i = phi %union.tree_node* [ %72, %push_uleb128.exit.i.i ], [ %56, %if.then.i74.i ]
  %value.i.i = getelementptr inbounds %union.tree_node* %list.addr.041.i.i, i64 0, i32 0, i32 2
  %65 = bitcast i32* %value.i.i to %union.tree_node**
  %66 = load %union.tree_node** %65, align 8, !tbaa !59
  %call6.i.i = call fastcc i32 @add_ttypes_entry(%struct.htab* %call3.i, %union.tree_node* %66) #4
  br label %do.body.i.i.i

do.body.i.i.i:                                    ; preds = %if.end7.i.i.i, %for.body.i.i
  %value.addr.0.i.i.i = phi i32 [ %call6.i.i, %for.body.i.i ], [ %shr.i.i.i, %if.end7.i.i.i ]
  %value.addr.0.tr.i.i.i = trunc i32 %value.addr.0.i.i.i to i8
  %conv.i.i.i = and i8 %value.addr.0.tr.i.i.i, 127
  %shr.i.i.i = lshr i32 %value.addr.0.i.i.i, 7
  %tobool.i.i.i = icmp ne i32 %shr.i.i.i, 0
  %or.i.i.i = or i8 %value.addr.0.tr.i.i.i, -128
  %or.conv.i.i.i = select i1 %tobool.i.i.i, i8 %or.i.i.i, i8 %conv.i.i.i
  %67 = load %struct.varray_head_tag** %ehspec_data442.i.i, align 8, !tbaa !5
  %elements_used.i.i.i = getelementptr inbounds %struct.varray_head_tag* %67, i64 0, i32 1
  %68 = load i64* %elements_used.i.i.i, align 8, !tbaa !24
  %num_elements.i.i.i = getelementptr inbounds %struct.varray_head_tag* %67, i64 0, i32 0
  %69 = load i64* %num_elements.i.i.i, align 8, !tbaa !27
  %cmp.i.i.i = icmp ult i64 %68, %69
  br i1 %cmp.i.i.i, label %if.end7.i.i.i, label %if.then5.i.i.i

if.then5.i.i.i:                                   ; preds = %do.body.i.i.i
  %mul.i.i.i = shl i64 %69, 1
  %call.i.i.i = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %67, i64 %mul.i.i.i) #4
  store %struct.varray_head_tag* %call.i.i.i, %struct.varray_head_tag** %ehspec_data442.i.i, align 8, !tbaa !5
  %elements_used8.phi.trans.insert.i.i.i = getelementptr inbounds %struct.varray_head_tag* %call.i.i.i, i64 0, i32 1
  %.pre.i.i.i = load i64* %elements_used8.phi.trans.insert.i.i.i, align 8, !tbaa !24
  br label %if.end7.i.i.i

if.end7.i.i.i:                                    ; preds = %if.then5.i.i.i, %do.body.i.i.i
  %70 = phi i64 [ %68, %do.body.i.i.i ], [ %.pre.i.i.i, %if.then5.i.i.i ]
  %71 = phi %struct.varray_head_tag* [ %67, %do.body.i.i.i ], [ %call.i.i.i, %if.then5.i.i.i ]
  %elements_used8.i.i.i = getelementptr inbounds %struct.varray_head_tag* %71, i64 0, i32 1
  %inc.i.i.i = add i64 %70, 1
  store i64 %inc.i.i.i, i64* %elements_used8.i.i.i, align 8, !tbaa !24
  %data.i.i.i = getelementptr inbounds %struct.varray_head_tag* %71, i64 0, i32 4
  %uc.i.i.i = bitcast %union.varray_data_tag* %data.i.i.i to [1 x i8]*
  %arrayidx.i.i.i = getelementptr inbounds [1 x i8]* %uc.i.i.i, i64 0, i64 %70
  store i8 %or.conv.i.i.i, i8* %arrayidx.i.i.i, align 1, !tbaa !56
  br i1 %tobool.i.i.i, label %do.body.i.i.i, label %push_uleb128.exit.i.i

push_uleb128.exit.i.i:                            ; preds = %if.end7.i.i.i
  %chain.i.i = getelementptr inbounds %union.tree_node* %list.addr.041.i.i, i64 0, i32 0, i32 0, i32 0
  %72 = load %union.tree_node** %chain.i.i, align 8, !tbaa !60
  %tobool.i.i = icmp eq %union.tree_node* %72, null
  %73 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh3.i.i = getelementptr inbounds %struct.function* %73, i64 0, i32 0
  %74 = load %struct.eh_status** %eh3.i.i, align 8, !tbaa !10
  %ehspec_data4.i.i = getelementptr inbounds %struct.eh_status* %74, i64 0, i32 10
  br i1 %tobool.i.i, label %do.body.i.i, label %for.body.i.i

do.body.i.i:                                      ; preds = %push_uleb128.exit.i.i, %if.then.i74.i
  %75 = phi %struct.function* [ %63, %if.then.i74.i ], [ %73, %push_uleb128.exit.i.i ]
  %ehspec_data4.lcssa.i.i = phi %struct.varray_head_tag** [ %ehspec_data440.i.i, %if.then.i74.i ], [ %ehspec_data4.i.i, %push_uleb128.exit.i.i ]
  %76 = load %struct.varray_head_tag** %ehspec_data4.lcssa.i.i, align 8, !tbaa !53
  %elements_used9.i.i = getelementptr inbounds %struct.varray_head_tag* %76, i64 0, i32 1
  %77 = load i64* %elements_used9.i.i, align 8, !tbaa !24
  %num_elements.i75.i = getelementptr inbounds %struct.varray_head_tag* %76, i64 0, i32 0
  %78 = load i64* %num_elements.i75.i, align 8, !tbaa !27
  %cmp12.i.i = icmp ult i64 %77, %78
  br i1 %cmp12.i.i, label %if.end.i81.i, label %if.then14.i.i

if.then14.i.i:                                    ; preds = %do.body.i.i
  %mul.i76.i = shl i64 %78, 1
  %call20.i.i = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %76, i64 %mul.i76.i) #4
  %79 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh21.i.i = getelementptr inbounds %struct.function* %79, i64 0, i32 0
  %80 = load %struct.eh_status** %eh21.i.i, align 8, !tbaa !10
  %ehspec_data22.i.i = getelementptr inbounds %struct.eh_status* %80, i64 0, i32 10
  store %struct.varray_head_tag* %call20.i.i, %struct.varray_head_tag** %ehspec_data22.i.i, align 8, !tbaa !53
  %.pre.i77.i = load %struct.function** @cfun, align 8, !tbaa !5
  br label %if.end.i81.i

if.end.i81.i:                                     ; preds = %if.then14.i.i, %do.body.i.i
  %81 = phi %struct.function* [ %75, %do.body.i.i ], [ %.pre.i77.i, %if.then14.i.i ]
  %eh23.i.i = getelementptr inbounds %struct.function* %81, i64 0, i32 0
  %82 = load %struct.eh_status** %eh23.i.i, align 8, !tbaa !10
  %ehspec_data24.i.i = getelementptr inbounds %struct.eh_status* %82, i64 0, i32 10
  %83 = load %struct.varray_head_tag** %ehspec_data24.i.i, align 8, !tbaa !53
  %elements_used25.i.i = getelementptr inbounds %struct.varray_head_tag* %83, i64 0, i32 1
  %84 = load i64* %elements_used25.i.i, align 8, !tbaa !24
  %inc.i78.i = add i64 %84, 1
  store i64 %inc.i78.i, i64* %elements_used25.i.i, align 8, !tbaa !24
  %data.i79.i = getelementptr inbounds %struct.varray_head_tag* %83, i64 0, i32 4
  %uc.i.i = bitcast %union.varray_data_tag* %data.i79.i to [1 x i8]*
  %arrayidx.i80.i = getelementptr inbounds [1 x i8]* %uc.i.i, i64 0, i64 %84
  store i8 0, i8* %arrayidx.i80.i, align 1, !tbaa !56
  br label %add_ehspec_entry.exit.i

add_ehspec_entry.exit.i:                          ; preds = %if.end.i81.i, %sw.bb40.i
  %n.0.in.i82.i = phi i8* [ %call1.i.i, %if.end.i81.i ], [ %57, %sw.bb40.i ]
  %filter29.i.i = getelementptr inbounds i8* %n.0.in.i82.i, i64 8
  %85 = bitcast i8* %filter29.i.i to i32*
  %86 = load i32* %85, align 4, !tbaa !76
  call void @llvm.lifetime.end(i64 16, i8* %22) #4
  %filter.i = getelementptr inbounds %struct.eh_region* %26, i64 0, i32 6, i32 0, i32 1
  %87 = bitcast %struct.eh_region** %filter.i to i32*
  store i32 %86, i32* %87, align 4, !tbaa !77
  br label %for.inc46.i

for.inc46.i:                                      ; preds = %for.body17.i, %add_ehspec_entry.exit.i, %add_ttypes_entry.exit.i, %if.end.i, %lor.lhs.false.i, %for.body.i
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -1
  %88 = trunc i64 %indvars.iv.next.i to i32
  %cmp.i20 = icmp sgt i32 %88, 0
  br i1 %cmp.i20, label %for.inc46.for.body_crit_edge.i, label %assign_filter_values.exit

for.inc46.for.body_crit_edge.i:                   ; preds = %for.inc46.i
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !5
  %eh6.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 0
  %.pre87.i = load %struct.eh_status** %eh6.phi.trans.insert.i, align 8, !tbaa !10
  br label %for.body.i

assign_filter_values.exit:                        ; preds = %for.inc46.i, %get_exception_filter.exit
  call void @htab_delete(%struct.htab* %call3.i) #4
  call void @htab_delete(%struct.htab* %call4.i) #4
  %89 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i21 = getelementptr inbounds %struct.function* %89, i64 0, i32 0
  %90 = load %struct.eh_status** %eh.i21, align 8, !tbaa !10
  %last_region_number.i22 = getelementptr inbounds %struct.eh_status* %90, i64 0, i32 8
  %91 = load i32* %last_region_number.i22, align 4, !tbaa !16
  %cmp99.i = icmp sgt i32 %91, 0
  br i1 %cmp99.i, label %for.body.lr.ph.i23, label %dw2_build_landing_pads.exit

for.body.lr.ph.i23:                               ; preds = %assign_filter_values.exit
  %92 = sext i32 %91 to i64
  br label %for.body.i28

for.body.i28:                                     ; preds = %for.inc63.i, %for.body.lr.ph.i23
  %93 = phi %struct.eh_status* [ %90, %for.body.lr.ph.i23 ], [ %.pre101.i, %for.inc63.i ]
  %indvars.iv.i24 = phi i64 [ %92, %for.body.lr.ph.i23 ], [ %indvars.iv.next.i45, %for.inc63.i ]
  %region_array.i25 = getelementptr inbounds %struct.eh_status* %93, i64 0, i32 1
  %94 = load %struct.eh_region*** %region_array.i25, align 8, !tbaa !14
  %arrayidx.i26 = getelementptr inbounds %struct.eh_region** %94, i64 %indvars.iv.i24
  %95 = load %struct.eh_region** %arrayidx.i26, align 8, !tbaa !5
  %tobool.i27 = icmp eq %struct.eh_region* %95, null
  br i1 %tobool.i27, label %for.inc63.i, label %lor.lhs.false.i30

lor.lhs.false.i30:                                ; preds = %for.body.i28
  %region_number.i29 = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 3
  %96 = load i32* %region_number.i29, align 4, !tbaa !17
  %97 = trunc i64 %indvars.iv.i24 to i32
  %cmp2.i = icmp eq i32 %96, %97
  br i1 %cmp2.i, label %if.end.i32, label %for.inc63.i

if.end.i32:                                       ; preds = %lor.lhs.false.i30
  %type.i31 = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 5
  %98 = load i32* %type.i31, align 4, !tbaa !40
  switch i32 %98, label %sw.default.i [
    i32 2, label %sw.bb.i35
    i32 4, label %sw.bb40.i44
    i32 1, label %sw.bb59.i
    i32 5, label %sw.bb59.i
    i32 3, label %for.inc63.i
    i32 6, label %for.inc63.i
  ]

sw.bb.i35:                                        ; preds = %if.end.i32
  %call.i33 = call %struct.rtx_def* @gen_label_rtx() #4
  %post_landing_pad.i = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 9
  store %struct.rtx_def* %call.i33, %struct.rtx_def** %post_landing_pad.i, align 8, !tbaa !52
  call void @start_sequence() #4
  %99 = load %struct.rtx_def** %post_landing_pad.i, align 8, !tbaa !52
  %call4.i34 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %99) #4
  %catch.i = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 6, i32 0, i32 0
  %c.096.i = load %struct.eh_region** %catch.i, align 8
  %tobool697.i = icmp eq %struct.eh_region* %c.096.i, null
  br i1 %tobool697.i, label %for.end29.i, label %for.body7.i

for.body7.i:                                      ; preds = %sw.bb.i35, %for.inc.i
  %c.098.i = phi %struct.eh_region* [ %c.0.i, %for.inc.i ], [ %c.096.i, %sw.bb.i35 ]
  %type_list.i36 = getelementptr inbounds %struct.eh_region* %c.098.i, i64 0, i32 6, i32 0, i32 2
  %100 = load %struct.eh_region** %type_list.i36, align 8
  %cmp10.i37 = icmp eq %struct.eh_region* %100, null
  br i1 %cmp10.i37, label %if.then11.i, label %for.body19.lr.ph.i

if.then11.i:                                      ; preds = %for.body7.i
  %label.i = getelementptr inbounds %struct.eh_region* %c.098.i, i64 0, i32 7
  %101 = load %struct.rtx_def** %label.i, align 8, !tbaa !49
  call void @emit_jump(%struct.rtx_def* %101) #4
  br label %for.inc.i

for.body19.lr.ph.i:                               ; preds = %for.body7.i
  %filter_list.i38 = getelementptr inbounds %struct.eh_region* %c.098.i, i64 0, i32 6, i32 0, i32 3
  %102 = load %struct.rtx_def** %filter_list.i38, align 8
  %103 = bitcast %struct.eh_region* %100 to %union.tree_node*
  %104 = bitcast %struct.rtx_def* %102 to %union.tree_node*
  %label23.i = getelementptr inbounds %struct.eh_region* %c.098.i, i64 0, i32 7
  br label %for.body19.i

for.body19.i:                                     ; preds = %for.body19.i, %for.body19.lr.ph.i
  %flt_node.095.i = phi %union.tree_node* [ %104, %for.body19.lr.ph.i ], [ %113, %for.body19.i ]
  %tp_node.094.i = phi %union.tree_node* [ %103, %for.body19.lr.ph.i ], [ %112, %for.body19.i ]
  %105 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh20.i = getelementptr inbounds %struct.function* %105, i64 0, i32 0
  %106 = load %struct.eh_status** %eh20.i, align 8, !tbaa !10
  %filter.i39 = getelementptr inbounds %struct.eh_status* %106, i64 0, i32 5
  %107 = load %struct.rtx_def** %filter.i39, align 8, !tbaa !28
  %value.i40 = getelementptr inbounds %union.tree_node* %flt_node.095.i, i64 0, i32 0, i32 2
  %108 = bitcast i32* %value.i40 to %union.tree_node**
  %109 = load %union.tree_node** %108, align 8, !tbaa !59
  %call21.i = call i64 @tree_low_cst(%union.tree_node* %109, i32 0) #4
  %call22.i = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call21.i) #4
  %110 = load i32* @word_mode, align 4, !tbaa !56
  %111 = load %struct.rtx_def** %label23.i, align 8, !tbaa !49
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %107, %struct.rtx_def* %call22.i, i32 103, %struct.rtx_def* null, i32 %110, i32 0, %struct.rtx_def* %111) #4
  %chain.i41 = getelementptr inbounds %union.tree_node* %tp_node.094.i, i64 0, i32 0, i32 0, i32 0
  %112 = load %union.tree_node** %chain.i41, align 8, !tbaa !60
  %chain25.i = getelementptr inbounds %union.tree_node* %flt_node.095.i, i64 0, i32 0, i32 0, i32 0
  %113 = load %union.tree_node** %chain25.i, align 8, !tbaa !60
  %tobool18.i = icmp eq %union.tree_node* %112, null
  br i1 %tobool18.i, label %for.inc.i, label %for.body19.i

for.inc.i:                                        ; preds = %for.body19.i, %if.then11.i
  %next_catch.i = getelementptr inbounds %struct.eh_region* %c.098.i, i64 0, i32 6, i32 0, i32 0
  %c.0.i = load %struct.eh_region** %next_catch.i, align 8
  %tobool6.i = icmp eq %struct.eh_region* %c.0.i, null
  br i1 %tobool6.i, label %for.end29.i, label %for.body7.i

for.end29.i:                                      ; preds = %for.inc.i, %sw.bb.i35
  %114 = load i32* %region_number.i29, align 4, !tbaa !17
  %call31.i42 = call %struct.rtx_def* @gen_rtx_fmt_i(i32 53, i32 0, i32 %114) #4
  %call32.i = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call31.i42) #4
  %resume.i = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 10
  store %struct.rtx_def* %call32.i, %struct.rtx_def** %resume.i, align 8, !tbaa !50
  %call33.i = call %struct.rtx_def* @emit_barrier() #4
  %call34.i = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %115 = load %struct.eh_region** %catch.i, align 8, !tbaa !62
  %label38.i = getelementptr inbounds %struct.eh_region* %115, i64 0, i32 7
  %116 = load %struct.rtx_def** %label38.i, align 8, !tbaa !49
  %call39.i = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %call34.i, %struct.rtx_def* %116) #4
  br label %for.inc63.i

sw.bb40.i44:                                      ; preds = %if.end.i32
  %call41.i = call %struct.rtx_def* @gen_label_rtx() #4
  %post_landing_pad42.i = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 9
  store %struct.rtx_def* %call41.i, %struct.rtx_def** %post_landing_pad42.i, align 8, !tbaa !52
  call void @start_sequence() #4
  %117 = load %struct.rtx_def** %post_landing_pad42.i, align 8, !tbaa !52
  %call44.i = call %struct.rtx_def* @emit_label(%struct.rtx_def* %117) #4
  %118 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh45.i = getelementptr inbounds %struct.function* %118, i64 0, i32 0
  %119 = load %struct.eh_status** %eh45.i, align 8, !tbaa !10
  %filter46.i = getelementptr inbounds %struct.eh_status* %119, i64 0, i32 5
  %120 = load %struct.rtx_def** %filter46.i, align 8, !tbaa !28
  %filter48.i = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 6, i32 0, i32 1
  %121 = bitcast %struct.eh_region** %filter48.i to i32*
  %122 = load i32* %121, align 4, !tbaa !77
  %conv.i43 = sext i32 %122 to i64
  %call49.i = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv.i43) #4
  %123 = load i32* @word_mode, align 4, !tbaa !56
  %label50.i = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 7
  %124 = load %struct.rtx_def** %label50.i, align 8, !tbaa !49
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %120, %struct.rtx_def* %call49.i, i32 103, %struct.rtx_def* null, i32 %123, i32 0, %struct.rtx_def* %124) #4
  %125 = load i32* %region_number.i29, align 4, !tbaa !17
  %call52.i = call %struct.rtx_def* @gen_rtx_fmt_i(i32 53, i32 0, i32 %125) #4
  %call53.i = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call52.i) #4
  %resume54.i = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 10
  store %struct.rtx_def* %call53.i, %struct.rtx_def** %resume54.i, align 8, !tbaa !50
  %call55.i = call %struct.rtx_def* @emit_barrier() #4
  %call56.i = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %126 = load %struct.rtx_def** %label50.i, align 8, !tbaa !49
  %call58.i = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %call56.i, %struct.rtx_def* %126) #4
  br label %for.inc63.i

sw.bb59.i:                                        ; preds = %if.end.i32, %if.end.i32
  %label60.i = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 7
  %127 = load %struct.rtx_def** %label60.i, align 8, !tbaa !49
  %post_landing_pad61.i = getelementptr inbounds %struct.eh_region* %95, i64 0, i32 9
  store %struct.rtx_def* %127, %struct.rtx_def** %post_landing_pad61.i, align 8, !tbaa !52
  br label %for.inc63.i

sw.default.i:                                     ; preds = %if.end.i32
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 2044, i8* getelementptr inbounds ([24 x i8]* @__FUNCTION__.build_post_landing_pads, i64 0, i64 0)) #6
  unreachable

for.inc63.i:                                      ; preds = %sw.bb59.i, %sw.bb40.i44, %for.end29.i, %if.end.i32, %if.end.i32, %lor.lhs.false.i30, %for.body.i28
  %indvars.iv.next.i45 = add nsw i64 %indvars.iv.i24, -1
  %128 = trunc i64 %indvars.iv.next.i45 to i32
  %cmp.i46 = icmp sgt i32 %128, 0
  %.pre.i47 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i47, i64 0, i32 0
  %.pre101.i = load %struct.eh_status** %eh1.phi.trans.insert.i, align 8, !tbaa !10
  br i1 %cmp.i46, label %for.body.i28, label %build_post_landing_pads.exit

build_post_landing_pads.exit:                     ; preds = %for.inc63.i
  %last_region_number.i49.phi.trans.insert = getelementptr inbounds %struct.eh_status* %.pre101.i, i64 0, i32 8
  %.pre101 = load i32* %last_region_number.i49.phi.trans.insert, align 4, !tbaa !16
  %cmp42.i = icmp sgt i32 %.pre101, 0
  br i1 %cmp42.i, label %for.body.lr.ph.i50, label %dw2_build_landing_pads.exit

for.body.lr.ph.i50:                               ; preds = %build_post_landing_pads.exit
  %129 = sext i32 %.pre101 to i64
  br label %for.body.i55

for.body.i55:                                     ; preds = %for.inc27.i, %for.body.lr.ph.i50
  %130 = phi %struct.eh_status* [ %.pre101.i, %for.body.lr.ph.i50 ], [ %.pre44.i, %for.inc27.i ]
  %indvars.iv.i51 = phi i64 [ %129, %for.body.lr.ph.i50 ], [ %indvars.iv.next.i67, %for.inc27.i ]
  %region_array.i52 = getelementptr inbounds %struct.eh_status* %130, i64 0, i32 1
  %131 = load %struct.eh_region*** %region_array.i52, align 8, !tbaa !14
  %arrayidx.i53 = getelementptr inbounds %struct.eh_region** %131, i64 %indvars.iv.i51
  %132 = load %struct.eh_region** %arrayidx.i53, align 8, !tbaa !5
  %tobool.i54 = icmp eq %struct.eh_region* %132, null
  br i1 %tobool.i54, label %for.inc27.i, label %lor.lhs.false.i58

lor.lhs.false.i58:                                ; preds = %for.body.i55
  %region_number.i56 = getelementptr inbounds %struct.eh_region* %132, i64 0, i32 3
  %133 = load i32* %region_number.i56, align 4, !tbaa !17
  %134 = trunc i64 %indvars.iv.i51 to i32
  %cmp2.i57 = icmp eq i32 %133, %134
  br i1 %cmp2.i57, label %if.end.i60, label %for.inc27.i

if.end.i60:                                       ; preds = %lor.lhs.false.i58
  %resume.i59 = getelementptr inbounds %struct.eh_region* %132, i64 0, i32 10
  %135 = load %struct.rtx_def** %resume.i59, align 8, !tbaa !50
  %tobool3.i = icmp eq %struct.rtx_def* %135, null
  br i1 %tobool3.i, label %for.inc27.i, label %lor.lhs.false4.i

lor.lhs.false4.i:                                 ; preds = %if.end.i60
  %136 = getelementptr inbounds %struct.rtx_def* %135, i64 0, i32 0
  %bf.load.i = load i32* %136, align 8
  %bf.clear.i = and i32 %bf.load.i, 134217728
  %tobool6.i61 = icmp eq i32 %bf.clear.i, 0
  br i1 %tobool6.i61, label %for.cond10.i, label %for.inc27.i

for.cond10.i:                                     ; preds = %lor.lhs.false4.i, %for.body12.i
  %.pn.i = phi %struct.eh_region* [ %outer.0.i, %for.body12.i ], [ %132, %lor.lhs.false4.i ]
  %outer.0.in.i = getelementptr inbounds %struct.eh_region* %.pn.i, i64 0, i32 0
  %outer.0.i = load %struct.eh_region** %outer.0.in.i, align 8
  %tobool11.i = icmp eq %struct.eh_region* %outer.0.i, null
  br i1 %tobool11.i, label %if.else.i65, label %for.body12.i

for.body12.i:                                     ; preds = %for.cond10.i
  %post_landing_pad.i62 = getelementptr inbounds %struct.eh_region* %outer.0.i, i64 0, i32 9
  %137 = load %struct.rtx_def** %post_landing_pad.i62, align 8, !tbaa !52
  %tobool13.i = icmp eq %struct.rtx_def* %137, null
  br i1 %tobool13.i, label %for.cond10.i, label %if.then18.i

if.then18.i:                                      ; preds = %for.body12.i
  call void @start_sequence() #4
  %138 = load %struct.rtx_def** %post_landing_pad.i62, align 8, !tbaa !52
  call void @emit_jump(%struct.rtx_def* %138) #4
  br label %if.end22.i

if.else.i65:                                      ; preds = %for.cond10.i
  call void @start_sequence() #4
  %139 = load %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 18), align 8, !tbaa !5
  %140 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh20.i63 = getelementptr inbounds %struct.function* %140, i64 0, i32 0
  %141 = load %struct.eh_status** %eh20.i63, align 8, !tbaa !10
  %exc_ptr.i = getelementptr inbounds %struct.eh_status* %141, i64 0, i32 6
  %142 = load %struct.rtx_def** %exc_ptr.i, align 8, !tbaa !29
  %143 = load i32* @target_flags, align 4, !tbaa !1
  %and.i64 = lshr i32 %143, 25
  %144 = and i32 %and.i64, 1
  %145 = or i32 %144, 4
  call void (%struct.rtx_def*, i32, i32, i32, ...)* @emit_library_call(%struct.rtx_def* %139, i32 6, i32 0, i32 1, %struct.rtx_def* %142, i32 %145) #4
  br label %if.end22.i

if.end22.i:                                       ; preds = %if.else.i65, %if.then18.i
  %call.i66 = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %146 = load %struct.rtx_def** %resume.i59, align 8, !tbaa !50
  %call24.i = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %call.i66, %struct.rtx_def* %146) #4
  %147 = load %struct.rtx_def** %resume.i59, align 8, !tbaa !50
  %call26.i = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %147) #4
  br label %for.inc27.i

for.inc27.i:                                      ; preds = %if.end22.i, %lor.lhs.false4.i, %if.end.i60, %lor.lhs.false.i58, %for.body.i55
  %indvars.iv.next.i67 = add nsw i64 %indvars.iv.i51, -1
  %148 = trunc i64 %indvars.iv.next.i67 to i32
  %cmp.i68 = icmp sgt i32 %148, 0
  %.pre.i69 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1.phi.trans.insert.i70 = getelementptr inbounds %struct.function* %.pre.i69, i64 0, i32 0
  %.pre44.i = load %struct.eh_status** %eh1.phi.trans.insert.i70, align 8, !tbaa !10
  br i1 %cmp.i68, label %for.body.i55, label %connect_post_landing_pads.exit

connect_post_landing_pads.exit:                   ; preds = %for.inc27.i
  %last_region_number.i72.phi.trans.insert = getelementptr inbounds %struct.eh_status* %.pre44.i, i64 0, i32 8
  %.pre104 = load i32* %last_region_number.i72.phi.trans.insert, align 4, !tbaa !16
  %cmp63.i = icmp sgt i32 %.pre104, 0
  br i1 %cmp63.i, label %for.body.lr.ph.i73, label %dw2_build_landing_pads.exit

for.body.lr.ph.i73:                               ; preds = %connect_post_landing_pads.exit
  %149 = sext i32 %.pre104 to i64
  br label %for.body.i78

for.body.i78:                                     ; preds = %for.inc44.i, %for.body.lr.ph.i73
  %150 = phi %struct.eh_status* [ %.pre44.i, %for.body.lr.ph.i73 ], [ %.pre65.i, %for.inc44.i ]
  %indvars.iv.i74 = phi i64 [ %149, %for.body.lr.ph.i73 ], [ %indvars.iv.next.i94, %for.inc44.i ]
  %region_array.i75 = getelementptr inbounds %struct.eh_status* %150, i64 0, i32 1
  %151 = load %struct.eh_region*** %region_array.i75, align 8, !tbaa !14
  %arrayidx.i76 = getelementptr inbounds %struct.eh_region** %151, i64 %indvars.iv.i74
  %152 = load %struct.eh_region** %arrayidx.i76, align 8, !tbaa !5
  %tobool.i77 = icmp eq %struct.eh_region* %152, null
  br i1 %tobool.i77, label %for.inc44.i, label %lor.lhs.false.i81

lor.lhs.false.i81:                                ; preds = %for.body.i78
  %region_number.i79 = getelementptr inbounds %struct.eh_region* %152, i64 0, i32 3
  %153 = load i32* %region_number.i79, align 4, !tbaa !17
  %154 = trunc i64 %indvars.iv.i74 to i32
  %cmp2.i80 = icmp eq i32 %153, %154
  br i1 %cmp2.i80, label %if.end.i83, label %for.inc44.i

if.end.i83:                                       ; preds = %lor.lhs.false.i81
  %type.i82 = getelementptr inbounds %struct.eh_region* %152, i64 0, i32 5
  %155 = load i32* %type.i82, align 4, !tbaa !40
  switch i32 %155, label %for.inc44.i [
    i32 1, label %if.end10.i
    i32 2, label %if.end10.i
    i32 4, label %if.end10.i
  ]

if.end10.i:                                       ; preds = %if.end.i83, %if.end.i83, %if.end.i83
  call void @start_sequence() #4
  %call.i84 = call %struct.rtx_def* @gen_label_rtx() #4
  %landing_pad.i = getelementptr inbounds %struct.eh_region* %152, i64 0, i32 8
  store %struct.rtx_def* %call.i84, %struct.rtx_def** %landing_pad.i, align 8, !tbaa !51
  %call12.i = call %struct.rtx_def* @emit_label(%struct.rtx_def* %call.i84) #4
  %156 = load i8* getelementptr inbounds ([53 x i8]* @call_used_regs, i64 0, i64 0), align 1, !tbaa !56
  %tobool20.i = icmp eq i8 %156, 0
  br i1 %tobool20.i, label %if.then21.i, label %for.inc.i88

if.then21.i:                                      ; preds = %if.end10.i
  %157 = load i32* @target_flags, align 4, !tbaa !1
  %and.i85 = lshr i32 %157, 25
  %158 = and i32 %and.i85, 1
  %159 = or i32 %158, 4
  %call24.i86 = call %struct.rtx_def* @gen_rtx_REG(i32 %159, i32 0) #4
  %call25.i = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call24.i86) #4
  %call26.i87 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call25.i) #4
  br label %for.inc.i88

for.inc.i88:                                      ; preds = %if.then21.i, %if.end10.i
  %clobbers_hard_regs.1.i = phi i8 [ 0, %if.end10.i ], [ 1, %if.then21.i ]
  %160 = load i8* getelementptr inbounds ([53 x i8]* @call_used_regs, i64 0, i64 1), align 1, !tbaa !56
  %tobool20.1.i = icmp eq i8 %160, 0
  br i1 %tobool20.1.i, label %for.inc.1.thread.i, label %for.inc.1.i

if.then29.i:                                      ; preds = %for.inc.1.i, %for.inc.1.thread.i
  %call30.i = call %struct.rtx_def* @gen_rtx_fmt_s(i32 40, i32 0, i8* getelementptr inbounds ([1 x i8]* @.str27, i64 0, i64 0)) #4
  %call31.i89 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call30.i) #4
  br label %if.end32.i

if.end32.i:                                       ; preds = %for.inc.1.i, %if.then29.i
  %161 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh33.i = getelementptr inbounds %struct.function* %161, i64 0, i32 0
  %162 = load %struct.eh_status** %eh33.i, align 8, !tbaa !10
  %exc_ptr.i90 = getelementptr inbounds %struct.eh_status* %162, i64 0, i32 6
  %163 = load %struct.rtx_def** %exc_ptr.i90, align 8, !tbaa !29
  %164 = load i32* @target_flags, align 4, !tbaa !1
  %and34.i = lshr i32 %164, 25
  %165 = and i32 %and34.i, 1
  %166 = or i32 %165, 4
  %call37.i = call %struct.rtx_def* @gen_rtx_REG(i32 %166, i32 0) #4
  %call38.i = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %163, %struct.rtx_def* %call37.i) #4
  %167 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh39.i = getelementptr inbounds %struct.function* %167, i64 0, i32 0
  %168 = load %struct.eh_status** %eh39.i, align 8, !tbaa !10
  %filter.i91 = getelementptr inbounds %struct.eh_status* %168, i64 0, i32 5
  %169 = load %struct.rtx_def** %filter.i91, align 8, !tbaa !28
  %170 = load i32* @word_mode, align 4, !tbaa !56
  %call40.i = call %struct.rtx_def* @gen_rtx_REG(i32 %170, i32 1) #4
  %call41.i92 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %169, %struct.rtx_def* %call40.i) #4
  %call42.i = call %struct.rtx_def* @get_insns() #4
  call void @end_sequence() #4
  %post_landing_pad.i93 = getelementptr inbounds %struct.eh_region* %152, i64 0, i32 9
  %171 = load %struct.rtx_def** %post_landing_pad.i93, align 8, !tbaa !52
  %call43.i = call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %call42.i, %struct.rtx_def* %171) #4
  br label %for.inc44.i

for.inc44.i:                                      ; preds = %if.end32.i, %if.end.i83, %lor.lhs.false.i81, %for.body.i78
  %indvars.iv.next.i94 = add nsw i64 %indvars.iv.i74, -1
  %172 = trunc i64 %indvars.iv.next.i94 to i32
  %cmp.i95 = icmp sgt i32 %172, 0
  %.pre.i96 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1.phi.trans.insert.i97 = getelementptr inbounds %struct.function* %.pre.i96, i64 0, i32 0
  %.pre65.i = load %struct.eh_status** %eh1.phi.trans.insert.i97, align 8, !tbaa !10
  br i1 %cmp.i95, label %for.body.i78, label %dw2_build_landing_pads.exit

for.inc.1.thread.i:                               ; preds = %for.inc.i88
  %173 = load i32* @target_flags, align 4, !tbaa !1
  %and.1.i = lshr i32 %173, 25
  %174 = and i32 %and.1.i, 1
  %175 = or i32 %174, 4
  %call24.1.i = call %struct.rtx_def* @gen_rtx_REG(i32 %175, i32 1) #4
  %call25.1.i = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call24.1.i) #4
  %call26.1.i = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call25.1.i) #4
  br label %if.then29.i

for.inc.1.i:                                      ; preds = %for.inc.i88
  %tobool28.i = icmp eq i8 %clobbers_hard_regs.1.i, 0
  br i1 %tobool28.i, label %if.end32.i, label %if.then29.i

dw2_build_landing_pads.exit:                      ; preds = %for.inc44.i, %assign_filter_values.exit, %build_post_landing_pads.exit, %connect_post_landing_pads.exit
  %176 = phi %struct.eh_status* [ %.pre44.i, %connect_post_landing_pads.exit ], [ %.pre101.i, %build_post_landing_pads.exit ], [ %90, %assign_filter_values.exit ], [ %.pre65.i, %for.inc44.i ]
  %built_landing_pads = getelementptr inbounds %struct.eh_status* %176, i64 0, i32 7
  store i32 1, i32* %built_landing_pads, align 4, !tbaa !68
  call void @find_exception_handler_labels()
  %call7 = call %struct.rtx_def* @get_insns() #4
  call void @rebuild_jump_labels(%struct.rtx_def* %call7) #4
  %call8 = call %struct.rtx_def* @get_insns() #4
  %call9 = call i32 @max_reg_num() #4
  call void @find_basic_blocks(%struct.rtx_def* %call8, i32 %call9, %struct._IO_FILE* null) #4
  %call10 = call zeroext i1 @cleanup_cfg(i32 16) #4
  br label %return

return:                                           ; preds = %entry, %dw2_build_landing_pads.exit
  ret void
}

declare void @rebuild_jump_labels(%struct.rtx_def*) #1

declare void @find_basic_blocks(%struct.rtx_def*, i32, %struct._IO_FILE*) #1

declare i32 @max_reg_num() #1

declare zeroext i1 @cleanup_cfg(i32) #1

; Function Attrs: nounwind uwtable
define void @maybe_remove_eh_handler(%struct.rtx_def* %label) #0 {
entry:
  %tmp = alloca %struct.ehl_map_entry, align 8
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %built_landing_pads = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 7
  %2 = load i32* %built_landing_pads, align 4, !tbaa !68
  %tobool = icmp eq i32 %2, 0
  br i1 %tobool, label %if.end, label %if.end12

if.end:                                           ; preds = %entry
  %label2 = getelementptr inbounds %struct.ehl_map_entry* %tmp, i64 0, i32 0
  store %struct.rtx_def* %label, %struct.rtx_def** %label2, align 8, !tbaa !69
  %3 = load %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  %4 = bitcast %struct.ehl_map_entry* %tmp to i8*
  %call = call i8** @htab_find_slot(%struct.htab* %3, i8* %4, i32 0) #4
  %tobool3 = icmp eq i8** %call, null
  br i1 %tobool3, label %if.end12, label %if.end5

if.end5:                                          ; preds = %if.end
  %5 = load i8** %call, align 8
  %region6 = getelementptr inbounds i8* %5, i64 8
  %6 = bitcast i8* %region6 to %struct.eh_region**
  %7 = load %struct.eh_region** %6, align 8, !tbaa !71
  %tobool7 = icmp eq %struct.eh_region* %7, null
  br i1 %tobool7, label %if.end12, label %if.end9

if.end9:                                          ; preds = %if.end5
  %type = getelementptr inbounds %struct.eh_region* %7, i64 0, i32 5
  %8 = load i32* %type, align 4, !tbaa !40
  %cmp = icmp eq i32 %8, 5
  br i1 %cmp, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.end9
  %9 = load %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  call void @htab_clear_slot(%struct.htab* %9, i8** %call) #4
  %label11 = getelementptr inbounds %struct.eh_region* %7, i64 0, i32 7
  store %struct.rtx_def* null, %struct.rtx_def** %label11, align 8, !tbaa !49
  br label %if.end12

if.else:                                          ; preds = %if.end9
  call fastcc void @remove_eh_handler(%struct.eh_region* %7)
  br label %if.end12

if.end12:                                         ; preds = %if.end5, %if.end, %entry, %if.else, %if.then10
  ret void
}

declare i8** @htab_find_slot(%struct.htab*, i8*, i32) #1

declare void @htab_clear_slot(%struct.htab*, i8**) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @remove_eh_handler(%struct.eh_region* %region) #0 {
entry:
  %tmp.i = alloca %struct.ehl_map_entry, align 8
  %outer1 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 0
  %0 = load %struct.eh_region** %outer1, align 8, !tbaa !22
  %region_number = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 3
  %1 = load i32* %region_number, align 4, !tbaa !17
  %idxprom = sext i32 %1 to i64
  %2 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %2, i64 0, i32 0
  %3 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %region_array = getelementptr inbounds %struct.eh_status* %3, i64 0, i32 1
  %4 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %arrayidx = getelementptr inbounds %struct.eh_region** %4, i64 %idxprom
  store %struct.eh_region* %0, %struct.eh_region** %arrayidx, align 8, !tbaa !5
  %aka = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 4
  %5 = load %struct.bitmap_head_def** %aka, align 8, !tbaa !78
  %tobool = icmp eq %struct.bitmap_head_def* %5, null
  br i1 %tobool, label %if.end40, label %do.body

do.body:                                          ; preds = %entry
  %first = getelementptr inbounds %struct.bitmap_head_def* %5, i64 0, i32 0
  %ptr_.1204 = load %struct.bitmap_element_def** %first, align 8
  %cmp8205 = icmp eq %struct.bitmap_element_def* %ptr_.1204, null
  br i1 %cmp8205, label %if.end40, label %for.cond9.preheader

for.cond9.preheader:                              ; preds = %do.body, %if.end33.1
  %ptr_.1206 = phi %struct.bitmap_element_def* [ %ptr_.1, %if.end33.1 ], [ %ptr_.1204, %do.body ]
  %indx22 = getelementptr inbounds %struct.bitmap_element_def* %ptr_.1206, i64 0, i32 2
  %arrayidx13 = getelementptr inbounds %struct.bitmap_element_def* %ptr_.1206, i64 0, i32 3, i64 0
  %6 = load i64* %arrayidx13, align 8, !tbaa !64
  %cmp14 = icmp eq i64 %6, 0
  br i1 %cmp14, label %if.end33, label %for.body18

for.body18:                                       ; preds = %for.cond9.preheader, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.cond9.preheader ]
  %word_.0 = phi i64 [ %word_.1, %for.inc ], [ %6, %for.cond9.preheader ]
  %shl = shl i64 1, %indvars.iv
  %and = and i64 %shl, %word_.0
  %cmp19 = icmp eq i64 %and, 0
  br i1 %cmp19, label %for.inc, label %if.then20

if.then20:                                        ; preds = %for.body18
  %neg = xor i64 %shl, -1
  %and21 = and i64 %word_.0, %neg
  %7 = load i32* %indx22, align 4, !tbaa !79
  %mul = shl i32 %7, 7
  %8 = trunc i64 %indvars.iv to i32
  %add24 = add i32 %8, %mul
  %idxprom25 = sext i32 %add24 to i64
  %9 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh26 = getelementptr inbounds %struct.function* %9, i64 0, i32 0
  %10 = load %struct.eh_status** %eh26, align 8, !tbaa !10
  %region_array27 = getelementptr inbounds %struct.eh_status* %10, i64 0, i32 1
  %11 = load %struct.eh_region*** %region_array27, align 8, !tbaa !14
  %arrayidx28 = getelementptr inbounds %struct.eh_region** %11, i64 %idxprom25
  store %struct.eh_region* %0, %struct.eh_region** %arrayidx28, align 8, !tbaa !5
  %cmp29 = icmp eq i64 %and21, 0
  br i1 %cmp29, label %if.end33, label %for.inc

for.inc:                                          ; preds = %for.body18, %if.then20
  %word_.1 = phi i64 [ %and21, %if.then20 ], [ %word_.0, %for.body18 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = trunc i64 %indvars.iv.next to i32
  %cmp17.old = icmp ult i32 %12, 64
  br i1 %cmp17.old, label %for.body18, label %if.end33

if.end33:                                         ; preds = %for.inc, %if.then20, %for.cond9.preheader
  %arrayidx13.1 = getelementptr inbounds %struct.bitmap_element_def* %ptr_.1206, i64 0, i32 3, i64 1
  %13 = load i64* %arrayidx13.1, align 8, !tbaa !64
  %cmp14.1 = icmp eq i64 %13, 0
  br i1 %cmp14.1, label %if.end33.1, label %for.body18.1

if.end40:                                         ; preds = %if.end33.1, %do.body, %entry
  %tobool41 = icmp ne %struct.eh_region* %0, null
  br i1 %tobool41, label %if.then42, label %if.end59

if.then42:                                        ; preds = %if.end40
  %aka43 = getelementptr inbounds %struct.eh_region* %0, i64 0, i32 4
  %14 = load %struct.bitmap_head_def** %aka43, align 8, !tbaa !78
  %tobool44 = icmp eq %struct.bitmap_head_def* %14, null
  br i1 %tobool44, label %if.then45, label %if.end48

if.then45:                                        ; preds = %if.then42
  %call = call noalias i8* @xmalloc(i64 24) #4
  %15 = bitcast i8* %call to %struct.bitmap_head_def*
  %call46 = call %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def* %15) #4
  store %struct.bitmap_head_def* %call46, %struct.bitmap_head_def** %aka43, align 8, !tbaa !78
  br label %if.end48

if.end48:                                         ; preds = %if.then42, %if.then45
  %16 = phi %struct.bitmap_head_def* [ %14, %if.then42 ], [ %call46, %if.then45 ]
  %17 = load %struct.bitmap_head_def** %aka, align 8, !tbaa !78
  %tobool50 = icmp eq %struct.bitmap_head_def* %17, null
  br i1 %tobool50, label %if.end56, label %if.then51

if.then51:                                        ; preds = %if.end48
  %call55 = call i32 @bitmap_operation(%struct.bitmap_head_def* %16, %struct.bitmap_head_def* %16, %struct.bitmap_head_def* %17, i32 2) #4
  %.pre = load %struct.bitmap_head_def** %aka43, align 8, !tbaa !78
  br label %if.end56

if.end56:                                         ; preds = %if.end48, %if.then51
  %18 = phi %struct.bitmap_head_def* [ %16, %if.end48 ], [ %.pre, %if.then51 ]
  %19 = load i32* %region_number, align 4, !tbaa !17
  call void @bitmap_set_bit(%struct.bitmap_head_def* %18, i32 %19) #4
  br label %if.end59

if.end59:                                         ; preds = %if.end56, %if.end40
  %20 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh60 = getelementptr inbounds %struct.function* %20, i64 0, i32 0
  %21 = load %struct.eh_status** %eh60, align 8, !tbaa !10
  %built_landing_pads = getelementptr inbounds %struct.eh_status* %21, i64 0, i32 7
  %22 = load i32* %built_landing_pads, align 4, !tbaa !68
  %tobool61 = icmp eq i32 %22, 0
  %landing_pad = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 8
  %label = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 7
  %lab.0.in = select i1 %tobool61, %struct.rtx_def** %label, %struct.rtx_def** %landing_pad
  %lab.0 = load %struct.rtx_def** %lab.0.in, align 8
  %tobool64 = icmp eq %struct.rtx_def* %lab.0, null
  br i1 %tobool64, label %if.end66, label %if.then65

if.then65:                                        ; preds = %if.end59
  %23 = bitcast %struct.ehl_map_entry* %tmp.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %23) #4
  %24 = load %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  %cmp.i = icmp eq %struct.htab* %24, null
  br i1 %cmp.i, label %if.end66, label %if.end.i

if.end.i:                                         ; preds = %if.then65
  %label1.i = getelementptr inbounds %struct.ehl_map_entry* %tmp.i, i64 0, i32 0
  store %struct.rtx_def* %lab.0, %struct.rtx_def** %label1.i, align 8, !tbaa !69
  %call.i = call i8** @htab_find_slot(%struct.htab* %24, i8* %23, i32 0) #4
  %tobool.i = icmp eq i8** %call.i, null
  br i1 %tobool.i, label %if.then2.i, label %if.end3.i

if.then2.i:                                       ; preds = %if.end.i
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 2625, i8* getelementptr inbounds ([31 x i8]* @__FUNCTION__.remove_exception_handler_label, i64 0, i64 0)) #6
  unreachable

if.end3.i:                                        ; preds = %if.end.i
  %25 = load %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  call void @htab_clear_slot(%struct.htab* %25, i8** %call.i) #4
  br label %if.end66

if.end66:                                         ; preds = %if.end3.i, %if.then65, %if.end59
  br i1 %tobool41, label %if.then68, label %if.else70

if.then68:                                        ; preds = %if.end66
  %inner69 = getelementptr inbounds %struct.eh_region* %0, i64 0, i32 1
  br label %if.end72

if.else70:                                        ; preds = %if.end66
  %26 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh71 = getelementptr inbounds %struct.function* %26, i64 0, i32 0
  %27 = load %struct.eh_status** %eh71, align 8, !tbaa !10
  %region_tree = getelementptr inbounds %struct.eh_status* %27, i64 0, i32 0
  br label %if.end72

if.end72:                                         ; preds = %if.else70, %if.then68
  %pp_start.0 = phi %struct.eh_region** [ %inner69, %if.then68 ], [ %region_tree, %if.else70 ]
  br label %for.cond73

for.cond73:                                       ; preds = %for.cond73, %if.end72
  %p.0.in = phi %struct.eh_region** [ %pp_start.0, %if.end72 ], [ %next_peer, %for.cond73 ]
  %p.0 = load %struct.eh_region** %p.0.in, align 8
  %cmp74 = icmp eq %struct.eh_region* %p.0, %region
  %next_peer = getelementptr inbounds %struct.eh_region* %p.0, i64 0, i32 2
  br i1 %cmp74, label %for.end77, label %for.cond73

for.end77:                                        ; preds = %for.cond73
  %next_peer78 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 2
  %28 = load %struct.eh_region** %next_peer78, align 8, !tbaa !21
  store %struct.eh_region* %28, %struct.eh_region** %p.0.in, align 8, !tbaa !5
  %inner79 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 1
  %29 = load %struct.eh_region** %inner79, align 8, !tbaa !20
  %tobool80 = icmp eq %struct.eh_region* %29, null
  br i1 %tobool80, label %if.end92, label %for.cond82.preheader

for.cond82.preheader:                             ; preds = %for.end77
  %next_peer83199 = getelementptr inbounds %struct.eh_region* %29, i64 0, i32 2
  %30 = load %struct.eh_region** %next_peer83199, align 8, !tbaa !21
  %tobool84200 = icmp eq %struct.eh_region* %30, null
  %outer86201 = getelementptr inbounds %struct.eh_region* %29, i64 0, i32 0
  store %struct.eh_region* %0, %struct.eh_region** %outer86201, align 8, !tbaa !22
  br i1 %tobool84200, label %for.end89, label %for.inc87

for.inc87:                                        ; preds = %for.cond82.preheader, %for.inc87
  %31 = phi %struct.eh_region* [ %32, %for.inc87 ], [ %30, %for.cond82.preheader ]
  %next_peer83 = getelementptr inbounds %struct.eh_region* %31, i64 0, i32 2
  %32 = load %struct.eh_region** %next_peer83, align 8, !tbaa !21
  %tobool84 = icmp eq %struct.eh_region* %32, null
  %outer86 = getelementptr inbounds %struct.eh_region* %31, i64 0, i32 0
  store %struct.eh_region* %0, %struct.eh_region** %outer86, align 8, !tbaa !22
  br i1 %tobool84, label %for.end89, label %for.inc87

for.end89:                                        ; preds = %for.inc87, %for.cond82.preheader
  %next_peer83.lcssa = phi %struct.eh_region** [ %next_peer83199, %for.cond82.preheader ], [ %next_peer83, %for.inc87 ]
  %33 = load %struct.eh_region** %pp_start.0, align 8, !tbaa !5
  store %struct.eh_region* %33, %struct.eh_region** %next_peer83.lcssa, align 8, !tbaa !21
  store %struct.eh_region* %29, %struct.eh_region** %pp_start.0, align 8, !tbaa !5
  br label %if.end92

if.end92:                                         ; preds = %for.end77, %for.end89
  %type = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 5
  %34 = load i32* %type, align 4, !tbaa !40
  %cmp93 = icmp eq i32 %34, 3
  br i1 %cmp93, label %for.cond97, label %if.end132

for.cond97:                                       ; preds = %if.end92, %for.inc101
  %try.0.in = phi %struct.eh_region** [ %next_peer102, %for.inc101 ], [ %next_peer78, %if.end92 ]
  %try.0 = load %struct.eh_region** %try.0.in, align 8
  %type98 = getelementptr inbounds %struct.eh_region* %try.0, i64 0, i32 5
  %35 = load i32* %type98, align 4, !tbaa !40
  switch i32 %35, label %if.then106 [
    i32 3, label %for.inc101
    i32 2, label %if.end107
  ]

for.inc101:                                       ; preds = %for.cond97
  %next_peer102 = getelementptr inbounds %struct.eh_region* %try.0, i64 0, i32 2
  br label %for.cond97

if.then106:                                       ; preds = %for.cond97
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 2698, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.remove_eh_handler, i64 0, i64 0)) #6
  unreachable

if.end107:                                        ; preds = %for.cond97
  %next_catch = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6, i32 0, i32 0
  %36 = load %struct.eh_region** %next_catch, align 8, !tbaa !62
  %37 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6, i32 0, i32 1
  %38 = load %struct.eh_region** %37, align 8, !tbaa !61
  %tobool110 = icmp ne %struct.eh_region* %36, null
  br i1 %tobool110, label %if.then111, label %if.else115

if.then111:                                       ; preds = %if.end107
  %39 = getelementptr inbounds %struct.eh_region* %36, i64 0, i32 6, i32 0, i32 1
  store %struct.eh_region* %38, %struct.eh_region** %39, align 8, !tbaa !61
  br label %if.end118

if.else115:                                       ; preds = %if.end107
  %last_catch = getelementptr inbounds %struct.eh_region* %try.0, i64 0, i32 6, i32 0, i32 1
  store %struct.eh_region* %38, %struct.eh_region** %last_catch, align 8, !tbaa !61
  br label %if.end118

if.end118:                                        ; preds = %if.else115, %if.then111
  %tobool119 = icmp eq %struct.eh_region* %38, null
  br i1 %tobool119, label %if.else124, label %if.then120

if.then120:                                       ; preds = %if.end118
  %next_catch123 = getelementptr inbounds %struct.eh_region* %38, i64 0, i32 6, i32 0, i32 0
  store %struct.eh_region* %36, %struct.eh_region** %next_catch123, align 8, !tbaa !62
  br label %if.end132

if.else124:                                       ; preds = %if.end118
  %catch127 = getelementptr inbounds %struct.eh_region* %try.0, i64 0, i32 6, i32 0, i32 0
  store %struct.eh_region* %36, %struct.eh_region** %catch127, align 8, !tbaa !62
  br i1 %tobool110, label %if.end132, label %if.then129

if.then129:                                       ; preds = %if.else124
  call fastcc void @remove_eh_handler(%struct.eh_region* %try.0)
  br label %if.end132

if.end132:                                        ; preds = %if.then120, %if.then129, %if.else124, %if.end92
  %40 = bitcast %struct.eh_region* %region to i8*
  call void @free(i8* %40) #4
  ret void

for.body18.1:                                     ; preds = %if.end33, %for.inc.1
  %indvars.iv.1 = phi i64 [ %indvars.iv.next.1, %for.inc.1 ], [ 0, %if.end33 ]
  %word_.0.1 = phi i64 [ %word_.1.1, %for.inc.1 ], [ %13, %if.end33 ]
  %shl.1 = shl i64 1, %indvars.iv.1
  %and.1 = and i64 %shl.1, %word_.0.1
  %cmp19.1 = icmp eq i64 %and.1, 0
  br i1 %cmp19.1, label %for.inc.1, label %if.then20.1

if.then20.1:                                      ; preds = %for.body18.1
  %neg.1 = xor i64 %shl.1, -1
  %and21.1 = and i64 %word_.0.1, %neg.1
  %41 = load i32* %indx22, align 4, !tbaa !79
  %mul.1 = shl i32 %41, 7
  %42 = add i64 %indvars.iv.1, 64
  %43 = trunc i64 %42 to i32
  %add24.1 = add i32 %43, %mul.1
  %idxprom25.1 = sext i32 %add24.1 to i64
  %44 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh26.1 = getelementptr inbounds %struct.function* %44, i64 0, i32 0
  %45 = load %struct.eh_status** %eh26.1, align 8, !tbaa !10
  %region_array27.1 = getelementptr inbounds %struct.eh_status* %45, i64 0, i32 1
  %46 = load %struct.eh_region*** %region_array27.1, align 8, !tbaa !14
  %arrayidx28.1 = getelementptr inbounds %struct.eh_region** %46, i64 %idxprom25.1
  store %struct.eh_region* %0, %struct.eh_region** %arrayidx28.1, align 8, !tbaa !5
  %cmp29.1 = icmp eq i64 %and21.1, 0
  br i1 %cmp29.1, label %if.end33.1, label %for.inc.1

for.inc.1:                                        ; preds = %if.then20.1, %for.body18.1
  %word_.1.1 = phi i64 [ %and21.1, %if.then20.1 ], [ %word_.0.1, %for.body18.1 ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %47 = trunc i64 %indvars.iv.next.1 to i32
  %cmp17.old.1 = icmp ult i32 %47, 64
  br i1 %cmp17.old.1, label %for.body18.1, label %if.end33.1

if.end33.1:                                       ; preds = %if.then20.1, %for.inc.1, %if.end33
  %next38 = getelementptr inbounds %struct.bitmap_element_def* %ptr_.1206, i64 0, i32 0
  %ptr_.1 = load %struct.bitmap_element_def** %next38, align 8
  %cmp8 = icmp eq %struct.bitmap_element_def* %ptr_.1, null
  br i1 %cmp8, label %if.end40, label %for.cond9.preheader
}

; Function Attrs: nounwind uwtable
define void @for_each_eh_label(void (%struct.rtx_def*)* %callback) #0 {
entry:
  %0 = load %struct.htab** @exception_handler_label_map, align 8, !tbaa !5
  %1 = bitcast void (%struct.rtx_def*)* %callback to i8*
  tail call void @htab_traverse(%struct.htab* %0, i32 (i8**, i8*)* @for_each_eh_label_1, i8* %1) #4
  ret void
}

declare void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @for_each_eh_label_1(i8** nocapture readonly %pentry, i8* nocapture %data) #0 {
entry:
  %0 = load i8** %pentry, align 8
  %1 = bitcast i8* %data to void (%struct.rtx_def*)*
  %label = bitcast i8* %0 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %label, align 8, !tbaa !69
  tail call void %1(%struct.rtx_def* %2) #4
  ret i32 1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @reachable_handlers(%struct.rtx_def* %insn) #0 {
entry:
  %info = alloca %struct.reachable_info, align 8
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 33
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load1 = load i32* %2, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 53
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx8 to i32*
  %3 = load i32* %rtint, align 4, !tbaa !1
  br label %if.end22

if.else:                                          ; preds = %land.lhs.true, %entry
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %insn, i32 23, %struct.rtx_def* null) #4
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx11, align 8, !tbaa !5
  %rtwint = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0, i32 0
  %5 = load i64* %rtwint, align 8, !tbaa !64
  %cmp14 = icmp slt i64 %5, 1
  br i1 %cmp14, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %conv = trunc i64 %5 to i32
  %bf.load24.pre = load i32* %0, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end, %if.then
  %bf.load24 = phi i32 [ %bf.load, %if.then ], [ %bf.load24.pre, %if.end ]
  %region_number.0 = phi i32 [ %3, %if.then ], [ %conv, %if.end ]
  %6 = bitcast %struct.reachable_info* %info to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 24, i32 8, i1 false)
  %idxprom = sext i32 %region_number.0 to i64
  %7 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %7, i64 0, i32 0
  %8 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %region_array = getelementptr inbounds %struct.eh_status* %8, i64 0, i32 1
  %9 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %arrayidx23 = getelementptr inbounds %struct.eh_region** %9, i64 %idxprom
  %10 = load %struct.eh_region** %arrayidx23, align 8, !tbaa !5
  %bf.clear25 = and i32 %bf.load24, 65535
  %cmp26 = icmp eq i32 %bf.clear25, 33
  br i1 %cmp26, label %land.lhs.true28, label %if.else41

land.lhs.true28:                                  ; preds = %if.end22
  %arrayidx30 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx31, align 8, !tbaa !5
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load32 = load i32* %12, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 53
  br i1 %cmp34, label %if.then36, label %if.else41

if.then36:                                        ; preds = %land.lhs.true28
  %cmp37 = icmp eq %struct.eh_region* %10, null
  br i1 %cmp37, label %return, label %for.cond.preheader

if.else41:                                        ; preds = %land.lhs.true28, %if.end22
  %type = getelementptr inbounds %struct.eh_region* %10, i64 0, i32 5
  %13 = load i32* %type, align 4, !tbaa !40
  %cmp42 = icmp eq i32 %13, 6
  br i1 %cmp42, label %if.then44, label %for.body.lr.ph

if.then44:                                        ; preds = %if.else41
  %u = getelementptr inbounds %struct.eh_region* %10, i64 0, i32 6
  %type45 = bitcast %union.anon* %u to %union.tree_node**
  %14 = load %union.tree_node** %type45, align 8, !tbaa !41
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then36, %if.then44
  %type_thrown.0.ph = phi %union.tree_node* [ %14, %if.then44 ], [ null, %if.then36 ]
  %region.0.ph.in = getelementptr inbounds %struct.eh_region* %10, i64 0, i32 0
  %region.0.ph = load %struct.eh_region** %region.0.ph.in, align 8
  %tobool4970 = icmp eq %struct.eh_region* %region.0.ph, null
  br i1 %tobool4970, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.else41, %for.cond.preheader
  %type_thrown.0.ph75 = phi %union.tree_node* [ %type_thrown.0.ph, %for.cond.preheader ], [ null, %if.else41 ]
  %region.0.ph74 = phi %struct.eh_region* [ %region.0.ph, %for.cond.preheader ], [ %10, %if.else41 ]
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %region.071 = phi %struct.eh_region* [ %region.0.ph74, %for.body.lr.ph ], [ %15, %for.inc ]
  %call50 = call fastcc i32 @reachable_next_level(%struct.eh_region* %region.071, %union.tree_node* %type_thrown.0.ph75, %struct.reachable_info* %info)
  %cmp51 = icmp ugt i32 %call50, 1
  br i1 %cmp51, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body
  %outer55 = getelementptr inbounds %struct.eh_region* %region.071, i64 0, i32 0
  %15 = load %struct.eh_region** %outer55, align 8, !tbaa !22
  %tobool49 = icmp eq %struct.eh_region* %15, null
  br i1 %tobool49, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %for.inc, %for.cond.preheader
  %handlers = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %16 = load %struct.rtx_def** %handlers, align 8, !tbaa !81
  br label %return

return:                                           ; preds = %if.then36, %lor.lhs.false, %if.else, %for.end
  %retval.0 = phi %struct.rtx_def* [ %16, %for.end ], [ null, %if.else ], [ null, %lor.lhs.false ], [ null, %if.then36 ]
  ret %struct.rtx_def* %retval.0
}

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define internal fastcc i32 @reachable_next_level(%struct.eh_region* nocapture readonly %region, %union.tree_node* %type_thrown, %struct.reachable_info* %info) #0 {
entry:
  %type = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 5
  %0 = load i32* %type, align 4, !tbaa !40
  switch i32 %0, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %for.cond.preheader
    i32 4, label %sw.bb53
    i32 3, label %return
    i32 5, label %sw.bb80
  ]

for.cond.preheader:                               ; preds = %entry
  %c.0.in298 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6, i32 0, i32 0
  %c.0299 = load %struct.eh_region** %c.0.in298, align 8
  %tobool300 = icmp eq %struct.eh_region* %c.0299, null
  br i1 %tobool300, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %tobool4 = icmp eq %union.tree_node* %type_thrown, null
  %tobool22 = icmp eq %struct.reachable_info* %info, null
  %handlers7.i183 = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %landing_pad.i179 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 8
  %types_caught = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 0
  br label %for.body

sw.bb:                                            ; preds = %entry
  %tobool.i = icmp eq %struct.reachable_info* %info, null
  br i1 %tobool.i, label %return, label %if.end.i

if.end.i:                                         ; preds = %sw.bb
  %1 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %1, i64 0, i32 0
  %2 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %built_landing_pads.i = getelementptr inbounds %struct.eh_status* %2, i64 0, i32 7
  %3 = load i32* %built_landing_pads.i, align 4, !tbaa !68
  %tobool1.i = icmp eq i32 %3, 0
  br i1 %tobool1.i, label %if.else.i, label %if.then2.i

if.then2.i:                                       ; preds = %if.end.i
  %handlers.i = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %4 = load %struct.rtx_def** %handlers.i, align 8, !tbaa !81
  %tobool3.i = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool3.i, label %if.then4.i, label %return

if.then4.i:                                       ; preds = %if.then2.i
  %landing_pad.i = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 8
  %5 = load %struct.rtx_def** %landing_pad.i, align 8, !tbaa !51
  %call.i = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %5, %struct.rtx_def* null) #4
  store %struct.rtx_def* %call.i, %struct.rtx_def** %handlers.i, align 8, !tbaa !81
  br label %return

if.else.i:                                        ; preds = %if.end.i
  %label.i = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 7
  %6 = load %struct.rtx_def** %label.i, align 8, !tbaa !49
  %handlers7.i = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %7 = load %struct.rtx_def** %handlers7.i, align 8, !tbaa !81
  %call8.i = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %6, %struct.rtx_def* %7) #4
  store %struct.rtx_def* %call8.i, %struct.rtx_def** %handlers7.i, align 8, !tbaa !81
  br label %return

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %c.0302 = phi %struct.eh_region* [ %c.0299, %for.body.lr.ph ], [ %c.0, %for.cond.backedge ]
  %ret.0301 = phi i32 [ 0, %for.body.lr.ph ], [ %ret.0.be, %for.cond.backedge ]
  %type_list = getelementptr inbounds %struct.eh_region* %c.0302, i64 0, i32 6, i32 0, i32 2
  %8 = load %struct.eh_region** %type_list, align 8
  %cmp = icmp eq %struct.eh_region* %8, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br i1 %tobool22, label %return, label %if.end.i140

if.end.i140:                                      ; preds = %if.then
  %9 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i137 = getelementptr inbounds %struct.function* %9, i64 0, i32 0
  %10 = load %struct.eh_status** %eh.i137, align 8, !tbaa !10
  %built_landing_pads.i138 = getelementptr inbounds %struct.eh_status* %10, i64 0, i32 7
  %11 = load i32* %built_landing_pads.i138, align 4, !tbaa !68
  %tobool1.i139 = icmp eq i32 %11, 0
  br i1 %tobool1.i139, label %if.else.i150, label %if.then2.i143

if.then2.i143:                                    ; preds = %if.end.i140
  %12 = load %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  %tobool3.i142 = icmp eq %struct.rtx_def* %12, null
  br i1 %tobool3.i142, label %if.then4.i146, label %return

if.then4.i146:                                    ; preds = %if.then2.i143
  %13 = load %struct.rtx_def** %landing_pad.i179, align 8, !tbaa !51
  %call.i145 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %13, %struct.rtx_def* null) #4
  store %struct.rtx_def* %call.i145, %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  br label %return

if.else.i150:                                     ; preds = %if.end.i140
  %label.i147 = getelementptr inbounds %struct.eh_region* %c.0302, i64 0, i32 7
  %14 = load %struct.rtx_def** %label.i147, align 8, !tbaa !49
  %15 = load %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  %call8.i149 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %14, %struct.rtx_def* %15) #4
  store %struct.rtx_def* %call8.i149, %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  br label %return

if.end:                                           ; preds = %for.body
  br i1 %tobool4, label %if.end21, label %for.body11.preheader

for.body11.preheader:                             ; preds = %if.end
  %16 = bitcast %struct.eh_region* %8 to %union.tree_node*
  br label %for.body11

for.body11:                                       ; preds = %for.body11.preheader, %for.inc
  %tp_node.0290 = phi %union.tree_node* [ %27, %for.inc ], [ %16, %for.body11.preheader ]
  %value = getelementptr inbounds %union.tree_node* %tp_node.0290, i64 0, i32 0, i32 2
  %17 = bitcast i32* %value to %union.tree_node**
  %18 = load %union.tree_node** %17, align 8, !tbaa !59
  %cmp13 = icmp eq %union.tree_node* %18, %type_thrown
  br i1 %cmp13, label %if.then16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body11
  %19 = load i32 (%union.tree_node*, %union.tree_node*)** @lang_eh_type_covers, align 8, !tbaa !5
  %tobool14 = icmp eq i32 (%union.tree_node*, %union.tree_node*)* %19, null
  br i1 %tobool14, label %for.inc, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call = tail call i32 %19(%union.tree_node* %18, %union.tree_node* %type_thrown) #4
  %tobool15 = icmp eq i32 %call, 0
  br i1 %tobool15, label %for.inc, label %if.then16

if.then16:                                        ; preds = %land.lhs.true, %for.body11
  br i1 %tobool22, label %return, label %if.end.i156

if.end.i156:                                      ; preds = %if.then16
  %20 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i153 = getelementptr inbounds %struct.function* %20, i64 0, i32 0
  %21 = load %struct.eh_status** %eh.i153, align 8, !tbaa !10
  %built_landing_pads.i154 = getelementptr inbounds %struct.eh_status* %21, i64 0, i32 7
  %22 = load i32* %built_landing_pads.i154, align 4, !tbaa !68
  %tobool1.i155 = icmp eq i32 %22, 0
  br i1 %tobool1.i155, label %if.else.i166, label %if.then2.i159

if.then2.i159:                                    ; preds = %if.end.i156
  %23 = load %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  %tobool3.i158 = icmp eq %struct.rtx_def* %23, null
  br i1 %tobool3.i158, label %if.then4.i162, label %return

if.then4.i162:                                    ; preds = %if.then2.i159
  %24 = load %struct.rtx_def** %landing_pad.i179, align 8, !tbaa !51
  %call.i161 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %24, %struct.rtx_def* null) #4
  store %struct.rtx_def* %call.i161, %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  br label %return

if.else.i166:                                     ; preds = %if.end.i156
  %label.i163 = getelementptr inbounds %struct.eh_region* %c.0302, i64 0, i32 7
  %25 = load %struct.rtx_def** %label.i163, align 8, !tbaa !49
  %26 = load %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  %call8.i165 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %25, %struct.rtx_def* %26) #4
  store %struct.rtx_def* %call8.i165, %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  br label %return

for.inc:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %chain = getelementptr inbounds %union.tree_node* %tp_node.0290, i64 0, i32 0, i32 0, i32 0
  %27 = load %union.tree_node** %chain, align 8, !tbaa !60
  %tobool10 = icmp eq %union.tree_node* %27, null
  br i1 %tobool10, label %for.end, label %for.body11

for.end:                                          ; preds = %for.inc
  %28 = load i32 (%union.tree_node*, %union.tree_node*)** @lang_eh_type_covers, align 8, !tbaa !5
  %tobool18 = icmp eq i32 (%union.tree_node*, %union.tree_node*)* %28, null
  br i1 %tobool18, label %if.end21, label %return

if.end21:                                         ; preds = %for.end, %if.end
  br i1 %tobool22, label %for.cond.backedge, label %if.else

for.cond.backedge:                                ; preds = %if.else, %if.end21, %if.then2.i178, %if.then4.i181, %if.else.i185, %for.end44
  %ret.0.be = phi i32 [ %ret.0.mux, %for.end44 ], [ 1, %if.end21 ], [ 1, %if.then2.i178 ], [ 1, %if.then4.i181 ], [ 1, %if.else.i185 ], [ %ret.0301, %if.else ]
  %c.0.in = getelementptr inbounds %struct.eh_region* %c.0302, i64 0, i32 6, i32 0, i32 0
  %c.0 = load %struct.eh_region** %c.0.in, align 8
  %tobool = icmp eq %struct.eh_region* %c.0, null
  br i1 %tobool, label %return, label %for.body

if.else:                                          ; preds = %if.end21
  %29 = load %struct.eh_region** %type_list, align 8
  %tobool29295 = icmp eq %struct.eh_region* %29, null
  br i1 %tobool29295, label %for.cond.backedge, label %for.body30.lr.ph

for.body30.lr.ph:                                 ; preds = %if.else
  %30 = bitcast %struct.eh_region* %29 to %union.tree_node*
  br label %for.body30

for.body30:                                       ; preds = %for.body30.lr.ph, %for.inc41
  %maybe_reachable.0297 = phi i8 [ 0, %for.body30.lr.ph ], [ %maybe_reachable.1, %for.inc41 ]
  %tp_node24.0296 = phi %union.tree_node* [ %30, %for.body30.lr.ph ], [ %44, %for.inc41 ]
  %value33 = getelementptr inbounds %union.tree_node* %tp_node24.0296, i64 0, i32 0, i32 2
  %31 = bitcast i32* %value33 to %union.tree_node**
  %32 = load %union.tree_node** %31, align 8, !tbaa !59
  %33 = load %union.tree_node** %types_caught, align 8, !tbaa !83
  %34 = load i32 (%union.tree_node*, %union.tree_node*)** @lang_eh_type_covers, align 8, !tbaa !5
  %tobool.i168 = icmp eq i32 (%union.tree_node*, %union.tree_node*)* %34, null
  %tobool124.i = icmp eq %union.tree_node* %33, null
  br i1 %tobool.i168, label %for.cond.preheader.i, label %for.cond3.preheader.i

for.cond3.preheader.i:                            ; preds = %for.body30
  br i1 %tobool124.i, label %if.then36, label %for.body5.i.preheader

for.body5.i.preheader:                            ; preds = %for.cond3.preheader.i
  %value7.i291 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 2
  %35 = bitcast i32* %value7.i291 to %union.tree_node**
  %36 = load %union.tree_node** %35, align 8, !tbaa !59
  %call.i170292 = tail call i32 %34(%union.tree_node* %36, %union.tree_node* %32) #4
  %tobool8.i293 = icmp eq i32 %call.i170292, 0
  br i1 %tobool8.i293, label %for.inc11.i, label %for.inc41

for.cond.preheader.i:                             ; preds = %for.body30
  br i1 %tobool124.i, label %if.then36, label %for.body.i

for.body.i:                                       ; preds = %for.cond.preheader.i, %for.inc.i
  %t.025.i = phi %union.tree_node* [ %39, %for.inc.i ], [ %33, %for.cond.preheader.i ]
  %value.i = getelementptr inbounds %union.tree_node* %t.025.i, i64 0, i32 0, i32 2
  %37 = bitcast i32* %value.i to %union.tree_node**
  %38 = load %union.tree_node** %37, align 8, !tbaa !59
  %cmp.i = icmp eq %union.tree_node* %38, %32
  br i1 %cmp.i, label %for.inc41, label %for.inc.i

for.inc.i:                                        ; preds = %for.body.i
  %chain.i = getelementptr inbounds %union.tree_node* %t.025.i, i64 0, i32 0, i32 0, i32 0
  %39 = load %union.tree_node** %chain.i, align 8, !tbaa !60
  %tobool1.i169 = icmp eq %union.tree_node* %39, null
  br i1 %tobool1.i169, label %if.then36, label %for.body.i

for.inc11.i:                                      ; preds = %for.body5.i.preheader, %for.inc11.for.body5_crit_edge.i
  %t.128.i294 = phi %union.tree_node* [ %40, %for.inc11.for.body5_crit_edge.i ], [ %33, %for.body5.i.preheader ]
  %chain13.i = getelementptr inbounds %union.tree_node* %t.128.i294, i64 0, i32 0, i32 0, i32 0
  %40 = load %union.tree_node** %chain13.i, align 8, !tbaa !60
  %tobool4.i = icmp eq %union.tree_node* %40, null
  br i1 %tobool4.i, label %if.then36.loopexit283, label %for.inc11.for.body5_crit_edge.i

for.inc11.for.body5_crit_edge.i:                  ; preds = %for.inc11.i
  %.pre.i = load i32 (%union.tree_node*, %union.tree_node*)** @lang_eh_type_covers, align 8, !tbaa !5
  %value7.i = getelementptr inbounds %union.tree_node* %40, i64 0, i32 0, i32 2
  %41 = bitcast i32* %value7.i to %union.tree_node**
  %42 = load %union.tree_node** %41, align 8, !tbaa !59
  %call.i170 = tail call i32 %.pre.i(%union.tree_node* %42, %union.tree_node* %32) #4
  %tobool8.i = icmp eq i32 %call.i170, 0
  br i1 %tobool8.i, label %for.inc11.i, label %for.inc41

if.then36.loopexit283:                            ; preds = %for.inc11.i
  %.pre = load %union.tree_node** %types_caught, align 8, !tbaa !83
  br label %if.then36

if.then36:                                        ; preds = %for.inc.i, %if.then36.loopexit283, %for.cond.preheader.i, %for.cond3.preheader.i
  %43 = phi %union.tree_node* [ %.pre, %if.then36.loopexit283 ], [ null, %for.cond.preheader.i ], [ null, %for.cond3.preheader.i ], [ %33, %for.inc.i ]
  %call38 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %32, %union.tree_node* %43) #4
  store %union.tree_node* %call38, %union.tree_node** %types_caught, align 8, !tbaa !83
  br label %for.inc41

for.inc41:                                        ; preds = %for.inc11.for.body5_crit_edge.i, %for.body.i, %for.body5.i.preheader, %if.then36
  %maybe_reachable.1 = phi i8 [ 1, %if.then36 ], [ %maybe_reachable.0297, %for.body5.i.preheader ], [ %maybe_reachable.0297, %for.body.i ], [ %maybe_reachable.0297, %for.inc11.for.body5_crit_edge.i ]
  %chain43 = getelementptr inbounds %union.tree_node* %tp_node24.0296, i64 0, i32 0, i32 0, i32 0
  %44 = load %union.tree_node** %chain43, align 8, !tbaa !60
  %tobool29 = icmp eq %union.tree_node* %44, null
  br i1 %tobool29, label %for.end44, label %for.body30

for.end44:                                        ; preds = %for.inc41
  %45 = and i8 %maybe_reachable.1, 1
  %tobool45 = icmp eq i8 %45, 0
  %ret.0.mux = select i1 %tobool45, i32 %ret.0301, i32 1
  br i1 %tobool45, label %for.cond.backedge, label %if.end.i175

if.end.i175:                                      ; preds = %for.end44
  %46 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i172 = getelementptr inbounds %struct.function* %46, i64 0, i32 0
  %47 = load %struct.eh_status** %eh.i172, align 8, !tbaa !10
  %built_landing_pads.i173 = getelementptr inbounds %struct.eh_status* %47, i64 0, i32 7
  %48 = load i32* %built_landing_pads.i173, align 4, !tbaa !68
  %tobool1.i174 = icmp eq i32 %48, 0
  br i1 %tobool1.i174, label %if.else.i185, label %if.then2.i178

if.then2.i178:                                    ; preds = %if.end.i175
  %49 = load %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  %tobool3.i177 = icmp eq %struct.rtx_def* %49, null
  br i1 %tobool3.i177, label %if.then4.i181, label %for.cond.backedge

if.then4.i181:                                    ; preds = %if.then2.i178
  %50 = load %struct.rtx_def** %landing_pad.i179, align 8, !tbaa !51
  %call.i180 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %50, %struct.rtx_def* null) #4
  store %struct.rtx_def* %call.i180, %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  br label %for.cond.backedge

if.else.i185:                                     ; preds = %if.end.i175
  %label.i182 = getelementptr inbounds %struct.eh_region* %c.0302, i64 0, i32 7
  %51 = load %struct.rtx_def** %label.i182, align 8, !tbaa !49
  %52 = load %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  %call8.i184 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %51, %struct.rtx_def* %52) #4
  store %struct.rtx_def* %call8.i184, %struct.rtx_def** %handlers7.i183, align 8, !tbaa !81
  br label %for.cond.backedge

sw.bb53:                                          ; preds = %entry
  %u54 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 6
  %type_list55 = bitcast %union.anon* %u54 to %union.tree_node**
  %53 = load %union.tree_node** %type_list55, align 8, !tbaa !45
  %cmp56 = icmp eq %union.tree_node* %53, null
  %tobool.i187 = icmp eq %struct.reachable_info* %info, null
  br i1 %cmp56, label %if.then57, label %if.end58

if.then57:                                        ; preds = %sw.bb53
  br i1 %tobool.i187, label %return, label %if.end.i191

if.end.i191:                                      ; preds = %if.then57
  %54 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i188 = getelementptr inbounds %struct.function* %54, i64 0, i32 0
  %55 = load %struct.eh_status** %eh.i188, align 8, !tbaa !10
  %built_landing_pads.i189 = getelementptr inbounds %struct.eh_status* %55, i64 0, i32 7
  %56 = load i32* %built_landing_pads.i189, align 4, !tbaa !68
  %tobool1.i190 = icmp eq i32 %56, 0
  br i1 %tobool1.i190, label %if.else.i201, label %if.then2.i194

if.then2.i194:                                    ; preds = %if.end.i191
  %handlers.i192 = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %57 = load %struct.rtx_def** %handlers.i192, align 8, !tbaa !81
  %tobool3.i193 = icmp eq %struct.rtx_def* %57, null
  br i1 %tobool3.i193, label %if.then4.i197, label %return

if.then4.i197:                                    ; preds = %if.then2.i194
  %landing_pad.i195 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 8
  %58 = load %struct.rtx_def** %landing_pad.i195, align 8, !tbaa !51
  %call.i196 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %58, %struct.rtx_def* null) #4
  store %struct.rtx_def* %call.i196, %struct.rtx_def** %handlers.i192, align 8, !tbaa !81
  br label %return

if.else.i201:                                     ; preds = %if.end.i191
  %label.i198 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 7
  %59 = load %struct.rtx_def** %label.i198, align 8, !tbaa !49
  %handlers7.i199 = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %60 = load %struct.rtx_def** %handlers7.i199, align 8, !tbaa !81
  %call8.i200 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %59, %struct.rtx_def* %60) #4
  store %struct.rtx_def* %call8.i200, %struct.rtx_def** %handlers7.i199, align 8, !tbaa !81
  br label %return

if.end58:                                         ; preds = %sw.bb53
  br i1 %tobool.i187, label %if.end66, label %if.then60

if.then60:                                        ; preds = %if.end58
  %types_allowed = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 1
  %61 = load %union.tree_node** %types_allowed, align 8, !tbaa !84
  %call64 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %53, %union.tree_node* %61) #4
  store %union.tree_node* %call64, %union.tree_node** %types_allowed, align 8, !tbaa !84
  br label %if.end66

if.end66:                                         ; preds = %if.end58, %if.then60
  %tobool67 = icmp ne %union.tree_node* %type_thrown, null
  %62 = load i32 (%union.tree_node*, %union.tree_node*)** @lang_eh_type_covers, align 8
  %tobool69 = icmp ne i32 (%union.tree_node*, %union.tree_node*)* %62, null
  %or.cond = and i1 %tobool67, %tobool69
  br i1 %or.cond, label %for.cond3.preheader.i205, label %if.end78

for.cond3.preheader.i205:                         ; preds = %if.end66
  %63 = load %union.tree_node** %type_list55, align 8, !tbaa !45
  %tobool124.i204 = icmp eq %union.tree_node* %63, null
  br i1 %tobool124.i204, label %if.else77, label %for.body5.i218.preheader

for.body5.i218.preheader:                         ; preds = %for.cond3.preheader.i205
  %value7.i215305 = getelementptr inbounds %union.tree_node* %63, i64 0, i32 0, i32 2
  %64 = bitcast i32* %value7.i215305 to %union.tree_node**
  %65 = load %union.tree_node** %64, align 8, !tbaa !59
  %call.i216306 = tail call i32 %62(%union.tree_node* %65, %union.tree_node* %type_thrown) #4
  %tobool8.i217307 = icmp eq i32 %call.i216306, 0
  br i1 %tobool8.i217307, label %for.inc11.i221, label %return

for.inc11.i221:                                   ; preds = %for.body5.i218.preheader, %for.inc11.for.body5_crit_edge.i223
  %t.128.i214308 = phi %union.tree_node* [ %66, %for.inc11.for.body5_crit_edge.i223 ], [ %63, %for.body5.i218.preheader ]
  %chain13.i219 = getelementptr inbounds %union.tree_node* %t.128.i214308, i64 0, i32 0, i32 0, i32 0
  %66 = load %union.tree_node** %chain13.i219, align 8, !tbaa !60
  %tobool4.i220 = icmp eq %union.tree_node* %66, null
  br i1 %tobool4.i220, label %if.else77, label %for.inc11.for.body5_crit_edge.i223

for.inc11.for.body5_crit_edge.i223:               ; preds = %for.inc11.i221
  %.pre.i222 = load i32 (%union.tree_node*, %union.tree_node*)** @lang_eh_type_covers, align 8, !tbaa !5
  %value7.i215 = getelementptr inbounds %union.tree_node* %66, i64 0, i32 0, i32 2
  %67 = bitcast i32* %value7.i215 to %union.tree_node**
  %68 = load %union.tree_node** %67, align 8, !tbaa !59
  %call.i216 = tail call i32 %.pre.i222(%union.tree_node* %68, %union.tree_node* %type_thrown) #4
  %tobool8.i217 = icmp eq i32 %call.i216, 0
  br i1 %tobool8.i217, label %for.inc11.i221, label %return

if.else77:                                        ; preds = %for.inc11.i221, %for.cond3.preheader.i205
  br i1 %tobool.i187, label %return, label %if.end.i230

if.end.i230:                                      ; preds = %if.else77
  %69 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i227 = getelementptr inbounds %struct.function* %69, i64 0, i32 0
  %70 = load %struct.eh_status** %eh.i227, align 8, !tbaa !10
  %built_landing_pads.i228 = getelementptr inbounds %struct.eh_status* %70, i64 0, i32 7
  %71 = load i32* %built_landing_pads.i228, align 4, !tbaa !68
  %tobool1.i229 = icmp eq i32 %71, 0
  br i1 %tobool1.i229, label %if.else.i240, label %if.then2.i233

if.then2.i233:                                    ; preds = %if.end.i230
  %handlers.i231 = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %72 = load %struct.rtx_def** %handlers.i231, align 8, !tbaa !81
  %tobool3.i232 = icmp eq %struct.rtx_def* %72, null
  br i1 %tobool3.i232, label %if.then4.i236, label %return

if.then4.i236:                                    ; preds = %if.then2.i233
  %landing_pad.i234 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 8
  %73 = load %struct.rtx_def** %landing_pad.i234, align 8, !tbaa !51
  %call.i235 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %73, %struct.rtx_def* null) #4
  store %struct.rtx_def* %call.i235, %struct.rtx_def** %handlers.i231, align 8, !tbaa !81
  br label %return

if.else.i240:                                     ; preds = %if.end.i230
  %label.i237 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 7
  %74 = load %struct.rtx_def** %label.i237, align 8, !tbaa !49
  %handlers7.i238 = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %75 = load %struct.rtx_def** %handlers7.i238, align 8, !tbaa !81
  %call8.i239 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %74, %struct.rtx_def* %75) #4
  store %struct.rtx_def* %call8.i239, %struct.rtx_def** %handlers7.i238, align 8, !tbaa !81
  br label %return

if.end78:                                         ; preds = %if.end66
  br i1 %tobool.i187, label %return, label %if.end.i246

if.end.i246:                                      ; preds = %if.end78
  %76 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i243 = getelementptr inbounds %struct.function* %76, i64 0, i32 0
  %77 = load %struct.eh_status** %eh.i243, align 8, !tbaa !10
  %built_landing_pads.i244 = getelementptr inbounds %struct.eh_status* %77, i64 0, i32 7
  %78 = load i32* %built_landing_pads.i244, align 4, !tbaa !68
  %tobool1.i245 = icmp eq i32 %78, 0
  br i1 %tobool1.i245, label %if.else.i256, label %if.then2.i249

if.then2.i249:                                    ; preds = %if.end.i246
  %handlers.i247 = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %79 = load %struct.rtx_def** %handlers.i247, align 8, !tbaa !81
  %tobool3.i248 = icmp eq %struct.rtx_def* %79, null
  br i1 %tobool3.i248, label %if.then4.i252, label %return

if.then4.i252:                                    ; preds = %if.then2.i249
  %landing_pad.i250 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 8
  %80 = load %struct.rtx_def** %landing_pad.i250, align 8, !tbaa !51
  %call.i251 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %80, %struct.rtx_def* null) #4
  store %struct.rtx_def* %call.i251, %struct.rtx_def** %handlers.i247, align 8, !tbaa !81
  br label %return

if.else.i256:                                     ; preds = %if.end.i246
  %label.i253 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 7
  %81 = load %struct.rtx_def** %label.i253, align 8, !tbaa !49
  %handlers7.i254 = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %82 = load %struct.rtx_def** %handlers7.i254, align 8, !tbaa !81
  %call8.i255 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %81, %struct.rtx_def* %82) #4
  store %struct.rtx_def* %call8.i255, %struct.rtx_def** %handlers7.i254, align 8, !tbaa !81
  br label %return

sw.bb80:                                          ; preds = %entry
  %tobool81 = icmp eq %struct.reachable_info* %info, null
  br i1 %tobool81, label %return, label %land.lhs.true82

land.lhs.true82:                                  ; preds = %sw.bb80
  %handlers = getelementptr inbounds %struct.reachable_info* %info, i64 0, i32 2
  %83 = load %struct.rtx_def** %handlers, align 8, !tbaa !81
  %tobool83 = icmp eq %struct.rtx_def* %83, null
  br i1 %tobool83, label %return, label %if.end.i262

if.end.i262:                                      ; preds = %land.lhs.true82
  %84 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i259 = getelementptr inbounds %struct.function* %84, i64 0, i32 0
  %85 = load %struct.eh_status** %eh.i259, align 8, !tbaa !10
  %built_landing_pads.i260 = getelementptr inbounds %struct.eh_status* %85, i64 0, i32 7
  %86 = load i32* %built_landing_pads.i260, align 4, !tbaa !68
  %tobool1.i261 = icmp eq i32 %86, 0
  br i1 %tobool1.i261, label %if.else.i272, label %return

if.else.i272:                                     ; preds = %if.end.i262
  %label.i269 = getelementptr inbounds %struct.eh_region* %region, i64 0, i32 7
  %87 = load %struct.rtx_def** %label.i269, align 8, !tbaa !49
  %call8.i271 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %87, %struct.rtx_def* %83) #4
  store %struct.rtx_def* %call8.i271, %struct.rtx_def** %handlers, align 8, !tbaa !81
  br label %return

sw.epilog:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 3010, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.reachable_next_level, i64 0, i64 0)) #6
  unreachable

return:                                           ; preds = %for.inc11.for.body5_crit_edge.i223, %for.end, %for.cond.backedge, %for.body5.i218.preheader, %for.cond.preheader, %if.else.i272, %if.end.i262, %if.else.i256, %if.then4.i252, %if.then2.i249, %if.end78, %if.else.i240, %if.then4.i236, %if.then2.i233, %if.else77, %if.else.i201, %if.then4.i197, %if.then2.i194, %if.then57, %if.else.i166, %if.then4.i162, %if.then2.i159, %if.then16, %if.else.i150, %if.then4.i146, %if.then2.i143, %if.then, %if.else.i, %if.then4.i, %if.then2.i, %sw.bb, %sw.bb80, %land.lhs.true82, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 3, %land.lhs.true82 ], [ 3, %sw.bb80 ], [ 1, %sw.bb ], [ 1, %if.then2.i ], [ 1, %if.then4.i ], [ 1, %if.else.i ], [ 2, %if.then ], [ 2, %if.then2.i143 ], [ 2, %if.then4.i146 ], [ 2, %if.else.i150 ], [ 2, %if.then16 ], [ 2, %if.then2.i159 ], [ 2, %if.then4.i162 ], [ 2, %if.else.i166 ], [ 2, %if.then57 ], [ 2, %if.then2.i194 ], [ 2, %if.then4.i197 ], [ 2, %if.else.i201 ], [ 2, %if.else77 ], [ 2, %if.then2.i233 ], [ 2, %if.then4.i236 ], [ 2, %if.else.i240 ], [ 1, %if.end78 ], [ 1, %if.then2.i249 ], [ 1, %if.then4.i252 ], [ 1, %if.else.i256 ], [ 2, %if.end.i262 ], [ 2, %if.else.i272 ], [ 0, %for.cond.preheader ], [ 0, %for.body5.i218.preheader ], [ 0, %for.end ], [ %ret.0.be, %for.cond.backedge ], [ 0, %for.inc11.for.body5_crit_edge.i223 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define zeroext i1 @can_throw_internal(%struct.rtx_def* %insn) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom108 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom108
  %1 = load i8* %arrayidx, align 1, !tbaa !56
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %cmp4 = icmp eq i32 %bf.clear, 32
  br i1 %cmp4, label %land.lhs.true, label %if.end18

land.lhs.true:                                    ; preds = %if.end
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load7 = load i32* %3, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 24
  br i1 %cmp9, label %if.then11, label %if.end18

if.then11:                                        ; preds = %land.lhs.true
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtvec_def**
  %4 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx17 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 1, i64 0
  %5 = load %struct.rtx_def** %arrayidx17, align 8, !tbaa !5
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load19.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  %bf.load19 = phi i32 [ %bf.load19.pre, %if.then11 ], [ %bf.load, %land.lhs.true ], [ %bf.load, %if.end ]
  %insn.addr.0 = phi %struct.rtx_def* [ %5, %if.then11 ], [ %insn, %land.lhs.true ], [ %insn, %if.end ]
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 34
  br i1 %cmp21, label %land.lhs.true23, label %if.end50

land.lhs.true23:                                  ; preds = %if.end18
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 1, i64 3
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx26, align 8, !tbaa !5
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load27 = load i32* %7, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp eq i32 %bf.clear28, 141
  br i1 %cmp29, label %for.body, label %if.end50

for.body:                                         ; preds = %land.lhs.true23, %for.inc48.for.body_crit_edge
  %8 = phi %struct.rtx_def* [ %.pre, %for.inc48.for.body_crit_edge ], [ %6, %land.lhs.true23 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc48.for.body_crit_edge ], [ 0, %land.lhs.true23 ]
  %arrayidx39 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 %indvars.iv
  %sub.0.in111 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %sub.0112 = load %struct.rtx_def** %sub.0.in111, align 8
  %tobool113 = icmp eq %struct.rtx_def* %sub.0112, null
  br i1 %tobool113, label %for.inc48, label %for.body42

for.cond41:                                       ; preds = %for.body42
  %arrayidx46 = getelementptr inbounds %struct.rtx_def* %sub.0114, i64 0, i32 1, i64 2
  %sub.0.in = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %sub.0 = load %struct.rtx_def** %sub.0.in, align 8
  %tobool = icmp eq %struct.rtx_def* %sub.0, null
  br i1 %tobool, label %for.inc48, label %for.body42

for.body42:                                       ; preds = %for.body, %for.cond41
  %sub.0114 = phi %struct.rtx_def* [ %sub.0, %for.cond41 ], [ %sub.0112, %for.body ]
  %call = tail call zeroext i1 @can_throw_internal(%struct.rtx_def* %sub.0114)
  br i1 %call, label %return, label %for.cond41

for.inc48:                                        ; preds = %for.cond41, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %9 = trunc i64 %indvars.iv.next to i32
  %cmp32 = icmp slt i32 %9, 3
  br i1 %cmp32, label %for.inc48.for.body_crit_edge, label %return

for.inc48.for.body_crit_edge:                     ; preds = %for.inc48
  %.pre = load %struct.rtx_def** %rtx26, align 8, !tbaa !5
  br label %for.body

if.end50:                                         ; preds = %land.lhs.true23, %if.end18
  %call51 = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %insn.addr.0, i32 23, %struct.rtx_def* null) #4
  %tobool52 = icmp eq %struct.rtx_def* %call51, null
  br i1 %tobool52, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end50
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %call51, i64 0, i32 1, i64 0
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx55, align 8, !tbaa !5
  %rtwint = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 0, i32 0
  %11 = load i64* %rtwint, align 8, !tbaa !64
  %cmp58 = icmp slt i64 %11, 1
  br i1 %cmp58, label %return, label %if.end61

if.end61:                                         ; preds = %lor.lhs.false
  %12 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %12, i64 0, i32 0
  %13 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %region_array = getelementptr inbounds %struct.eh_status* %13, i64 0, i32 1
  %14 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %arrayidx68 = getelementptr inbounds %struct.eh_region** %14, i64 %11
  %15 = load %struct.eh_region** %arrayidx68, align 8, !tbaa !5
  %type = getelementptr inbounds %struct.eh_region* %15, i64 0, i32 5
  %16 = load i32* %type, align 4, !tbaa !40
  %cmp69 = icmp eq i32 %16, 6
  br i1 %cmp69, label %if.then71, label %for.cond74.preheader

if.then71:                                        ; preds = %if.end61
  %u = getelementptr inbounds %struct.eh_region* %15, i64 0, i32 6
  %type72 = bitcast %union.anon* %u to %union.tree_node**
  %17 = load %union.tree_node** %type72, align 8, !tbaa !41
  %outer = getelementptr inbounds %struct.eh_region* %15, i64 0, i32 0
  %18 = load %struct.eh_region** %outer, align 8, !tbaa !22
  br label %for.cond74.preheader

for.cond74.preheader:                             ; preds = %if.then71, %if.end61
  %region.0.ph = phi %struct.eh_region* [ %15, %if.end61 ], [ %18, %if.then71 ]
  %type_thrown.0.ph = phi %union.tree_node* [ null, %if.end61 ], [ %17, %if.then71 ]
  %tobool75116 = icmp eq %struct.eh_region* %region.0.ph, null
  br i1 %tobool75116, label %return, label %for.body76

for.body76:                                       ; preds = %for.cond74.preheader, %for.inc86
  %region.0117 = phi %struct.eh_region* [ %19, %for.inc86 ], [ %region.0.ph, %for.cond74.preheader ]
  %call77 = tail call fastcc i32 @reachable_next_level(%struct.eh_region* %region.0117, %union.tree_node* %type_thrown.0.ph, %struct.reachable_info* null)
  switch i32 %call77, label %return.loopexit120 [
    i32 3, label %return
    i32 0, label %for.inc86
  ]

for.inc86:                                        ; preds = %for.body76
  %outer87 = getelementptr inbounds %struct.eh_region* %region.0117, i64 0, i32 0
  %19 = load %struct.eh_region** %outer87, align 8, !tbaa !22
  %tobool75 = icmp eq %struct.eh_region* %19, null
  br i1 %tobool75, label %return, label %for.body76

return.loopexit120:                               ; preds = %for.body76
  br label %return

return:                                           ; preds = %for.inc48, %for.body42, %for.cond74.preheader, %for.body76, %for.inc86, %return.loopexit120, %lor.lhs.false, %if.end50, %entry
  %retval.0 = phi i1 [ false, %entry ], [ false, %if.end50 ], [ false, %lor.lhs.false ], [ true, %return.loopexit120 ], [ false, %for.inc86 ], [ false, %for.body76 ], [ false, %for.cond74.preheader ], [ true, %for.body42 ], [ false, %for.inc48 ]
  ret i1 %retval.0
}

; Function Attrs: nounwind uwtable
define zeroext i1 @can_throw_external(%struct.rtx_def* %insn) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom117 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom117
  %1 = load i8* %arrayidx, align 1, !tbaa !56
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %cmp4 = icmp eq i32 %bf.clear, 32
  br i1 %cmp4, label %land.lhs.true, label %if.end18

land.lhs.true:                                    ; preds = %if.end
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load7 = load i32* %3, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 24
  br i1 %cmp9, label %if.then11, label %if.end18

if.then11:                                        ; preds = %land.lhs.true
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtvec_def**
  %4 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx17 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 1, i64 0
  %5 = load %struct.rtx_def** %arrayidx17, align 8, !tbaa !5
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load19.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  %bf.load19 = phi i32 [ %bf.load19.pre, %if.then11 ], [ %bf.load, %land.lhs.true ], [ %bf.load, %if.end ]
  %insn.addr.0 = phi %struct.rtx_def* [ %5, %if.then11 ], [ %insn, %land.lhs.true ], [ %insn, %if.end ]
  %6 = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 0
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 34
  br i1 %cmp21, label %land.lhs.true23, label %if.end50

land.lhs.true23:                                  ; preds = %if.end18
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 1, i64 3
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx26, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load27 = load i32* %8, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp eq i32 %bf.clear28, 141
  br i1 %cmp29, label %for.body, label %if.end50

for.body:                                         ; preds = %land.lhs.true23, %for.inc48.for.body_crit_edge
  %9 = phi %struct.rtx_def* [ %.pre, %for.inc48.for.body_crit_edge ], [ %7, %land.lhs.true23 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc48.for.body_crit_edge ], [ 0, %land.lhs.true23 ]
  %arrayidx39 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 %indvars.iv
  %sub.0.in120 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**
  %sub.0121 = load %struct.rtx_def** %sub.0.in120, align 8
  %tobool122 = icmp eq %struct.rtx_def* %sub.0121, null
  br i1 %tobool122, label %for.inc48, label %for.body42

for.cond41:                                       ; preds = %for.body42
  %arrayidx46 = getelementptr inbounds %struct.rtx_def* %sub.0123, i64 0, i32 1, i64 2
  %sub.0.in = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**
  %sub.0 = load %struct.rtx_def** %sub.0.in, align 8
  %tobool = icmp eq %struct.rtx_def* %sub.0, null
  br i1 %tobool, label %for.inc48, label %for.body42

for.body42:                                       ; preds = %for.body, %for.cond41
  %sub.0123 = phi %struct.rtx_def* [ %sub.0, %for.cond41 ], [ %sub.0121, %for.body ]
  %call = tail call zeroext i1 @can_throw_external(%struct.rtx_def* %sub.0123)
  br i1 %call, label %return, label %for.cond41

for.inc48:                                        ; preds = %for.cond41, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = trunc i64 %indvars.iv.next to i32
  %cmp32 = icmp slt i32 %10, 3
  br i1 %cmp32, label %for.inc48.for.body_crit_edge, label %return

for.inc48.for.body_crit_edge:                     ; preds = %for.inc48
  %.pre = load %struct.rtx_def** %rtx26, align 8, !tbaa !5
  br label %for.body

if.end50:                                         ; preds = %land.lhs.true23, %if.end18
  %call51 = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %insn.addr.0, i32 23, %struct.rtx_def* null) #4
  %tobool52 = icmp eq %struct.rtx_def* %call51, null
  br i1 %tobool52, label %if.then53, label %if.end64

if.then53:                                        ; preds = %if.end50
  %bf.load54 = load i32* %6, align 8
  %bf.clear55 = and i32 %bf.load54, 65535
  %cmp56 = icmp eq i32 %bf.clear55, 34
  br i1 %cmp56, label %return, label %lor.rhs

lor.rhs:                                          ; preds = %if.then53
  %11 = load i32* @flag_non_call_exceptions, align 4, !tbaa !1
  %tobool58 = icmp eq i32 %11, 0
  br i1 %tobool58, label %return, label %land.rhs

land.rhs:                                         ; preds = %lor.rhs
  %arrayidx60 = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 1, i64 3
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx61, align 8, !tbaa !5
  %call62 = tail call i32 @may_trap_p(%struct.rtx_def* %12) #4
  %tobool63 = icmp ne i32 %call62, 0
  br label %return

if.end64:                                         ; preds = %if.end50
  %arrayidx66 = getelementptr inbounds %struct.rtx_def* %call51, i64 0, i32 1, i64 0
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx67, align 8, !tbaa !5
  %rtwint = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 0, i32 0
  %14 = load i64* %rtwint, align 8, !tbaa !64
  %cmp70 = icmp slt i64 %14, 1
  br i1 %cmp70, label %return, label %if.end73

if.end73:                                         ; preds = %if.end64
  %15 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %15, i64 0, i32 0
  %16 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %region_array = getelementptr inbounds %struct.eh_status* %16, i64 0, i32 1
  %17 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %arrayidx80 = getelementptr inbounds %struct.eh_region** %17, i64 %14
  %18 = load %struct.eh_region** %arrayidx80, align 8, !tbaa !5
  %type = getelementptr inbounds %struct.eh_region* %18, i64 0, i32 5
  %19 = load i32* %type, align 4, !tbaa !40
  %cmp81 = icmp eq i32 %19, 6
  br i1 %cmp81, label %if.then83, label %for.cond86.preheader

if.then83:                                        ; preds = %if.end73
  %u = getelementptr inbounds %struct.eh_region* %18, i64 0, i32 6
  %type84 = bitcast %union.anon* %u to %union.tree_node**
  %20 = load %union.tree_node** %type84, align 8, !tbaa !41
  %outer = getelementptr inbounds %struct.eh_region* %18, i64 0, i32 0
  %21 = load %struct.eh_region** %outer, align 8, !tbaa !22
  br label %for.cond86.preheader

for.cond86.preheader:                             ; preds = %if.then83, %if.end73
  %region.0.ph = phi %struct.eh_region* [ %18, %if.end73 ], [ %21, %if.then83 ]
  %type_thrown.0.ph = phi %union.tree_node* [ null, %if.end73 ], [ %20, %if.then83 ]
  %tobool87125 = icmp eq %struct.eh_region* %region.0.ph, null
  br i1 %tobool87125, label %return, label %for.body88

for.body88:                                       ; preds = %for.cond86.preheader, %for.inc94
  %region.0126 = phi %struct.eh_region* [ %22, %for.inc94 ], [ %region.0.ph, %for.cond86.preheader ]
  %call89 = tail call fastcc i32 @reachable_next_level(%struct.eh_region* %region.0126, %union.tree_node* %type_thrown.0.ph, %struct.reachable_info* null)
  %cmp90 = icmp ugt i32 %call89, 1
  br i1 %cmp90, label %return, label %for.inc94

for.inc94:                                        ; preds = %for.body88
  %outer95 = getelementptr inbounds %struct.eh_region* %region.0126, i64 0, i32 0
  %22 = load %struct.eh_region** %outer95, align 8, !tbaa !22
  %tobool87 = icmp eq %struct.eh_region* %22, null
  br i1 %tobool87, label %return, label %for.body88

return:                                           ; preds = %for.body88, %for.inc94, %for.inc48, %for.body42, %for.cond86.preheader, %if.end64, %if.then53, %land.rhs, %lor.rhs, %entry
  %retval.0 = phi i1 [ false, %entry ], [ true, %if.then53 ], [ false, %lor.rhs ], [ %tobool63, %land.rhs ], [ false, %if.end64 ], [ true, %for.cond86.preheader ], [ true, %for.body42 ], [ false, %for.inc48 ], [ false, %for.body88 ], [ true, %for.inc94 ]
  ret i1 %retval.0
}

declare i32 @may_trap_p(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define zeroext i1 @nothrow_function_p() #0 {
entry:
  %0 = load i32* @flag_exceptions, align 4, !tbaa !1
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = tail call %struct.rtx_def* @get_insns() #4
  %tobool126 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool126, label %for.end, label %for.body

for.body:                                         ; preds = %if.end, %for.inc
  %insn.027 = phi %struct.rtx_def* [ %1, %for.inc ], [ %call, %if.end ]
  %call2 = tail call zeroext i1 @can_throw_external(%struct.rtx_def* %insn.027)
  br i1 %call2, label %return, label %for.inc

for.inc:                                          ; preds = %for.body
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.027, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %tobool1 = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool1, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.end
  %2 = load %struct.function** @cfun, align 8, !tbaa !5
  %epilogue_delay_list = getelementptr inbounds %struct.function* %2, i64 0, i32 55
  %insn.122 = load %struct.rtx_def** %epilogue_delay_list, align 8
  %tobool623 = icmp eq %struct.rtx_def* %insn.122, null
  br i1 %tobool623, label %return, label %for.body7

for.body7:                                        ; preds = %for.end, %for.inc11
  %insn.124 = phi %struct.rtx_def* [ %insn.1, %for.inc11 ], [ %insn.122, %for.end ]
  %call8 = tail call zeroext i1 @can_throw_external(%struct.rtx_def* %insn.124)
  br i1 %call8, label %return, label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %insn.124, i64 0, i32 1, i64 1
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %insn.1 = load %struct.rtx_def** %rtx14, align 8
  %tobool6 = icmp eq %struct.rtx_def* %insn.1, null
  br i1 %tobool6, label %return, label %for.body7

return:                                           ; preds = %for.body, %for.body7, %for.inc11, %for.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ true, %for.end ], [ false, %for.body7 ], [ true, %for.inc11 ], [ false, %for.body ]
  ret i1 %retval.0
}

; Function Attrs: nounwind uwtable
define void @expand_builtin_unwind_init() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %has_nonlocal_label = getelementptr inbounds %struct.function* %0, i64 0, i32 56
  %1 = bitcast i24* %has_nonlocal_label to i32*
  %bf.load = load i32* %1, align 8
  %bf.set = or i32 %bf.load, 256
  store i32 %bf.set, i32* %1, align 8
  tail call void @ix86_setup_frame_addresses() #4
  ret void
}

declare void @ix86_setup_frame_addresses() #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @expand_builtin_eh_return_data_regno(%union.tree_node* nocapture readonly %arglist) #0 {
entry:
  %value = getelementptr inbounds %union.tree_node* %arglist, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !59
  %code = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 25
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([57 x i8]* @.str1, i64 0, i64 0)) #4
  %2 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  br label %return

if.end:                                           ; preds = %entry
  %call = tail call i64 @tree_low_cst(%union.tree_node* %1, i32 1) #4
  %cmp1 = icmp ult i64 %call, 2
  %cond = select i1 %cmp1, i64 %call, i64 4294967295
  %cmp2 = icmp eq i64 %cond, 4294967295
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %3 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !tbaa !5
  br label %return

if.end4:                                          ; preds = %if.end
  %4 = load i32* @target_flags, align 4, !tbaa !1
  %and = and i32 %4, 33554432
  %tobool = icmp eq i32 %and, 0
  %svr4_dbx_register_map.dbx64_register_map = select i1 %tobool, [53 x i32]* @svr4_dbx_register_map, [53 x i32]* @dbx64_register_map
  %cond9.in = getelementptr inbounds [53 x i32]* %svr4_dbx_register_map.dbx64_register_map, i64 0, i64 %cond
  %cond9 = load i32* %cond9.in, align 4
  %conv = sext i32 %cond9 to i64
  %call10 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv) #4
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %retval.0 = phi %struct.rtx_def* [ %2, %if.then ], [ %3, %if.then3 ], [ %call10, %if.end4 ]
  ret %struct.rtx_def* %retval.0
}

declare i64 @tree_low_cst(%union.tree_node*, i32) #1

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @expand_builtin_extract_return_addr(%union.tree_node* %addr_tree) #0 {
entry:
  %0 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %0, 25
  %1 = and i32 %and, 1
  %2 = or i32 %1, 4
  %call = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %addr_tree, %struct.rtx_def* null, i32 %2, i32 0) #4
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @expand_builtin_frob_return_addr(%union.tree_node* %addr_tree) #0 {
entry:
  %0 = load i32* @ptr_mode, align 4, !tbaa !56
  %call = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %addr_tree, %struct.rtx_def* null, i32 %0, i32 0) #4
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define void @expand_builtin_eh_return(%union.tree_node* %stackadj_tree, %union.tree_node* %handler_tree) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %ehr_stackadj = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 15
  %2 = load %struct.rtx_def** %ehr_stackadj, align 8, !tbaa !35
  %call = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %stackadj_tree, %struct.rtx_def* %2, i32 0, i32 0) #4
  %3 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1 = getelementptr inbounds %struct.function* %3, i64 0, i32 0
  %4 = load %struct.eh_status** %eh1, align 8, !tbaa !10
  %ehr_handler = getelementptr inbounds %struct.eh_status* %4, i64 0, i32 16
  %5 = load %struct.rtx_def** %ehr_handler, align 8, !tbaa !36
  %call2 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %handler_tree, %struct.rtx_def* %5, i32 0, i32 0) #4
  %6 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh3 = getelementptr inbounds %struct.function* %6, i64 0, i32 0
  %7 = load %struct.eh_status** %eh3, align 8, !tbaa !10
  %ehr_label = getelementptr inbounds %struct.eh_status* %7, i64 0, i32 17
  %8 = load %struct.rtx_def** %ehr_label, align 8, !tbaa !37
  %tobool = icmp eq %struct.rtx_def* %8, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call4 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call) #4
  %9 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh5 = getelementptr inbounds %struct.function* %9, i64 0, i32 0
  %10 = load %struct.eh_status** %eh5, align 8, !tbaa !10
  %ehr_stackadj6 = getelementptr inbounds %struct.eh_status* %10, i64 0, i32 15
  store %struct.rtx_def* %call4, %struct.rtx_def** %ehr_stackadj6, align 8, !tbaa !35
  %call7 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call2) #4
  %11 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh8 = getelementptr inbounds %struct.function* %11, i64 0, i32 0
  %12 = load %struct.eh_status** %eh8, align 8, !tbaa !10
  %ehr_handler9 = getelementptr inbounds %struct.eh_status* %12, i64 0, i32 16
  store %struct.rtx_def* %call7, %struct.rtx_def** %ehr_handler9, align 8, !tbaa !36
  %call10 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %13 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh11 = getelementptr inbounds %struct.function* %13, i64 0, i32 0
  %14 = load %struct.eh_status** %eh11, align 8, !tbaa !10
  %ehr_label12 = getelementptr inbounds %struct.eh_status* %14, i64 0, i32 17
  store %struct.rtx_def* %call10, %struct.rtx_def** %ehr_label12, align 8, !tbaa !37
  br label %if.end27

if.else:                                          ; preds = %entry
  %ehr_stackadj14 = getelementptr inbounds %struct.eh_status* %7, i64 0, i32 15
  %15 = load %struct.rtx_def** %ehr_stackadj14, align 8, !tbaa !35
  %cmp = icmp eq %struct.rtx_def* %call, %15
  br i1 %cmp, label %if.end, label %if.then15

if.then15:                                        ; preds = %if.else
  %call18 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %15, %struct.rtx_def* %call) #4
  %.pre = load %struct.function** @cfun, align 8, !tbaa !5
  %eh19.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 0
  %.pre33 = load %struct.eh_status** %eh19.phi.trans.insert, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then15
  %16 = phi %struct.eh_status* [ %7, %if.else ], [ %.pre33, %if.then15 ]
  %ehr_handler20 = getelementptr inbounds %struct.eh_status* %16, i64 0, i32 16
  %17 = load %struct.rtx_def** %ehr_handler20, align 8, !tbaa !36
  %cmp21 = icmp eq %struct.rtx_def* %call2, %17
  br i1 %cmp21, label %if.end27, label %if.then22

if.then22:                                        ; preds = %if.end
  %call25 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %17, %struct.rtx_def* %call2) #4
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then22, %if.then
  %18 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh28 = getelementptr inbounds %struct.function* %18, i64 0, i32 0
  %19 = load %struct.eh_status** %eh28, align 8, !tbaa !10
  %ehr_label29 = getelementptr inbounds %struct.eh_status* %19, i64 0, i32 17
  %20 = load %struct.rtx_def** %ehr_label29, align 8, !tbaa !37
  tail call void @emit_jump(%struct.rtx_def* %20) #4
  ret void
}

declare %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @expand_eh_return() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %ehr_label = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 17
  %2 = load %struct.rtx_def** %ehr_label, align 8, !tbaa !37
  %tobool = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %3 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %3, 25
  %4 = and i32 %and, 1
  %5 = or i32 %4, 4
  %call = tail call %struct.rtx_def* @gen_rtx_REG(i32 %5, i32 2) #4
  %tobool2 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([49 x i8]* @.str2, i64 0, i64 0)) #4
  br label %return

if.end4:                                          ; preds = %if.end
  %6 = load %struct.function** @cfun, align 8, !tbaa !5
  %calls_eh_return = getelementptr inbounds %struct.function* %6, i64 0, i32 56
  %7 = bitcast i24* %calls_eh_return to i32*
  %bf.load = load i32* %7, align 8
  %bf.set = or i32 %bf.load, 128
  store i32 %bf.set, i32* %7, align 8
  %call5 = tail call %struct.rtx_def* @gen_label_rtx() #4
  %8 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !5
  %call6 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call, %struct.rtx_def* %8) #4
  tail call void @emit_jump(%struct.rtx_def* %call5) #4
  %9 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh7 = getelementptr inbounds %struct.function* %9, i64 0, i32 0
  %10 = load %struct.eh_status** %eh7, align 8, !tbaa !10
  %ehr_label8 = getelementptr inbounds %struct.eh_status* %10, i64 0, i32 17
  %11 = load %struct.rtx_def** %ehr_label8, align 8, !tbaa !37
  %call9 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %11) #4
  tail call void @clobber_return_register() #4
  %12 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh10 = getelementptr inbounds %struct.function* %12, i64 0, i32 0
  %13 = load %struct.eh_status** %eh10, align 8, !tbaa !10
  %ehr_stackadj = getelementptr inbounds %struct.eh_status* %13, i64 0, i32 15
  %14 = load %struct.rtx_def** %ehr_stackadj, align 8, !tbaa !35
  %ehr_handler = getelementptr inbounds %struct.eh_status* %13, i64 0, i32 16
  %15 = load %struct.rtx_def** %ehr_handler, align 8, !tbaa !36
  %call12 = tail call %struct.rtx_def* @gen_eh_return(%struct.rtx_def* %14, %struct.rtx_def* %15) #4
  %call13 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12) #4
  %call14 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call5) #4
  br label %return

return:                                           ; preds = %entry, %if.end4, %if.then3
  ret void
}

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

declare void @clobber_return_register() #1

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @gen_eh_return(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @convert_to_eh_region_ranges() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %0, i64 0, i32 0
  %1 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %region_tree = getelementptr inbounds %struct.eh_status* %1, i64 0, i32 0
  %2 = load %struct.eh_region** %region_tree, align 8, !tbaa !19
  %cmp = icmp eq %struct.eh_region* %2, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = tail call %struct.varray_head_tag* @varray_init(i64 64, i64 1, i8* getelementptr inbounds ([19 x i8]* @.str3, i64 0, i64 0)) #4
  %3 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1 = getelementptr inbounds %struct.function* %3, i64 0, i32 0
  %4 = load %struct.eh_status** %eh1, align 8, !tbaa !10
  %action_record_data = getelementptr inbounds %struct.eh_status* %4, i64 0, i32 11
  store %struct.varray_head_tag* %call, %struct.varray_head_tag** %action_record_data, align 8, !tbaa !54
  %call2 = tail call %struct.htab* @htab_create(i64 31, i32 (i8*)* @action_record_hash, i32 (i8*, i8*)* @action_record_eq, void (i8*)* @free) #4
  %call3 = tail call %struct.rtx_def* @get_insns() #4
  %tobool204 = icmp eq %struct.rtx_def* %call3, null
  br i1 %tobool204, label %if.end127, label %for.body

for.body:                                         ; preds = %if.end, %for.inc113
  %call_site.0211 = phi i32 [ %call_site.5, %for.inc113 ], [ 0, %if.end ]
  %first_no_action_insn.0210 = phi %struct.rtx_def* [ %first_no_action_insn.5, %for.inc113 ], [ null, %if.end ]
  %last_landing_pad.0209 = phi %struct.rtx_def* [ %last_landing_pad.2, %for.inc113 ], [ null, %if.end ]
  %last_action_insn.0208 = phi %struct.rtx_def* [ %last_action_insn.1, %for.inc113 ], [ null, %if.end ]
  %last_action.0207 = phi i32 [ %last_action.3, %for.inc113 ], [ -3, %if.end ]
  %iter.0205 = phi %struct.rtx_def* [ %53, %for.inc113 ], [ %call3, %if.end ]
  %5 = getelementptr inbounds %struct.rtx_def* %iter.0205, i64 0, i32 0
  %bf.load = load i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom165 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom165
  %6 = load i8* %arrayidx, align 1, !tbaa !56
  %cmp4 = icmp eq i8 %6, 105
  br i1 %cmp4, label %if.then6, label %for.inc113

if.then6:                                         ; preds = %for.body
  %cmp9 = icmp eq i32 %bf.clear, 32
  br i1 %cmp9, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %if.then6
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %iter.0205, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx, align 8, !tbaa !5
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load12 = load i32* %8, align 8
  %bf.clear13 = and i32 %bf.load12, 65535
  %cmp14 = icmp eq i32 %bf.clear13, 24
  br i1 %cmp14, label %if.then16, label %if.end23

if.then16:                                        ; preds = %land.lhs.true
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtvec_def**
  %9 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !5
  %arrayidx22 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 0
  %10 = load %struct.rtx_def** %arrayidx22, align 8, !tbaa !5
  br label %if.end23

if.end23:                                         ; preds = %if.then16, %land.lhs.true, %if.then6
  %insn.0 = phi %struct.rtx_def* [ %10, %if.then16 ], [ %iter.0205, %land.lhs.true ], [ %iter.0205, %if.then6 ]
  %call24 = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %insn.0, i32 23, %struct.rtx_def* null) #4
  %tobool25 = icmp eq %struct.rtx_def* %call24, null
  br i1 %tobool25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.end23
  %11 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 0
  %bf.load27 = load i32* %11, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp eq i32 %bf.clear28, 34
  br i1 %cmp29, label %if.end69.thread, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then26
  %12 = load i32* @flag_non_call_exceptions, align 4, !tbaa !1
  %tobool31 = icmp eq i32 %12, 0
  br i1 %tobool31, label %for.inc113, label %land.lhs.true32

land.lhs.true32:                                  ; preds = %lor.lhs.false
  %arrayidx34 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 1, i64 3
  %rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx35, align 8, !tbaa !5
  %call36 = tail call i32 @may_trap_p(%struct.rtx_def* %13) #4
  %tobool37 = icmp eq i32 %call36, 0
  br i1 %tobool37, label %for.inc113, label %if.end69.thread

if.else:                                          ; preds = %if.end23
  %arrayidx41 = getelementptr inbounds %struct.rtx_def* %call24, i64 0, i32 1, i64 0
  %rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx42, align 8, !tbaa !5
  %rtwint = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 0, i32 0
  %15 = load i64* %rtwint, align 8, !tbaa !64
  %cmp45 = icmp slt i64 %15, 1
  br i1 %cmp45, label %for.inc113, label %if.end58

if.end58:                                         ; preds = %if.else
  %16 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh55 = getelementptr inbounds %struct.function* %16, i64 0, i32 0
  %17 = load %struct.eh_status** %eh55, align 8, !tbaa !10
  %region_array = getelementptr inbounds %struct.eh_status* %17, i64 0, i32 1
  %18 = load %struct.eh_region*** %region_array, align 8, !tbaa !14
  %arrayidx56 = getelementptr inbounds %struct.eh_region** %18, i64 %15
  %19 = load %struct.eh_region** %arrayidx56, align 8, !tbaa !5
  %call57 = tail call fastcc i32 @collect_one_action_chain(%struct.htab* %call2, %struct.eh_region* %19)
  %cmp59 = icmp eq i32 %call57, -1
  br i1 %cmp59, label %if.end69.thread, label %if.end69

if.end69.thread:                                  ; preds = %if.end58, %land.lhs.true32, %if.then26
  %cmp65 = icmp eq i32 %last_action.0207, -3
  %.last_action.0 = select i1 %cmp65, i32 -1, i32 %last_action.0207
  %iter.0.first_no_action_insn.0 = select i1 %cmp65, %struct.rtx_def* %iter.0205, %struct.rtx_def* %first_no_action_insn.0210
  br label %if.end78

if.end69:                                         ; preds = %if.end58
  %20 = load %struct.function** @cfun, align 8, !tbaa !5
  %uses_eh_lsda = getelementptr inbounds %struct.function* %20, i64 0, i32 56
  %21 = bitcast i24* %uses_eh_lsda to i32*
  %bf.load62 = load i32* %21, align 8
  %bf.set = or i32 %bf.load62, 4194304
  store i32 %bf.set, i32* %21, align 8
  %cmp70 = icmp sgt i32 %call57, -1
  br i1 %cmp70, label %for.cond73.preheader, label %if.end78

for.cond73.preheader:                             ; preds = %if.end69
  %landing_pad201 = getelementptr inbounds %struct.eh_region* %19, i64 0, i32 8
  %22 = load %struct.rtx_def** %landing_pad201, align 8, !tbaa !51
  %lnot202 = icmp eq %struct.rtx_def* %22, null
  br i1 %lnot202, label %for.inc, label %if.end78

for.inc:                                          ; preds = %for.cond73.preheader, %for.inc
  %o.0203 = phi %struct.eh_region* [ %23, %for.inc ], [ %19, %for.cond73.preheader ]
  %outer = getelementptr inbounds %struct.eh_region* %o.0203, i64 0, i32 0
  %23 = load %struct.eh_region** %outer, align 8, !tbaa !22
  %landing_pad = getelementptr inbounds %struct.eh_region* %23, i64 0, i32 8
  %24 = load %struct.rtx_def** %landing_pad, align 8, !tbaa !51
  %lnot = icmp eq %struct.rtx_def* %24, null
  br i1 %lnot, label %for.inc, label %if.end78

if.end78:                                         ; preds = %for.inc, %for.cond73.preheader, %if.end69.thread, %if.end69
  %first_no_action_insn.1200 = phi %struct.rtx_def* [ %first_no_action_insn.0210, %if.end69 ], [ %iter.0.first_no_action_insn.0, %if.end69.thread ], [ %first_no_action_insn.0210, %for.cond73.preheader ], [ %first_no_action_insn.0210, %for.inc ]
  %last_action.1199 = phi i32 [ %last_action.0207, %if.end69 ], [ %.last_action.0, %if.end69.thread ], [ %last_action.0207, %for.cond73.preheader ], [ %last_action.0207, %for.inc ]
  %this_action.0195198 = phi i32 [ %call57, %if.end69 ], [ -1, %if.end69.thread ], [ %call57, %for.cond73.preheader ], [ %call57, %for.inc ]
  %this_landing_pad.0 = phi %struct.rtx_def* [ null, %if.end69 ], [ null, %if.end69.thread ], [ %22, %for.cond73.preheader ], [ %24, %for.inc ]
  %cmp79 = icmp eq i32 %last_action.1199, %this_action.0195198
  %cmp82 = icmp eq %struct.rtx_def* %last_landing_pad.0209, %this_landing_pad.0
  %or.cond166 = and i1 %cmp79, %cmp82
  br i1 %or.cond166, label %for.inc113, label %if.then84

if.then84:                                        ; preds = %if.end78
  %cmp85 = icmp sgt i32 %last_action.1199, -2
  br i1 %cmp85, label %if.then87, label %if.end99

if.then87:                                        ; preds = %if.then84
  %tobool88 = icmp eq %struct.rtx_def* %first_no_action_insn.1200, null
  br i1 %tobool88, label %if.end94, label %if.then89

if.then89:                                        ; preds = %if.then87
  %25 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %25, i64 0, i32 0
  %26 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %call_site_data.i = getelementptr inbounds %struct.eh_status* %26, i64 0, i32 12
  %27 = load %struct.call_site_record** %call_site_data.i, align 8, !tbaa !31
  %call_site_data_used.i = getelementptr inbounds %struct.eh_status* %26, i64 0, i32 13
  %28 = load i32* %call_site_data_used.i, align 4, !tbaa !32
  %call_site_data_size.i = getelementptr inbounds %struct.eh_status* %26, i64 0, i32 14
  %29 = load i32* %call_site_data_size.i, align 4, !tbaa !85
  %cmp.i = icmp slt i32 %28, %29
  br i1 %cmp.i, label %add_call_site.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then89
  %tobool.i = icmp eq i32 %29, 0
  %mul.i = shl nsw i32 %29, 1
  %.mul.i = select i1 %tobool.i, i32 64, i32 %mul.i
  %30 = bitcast %struct.call_site_record* %27 to i8*
  %conv.i = sext i32 %.mul.i to i64
  %mul3.i = shl nsw i64 %conv.i, 4
  %call.i = tail call i8* @xrealloc(i8* %30, i64 %mul3.i) #4
  %31 = bitcast i8* %call.i to %struct.call_site_record*
  %32 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh4.i = getelementptr inbounds %struct.function* %32, i64 0, i32 0
  %33 = load %struct.eh_status** %eh4.i, align 8, !tbaa !10
  %call_site_data5.i = getelementptr inbounds %struct.eh_status* %33, i64 0, i32 12
  store %struct.call_site_record* %31, %struct.call_site_record** %call_site_data5.i, align 8, !tbaa !31
  %34 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh6.i = getelementptr inbounds %struct.function* %34, i64 0, i32 0
  %35 = load %struct.eh_status** %eh6.i, align 8, !tbaa !10
  %call_site_data_size7.i = getelementptr inbounds %struct.eh_status* %35, i64 0, i32 14
  store i32 %.mul.i, i32* %call_site_data_size7.i, align 4, !tbaa !85
  br label %add_call_site.exit

add_call_site.exit:                               ; preds = %if.then89, %if.then.i
  %data.0.i = phi %struct.call_site_record* [ %31, %if.then.i ], [ %27, %if.then89 ]
  %idxprom.i = sext i32 %28 to i64
  %landing_pad8.i = getelementptr inbounds %struct.call_site_record* %data.0.i, i64 %idxprom.i, i32 0
  store %struct.rtx_def* null, %struct.rtx_def** %landing_pad8.i, align 8, !tbaa !33
  %action11.i = getelementptr inbounds %struct.call_site_record* %data.0.i, i64 %idxprom.i, i32 1
  store i32 0, i32* %action11.i, align 4, !tbaa !86
  %add.i = add nsw i32 %28, 1
  %36 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh12.i = getelementptr inbounds %struct.function* %36, i64 0, i32 0
  %37 = load %struct.eh_status** %eh12.i, align 8, !tbaa !10
  %call_site_data_used13.i = getelementptr inbounds %struct.eh_status* %37, i64 0, i32 13
  store i32 %add.i, i32* %call_site_data_used13.i, align 4, !tbaa !32
  %38 = load i32* @call_site_base, align 4, !tbaa !1
  %add14.i = add nsw i32 %38, %28
  %call91 = tail call %struct.rtx_def* @emit_note_before(i32 -86, %struct.rtx_def* %first_no_action_insn.1200) #4
  %arrayidx93 = getelementptr inbounds %struct.rtx_def* %call91, i64 0, i32 1, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx93 to i32*
  store i32 %add14.i, i32* %rtint, align 4, !tbaa !1
  br label %if.end94

if.end94:                                         ; preds = %if.then87, %add_call_site.exit
  %call_site.1 = phi i32 [ %add14.i, %add_call_site.exit ], [ %call_site.0211, %if.then87 ]
  %call95 = tail call %struct.rtx_def* @emit_note_after(i32 -85, %struct.rtx_def* %last_action_insn.0208) #4
  %arrayidx97 = getelementptr inbounds %struct.rtx_def* %call95, i64 0, i32 1, i64 3
  %rtint98 = bitcast %union.rtunion_def* %arrayidx97 to i32*
  store i32 %call_site.1, i32* %rtint98, align 4, !tbaa !1
  br label %if.end99

if.end99:                                         ; preds = %if.end94, %if.then84
  %first_no_action_insn.3 = phi %struct.rtx_def* [ null, %if.end94 ], [ %first_no_action_insn.1200, %if.then84 ]
  %call_site.2 = phi i32 [ %call_site.1, %if.end94 ], [ %call_site.0211, %if.then84 ]
  %cmp100 = icmp sgt i32 %this_action.0195198, -2
  br i1 %cmp100, label %if.then102, label %for.inc113

if.then102:                                       ; preds = %if.end99
  %cmp103 = icmp slt i32 %this_action.0195198, 0
  %cond = select i1 %cmp103, i32 0, i32 %this_action.0195198
  %39 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i167 = getelementptr inbounds %struct.function* %39, i64 0, i32 0
  %40 = load %struct.eh_status** %eh.i167, align 8, !tbaa !10
  %call_site_data.i168 = getelementptr inbounds %struct.eh_status* %40, i64 0, i32 12
  %41 = load %struct.call_site_record** %call_site_data.i168, align 8, !tbaa !31
  %call_site_data_used.i169 = getelementptr inbounds %struct.eh_status* %40, i64 0, i32 13
  %42 = load i32* %call_site_data_used.i169, align 4, !tbaa !32
  %call_site_data_size.i170 = getelementptr inbounds %struct.eh_status* %40, i64 0, i32 14
  %43 = load i32* %call_site_data_size.i170, align 4, !tbaa !85
  %cmp.i171 = icmp slt i32 %42, %43
  br i1 %cmp.i171, label %add_call_site.exit191, label %if.then.i182

if.then.i182:                                     ; preds = %if.then102
  %tobool.i172 = icmp eq i32 %43, 0
  %mul.i173 = shl nsw i32 %43, 1
  %.mul.i174 = select i1 %tobool.i172, i32 64, i32 %mul.i173
  %44 = bitcast %struct.call_site_record* %41 to i8*
  %conv.i175 = sext i32 %.mul.i174 to i64
  %mul3.i176 = shl nsw i64 %conv.i175, 4
  %call.i177 = tail call i8* @xrealloc(i8* %44, i64 %mul3.i176) #4
  %45 = bitcast i8* %call.i177 to %struct.call_site_record*
  %46 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh4.i178 = getelementptr inbounds %struct.function* %46, i64 0, i32 0
  %47 = load %struct.eh_status** %eh4.i178, align 8, !tbaa !10
  %call_site_data5.i179 = getelementptr inbounds %struct.eh_status* %47, i64 0, i32 12
  store %struct.call_site_record* %45, %struct.call_site_record** %call_site_data5.i179, align 8, !tbaa !31
  %48 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh6.i180 = getelementptr inbounds %struct.function* %48, i64 0, i32 0
  %49 = load %struct.eh_status** %eh6.i180, align 8, !tbaa !10
  %call_site_data_size7.i181 = getelementptr inbounds %struct.eh_status* %49, i64 0, i32 14
  store i32 %.mul.i174, i32* %call_site_data_size7.i181, align 4, !tbaa !85
  br label %add_call_site.exit191

add_call_site.exit191:                            ; preds = %if.then102, %if.then.i182
  %data.0.i183 = phi %struct.call_site_record* [ %45, %if.then.i182 ], [ %41, %if.then102 ]
  %idxprom.i184 = sext i32 %42 to i64
  %landing_pad8.i185 = getelementptr inbounds %struct.call_site_record* %data.0.i183, i64 %idxprom.i184, i32 0
  store %struct.rtx_def* %this_landing_pad.0, %struct.rtx_def** %landing_pad8.i185, align 8, !tbaa !33
  %action11.i186 = getelementptr inbounds %struct.call_site_record* %data.0.i183, i64 %idxprom.i184, i32 1
  store i32 %cond, i32* %action11.i186, align 4, !tbaa !86
  %add.i187 = add nsw i32 %42, 1
  %50 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh12.i188 = getelementptr inbounds %struct.function* %50, i64 0, i32 0
  %51 = load %struct.eh_status** %eh12.i188, align 8, !tbaa !10
  %call_site_data_used13.i189 = getelementptr inbounds %struct.eh_status* %51, i64 0, i32 13
  store i32 %add.i187, i32* %call_site_data_used13.i189, align 4, !tbaa !32
  %52 = load i32* @call_site_base, align 4, !tbaa !1
  %add14.i190 = add nsw i32 %52, %42
  %call106 = tail call %struct.rtx_def* @emit_note_before(i32 -86, %struct.rtx_def* %iter.0205) #4
  %arrayidx108 = getelementptr inbounds %struct.rtx_def* %call106, i64 0, i32 1, i64 3
  %rtint109 = bitcast %union.rtunion_def* %arrayidx108 to i32*
  store i32 %add14.i190, i32* %rtint109, align 4, !tbaa !1
  br label %for.inc113

for.inc113:                                       ; preds = %if.end78, %add_call_site.exit191, %if.end99, %land.lhs.true32, %lor.lhs.false, %for.body, %if.else
  %last_action.3 = phi i32 [ %last_action.0207, %if.else ], [ %last_action.0207, %land.lhs.true32 ], [ %last_action.0207, %lor.lhs.false ], [ %last_action.0207, %for.body ], [ %last_action.1199, %if.end78 ], [ %this_action.0195198, %add_call_site.exit191 ], [ %this_action.0195198, %if.end99 ]
  %last_action_insn.1 = phi %struct.rtx_def* [ %last_action_insn.0208, %if.else ], [ %last_action_insn.0208, %land.lhs.true32 ], [ %last_action_insn.0208, %lor.lhs.false ], [ %last_action_insn.0208, %for.body ], [ %iter.0205, %if.end78 ], [ %iter.0205, %add_call_site.exit191 ], [ %iter.0205, %if.end99 ]
  %last_landing_pad.2 = phi %struct.rtx_def* [ %last_landing_pad.0209, %if.else ], [ %last_landing_pad.0209, %land.lhs.true32 ], [ %last_landing_pad.0209, %lor.lhs.false ], [ %last_landing_pad.0209, %for.body ], [ %last_landing_pad.0209, %if.end78 ], [ %this_landing_pad.0, %add_call_site.exit191 ], [ %this_landing_pad.0, %if.end99 ]
  %first_no_action_insn.5 = phi %struct.rtx_def* [ %first_no_action_insn.0210, %if.else ], [ %first_no_action_insn.0210, %land.lhs.true32 ], [ %first_no_action_insn.0210, %lor.lhs.false ], [ %first_no_action_insn.0210, %for.body ], [ %first_no_action_insn.1200, %if.end78 ], [ %first_no_action_insn.3, %add_call_site.exit191 ], [ %first_no_action_insn.3, %if.end99 ]
  %call_site.5 = phi i32 [ %call_site.0211, %if.else ], [ %call_site.0211, %land.lhs.true32 ], [ %call_site.0211, %lor.lhs.false ], [ %call_site.0211, %for.body ], [ %call_site.0211, %if.end78 ], [ %add14.i190, %add_call_site.exit191 ], [ %call_site.2, %if.end99 ]
  %arrayidx115 = getelementptr inbounds %struct.rtx_def* %iter.0205, i64 0, i32 1, i64 2
  %rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**
  %53 = load %struct.rtx_def** %rtx116, align 8, !tbaa !5
  %tobool = icmp eq %struct.rtx_def* %53, null
  br i1 %tobool, label %for.end117, label %for.body

for.end117:                                       ; preds = %for.inc113
  %cmp118 = icmp slt i32 %last_action.3, -1
  %tobool121 = icmp ne %struct.rtx_def* %first_no_action_insn.5, null
  %or.cond = or i1 %cmp118, %tobool121
  br i1 %or.cond, label %if.end127, label %if.then122

if.then122:                                       ; preds = %for.end117
  %call123 = tail call %struct.rtx_def* @emit_note_after(i32 -85, %struct.rtx_def* %last_action_insn.1) #4
  %arrayidx125 = getelementptr inbounds %struct.rtx_def* %call123, i64 0, i32 1, i64 3
  %rtint126 = bitcast %union.rtunion_def* %arrayidx125 to i32*
  store i32 %call_site.5, i32* %rtint126, align 4, !tbaa !1
  br label %if.end127

if.end127:                                        ; preds = %if.end, %for.end117, %if.then122
  tail call void @htab_delete(%struct.htab* %call2) #4
  br label %return

return:                                           ; preds = %entry, %if.end127
  ret void
}

declare %struct.varray_head_tag* @varray_init(i64, i64, i8*) #1

; Function Attrs: nounwind readonly uwtable
define internal i32 @action_record_hash(i8* nocapture readonly %pentry) #2 {
entry:
  %next = getelementptr inbounds i8* %pentry, i64 8
  %0 = bitcast i8* %next to i32*
  %1 = load i32* %0, align 4, !tbaa !87
  %mul = mul nsw i32 %1, 1009
  %filter = getelementptr inbounds i8* %pentry, i64 4
  %2 = bitcast i8* %filter to i32*
  %3 = load i32* %2, align 4, !tbaa !89
  %add = add nsw i32 %mul, %3
  ret i32 %add
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @action_record_eq(i8* nocapture readonly %pentry, i8* nocapture readonly %pdata) #2 {
entry:
  %filter = getelementptr inbounds i8* %pentry, i64 4
  %0 = bitcast i8* %filter to i32*
  %1 = load i32* %0, align 4, !tbaa !89
  %filter2 = getelementptr inbounds i8* %pdata, i64 4
  %2 = bitcast i8* %filter2 to i32*
  %3 = load i32* %2, align 4, !tbaa !89
  %cmp = icmp eq i32 %1, %3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %next = getelementptr inbounds i8* %pentry, i64 8
  %4 = bitcast i8* %next to i32*
  %5 = load i32* %4, align 4, !tbaa !87
  %next3 = getelementptr inbounds i8* %pdata, i64 8
  %6 = bitcast i8* %next3 to i32*
  %7 = load i32* %6, align 4, !tbaa !87
  %cmp4 = icmp eq i32 %5, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp4, %land.rhs ]
  %land.ext = zext i1 %8 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @collect_one_action_chain(%struct.htab* %ar_hash, %struct.eh_region* readonly %region) #0 {
entry:
  %cmp123 = icmp eq %struct.eh_region* %region, null
  br i1 %cmp123, label %return, label %if.end

if.end:                                           ; preds = %entry, %sw.bb68
  %region.tr124 = phi %struct.eh_region* [ %18, %sw.bb68 ], [ %region, %entry ]
  %type = getelementptr inbounds %struct.eh_region* %region.tr124, i64 0, i32 5
  %0 = load i32* %type, align 4, !tbaa !40
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %for.cond12.preheader
    i32 4, label %sw.bb59
    i32 5, label %return
    i32 3, label %sw.bb68
    i32 6, label %sw.bb68
  ]

for.cond12.preheader:                             ; preds = %if.end
  %c.1.in117 = getelementptr inbounds %struct.eh_region* %region.tr124, i64 0, i32 6, i32 0, i32 1
  %c.1118 = load %struct.eh_region** %c.1.in117, align 8
  %tobool13119 = icmp eq %struct.eh_region* %c.1118, null
  br i1 %tobool13119, label %return, label %for.body14.lr.ph

for.body14.lr.ph:                                 ; preds = %for.cond12.preheader
  %outer25 = getelementptr inbounds %struct.eh_region* %region.tr124, i64 0, i32 0
  br label %for.body14

sw.bb:                                            ; preds = %if.end
  %outer = getelementptr inbounds %struct.eh_region* %region.tr124, i64 0, i32 0
  %1 = load %struct.eh_region** %outer, align 8, !tbaa !22
  %call = tail call fastcc i32 @collect_one_action_chain(%struct.htab* %ar_hash, %struct.eh_region* %1)
  %cmp1 = icmp slt i32 %call, 1
  br i1 %cmp1, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %sw.bb
  %c.0111 = load %struct.eh_region** %outer, align 8
  %tobool112 = icmp eq %struct.eh_region* %c.0111, null
  br i1 %tobool112, label %for.end, label %for.body

for.cond:                                         ; preds = %for.body
  %outer9 = getelementptr inbounds %struct.eh_region* %c.0113, i64 0, i32 0
  %c.0 = load %struct.eh_region** %outer9, align 8
  %tobool = icmp eq %struct.eh_region* %c.0, null
  br i1 %tobool, label %for.end, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.cond
  %c.0113 = phi %struct.eh_region* [ %c.0, %for.cond ], [ %c.0111, %for.cond.preheader ]
  %type5 = getelementptr inbounds %struct.eh_region* %c.0113, i64 0, i32 5
  %2 = load i32* %type5, align 4, !tbaa !40
  %cmp6 = icmp eq i32 %2, 1
  br i1 %cmp6, label %return, label %for.cond

for.end:                                          ; preds = %for.cond, %for.cond.preheader
  %call10 = tail call fastcc i32 @add_action_record(%struct.htab* %ar_hash, i32 0, i32 %call)
  br label %return

for.body14:                                       ; preds = %for.body14.lr.ph, %for.cond12.backedge
  %c.1121 = phi %struct.eh_region* [ %c.1118, %for.body14.lr.ph ], [ %c.1, %for.cond12.backedge ]
  %next.0120 = phi i32 [ -3, %for.body14.lr.ph ], [ %next.0.be, %for.cond12.backedge ]
  %type_list = getelementptr inbounds %struct.eh_region* %c.1121, i64 0, i32 6, i32 0, i32 2
  %3 = load %struct.eh_region** %type_list, align 8
  %cmp16 = icmp eq %struct.eh_region* %3, null
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %for.body14
  %filter_list = getelementptr inbounds %struct.eh_region* %c.1121, i64 0, i32 6, i32 0, i32 3
  %4 = load %struct.rtx_def** %filter_list, align 8
  %value = getelementptr inbounds %struct.rtx_def* %4, i64 2
  %5 = bitcast %struct.rtx_def* %value to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !59
  %int_cst20 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 2
  %low = bitcast i32* %int_cst20 to i64*
  %7 = load i64* %low, align 8, !tbaa !90
  %conv = trunc i64 %7 to i32
  %call21 = tail call fastcc i32 @add_action_record(%struct.htab* %ar_hash, i32 %conv, i32 0)
  br label %for.cond12.backedge

for.cond12.backedge:                              ; preds = %for.body43, %if.end37, %if.then17
  %next.0.be = phi i32 [ %call21, %if.then17 ], [ %next.1, %if.end37 ], [ %call51, %for.body43 ]
  %c.1.in = getelementptr inbounds %struct.eh_region* %c.1121, i64 0, i32 6, i32 0, i32 1
  %c.1 = load %struct.eh_region** %c.1.in, align 8
  %tobool13 = icmp eq %struct.eh_region* %c.1, null
  br i1 %tobool13, label %return, label %for.body14

if.else:                                          ; preds = %for.body14
  %cmp22 = icmp eq i32 %next.0120, -3
  br i1 %cmp22, label %if.then24, label %if.end37

if.then24:                                        ; preds = %if.else
  %8 = load %struct.eh_region** %outer25, align 8, !tbaa !22
  %call26 = tail call fastcc i32 @collect_one_action_chain(%struct.htab* %ar_hash, %struct.eh_region* %8)
  %cmp27 = icmp eq i32 %call26, -1
  br i1 %cmp27, label %if.end37, label %if.else30

if.else30:                                        ; preds = %if.then24
  %cmp31 = icmp slt i32 %call26, 1
  br i1 %cmp31, label %if.then33, label %if.end37

if.then33:                                        ; preds = %if.else30
  %call34 = tail call fastcc i32 @add_action_record(%struct.htab* %ar_hash, i32 0, i32 0)
  br label %if.end37

if.end37:                                         ; preds = %if.then24, %if.then33, %if.else30, %if.else
  %next.1 = phi i32 [ %call34, %if.then33 ], [ %call26, %if.else30 ], [ %next.0120, %if.else ], [ 0, %if.then24 ]
  %filter_list40 = getelementptr inbounds %struct.eh_region* %c.1121, i64 0, i32 6, i32 0, i32 3
  %9 = load %struct.rtx_def** %filter_list40, align 8
  %tobool42114 = icmp eq %struct.rtx_def* %9, null
  br i1 %tobool42114, label %for.cond12.backedge, label %for.body43.lr.ph

for.body43.lr.ph:                                 ; preds = %if.end37
  %10 = bitcast %struct.rtx_def* %9 to %union.tree_node*
  br label %for.body43

for.body43:                                       ; preds = %for.body43.lr.ph, %for.body43
  %flt_node.0116 = phi %union.tree_node* [ %10, %for.body43.lr.ph ], [ %14, %for.body43 ]
  %next.2115 = phi i32 [ %next.1, %for.body43.lr.ph ], [ %call51, %for.body43 ]
  %value46 = getelementptr inbounds %union.tree_node* %flt_node.0116, i64 0, i32 0, i32 2
  %11 = bitcast i32* %value46 to %union.tree_node**
  %12 = load %union.tree_node** %11, align 8, !tbaa !59
  %int_cst48 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 2
  %low49 = bitcast i32* %int_cst48 to i64*
  %13 = load i64* %low49, align 8, !tbaa !90
  %conv50 = trunc i64 %13 to i32
  %call51 = tail call fastcc i32 @add_action_record(%struct.htab* %ar_hash, i32 %conv50, i32 %next.2115)
  %chain = getelementptr inbounds %union.tree_node* %flt_node.0116, i64 0, i32 0, i32 0, i32 0
  %14 = load %union.tree_node** %chain, align 8, !tbaa !60
  %tobool42 = icmp eq %union.tree_node* %14, null
  br i1 %tobool42, label %for.cond12.backedge, label %for.body43

sw.bb59:                                          ; preds = %if.end
  %outer60 = getelementptr inbounds %struct.eh_region* %region.tr124, i64 0, i32 0
  %15 = load %struct.eh_region** %outer60, align 8, !tbaa !22
  %call61 = tail call fastcc i32 @collect_one_action_chain(%struct.htab* %ar_hash, %struct.eh_region* %15)
  %filter63 = getelementptr inbounds %struct.eh_region* %region.tr124, i64 0, i32 6, i32 0, i32 1
  %16 = bitcast %struct.eh_region** %filter63 to i32*
  %17 = load i32* %16, align 4, !tbaa !77
  %cmp64 = icmp slt i32 %call61, 0
  %cond = select i1 %cmp64, i32 0, i32 %call61
  %call66 = tail call fastcc i32 @add_action_record(%struct.htab* %ar_hash, i32 %17, i32 %cond)
  ret i32 %call66

sw.bb68:                                          ; preds = %if.end, %if.end
  %outer69 = getelementptr inbounds %struct.eh_region* %region.tr124, i64 0, i32 0
  %18 = load %struct.eh_region** %outer69, align 8, !tbaa !22
  %cmp = icmp eq %struct.eh_region* %18, null
  br i1 %cmp, label %return, label %if.end

sw.default:                                       ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str26, i64 0, i64 0), i32 3549, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.collect_one_action_chain, i64 0, i64 0)) #6
  unreachable

return:                                           ; preds = %sw.bb68, %if.end, %for.cond12.backedge, %for.body, %entry, %for.cond12.preheader, %sw.bb, %for.end
  %retval.0 = phi i32 [ %call10, %for.end ], [ 0, %sw.bb ], [ -3, %for.cond12.preheader ], [ -1, %entry ], [ %call, %for.body ], [ %next.0.be, %for.cond12.backedge ], [ -1, %sw.bb68 ], [ -2, %if.end ]
  ret i32 %retval.0
}

declare %struct.rtx_def* @emit_note_before(i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_note_after(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @output_function_exception_table() #0 {
entry:
  %reg_start_lab.i = alloca [32 x i8], align 16
  %reg_end_lab.i = alloca [32 x i8], align 16
  %landing_pad_lab.i = alloca [32 x i8], align 16
  %ttype_label = alloca [32 x i8], align 16
  %cs_after_size_label = alloca [32 x i8], align 16
  %cs_end_label = alloca [32 x i8], align 16
  %ttype_after_disp_label = alloca [32 x i8], align 16
  %0 = load %struct.function** @cfun, align 8, !tbaa !5
  %uses_eh_lsda = getelementptr inbounds %struct.function* %0, i64 0, i32 56
  %1 = bitcast i24* %uses_eh_lsda to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 4194304
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %2 = load i32* @current_funcdef_number, align 4, !tbaa !1
  %3 = load void ()** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 11), align 8, !tbaa !93
  call void %3() #4
  %4 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %4, i64 0, i32 0
  %5 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %ttype_data = getelementptr inbounds %struct.eh_status* %5, i64 0, i32 9
  %6 = load %struct.varray_head_tag** %ttype_data, align 8, !tbaa !30
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %6, i64 0, i32 1
  %7 = load i64* %elements_used, align 8, !tbaa !24
  %cmp = icmp eq i64 %7, 0
  br i1 %cmp, label %lor.end, label %if.else

lor.end:                                          ; preds = %if.end
  %ehspec_data = getelementptr inbounds %struct.eh_status* %5, i64 0, i32 10
  %8 = load %struct.varray_head_tag** %ehspec_data, align 8, !tbaa !53
  %elements_used2 = getelementptr inbounds %struct.varray_head_tag* %8, i64 0, i32 1
  %9 = load i64* %elements_used2, align 8, !tbaa !24
  %cmp3 = icmp eq i64 %9, 0
  br i1 %cmp3, label %do.body9, label %if.else

if.else:                                          ; preds = %lor.end, %if.end
  %10 = load i32* @flag_pic, align 4, !tbaa !1
  %tobool6 = icmp ne i32 %10, 0
  %cond = select i1 %tobool6, i32 155, i32 0
  %arraydecay = getelementptr inbounds [32 x i8]* %ttype_label, i64 0, i64 0
  %call = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str5, i64 0, i64 0), i32 %2) #4
  %call7 = call i32 @size_of_encoded_value(i32 %cond) #4
  %mul = shl nsw i32 %call7, 3
  call void @assemble_align(i32 %mul) #4
  br label %do.body9

do.body9:                                         ; preds = %lor.end, %if.else
  %11 = phi i1 [ true, %if.else ], [ false, %lor.end ]
  %tt_format_size.0 = phi i32 [ %call7, %if.else ], [ 0, %lor.end ]
  %tt_format.0 = phi i32 [ %cond, %if.else ], [ 255, %lor.end ]
  %12 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !5
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([8 x i8]* @.str6, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @.str7, i64 0, i64 0), i32 %2) #4
  %call12 = call i8* @eh_data_format_name(i32 255) #4
  call void (i32, i64, i8*, ...)* @dw2_asm_output_data(i32 1, i64 255, i8* getelementptr inbounds ([21 x i8]* @.str8, i64 0, i64 0), i8* %call12) #4
  %conv13138 = zext i32 %tt_format.0 to i64
  %call14 = call i8* @eh_data_format_name(i32 %tt_format.0) #4
  call void (i32, i64, i8*, ...)* @dw2_asm_output_data(i32 1, i64 %conv13138, i8* getelementptr inbounds ([19 x i8]* @.str9, i64 0, i64 0), i8* %call14) #4
  br i1 %11, label %do.body17, label %if.end25

do.body17:                                        ; preds = %do.body9
  %arraydecay18 = getelementptr inbounds [32 x i8]* %ttype_after_disp_label, i64 0, i64 0
  %call19 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay18, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str10, i64 0, i64 0), i32 %2) #4
  %arraydecay21 = getelementptr inbounds [32 x i8]* %ttype_label, i64 0, i64 0
  call void (i8*, i8*, i8*, ...)* @dw2_asm_output_delta_uleb128(i8* %arraydecay21, i8* %arraydecay18, i8* getelementptr inbounds ([19 x i8]* @.str11, i64 0, i64 0)) #4
  %13 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !5
  call void @assemble_name(%struct._IO_FILE* %13, i8* %arraydecay18) #4
  %14 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !5
  %15 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str12, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %14)
  br label %if.end25

if.end25:                                         ; preds = %do.body17, %do.body9
  %call27 = call i8* @eh_data_format_name(i32 1) #4
  call void (i32, i64, i8*, ...)* @dw2_asm_output_data(i32 1, i64 1, i8* getelementptr inbounds ([22 x i8]* @.str13, i64 0, i64 0), i8* %call27) #4
  %arraydecay29 = getelementptr inbounds [32 x i8]* %cs_after_size_label, i64 0, i64 0
  %call30 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay29, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str14, i64 0, i64 0), i32 %2) #4
  %arraydecay33 = getelementptr inbounds [32 x i8]* %cs_end_label, i64 0, i64 0
  %call34 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay33, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str15, i64 0, i64 0), i32 %2) #4
  call void (i8*, i8*, i8*, ...)* @dw2_asm_output_delta_uleb128(i8* %arraydecay33, i8* %arraydecay29, i8* getelementptr inbounds ([23 x i8]* @.str16, i64 0, i64 0)) #4
  %16 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !5
  call void @assemble_name(%struct._IO_FILE* %16, i8* %arraydecay29) #4
  %17 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !5
  %18 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str12, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %17)
  %19 = getelementptr inbounds [32 x i8]* %reg_start_lab.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 32, i8* %19) #4
  %20 = getelementptr inbounds [32 x i8]* %reg_end_lab.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 32, i8* %20) #4
  %21 = getelementptr inbounds [32 x i8]* %landing_pad_lab.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 32, i8* %21) #4
  %22 = load %union.tree_node** @current_function_func_begin_label, align 8, !tbaa !5
  %id.i = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds i8** %id.i, i64 1
  %24 = load i8** %23, align 8, !tbaa !98
  %25 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh.i = getelementptr inbounds %struct.function* %25, i64 0, i32 0
  %26 = load %struct.eh_status** %eh.i, align 8, !tbaa !10
  %call_site_data_used.i = getelementptr inbounds %struct.eh_status* %26, i64 0, i32 13
  %27 = load i32* %call_site_data_used.i, align 4, !tbaa !32
  %cmp32.i = icmp sgt i32 %27, 0
  br i1 %cmp32.i, label %for.body.i, label %dw2_output_call_site_table.exit

for.body.i:                                       ; preds = %if.end25, %if.end20.for.body_crit_edge.i
  %28 = phi %struct.eh_status* [ %.pre34.i, %if.end20.for.body_crit_edge.i ], [ %26, %if.end25 ]
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %if.end20.for.body_crit_edge.i ], [ 0, %if.end25 ]
  %call_site_data.i = getelementptr inbounds %struct.eh_status* %28, i64 0, i32 12
  %29 = load %struct.call_site_record** %call_site_data.i, align 8, !tbaa !31
  %30 = load i32* @call_site_base, align 4, !tbaa !1
  %31 = trunc i64 %indvars.iv.i to i32
  %add.i = add nsw i32 %30, %31
  %call.i = call i32 (i8*, i8*, ...)* @sprintf(i8* %19, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str19, i64 0, i64 0), i32 %add.i) #4
  %32 = load i32* @call_site_base, align 4, !tbaa !1
  %add4.i = add nsw i32 %32, %31
  %call5.i = call i32 (i8*, i8*, ...)* @sprintf(i8* %20, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str20, i64 0, i64 0), i32 %add4.i) #4
  %landing_pad.i = getelementptr inbounds %struct.call_site_record* %29, i64 %indvars.iv.i, i32 0
  %33 = load %struct.rtx_def** %landing_pad.i, align 8, !tbaa !33
  %tobool.i = icmp eq %struct.rtx_def* %33, null
  br i1 %tobool.i, label %if.end.i, label %do.body7.i

do.body7.i:                                       ; preds = %for.body.i
  %arrayidx10.i = getelementptr inbounds %struct.rtx_def* %33, i64 0, i32 1, i64 5
  %rtint.i = bitcast %union.rtunion_def* %arrayidx10.i to i32*
  %34 = load i32* %rtint.i, align 4, !tbaa !1
  %call11.i = call i32 (i8*, i8*, ...)* @sprintf(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str21, i64 0, i64 0), i32 %34) #4
  br label %if.end.i

if.end.i:                                         ; preds = %do.body7.i, %for.body.i
  call void (i8*, i8*, i8*, ...)* @dw2_asm_output_delta_uleb128(i8* %19, i8* %24, i8* getelementptr inbounds ([16 x i8]* @.str22, i64 0, i64 0), i32 %31) #4
  call void (i8*, i8*, i8*, ...)* @dw2_asm_output_delta_uleb128(i8* %20, i8* %19, i8* getelementptr inbounds ([7 x i8]* @.str23, i64 0, i64 0)) #4
  %35 = load %struct.rtx_def** %landing_pad.i, align 8, !tbaa !33
  %tobool17.i = icmp eq %struct.rtx_def* %35, null
  br i1 %tobool17.i, label %if.else.i, label %if.then18.i

if.then18.i:                                      ; preds = %if.end.i
  call void (i8*, i8*, i8*, ...)* @dw2_asm_output_delta_uleb128(i8* %21, i8* %24, i8* getelementptr inbounds ([12 x i8]* @.str24, i64 0, i64 0)) #4
  br label %if.end20.i

if.else.i:                                        ; preds = %if.end.i
  call void (i64, i8*, ...)* @dw2_asm_output_data_uleb128(i64 0, i8* getelementptr inbounds ([12 x i8]* @.str24, i64 0, i64 0)) #4
  br label %if.end20.i

if.end20.i:                                       ; preds = %if.else.i, %if.then18.i
  %action.i = getelementptr inbounds %struct.call_site_record* %29, i64 %indvars.iv.i, i32 1
  %36 = load i32* %action.i, align 4, !tbaa !86
  %conv.i = sext i32 %36 to i64
  call void (i64, i8*, ...)* @dw2_asm_output_data_uleb128(i64 %conv.i, i8* getelementptr inbounds ([7 x i8]* @.str25, i64 0, i64 0)) #4
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv.i = trunc i64 %indvars.iv.next.i to i32
  %exitcond.i = icmp eq i32 %lftr.wideiv.i, %27
  br i1 %exitcond.i, label %dw2_output_call_site_table.exit, label %if.end20.for.body_crit_edge.i

if.end20.for.body_crit_edge.i:                    ; preds = %if.end20.i
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !5
  %eh1.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 0
  %.pre34.i = load %struct.eh_status** %eh1.phi.trans.insert.i, align 8, !tbaa !10
  br label %for.body.i

dw2_output_call_site_table.exit:                  ; preds = %if.end20.i, %if.end25
  %37 = load i32* @call_site_base, align 4, !tbaa !1
  %add21.i = add nsw i32 %37, %27
  store i32 %add21.i, i32* @call_site_base, align 4, !tbaa !1
  call void @llvm.lifetime.end(i64 32, i8* %19) #4
  call void @llvm.lifetime.end(i64 32, i8* %20) #4
  call void @llvm.lifetime.end(i64 32, i8* %21) #4
  %38 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !5
  call void @assemble_name(%struct._IO_FILE* %38, i8* %arraydecay33) #4
  %39 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !5
  %40 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str12, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %39)
  %41 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh42 = getelementptr inbounds %struct.function* %41, i64 0, i32 0
  %42 = load %struct.eh_status** %eh42, align 8, !tbaa !10
  %action_record_data = getelementptr inbounds %struct.eh_status* %42, i64 0, i32 11
  %43 = load %struct.varray_head_tag** %action_record_data, align 8, !tbaa !54
  %elements_used43 = getelementptr inbounds %struct.varray_head_tag* %43, i64 0, i32 1
  %44 = load i64* %elements_used43, align 8, !tbaa !24
  %conv44 = trunc i64 %44 to i32
  %cmp45146 = icmp sgt i32 %conv44, 0
  br i1 %cmp45146, label %for.body, label %for.end

for.body:                                         ; preds = %dw2_output_call_site_table.exit, %for.body.for.body_crit_edge
  %45 = phi %struct.varray_head_tag* [ %.pre168, %for.body.for.body_crit_edge ], [ %43, %dw2_output_call_site_table.exit ]
  %indvars.iv151 = phi i64 [ %indvars.iv.next152, %for.body.for.body_crit_edge ], [ 0, %dw2_output_call_site_table.exit ]
  %data = getelementptr inbounds %struct.varray_head_tag* %45, i64 0, i32 4
  %uc = bitcast %union.varray_data_tag* %data to [1 x i8]*
  %arrayidx = getelementptr inbounds [1 x i8]* %uc, i64 0, i64 %indvars.iv151
  %46 = load i8* %arrayidx, align 1, !tbaa !56
  %conv49 = zext i8 %46 to i64
  %47 = trunc i64 %indvars.iv151 to i32
  %tobool50 = icmp ne i32 %47, 0
  %cond51 = select i1 %tobool50, i8* null, i8* getelementptr inbounds ([20 x i8]* @.str17, i64 0, i64 0)
  call void (i32, i64, i8*, ...)* @dw2_asm_output_data(i32 1, i64 %conv49, i8* %cond51) #4
  %indvars.iv.next152 = add nuw nsw i64 %indvars.iv151, 1
  %lftr.wideiv153 = trunc i64 %indvars.iv.next152 to i32
  %exitcond154 = icmp eq i32 %lftr.wideiv153, %conv44
  br i1 %exitcond154, label %for.end, label %for.body.for.body_crit_edge

for.body.for.body_crit_edge:                      ; preds = %for.body
  %.pre166 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh47.phi.trans.insert = getelementptr inbounds %struct.function* %.pre166, i64 0, i32 0
  %.pre167 = load %struct.eh_status** %eh47.phi.trans.insert, align 8, !tbaa !10
  %action_record_data48.phi.trans.insert = getelementptr inbounds %struct.eh_status* %.pre167, i64 0, i32 11
  %.pre168 = load %struct.varray_head_tag** %action_record_data48.phi.trans.insert, align 8, !tbaa !54
  br label %for.body

for.end:                                          ; preds = %for.body, %dw2_output_call_site_table.exit
  br i1 %11, label %if.then53, label %if.end55

if.then53:                                        ; preds = %for.end
  %mul54 = shl nsw i32 %tt_format_size.0, 3
  call void @assemble_align(i32 %mul54) #4
  br label %if.end55

if.end55:                                         ; preds = %if.then53, %for.end
  %48 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh56 = getelementptr inbounds %struct.function* %48, i64 0, i32 0
  %49 = load %struct.eh_status** %eh56, align 8, !tbaa !10
  %ttype_data57 = getelementptr inbounds %struct.eh_status* %49, i64 0, i32 9
  %50 = load %struct.varray_head_tag** %ttype_data57, align 8, !tbaa !30
  %elements_used58 = getelementptr inbounds %struct.varray_head_tag* %50, i64 0, i32 1
  %51 = load i64* %elements_used58, align 8, !tbaa !24
  %conv59 = trunc i64 %51 to i32
  %cmp60144 = icmp sgt i32 %conv59, 0
  br i1 %cmp60144, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %if.end55
  %cmp74 = icmp eq i32 %tt_format.0, 0
  %mul79 = shl nsw i32 %tt_format_size.0, 3
  %sext169 = shl i64 %51, 32
  %52 = ashr exact i64 %sext169, 32
  br i1 %cmp74, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %while.cond.backedge.us.while.body.us_crit_edge
  %53 = phi %struct.varray_head_tag* [ %.pre159, %while.cond.backedge.us.while.body.us_crit_edge ], [ %50, %while.body.lr.ph ]
  %indvars.iv155.in = phi i64 [ %indvars.iv155, %while.cond.backedge.us.while.body.us_crit_edge ], [ %52, %while.body.lr.ph ]
  %indvars.iv155 = add i64 %indvars.iv155.in, -1
  %data65.us = getelementptr inbounds %struct.varray_head_tag* %53, i64 0, i32 4
  %tree.us = bitcast %union.varray_data_tag* %data65.us to [1 x %union.tree_node*]*
  %arrayidx66.us = getelementptr inbounds [1 x %union.tree_node*]* %tree.us, i64 0, i64 %indvars.iv155
  %54 = load %union.tree_node** %arrayidx66.us, align 8, !tbaa !5
  %cmp67.us = icmp eq %union.tree_node* %54, null
  br i1 %cmp67.us, label %while.cond.backedge.us, label %if.else70.us

if.else70.us:                                     ; preds = %while.body.us
  %55 = load %struct.htab** @type_to_runtime_map, align 8, !tbaa !5
  %56 = bitcast %union.tree_node* %54 to i8*
  %57 = ptrtoint %union.tree_node* %54 to i64
  %.tr.i.us = trunc i64 %57 to i32
  %conv.i139.us = and i32 %.tr.i.us, 262143
  %call.i140.us = call i8** @htab_find_slot_with_hash(%struct.htab* %55, i8* %56, i32 %conv.i139.us, i32 0) #4
  %58 = load i8** %call.i140.us, align 8
  %value.i.us = getelementptr inbounds i8* %58, i64 32
  %59 = bitcast i8* %value.i.us to %union.tree_node**
  br label %while.cond.backedge.us

while.cond.backedge.us:                           ; preds = %if.else70.us, %while.body.us
  %type.0.in.us = phi %union.tree_node** [ %59, %if.else70.us ], [ getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), %while.body.us ]
  %type.0.us = load %union.tree_node** %type.0.in.us, align 8
  %call73.us = call %struct.rtx_def* @expand_expr(%union.tree_node* %type.0.us, %struct.rtx_def* null, i32 0, i32 3) #4
  %call80.us = call zeroext i1 @assemble_integer(%struct.rtx_def* %call73.us, i32 %tt_format_size.0, i32 %mul79, i32 1) #4
  %60 = trunc i64 %indvars.iv155 to i32
  %cmp60.us = icmp sgt i32 %60, 0
  br i1 %cmp60.us, label %while.cond.backedge.us.while.body.us_crit_edge, label %while.end

while.cond.backedge.us.while.body.us_crit_edge:   ; preds = %while.cond.backedge.us
  %.pre = load %struct.function** @cfun, align 8, !tbaa !5
  %eh63.us.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 0
  %.pre158 = load %struct.eh_status** %eh63.us.phi.trans.insert, align 8, !tbaa !10
  %ttype_data64.us.phi.trans.insert = getelementptr inbounds %struct.eh_status* %.pre158, i64 0, i32 9
  %.pre159 = load %struct.varray_head_tag** %ttype_data64.us.phi.trans.insert, align 8, !tbaa !30
  br label %while.body.us

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge.while.body_crit_edge
  %61 = phi %struct.varray_head_tag* [ %.pre162, %while.cond.backedge.while.body_crit_edge ], [ %50, %while.body.lr.ph ]
  %indvars.iv148.in = phi i64 [ %indvars.iv148, %while.cond.backedge.while.body_crit_edge ], [ %52, %while.body.lr.ph ]
  %indvars.iv148 = add i64 %indvars.iv148.in, -1
  %data65 = getelementptr inbounds %struct.varray_head_tag* %61, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data65 to [1 x %union.tree_node*]*
  %arrayidx66 = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %indvars.iv148
  %62 = load %union.tree_node** %arrayidx66, align 8, !tbaa !5
  %cmp67 = icmp eq %union.tree_node* %62, null
  br i1 %cmp67, label %while.cond.backedge, label %if.else70

if.else70:                                        ; preds = %while.body
  %63 = load %struct.htab** @type_to_runtime_map, align 8, !tbaa !5
  %64 = bitcast %union.tree_node* %62 to i8*
  %65 = ptrtoint %union.tree_node* %62 to i64
  %.tr.i = trunc i64 %65 to i32
  %conv.i139 = and i32 %.tr.i, 262143
  %call.i140 = call i8** @htab_find_slot_with_hash(%struct.htab* %63, i8* %64, i32 %conv.i139, i32 0) #4
  %66 = load i8** %call.i140, align 8
  %value.i = getelementptr inbounds i8* %66, i64 32
  %67 = bitcast i8* %value.i to %union.tree_node**
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %while.body, %if.else70
  %type.0.in = phi %union.tree_node** [ %67, %if.else70 ], [ getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), %while.body ]
  %type.0 = load %union.tree_node** %type.0.in, align 8
  %call73 = call %struct.rtx_def* @expand_expr(%union.tree_node* %type.0, %struct.rtx_def* null, i32 0, i32 3) #4
  call void (i32, %struct.rtx_def*, i8*, ...)* @dw2_asm_output_encoded_addr_rtx(i32 %tt_format.0, %struct.rtx_def* %call73, i8* null) #4
  %68 = trunc i64 %indvars.iv148 to i32
  %cmp60 = icmp sgt i32 %68, 0
  br i1 %cmp60, label %while.cond.backedge.while.body_crit_edge, label %while.end

while.cond.backedge.while.body_crit_edge:         ; preds = %while.cond.backedge
  %.pre160 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh63.phi.trans.insert = getelementptr inbounds %struct.function* %.pre160, i64 0, i32 0
  %.pre161 = load %struct.eh_status** %eh63.phi.trans.insert, align 8, !tbaa !10
  %ttype_data64.phi.trans.insert = getelementptr inbounds %struct.eh_status* %.pre161, i64 0, i32 9
  %.pre162 = load %struct.varray_head_tag** %ttype_data64.phi.trans.insert, align 8, !tbaa !30
  br label %while.body

while.end:                                        ; preds = %while.cond.backedge, %while.cond.backedge.us, %if.end55
  br i1 %11, label %if.then84, label %if.end87

if.then84:                                        ; preds = %while.end
  %69 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !5
  %arraydecay85 = getelementptr inbounds [32 x i8]* %ttype_label, i64 0, i64 0
  call void @assemble_name(%struct._IO_FILE* %69, i8* %arraydecay85) #4
  %70 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !5
  %71 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str12, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %70)
  br label %if.end87

if.end87:                                         ; preds = %if.then84, %while.end
  %72 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh88 = getelementptr inbounds %struct.function* %72, i64 0, i32 0
  %73 = load %struct.eh_status** %eh88, align 8, !tbaa !10
  %ehspec_data89 = getelementptr inbounds %struct.eh_status* %73, i64 0, i32 10
  %74 = load %struct.varray_head_tag** %ehspec_data89, align 8, !tbaa !53
  %elements_used90 = getelementptr inbounds %struct.varray_head_tag* %74, i64 0, i32 1
  %75 = load i64* %elements_used90, align 8, !tbaa !24
  %conv91 = trunc i64 %75 to i32
  %cmp93141 = icmp sgt i32 %conv91, 0
  br i1 %cmp93141, label %for.body95, label %for.end107

for.body95:                                       ; preds = %if.end87, %for.body95.for.body95_crit_edge
  %76 = phi %struct.varray_head_tag* [ %.pre165, %for.body95.for.body95_crit_edge ], [ %74, %if.end87 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body95.for.body95_crit_edge ], [ 0, %if.end87 ]
  %data99 = getelementptr inbounds %struct.varray_head_tag* %76, i64 0, i32 4
  %uc100 = bitcast %union.varray_data_tag* %data99 to [1 x i8]*
  %arrayidx101 = getelementptr inbounds [1 x i8]* %uc100, i64 0, i64 %indvars.iv
  %77 = load i8* %arrayidx101, align 1, !tbaa !56
  %conv102 = zext i8 %77 to i64
  %78 = trunc i64 %indvars.iv to i32
  %tobool103 = icmp ne i32 %78, 0
  %cond104 = select i1 %tobool103, i8* null, i8* getelementptr inbounds ([30 x i8]* @.str18, i64 0, i64 0)
  call void (i32, i64, i8*, ...)* @dw2_asm_output_data(i32 1, i64 %conv102, i8* %cond104) #4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %conv91
  br i1 %exitcond, label %for.end107, label %for.body95.for.body95_crit_edge

for.body95.for.body95_crit_edge:                  ; preds = %for.body95
  %.pre163 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh97.phi.trans.insert = getelementptr inbounds %struct.function* %.pre163, i64 0, i32 0
  %.pre164 = load %struct.eh_status** %eh97.phi.trans.insert, align 8, !tbaa !10
  %ehspec_data98.phi.trans.insert = getelementptr inbounds %struct.eh_status* %.pre164, i64 0, i32 10
  %.pre165 = load %struct.varray_head_tag** %ehspec_data98.phi.trans.insert, align 8, !tbaa !53
  br label %for.body95

for.end107:                                       ; preds = %for.body95, %if.end87
  %79 = load %union.tree_node** @current_function_decl, align 8, !tbaa !5
  call void @function_section(%union.tree_node* %79) #4
  br label %return

return:                                           ; preds = %entry, %for.end107
  ret void
}

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #3

declare i32 @size_of_encoded_value(i32) #1

declare void @assemble_align(i32) #1

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #3

declare void @dw2_asm_output_data(i32, i64, i8*, ...) #1

declare i8* @eh_data_format_name(i32) #1

declare void @dw2_asm_output_delta_uleb128(i8*, i8*, i8*, ...) #1

declare void @assemble_name(%struct._IO_FILE*, i8*) #1

declare zeroext i1 @assemble_integer(%struct.rtx_def*, i32, i32, i32) #1

declare void @dw2_asm_output_encoded_addr_rtx(i32, %struct.rtx_def*, i8*, ...) #1

declare void @function_section(%union.tree_node*) #1

declare i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #1

declare void @dw2_asm_output_data_uleb128(i64, i8*, ...) #1

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @add_action_record(%struct.htab* %ar_hash, i32 %filter, i32 %next) #0 {
entry:
  %tmp = alloca %struct.action_record, align 4
  %filter1 = getelementptr inbounds %struct.action_record* %tmp, i64 0, i32 1
  store i32 %filter, i32* %filter1, align 4, !tbaa !89
  %next2 = getelementptr inbounds %struct.action_record* %tmp, i64 0, i32 2
  store i32 %next, i32* %next2, align 4, !tbaa !87
  %0 = bitcast %struct.action_record* %tmp to i8*
  %call = call i8** @htab_find_slot(%struct.htab* %ar_hash, i8* %0, i32 1) #4
  %1 = load i8** %call, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end17

if.then:                                          ; preds = %entry
  %call3 = call noalias i8* @xmalloc(i64 12) #4
  %2 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %2, i64 0, i32 0
  %3 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %action_record_data = getelementptr inbounds %struct.eh_status* %3, i64 0, i32 11
  %4 = load %struct.varray_head_tag** %action_record_data, align 8, !tbaa !54
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %4, i64 0, i32 1
  %5 = load i64* %elements_used, align 8, !tbaa !24
  %add = add i64 %5, 1
  %conv = trunc i64 %add to i32
  %offset = bitcast i8* %call3 to i32*
  store i32 %conv, i32* %offset, align 4, !tbaa !101
  %filter4 = getelementptr inbounds i8* %call3, i64 4
  %6 = bitcast i8* %filter4 to i32*
  store i32 %filter, i32* %6, align 4, !tbaa !89
  %next5 = getelementptr inbounds i8* %call3, i64 8
  %7 = bitcast i8* %next5 to i32*
  store i32 %next, i32* %7, align 4, !tbaa !87
  store i8* %call3, i8** %call, align 8, !tbaa !5
  %8 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh6 = getelementptr inbounds %struct.function* %8, i64 0, i32 0
  %9 = load %struct.eh_status** %eh6, align 8, !tbaa !10
  %action_record_data7 = getelementptr inbounds %struct.eh_status* %9, i64 0, i32 11
  br label %do.body.i

do.body.i:                                        ; preds = %if.end19.i, %if.then
  %value.addr.0.i = phi i32 [ %filter, %if.then ], [ %shr.i, %if.end19.i ]
  %value.addr.0.tr.i = trunc i32 %value.addr.0.i to i8
  %conv.i = and i8 %value.addr.0.tr.i, 127
  %shr.i = ashr i32 %value.addr.0.i, 7
  %cmp.i = icmp eq i32 %shr.i, 0
  %and3.i = and i8 %value.addr.0.tr.i, 64
  %cmp4.i = icmp eq i8 %and3.i, 0
  %or.cond.i = and i1 %cmp.i, %cmp4.i
  br i1 %or.cond.i, label %lor.end.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %do.body.i
  %cmp6.i = icmp eq i32 %shr.i, -1
  br i1 %cmp6.i, label %land.rhs.i, label %lor.end.i

land.rhs.i:                                       ; preds = %lor.rhs.i
  %and9.i = and i32 %value.addr.0.i, 64
  %phitmp.i = icmp eq i32 %and9.i, 0
  br label %lor.end.i

lor.end.i:                                        ; preds = %land.rhs.i, %lor.rhs.i, %do.body.i
  %10 = phi i1 [ true, %lor.rhs.i ], [ %phitmp.i, %land.rhs.i ], [ false, %do.body.i ]
  %or.i = or i8 %value.addr.0.tr.i, -128
  %or.conv.i = select i1 %10, i8 %or.i, i8 %conv.i
  %11 = load %struct.varray_head_tag** %action_record_data7, align 8, !tbaa !5
  %elements_used.i = getelementptr inbounds %struct.varray_head_tag* %11, i64 0, i32 1
  %12 = load i64* %elements_used.i, align 8, !tbaa !24
  %num_elements.i = getelementptr inbounds %struct.varray_head_tag* %11, i64 0, i32 0
  %13 = load i64* %num_elements.i, align 8, !tbaa !27
  %cmp15.i = icmp ult i64 %12, %13
  br i1 %cmp15.i, label %if.end19.i, label %if.then17.i

if.then17.i:                                      ; preds = %lor.end.i
  %mul.i = shl i64 %13, 1
  %call.i = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %11, i64 %mul.i) #4
  store %struct.varray_head_tag* %call.i, %struct.varray_head_tag** %action_record_data7, align 8, !tbaa !5
  %elements_used20.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call.i, i64 0, i32 1
  %.pre.i = load i64* %elements_used20.phi.trans.insert.i, align 8, !tbaa !24
  br label %if.end19.i

if.end19.i:                                       ; preds = %if.then17.i, %lor.end.i
  %14 = phi i64 [ %12, %lor.end.i ], [ %.pre.i, %if.then17.i ]
  %15 = phi %struct.varray_head_tag* [ %11, %lor.end.i ], [ %call.i, %if.then17.i ]
  %elements_used20.i = getelementptr inbounds %struct.varray_head_tag* %15, i64 0, i32 1
  %inc.i = add i64 %14, 1
  store i64 %inc.i, i64* %elements_used20.i, align 8, !tbaa !24
  %data.i = getelementptr inbounds %struct.varray_head_tag* %15, i64 0, i32 4
  %uc.i = bitcast %union.varray_data_tag* %data.i to [1 x i8]*
  %arrayidx.i = getelementptr inbounds [1 x i8]* %uc.i, i64 0, i64 %14
  store i8 %or.conv.i, i8* %arrayidx.i, align 1, !tbaa !56
  br i1 %10, label %do.body.i, label %push_sleb128.exit

push_sleb128.exit:                                ; preds = %if.end19.i
  %tobool = icmp eq i32 %next, 0
  %.pre = load %struct.function** @cfun, align 8, !tbaa !5
  %eh15.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 0
  %.pre63 = load %struct.eh_status** %eh15.phi.trans.insert, align 8, !tbaa !10
  br i1 %tobool, label %if.end, label %if.then8

if.then8:                                         ; preds = %push_sleb128.exit
  %action_record_data10 = getelementptr inbounds %struct.eh_status* %.pre63, i64 0, i32 11
  %16 = load %struct.varray_head_tag** %action_record_data10, align 8, !tbaa !54
  %elements_used11 = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 1
  %17 = load i64* %elements_used11, align 8, !tbaa !24
  %conv1330 = zext i32 %next to i64
  %add12.neg = add i64 %conv1330, 4294967295
  %sub = sub i64 %add12.neg, %17
  %conv14 = trunc i64 %sub to i32
  br label %if.end

if.end:                                           ; preds = %push_sleb128.exit, %if.then8
  %next.addr.0 = phi i32 [ %conv14, %if.then8 ], [ 0, %push_sleb128.exit ]
  %action_record_data16 = getelementptr inbounds %struct.eh_status* %.pre63, i64 0, i32 11
  br label %do.body.i39

do.body.i39:                                      ; preds = %if.end19.i61, %if.end
  %value.addr.0.i31 = phi i32 [ %next.addr.0, %if.end ], [ %shr.i34, %if.end19.i61 ]
  %value.addr.0.tr.i32 = trunc i32 %value.addr.0.i31 to i8
  %conv.i33 = and i8 %value.addr.0.tr.i32, 127
  %shr.i34 = ashr i32 %value.addr.0.i31, 7
  %cmp.i35 = icmp eq i32 %shr.i34, 0
  %and3.i36 = and i8 %value.addr.0.tr.i32, 64
  %cmp4.i37 = icmp eq i8 %and3.i36, 0
  %or.cond.i38 = and i1 %cmp.i35, %cmp4.i37
  br i1 %or.cond.i38, label %lor.end.i50, label %lor.rhs.i41

lor.rhs.i41:                                      ; preds = %do.body.i39
  %cmp6.i40 = icmp eq i32 %shr.i34, -1
  br i1 %cmp6.i40, label %land.rhs.i44, label %lor.end.i50

land.rhs.i44:                                     ; preds = %lor.rhs.i41
  %and9.i42 = and i32 %value.addr.0.i31, 64
  %phitmp.i43 = icmp eq i32 %and9.i42, 0
  br label %lor.end.i50

lor.end.i50:                                      ; preds = %land.rhs.i44, %lor.rhs.i41, %do.body.i39
  %18 = phi i1 [ true, %lor.rhs.i41 ], [ %phitmp.i43, %land.rhs.i44 ], [ false, %do.body.i39 ]
  %or.i45 = or i8 %value.addr.0.tr.i32, -128
  %or.conv.i46 = select i1 %18, i8 %or.i45, i8 %conv.i33
  %19 = load %struct.varray_head_tag** %action_record_data16, align 8, !tbaa !5
  %elements_used.i47 = getelementptr inbounds %struct.varray_head_tag* %19, i64 0, i32 1
  %20 = load i64* %elements_used.i47, align 8, !tbaa !24
  %num_elements.i48 = getelementptr inbounds %struct.varray_head_tag* %19, i64 0, i32 0
  %21 = load i64* %num_elements.i48, align 8, !tbaa !27
  %cmp15.i49 = icmp ult i64 %20, %21
  br i1 %cmp15.i49, label %if.end19.i61, label %if.then17.i55

if.then17.i55:                                    ; preds = %lor.end.i50
  %mul.i51 = shl i64 %21, 1
  %call.i52 = call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %19, i64 %mul.i51) #4
  store %struct.varray_head_tag* %call.i52, %struct.varray_head_tag** %action_record_data16, align 8, !tbaa !5
  %elements_used20.phi.trans.insert.i53 = getelementptr inbounds %struct.varray_head_tag* %call.i52, i64 0, i32 1
  %.pre.i54 = load i64* %elements_used20.phi.trans.insert.i53, align 8, !tbaa !24
  br label %if.end19.i61

if.end19.i61:                                     ; preds = %if.then17.i55, %lor.end.i50
  %22 = phi i64 [ %20, %lor.end.i50 ], [ %.pre.i54, %if.then17.i55 ]
  %23 = phi %struct.varray_head_tag* [ %19, %lor.end.i50 ], [ %call.i52, %if.then17.i55 ]
  %elements_used20.i56 = getelementptr inbounds %struct.varray_head_tag* %23, i64 0, i32 1
  %inc.i57 = add i64 %22, 1
  store i64 %inc.i57, i64* %elements_used20.i56, align 8, !tbaa !24
  %data.i58 = getelementptr inbounds %struct.varray_head_tag* %23, i64 0, i32 4
  %uc.i59 = bitcast %union.varray_data_tag* %data.i58 to [1 x i8]*
  %arrayidx.i60 = getelementptr inbounds [1 x i8]* %uc.i59, i64 0, i64 %22
  store i8 %or.conv.i46, i8* %arrayidx.i60, align 1, !tbaa !56
  br i1 %18, label %do.body.i39, label %if.end17

if.end17:                                         ; preds = %if.end19.i61, %entry
  %new.0.in = phi i8* [ %1, %entry ], [ %call3, %if.end19.i61 ]
  %offset18 = bitcast i8* %new.0.in to i32*
  %24 = load i32* %offset18, align 4, !tbaa !101
  ret i32 %24
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #5

declare %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.bitmap_head_def* @bitmap_initialize(%struct.bitmap_head_def*) #1

declare i32 @bitmap_operation(%struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32) #1

declare void @bitmap_set_bit(%struct.bitmap_head_def*, i32) #1

declare void @start_sequence() #1

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #1

declare void @end_sequence() #1

declare %struct.rtx_def* @emit_insns_before(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @emit_library_call(%struct.rtx_def*, i32, i32, i32, ...) #1

declare %struct.rtx_def* @delete_insn(%struct.rtx_def*) #1

declare void @emit_cmp_and_jump_insns(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind readonly uwtable
define internal i32 @ttypes_filter_hash(i8* nocapture readonly %pentry) #2 {
entry:
  %t = bitcast i8* %pentry to %union.tree_node**
  %0 = load %union.tree_node** %t, align 8, !tbaa !74
  %1 = ptrtoint %union.tree_node* %0 to i64
  %.tr = trunc i64 %1 to i32
  %conv = and i32 %.tr, 262143
  ret i32 %conv
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @ttypes_filter_eq(i8* nocapture readonly %pentry, i8* readnone %pdata) #2 {
entry:
  %0 = bitcast i8* %pdata to %union.tree_node*
  %t = bitcast i8* %pentry to %union.tree_node**
  %1 = load %union.tree_node** %t, align 8, !tbaa !74
  %cmp = icmp eq %union.tree_node* %1, %0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @ehspec_filter_hash(i8* nocapture readonly %pentry) #2 {
entry:
  %t = bitcast i8* %pentry to %union.tree_node**
  %list.08 = load %union.tree_node** %t, align 8
  %tobool9 = icmp eq %union.tree_node* %list.08, null
  br i1 %tobool9, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %list.011 = phi %union.tree_node* [ %list.0, %for.body ], [ %list.08, %entry ]
  %h.010 = phi i32 [ %conv4, %for.body ], [ 0, %entry ]
  %shl = shl i32 %h.010, 5
  %shr = lshr i32 %h.010, 27
  %add = or i32 %shl, %shr
  %conv = zext i32 %add to i64
  %value = getelementptr inbounds %union.tree_node* %list.011, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !59
  %2 = ptrtoint %union.tree_node* %1 to i64
  %and = and i64 %2, 262143
  %add3 = add i64 %and, %conv
  %conv4 = trunc i64 %add3 to i32
  %chain = getelementptr inbounds %union.tree_node* %list.011, i64 0, i32 0, i32 0, i32 0
  %list.0 = load %union.tree_node** %chain, align 8
  %tobool = icmp eq %union.tree_node* %list.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %h.0.lcssa = phi i32 [ 0, %entry ], [ %conv4, %for.body ]
  ret i32 %h.0.lcssa
}

; Function Attrs: nounwind uwtable
define internal i32 @ehspec_filter_eq(i8* nocapture readonly %pentry, i8* nocapture readonly %pdata) #0 {
entry:
  %t = bitcast i8* %pentry to %union.tree_node**
  %0 = load %union.tree_node** %t, align 8, !tbaa !74
  %t2 = bitcast i8* %pdata to %union.tree_node**
  %1 = load %union.tree_node** %t2, align 8, !tbaa !74
  %call = tail call i32 @type_list_equal(%union.tree_node* %0, %union.tree_node* %1) #4
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @add_ttypes_entry(%struct.htab* %ttypes_hash, %union.tree_node* %type) #0 {
entry:
  %0 = bitcast %union.tree_node* %type to i8*
  %1 = ptrtoint %union.tree_node* %type to i64
  %.tr = trunc i64 %1 to i32
  %conv = and i32 %.tr, 262143
  %call = tail call i8** @htab_find_slot_with_hash(%struct.htab* %ttypes_hash, i8* %0, i32 %conv, i32 1) #4
  %2 = load i8** %call, align 8
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %if.then, label %if.end25

if.then:                                          ; preds = %entry
  %call2 = tail call noalias i8* @xmalloc(i64 16) #4
  %t = bitcast i8* %call2 to %union.tree_node**
  store %union.tree_node* %type, %union.tree_node** %t, align 8, !tbaa !74
  %3 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh = getelementptr inbounds %struct.function* %3, i64 0, i32 0
  %4 = load %struct.eh_status** %eh, align 8, !tbaa !10
  %ttype_data = getelementptr inbounds %struct.eh_status* %4, i64 0, i32 9
  %5 = load %struct.varray_head_tag** %ttype_data, align 8, !tbaa !30
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %5, i64 0, i32 1
  %6 = load i64* %elements_used, align 8, !tbaa !24
  %add = add i64 %6, 1
  %conv3 = trunc i64 %add to i32
  %filter = getelementptr inbounds i8* %call2, i64 8
  %7 = bitcast i8* %filter to i32*
  store i32 %conv3, i32* %7, align 4, !tbaa !76
  store i8* %call2, i8** %call, align 8, !tbaa !5
  %8 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh4 = getelementptr inbounds %struct.function* %8, i64 0, i32 0
  %9 = load %struct.eh_status** %eh4, align 8, !tbaa !10
  %ttype_data5 = getelementptr inbounds %struct.eh_status* %9, i64 0, i32 9
  %10 = load %struct.varray_head_tag** %ttype_data5, align 8, !tbaa !30
  %elements_used6 = getelementptr inbounds %struct.varray_head_tag* %10, i64 0, i32 1
  %11 = load i64* %elements_used6, align 8, !tbaa !24
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %10, i64 0, i32 0
  %12 = load i64* %num_elements, align 8, !tbaa !27
  %cmp9 = icmp ult i64 %11, %12
  br i1 %cmp9, label %if.end, label %if.then11

if.then11:                                        ; preds = %if.then
  %mul = shl i64 %12, 1
  %call17 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %10, i64 %mul) #4
  %13 = load %struct.function** @cfun, align 8, !tbaa !5
  %eh18 = getelementptr inbounds %struct.function* %13, i64 0, i32 0
  %14 = load %struct.eh_status** %eh18, align 8, !tbaa !10
  %ttype_data19 = getelementptr inbounds %struct.eh_status* %14, i64 0, i32 9
  store %struct.varray_head_tag* %call17, %struct.varray_head_tag** %ttype_data19, align 8, !tbaa !30
  %.pre = load %struct.function** @cfun, align 8, !tbaa !5
  %eh20.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 0
  %.pre34 = load %struct.eh_status** %eh20.phi.trans.insert, align 8, !tbaa !10
  %ttype_data21.phi.trans.insert = getelementptr inbounds %struct.eh_status* %.pre34, i64 0, i32 9
  %.pre35 = load %struct.varray_head_tag** %ttype_data21.phi.trans.insert, align 8, !tbaa !30
  %elements_used22.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %.pre35, i64 0, i32 1
  %.pre36 = load i64* %elements_used22.phi.trans.insert, align 8, !tbaa !24
  br label %if.end

if.end:                                           ; preds = %if.then, %if.then11
  %15 = phi i64 [ %11, %if.then ], [ %.pre36, %if.then11 ]
  %16 = phi %struct.varray_head_tag* [ %10, %if.then ], [ %.pre35, %if.then11 ]
  %elements_used22 = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 1
  %inc = add i64 %15, 1
  store i64 %inc, i64* %elements_used22, align 8, !tbaa !24
  %data = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %15
  store %union.tree_node* %type, %union.tree_node** %arrayidx, align 8, !tbaa !5
  br label %if.end25

if.end25:                                         ; preds = %if.end, %entry
  %n.0.in = phi i8* [ %call2, %if.end ], [ %2, %entry ]
  %filter26 = getelementptr inbounds i8* %n.0.in, i64 8
  %17 = bitcast i8* %filter26 to i32*
  %18 = load i32* %17, align 4, !tbaa !76
  ret i32 %18
}

declare %union.tree_node* @build_int_2_wide(i64, i64) #1

declare i32 @type_list_equal(%union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal i32 @t2r_mark_1(i8** nocapture readonly %slot, i8* nocapture readnone %data) #0 {
entry:
  %0 = load i8** %slot, align 8, !tbaa !5
  %1 = bitcast i8* %0 to %union.tree_node*
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %do.end9, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %call = tail call i32 @ggc_set_mark(i8* %0) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %do.body1, label %do.end9

do.body1:                                         ; preds = %land.lhs.true
  %2 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %2, i64 0, i32 1
  %3 = load i64* %elements_used, align 8, !tbaa !24
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %2, i64 0, i32 0
  %4 = load i64* %num_elements, align 8, !tbaa !27
  %cmp2 = icmp ult i64 %3, %4
  br i1 %cmp2, label %if.end, label %if.then3

if.then3:                                         ; preds = %do.body1
  %mul = shl i64 %4, 1
  %call5 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %2, i64 %mul) #4
  store %struct.varray_head_tag* %call5, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !5
  %elements_used6.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call5, i64 0, i32 1
  %.pre = load i64* %elements_used6.phi.trans.insert, align 8, !tbaa !24
  br label %if.end

if.end:                                           ; preds = %do.body1, %if.then3
  %5 = phi i64 [ %3, %do.body1 ], [ %.pre, %if.then3 ]
  %6 = phi %struct.varray_head_tag* [ %2, %do.body1 ], [ %call5, %if.then3 ]
  %elements_used6 = getelementptr inbounds %struct.varray_head_tag* %6, i64 0, i32 1
  %inc = add i64 %5, 1
  store i64 %inc, i64* %elements_used6, align 8, !tbaa !24
  %data7 = getelementptr inbounds %struct.varray_head_tag* %6, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data7 to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %5
  store %union.tree_node* %1, %union.tree_node** %arrayidx, align 8, !tbaa !5
  br label %do.end9

do.end9:                                          ; preds = %land.lhs.true, %entry, %if.end
  ret i32 1
}

declare %struct.rtx_def* @get_label_from_map(%struct.inline_remap*, i32) #1

declare i32 @get_max_uid() #1

declare void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @remove_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @alloc_EXPR_LIST(i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal i32 @mark_ehl_map_entry(i8** nocapture readonly %pentry, i8* nocapture readnone %data) #0 {
entry:
  %0 = load i8** %pentry, align 8
  %label = bitcast i8* %0 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %label, align 8, !tbaa !69
  %cmp = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = bitcast %struct.rtx_def* %1 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %2) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.then, label %do.end

if.then:                                          ; preds = %land.lhs.true
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %1) #4
  br label %do.end

do.end:                                           ; preds = %land.lhs.true, %entry, %if.then
  ret i32 1
}

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #4

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"int", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !6, i64 0}
!6 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!7 = metadata !{metadata !8, metadata !6, i64 24}
!8 = metadata !{metadata !"tree_list", metadata !9, i64 0, metadata !6, i64 24, metadata !6, i64 32}
!9 = metadata !{metadata !"tree_common", metadata !6, i64 0, metadata !6, i64 8, metadata !3, i64 16, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19}
!10 = metadata !{metadata !11, metadata !6, i64 0}
!11 = metadata !{metadata !"function", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !6, i64 24, metadata !6, i64 32, metadata !6, i64 40, metadata !6, i64 48, metadata !6, i64 56, metadata !2, i64 64, metadata !2, i64 68, metadata !2, i64 72, metadata !2, i64 76, metadata !6, i64 80, metadata !12, i64 88, metadata !6, i64 120, metadata !6, i64 128, metadata !6, i64 136, metadata !6, i64 144, metadata !2, i64 152, metadata !6, i64 160, metadata !6, i64 168, metadata !6, i64 176, metadata !6, i64 184, metadata !6, i64 192, metadata !6, i64 200, metadata !6, i64 208, metadata !6, i64 216, metadata !6, i64 224, metadata !6, i64 232, metadata !6, i64 240, metadata !6, i64 248, metadata !6, i64 256, metadata !13, i64 264, metadata !6, i64 272, metadata !6, i64 280, metadata !6, i64 288, metadata !6, i64 296, metadata !2, i64 304, metadata !6, i64 312, metadata !6, i64 320, metadata !2, i64 328, metadata !2, i64 332, metadata !2, i64 336, metadata !6, i64 344, metadata !2, i64 352, metadata !2, i64 356, metadata !6, i64 360, metadata !6, i64 368, metadata !6, i64 376, metadata !2, i64 384, metadata !2, i64 388, metadata !6, i64 392, metadata !2, i64 400, metadata !2, i64 404, metadata !6, i64 408, metadata !6, i64 416, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426}
!12 = metadata !{metadata !"ix86_args", metadata !2, i64 0, metadata !2, i64 4, metadata !2, i64 8, metadata !2, i64 12, metadata !2, i64 16, metadata !2, i64 20, metadata !2, i64 24}
!13 = metadata !{metadata !"long long", metadata !3, i64 0}
!14 = metadata !{metadata !15, metadata !6, i64 8}
!15 = metadata !{metadata !"eh_status", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !6, i64 24, metadata !6, i64 32, metadata !6, i64 40, metadata !6, i64 48, metadata !2, i64 56, metadata !2, i64 60, metadata !6, i64 64, metadata !6, i64 72, metadata !6, i64 80, metadata !6, i64 88, metadata !2, i64 96, metadata !2, i64 100, metadata !6, i64 104, metadata !6, i64 112, metadata !6, i64 120, metadata !6, i64 128, metadata !6, i64 136}
!16 = metadata !{metadata !15, metadata !2, i64 60}
!17 = metadata !{metadata !18, metadata !2, i64 24}
!18 = metadata !{metadata !"eh_region", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !2, i64 24, metadata !6, i64 32, metadata !3, i64 40, metadata !3, i64 48, metadata !6, i64 80, metadata !6, i64 88, metadata !6, i64 96, metadata !6, i64 104}
!19 = metadata !{metadata !15, metadata !6, i64 0}
!20 = metadata !{metadata !18, metadata !6, i64 8}
!21 = metadata !{metadata !18, metadata !6, i64 16}
!22 = metadata !{metadata !18, metadata !6, i64 0}
!23 = metadata !{metadata !15, metadata !6, i64 32}
!24 = metadata !{metadata !25, metadata !26, i64 8}
!25 = metadata !{metadata !"varray_head_tag", metadata !26, i64 0, metadata !26, i64 8, metadata !26, i64 16, metadata !6, i64 24, metadata !3, i64 32}
!26 = metadata !{metadata !"long", metadata !3, i64 0}
!27 = metadata !{metadata !25, metadata !26, i64 0}
!28 = metadata !{metadata !15, metadata !6, i64 40}
!29 = metadata !{metadata !15, metadata !6, i64 48}
!30 = metadata !{metadata !15, metadata !6, i64 64}
!31 = metadata !{metadata !15, metadata !6, i64 88}
!32 = metadata !{metadata !15, metadata !2, i64 96}
!33 = metadata !{metadata !34, metadata !6, i64 0}
!34 = metadata !{metadata !"call_site_record", metadata !6, i64 0, metadata !2, i64 8}
!35 = metadata !{metadata !15, metadata !6, i64 104}
!36 = metadata !{metadata !15, metadata !6, i64 112}
!37 = metadata !{metadata !15, metadata !6, i64 120}
!38 = metadata !{metadata !15, metadata !6, i64 128}
!39 = metadata !{metadata !15, metadata !6, i64 136}
!40 = metadata !{metadata !18, metadata !3, i64 40}
!41 = metadata !{metadata !42, metadata !6, i64 0}
!42 = metadata !{metadata !"", metadata !6, i64 0}
!43 = metadata !{metadata !44, metadata !6, i64 24}
!44 = metadata !{metadata !"", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !6, i64 24}
!45 = metadata !{metadata !46, metadata !6, i64 0}
!46 = metadata !{metadata !"", metadata !6, i64 0, metadata !2, i64 8}
!47 = metadata !{metadata !48, metadata !6, i64 0}
!48 = metadata !{metadata !"", metadata !6, i64 0, metadata !6, i64 8}
!49 = metadata !{metadata !18, metadata !6, i64 80}
!50 = metadata !{metadata !18, metadata !6, i64 104}
!51 = metadata !{metadata !18, metadata !6, i64 88}
!52 = metadata !{metadata !18, metadata !6, i64 96}
!53 = metadata !{metadata !15, metadata !6, i64 72}
!54 = metadata !{metadata !15, metadata !6, i64 80}
!55 = metadata !{metadata !15, metadata !6, i64 16}
!56 = metadata !{metadata !3, metadata !3, i64 0}
!57 = metadata !{metadata !15, metadata !6, i64 24}
!58 = metadata !{metadata !44, metadata !6, i64 16}
!59 = metadata !{metadata !8, metadata !6, i64 32}
!60 = metadata !{metadata !9, metadata !6, i64 0}
!61 = metadata !{metadata !44, metadata !6, i64 8}
!62 = metadata !{metadata !44, metadata !6, i64 0}
!63 = metadata !{metadata !48, metadata !6, i64 8}
!64 = metadata !{metadata !13, metadata !13, i64 0}
!65 = metadata !{metadata !66, metadata !66, i64 0}
!66 = metadata !{metadata !"_Bool", metadata !3, i64 0}
!67 = metadata !{i8 0, i8 2}
!68 = metadata !{metadata !15, metadata !2, i64 56}
!69 = metadata !{metadata !70, metadata !6, i64 0}
!70 = metadata !{metadata !"ehl_map_entry", metadata !6, i64 0, metadata !6, i64 8}
!71 = metadata !{metadata !70, metadata !6, i64 8}
!72 = metadata !{metadata !73, metadata !6, i64 48}
!73 = metadata !{metadata !"inline_remap", metadata !2, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !6, i64 24, metadata !6, i64 32, metadata !6, i64 40, metadata !6, i64 48, metadata !2, i64 56, metadata !2, i64 60, metadata !6, i64 64, metadata !2, i64 72, metadata !6, i64 80, metadata !6, i64 88, metadata !6, i64 96, metadata !6, i64 104, metadata !6, i64 112, metadata !6, i64 120, metadata !6, i64 128, metadata !2, i64 136, metadata !3, i64 144, metadata !6, i64 624, metadata !6, i64 632, metadata !3, i64 640}
!74 = metadata !{metadata !75, metadata !6, i64 0}
!75 = metadata !{metadata !"ttypes_filter", metadata !6, i64 0, metadata !2, i64 8}
!76 = metadata !{metadata !75, metadata !2, i64 8}
!77 = metadata !{metadata !46, metadata !2, i64 8}
!78 = metadata !{metadata !18, metadata !6, i64 32}
!79 = metadata !{metadata !80, metadata !2, i64 16}
!80 = metadata !{metadata !"bitmap_element_def", metadata !6, i64 0, metadata !6, i64 8, metadata !2, i64 16, metadata !3, i64 24}
!81 = metadata !{metadata !82, metadata !6, i64 16}
!82 = metadata !{metadata !"reachable_info", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16}
!83 = metadata !{metadata !82, metadata !6, i64 0}
!84 = metadata !{metadata !82, metadata !6, i64 8}
!85 = metadata !{metadata !15, metadata !2, i64 100}
!86 = metadata !{metadata !34, metadata !2, i64 8}
!87 = metadata !{metadata !88, metadata !2, i64 8}
!88 = metadata !{metadata !"action_record", metadata !2, i64 0, metadata !2, i64 4, metadata !2, i64 8}
!89 = metadata !{metadata !88, metadata !2, i64 4}
!90 = metadata !{metadata !91, metadata !13, i64 32}
!91 = metadata !{metadata !"tree_int_cst", metadata !9, i64 0, metadata !6, i64 24, metadata !92, i64 32}
!92 = metadata !{metadata !"", metadata !13, i64 0, metadata !13, i64 8}
!93 = metadata !{metadata !94, metadata !6, i64 136}
!94 = metadata !{metadata !"gcc_target", metadata !95, i64 0, metadata !97, i64 168, metadata !6, i64 240, metadata !6, i64 248, metadata !6, i64 256, metadata !6, i64 264, metadata !6, i64 272, metadata !6, i64 280, metadata !6, i64 288, metadata !6, i64 296, metadata !6, i64 304, metadata !6, i64 312, metadata !6, i64 320, metadata !66, i64 328, metadata !66, i64 329, metadata !6, i64 336}
!95 = metadata !{metadata !"asm_out", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !96, i64 24, metadata !96, i64 56, metadata !6, i64 88, metadata !6, i64 96, metadata !6, i64 104, metadata !6, i64 112, metadata !6, i64 120, metadata !6, i64 128, metadata !6, i64 136, metadata !6, i64 144, metadata !6, i64 152, metadata !6, i64 160}
!96 = metadata !{metadata !"asm_int_op", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !6, i64 24}
!97 = metadata !{metadata !"sched", metadata !6, i64 0, metadata !6, i64 8, metadata !6, i64 16, metadata !6, i64 24, metadata !6, i64 32, metadata !6, i64 40, metadata !6, i64 48, metadata !6, i64 56, metadata !6, i64 64}
!98 = metadata !{metadata !99, metadata !6, i64 32}
!99 = metadata !{metadata !"tree_identifier", metadata !9, i64 0, metadata !100, i64 24}
!100 = metadata !{metadata !"ht_identifier", metadata !2, i64 0, metadata !6, i64 8}
!101 = metadata !{metadata !88, metadata !2, i64 0}
