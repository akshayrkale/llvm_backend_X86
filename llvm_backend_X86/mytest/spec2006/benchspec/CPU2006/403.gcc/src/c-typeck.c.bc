; ModuleID = 'c-typeck.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.function = type opaque
%struct.lang_decl = type { %struct.c_lang_decl, %union.tree_node* }
%struct.c_lang_decl = type { i8, [3 x i8] }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.constructor_stack = type { %struct.constructor_stack*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.init_node*, i32, i32, %union.tree_node*, %struct.constructor_range_stack*, i8, i8, i8, i8, i8, i8, i8 }
%struct.init_node = type { %struct.init_node*, %struct.init_node*, %struct.init_node*, i32, %union.tree_node*, %union.tree_node* }
%struct.constructor_range_stack = type { %struct.constructor_range_stack*, %struct.constructor_range_stack*, %struct.constructor_stack*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.spelling = type { i32, %union.anon.4 }
%union.anon.4 = type { i8* }
%struct.initializer_stack = type { %struct.initializer_stack*, %union.tree_node*, i8*, %struct.constructor_stack*, %struct.constructor_range_stack*, %union.tree_node*, %struct.spelling*, %struct.spelling*, i32, i8, i8, i8, i8 }
%struct.c_switch = type { %union.tree_node*, %struct.splay_tree_s*, %struct.c_switch* }
%struct.splay_tree_s = type { %struct.splay_tree_node_s*, i32 (i64, i64)*, void (i64)*, void (i64)*, i8* (i32, i8*)*, void (i8*, i8*)*, i8* }
%struct.splay_tree_node_s = type { i64, i64, %struct.splay_tree_node_s*, %struct.splay_tree_node_s* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type { i32, [1 x %union.tree_node*] }
%struct.stmt_tree_s = type { %union.tree_node*, %union.tree_node*, i8*, i32 }

@global_trees = external global [51 x %union.tree_node*]
@.str = private unnamed_addr constant [28 x i8] c"`%s' has an incomplete type\00", align 1
@.str1 = private unnamed_addr constant [7 x i8] c"struct\00", align 1
@.str2 = private unnamed_addr constant [6 x i8] c"union\00", align 1
@.str3 = private unnamed_addr constant [5 x i8] c"enum\00", align 1
@.str4 = private unnamed_addr constant [31 x i8] c"invalid use of void expression\00", align 1
@.str5 = private unnamed_addr constant [37 x i8] c"invalid use of flexible array member\00", align 1
@.str6 = private unnamed_addr constant [45 x i8] c"invalid use of array with unspecified bounds\00", align 1
@.str7 = private unnamed_addr constant [11 x i8] c"c-typeck.c\00", align 1
@__FUNCTION__.incomplete_type_error = private unnamed_addr constant [22 x i8] c"incomplete_type_error\00", align 1
@.str8 = private unnamed_addr constant [38 x i8] c"invalid use of undefined type `%s %s'\00", align 1
@.str9 = private unnamed_addr constant [39 x i8] c"invalid use of incomplete typedef `%s'\00", align 1
@targetm = external global %struct.gcc_target
@integer_types = external global [11 x %union.tree_node*]
@pedantic = external global i32
@.str10 = private unnamed_addr constant [45 x i8] c"function types not truly compatible in ISO C\00", align 1
@warn_pointer_arith = external global i32
@.str11 = private unnamed_addr constant [34 x i8] c"sizeof applied to a function type\00", align 1
@.str12 = private unnamed_addr constant [30 x i8] c"sizeof applied to a void type\00", align 1
@.str13 = private unnamed_addr constant [37 x i8] c"sizeof applied to an incomplete type\00", align 1
@c_global_trees = external global [32 x %union.tree_node*]
@.str14 = private unnamed_addr constant [44 x i8] c"arithmetic on pointer to an incomplete type\00", align 1
@current_function_decl = external global %union.tree_node*
@optimize = external global i32
@tree_code_type = external global [256 x i8]
@flag_traditional = external global i32
@flag_allow_single_precision = external global i32
@.str15 = private unnamed_addr constant [41 x i8] c"void value not ignored as it ought to be\00", align 1
@.str16 = private unnamed_addr constant [28 x i8] c"%s has no member named `%s'\00", align 1
@.str17 = private unnamed_addr constant [10 x i8] c"structure\00", align 1
@.str18 = private unnamed_addr constant [62 x i8] c"request for member `%s' in something not a structure or union\00", align 1
@flag_volatile = external global i32
@.str19 = private unnamed_addr constant [41 x i8] c"dereferencing pointer to incomplete type\00", align 1
@skip_evaluation = external global i32
@.str20 = private unnamed_addr constant [31 x i8] c"dereferencing `void *' pointer\00", align 1
@.str21 = private unnamed_addr constant [30 x i8] c"invalid type argument of `%s'\00", align 1
@.str22 = private unnamed_addr constant [37 x i8] c"subscript missing in array reference\00", align 1
@warn_char_subscripts = external global i32
@.str23 = private unnamed_addr constant [32 x i8] c"array subscript has type `char'\00", align 1
@.str24 = private unnamed_addr constant [34 x i8] c"array subscript is not an integer\00", align 1
@.str25 = private unnamed_addr constant [44 x i8] c"ISO C forbids subscripting `register' array\00", align 1
@flag_isoc99 = external global i32
@.str26 = private unnamed_addr constant [46 x i8] c"ISO C89 forbids subscripting non-lvalue array\00", align 1
@.str27 = private unnamed_addr constant [26 x i8] c"subscript has type `char'\00", align 1
@.str28 = private unnamed_addr constant [47 x i8] c"subscripted value is neither array nor pointer\00", align 1
@.str29 = private unnamed_addr constant [15 x i8] c"array indexing\00", align 1
@.str30 = private unnamed_addr constant [41 x i8] c"`%s' undeclared here (not in a function)\00", align 1
@.str31 = private unnamed_addr constant [45 x i8] c"`%s' undeclared (first use in this function)\00", align 1
@undeclared_variable_notice = internal unnamed_addr global i1 false
@.str32 = private unnamed_addr constant [50 x i8] c"(Each undeclared identifier is reported only once\00", align 1
@.str33 = private unnamed_addr constant [34 x i8] c"for each function it appears in.)\00", align 1
@.str34 = private unnamed_addr constant [50 x i8] c"local declaration of `%s' hides instance variable\00", align 1
@lang_set_decl_assembler_name = external global void (%union.tree_node*)*
@.str35 = private unnamed_addr constant [32 x i8] c"called object is not a function\00", align 1
@current_function_returns_abnormally = external global i32
@warn_format = external global i32
@warn_parentheses = external global i32
@.str36 = private unnamed_addr constant [47 x i8] c"suggest parentheses around + or - inside shift\00", align 1
@.str37 = private unnamed_addr constant [40 x i8] c"suggest parentheses around && within ||\00", align 1
@.str38 = private unnamed_addr constant [54 x i8] c"suggest parentheses around arithmetic in operand of |\00", align 1
@.str39 = private unnamed_addr constant [54 x i8] c"suggest parentheses around comparison in operand of |\00", align 1
@.str40 = private unnamed_addr constant [54 x i8] c"suggest parentheses around arithmetic in operand of ^\00", align 1
@.str41 = private unnamed_addr constant [54 x i8] c"suggest parentheses around comparison in operand of ^\00", align 1
@.str42 = private unnamed_addr constant [50 x i8] c"suggest parentheses around + or - in operand of &\00", align 1
@.str43 = private unnamed_addr constant [54 x i8] c"suggest parentheses around comparison in operand of &\00", align 1
@extra_warnings = external global i32
@.str44 = private unnamed_addr constant [64 x i8] c"comparisons like X<=Y<=Z do not have their mathematical meaning\00", align 1
@warn_div_by_zero = external global i32
@.str45 = private unnamed_addr constant [17 x i8] c"division by zero\00", align 1
@.str46 = private unnamed_addr constant [30 x i8] c"right shift count is negative\00", align 1
@.str47 = private unnamed_addr constant [35 x i8] c"right shift count >= width of type\00", align 1
@.str48 = private unnamed_addr constant [29 x i8] c"left shift count is negative\00", align 1
@.str49 = private unnamed_addr constant [34 x i8] c"left shift count >= width of type\00", align 1
@.str50 = private unnamed_addr constant [24 x i8] c"shift count is negative\00", align 1
@.str51 = private unnamed_addr constant [29 x i8] c"shift count >= width of type\00", align 1
@warn_float_equal = external global i32
@.str52 = private unnamed_addr constant [49 x i8] c"comparing floating point with == or != is unsafe\00", align 1
@.str53 = private unnamed_addr constant [59 x i8] c"ISO C forbids comparison of `void *' with function pointer\00", align 1
@.str54 = private unnamed_addr constant [50 x i8] c"comparison of distinct pointer types lacks a cast\00", align 1
@.str55 = private unnamed_addr constant [39 x i8] c"comparison between pointer and integer\00", align 1
@.str56 = private unnamed_addr constant [59 x i8] c"ISO C forbids ordered comparisons of pointers to functions\00", align 1
@.str57 = private unnamed_addr constant [47 x i8] c"comparison of complete and incomplete pointers\00", align 1
@.str58 = private unnamed_addr constant [48 x i8] c"ordered comparison of pointer with integer zero\00", align 1
@.str59 = private unnamed_addr constant [52 x i8] c"unordered comparison on non-floating point argument\00", align 1
@warn_sign_compare = external global i32
@.str60 = private unnamed_addr constant [39 x i8] c"comparison between signed and unsigned\00", align 1
@.str61 = private unnamed_addr constant [47 x i8] c"comparison of promoted ~unsigned with constant\00", align 1
@.str62 = private unnamed_addr constant [47 x i8] c"comparison of promoted ~unsigned with unsigned\00", align 1
@.str63 = private unnamed_addr constant [34 x i8] c"wrong type argument to unary plus\00", align 1
@.str64 = private unnamed_addr constant [35 x i8] c"wrong type argument to unary minus\00", align 1
@.str65 = private unnamed_addr constant [51 x i8] c"ISO C does not support `~' for complex conjugation\00", align 1
@.str66 = private unnamed_addr constant [38 x i8] c"wrong type argument to bit-complement\00", align 1
@.str67 = private unnamed_addr constant [27 x i8] c"wrong type argument to abs\00", align 1
@.str68 = private unnamed_addr constant [35 x i8] c"wrong type argument to conjugation\00", align 1
@.str69 = private unnamed_addr constant [46 x i8] c"wrong type argument to unary exclamation mark\00", align 1
@.str70 = private unnamed_addr constant [54 x i8] c"ISO C does not support `++' and `--' on complex types\00", align 1
@.str71 = private unnamed_addr constant [33 x i8] c"wrong type argument to increment\00", align 1
@.str72 = private unnamed_addr constant [33 x i8] c"wrong type argument to decrement\00", align 1
@.str73 = private unnamed_addr constant [42 x i8] c"increment of pointer to unknown structure\00", align 1
@.str74 = private unnamed_addr constant [42 x i8] c"decrement of pointer to unknown structure\00", align 1
@.str75 = private unnamed_addr constant [28 x i8] c"invalid lvalue in increment\00", align 1
@.str76 = private unnamed_addr constant [28 x i8] c"invalid lvalue in decrement\00", align 1
@.str77 = private unnamed_addr constant [10 x i8] c"increment\00", align 1
@.str78 = private unnamed_addr constant [10 x i8] c"decrement\00", align 1
@.str79 = private unnamed_addr constant [28 x i8] c"invalid lvalue in unary `&'\00", align 1
@.str80 = private unnamed_addr constant [59 x i8] c"attempt to take address of bit-field structure member `%s'\00", align 1
@.str81 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str82 = private unnamed_addr constant [28 x i8] c"%s of read-only member `%s'\00", align 1
@.str83 = private unnamed_addr constant [30 x i8] c"%s of read-only variable `%s'\00", align 1
@.str84 = private unnamed_addr constant [25 x i8] c"%s of read-only location\00", align 1
@.str85 = private unnamed_addr constant [38 x i8] c"cannot take address of bit-field `%s'\00", align 1
@.str86 = private unnamed_addr constant [54 x i8] c"global register variable `%s' used in nested function\00", align 1
@.str87 = private unnamed_addr constant [47 x i8] c"register variable `%s' used in nested function\00", align 1
@.str88 = private unnamed_addr constant [51 x i8] c"address of global register variable `%s' requested\00", align 1
@.str89 = private unnamed_addr constant [52 x i8] c"cannot put object with volatile field into register\00", align 1
@.str90 = private unnamed_addr constant [44 x i8] c"address of register variable `%s' requested\00", align 1
@.str91 = private unnamed_addr constant [51 x i8] c"signed and unsigned type in conditional expression\00", align 1
@.str92 = private unnamed_addr constant [55 x i8] c"ISO C forbids conditional expr with only one void side\00", align 1
@.str93 = private unnamed_addr constant [69 x i8] c"ISO C forbids conditional expr between `void *' and function pointer\00", align 1
@.str94 = private unnamed_addr constant [48 x i8] c"pointer type mismatch in conditional expression\00", align 1
@.str95 = private unnamed_addr constant [56 x i8] c"pointer/integer type mismatch in conditional expression\00", align 1
@flag_cond_mismatch = external global i32
@.str96 = private unnamed_addr constant [40 x i8] c"type mismatch in conditional expression\00", align 1
@.str97 = private unnamed_addr constant [26 x i8] c"cast specifies array type\00", align 1
@.str98 = private unnamed_addr constant [29 x i8] c"cast specifies function type\00", align 1
@.str99 = private unnamed_addr constant [49 x i8] c"ISO C forbids casting nonscalar to the same type\00", align 1
@.str100 = private unnamed_addr constant [34 x i8] c"ISO C forbids casts to union type\00", align 1
@.str102 = private unnamed_addr constant [50 x i8] c"cast to union type from type not present in union\00", align 1
@warn_cast_qual = external global i32
@.str103 = private unnamed_addr constant [42 x i8] c"cast adds new qualifiers to function type\00", align 1
@.str104 = private unnamed_addr constant [50 x i8] c"cast discards qualifiers from pointer target type\00", align 1
@.str105 = private unnamed_addr constant [47 x i8] c"cast from pointer to integer of different size\00", align 1
@warn_bad_function_cast = external global i32
@.str106 = private unnamed_addr constant [34 x i8] c"cast does not match function type\00", align 1
@.str107 = private unnamed_addr constant [47 x i8] c"cast to pointer from integer of different size\00", align 1
@warn_strict_prototypes = external global i32
@.str108 = private unnamed_addr constant [29 x i8] c"invalid lvalue in assignment\00", align 1
@.str109 = private unnamed_addr constant [11 x i8] c"assignment\00", align 1
@target_flags = external global i32
@warn_traditional = external global i32
@in_system_header = external global i32
@.str110 = private unnamed_addr constant [57 x i8] c"traditional C rejects automatic aggregate initialization\00", align 1
@.str111 = private unnamed_addr constant [31 x i8] c"(near initialization for `%s')\00", align 1
@constructor_no_implicit = global i32 0, align 4
@constructor_decl = internal unnamed_addr global %union.tree_node* null, align 8
@constructor_asmspec = internal unnamed_addr global i8* null, align 8
@require_constant_value = internal unnamed_addr global i32 0, align 4
@require_constant_elements = internal unnamed_addr global i32 0, align 4
@constructor_stack = common global %struct.constructor_stack* null, align 8
@constructor_range_stack = common global %struct.constructor_range_stack* null, align 8
@constructor_elements = internal unnamed_addr global %union.tree_node* null, align 8
@spelling = internal unnamed_addr global %struct.spelling* null, align 8
@spelling_base = internal unnamed_addr global %struct.spelling* null, align 8
@spelling_size = internal unnamed_addr global i32 0, align 4
@constructor_subconstants_deferred = internal unnamed_addr global i32 0, align 4
@constructor_top_level = internal unnamed_addr global i32 0, align 4
@initializer_stack = common global %struct.initializer_stack* null, align 8
@constructor_designated = internal unnamed_addr global i32 0, align 4
@.str112 = private unnamed_addr constant [12 x i8] c"(anonymous)\00", align 1
@missing_braces_mentioned = internal unnamed_addr global i1 false
@__FUNCTION__.finish_init = private unnamed_addr constant [12 x i8] c"finish_init\00", align 1
@constructor_type = internal unnamed_addr global %union.tree_node* null, align 8
@constructor_fields = internal unnamed_addr global %union.tree_node* null, align 8
@constructor_index = internal unnamed_addr global %union.tree_node* null, align 8
@constructor_max_index = internal unnamed_addr global %union.tree_node* null, align 8
@constructor_unfilled_index = internal unnamed_addr global %union.tree_node* null, align 8
@constructor_unfilled_fields = internal unnamed_addr global %union.tree_node* null, align 8
@constructor_bit_index = internal unnamed_addr global %union.tree_node* null, align 8
@constructor_constant = internal unnamed_addr global i32 0, align 4
@constructor_simple = internal unnamed_addr global i32 0, align 4
@constructor_erroneous = internal unnamed_addr global i32 0, align 4
@constructor_pending_elts = internal unnamed_addr global %struct.init_node* null, align 8
@constructor_depth = internal unnamed_addr global i32 0, align 4
@constructor_incremental = internal unnamed_addr global i32 0, align 4
@designator_depth = internal unnamed_addr global i32 0, align 4
@designator_errorneous = internal unnamed_addr global i1 false
@sizetype_tab = external global [6 x %union.tree_node*]
@mode_unit_size = external constant [59 x i8]
@mode_size = external constant [59 x i8]
@.str113 = private unnamed_addr constant [40 x i8] c"extra brace group at end of initializer\00", align 1
@warn_missing_braces = external global i32
@.str114 = private unnamed_addr constant [34 x i8] c"missing braces around initializer\00", align 1
@.str115 = private unnamed_addr constant [33 x i8] c"braces around scalar initializer\00", align 1
@__FUNCTION__.pop_init_level = private unnamed_addr constant [15 x i8] c"pop_init_level\00", align 1
@.str116 = private unnamed_addr constant [60 x i8] c"initialization of flexible array member in a nested context\00", align 1
@.str117 = private unnamed_addr constant [42 x i8] c"initialization of a flexible array member\00", align 1
@.str118 = private unnamed_addr constant [20 x i8] c"missing initializer\00", align 1
@.str119 = private unnamed_addr constant [25 x i8] c"empty scalar initializer\00", align 1
@.str120 = private unnamed_addr constant [37 x i8] c"extra elements in scalar initializer\00", align 1
@.str121 = private unnamed_addr constant [39 x i8] c"nonconstant array index in initializer\00", align 1
@.str122 = private unnamed_addr constant [37 x i8] c"array index in non-array initializer\00", align 1
@.str123 = private unnamed_addr constant [48 x i8] c"array index in initializer exceeds array bounds\00", align 1
@.str124 = private unnamed_addr constant [33 x i8] c"empty index range in initializer\00", align 1
@.str125 = private unnamed_addr constant [54 x i8] c"array index range in initializer exceeds array bounds\00", align 1
@.str126 = private unnamed_addr constant [46 x i8] c"field name not in record or union initializer\00", align 1
@.str127 = private unnamed_addr constant [44 x i8] c"unknown field `%s' specified in initializer\00", align 1
@.str128 = private unnamed_addr constant [42 x i8] c"excess elements in char array initializer\00", align 1
@.str129 = private unnamed_addr constant [38 x i8] c"excess elements in struct initializer\00", align 1
@.str130 = private unnamed_addr constant [53 x i8] c"non-static initialization of a flexible array member\00", align 1
@.str131 = private unnamed_addr constant [37 x i8] c"excess elements in union initializer\00", align 1
@.str132 = private unnamed_addr constant [47 x i8] c"traditional C rejects initialization of unions\00", align 1
@.str133 = private unnamed_addr constant [37 x i8] c"excess elements in array initializer\00", align 1
@.str134 = private unnamed_addr constant [38 x i8] c"excess elements in vector initializer\00", align 1
@.str135 = private unnamed_addr constant [38 x i8] c"excess elements in scalar initializer\00", align 1
@__FUNCTION__.process_init_element = private unnamed_addr constant [21 x i8] c"process_init_element\00", align 1
@.str136 = private unnamed_addr constant [43 x i8] c"argument of `asm' is not a constant string\00", align 1
@.str137 = private unnamed_addr constant [38 x i8] c"asm template is not a string constant\00", align 1
@ridpointers = external global %union.tree_node**
@.str138 = private unnamed_addr constant [28 x i8] c"%s qualifier ignored on asm\00", align 1
@.str139 = private unnamed_addr constant [32 x i8] c"invalid lvalue in asm statement\00", align 1
@.str140 = private unnamed_addr constant [22 x i8] c"modification by `asm'\00", align 1
@.str141 = private unnamed_addr constant [54 x i8] c"function declared `noreturn' has a `return' statement\00", align 1
@current_function_returns_null = external global i32
@warn_return_type = external global i32
@.str142 = private unnamed_addr constant [55 x i8] c"`return' with no value, in function returning non-void\00", align 1
@.str143 = private unnamed_addr constant [50 x i8] c"`return' with a value, in function returning void\00", align 1
@.str144 = private unnamed_addr constant [7 x i8] c"return\00", align 1
@current_function_returns_value = external global i32
@.str145 = private unnamed_addr constant [43 x i8] c"function returns address of local variable\00", align 1
@.str146 = private unnamed_addr constant [31 x i8] c"switch quantity not an integer\00", align 1
@.str147 = private unnamed_addr constant [57 x i8] c"`long' switch expression not converted to `int' in ISO C\00", align 1
@switch_stack = internal unnamed_addr global %struct.c_switch* null, align 8
@.str148 = private unnamed_addr constant [41 x i8] c"case label not within a switch statement\00", align 1
@.str149 = private unnamed_addr constant [46 x i8] c"`default' label not within a switch statement\00", align 1
@.str150 = private unnamed_addr constant [36 x i8] c"initializer element is not constant\00", align 1
@.str151 = private unnamed_addr constant [51 x i8] c"initializer element is not computable at load time\00", align 1
@.str152 = private unnamed_addr constant [48 x i8] c"initialized field with side-effects overwritten\00", align 1
@__FUNCTION__.set_nonincremental_init_from_string = private unnamed_addr constant [36 x i8] c"set_nonincremental_init_from_string\00", align 1
@__FUNCTION__.set_designator = private unnamed_addr constant [15 x i8] c"set_designator\00", align 1
@.str153 = private unnamed_addr constant [40 x i8] c"initialization designators may not nest\00", align 1
@.str154 = private unnamed_addr constant [12 x i8] c"<anonymous>\00", align 1
@.str155 = private unnamed_addr constant [40 x i8] c"char-array initialized from wide string\00", align 1
@.str156 = private unnamed_addr constant [43 x i8] c"int-array initialized from non-wide string\00", align 1
@.str157 = private unnamed_addr constant [50 x i8] c"initializer-string for array of chars is too long\00", align 1
@.str158 = private unnamed_addr constant [53 x i8] c"array initialized from non-constant array expression\00", align 1
@flag_pedantic_errors = external global i32
@.str159 = private unnamed_addr constant [15 x i8] c"initialization\00", align 1
@.str160 = private unnamed_addr constant [45 x i8] c"variable-sized object may not be initialized\00", align 1
@.str161 = private unnamed_addr constant [20 x i8] c"invalid initializer\00", align 1
@.str162 = private unnamed_addr constant [5 x i8] c"[%d]\00", align 1
@.str163 = private unnamed_addr constant [53 x i8] c"%s makes qualified function pointer from unqualified\00", align 1
@.str164 = private unnamed_addr constant [48 x i8] c"%s discards qualifiers from pointer target type\00", align 1
@.str165 = private unnamed_addr constant [50 x i8] c"ISO C prohibits argument conversion to union type\00", align 1
@.str166 = private unnamed_addr constant [55 x i8] c"ISO C forbids %s between function pointer and `void *'\00", align 1
@.str167 = private unnamed_addr constant [43 x i8] c"pointer targets in %s differ in signedness\00", align 1
@.str168 = private unnamed_addr constant [34 x i8] c"%s from incompatible pointer type\00", align 1
@.str169 = private unnamed_addr constant [45 x i8] c"%s makes pointer from integer without a cast\00", align 1
@.str170 = private unnamed_addr constant [45 x i8] c"%s makes integer from pointer without a cast\00", align 1
@.str171 = private unnamed_addr constant [42 x i8] c"incompatible type for argument %d of `%s'\00", align 1
@.str172 = private unnamed_addr constant [60 x i8] c"incompatible type for argument %d of indirect function call\00", align 1
@.str173 = private unnamed_addr constant [25 x i8] c"incompatible types in %s\00", align 1
@.str174 = private unnamed_addr constant [23 x i8] c"passing arg %d of `%s'\00", align 1
@.str175 = private unnamed_addr constant [38 x i8] c"passing arg %d of pointer to function\00", align 1
@warn_unused_value = external global i32
@.str176 = private unnamed_addr constant [52 x i8] c"left-hand operand of comma expression has no effect\00", align 1
@.str177 = private unnamed_addr constant [56 x i8] c"ISO C forbids use of conditional expressions as lvalues\00", align 1
@.str178 = private unnamed_addr constant [53 x i8] c"ISO C forbids use of compound expressions as lvalues\00", align 1
@.str179 = private unnamed_addr constant [49 x i8] c"ISO C forbids use of cast expressions as lvalues\00", align 1
@.str180 = private unnamed_addr constant [45 x i8] c"pointer of type `void *' used in subtraction\00", align 1
@.str181 = private unnamed_addr constant [42 x i8] c"pointer to a function used in subtraction\00", align 1
@.str182 = private unnamed_addr constant [31 x i8] c"types are not quite compatible\00", align 1
@.str183 = private unnamed_addr constant [36 x i8] c"too many arguments to function `%s'\00", align 1
@.str184 = private unnamed_addr constant [31 x i8] c"too many arguments to function\00", align 1
@.str185 = private unnamed_addr constant [42 x i8] c"type of formal parameter %d is incomplete\00", align 1
@warn_conversion = external global i32
@.str186 = private unnamed_addr constant [52 x i8] c"%s as integer rather than floating due to prototype\00", align 1
@.str187 = private unnamed_addr constant [51 x i8] c"%s as integer rather than complex due to prototype\00", align 1
@.str188 = private unnamed_addr constant [52 x i8] c"%s as complex rather than floating due to prototype\00", align 1
@.str189 = private unnamed_addr constant [52 x i8] c"%s as floating rather than integer due to prototype\00", align 1
@.str190 = private unnamed_addr constant [51 x i8] c"%s as complex rather than integer due to prototype\00", align 1
@.str191 = private unnamed_addr constant [52 x i8] c"%s as floating rather than complex due to prototype\00", align 1
@.str192 = private unnamed_addr constant [52 x i8] c"%s as `float' rather than `double' due to prototype\00", align 1
@.str193 = private unnamed_addr constant [41 x i8] c"%s with different width due to prototype\00", align 1
@.str194 = private unnamed_addr constant [32 x i8] c"%s as unsigned due to prototype\00", align 1
@.str195 = private unnamed_addr constant [30 x i8] c"%s as signed due to prototype\00", align 1
@.str196 = private unnamed_addr constant [35 x i8] c"too few arguments to function `%s'\00", align 1
@.str197 = private unnamed_addr constant [30 x i8] c"too few arguments to function\00", align 1

; Function Attrs: nounwind uwtable
define %union.tree_node* @require_complete_type(%union.tree_node* readonly %value) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !1
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp = icmp eq %union.tree_node* %1, %value
  %cmp2 = icmp eq %union.tree_node* %0, %1
  %or.cond = or i1 %cmp, %cmp2
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  %size = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 2
  %2 = bitcast i32* %size to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !8
  %cmp4 = icmp eq %union.tree_node* %3, null
  br i1 %cmp4, label %if.end6, label %return

if.end6:                                          ; preds = %if.end
  tail call void @incomplete_type_error(%union.tree_node* %value, %union.tree_node* %0)
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

return:                                           ; preds = %entry, %if.end, %if.end6
  %retval.0 = phi %union.tree_node* [ %4, %if.end6 ], [ %value, %if.end ], [ %1, %entry ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define void @incomplete_type_error(%union.tree_node* readonly %value, %union.tree_node* nocapture readonly %type) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.end54, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq %union.tree_node* %value, null
  br i1 %cmp1, label %retry, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %code3 = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 0, i32 2
  %bf.load4 = load i32* %code3, align 8
  %0 = and i32 %bf.load4, 254
  %switch = icmp eq i32 %0, 34
  br i1 %switch, label %if.then12, label %retry

if.then12:                                        ; preds = %land.lhs.true
  %name = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 8
  %1 = load %union.tree_node** %name, align 8, !tbaa !11
  %id = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 1
  %2 = getelementptr inbounds i8** %id, i64 1
  %3 = load i8** %2, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([28 x i8]* @.str, i64 0, i64 0), i8* %3) #6
  br label %if.end54

retry:                                            ; preds = %land.lhs.true, %if.end, %if.end28
  %bf.load15 = phi i32 [ %bf.load15.pre, %if.end28 ], [ %bf.load, %if.end ], [ %bf.load, %land.lhs.true ]
  %type.addr.0 = phi %union.tree_node* [ %7, %if.end28 ], [ %type, %if.end ], [ %type, %land.lhs.true ]
  %bf.clear16 = and i32 %bf.load15, 255
  switch i32 %bf.clear16, label %sw.default [
    i32 20, label %sw.epilog.loopexit
    i32 21, label %sw.epilog.loopexit80
    i32 10, label %sw.epilog
    i32 5, label %sw.bb19
    i32 18, label %sw.bb20
  ]

sw.bb19:                                          ; preds = %retry
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([31 x i8]* @.str4, i64 0, i64 0)) #6
  br label %if.end54

sw.bb20:                                          ; preds = %retry
  %values = getelementptr inbounds %union.tree_node* %type.addr.0, i64 0, i32 0, i32 1
  %4 = load i8** %values, align 8
  %tobool = icmp eq i8* %4, null
  br i1 %tobool, label %if.end31, label %if.then22

if.then22:                                        ; preds = %sw.bb20
  %maxval = getelementptr inbounds i8* %4, i64 112
  %5 = bitcast i8* %maxval to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !16
  %cmp26 = icmp eq %union.tree_node* %6, null
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.then22
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([37 x i8]* @.str5, i64 0, i64 0)) #6
  br label %if.end54

if.end28:                                         ; preds = %if.then22
  %type30 = getelementptr inbounds %union.tree_node* %type.addr.0, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type30, align 8, !tbaa !1
  %code14.phi.trans.insert = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load15.pre = load i32* %code14.phi.trans.insert, align 8
  br label %retry

if.end31:                                         ; preds = %sw.bb20
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([45 x i8]* @.str6, i64 0, i64 0)) #6
  br label %if.end54

sw.default:                                       ; preds = %retry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 163, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.incomplete_type_error, i64 0, i64 0)) #7
  unreachable

sw.epilog.loopexit:                               ; preds = %retry
  br label %sw.epilog

sw.epilog.loopexit80:                             ; preds = %retry
  br label %sw.epilog

sw.epilog:                                        ; preds = %retry, %sw.epilog.loopexit80, %sw.epilog.loopexit
  %type_code_string.0 = phi i8* [ getelementptr inbounds ([7 x i8]* @.str1, i64 0, i64 0), %sw.epilog.loopexit ], [ getelementptr inbounds ([6 x i8]* @.str2, i64 0, i64 0), %sw.epilog.loopexit80 ], [ getelementptr inbounds ([5 x i8]* @.str3, i64 0, i64 0), %retry ]
  %8 = getelementptr inbounds %union.tree_node* %type.addr.0, i64 0, i32 0, i32 11
  %9 = load %union.tree_node** %8, align 8, !tbaa !17
  %code35 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 2
  %bf.load36 = load i32* %code35, align 8
  %bf.clear37 = and i32 %bf.load36, 255
  %cmp38 = icmp eq i32 %bf.clear37, 1
  br i1 %cmp38, label %if.then39, label %if.else45

if.then39:                                        ; preds = %sw.epilog
  %id43 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds i8** %id43, i64 1
  %11 = load i8** %10, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([38 x i8]* @.str8, i64 0, i64 0), i8* %type_code_string.0, i8* %11) #6
  br label %if.end54

if.else45:                                        ; preds = %sw.epilog
  %name49 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 8
  %12 = load %union.tree_node** %name49, align 8, !tbaa !11
  %id51 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds i8** %id51, i64 1
  %14 = load i8** %13, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([39 x i8]* @.str9, i64 0, i64 0), i8* %14) #6
  br label %if.end54

if.end54:                                         ; preds = %if.then39, %if.else45, %entry, %sw.bb19, %if.then27, %if.end31, %if.then12
  ret void
}

declare void @error(i8*, ...) #1

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @common_type(%union.tree_node* %t1, %union.tree_node* %t2) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %t1, %t2
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp1 = icmp eq %union.tree_node* %0, %t1
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp eq %union.tree_node* %0, %t2
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.end3
  %1 = load %union.tree_node* (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 3), align 8, !tbaa !18
  %call = tail call %union.tree_node* %1(%union.tree_node* %t1, %union.tree_node* %t2) #6
  %code = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp7 = icmp eq i32 %bf.clear, 10
  br i1 %cmp7, label %if.then8, label %if.end12

if.then8:                                         ; preds = %if.end6
  %type = bitcast %union.tree_node* %t1 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type, i64 0, i32 6
  %bf.load9 = load i32* %precision, align 4
  %bf.clear10 = and i32 %bf.load9, 511
  %call11 = tail call %union.tree_node* @type_for_size(i32 %bf.clear10, i32 1) #6
  br label %if.end12

if.end12:                                         ; preds = %if.then8, %if.end6
  %t1.addr.0 = phi %union.tree_node* [ %call11, %if.then8 ], [ %t1, %if.end6 ]
  %code14 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 0, i32 2
  %bf.load15 = load i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %cmp17 = icmp eq i32 %bf.clear16, 10
  br i1 %cmp17, label %if.then18, label %if.end24

if.then18:                                        ; preds = %if.end12
  %type19 = bitcast %union.tree_node* %t2 to %struct.tree_type*
  %precision20 = getelementptr inbounds %struct.tree_type* %type19, i64 0, i32 6
  %bf.load21 = load i32* %precision20, align 4
  %bf.clear22 = and i32 %bf.load21, 511
  %call23 = tail call %union.tree_node* @type_for_size(i32 %bf.clear22, i32 1) #6
  %code30.phi.trans.insert = getelementptr inbounds %union.tree_node* %call23, i64 0, i32 0, i32 0, i32 2
  %bf.load31.pre = load i32* %code30.phi.trans.insert, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then18, %if.end12
  %bf.load124 = phi i32 [ %bf.load31.pre, %if.then18 ], [ %bf.load15, %if.end12 ]
  %t2.addr.0 = phi %union.tree_node* [ %call23, %if.then18 ], [ %t2, %if.end12 ]
  %code26 = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load27 = load i32* %code26, align 8
  %bf.clear28 = and i32 %bf.load27, 255
  %bf.clear32 = and i32 %bf.load124, 255
  %cmp33 = icmp eq i32 %bf.clear28, 8
  %cmp34 = icmp eq i32 %bf.clear32, 8
  %or.cond = or i1 %cmp33, %cmp34
  br i1 %or.cond, label %if.then35, label %if.end63

if.then35:                                        ; preds = %if.end24
  br i1 %cmp33, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.then35
  %type38 = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type38, align 8, !tbaa !1
  br label %cond.end

cond.end:                                         ; preds = %if.then35, %cond.true
  %cond = phi %union.tree_node* [ %2, %cond.true ], [ %t1.addr.0, %if.then35 ]
  br i1 %cmp34, label %cond.true40, label %cond.end44

cond.true40:                                      ; preds = %cond.end
  %type42 = getelementptr inbounds %union.tree_node* %t2.addr.0, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type42, align 8, !tbaa !1
  br label %cond.end44

cond.end44:                                       ; preds = %cond.end, %cond.true40
  %cond45 = phi %union.tree_node* [ %3, %cond.true40 ], [ %t2.addr.0, %cond.end ]
  %call46 = tail call %union.tree_node* @common_type(%union.tree_node* %cond, %union.tree_node* %cond45)
  br i1 %cmp33, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.end44
  %type49 = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type49, align 8, !tbaa !1
  %cmp50 = icmp eq %union.tree_node* %4, %call46
  br i1 %cmp50, label %if.then51, label %if.else

if.then51:                                        ; preds = %land.lhs.true
  %call52 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t1.addr.0, %union.tree_node* %call) #6
  br label %return

if.else:                                          ; preds = %land.lhs.true, %cond.end44
  br i1 %cmp34, label %land.lhs.true54, label %if.else60

land.lhs.true54:                                  ; preds = %if.else
  %type56 = getelementptr inbounds %union.tree_node* %t2.addr.0, i64 0, i32 0, i32 0, i32 1
  %5 = load %union.tree_node** %type56, align 8, !tbaa !1
  %cmp57 = icmp eq %union.tree_node* %5, %call46
  br i1 %cmp57, label %if.then58, label %if.else60

if.then58:                                        ; preds = %land.lhs.true54
  %call59 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t2.addr.0, %union.tree_node* %call) #6
  br label %return

if.else60:                                        ; preds = %land.lhs.true54, %if.else
  %call61 = tail call %union.tree_node* @build_complex_type(%union.tree_node* %call46) #6
  %call62 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %call61, %union.tree_node* %call) #6
  br label %return

if.end63:                                         ; preds = %if.end24
  switch i32 %bf.clear28, label %sw.default [
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 13, label %sw.bb153
    i32 18, label %sw.bb225
    i32 23, label %sw.bb261
  ]

sw.bb:                                            ; preds = %if.end63, %if.end63
  %cmp64 = icmp eq i32 %bf.clear28, 7
  %cmp66 = icmp ne i32 %bf.clear32, 7
  %or.cond431 = and i1 %cmp64, %cmp66
  br i1 %or.cond431, label %if.then67, label %if.end69

if.then67:                                        ; preds = %sw.bb
  %call68 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t1.addr.0, %union.tree_node* %call) #6
  br label %return

if.end69:                                         ; preds = %sw.bb
  %cmp70 = icmp eq i32 %bf.clear32, 7
  %cmp72 = icmp ne i32 %bf.clear28, 7
  %or.cond432 = and i1 %cmp70, %cmp72
  br i1 %or.cond432, label %if.then73, label %if.end75

if.then73:                                        ; preds = %if.end69
  %call74 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t2.addr.0, %union.tree_node* %call) #6
  br label %return

if.end75:                                         ; preds = %if.end69
  %type76 = bitcast %union.tree_node* %t1.addr.0 to %struct.tree_type*
  %precision77 = getelementptr inbounds %struct.tree_type* %type76, i64 0, i32 6
  %bf.load78 = load i32* %precision77, align 4
  %bf.clear79 = and i32 %bf.load78, 511
  %type80 = bitcast %union.tree_node* %t2.addr.0 to %struct.tree_type*
  %precision81 = getelementptr inbounds %struct.tree_type* %type80, i64 0, i32 6
  %bf.load82 = load i32* %precision81, align 4
  %bf.clear83 = and i32 %bf.load82, 511
  %cmp84 = icmp ugt i32 %bf.clear79, %bf.clear83
  br i1 %cmp84, label %if.then85, label %if.else87

if.then85:                                        ; preds = %if.end75
  %call86 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t1.addr.0, %union.tree_node* %call) #6
  br label %return

if.else87:                                        ; preds = %if.end75
  %cmp96 = icmp ugt i32 %bf.clear83, %bf.clear79
  br i1 %cmp96, label %if.then97, label %if.end100

if.then97:                                        ; preds = %if.else87
  %call98 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t2.addr.0, %union.tree_node* %call) #6
  br label %return

if.end100:                                        ; preds = %if.else87
  %6 = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 15
  %7 = load %union.tree_node** %6, align 8, !tbaa !24
  %8 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 8, !tbaa !7
  %cmp102 = icmp eq %union.tree_node* %7, %8
  br i1 %cmp102, label %if.then107, label %lor.lhs.false103

lor.lhs.false103:                                 ; preds = %if.end100
  %9 = getelementptr inbounds %union.tree_node* %t2.addr.0, i64 0, i32 0, i32 15
  %10 = load %union.tree_node** %9, align 8, !tbaa !24
  %cmp106 = icmp eq %union.tree_node* %10, %8
  br i1 %cmp106, label %if.then107, label %if.end109

if.then107:                                       ; preds = %lor.lhs.false103, %if.end100
  %call108 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %8, %union.tree_node* %call) #6
  br label %return

if.end109:                                        ; preds = %lor.lhs.false103
  %11 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !tbaa !7
  %cmp112 = icmp eq %union.tree_node* %7, %11
  %cmp116 = icmp eq %union.tree_node* %10, %11
  %or.cond577 = or i1 %cmp112, %cmp116
  br i1 %or.cond577, label %if.then117, label %if.end132

if.then117:                                       ; preds = %if.end109
  %bf.clear120 = and i32 %bf.load27, 8192
  %tobool = icmp eq i32 %bf.clear120, 0
  br i1 %tobool, label %lor.lhs.false121, label %if.end130

lor.lhs.false121:                                 ; preds = %if.then117
  %bf.clear126 = and i32 %bf.load124, 8192
  %tobool127 = icmp eq i32 %bf.clear126, 0
  %.val = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8
  %.val605 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 8
  %t1.addr.1.pre = select i1 %tobool127, %union.tree_node* %.val, %union.tree_node* %.val605
  br label %if.end130

if.end130:                                        ; preds = %lor.lhs.false121, %if.then117
  %t1.addr.1 = phi %union.tree_node* [ %8, %if.then117 ], [ %t1.addr.1.pre, %lor.lhs.false121 ]
  %call131 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t1.addr.1, %union.tree_node* %call) #6
  br label %return

if.end132:                                        ; preds = %if.end109
  %12 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 8, !tbaa !7
  %cmp135 = icmp eq %union.tree_node* %7, %12
  %cmp139 = icmp eq %union.tree_node* %10, %12
  %or.cond578 = or i1 %cmp135, %cmp139
  br i1 %or.cond578, label %if.then140, label %if.end142

if.then140:                                       ; preds = %if.end132
  %call141 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %12, %union.tree_node* %call) #6
  br label %return

if.end142:                                        ; preds = %if.end132
  %bf.clear147 = and i32 %bf.load27, 8192
  %tobool148 = icmp eq i32 %bf.clear147, 0
  br i1 %tobool148, label %if.else151, label %if.then149

if.then149:                                       ; preds = %if.end142
  %call150 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t1.addr.0, %union.tree_node* %call) #6
  br label %return

if.else151:                                       ; preds = %if.end142
  %call152 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t2.addr.0, %union.tree_node* %call) #6
  br label %return

sw.bb153:                                         ; preds = %if.end63
  %type155 = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 0, i32 1
  %13 = load %union.tree_node** %type155, align 8, !tbaa !1
  %type157 = getelementptr inbounds %union.tree_node* %t2.addr.0, i64 0, i32 0, i32 0, i32 1
  %14 = load %union.tree_node** %type157, align 8, !tbaa !1
  %type158 = bitcast %union.tree_node* %13 to %struct.tree_type*
  %15 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 15
  %16 = load %union.tree_node** %15, align 8, !tbaa !24
  %type160 = bitcast %union.tree_node* %14 to %struct.tree_type*
  %17 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 15
  %18 = load %union.tree_node** %17, align 8, !tbaa !24
  %call162 = tail call %union.tree_node* @common_type(%union.tree_node* %16, %union.tree_node* %18)
  %readonly_flag = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 2
  %bf.load164 = load i32* %readonly_flag, align 8
  %bf.lshr165 = lshr i32 %bf.load164, 12
  %bf.clear166 = and i32 %bf.lshr165, 1
  %19 = lshr i32 %bf.load164, 10
  %mul171 = and i32 %19, 2
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type158, i64 0, i32 6
  %bf.load173 = load i32* %restrict_flag, align 4
  %20 = lshr i32 %bf.load173, 19
  %mul176 = and i32 %20, 4
  %bf.clear181 = and i32 %bf.load164, 255
  %cmp182 = icmp eq i32 %bf.clear181, 20
  br i1 %cmp182, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb153
  %type184 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 1
  %21 = load %union.tree_node** %type184, align 8, !tbaa !1
  %tobool185 = icmp ne %union.tree_node* %21, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb153
  %22 = phi i1 [ false, %sw.bb153 ], [ %tobool185, %land.rhs ]
  %land.ext = zext i1 %22 to i32
  %mul186 = shl nuw nsw i32 %land.ext, 3
  %readonly_flag189 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 2
  %bf.load190 = load i32* %readonly_flag189, align 8
  %bf.lshr191 = lshr i32 %bf.load190, 12
  %bf.clear192 = and i32 %bf.lshr191, 1
  %23 = lshr i32 %bf.load190, 10
  %mul199 = and i32 %23, 2
  %restrict_flag202 = getelementptr inbounds %struct.tree_type* %type160, i64 0, i32 6
  %bf.load203 = load i32* %restrict_flag202, align 4
  %24 = lshr i32 %bf.load203, 19
  %mul206 = and i32 %24, 4
  %bf.clear211 = and i32 %bf.load190, 255
  %cmp212 = icmp eq i32 %bf.clear211, 20
  br i1 %cmp212, label %land.rhs213, label %land.end217

land.rhs213:                                      ; preds = %land.end
  %type215 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 1
  %25 = load %union.tree_node** %type215, align 8, !tbaa !1
  %tobool216 = icmp ne %union.tree_node* %25, null
  br label %land.end217

land.end217:                                      ; preds = %land.rhs213, %land.end
  %26 = phi i1 [ false, %land.end ], [ %tobool216, %land.rhs213 ]
  %land.ext218 = zext i1 %26 to i32
  %mul219 = shl nuw nsw i32 %land.ext218, 3
  %or200 = or i32 %bf.clear166, %mul171
  %or207 = or i32 %or200, %mul176
  %or220 = or i32 %or207, %mul186
  %or = or i32 %or220, %mul199
  %or177 = or i32 %or, %bf.clear192
  %or187 = or i32 %or177, %mul206
  %or221 = or i32 %or187, %mul219
  %call222 = tail call %union.tree_node* @c_build_qualified_type(%union.tree_node* %call162, i32 %or221) #6
  %call223 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %call222) #6
  %call224 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %call223, %union.tree_node* %call) #6
  br label %return

sw.bb225:                                         ; preds = %if.end63
  %type227 = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 0, i32 1
  %27 = load %union.tree_node** %type227, align 8, !tbaa !1
  %type229 = getelementptr inbounds %union.tree_node* %t2.addr.0, i64 0, i32 0, i32 0, i32 1
  %28 = load %union.tree_node** %type229, align 8, !tbaa !1
  %call230 = tail call %union.tree_node* @common_type(%union.tree_node* %27, %union.tree_node* %28)
  %29 = load %union.tree_node** %type227, align 8, !tbaa !1
  %cmp233 = icmp eq %union.tree_node* %call230, %29
  br i1 %cmp233, label %land.lhs.true234, label %if.end239

land.lhs.true234:                                 ; preds = %sw.bb225
  %values = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 1
  %30 = load i8** %values, align 8
  %tobool236 = icmp eq i8* %30, null
  br i1 %tobool236, label %if.end239, label %if.then237

if.then237:                                       ; preds = %land.lhs.true234
  %call238 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t1.addr.0, %union.tree_node* %call) #6
  br label %return

if.end239:                                        ; preds = %land.lhs.true234, %sw.bb225
  %31 = load %union.tree_node** %type229, align 8, !tbaa !1
  %cmp242 = icmp eq %union.tree_node* %call230, %31
  br i1 %cmp242, label %land.lhs.true243, label %if.end249

land.lhs.true243:                                 ; preds = %if.end239
  %values245 = getelementptr inbounds %union.tree_node* %t2.addr.0, i64 0, i32 0, i32 1
  %32 = load i8** %values245, align 8
  %tobool246 = icmp eq i8* %32, null
  br i1 %tobool246, label %if.end249, label %if.then247

if.then247:                                       ; preds = %land.lhs.true243
  %call248 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t2.addr.0, %union.tree_node* %call) #6
  br label %return

if.end249:                                        ; preds = %land.lhs.true243, %if.end239
  %values251 = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 1
  %33 = load i8** %values251, align 8
  %tobool252 = icmp ne i8* %33, null
  %cond256 = select i1 %tobool252, %union.tree_node* %t1.addr.0, %union.tree_node* %t2.addr.0
  %values258 = getelementptr inbounds %union.tree_node* %cond256, i64 0, i32 0, i32 1
  %34 = load i8** %values258, align 8
  %35 = bitcast i8* %34 to %union.tree_node*
  %call259 = tail call %union.tree_node* @build_array_type(%union.tree_node* %call230, %union.tree_node* %35) #6
  %call260 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %call259, %union.tree_node* %call) #6
  br label %return

sw.bb261:                                         ; preds = %if.end63
  %type263 = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 0, i32 1
  %36 = load %union.tree_node** %type263, align 8, !tbaa !1
  %type265 = getelementptr inbounds %union.tree_node* %t2.addr.0, i64 0, i32 0, i32 0, i32 1
  %37 = load %union.tree_node** %type265, align 8, !tbaa !1
  %call266 = tail call %union.tree_node* @common_type(%union.tree_node* %36, %union.tree_node* %37)
  %values268 = getelementptr inbounds %union.tree_node* %t1.addr.0, i64 0, i32 0, i32 1
  %38 = load i8** %values268, align 8
  %39 = bitcast i8* %38 to %union.tree_node*
  %values270 = getelementptr inbounds %union.tree_node* %t2.addr.0, i64 0, i32 0, i32 1
  %40 = load i8** %values270, align 8
  %41 = bitcast i8* %40 to %union.tree_node*
  %42 = load %union.tree_node** %type263, align 8, !tbaa !1
  %cmp273 = icmp eq %union.tree_node* %call266, %42
  %tobool277 = icmp eq i8* %40, null
  %or.cond579 = and i1 %cmp273, %tobool277
  br i1 %or.cond579, label %if.then278, label %if.end280

if.then278:                                       ; preds = %sw.bb261
  %call279 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t1.addr.0, %union.tree_node* %call) #6
  br label %return

if.end280:                                        ; preds = %sw.bb261
  %43 = load %union.tree_node** %type265, align 8, !tbaa !1
  %cmp283 = icmp eq %union.tree_node* %call266, %43
  %tobool287 = icmp eq i8* %38, null
  %or.cond581 = and i1 %cmp283, %tobool287
  br i1 %or.cond581, label %if.then288, label %if.end290

if.then288:                                       ; preds = %if.end280
  %call289 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t2.addr.0, %union.tree_node* %call) #6
  br label %return

if.end290:                                        ; preds = %if.end280
  br i1 %tobool287, label %if.then294, label %if.end299

if.then294:                                       ; preds = %if.end290
  %call297 = tail call %union.tree_node* @build_function_type(%union.tree_node* %call266, %union.tree_node* %41) #6
  %call298 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %call297, %union.tree_node* %call) #6
  br label %return

if.end299:                                        ; preds = %if.end290
  br i1 %tobool277, label %if.then303, label %if.end308

if.then303:                                       ; preds = %if.end299
  %call306 = tail call %union.tree_node* @build_function_type(%union.tree_node* %call266, %union.tree_node* %39) #6
  %call307 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %call306, %union.tree_node* %call) #6
  br label %return

if.end308:                                        ; preds = %if.end299
  tail call void @pushlevel(i32 0) #6
  tail call void @declare_parm_level(i32 1) #6
  %call309 = tail call i32 @list_length(%union.tree_node* %39) #6
  %cmp310595 = icmp sgt i32 %call309, 0
  br i1 %cmp310595, label %for.body, label %for.body314.lr.ph

for.body314.lr.ph:                                ; preds = %for.body, %if.end308
  %newargs.0.lcssa = phi %union.tree_node* [ null, %if.end308 ], [ %call311, %for.body ]
  br label %for.body314

for.body:                                         ; preds = %if.end308, %for.body
  %i.0597 = phi i32 [ %inc, %for.body ], [ 0, %if.end308 ]
  %newargs.0596 = phi %union.tree_node* [ %call311, %for.body ], [ null, %if.end308 ]
  %call311 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* null, %union.tree_node* %newargs.0596) #6
  %inc = add nsw i32 %i.0597, 1
  %exitcond = icmp eq i32 %inc, %call309
  br i1 %exitcond, label %for.body314.lr.ph, label %for.body

for.body314:                                      ; preds = %for.body314.lr.ph, %for.inc420
  %n.0589 = phi %union.tree_node* [ %newargs.0.lcssa, %for.body314.lr.ph ], [ %73, %for.inc420 ]
  %p2.0588 = phi %union.tree_node* [ %41, %for.body314.lr.ph ], [ %72, %for.inc420 ]
  %p1.0587 = phi %union.tree_node* [ %39, %for.body314.lr.ph ], [ %71, %for.inc420 ]
  %value = getelementptr inbounds %union.tree_node* %p1.0587, i64 0, i32 0, i32 2
  %44 = bitcast i32* %value to %union.tree_node**
  %45 = load %union.tree_node** %44, align 8, !tbaa !25
  %cmp315 = icmp eq %union.tree_node* %45, null
  %value318 = getelementptr inbounds %union.tree_node* %p2.0588, i64 0, i32 0, i32 2
  %46 = bitcast i32* %value318 to %union.tree_node**
  %47 = load %union.tree_node** %46, align 8, !tbaa !25
  br i1 %cmp315, label %if.then316, label %if.end321

if.then316:                                       ; preds = %for.body314
  %value320 = getelementptr inbounds %union.tree_node* %n.0589, i64 0, i32 0, i32 2
  %48 = bitcast i32* %value320 to %union.tree_node**
  store %union.tree_node* %47, %union.tree_node** %48, align 8, !tbaa !25
  br label %for.inc420

if.end321:                                        ; preds = %for.body314
  %cmp324 = icmp eq %union.tree_node* %47, null
  br i1 %cmp324, label %if.then325, label %if.end330

if.then325:                                       ; preds = %if.end321
  %value329 = getelementptr inbounds %union.tree_node* %n.0589, i64 0, i32 0, i32 2
  %49 = bitcast i32* %value329 to %union.tree_node**
  store %union.tree_node* %45, %union.tree_node** %49, align 8, !tbaa !25
  br label %for.inc420

if.end330:                                        ; preds = %if.end321
  %code334 = getelementptr inbounds %union.tree_node* %45, i64 0, i32 0, i32 0, i32 2
  %bf.load335 = load i32* %code334, align 8
  %bf.clear336 = and i32 %bf.load335, 255
  %cmp337 = icmp ne i32 %bf.clear336, 21
  %cmp343 = icmp eq %union.tree_node* %45, %47
  %or.cond580 = or i1 %cmp337, %cmp343
  br i1 %or.cond580, label %if.end370, label %if.then344

if.then344:                                       ; preds = %if.end330
  %values348 = getelementptr inbounds %union.tree_node* %45, i64 0, i32 0, i32 1
  %50 = load i8** %values348, align 8
  %tobool350582 = icmp eq i8* %50, null
  br i1 %tobool350582, label %if.end370, label %for.body351.lr.ph

for.body351.lr.ph:                                ; preds = %if.then344
  %51 = bitcast i8* %50 to %union.tree_node*
  br label %for.body351

for.body351:                                      ; preds = %for.inc367, %for.body351.lr.ph
  %52 = phi %union.tree_node* [ %47, %for.body351.lr.ph ], [ %.pre.pre, %for.inc367 ]
  %memb.0583 = phi %union.tree_node* [ %51, %for.body351.lr.ph ], [ %57, %for.inc367 ]
  %type353 = getelementptr inbounds %union.tree_node* %memb.0583, i64 0, i32 0, i32 0, i32 1
  %53 = load %union.tree_node** %type353, align 8, !tbaa !1
  %call356 = tail call i32 @comptypes(%union.tree_node* %53, %union.tree_node* %52)
  %tobool357 = icmp eq i32 %call356, 0
  br i1 %tobool357, label %for.inc367, label %if.then358

if.then358:                                       ; preds = %for.body351
  %54 = load %union.tree_node** %46, align 8, !tbaa !25
  %value362 = getelementptr inbounds %union.tree_node* %n.0589, i64 0, i32 0, i32 2
  %55 = bitcast i32* %value362 to %union.tree_node**
  store %union.tree_node* %54, %union.tree_node** %55, align 8, !tbaa !25
  %56 = load i32* @pedantic, align 4, !tbaa !27
  %tobool363 = icmp eq i32 %56, 0
  br i1 %tobool363, label %for.inc420, label %if.then364

if.then364:                                       ; preds = %if.then358
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([45 x i8]* @.str10, i64 0, i64 0)) #6
  br label %for.inc420

for.inc367:                                       ; preds = %for.body351
  %chain = getelementptr inbounds %union.tree_node* %memb.0583, i64 0, i32 0, i32 0, i32 0
  %57 = load %union.tree_node** %chain, align 8, !tbaa !28
  %tobool350 = icmp eq %union.tree_node* %57, null
  %.pre.pre = load %union.tree_node** %46, align 8, !tbaa !25
  br i1 %tobool350, label %if.end370, label %for.body351

if.end370:                                        ; preds = %for.inc367, %if.then344, %if.end330
  %58 = phi %union.tree_node* [ %47, %if.end330 ], [ %47, %if.then344 ], [ %.pre.pre, %for.inc367 ]
  %code374 = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 0, i32 2
  %bf.load375 = load i32* %code374, align 8
  %bf.clear376 = and i32 %bf.load375, 255
  %cmp377 = icmp eq i32 %bf.clear376, 21
  br i1 %cmp377, label %land.lhs.true378, label %if.end412

land.lhs.true378:                                 ; preds = %if.end370
  %59 = load %union.tree_node** %44, align 8, !tbaa !25
  %cmp383 = icmp eq %union.tree_node* %58, %59
  br i1 %cmp383, label %if.end412, label %if.then384

if.then384:                                       ; preds = %land.lhs.true378
  %values389 = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 1
  %60 = load i8** %values389, align 8
  %tobool391584 = icmp eq i8* %60, null
  br i1 %tobool391584, label %if.end412, label %for.body392.lr.ph

for.body392.lr.ph:                                ; preds = %if.then384
  %61 = bitcast i8* %60 to %union.tree_node*
  br label %for.body392

for.body392:                                      ; preds = %for.inc408.for.body392_crit_edge, %for.body392.lr.ph
  %62 = phi %union.tree_node* [ %59, %for.body392.lr.ph ], [ %.pre600, %for.inc408.for.body392_crit_edge ]
  %memb385.0585 = phi %union.tree_node* [ %61, %for.body392.lr.ph ], [ %67, %for.inc408.for.body392_crit_edge ]
  %type394 = getelementptr inbounds %union.tree_node* %memb385.0585, i64 0, i32 0, i32 0, i32 1
  %63 = load %union.tree_node** %type394, align 8, !tbaa !1
  %call397 = tail call i32 @comptypes(%union.tree_node* %63, %union.tree_node* %62)
  %tobool398 = icmp eq i32 %call397, 0
  br i1 %tobool398, label %for.inc408, label %if.then399

if.then399:                                       ; preds = %for.body392
  %64 = load %union.tree_node** %44, align 8, !tbaa !25
  %value403 = getelementptr inbounds %union.tree_node* %n.0589, i64 0, i32 0, i32 2
  %65 = bitcast i32* %value403 to %union.tree_node**
  store %union.tree_node* %64, %union.tree_node** %65, align 8, !tbaa !25
  %66 = load i32* @pedantic, align 4, !tbaa !27
  %tobool404 = icmp eq i32 %66, 0
  br i1 %tobool404, label %for.inc420, label %if.then405

if.then405:                                       ; preds = %if.then399
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([45 x i8]* @.str10, i64 0, i64 0)) #6
  br label %for.inc420

for.inc408:                                       ; preds = %for.body392
  %chain410 = getelementptr inbounds %union.tree_node* %memb385.0585, i64 0, i32 0, i32 0, i32 0
  %67 = load %union.tree_node** %chain410, align 8, !tbaa !28
  %tobool391 = icmp eq %union.tree_node* %67, null
  br i1 %tobool391, label %for.cond390.if.end412.loopexit_crit_edge, label %for.inc408.for.body392_crit_edge

for.inc408.for.body392_crit_edge:                 ; preds = %for.inc408
  %.pre600 = load %union.tree_node** %44, align 8, !tbaa !25
  br label %for.body392

for.cond390.if.end412.loopexit_crit_edge:         ; preds = %for.inc408
  %.pre601.pre = load %union.tree_node** %46, align 8, !tbaa !25
  br label %if.end412

if.end412:                                        ; preds = %if.then384, %for.cond390.if.end412.loopexit_crit_edge, %land.lhs.true378, %if.end370
  %68 = phi %union.tree_node* [ %58, %land.lhs.true378 ], [ %58, %if.end370 ], [ %.pre601.pre, %for.cond390.if.end412.loopexit_crit_edge ], [ %58, %if.then384 ]
  %69 = load %union.tree_node** %44, align 8, !tbaa !25
  %call417 = tail call %union.tree_node* @common_type(%union.tree_node* %69, %union.tree_node* %68)
  %value419 = getelementptr inbounds %union.tree_node* %n.0589, i64 0, i32 0, i32 2
  %70 = bitcast i32* %value419 to %union.tree_node**
  store %union.tree_node* %call417, %union.tree_node** %70, align 8, !tbaa !25
  br label %for.inc420

for.inc420:                                       ; preds = %if.then358, %if.then399, %if.then316, %if.then325, %if.end412, %if.then364, %if.then405
  %chain422 = getelementptr inbounds %union.tree_node* %p1.0587, i64 0, i32 0, i32 0, i32 0
  %71 = load %union.tree_node** %chain422, align 8, !tbaa !28
  %chain424 = getelementptr inbounds %union.tree_node* %p2.0588, i64 0, i32 0, i32 0, i32 0
  %72 = load %union.tree_node** %chain424, align 8, !tbaa !28
  %chain426 = getelementptr inbounds %union.tree_node* %n.0589, i64 0, i32 0, i32 0, i32 0
  %73 = load %union.tree_node** %chain426, align 8, !tbaa !28
  %tobool313 = icmp eq %union.tree_node* %71, null
  br i1 %tobool313, label %for.end427, label %for.body314

for.end427:                                       ; preds = %for.inc420
  %call428 = tail call %union.tree_node* @poplevel(i32 0, i32 0, i32 0) #6
  %call429 = tail call %union.tree_node* @build_function_type(%union.tree_node* %call266, %union.tree_node* %newargs.0.lcssa) #6
  br label %sw.default

sw.default:                                       ; preds = %if.end63, %for.end427
  %t1.addr.2 = phi %union.tree_node* [ %t1.addr.0, %if.end63 ], [ %call429, %for.end427 ]
  %call430 = tail call %union.tree_node* @build_type_attribute_variant(%union.tree_node* %t1.addr.2, %union.tree_node* %call) #6
  br label %return

return:                                           ; preds = %if.end3, %if.end, %entry, %sw.default, %if.then303, %if.then294, %if.then288, %if.then278, %if.end249, %if.then247, %if.then237, %land.end217, %if.else151, %if.then149, %if.then140, %if.end130, %if.then107, %if.then97, %if.then85, %if.then73, %if.then67, %if.else60, %if.then58, %if.then51
  %retval.0 = phi %union.tree_node* [ %call52, %if.then51 ], [ %call59, %if.then58 ], [ %call62, %if.else60 ], [ %call430, %sw.default ], [ %call298, %if.then294 ], [ %call307, %if.then303 ], [ %call289, %if.then288 ], [ %call279, %if.then278 ], [ %call238, %if.then237 ], [ %call248, %if.then247 ], [ %call260, %if.end249 ], [ %call224, %land.end217 ], [ %call68, %if.then67 ], [ %call74, %if.then73 ], [ %call86, %if.then85 ], [ %call98, %if.then97 ], [ %call108, %if.then107 ], [ %call131, %if.end130 ], [ %call141, %if.then140 ], [ %call150, %if.then149 ], [ %call152, %if.else151 ], [ %t1, %entry ], [ %t2, %if.end ], [ %t1, %if.end3 ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @type_for_size(i32, i32) #1

declare %union.tree_node* @build_type_attribute_variant(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @build_complex_type(%union.tree_node*) #1

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #1

declare %union.tree_node* @c_build_qualified_type(%union.tree_node*, i32) #1

declare %union.tree_node* @build_array_type(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #1

declare void @pushlevel(i32) #1

declare void @declare_parm_level(i32) #1

declare i32 @list_length(%union.tree_node*) #1

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define i32 @comptypes(%union.tree_node* %type1, %union.tree_node* %type2) #0 {
entry:
  %cmp = icmp ne %union.tree_node* %type1, %type2
  %tobool = icmp ne %union.tree_node* %type1, null
  %or.cond = and i1 %cmp, %tobool
  %tobool2 = icmp ne %union.tree_node* %type2, null
  %or.cond291 = and i1 %or.cond, %tobool2
  br i1 %or.cond291, label %lor.lhs.false3, label %return

lor.lhs.false3:                                   ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %type1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp4 = icmp eq i32 %bf.clear, 0
  br i1 %cmp4, label %return, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %code7 = getelementptr inbounds %union.tree_node* %type2, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 0
  br i1 %cmp10, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false5
  %cmp15 = icmp eq i32 %bf.clear, 6
  br i1 %cmp15, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %if.end
  %type = bitcast %union.tree_node* %type1 to %struct.tree_type*
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type* %type, i64 0, i32 6
  %bf.load16 = load i32* %no_force_blk_flag, align 4
  %bf.clear17 = and i32 %bf.load16, 131072
  %tobool18 = icmp eq i32 %bf.clear17, 0
  br i1 %tobool18, label %if.end25, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %land.lhs.true
  %values = getelementptr inbounds %union.tree_node* %type1, i64 0, i32 0, i32 1
  %0 = load i8** %values, align 8
  %cmp21 = icmp eq i8* %0, null
  br i1 %cmp21, label %if.end25, label %if.then22

if.then22:                                        ; preds = %land.lhs.true19
  %1 = bitcast i8* %0 to %union.tree_node*
  br label %if.end25

if.end25:                                         ; preds = %land.lhs.true19, %land.lhs.true, %if.then22, %if.end
  %t1.0 = phi %union.tree_node* [ %1, %if.then22 ], [ %type1, %land.lhs.true19 ], [ %type1, %land.lhs.true ], [ %type1, %if.end ]
  %cmp30 = icmp eq i32 %bf.clear9, 6
  br i1 %cmp30, label %land.lhs.true31, label %if.end45

land.lhs.true31:                                  ; preds = %if.end25
  %type32 = bitcast %union.tree_node* %type2 to %struct.tree_type*
  %no_force_blk_flag33 = getelementptr inbounds %struct.tree_type* %type32, i64 0, i32 6
  %bf.load34 = load i32* %no_force_blk_flag33, align 4
  %bf.clear36 = and i32 %bf.load34, 131072
  %tobool37 = icmp eq i32 %bf.clear36, 0
  br i1 %tobool37, label %if.end45, label %land.lhs.true38

land.lhs.true38:                                  ; preds = %land.lhs.true31
  %values40 = getelementptr inbounds %union.tree_node* %type2, i64 0, i32 0, i32 1
  %2 = load i8** %values40, align 8
  %cmp41 = icmp eq i8* %2, null
  br i1 %cmp41, label %if.end45, label %if.then42

if.then42:                                        ; preds = %land.lhs.true38
  %3 = bitcast i8* %2 to %union.tree_node*
  br label %if.end45

if.end45:                                         ; preds = %land.lhs.true38, %land.lhs.true31, %if.then42, %if.end25
  %t2.0 = phi %union.tree_node* [ %3, %if.then42 ], [ %type2, %land.lhs.true38 ], [ %type2, %land.lhs.true31 ], [ %type2, %if.end25 ]
  %code47 = getelementptr inbounds %union.tree_node* %t1.0, i64 0, i32 0, i32 0, i32 2
  %bf.load48 = load i32* %code47, align 8
  %bf.clear49 = and i32 %bf.load48, 255
  %cmp50 = icmp eq i32 %bf.clear49, 10
  br i1 %cmp50, label %if.then51, label %if.end59

if.then51:                                        ; preds = %if.end45
  %type52 = bitcast %union.tree_node* %t1.0 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type52, i64 0, i32 6
  %bf.load53 = load i32* %precision, align 4
  %bf.clear54 = and i32 %bf.load53, 511
  %bf.lshr57 = lshr i32 %bf.load48, 13
  %bf.clear58 = and i32 %bf.lshr57, 1
  %call = tail call %union.tree_node* @type_for_size(i32 %bf.clear54, i32 %bf.clear58) #6
  br label %if.end59

if.end59:                                         ; preds = %if.then51, %if.end45
  %t1.1 = phi %union.tree_node* [ %call, %if.then51 ], [ %t1.0, %if.end45 ]
  %code61 = getelementptr inbounds %union.tree_node* %t2.0, i64 0, i32 0, i32 0, i32 2
  %bf.load62 = load i32* %code61, align 8
  %bf.clear63 = and i32 %bf.load62, 255
  %cmp64 = icmp eq i32 %bf.clear63, 10
  br i1 %cmp64, label %if.then65, label %if.end76

if.then65:                                        ; preds = %if.end59
  %type66 = bitcast %union.tree_node* %t2.0 to %struct.tree_type*
  %precision67 = getelementptr inbounds %struct.tree_type* %type66, i64 0, i32 6
  %bf.load68 = load i32* %precision67, align 4
  %bf.clear69 = and i32 %bf.load68, 511
  %bf.lshr73 = lshr i32 %bf.load62, 13
  %bf.clear74 = and i32 %bf.lshr73, 1
  %call75 = tail call %union.tree_node* @type_for_size(i32 %bf.clear69, i32 %bf.clear74) #6
  br label %if.end76

if.end76:                                         ; preds = %if.then65, %if.end59
  %t2.1 = phi %union.tree_node* [ %call75, %if.then65 ], [ %t2.0, %if.end59 ]
  %cmp77 = icmp eq %union.tree_node* %t1.1, %t2.1
  br i1 %cmp77, label %return, label %if.end79

if.end79:                                         ; preds = %if.end76
  %code81 = getelementptr inbounds %union.tree_node* %t1.1, i64 0, i32 0, i32 0, i32 2
  %bf.load82 = load i32* %code81, align 8
  %bf.clear83 = and i32 %bf.load82, 255
  %code85 = getelementptr inbounds %union.tree_node* %t2.1, i64 0, i32 0, i32 0, i32 2
  %bf.load86 = load i32* %code85, align 8
  %bf.clear87 = and i32 %bf.load86, 255
  %cmp88 = icmp eq i32 %bf.clear83, %bf.clear87
  br i1 %cmp88, label %if.end90, label %return

if.end90:                                         ; preds = %if.end79
  %bf.lshr93 = lshr i32 %bf.load82, 12
  %bf.clear94 = and i32 %bf.lshr93, 1
  %4 = lshr i32 %bf.load82, 10
  %mul99 = and i32 %4, 2
  %or = or i32 %bf.clear94, %mul99
  %type100 = bitcast %union.tree_node* %t1.1 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type100, i64 0, i32 6
  %bf.load101 = load i32* %restrict_flag, align 4
  %5 = lshr i32 %bf.load101, 19
  %mul104 = and i32 %5, 4
  %or105 = or i32 %or, %mul104
  %cmp110 = icmp eq i32 %bf.clear83, 20
  br i1 %cmp110, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end90
  %type112 = getelementptr inbounds %union.tree_node* %t1.1, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type112, align 8, !tbaa !1
  %tobool113 = icmp ne %union.tree_node* %6, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end90
  %7 = phi i1 [ false, %if.end90 ], [ %tobool113, %land.rhs ]
  %land.ext = zext i1 %7 to i32
  %mul114 = shl nuw nsw i32 %land.ext, 3
  %or115 = or i32 %or105, %mul114
  %bf.lshr119 = lshr i32 %bf.load86, 12
  %bf.clear120 = and i32 %bf.lshr119, 1
  %8 = lshr i32 %bf.load86, 10
  %mul127 = and i32 %8, 2
  %or128 = or i32 %bf.clear120, %mul127
  %type129 = bitcast %union.tree_node* %t2.1 to %struct.tree_type*
  %restrict_flag130 = getelementptr inbounds %struct.tree_type* %type129, i64 0, i32 6
  %bf.load131 = load i32* %restrict_flag130, align 4
  %9 = lshr i32 %bf.load131, 19
  %mul134 = and i32 %9, 4
  %or135 = or i32 %or128, %mul134
  br i1 %cmp110, label %land.rhs141, label %land.end145

land.rhs141:                                      ; preds = %land.end
  %type143 = getelementptr inbounds %union.tree_node* %t2.1, i64 0, i32 0, i32 0, i32 1
  %10 = load %union.tree_node** %type143, align 8, !tbaa !1
  %tobool144 = icmp ne %union.tree_node* %10, null
  br label %land.end145

land.end145:                                      ; preds = %land.rhs141, %land.end
  %11 = phi i1 [ false, %land.end ], [ %tobool144, %land.rhs141 ]
  %land.ext146 = zext i1 %11 to i32
  %mul147 = shl nuw nsw i32 %land.ext146, 3
  %or148 = or i32 %or135, %mul147
  %cmp149 = icmp eq i32 %or115, %or148
  br i1 %cmp149, label %if.end151, label %return

if.end151:                                        ; preds = %land.end145
  %12 = getelementptr inbounds %union.tree_node* %t1.1, i64 0, i32 0, i32 15
  %13 = load %union.tree_node** %12, align 8, !tbaa !24
  %14 = getelementptr inbounds %union.tree_node* %t2.1, i64 0, i32 0, i32 15
  %15 = load %union.tree_node** %14, align 8, !tbaa !24
  %cmp155 = icmp eq %union.tree_node* %13, %15
  br i1 %cmp155, label %return, label %if.end157

if.end157:                                        ; preds = %if.end151
  %16 = load i32 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 5), align 8, !tbaa !29
  %call158 = tail call i32 %16(%union.tree_node* %t1.1, %union.tree_node* %t2.1) #6
  %tobool159 = icmp eq i32 %call158, 0
  br i1 %tobool159, label %return, label %if.end161

if.end161:                                        ; preds = %if.end157
  %bf.load164 = load i32* %code81, align 8
  %bf.clear165 = and i32 %bf.load164, 255
  switch i32 %bf.clear165, label %sw.epilog [
    i32 13, label %sw.bb
    i32 23, label %sw.bb176
    i32 18, label %sw.bb178
    i32 20, label %sw.bb279
  ]

sw.bb:                                            ; preds = %if.end161
  %type167 = getelementptr inbounds %union.tree_node* %t1.1, i64 0, i32 0, i32 0, i32 1
  %17 = load %union.tree_node** %type167, align 8, !tbaa !1
  %type169 = getelementptr inbounds %union.tree_node* %t2.1, i64 0, i32 0, i32 0, i32 1
  %18 = load %union.tree_node** %type169, align 8, !tbaa !1
  %cmp170 = icmp eq %union.tree_node* %17, %18
  br i1 %cmp170, label %sw.epilog, label %cond.false

cond.false:                                       ; preds = %sw.bb
  %call175 = tail call i32 @comptypes(%union.tree_node* %17, %union.tree_node* %18)
  br label %sw.epilog

sw.bb176:                                         ; preds = %if.end161
  %type.i = getelementptr inbounds %union.tree_node* %t1.1, i64 0, i32 0, i32 0, i32 1
  %19 = load %union.tree_node** %type.i, align 8, !tbaa !1
  %type2.i = getelementptr inbounds %union.tree_node* %t2.1, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type2.i, align 8, !tbaa !1
  %cmp.i = icmp eq %union.tree_node* %19, %20
  br i1 %cmp.i, label %if.end.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %sw.bb176
  %call.i = tail call i32 @comptypes(%union.tree_node* %19, %union.tree_node* %20) #6
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %sw.epilog, label %if.end.i

if.end.i:                                         ; preds = %lor.lhs.false.i, %sw.bb176
  %val.0.i = phi i32 [ 1, %sw.bb176 ], [ %call.i, %lor.lhs.false.i ]
  %values.i = getelementptr inbounds %union.tree_node* %t1.1, i64 0, i32 0, i32 1
  %21 = load i8** %values.i, align 8
  %22 = bitcast i8* %21 to %union.tree_node*
  %values9.i = getelementptr inbounds %union.tree_node* %t2.1, i64 0, i32 0, i32 1
  %23 = load i8** %values9.i, align 8
  %24 = bitcast i8* %23 to %union.tree_node*
  %cmp10.i = icmp eq i8* %21, null
  br i1 %cmp10.i, label %if.then11.i, label %if.end24.i

if.then11.i:                                      ; preds = %if.end.i
  %call12.i = tail call i32 @self_promoting_args_p(%union.tree_node* %24) #6
  %tobool13.i = icmp eq i32 %call12.i, 0
  br i1 %tobool13.i, label %sw.epilog, label %if.end15.i

if.end15.i:                                       ; preds = %if.then11.i
  %25 = getelementptr inbounds %union.tree_node* %t1.1, i64 0, i32 0, i32 16
  %26 = load %union.tree_node** %25, align 8, !tbaa !30
  %tobool17.i = icmp eq %union.tree_node* %26, null
  br i1 %tobool17.i, label %sw.epilog, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.end15.i
  %call20.i = tail call fastcc i32 @type_lists_compatible_p(%union.tree_node* %24, %union.tree_node* %26) #6
  %cmp21.i = icmp eq i32 %call20.i, 1
  %val.0..i = select i1 %cmp21.i, i32 %val.0.i, i32 2
  br label %sw.epilog

if.end24.i:                                       ; preds = %if.end.i
  %cmp25.i = icmp eq i8* %23, null
  br i1 %cmp25.i, label %if.then26.i, label %if.end41.i

if.then26.i:                                      ; preds = %if.end24.i
  %call27.i = tail call i32 @self_promoting_args_p(%union.tree_node* %22) #6
  %tobool28.i = icmp eq i32 %call27.i, 0
  br i1 %tobool28.i, label %sw.epilog, label %if.end30.i

if.end30.i:                                       ; preds = %if.then26.i
  %27 = getelementptr inbounds %union.tree_node* %t2.1, i64 0, i32 0, i32 16
  %28 = load %union.tree_node** %27, align 8, !tbaa !30
  %tobool33.i = icmp eq %union.tree_node* %28, null
  br i1 %tobool33.i, label %sw.epilog, label %land.lhs.true34.i

land.lhs.true34.i:                                ; preds = %if.end30.i
  %call37.i = tail call fastcc i32 @type_lists_compatible_p(%union.tree_node* %22, %union.tree_node* %28) #6
  %cmp38.i = icmp eq i32 %call37.i, 1
  %val.0.59.i = select i1 %cmp38.i, i32 %val.0.i, i32 2
  br label %sw.epilog

if.end41.i:                                       ; preds = %if.end24.i
  %call42.i = tail call fastcc i32 @type_lists_compatible_p(%union.tree_node* %22, %union.tree_node* %24) #6
  %cmp43.i = icmp ne i32 %call42.i, 1
  %cond.i = select i1 %cmp43.i, i32 %call42.i, i32 %val.0.i
  br label %sw.epilog

sw.bb178:                                         ; preds = %if.end161
  %values180 = getelementptr inbounds %union.tree_node* %t1.1, i64 0, i32 0, i32 1
  %29 = load i8** %values180, align 8
  %values182 = getelementptr inbounds %union.tree_node* %t2.1, i64 0, i32 0, i32 1
  %30 = load i8** %values182, align 8
  %type184 = getelementptr inbounds %union.tree_node* %t1.1, i64 0, i32 0, i32 0, i32 1
  %31 = load %union.tree_node** %type184, align 8, !tbaa !1
  %type186 = getelementptr inbounds %union.tree_node* %t2.1, i64 0, i32 0, i32 0, i32 1
  %32 = load %union.tree_node** %type186, align 8, !tbaa !1
  %cmp187 = icmp eq %union.tree_node* %31, %32
  br i1 %cmp187, label %if.end196, label %land.lhs.true188

land.lhs.true188:                                 ; preds = %sw.bb178
  %call193 = tail call i32 @comptypes(%union.tree_node* %31, %union.tree_node* %32)
  %cmp194 = icmp eq i32 %call193, 0
  br i1 %cmp194, label %return, label %if.end196

if.end196:                                        ; preds = %sw.bb178, %land.lhs.true188
  %val.0 = phi i32 [ %call193, %land.lhs.true188 ], [ 1, %sw.bb178 ]
  %cmp197 = icmp eq i8* %29, null
  %cmp199 = icmp eq i8* %30, null
  %or.cond292 = or i1 %cmp197, %cmp199
  %cmp201 = icmp eq i8* %29, %30
  %or.cond362 = or i1 %or.cond292, %cmp201
  br i1 %or.cond362, label %sw.epilog, label %if.end203

if.end203:                                        ; preds = %if.end196
  %maxval = getelementptr inbounds i8* %29, i64 112
  %33 = bitcast i8* %maxval to %union.tree_node**
  %34 = load %union.tree_node** %33, align 8, !tbaa !16
  %lnot = icmp eq %union.tree_node* %34, null
  %maxval207 = getelementptr inbounds i8* %30, i64 112
  %35 = bitcast i8* %maxval207 to %union.tree_node**
  %36 = load %union.tree_node** %35, align 8, !tbaa !16
  %lnot209 = icmp eq %union.tree_node* %36, null
  br i1 %lnot, label %land.end226, label %land.rhs212

land.rhs212:                                      ; preds = %if.end203
  %minval = getelementptr inbounds i8* %29, i64 104
  %37 = bitcast i8* %minval to %union.tree_node**
  %38 = load %union.tree_node** %37, align 8, !tbaa !31
  %code215 = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 0, i32 2
  %bf.load216 = load i32* %code215, align 8
  %bf.clear217 = and i32 %bf.load216, 255
  %cmp218 = icmp eq i32 %bf.clear217, 25
  br i1 %cmp218, label %lor.rhs, label %land.end226

lor.rhs:                                          ; preds = %land.rhs212
  %code222 = getelementptr inbounds %union.tree_node* %34, i64 0, i32 0, i32 0, i32 2
  %bf.load223 = load i32* %code222, align 8
  %bf.clear224 = and i32 %bf.load223, 255
  %cmp225 = icmp ne i32 %bf.clear224, 25
  br label %land.end226

land.end226:                                      ; preds = %land.rhs212, %lor.rhs, %if.end203
  %39 = phi i1 [ false, %if.end203 ], [ true, %land.rhs212 ], [ %cmp225, %lor.rhs ]
  br i1 %lnot209, label %land.end247, label %land.rhs230

land.rhs230:                                      ; preds = %land.end226
  %minval232 = getelementptr inbounds i8* %30, i64 104
  %40 = bitcast i8* %minval232 to %union.tree_node**
  %41 = load %union.tree_node** %40, align 8, !tbaa !31
  %code234 = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 0, i32 2
  %bf.load235 = load i32* %code234, align 8
  %bf.clear236 = and i32 %bf.load235, 255
  %cmp237 = icmp eq i32 %bf.clear236, 25
  br i1 %cmp237, label %lor.rhs238, label %sw.epilog

lor.rhs238:                                       ; preds = %land.rhs230
  %code242 = getelementptr inbounds %union.tree_node* %36, i64 0, i32 0, i32 0, i32 2
  %bf.load243 = load i32* %code242, align 8
  %bf.clear244 = and i32 %bf.load243, 255
  %cmp245 = icmp ne i32 %bf.clear244, 25
  br label %land.end247

land.end247:                                      ; preds = %lor.rhs238, %land.end226
  %42 = phi i1 [ false, %land.end226 ], [ %cmp245, %lor.rhs238 ]
  %brmerge = or i1 %39, %42
  %brmerge363.demorgan = and i1 %lnot, %lnot209
  %or.cond367 = or i1 %brmerge, %brmerge363.demorgan
  br i1 %or.cond367, label %sw.epilog, label %if.end259

if.end259:                                        ; preds = %land.end247
  %brmerge364 = or i1 %lnot, %lnot209
  br i1 %brmerge364, label %if.then277, label %lor.lhs.false263

lor.lhs.false263:                                 ; preds = %if.end259
  %minval265 = getelementptr inbounds i8* %29, i64 104
  %43 = bitcast i8* %minval265 to %union.tree_node**
  %44 = load %union.tree_node** %43, align 8, !tbaa !31
  %minval267 = getelementptr inbounds i8* %30, i64 104
  %45 = bitcast i8* %minval267 to %union.tree_node**
  %46 = load %union.tree_node** %45, align 8, !tbaa !31
  %call268 = tail call i32 @tree_int_cst_equal(%union.tree_node* %44, %union.tree_node* %46) #6
  %tobool269 = icmp eq i32 %call268, 0
  br i1 %tobool269, label %if.then277, label %lor.lhs.false270

lor.lhs.false270:                                 ; preds = %lor.lhs.false263
  %47 = load %union.tree_node** %33, align 8, !tbaa !16
  %48 = load %union.tree_node** %35, align 8, !tbaa !16
  %call275 = tail call i32 @tree_int_cst_equal(%union.tree_node* %47, %union.tree_node* %48) #6
  %tobool276 = icmp eq i32 %call275, 0
  br i1 %tobool276, label %if.then277, label %sw.epilog

if.then277:                                       ; preds = %if.end259, %lor.lhs.false270, %lor.lhs.false263
  br label %sw.epilog

sw.bb279:                                         ; preds = %if.end161
  %call280 = tail call i32 @maybe_objc_comptypes(%union.tree_node* %t1.1, %union.tree_node* %t2.1, i32 0) #6
  %cmp281 = icmp eq i32 %call280, 1
  %. = zext i1 %cmp281 to i32
  br label %sw.epilog

sw.epilog:                                        ; preds = %land.rhs230, %land.lhs.true.i, %if.end41.i, %land.lhs.true34.i, %if.end30.i, %if.then26.i, %if.end15.i, %if.then11.i, %lor.lhs.false.i, %sw.bb279, %land.end247, %cond.false, %sw.bb, %lor.lhs.false270, %if.end161, %if.then277, %if.end196
  %val.1 = phi i32 [ 0, %if.end161 ], [ %val.0, %if.end196 ], [ %val.0, %land.end247 ], [ 0, %if.then277 ], [ %val.0, %lor.lhs.false270 ], [ %call175, %cond.false ], [ 1, %sw.bb ], [ %., %sw.bb279 ], [ %val.0..i, %land.lhs.true.i ], [ %cond.i, %if.end41.i ], [ 0, %lor.lhs.false.i ], [ 0, %if.then11.i ], [ %val.0.i, %if.end15.i ], [ 0, %if.then26.i ], [ %val.0.i, %if.end30.i ], [ %val.0.59.i, %land.lhs.true34.i ], [ %val.0, %land.rhs230 ]
  %cmp284 = icmp eq i32 %call158, 2
  %cmp286 = icmp eq i32 %val.1, 1
  %or.cond293 = and i1 %cmp284, %cmp286
  %cond290 = select i1 %or.cond293, i32 2, i32 %val.1
  br label %return

return:                                           ; preds = %land.lhs.true188, %if.end157, %if.end151, %land.end145, %if.end79, %if.end76, %lor.lhs.false3, %lor.lhs.false5, %entry, %sw.epilog
  %retval.0 = phi i32 [ %cond290, %sw.epilog ], [ 1, %entry ], [ 1, %lor.lhs.false5 ], [ 1, %lor.lhs.false3 ], [ 1, %if.end76 ], [ 0, %if.end79 ], [ 0, %land.end145 ], [ 1, %if.end151 ], [ 0, %if.end157 ], [ 0, %land.lhs.true188 ]
  ret i32 %retval.0
}

declare void @pedwarn(i8*, ...) #1

declare %union.tree_node* @poplevel(i32, i32, i32) #1

declare i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #1

declare i32 @maybe_objc_comptypes(%union.tree_node*, %union.tree_node*, i32) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @c_sizeof(%union.tree_node* nocapture readonly %type) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else14 [
    i32 23, label %if.then
    i32 5, label %if.then5
    i32 0, label %if.then13
  ]

if.then:                                          ; preds = %entry
  %0 = load i32* @pedantic, align 4, !tbaa !27
  %1 = load i32* @warn_pointer_arith, align 4
  %2 = or i32 %1, %0
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([34 x i8]* @.str11, i64 0, i64 0)) #6
  br label %if.end

if.end:                                           ; preds = %if.then, %if.then3
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %if.end28

if.then5:                                         ; preds = %entry
  %5 = load i32* @pedantic, align 4, !tbaa !27
  %6 = load i32* @warn_pointer_arith, align 4
  %7 = or i32 %6, %5
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %if.then5
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([30 x i8]* @.str12, i64 0, i64 0)) #6
  br label %if.end10

if.end10:                                         ; preds = %if.then5, %if.then9
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %if.end28

if.then13:                                        ; preds = %entry
  %10 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %if.end28

if.else14:                                        ; preds = %entry
  %size16 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 2
  %11 = bitcast i32* %size16 to %union.tree_node**
  %12 = load %union.tree_node** %11, align 8, !tbaa !8
  %cmp17 = icmp eq %union.tree_node* %12, null
  br i1 %cmp17, label %if.then18, label %if.else19

if.then18:                                        ; preds = %if.else14
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([37 x i8]* @.str13, i64 0, i64 0)) #6
  %13 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !tbaa !7
  br label %if.end28

if.else19:                                        ; preds = %if.else14
  %14 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  %15 = load %union.tree_node** %14, align 8, !tbaa !32
  %16 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %type21 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type21, i64 0, i32 6
  %bf.load22 = load i32* %precision, align 4
  %bf.clear23 = lshr i32 %bf.load22, 3
  %div = and i32 %bf.clear23, 63
  %conv36 = zext i32 %div to i64
  %call = tail call %union.tree_node* @size_int_wide(i64 %conv36, i32 0) #6
  %call24 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %15, %union.tree_node* %call) #6
  br label %if.end28

if.end28:                                         ; preds = %if.end10, %if.then18, %if.else19, %if.then13, %if.end
  %size.0 = phi %union.tree_node* [ %4, %if.end ], [ %9, %if.end10 ], [ %10, %if.then13 ], [ %call24, %if.else19 ], [ %13, %if.then18 ]
  %17 = load %union.tree_node** getelementptr inbounds ([32 x %union.tree_node*]* @c_global_trees, i64 0, i64 4), align 8, !tbaa !7
  %call29 = tail call %union.tree_node* @build1(i32 115, %union.tree_node* %17, %union.tree_node* %size.0) #6
  %call30 = tail call %union.tree_node* @fold(%union.tree_node* %call29) #6
  ret %union.tree_node* %call30
}

declare %union.tree_node* @size_binop(i32, %union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @size_int_wide(i64, i32) #1

declare %union.tree_node* @fold(%union.tree_node*) #1

declare %union.tree_node* @build1(i32, %union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @c_sizeof_nowarn(%union.tree_node* nocapture readonly %type) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else [
    i32 23, label %if.then
    i32 5, label %if.then
    i32 0, label %if.then
  ]

if.then:                                          ; preds = %entry, %entry, %entry
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %if.end15

if.else:                                          ; preds = %entry
  %size6 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 2
  %1 = bitcast i32* %size6 to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !8
  %cmp7 = icmp eq %union.tree_node* %2, null
  br i1 %cmp7, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.else
  %3 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !tbaa !7
  br label %if.end15

if.else9:                                         ; preds = %if.else
  %4 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  %5 = load %union.tree_node** %4, align 8, !tbaa !32
  %6 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %type11 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type11, i64 0, i32 6
  %bf.load12 = load i32* %precision, align 4
  %bf.clear13 = lshr i32 %bf.load12, 3
  %div = and i32 %bf.clear13, 63
  %conv23 = zext i32 %div to i64
  %call = tail call %union.tree_node* @size_int_wide(i64 %conv23, i32 0) #6
  %call14 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %5, %union.tree_node* %call) #6
  br label %if.end15

if.end15:                                         ; preds = %if.then8, %if.else9, %if.then
  %size.0 = phi %union.tree_node* [ %0, %if.then ], [ %call14, %if.else9 ], [ %3, %if.then8 ]
  %7 = load %union.tree_node** getelementptr inbounds ([32 x %union.tree_node*]* @c_global_trees, i64 0, i64 4), align 8, !tbaa !7
  %call16 = tail call %union.tree_node* @build1(i32 115, %union.tree_node* %7, %union.tree_node* %size.0) #6
  %call17 = tail call %union.tree_node* @fold(%union.tree_node* %call16) #6
  ret %union.tree_node* %call17
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @c_size_in_bytes(%union.tree_node* nocapture readonly %type) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.end [
    i32 23, label %if.then
    i32 5, label %if.then
    i32 0, label %if.then
  ]

if.then:                                          ; preds = %entry, %entry, %entry
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %return

if.end:                                           ; preds = %entry
  %cmp2 = icmp eq i32 %bf.clear, 5
  %size = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 2
  %1 = bitcast i32* %size to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !8
  %cmp6.not = icmp ne %union.tree_node* %2, null
  %brmerge = or i1 %cmp6.not, %cmp2
  br i1 %brmerge, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([44 x i8]* @.str14, i64 0, i64 0)) #6
  %3 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %return

if.end14:                                         ; preds = %if.end
  %4 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  %5 = load %union.tree_node** %4, align 8, !tbaa !32
  %6 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %type16 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type16, i64 0, i32 6
  %bf.load17 = load i32* %precision, align 4
  %bf.clear18 = lshr i32 %bf.load17, 3
  %div = and i32 %bf.clear18, 63
  %conv26 = zext i32 %div to i64
  %call = tail call %union.tree_node* @size_int_wide(i64 %conv26, i32 0) #6
  %call19 = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %5, %union.tree_node* %call) #6
  br label %return

return:                                           ; preds = %if.end14, %if.then13, %if.then
  %retval.0 = phi %union.tree_node* [ %0, %if.then ], [ %call19, %if.end14 ], [ %3, %if.then13 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @decl_constant_value(%union.tree_node* readonly %decl) #3 {
entry:
  %0 = load %union.tree_node** @current_function_decl, align 8, !tbaa !7
  %cmp = icmp eq %union.tree_node* %0, null
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %volatile_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %volatile_flag, align 8
  %1 = and i32 %bf.load, 6144
  %2 = icmp eq i32 %1, 4096
  br i1 %2, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %3 = load %union.tree_node** %initial, align 8, !tbaa !33
  %cmp9 = icmp eq %union.tree_node* %3, null
  br i1 %cmp9, label %if.end, label %land.lhs.true10

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %code = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load14 = load i32* %code, align 8
  %bf.clear23 = and i32 %bf.load14, 512
  %tobool24 = icmp eq i32 %bf.clear23, 0
  br i1 %tobool24, label %if.end, label %switch.early.test

switch.early.test:                                ; preds = %land.lhs.true10
  %bf.clear15 = and i32 %bf.load14, 255
  switch i32 %bf.clear15, label %return [
    i32 46, label %if.end
    i32 0, label %if.end
  ]

if.end:                                           ; preds = %land.lhs.true, %switch.early.test, %switch.early.test, %land.lhs.true10, %land.lhs.true7, %entry
  br label %return

return:                                           ; preds = %switch.early.test, %if.end
  %retval.0 = phi %union.tree_node* [ %decl, %if.end ], [ %3, %switch.early.test ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @default_conversion(%union.tree_node* %exp) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !1
  %code3 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code3, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.end [
    i32 23, label %if.then
    i32 18, label %if.then
  ]

if.then:                                          ; preds = %entry, %entry
  %call = tail call fastcc %union.tree_node* @default_function_array_conversion(%union.tree_node* %exp)
  br label %return

if.end:                                           ; preds = %entry
  %code6 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load7 = load i32* %code6, align 8
  %bf.clear8 = and i32 %bf.load7, 255
  %cmp9 = icmp eq i32 %bf.clear8, 32
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.end
  %initial = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 12
  %1 = load %union.tree_node** %initial, align 8, !tbaa !33
  br label %if.end23

if.else:                                          ; preds = %if.end
  %2 = load i32* @optimize, align 4, !tbaa !27
  %tobool = icmp eq i32 %2, 0
  br i1 %tobool, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %cmp15 = icmp eq i32 %bf.clear8, 34
  %cmp17 = icmp ne i32 %bf.clear, 18
  %or.cond210 = and i1 %cmp15, %cmp17
  br i1 %or.cond210, label %if.then18, label %if.end23

if.then18:                                        ; preds = %land.lhs.true
  %3 = load i32* @pedantic, align 4, !tbaa !27
  %tobool.i = icmp eq i32 %3, 0
  br i1 %tobool.i, label %lor.lhs.false.i, label %decl_constant_value_for_broken_optimization.exit

lor.lhs.false.i:                                  ; preds = %if.then18
  %mode.i = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 5
  %4 = bitcast i48* %mode.i to i64*
  %bf.load.i = load i64* %4, align 8
  %bf.cast.i = and i64 %bf.load.i, 255
  %cmp.i = icmp eq i64 %bf.cast.i, 51
  br i1 %cmp.i, label %decl_constant_value_for_broken_optimization.exit, label %if.else.i

if.else.i:                                        ; preds = %lor.lhs.false.i
  %5 = load %union.tree_node** @current_function_decl, align 8, !tbaa !7
  %cmp.i.i = icmp ne %union.tree_node* %5, null
  %6 = and i32 %bf.load7, 6144
  %7 = icmp eq i32 %6, 4096
  %or.cond = and i1 %cmp.i.i, %7
  br i1 %or.cond, label %land.lhs.true7.i.i, label %if.end.i.i

land.lhs.true7.i.i:                               ; preds = %if.else.i
  %initial.i.i = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 12
  %8 = load %union.tree_node** %initial.i.i, align 8, !tbaa !33
  %cmp9.i.i = icmp eq %union.tree_node* %8, null
  br i1 %cmp9.i.i, label %if.end.i.i, label %land.lhs.true10.i.i

land.lhs.true10.i.i:                              ; preds = %land.lhs.true7.i.i
  %code.i.i = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load14.i.i = load i32* %code.i.i, align 8
  %bf.clear23.i.i = and i32 %bf.load14.i.i, 512
  %tobool24.i.i = icmp eq i32 %bf.clear23.i.i, 0
  br i1 %tobool24.i.i, label %if.end.i.i, label %switch.early.test.i.i

switch.early.test.i.i:                            ; preds = %land.lhs.true10.i.i
  %bf.clear15.i.i = and i32 %bf.load14.i.i, 255
  switch i32 %bf.clear15.i.i, label %decl_constant_value_for_broken_optimization.exit [
    i32 46, label %if.end.i.i
    i32 0, label %if.end.i.i
  ]

if.end.i.i:                                       ; preds = %if.else.i, %switch.early.test.i.i, %switch.early.test.i.i, %land.lhs.true10.i.i, %land.lhs.true7.i.i
  br label %decl_constant_value_for_broken_optimization.exit

decl_constant_value_for_broken_optimization.exit: ; preds = %if.then18, %lor.lhs.false.i, %switch.early.test.i.i, %if.end.i.i
  %retval.0.i = phi %union.tree_node* [ %exp, %if.then18 ], [ %exp, %lor.lhs.false.i ], [ %exp, %if.end.i.i ], [ %8, %switch.early.test.i.i ]
  %type21 = getelementptr inbounds %union.tree_node* %retval.0.i, i64 0, i32 0, i32 0, i32 1
  %9 = load %union.tree_node** %type21, align 8, !tbaa !1
  br label %if.end23

if.end23:                                         ; preds = %if.else, %land.lhs.true, %decl_constant_value_for_broken_optimization.exit, %if.then10
  %exp.addr.0 = phi %union.tree_node* [ %1, %if.then10 ], [ %retval.0.i, %decl_constant_value_for_broken_optimization.exit ], [ %exp, %land.lhs.true ], [ %exp, %if.else ]
  %type.0 = phi %union.tree_node* [ %0, %if.then10 ], [ %9, %decl_constant_value_for_broken_optimization.exit ], [ %0, %land.lhs.true ], [ %0, %if.else ]
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %while.cond.while.body_crit_edge, %if.end23
  %exp.addr.1 = phi %union.tree_node* [ %exp.addr.0, %if.end23 ], [ %.pre253, %while.cond.while.body_crit_edge ], [ %10, %land.rhs ]
  %code25 = getelementptr inbounds %union.tree_node* %exp.addr.1, i64 0, i32 0, i32 0, i32 2
  %bf.load26 = load i32* %code25, align 8
  %bf.clear27 = and i32 %bf.load26, 255
  switch i32 %bf.clear27, label %while.end [
    i32 116, label %while.cond.while.body_crit_edge
    i32 115, label %land.rhs
  ]

while.cond.while.body_crit_edge:                  ; preds = %while.cond
  %operands41.phi.trans.insert = getelementptr inbounds %union.tree_node* %exp.addr.1, i64 0, i32 0, i32 2
  %arrayidx42.phi.trans.insert = bitcast i32* %operands41.phi.trans.insert to %union.tree_node**
  %.pre253 = load %union.tree_node** %arrayidx42.phi.trans.insert, align 8, !tbaa !7
  br label %while.cond

land.rhs:                                         ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %exp.addr.1, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %10 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %type36 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type36, align 8, !tbaa !1
  %type38 = getelementptr inbounds %union.tree_node* %exp.addr.1, i64 0, i32 0, i32 0, i32 1
  %12 = load %union.tree_node** %type38, align 8, !tbaa !1
  %cmp39 = icmp eq %union.tree_node* %11, %12
  br i1 %cmp39, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.rhs
  %idxprom250 = zext i32 %bf.clear27 to i64
  %arrayidx47 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom250
  %13 = load i8* %arrayidx47, align 1, !tbaa !34
  switch i8 %13, label %if.end84 [
    i8 60, label %if.then80
    i8 49, label %if.then80
    i8 50, label %if.then80
    i8 101, label %if.then80
  ]

if.then80:                                        ; preds = %while.end, %while.end, %while.end, %while.end
  %complexity = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 1
  %14 = bitcast i8** %complexity to i32*
  %15 = load i32* %14, align 4, !tbaa !35
  %complexity83 = getelementptr inbounds %union.tree_node* %exp.addr.1, i64 0, i32 0, i32 1
  %16 = bitcast i8** %complexity83 to i32*
  store i32 %15, i32* %16, align 4, !tbaa !35
  br label %if.end84

if.end84:                                         ; preds = %while.end, %if.then80
  %cmp85 = icmp eq i32 %bf.clear, 10
  br i1 %cmp85, label %if.then87, label %if.end125

if.then87:                                        ; preds = %if.end84
  %type88 = bitcast %union.tree_node* %type.0 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type88, i64 0, i32 6
  %bf.load89 = load i32* %precision, align 4
  %bf.clear90 = and i32 %bf.load89, 511
  %17 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %type91 = bitcast %union.tree_node* %17 to %struct.tree_type*
  %precision92 = getelementptr inbounds %struct.tree_type* %type91, i64 0, i32 6
  %bf.load93 = load i32* %precision92, align 4
  %bf.clear94 = and i32 %bf.load93, 511
  %cmp95 = icmp ugt i32 %bf.clear90, %bf.clear94
  %bf.load89.bf.load93 = select i1 %cmp95, i32 %bf.load89, i32 %bf.load93
  %bf.clear100 = and i32 %bf.load89.bf.load93, 511
  %18 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool105 = icmp eq i32 %18, 0
  %cmp115 = icmp ult i32 %bf.clear90, %bf.clear94
  %or.cond252 = and i1 %tobool105, %cmp115
  br i1 %or.cond252, label %land.end122, label %land.rhs117

land.rhs117:                                      ; preds = %if.then87
  %unsigned_flag = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 0, i32 2
  %bf.load119 = load i32* %unsigned_flag, align 8
  %bf.clear120 = and i32 %bf.load119, 8192
  %tobool121 = icmp ne i32 %bf.clear120, 0
  br label %land.end122

land.end122:                                      ; preds = %if.then87, %land.rhs117
  %19 = phi i1 [ %tobool121, %land.rhs117 ], [ false, %if.then87 ]
  %land.ext = zext i1 %19 to i32
  %call123 = tail call %union.tree_node* @type_for_size(i32 %bf.clear100, i32 %land.ext) #6
  %call124 = tail call %union.tree_node* @convert(%union.tree_node* %call123, %union.tree_node* %exp.addr.1) #6
  br label %return

if.end125:                                        ; preds = %if.end84
  %cmp130 = icmp eq i32 %bf.clear27, 39
  br i1 %cmp130, label %land.lhs.true132, label %if.end169

land.lhs.true132:                                 ; preds = %if.end125
  %operands134 = getelementptr inbounds %union.tree_node* %exp.addr.1, i64 0, i32 0, i32 2
  %arrayidx135 = getelementptr inbounds i32* %operands134, i64 2
  %20 = bitcast i32* %arrayidx135 to %union.tree_node**
  %21 = load %union.tree_node** %20, align 8, !tbaa !7
  %lang_flag_4 = getelementptr inbounds %union.tree_node* %21, i64 0, i32 0, i32 5
  %22 = bitcast i48* %lang_flag_4 to i64*
  %bf.load137 = load i64* %22, align 8
  %bf.cast = and i64 %bf.load137, 2199023255552
  %cmp140 = icmp eq i64 %bf.cast, 0
  br i1 %cmp140, label %if.end169, label %land.lhs.true142

land.lhs.true142:                                 ; preds = %land.lhs.true132
  %size = getelementptr inbounds %union.tree_node* %21, i64 0, i32 0, i32 4
  %23 = load %union.tree_node** %size, align 8, !tbaa !37
  %24 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %type147 = bitcast %union.tree_node* %24 to %struct.tree_type*
  %precision148 = getelementptr inbounds %struct.tree_type* %type147, i64 0, i32 6
  %bf.load149 = load i32* %precision148, align 4
  %bf.clear150 = and i32 %bf.load149, 511
  %conv151 = zext i32 %bf.clear150 to i64
  %call152 = tail call i32 @compare_tree_int(%union.tree_node* %23, i64 %conv151) #6
  %cmp153 = icmp slt i32 %call152, 0
  br i1 %cmp153, label %if.then155, label %if.end169

if.then155:                                       ; preds = %land.lhs.true142
  %25 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool156 = icmp eq i32 %25, 0
  br i1 %tobool156, label %cond.false165, label %land.lhs.true157

land.lhs.true157:                                 ; preds = %if.then155
  %unsigned_flag159 = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 0, i32 2
  %bf.load160 = load i32* %unsigned_flag159, align 8
  %bf.clear162 = and i32 %bf.load160, 8192
  %tobool163 = icmp eq i32 %bf.clear162, 0
  br i1 %tobool163, label %cond.false165, label %cond.end166

cond.false165:                                    ; preds = %land.lhs.true157, %if.then155
  br label %cond.end166

cond.end166:                                      ; preds = %land.lhs.true157, %cond.false165
  %cond167.in = phi %union.tree_node** [ getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), %cond.false165 ], [ getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 6), %land.lhs.true157 ]
  %cond167 = load %union.tree_node** %cond167.in, align 8
  %call168 = tail call %union.tree_node* @convert(%union.tree_node* %cond167, %union.tree_node* %exp.addr.1) #6
  br label %return

if.end169:                                        ; preds = %land.lhs.true132, %land.lhs.true142, %if.end125
  %call170 = tail call zeroext i1 @c_promoting_integer_type_p(%union.tree_node* %type.0) #6
  br i1 %call170, label %if.then171, label %if.end195

if.then171:                                       ; preds = %if.end169
  %unsigned_flag173 = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 0, i32 2
  %bf.load174 = load i32* %unsigned_flag173, align 8
  %bf.clear176 = and i32 %bf.load174, 8192
  %tobool177 = icmp eq i32 %bf.clear176, 0
  br i1 %tobool177, label %if.then171.if.end193_crit_edge, label %land.lhs.true178

if.then171.if.end193_crit_edge:                   ; preds = %if.then171
  %.pre = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  br label %if.end193

land.lhs.true178:                                 ; preds = %if.then171
  %26 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool179 = icmp eq i32 %26, 0
  br i1 %tobool179, label %lor.lhs.false180, label %if.then191

lor.lhs.false180:                                 ; preds = %land.lhs.true178
  %type181 = bitcast %union.tree_node* %type.0 to %struct.tree_type*
  %precision182 = getelementptr inbounds %struct.tree_type* %type181, i64 0, i32 6
  %bf.load183 = load i32* %precision182, align 4
  %27 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %type185 = bitcast %union.tree_node* %27 to %struct.tree_type*
  %precision186 = getelementptr inbounds %struct.tree_type* %type185, i64 0, i32 6
  %bf.load187 = load i32* %precision186, align 4
  %28 = xor i32 %bf.load187, %bf.load183
  %29 = and i32 %28, 511
  %cmp189 = icmp eq i32 %29, 0
  br i1 %cmp189, label %if.then191, label %if.end193

if.then191:                                       ; preds = %land.lhs.true178, %lor.lhs.false180
  %30 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 8, !tbaa !7
  %call192 = tail call %union.tree_node* @convert(%union.tree_node* %30, %union.tree_node* %exp.addr.1) #6
  br label %return

if.end193:                                        ; preds = %if.then171.if.end193_crit_edge, %lor.lhs.false180
  %31 = phi %union.tree_node* [ %.pre, %if.then171.if.end193_crit_edge ], [ %27, %lor.lhs.false180 ]
  %call194 = tail call %union.tree_node* @convert(%union.tree_node* %31, %union.tree_node* %exp.addr.1) #6
  br label %return

if.end195:                                        ; preds = %if.end169
  %32 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool196 = icmp eq i32 %32, 0
  %33 = load i32* @flag_allow_single_precision, align 4
  %tobool198 = icmp ne i32 %33, 0
  %or.cond211 = or i1 %tobool196, %tobool198
  br i1 %or.cond211, label %if.end205, label %land.lhs.true199

land.lhs.true199:                                 ; preds = %if.end195
  %34 = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 15
  %35 = load %union.tree_node** %34, align 8, !tbaa !24
  %36 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 24), align 8, !tbaa !7
  %cmp201 = icmp eq %union.tree_node* %35, %36
  br i1 %cmp201, label %if.then203, label %if.end205

if.then203:                                       ; preds = %land.lhs.true199
  %37 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !tbaa !7
  %call204 = tail call %union.tree_node* @convert(%union.tree_node* %37, %union.tree_node* %exp.addr.1) #6
  br label %return

if.end205:                                        ; preds = %if.end195, %land.lhs.true199
  %cmp206 = icmp eq i32 %bf.clear, 5
  br i1 %cmp206, label %if.then208, label %return

if.then208:                                       ; preds = %if.end205
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([41 x i8]* @.str15, i64 0, i64 0)) #6
  %38 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

return:                                           ; preds = %if.end205, %if.then208, %if.then203, %if.end193, %if.then191, %cond.end166, %land.end122, %if.then
  %retval.0 = phi %union.tree_node* [ %call, %if.then ], [ %call124, %land.end122 ], [ %call168, %cond.end166 ], [ %call192, %if.then191 ], [ %call194, %if.end193 ], [ %38, %if.then208 ], [ %call204, %if.then203 ], [ %exp.addr.1, %if.end205 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @default_function_array_conversion(%union.tree_node* %exp) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !1
  %code3 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code3, align 8
  %bf.clear = and i32 %bf.load, 255
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %lor.end.thread, %entry
  %not_lvalue.0.ph = phi i32 [ 0, %entry ], [ 1, %lor.end.thread ]
  %exp.addr.0.ph = phi %union.tree_node* [ %exp, %entry ], [ %.pre, %lor.end.thread ]
  br label %while.cond

while.cond:                                       ; preds = %while.cond.outer, %lor.end
  %exp.addr.0 = phi %union.tree_node* [ %1, %lor.end ], [ %exp.addr.0.ph, %while.cond.outer ]
  %code5 = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load6 = load i32* %code5, align 8
  %bf.clear7 = and i32 %bf.load6, 255
  switch i32 %bf.clear7, label %lor.end.thread303 [
    i32 116, label %lor.end.thread
    i32 115, label %lor.end
  ]

lor.end.thread:                                   ; preds = %while.cond
  %operands25.phi.trans.insert = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 2
  %arrayidx26.phi.trans.insert = bitcast i32* %operands25.phi.trans.insert to %union.tree_node**
  %.pre = load %union.tree_node** %arrayidx26.phi.trans.insert, align 8, !tbaa !7
  br label %while.cond.outer

lor.end.thread303:                                ; preds = %while.cond
  %phitmp = zext i32 %bf.clear7 to i64
  br label %while.end

lor.end:                                          ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %type15 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type15, align 8, !tbaa !1
  %type17 = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type17, align 8, !tbaa !1
  %cmp18 = icmp eq %union.tree_node* %2, %3
  br i1 %cmp18, label %while.cond, label %while.end

while.end:                                        ; preds = %lor.end, %lor.end.thread303
  %bf.clear22306 = phi i64 [ %phitmp, %lor.end.thread303 ], [ 115, %lor.end ]
  %arrayidx31 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %bf.clear22306
  %4 = load i8* %arrayidx31, align 1, !tbaa !34
  switch i8 %4, label %if.end67 [
    i8 60, label %if.then63
    i8 49, label %if.then63
    i8 50, label %if.then63
    i8 101, label %if.then63
  ]

if.then63:                                        ; preds = %while.end, %while.end, %while.end, %while.end
  %complexity = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 1
  %5 = bitcast i8** %complexity to i32*
  %6 = load i32* %5, align 4, !tbaa !35
  %complexity66 = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %complexity66 to i32*
  store i32 %6, i32* %7, align 4, !tbaa !35
  br label %if.end67

if.end67:                                         ; preds = %while.end, %if.then63
  switch i32 %bf.clear, label %return [
    i32 23, label %if.then70
    i32 18, label %if.then74
  ]

if.then70:                                        ; preds = %if.end67
  %call = tail call %union.tree_node* @build_unary_op(i32 121, %union.tree_node* %exp.addr.0, i32 0)
  br label %return

if.then74:                                        ; preds = %if.end67
  %type76 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type76, align 8, !tbaa !1
  %idxprom81299 = zext i32 %bf.clear7 to i64
  %arrayidx82 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom81299
  %9 = load i8* %arrayidx82, align 1, !tbaa !34
  switch i8 %9, label %if.end104 [
    i8 114, label %if.then96
    i8 100, label %if.then96
  ]

if.then96:                                        ; preds = %if.then74, %if.then74
  %bf.lshr = lshr i32 %bf.load6, 12
  %bf.clear99 = and i32 %bf.lshr, 1
  %bf.lshr102 = lshr i32 %bf.load6, 11
  %bf.clear103 = and i32 %bf.lshr102, 1
  br label %if.end104

if.end104:                                        ; preds = %if.then74, %if.then96
  %constp.0 = phi i32 [ %bf.clear99, %if.then96 ], [ 0, %if.then74 ]
  %volatilep.0 = phi i32 [ %bf.clear103, %if.then96 ], [ 0, %if.then74 ]
  %bf.load107 = load i32* %code3, align 8
  %bf.lshr108 = lshr i32 %bf.load107, 12
  %bf.clear109 = and i32 %bf.lshr108, 1
  %10 = lshr i32 %bf.load107, 10
  %mul115 = and i32 %10, 2
  %type116 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type116, i64 0, i32 6
  %bf.load117 = load i32* %restrict_flag, align 4
  %11 = lshr i32 %bf.load117, 19
  %mul120 = and i32 %11, 4
  %bf.clear125 = and i32 %bf.load107, 255
  %cmp126 = icmp eq i32 %bf.clear125, 20
  %tobool = icmp ne %union.tree_node* %8, null
  %tobool. = and i1 %cmp126, %tobool
  %land.ext = zext i1 %tobool. to i32
  %mul132 = shl nuw nsw i32 %land.ext, 3
  %or = or i32 %volatilep.0, %constp.0
  %or121 = or i32 %or, %mul115
  %or133 = or i32 %or121, %bf.clear109
  %12 = or i32 %or133, %mul120
  %13 = or i32 %12, %mul132
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %if.end179, label %if.then139

if.then139:                                       ; preds = %if.end104
  %tobool169 = icmp ne %union.tree_node* %8, null
  %tobool169. = and i1 %cmp126, %tobool169
  %land.ext171 = zext i1 %tobool169. to i32
  %mul172 = shl nuw nsw i32 %land.ext171, 3
  %mul176 = shl nuw nsw i32 %volatilep.0, 1
  %or152 = or i32 %mul176, %constp.0
  %or159 = or i32 %or152, %mul115
  %or173 = or i32 %or159, %bf.clear109
  %or175 = or i32 %or173, %mul120
  %or177 = or i32 %or175, %mul172
  %call178 = tail call %union.tree_node* @c_build_qualified_type(%union.tree_node* %8, i32 %or177) #6
  %bf.load182.pre = load i32* %code5, align 8
  br label %if.end179

if.end179:                                        ; preds = %if.end104, %if.then139
  %bf.load182 = phi i32 [ %bf.load182.pre, %if.then139 ], [ %bf.load6, %if.end104 ]
  %restype.0 = phi %union.tree_node* [ %call178, %if.then139 ], [ %8, %if.end104 ]
  %bf.clear183 = and i32 %bf.load182, 255
  switch i32 %bf.clear183, label %if.end210 [
    i32 41, label %if.then186
    i32 47, label %if.then199
  ]

if.then186:                                       ; preds = %if.end179
  %15 = getelementptr inbounds %union.tree_node* %restype.0, i64 0, i32 0, i32 8
  %16 = load %union.tree_node** %15, align 8, !tbaa !38
  %operands189 = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 2
  %arrayidx190 = bitcast i32* %operands189 to %union.tree_node**
  %17 = load %union.tree_node** %arrayidx190, align 8, !tbaa !7
  %call191 = tail call %union.tree_node* @convert(%union.tree_node* %16, %union.tree_node* %17) #6
  br label %return

if.then199:                                       ; preds = %if.end179
  %operands201 = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 2
  %arrayidx202 = getelementptr inbounds i32* %operands201, i64 2
  %18 = bitcast i32* %arrayidx202 to %union.tree_node**
  %19 = load %union.tree_node** %18, align 8, !tbaa !7
  %call203 = tail call %union.tree_node* @default_conversion(%union.tree_node* %19)
  %type205 = getelementptr inbounds %union.tree_node* %call203, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type205, align 8, !tbaa !1
  %arrayidx208 = bitcast i32* %operands201 to %union.tree_node**
  %21 = load %union.tree_node** %arrayidx208, align 8, !tbaa !7
  %call209 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 47, %union.tree_node* %20, %union.tree_node* %21, %union.tree_node* %call203) #6
  br label %return

if.end210:                                        ; preds = %if.end179
  %tobool211 = icmp eq i32 %not_lvalue.0.ph, 0
  br i1 %tobool211, label %tailrecurse.i, label %land.end215

tailrecurse.i:                                    ; preds = %if.end210, %sw.bb.i
  %bf.load.i = phi i32 [ %bf.load.i.pre, %sw.bb.i ], [ %bf.load182, %if.end210 ]
  %ref.tr.i = phi %union.tree_node* [ %22, %sw.bb.i ], [ %exp.addr.0, %if.end210 ]
  %bf.clear.i = and i32 %bf.load.i, 255
  switch i32 %bf.clear.i, label %lvalue_p.exit [
    i32 127, label %sw.bb.i
    i32 128, label %sw.bb.i
    i32 39, label %sw.bb.i
    i32 170, label %lvalue_p.exit.loopexit360
    i32 29, label %lvalue_p.exit.loopexit360
    i32 41, label %sw.bb3.i
    i32 43, label %sw.bb3.i
    i32 34, label %sw.bb3.i
    i32 35, label %sw.bb3.i
    i32 36, label %sw.bb3.i
    i32 0, label %sw.bb3.i
    i32 52, label %sw.bb16.i
    i32 120, label %sw.bb16.i
  ]

sw.bb.i:                                          ; preds = %tailrecurse.i, %tailrecurse.i, %tailrecurse.i
  %.in359.in = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 2
  %.in359 = bitcast i32* %.in359.in to %union.tree_node**
  %22 = load %union.tree_node** %.in359, align 8
  %code1.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.pre = load i32* %code1.i.phi.trans.insert, align 8
  br label %tailrecurse.i

sw.bb3.i:                                         ; preds = %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i
  %.in358 = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 1
  %23 = load %union.tree_node** %.in358, align 8
  %code6.i = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 2
  %bf.load7.i = load i32* %code6.i, align 8
  %bf.clear8.i = and i32 %bf.load7.i, 255
  %cmp15.i = icmp ne i32 %bf.clear8.i, 16
  %not.cmp.i = icmp ne i32 %bf.clear8.i, 23
  %.cmp15.i = and i1 %cmp15.i, %not.cmp.i
  %land.ext.i = zext i1 %.cmp15.i to i32
  br label %lvalue_p.exit

sw.bb16.i:                                        ; preds = %tailrecurse.i, %tailrecurse.i
  %.in = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 1
  %24 = load %union.tree_node** %.in, align 8
  %code20.i = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i = load i32* %code20.i, align 8
  %bf.clear22.i = and i32 %bf.load21.i, 255
  %cmp23.i = icmp eq i32 %bf.clear22.i, 18
  %conv.i = zext i1 %cmp23.i to i32
  br label %lvalue_p.exit

lvalue_p.exit.loopexit360:                        ; preds = %tailrecurse.i, %tailrecurse.i
  br label %lvalue_p.exit

lvalue_p.exit:                                    ; preds = %tailrecurse.i, %lvalue_p.exit.loopexit360, %sw.bb3.i, %sw.bb16.i
  %retval.0.i = phi i32 [ %conv.i, %sw.bb16.i ], [ %land.ext.i, %sw.bb3.i ], [ 1, %lvalue_p.exit.loopexit360 ], [ 0, %tailrecurse.i ]
  %tobool214 = icmp ne i32 %retval.0.i, 0
  br label %land.end215

land.end215:                                      ; preds = %if.end210, %lvalue_p.exit
  %25 = phi i1 [ false, %if.end210 ], [ %tobool214, %lvalue_p.exit ]
  %26 = load i32* @flag_isoc99, align 4, !tbaa !27
  %tobool217 = icmp ne i32 %26, 0
  %or.cond247 = or i1 %tobool217, %25
  br i1 %or.cond247, label %if.end220, label %return

if.end220:                                        ; preds = %land.end215
  %call221 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %restype.0) #6
  %bf.load224 = load i32* %code5, align 8
  %bf.clear225 = and i32 %bf.load224, 255
  %cmp226 = icmp eq i32 %bf.clear225, 34
  br i1 %cmp226, label %if.then228, label %if.end242

if.then228:                                       ; preds = %if.end220
  %call229 = tail call %union.tree_node* @build1(i32 121, %union.tree_node* %call221, %union.tree_node* %exp.addr.0) #6
  %call230 = tail call i32 @mark_addressable(%union.tree_node* %exp.addr.0)
  %cmp231 = icmp eq i32 %call230, 0
  br i1 %cmp231, label %if.then233, label %if.end234

if.then233:                                       ; preds = %if.then228
  %27 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end234:                                        ; preds = %if.then228
  %call235 = tail call i32 @staticp(%union.tree_node* %exp.addr.0) #6
  %constant_flag = getelementptr inbounds %union.tree_node* %call229, i64 0, i32 0, i32 0, i32 2
  %bf.load237 = load i32* %constant_flag, align 8
  %bf.value = shl i32 %call235, 9
  %bf.shl = and i32 %bf.value, 512
  %bf.clear238 = and i32 %bf.load237, -769
  %bf.set = or i32 %bf.clear238, %bf.shl
  store i32 %bf.set, i32* %constant_flag, align 8
  br label %return

if.end242:                                        ; preds = %if.end220
  %call243 = tail call %union.tree_node* @build_unary_op(i32 121, %union.tree_node* %exp.addr.0, i32 1)
  %call244 = tail call %union.tree_node* @convert(%union.tree_node* %call221, %union.tree_node* %call243) #6
  br label %return

return:                                           ; preds = %if.end67, %land.end215, %if.end242, %if.end234, %if.then233, %if.then199, %if.then186, %if.then70
  %retval.0 = phi %union.tree_node* [ %call, %if.then70 ], [ %call191, %if.then186 ], [ %call209, %if.then199 ], [ %27, %if.then233 ], [ %call229, %if.end234 ], [ %call244, %if.end242 ], [ %exp.addr.0, %land.end215 ], [ %exp.addr.0, %if.end67 ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #1

declare i32 @compare_tree_int(%union.tree_node*, i64) #1

declare zeroext i1 @c_promoting_integer_type_p(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_component_ref(%union.tree_node* %datum, %union.tree_node* readonly %component) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %datum, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !1
  %code3 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code3, align 8
  %bf.clear = and i32 %bf.load, 255
  %code5 = getelementptr inbounds %union.tree_node* %datum, i64 0, i32 0, i32 0, i32 2
  %bf.load6 = load i32* %code5, align 8
  %bf.clear7 = and i32 %bf.load6, 255
  %cond84 = icmp eq i32 %bf.clear7, 47
  br i1 %cond84, label %sw.bb, label %sw.epilog

sw.bb:                                            ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node* %datum, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %1 = bitcast i32* %arrayidx to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !7
  %call = tail call %union.tree_node* @build_component_ref(%union.tree_node* %2, %union.tree_node* %component)
  %type9 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type9, align 8, !tbaa !1
  %arrayidx12 = bitcast i32* %operands to %union.tree_node**
  %4 = load %union.tree_node** %arrayidx12, align 8, !tbaa !7
  %call13 = tail call %union.tree_node* @pedantic_non_lvalue(%union.tree_node* %call) #6
  %call14 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 47, %union.tree_node* %3, %union.tree_node* %4, %union.tree_node* %call13) #6
  ret %union.tree_node* %call14

sw.epilog:                                        ; preds = %entry
  %cmp = icmp eq i32 %bf.clear, 20
  %5 = and i32 %bf.load, 254
  %6 = icmp eq i32 %5, 20
  br i1 %6, label %if.then, label %if.else

if.then:                                          ; preds = %sw.epilog
  %size = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 2
  %7 = bitcast i32* %size to %union.tree_node**
  %8 = load %union.tree_node** %7, align 8, !tbaa !8
  %cmp17 = icmp eq %union.tree_node* %8, null
  br i1 %cmp17, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.then
  tail call void @incomplete_type_error(%union.tree_node* null, %union.tree_node* %0)
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end:                                           ; preds = %if.then
  %call19 = tail call fastcc %union.tree_node* @lookup_field(%union.tree_node* %0, %union.tree_node* %component)
  %tobool = icmp eq %union.tree_node* %call19, null
  br i1 %tobool, label %if.then20, label %for.body

if.then20:                                        ; preds = %if.end
  %cond = select i1 %cmp, i8* getelementptr inbounds ([10 x i8]* @.str17, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @.str2, i64 0, i64 0)
  %id = getelementptr inbounds %union.tree_node* %component, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds i8** %id, i64 1
  %11 = load i8** %10, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([28 x i8]* @.str16, i64 0, i64 0), i8* %cond, i8* %11) #6
  %12 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

for.body:                                         ; preds = %if.end, %if.end75
  %datum.addr.0115 = phi %union.tree_node* [ %call32, %if.end75 ], [ %datum, %if.end ]
  %field.0114 = phi %union.tree_node* [ %17, %if.end75 ], [ %call19, %if.end ]
  %value24 = getelementptr inbounds %union.tree_node* %field.0114, i64 0, i32 0, i32 2
  %13 = bitcast i32* %value24 to %union.tree_node**
  %14 = load %union.tree_node** %13, align 8, !tbaa !25
  %type26 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 1
  %15 = load %union.tree_node** %type26, align 8, !tbaa !1
  %16 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp27 = icmp eq %union.tree_node* %15, %16
  br i1 %cmp27, label %return, label %if.end29

if.end29:                                         ; preds = %for.body
  %call32 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 39, %union.tree_node* %15, %union.tree_node* %datum.addr.0115, %union.tree_node* %14) #6
  %readonly_flag = getelementptr inbounds %union.tree_node* %datum.addr.0115, i64 0, i32 0, i32 0, i32 2
  %bf.load34 = load i32* %readonly_flag, align 8
  %bf.clear35 = and i32 %bf.load34, 4096
  %tobool36 = icmp eq i32 %bf.clear35, 0
  br i1 %tobool36, label %lor.lhs.false37, label %if.then44

lor.lhs.false37:                                  ; preds = %if.end29
  %readonly_flag39 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 2
  %bf.load40 = load i32* %readonly_flag39, align 8
  %bf.clear42 = and i32 %bf.load40, 4096
  %tobool43 = icmp eq i32 %bf.clear42, 0
  br i1 %tobool43, label %if.end49, label %if.then44

if.then44:                                        ; preds = %lor.lhs.false37, %if.end29
  %readonly_flag46 = getelementptr inbounds %union.tree_node* %call32, i64 0, i32 0, i32 0, i32 2
  %bf.load47 = load i32* %readonly_flag46, align 8
  %bf.set = or i32 %bf.load47, 4096
  store i32 %bf.set, i32* %readonly_flag46, align 8
  %bf.load51.pre = load i32* %readonly_flag, align 8
  br label %if.end49

if.end49:                                         ; preds = %lor.lhs.false37, %if.then44
  %bf.load51 = phi i32 [ %bf.load34, %lor.lhs.false37 ], [ %bf.load51.pre, %if.then44 ]
  %bf.clear53 = and i32 %bf.load51, 2048
  %tobool54 = icmp eq i32 %bf.clear53, 0
  %volatile_flag57 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 2
  br i1 %tobool54, label %lor.lhs.false55, label %if.then62

lor.lhs.false55:                                  ; preds = %if.end49
  %bf.load58 = load i32* %volatile_flag57, align 8
  %bf.clear60 = and i32 %bf.load58, 2048
  %tobool61 = icmp eq i32 %bf.clear60, 0
  br i1 %tobool61, label %if.end68, label %if.then62

if.then62:                                        ; preds = %if.end49, %lor.lhs.false55
  %volatile_flag64 = getelementptr inbounds %union.tree_node* %call32, i64 0, i32 0, i32 0, i32 2
  %bf.load65 = load i32* %volatile_flag64, align 8
  %bf.set67 = or i32 %bf.load65, 2048
  store i32 %bf.set67, i32* %volatile_flag64, align 8
  %bf.load70.pre = load i32* %volatile_flag57, align 8
  br label %if.end68

if.end68:                                         ; preds = %lor.lhs.false55, %if.then62
  %bf.load70 = phi i32 [ %bf.load58, %lor.lhs.false55 ], [ %bf.load70.pre, %if.then62 ]
  %bf.clear72 = and i32 %bf.load70, 8388608
  %tobool73 = icmp eq i32 %bf.clear72, 0
  br i1 %tobool73, label %if.end75, label %if.then74

if.then74:                                        ; preds = %if.end68
  tail call void @warn_deprecated_use(%union.tree_node* %14) #6
  br label %if.end75

if.end75:                                         ; preds = %if.end68, %if.then74
  %chain = getelementptr inbounds %union.tree_node* %field.0114, i64 0, i32 0, i32 0, i32 0
  %17 = load %union.tree_node** %chain, align 8, !tbaa !28
  %tobool23 = icmp eq %union.tree_node* %17, null
  br i1 %tobool23, label %return, label %for.body

if.else:                                          ; preds = %sw.epilog
  %cmp77 = icmp eq i32 %bf.clear, 0
  br i1 %cmp77, label %if.end83, label %if.then78

if.then78:                                        ; preds = %if.else
  %id80 = getelementptr inbounds %union.tree_node* %component, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds i8** %id80, i64 1
  %19 = load i8** %18, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([62 x i8]* @.str18, i64 0, i64 0), i8* %19) #6
  br label %if.end83

if.end83:                                         ; preds = %if.else, %if.then78
  %20 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

return:                                           ; preds = %for.body, %if.end75, %if.end83, %if.then20, %if.then18
  %retval.0 = phi %union.tree_node* [ %12, %if.then20 ], [ %9, %if.then18 ], [ %20, %if.end83 ], [ %15, %for.body ], [ %call32, %if.end75 ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @build(i32, %union.tree_node*, ...) #1

declare %union.tree_node* @pedantic_non_lvalue(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @lookup_field(%union.tree_node* %decl.0.0.0.1.val, %union.tree_node* readnone %component) #0 {
entry:
  %lang_specific = getelementptr inbounds %union.tree_node* %decl.0.0.0.1.val, i64 0, i32 0, i32 19
  %0 = bitcast %union.anon.1* %lang_specific to %struct.lang_type**
  %1 = load %struct.lang_type** %0, align 8, !tbaa !39
  %tobool = icmp eq %struct.lang_type* %1, null
  %values73 = getelementptr inbounds %union.tree_node* %decl.0.0.0.1.val, i64 0, i32 0, i32 1
  %2 = load i8** %values73, align 8
  %3 = bitcast i8* %2 to %union.tree_node*
  br i1 %tobool, label %for.cond.preheader, label %if.then

for.cond.preheader:                               ; preds = %entry
  %cond22 = icmp eq i8* %2, null
  br i1 %cond22, label %return, label %for.body

if.then:                                          ; preds = %entry
  %len = getelementptr inbounds %struct.lang_type* %1, i64 0, i32 0
  %4 = load i32* %len, align 4, !tbaa !40
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %if.end47, %if.then
  %top.0.ph = phi i32 [ %4, %if.then ], [ %top.0.add9, %if.end47 ]
  %bot.0.ph = phi i32 [ 0, %if.then ], [ %add9.bot.0, %if.end47 ]
  %field.0.ph = phi %union.tree_node* [ %3, %if.then ], [ %5, %if.end47 ]
  br label %while.cond

while.cond:                                       ; preds = %while.cond.outer, %while.end
  %bot.0 = phi i32 [ %bot.1.lcssa, %while.end ], [ %bot.0.ph, %while.cond.outer ]
  %field.0 = phi %union.tree_node* [ %field.1.lcssa, %while.end ], [ %field.0.ph, %while.cond.outer ]
  %sub = sub nsw i32 %top.0.ph, %bot.0
  %cmp = icmp sgt i32 %sub, 1
  br i1 %cmp, label %while.body, label %while.end55

while.body:                                       ; preds = %while.cond
  %add = add nsw i32 %sub, 1
  %shr = ashr i32 %add, 1
  %add9 = add nsw i32 %shr, %bot.0
  %idxprom = sext i32 %add9 to i64
  %arrayidx10 = getelementptr inbounds %struct.lang_type* %1, i64 0, i32 1, i64 %idxprom
  %5 = load %union.tree_node** %arrayidx10, align 8, !tbaa !7
  %name = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 8
  %6 = load %union.tree_node** %name, align 8, !tbaa !11
  %cmp12 = icmp eq %union.tree_node* %6, null
  br i1 %cmp12, label %while.cond14.preheader, label %if.end42

while.cond14.preheader:                           ; preds = %while.body
  %idxprom1524 = sext i32 %bot.0 to i64
  %arrayidx1625 = getelementptr inbounds %struct.lang_type* %1, i64 0, i32 1, i64 %idxprom1524
  %7 = load %union.tree_node** %arrayidx1625, align 8, !tbaa !7
  %name1826 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 8
  %8 = load %union.tree_node** %name1826, align 8, !tbaa !11
  %cmp1927 = icmp eq %union.tree_node* %8, null
  br i1 %cmp1927, label %while.body20, label %while.end

while.body20:                                     ; preds = %while.cond14.preheader, %while.cond14.backedge
  %indvars.iv = phi i64 [ %indvars.iv.next, %while.cond14.backedge ], [ %idxprom1524, %while.cond14.preheader ]
  %9 = phi %union.tree_node* [ %12, %while.cond14.backedge ], [ %7, %while.cond14.preheader ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %type24 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 1
  %10 = load %union.tree_node** %type24, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %11 = and i32 %bf.load, 254
  %switch = icmp eq i32 %11, 20
  br i1 %switch, label %if.then34, label %while.cond14.backedge

if.then34:                                        ; preds = %while.body20
  %call = tail call fastcc %union.tree_node* @lookup_field(%union.tree_node* %10, %union.tree_node* %component)
  %tobool35 = icmp eq %union.tree_node* %call, null
  br i1 %tobool35, label %while.cond14.backedge, label %if.then36

while.cond14.backedge:                            ; preds = %if.then34, %while.body20
  %arrayidx16 = getelementptr inbounds %struct.lang_type* %1, i64 0, i32 1, i64 %indvars.iv.next
  %12 = load %union.tree_node** %arrayidx16, align 8, !tbaa !7
  %name18 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 8
  %13 = load %union.tree_node** %name18, align 8, !tbaa !11
  %cmp19 = icmp eq %union.tree_node* %13, null
  br i1 %cmp19, label %while.body20, label %while.cond14.while.end_crit_edge

if.then36:                                        ; preds = %if.then34
  %call37 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %9, %union.tree_node* %call) #6
  br label %return

while.cond14.while.end_crit_edge:                 ; preds = %while.cond14.backedge
  %14 = trunc i64 %indvars.iv.next to i32
  br label %while.end

while.end:                                        ; preds = %while.cond14.while.end_crit_edge, %while.cond14.preheader
  %field.1.lcssa = phi %union.tree_node* [ %9, %while.cond14.while.end_crit_edge ], [ %5, %while.cond14.preheader ]
  %bot.1.lcssa = phi i32 [ %14, %while.cond14.while.end_crit_edge ], [ %bot.0, %while.cond14.preheader ]
  %cmp39 = icmp sgt i32 %bot.1.lcssa, %top.0.ph
  br i1 %cmp39, label %return, label %while.cond

if.end42:                                         ; preds = %while.body
  %cmp45 = icmp eq %union.tree_node* %6, %component
  br i1 %cmp45, label %while.end55, label %if.end47

if.end47:                                         ; preds = %if.end42
  %cmp50 = icmp ult %union.tree_node* %6, %component
  %top.0.add9 = select i1 %cmp50, i32 %top.0.ph, i32 %add9
  %add9.bot.0 = select i1 %cmp50, i32 %add9, i32 %bot.0
  br label %while.cond.outer

while.end55:                                      ; preds = %if.end42, %while.cond
  %field.2 = phi %union.tree_node* [ %field.0, %while.cond ], [ %5, %if.end42 ]
  %idxprom56 = sext i32 %bot.0 to i64
  %arrayidx57 = getelementptr inbounds %struct.lang_type* %1, i64 0, i32 1, i64 %idxprom56
  %15 = load %union.tree_node** %arrayidx57, align 8, !tbaa !7
  %name59 = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 8
  %16 = load %union.tree_node** %name59, align 8, !tbaa !11
  %cmp60 = icmp eq %union.tree_node* %16, %component
  br i1 %cmp60, label %if.end110, label %if.else64

if.else64:                                        ; preds = %while.end55
  %name66 = getelementptr inbounds %union.tree_node* %field.2, i64 0, i32 0, i32 8
  %17 = load %union.tree_node** %name66, align 8, !tbaa !11
  %cmp67 = icmp eq %union.tree_node* %17, %component
  br i1 %cmp67, label %if.end110, label %return

for.body:                                         ; preds = %for.cond.preheader, %for.inc
  %field.323 = phi %union.tree_node* [ %22, %for.inc ], [ %3, %for.cond.preheader ]
  %name76 = getelementptr inbounds %union.tree_node* %field.323, i64 0, i32 0, i32 8
  %18 = load %union.tree_node** %name76, align 8, !tbaa !11
  %cmp77 = icmp eq %union.tree_node* %18, null
  br i1 %cmp77, label %land.lhs.true, label %if.end100

land.lhs.true:                                    ; preds = %for.body
  %type79 = getelementptr inbounds %union.tree_node* %field.323, i64 0, i32 0, i32 0, i32 1
  %19 = load %union.tree_node** %type79, align 8, !tbaa !1
  %code81 = getelementptr inbounds %union.tree_node* %19, i64 0, i32 0, i32 0, i32 2
  %bf.load82 = load i32* %code81, align 8
  %20 = and i32 %bf.load82, 254
  %switch156 = icmp eq i32 %20, 20
  br i1 %switch156, label %if.then93, label %if.end100

if.then93:                                        ; preds = %land.lhs.true
  %call95 = tail call fastcc %union.tree_node* @lookup_field(%union.tree_node* %19, %union.tree_node* %component)
  %tobool96 = icmp eq %union.tree_node* %call95, null
  br i1 %tobool96, label %if.then93.if.end100_crit_edge, label %if.then97

if.then93.if.end100_crit_edge:                    ; preds = %if.then93
  %.pre = load %union.tree_node** %name76, align 8, !tbaa !11
  br label %if.end100

if.then97:                                        ; preds = %if.then93
  %call98 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %field.323, %union.tree_node* %call95) #6
  br label %return

if.end100:                                        ; preds = %if.then93.if.end100_crit_edge, %land.lhs.true, %for.body
  %21 = phi %union.tree_node* [ %.pre, %if.then93.if.end100_crit_edge ], [ null, %land.lhs.true ], [ %18, %for.body ]
  %cmp103 = icmp eq %union.tree_node* %21, %component
  br i1 %cmp103, label %for.end, label %for.inc

for.inc:                                          ; preds = %if.end100
  %chain = getelementptr inbounds %union.tree_node* %field.323, i64 0, i32 0, i32 0, i32 0
  %22 = load %union.tree_node** %chain, align 8, !tbaa !28
  %cond = icmp eq %union.tree_node* %22, null
  br i1 %cond, label %return, label %for.body

for.end:                                          ; preds = %if.end100
  %cmp107 = icmp eq %union.tree_node* %field.323, null
  br i1 %cmp107, label %return, label %if.end110

if.end110:                                        ; preds = %while.end55, %if.else64, %for.end
  %field.4 = phi %union.tree_node* [ %field.2, %if.else64 ], [ %field.323, %for.end ], [ %15, %while.end55 ]
  %call111 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %field.4, %union.tree_node* null) #6
  br label %return

return:                                           ; preds = %while.end, %for.inc, %for.cond.preheader, %for.end, %if.else64, %if.end110, %if.then97, %if.then36
  %retval.0 = phi %union.tree_node* [ %call37, %if.then36 ], [ %call111, %if.end110 ], [ %call98, %if.then97 ], [ null, %if.else64 ], [ null, %for.end ], [ null, %for.cond.preheader ], [ null, %for.inc ], [ null, %while.end ]
  ret %union.tree_node* %retval.0
}

declare void @warn_deprecated_use(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_indirect_ref(%union.tree_node* %ptr, i8* %errorstring) #0 {
entry:
  %call = tail call %union.tree_node* @default_conversion(%union.tree_node* %ptr)
  %type1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 13
  %code4 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load5 = load i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  br i1 %cmp, label %if.then, label %if.else83

if.then:                                          ; preds = %entry
  %cmp7 = icmp ne i32 %bf.clear6, 121
  %1 = load i32* @flag_volatile, align 4
  %tobool = icmp ne i32 %1, 0
  %or.cond = or i1 %cmp7, %tobool
  br i1 %or.cond, label %if.then.if.else_crit_edge, label %land.lhs.true8

if.then.if.else_crit_edge:                        ; preds = %if.then
  %type19.phi.trans.insert = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %.pre = load %union.tree_node** %type19.phi.trans.insert, align 8, !tbaa !1
  br label %if.else

land.lhs.true8:                                   ; preds = %if.then
  %operands = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %2 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %type10 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type10, align 8, !tbaa !1
  %type12 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type12, align 8, !tbaa !1
  %cmp13 = icmp eq %union.tree_node* %3, %4
  br i1 %cmp13, label %return, label %if.else

if.else:                                          ; preds = %if.then.if.else_crit_edge, %land.lhs.true8
  %5 = phi %union.tree_node* [ %.pre, %if.then.if.else_crit_edge ], [ %4, %land.lhs.true8 ]
  %6 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 15
  %7 = load %union.tree_node** %6, align 8, !tbaa !24
  %call21 = tail call %union.tree_node* @build1(i32 41, %union.tree_node* %7, %union.tree_node* %call) #6
  %size = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 2
  %8 = bitcast i32* %size to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !8
  %cmp23 = icmp eq %union.tree_node* %9, null
  %code25 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 2
  %bf.load26 = load i32* %code25, align 8
  br i1 %cmp23, label %lor.lhs.false, label %if.end

lor.lhs.false:                                    ; preds = %if.else
  %bf.clear27 = and i32 %bf.load26, 255
  switch i32 %bf.clear27, label %if.then35 [
    i32 5, label %if.end
    i32 18, label %if.end
  ]

if.then35:                                        ; preds = %lor.lhs.false
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([41 x i8]* @.str19, i64 0, i64 0)) #6
  %10 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end:                                           ; preds = %if.else, %lor.lhs.false, %lor.lhs.false
  %code37 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 2
  %bf.clear39 = and i32 %bf.load26, 255
  %cmp40 = icmp eq i32 %bf.clear39, 5
  %11 = load i32* @skip_evaluation, align 4
  %cmp42 = icmp eq i32 %11, 0
  %or.cond92 = and i1 %cmp40, %cmp42
  br i1 %or.cond92, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([31 x i8]* @.str20, i64 0, i64 0)) #6
  %bf.load46.pre = load i32* %code37, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %if.end
  %bf.load46 = phi i32 [ %bf.load46.pre, %if.then43 ], [ %bf.load26, %if.end ]
  %bf.clear47 = and i32 %bf.load46, 4096
  %readonly_flag49 = getelementptr inbounds %union.tree_node* %call21, i64 0, i32 0, i32 0, i32 2
  %bf.load50 = load i32* %readonly_flag49, align 8
  %bf.clear51 = and i32 %bf.load50, -4097
  %bf.set = or i32 %bf.clear51, %bf.clear47
  store i32 %bf.set, i32* %readonly_flag49, align 8
  %bf.load53 = load i32* %code37, align 8
  %bf.clear55 = and i32 %bf.load53, 2048
  %tobool56 = icmp eq i32 %bf.clear55, 0
  br i1 %tobool56, label %lor.lhs.false57, label %lor.end

lor.lhs.false57:                                  ; preds = %if.end44
  %bf.load59 = load i32* %code4, align 8
  %bf.clear61 = and i32 %bf.load59, 256
  %tobool62 = icmp eq i32 %bf.clear61, 0
  br i1 %tobool62, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %lor.lhs.false57
  %12 = load i32* @flag_volatile, align 4, !tbaa !27
  %tobool63 = icmp ne i32 %12, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.lhs.false57, %if.end44, %lor.rhs
  %13 = phi i1 [ true, %lor.lhs.false57 ], [ true, %if.end44 ], [ %tobool63, %lor.rhs ]
  %lor.ext = zext i1 %13 to i32
  %bf.shl68 = shl nuw nsw i32 %lor.ext, 8
  %bf.clear69 = and i32 %bf.set, -257
  %bf.set70 = or i32 %bf.clear69, %bf.shl68
  store i32 %bf.set70, i32* %readonly_flag49, align 8
  %bf.load73 = load i32* %code37, align 8
  %bf.clear75 = and i32 %bf.load73, 2048
  %bf.clear81 = and i32 %bf.set70, -2049
  %bf.set82 = or i32 %bf.clear81, %bf.clear75
  store i32 %bf.set82, i32* %readonly_flag49, align 8
  br label %return

if.else83:                                        ; preds = %entry
  %cmp88 = icmp eq i32 %bf.clear6, 0
  br i1 %cmp88, label %if.end91, label %if.then89

if.then89:                                        ; preds = %if.else83
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([30 x i8]* @.str21, i64 0, i64 0), i8* %errorstring) #6
  br label %if.end91

if.end91:                                         ; preds = %if.else83, %if.then89
  %14 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

return:                                           ; preds = %land.lhs.true8, %if.end91, %lor.end, %if.then35
  %retval.0 = phi %union.tree_node* [ %call21, %lor.end ], [ %10, %if.then35 ], [ %14, %if.end91 ], [ %2, %land.lhs.true8 ]
  ret %union.tree_node* %retval.0
}

declare void @warning(i8*, ...) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_array_ref(%union.tree_node* %array, %union.tree_node* %index) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %index, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([37 x i8]* @.str22, i64 0, i64 0)) #6
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %union.tree_node* %array, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !1
  %2 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp1 = icmp eq %union.tree_node* %1, %2
  br i1 %cmp1, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %type3 = getelementptr inbounds %union.tree_node* %index, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type3, align 8, !tbaa !1
  %cmp4 = icmp eq %union.tree_node* %3, %2
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %lor.lhs.false
  %code = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp10 = icmp eq i32 %bf.clear, 18
  br i1 %cmp10, label %land.lhs.true, label %if.end192

land.lhs.true:                                    ; preds = %if.end6
  %code12 = getelementptr inbounds %union.tree_node* %array, i64 0, i32 0, i32 0, i32 2
  %bf.load13 = load i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 41
  br i1 %cmp15, label %if.end192, label %if.then16

if.then16:                                        ; preds = %land.lhs.true
  %4 = load i32* @warn_char_subscripts, align 4, !tbaa !27
  %tobool = icmp eq i32 %4, 0
  br i1 %tobool, label %if.end24, label %land.lhs.true18

land.lhs.true18:                                  ; preds = %if.then16
  %5 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 15
  %6 = load %union.tree_node** %5, align 8, !tbaa !24
  %7 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %cmp22 = icmp eq %union.tree_node* %6, %7
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %land.lhs.true18
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([32 x i8]* @.str23, i64 0, i64 0)) #6
  br label %if.end24

if.end24:                                         ; preds = %if.then16, %if.then23, %land.lhs.true18
  %call = tail call %union.tree_node* @default_conversion(%union.tree_node* %index)
  %type26 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type26, align 8, !tbaa !1
  %code28 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load29 = load i32* %code28, align 8
  %bf.clear30 = and i32 %bf.load29, 255
  %cmp31 = icmp eq i32 %bf.clear30, 6
  br i1 %cmp31, label %if.end33, label %if.then32

if.then32:                                        ; preds = %if.end24
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([34 x i8]* @.str24, i64 0, i64 0)) #6
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end33:                                         ; preds = %if.end24
  %code35 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load36 = load i32* %code35, align 8
  %bf.clear37 = and i32 %bf.load36, 255
  %cmp38 = icmp eq i32 %bf.clear37, 25
  br i1 %cmp38, label %lor.lhs.false39, label %if.then58

lor.lhs.false39:                                  ; preds = %if.end33
  %10 = load %union.tree_node** %type, align 8, !tbaa !1
  %type43 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type43, align 8, !tbaa !1
  %size = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 2
  %12 = bitcast i32* %size to %union.tree_node**
  %13 = load %union.tree_node** %12, align 8, !tbaa !8
  %cmp45 = icmp eq %union.tree_node* %13, null
  br i1 %cmp45, label %if.end63, label %land.lhs.true46

land.lhs.true46:                                  ; preds = %lor.lhs.false39
  %code54 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 2
  %bf.load55 = load i32* %code54, align 8
  %bf.clear56 = and i32 %bf.load55, 255
  %cmp57 = icmp eq i32 %bf.clear56, 25
  br i1 %cmp57, label %if.end63, label %if.then58

if.then58:                                        ; preds = %land.lhs.true46, %if.end33
  %call59 = tail call i32 @mark_addressable(%union.tree_node* %array)
  %cmp60 = icmp eq i32 %call59, 0
  br i1 %cmp60, label %if.then61, label %if.then58.if.end63_crit_edge

if.then58.if.end63_crit_edge:                     ; preds = %if.then58
  %bf.load66.pre = load i32* %code35, align 8
  br label %if.end63

if.then61:                                        ; preds = %if.then58
  %14 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end63:                                         ; preds = %if.then58.if.end63_crit_edge, %land.lhs.true46, %lor.lhs.false39
  %bf.load66 = phi i32 [ %bf.load66.pre, %if.then58.if.end63_crit_edge ], [ %bf.load36, %land.lhs.true46 ], [ %bf.load36, %lor.lhs.false39 ]
  %bf.clear67 = and i32 %bf.load66, 255
  %cmp68 = icmp eq i32 %bf.clear67, 25
  br i1 %cmp68, label %land.lhs.true69, label %if.end86

land.lhs.true69:                                  ; preds = %if.end63
  %15 = load %union.tree_node** %type, align 8, !tbaa !1
  %values = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 1
  %16 = load i8** %values, align 8
  %tobool73 = icmp eq i8* %16, null
  br i1 %tobool73, label %if.end86, label %land.lhs.true74

land.lhs.true74:                                  ; preds = %land.lhs.true69
  %17 = bitcast i8* %16 to %union.tree_node*
  %call79 = tail call i32 @int_fits_type_p(%union.tree_node* %call, %union.tree_node* %17) #6
  %tobool80 = icmp eq i32 %call79, 0
  br i1 %tobool80, label %if.then81, label %if.end86

if.then81:                                        ; preds = %land.lhs.true74
  %call82 = tail call i32 @mark_addressable(%union.tree_node* %array)
  %cmp83 = icmp eq i32 %call82, 0
  br i1 %cmp83, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.then81
  %18 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end86:                                         ; preds = %land.lhs.true74, %land.lhs.true69, %if.then81, %if.end63
  %19 = load i32* @pedantic, align 4, !tbaa !27
  %tobool87 = icmp eq i32 %19, 0
  br i1 %tobool87, label %if.end111, label %while.cond

while.cond:                                       ; preds = %if.end86, %while.body
  %foo.0 = phi %union.tree_node* [ %20, %while.body ], [ %array, %if.end86 ]
  %code90 = getelementptr inbounds %union.tree_node* %foo.0, i64 0, i32 0, i32 0, i32 2
  %bf.load91 = load i32* %code90, align 8
  %bf.clear92 = and i32 %bf.load91, 255
  switch i32 %bf.clear92, label %if.else [
    i32 39, label %while.body
    i32 34, label %land.lhs.true99
  ]

while.body:                                       ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %foo.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %20 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  br label %while.cond

land.lhs.true99:                                  ; preds = %while.cond
  %regdecl_flag = getelementptr inbounds %union.tree_node* %foo.0, i64 0, i32 0, i32 5
  %21 = bitcast i48* %regdecl_flag to i64*
  %bf.load100 = load i64* %21, align 8
  %bf.cast = and i64 %bf.load100, 1024
  %tobool102 = icmp eq i64 %bf.cast, 0
  br i1 %tobool102, label %if.else, label %if.then103

if.then103:                                       ; preds = %land.lhs.true99
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([44 x i8]* @.str25, i64 0, i64 0)) #6
  br label %if.end111

if.else:                                          ; preds = %while.cond, %land.lhs.true99
  %22 = load i32* @flag_isoc99, align 4, !tbaa !27
  %tobool104 = icmp eq i32 %22, 0
  br i1 %tobool104, label %tailrecurse.i, label %if.end111

tailrecurse.i:                                    ; preds = %if.else, %sw.bb.i
  %bf.load.i = phi i32 [ %bf.load.i.pre, %sw.bb.i ], [ %bf.load91, %if.else ]
  %ref.tr.i = phi %union.tree_node* [ %23, %sw.bb.i ], [ %foo.0, %if.else ]
  %bf.clear.i = and i32 %bf.load.i, 255
  switch i32 %bf.clear.i, label %if.then108 [
    i32 127, label %sw.bb.i
    i32 128, label %sw.bb.i
    i32 39, label %sw.bb.i
    i32 170, label %if.end111
    i32 29, label %if.end111
    i32 41, label %sw.bb3.i
    i32 43, label %sw.bb3.i
    i32 34, label %sw.bb3.i
    i32 35, label %sw.bb3.i
    i32 36, label %sw.bb3.i
    i32 0, label %sw.bb3.i
    i32 52, label %lvalue_p.exit
    i32 120, label %lvalue_p.exit
  ]

sw.bb.i:                                          ; preds = %tailrecurse.i, %tailrecurse.i, %tailrecurse.i
  %operands.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 2
  %arrayidx.i = bitcast i32* %operands.i to %union.tree_node**
  %23 = load %union.tree_node** %arrayidx.i, align 8, !tbaa !7
  %code1.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.pre = load i32* %code1.i.phi.trans.insert, align 8
  br label %tailrecurse.i

sw.bb3.i:                                         ; preds = %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i
  %type.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 1
  %24 = load %union.tree_node** %type.i, align 8, !tbaa !1
  %code6.i = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load7.i = load i32* %code6.i, align 8
  %bf.clear8.i = and i32 %bf.load7.i, 255
  switch i32 %bf.clear8.i, label %if.end111 [
    i32 23, label %if.then108
    i32 16, label %if.then108
  ]

lvalue_p.exit:                                    ; preds = %tailrecurse.i, %tailrecurse.i
  %type18.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 1
  %25 = load %union.tree_node** %type18.i, align 8, !tbaa !1
  %code20.i = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i = load i32* %code20.i, align 8
  %bf.clear22.i = and i32 %bf.load21.i, 255
  %cmp23.i = icmp eq i32 %bf.clear22.i, 18
  br i1 %cmp23.i, label %if.end111, label %if.then108

if.then108:                                       ; preds = %tailrecurse.i, %sw.bb3.i, %sw.bb3.i, %lvalue_p.exit
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([46 x i8]* @.str26, i64 0, i64 0)) #6
  br label %if.end111

if.end111:                                        ; preds = %tailrecurse.i, %tailrecurse.i, %sw.bb3.i, %lvalue_p.exit, %if.else, %if.end86, %if.then103, %if.then108
  %26 = load %union.tree_node** %type, align 8, !tbaa !1
  %type115 = getelementptr inbounds %union.tree_node* %26, i64 0, i32 0, i32 0, i32 1
  %27 = load %union.tree_node** %type115, align 8, !tbaa !1
  %28 = getelementptr inbounds %union.tree_node* %27, i64 0, i32 0, i32 15
  %29 = load %union.tree_node** %28, align 8, !tbaa !24
  %call118 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 43, %union.tree_node* %29, %union.tree_node* %array, %union.tree_node* %call) #6
  %30 = load %union.tree_node** %type, align 8, !tbaa !1
  %type122 = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 0, i32 1
  %31 = load %union.tree_node** %type122, align 8, !tbaa !1
  %readonly_flag = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 0, i32 2
  %bf.load124 = load i32* %readonly_flag, align 8
  %bf.load129 = load i32* %code12, align 8
  %bf.lshr125297 = or i32 %bf.load129, %bf.load124
  %readonly_flag133 = getelementptr inbounds %union.tree_node* %call118, i64 0, i32 0, i32 0, i32 2
  %bf.load134 = load i32* %readonly_flag133, align 8
  %32 = and i32 %bf.lshr125297, 4096
  %bf.set = or i32 %32, %bf.load134
  store i32 %bf.set, i32* %readonly_flag133, align 8
  %33 = load %union.tree_node** %type, align 8, !tbaa !1
  %type143 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 0, i32 1
  %34 = load %union.tree_node** %type143, align 8, !tbaa !1
  %volatile_flag = getelementptr inbounds %union.tree_node* %34, i64 0, i32 0, i32 0, i32 2
  %bf.load145 = load i32* %volatile_flag, align 8
  %bf.load149 = load i32* %code12, align 8
  %35 = lshr i32 %bf.load145, 3
  %bf.lshr150305 = or i32 %bf.load149, %bf.load134
  %bf.lshr156303 = or i32 %bf.lshr150305, %35
  %bf.shl161 = and i32 %bf.lshr156303, 256
  %bf.clear162 = and i32 %bf.set, -257
  %bf.set163 = or i32 %bf.shl161, %bf.clear162
  store i32 %bf.set163, i32* %readonly_flag133, align 8
  %36 = load %union.tree_node** %type, align 8, !tbaa !1
  %type167 = getelementptr inbounds %union.tree_node* %36, i64 0, i32 0, i32 0, i32 1
  %37 = load %union.tree_node** %type167, align 8, !tbaa !1
  %volatile_flag169 = getelementptr inbounds %union.tree_node* %37, i64 0, i32 0, i32 0, i32 2
  %bf.load170 = load i32* %volatile_flag169, align 8
  %bf.load175 = load i32* %code12, align 8
  %bf.lshr171307 = or i32 %bf.load170, %bf.load134
  %bf.lshr182309 = or i32 %bf.lshr171307, %bf.load175
  %or184 = and i32 %bf.lshr182309, 2048
  %bf.clear188 = and i32 %bf.set163, -2049
  %bf.set189 = or i32 %or184, %bf.clear188
  store i32 %bf.set189, i32* %readonly_flag133, align 8
  %call190 = tail call %union.tree_node* @fold(%union.tree_node* %call118) #6
  %type1.i = getelementptr inbounds %union.tree_node* %call190, i64 0, i32 0, i32 0, i32 1
  %38 = load %union.tree_node** %type1.i, align 8, !tbaa !1
  %39 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp.i = icmp eq %union.tree_node* %39, %call190
  %cmp2.i = icmp eq %union.tree_node* %38, %39
  %or.cond.i = or i1 %cmp.i, %cmp2.i
  br i1 %or.cond.i, label %return, label %if.end.i

if.end.i:                                         ; preds = %if.end111
  %size.i = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 2
  %40 = bitcast i32* %size.i to %union.tree_node**
  %41 = load %union.tree_node** %40, align 8, !tbaa !8
  %cmp4.i = icmp eq %union.tree_node* %41, null
  br i1 %cmp4.i, label %if.end6.i, label %return

if.end6.i:                                        ; preds = %if.end.i
  tail call void @incomplete_type_error(%union.tree_node* %call190, %union.tree_node* %38) #6
  %42 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end192:                                        ; preds = %land.lhs.true, %if.end6
  %call193 = tail call %union.tree_node* @default_conversion(%union.tree_node* %array)
  %call194 = tail call %union.tree_node* @default_conversion(%union.tree_node* %index)
  %43 = load i32* @warn_char_subscripts, align 4, !tbaa !27
  %tobool195 = icmp eq i32 %43, 0
  br i1 %tobool195, label %if.end211, label %land.lhs.true196

land.lhs.true196:                                 ; preds = %if.end192
  %44 = load %union.tree_node** %type3, align 8, !tbaa !1
  %code200 = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 0, i32 2
  %bf.load201 = load i32* %code200, align 8
  %bf.clear202 = and i32 %bf.load201, 255
  %cmp203 = icmp eq i32 %bf.clear202, 6
  br i1 %cmp203, label %land.lhs.true204, label %if.end211

land.lhs.true204:                                 ; preds = %land.lhs.true196
  %45 = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 15
  %46 = load %union.tree_node** %45, align 8, !tbaa !24
  %47 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %cmp209 = icmp eq %union.tree_node* %46, %47
  br i1 %cmp209, label %if.then210, label %if.end211

if.then210:                                       ; preds = %land.lhs.true204
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([26 x i8]* @.str27, i64 0, i64 0)) #6
  br label %if.end211

if.end211:                                        ; preds = %if.end192, %if.then210, %land.lhs.true204, %land.lhs.true196
  %type213 = getelementptr inbounds %union.tree_node* %call193, i64 0, i32 0, i32 0, i32 1
  %48 = load %union.tree_node** %type213, align 8, !tbaa !1
  %code215 = getelementptr inbounds %union.tree_node* %48, i64 0, i32 0, i32 0, i32 2
  %bf.load216 = load i32* %code215, align 8
  %bf.clear217 = and i32 %bf.load216, 255
  %cmp218 = icmp eq i32 %bf.clear217, 6
  %call194.call193 = select i1 %cmp218, %union.tree_node* %call194, %union.tree_node* %call193
  %call193.call194 = select i1 %cmp218, %union.tree_node* %call193, %union.tree_node* %call194
  %49 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp221 = icmp eq %union.tree_node* %call194.call193, %49
  br i1 %cmp221, label %return, label %if.end223

if.end223:                                        ; preds = %if.end211
  %type225 = getelementptr inbounds %union.tree_node* %call194.call193, i64 0, i32 0, i32 0, i32 1
  %50 = load %union.tree_node** %type225, align 8, !tbaa !1
  %code227 = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 0, i32 2
  %bf.load228 = load i32* %code227, align 8
  %bf.clear229 = and i32 %bf.load228, 255
  %cmp230 = icmp eq i32 %bf.clear229, 13
  br i1 %cmp230, label %lor.lhs.false231, label %if.then241

lor.lhs.false231:                                 ; preds = %if.end223
  %type235 = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 0, i32 1
  %51 = load %union.tree_node** %type235, align 8, !tbaa !1
  %code237 = getelementptr inbounds %union.tree_node* %51, i64 0, i32 0, i32 0, i32 2
  %bf.load238 = load i32* %code237, align 8
  %bf.clear239 = and i32 %bf.load238, 255
  %cmp240 = icmp eq i32 %bf.clear239, 23
  br i1 %cmp240, label %if.then241, label %if.end242

if.then241:                                       ; preds = %if.end223, %lor.lhs.false231
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([47 x i8]* @.str28, i64 0, i64 0)) #6
  %52 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end242:                                        ; preds = %lor.lhs.false231
  %type244 = getelementptr inbounds %union.tree_node* %call193.call194, i64 0, i32 0, i32 0, i32 1
  %53 = load %union.tree_node** %type244, align 8, !tbaa !1
  %code246 = getelementptr inbounds %union.tree_node* %53, i64 0, i32 0, i32 0, i32 2
  %bf.load247 = load i32* %code246, align 8
  %bf.clear248 = and i32 %bf.load247, 255
  %cmp249 = icmp eq i32 %bf.clear248, 6
  br i1 %cmp249, label %if.end251, label %if.then250

if.then250:                                       ; preds = %if.end242
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([34 x i8]* @.str24, i64 0, i64 0)) #6
  %54 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end251:                                        ; preds = %if.end242
  %call252 = tail call %union.tree_node* @build_binary_op(i32 59, %union.tree_node* %call194.call193, %union.tree_node* %call193.call194, i32 0)
  %call253 = tail call %union.tree_node* @build_indirect_ref(%union.tree_node* %call252, i8* getelementptr inbounds ([15 x i8]* @.str29, i64 0, i64 0))
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false, %if.end6.i, %if.end.i, %if.end111, %if.end211, %if.end251, %if.then250, %if.then241, %if.then84, %if.then61, %if.then32, %if.then
  %retval.0 = phi %union.tree_node* [ %0, %if.then ], [ %9, %if.then32 ], [ %14, %if.then61 ], [ %18, %if.then84 ], [ %52, %if.then241 ], [ %54, %if.then250 ], [ %call253, %if.end251 ], [ %call194.call193, %if.end211 ], [ %42, %if.end6.i ], [ %call190, %if.end.i ], [ %39, %if.end111 ], [ %2, %lor.lhs.false ], [ %2, %if.end ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @mark_addressable(%union.tree_node* %exp) #0 {
entry:
  br label %while.body

while.body:                                       ; preds = %entry, %sw.bb8
  %x.0 = phi %union.tree_node* [ %exp, %entry ], [ %6, %sw.bb8 ]
  %code = getelementptr inbounds %union.tree_node* %x.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return [
    i32 39, label %sw.bb
    i32 121, label %sw.bb8
    i32 43, label %sw.bb8
    i32 127, label %sw.bb8
    i32 128, label %sw.bb8
    i32 170, label %sw.bb12
    i32 46, label %sw.bb12
    i32 34, label %sw.bb16
    i32 32, label %sw.bb16
    i32 35, label %sw.bb16
    i32 36, label %sw.bb16
    i32 30, label %sw.bb97
  ]

sw.bb:                                            ; preds = %while.body
  %operands = getelementptr inbounds %union.tree_node* %x.0, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %0 = bitcast i32* %arrayidx to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !7
  %lang_flag_4 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 5
  %2 = bitcast i48* %lang_flag_4 to i64*
  %bf.load2 = load i64* %2, align 8
  %bf.cast = and i64 %bf.load2, 2199023255552
  %cmp = icmp eq i64 %bf.cast, 0
  br i1 %cmp, label %sw.bb8, label %if.then

if.then:                                          ; preds = %sw.bb
  %name = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 8
  %3 = load %union.tree_node** %name, align 8, !tbaa !11
  %id = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds i8** %id, i64 1
  %5 = load i8** %4, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([38 x i8]* @.str85, i64 0, i64 0), i8* %5) #6
  br label %return

sw.bb8:                                           ; preds = %sw.bb, %while.body, %while.body, %while.body, %while.body
  %operands10 = getelementptr inbounds %union.tree_node* %x.0, i64 0, i32 0, i32 2
  %arrayidx11 = bitcast i32* %operands10 to %union.tree_node**
  %6 = load %union.tree_node** %arrayidx11, align 8, !tbaa !7
  br label %while.body

sw.bb12:                                          ; preds = %while.body, %while.body
  %bf.set = or i32 %bf.load, 1024
  store i32 %bf.set, i32* %code, align 8
  br label %return

sw.bb16:                                          ; preds = %while.body, %while.body, %while.body, %while.body
  %regdecl_flag = getelementptr inbounds %union.tree_node* %x.0, i64 0, i32 0, i32 5
  %7 = bitcast i48* %regdecl_flag to i64*
  %bf.load18 = load i64* %7, align 8
  %bf.cast21 = and i64 %bf.load18, 1024
  %tobool = icmp eq i64 %bf.cast21, 0
  br i1 %tobool, label %if.end96, label %land.lhs.true

land.lhs.true:                                    ; preds = %sw.bb16
  %bf.clear26 = and i32 %bf.load, 1024
  %tobool27 = icmp ne i32 %bf.clear26, 0
  %bf.cast33 = and i64 %bf.load18, 512
  %tobool34 = icmp eq i64 %bf.cast33, 0
  %or.cond = or i1 %tobool27, %tobool34
  br i1 %or.cond, label %land.lhs.true60, label %if.then35

if.then35:                                        ; preds = %land.lhs.true
  %bf.clear39 = and i32 %bf.load, 524288
  %tobool40 = icmp eq i32 %bf.clear39, 0
  %name43 = getelementptr inbounds %union.tree_node* %x.0, i64 0, i32 0, i32 8
  %8 = load %union.tree_node** %name43, align 8, !tbaa !11
  %id45 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds i8** %id45, i64 1
  %10 = load i8** %9, align 8, !tbaa !13
  br i1 %tobool40, label %if.end47, label %if.then41

if.then41:                                        ; preds = %if.then35
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([54 x i8]* @.str86, i64 0, i64 0), i8* %10) #6
  br label %return

if.end47:                                         ; preds = %if.then35
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([47 x i8]* @.str87, i64 0, i64 0), i8* %10) #6
  br label %if.end96

land.lhs.true60:                                  ; preds = %land.lhs.true
  %bf.clear65 = and i32 %bf.load, 1024
  %tobool66 = icmp eq i32 %bf.clear65, 0
  br i1 %tobool66, label %if.then67, label %if.end96

if.then67:                                        ; preds = %land.lhs.true60
  %bf.clear72 = and i32 %bf.load, 524288
  %tobool73 = icmp eq i32 %bf.clear72, 0
  br i1 %tobool73, label %if.else80, label %if.then74

if.then74:                                        ; preds = %if.then67
  %name76 = getelementptr inbounds %union.tree_node* %x.0, i64 0, i32 0, i32 8
  %11 = load %union.tree_node** %name76, align 8, !tbaa !11
  %id78 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds i8** %id78, i64 1
  %13 = load i8** %12, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([51 x i8]* @.str88, i64 0, i64 0), i8* %13) #6
  br label %return

if.else80:                                        ; preds = %if.then67
  %type = getelementptr inbounds %union.tree_node* %x.0, i64 0, i32 0, i32 0, i32 1
  %14 = load %union.tree_node** %type, align 8, !tbaa !1
  %lang_flag_2 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 2
  %bf.load83 = load i32* %lang_flag_2, align 8
  %bf.clear85 = and i32 %bf.load83, 67108864
  %tobool86 = icmp eq i32 %bf.clear85, 0
  br i1 %tobool86, label %if.end89, label %if.then87

if.then87:                                        ; preds = %if.else80
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([52 x i8]* @.str89, i64 0, i64 0)) #6
  br label %return

if.end89:                                         ; preds = %if.else80
  %name91 = getelementptr inbounds %union.tree_node* %x.0, i64 0, i32 0, i32 8
  %15 = load %union.tree_node** %name91, align 8, !tbaa !11
  %id93 = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds i8** %id93, i64 1
  %17 = load i8** %16, align 8, !tbaa !13
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([44 x i8]* @.str90, i64 0, i64 0), i8* %17) #6
  br label %if.end96

if.end96:                                         ; preds = %sw.bb16, %land.lhs.true60, %if.end89, %if.end47
  tail call void @put_var_into_stack(%union.tree_node* %x.0) #6
  %bf.load100.pre = load i32* %code, align 8
  br label %sw.bb97

sw.bb97:                                          ; preds = %while.body, %if.end96
  %bf.load100 = phi i32 [ %bf.load100.pre, %if.end96 ], [ %bf.load, %while.body ]
  %bf.set102 = or i32 %bf.load100, 1024
  store i32 %bf.set102, i32* %code, align 8
  br label %return

return:                                           ; preds = %while.body, %sw.bb97, %if.then87, %if.then74, %if.then41, %sw.bb12, %if.then
  %retval.0 = phi i32 [ 0, %if.then74 ], [ 0, %if.then87 ], [ 0, %if.then41 ], [ 1, %sw.bb12 ], [ 0, %if.then ], [ 1, %sw.bb97 ], [ 1, %while.body ]
  ret i32 %retval.0
}

declare i32 @int_fits_type_p(%union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind readonly uwtable
define i32 @lvalue_p(%union.tree_node* nocapture readonly %ref) #3 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %sw.bb, %entry
  %ref.tr = phi %union.tree_node* [ %ref, %entry ], [ %0, %sw.bb ]
  %code1 = getelementptr inbounds %union.tree_node* %ref.tr, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return.loopexit34 [
    i32 127, label %sw.bb
    i32 128, label %sw.bb
    i32 39, label %sw.bb
    i32 170, label %return
    i32 29, label %return
    i32 41, label %sw.bb3
    i32 43, label %sw.bb3
    i32 34, label %sw.bb3
    i32 35, label %sw.bb3
    i32 36, label %sw.bb3
    i32 0, label %sw.bb3
    i32 52, label %sw.bb16
    i32 120, label %sw.bb16
  ]

sw.bb:                                            ; preds = %tailrecurse, %tailrecurse, %tailrecurse
  %operands = getelementptr inbounds %union.tree_node* %ref.tr, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  br label %tailrecurse

sw.bb3:                                           ; preds = %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse
  %type = getelementptr inbounds %union.tree_node* %ref.tr, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !1
  %code6 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load7 = load i32* %code6, align 8
  %bf.clear8 = and i32 %bf.load7, 255
  %cmp15 = icmp ne i32 %bf.clear8, 16
  %not.cmp = icmp ne i32 %bf.clear8, 23
  %.cmp15 = and i1 %cmp15, %not.cmp
  %land.ext = zext i1 %.cmp15 to i32
  br label %return

sw.bb16:                                          ; preds = %tailrecurse, %tailrecurse
  %type18 = getelementptr inbounds %union.tree_node* %ref.tr, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type18, align 8, !tbaa !1
  %code20 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load21 = load i32* %code20, align 8
  %bf.clear22 = and i32 %bf.load21, 255
  %cmp23 = icmp eq i32 %bf.clear22, 18
  %conv = zext i1 %cmp23 to i32
  br label %return

return.loopexit34:                                ; preds = %tailrecurse
  br label %return

return:                                           ; preds = %tailrecurse, %tailrecurse, %return.loopexit34, %sw.bb16, %sw.bb3
  %retval.0 = phi i32 [ %conv, %sw.bb16 ], [ %land.ext, %sw.bb3 ], [ 0, %return.loopexit34 ], [ 1, %tailrecurse ], [ 1, %tailrecurse ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_binary_op(i32 %code, %union.tree_node* %orig_op0, %union.tree_node* %orig_op1, i32 %convert_p) #0 {
entry:
  %unsigned0 = alloca i32, align 4
  %unsigned1 = alloca i32, align 4
  %unsigned_arg = alloca i32, align 4
  %xop0 = alloca %union.tree_node*, align 8
  %xop1 = alloca %union.tree_node*, align 8
  %xresult_type = alloca %union.tree_node*, align 8
  %xresultcode = alloca i32, align 4
  %unsignedp0 = alloca i32, align 4
  %unsignedp1 = alloca i32, align 4
  %tobool = icmp eq i32 %convert_p, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %union.tree_node* @default_conversion(%union.tree_node* %orig_op0)
  %call1 = call %union.tree_node* @default_conversion(%union.tree_node* %orig_op1)
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %op1.0 = phi %union.tree_node* [ %call1, %if.then ], [ %orig_op1, %entry ]
  %op0.0 = phi %union.tree_node* [ %call, %if.then ], [ %orig_op0, %entry ]
  %type = getelementptr inbounds %union.tree_node* %op0.0, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !1
  %type4 = getelementptr inbounds %union.tree_node* %op1.0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type4, align 8, !tbaa !1
  %code6 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code6, align 8
  %bf.clear = and i32 %bf.load, 255
  %code8 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load9 = load i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %2 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %if.end
  %op0.1 = phi %union.tree_node* [ %op0.0, %if.end ], [ %3, %land.rhs ]
  %code12 = getelementptr inbounds %union.tree_node* %op0.1, i64 0, i32 0, i32 0, i32 2
  %bf.load13 = load i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %bf.clear14.off = add i32 %bf.clear14, -114
  %switch = icmp ult i32 %bf.clear14.off, 3
  br i1 %switch, label %land.lhs.true, label %while.cond38

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %op0.1, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %3 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %cmp26 = icmp eq %union.tree_node* %3, %2
  br i1 %cmp26, label %while.cond38, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type33 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type33, align 8, !tbaa !1
  %cmp34 = icmp eq %union.tree_node* %0, %4
  br i1 %cmp34, label %while.cond, label %while.cond38

while.cond38:                                     ; preds = %while.cond, %land.lhs.true, %land.rhs, %land.rhs61
  %op1.1 = phi %union.tree_node* [ %5, %land.rhs61 ], [ %op1.0, %land.rhs ], [ %op1.0, %land.lhs.true ], [ %op1.0, %while.cond ]
  %code40 = getelementptr inbounds %union.tree_node* %op1.1, i64 0, i32 0, i32 0, i32 2
  %bf.load41 = load i32* %code40, align 8
  %bf.clear42 = and i32 %bf.load41, 255
  %bf.clear42.off = add i32 %bf.clear42, -114
  %switch1675 = icmp ult i32 %bf.clear42.off, 3
  br i1 %switch1675, label %land.lhs.true56, label %while.end75

land.lhs.true56:                                  ; preds = %while.cond38
  %operands58 = getelementptr inbounds %union.tree_node* %op1.1, i64 0, i32 0, i32 2
  %arrayidx59 = bitcast i32* %operands58 to %union.tree_node**
  %5 = load %union.tree_node** %arrayidx59, align 8, !tbaa !7
  %cmp60 = icmp eq %union.tree_node* %5, %2
  br i1 %cmp60, label %while.end75, label %land.rhs61

land.rhs61:                                       ; preds = %land.lhs.true56
  %type68 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type68, align 8, !tbaa !1
  %cmp69 = icmp eq %union.tree_node* %1, %6
  br i1 %cmp69, label %while.cond38, label %while.end75

while.end75:                                      ; preds = %while.cond38, %land.lhs.true56, %land.rhs61
  %cmp76 = icmp eq i32 %bf.clear, 0
  %cmp78 = icmp eq i32 %bf.clear10, 0
  %or.cond = or i1 %cmp76, %cmp78
  br i1 %or.cond, label %return, label %if.end80

if.end80:                                         ; preds = %while.end75
  switch i32 %code, label %sw.epilog [
    i32 59, label %sw.bb
    i32 60, label %sw.bb95
    i32 61, label %sw.bb113
    i32 62, label %sw.bb114
    i32 63, label %sw.bb114
    i32 64, label %sw.bb114
    i32 65, label %sw.bb114
    i32 71, label %sw.bb114
    i32 88, label %sw.bb157
    i32 89, label %sw.bb157
    i32 86, label %sw.bb157
    i32 87, label %sw.bb157
    i32 66, label %sw.bb163
    i32 68, label %sw.bb163
    i32 91, label %sw.bb198
    i32 92, label %sw.bb198
    i32 93, label %sw.bb198
    i32 94, label %sw.bb198
    i32 95, label %sw.bb198
    i32 83, label %sw.bb218
    i32 82, label %sw.bb261
    i32 85, label %sw.bb308
    i32 84, label %sw.bb308
    i32 101, label %sw.bb355
    i32 102, label %sw.bb355
    i32 79, label %sw.bb508
    i32 78, label %sw.bb508
    i32 98, label %sw.bb548
    i32 100, label %sw.bb548
    i32 97, label %sw.bb548
    i32 99, label %sw.bb548
    i32 103, label %sw.bb667
    i32 104, label %sw.bb667
    i32 105, label %sw.bb667
    i32 106, label %sw.bb667
    i32 107, label %sw.bb667
    i32 108, label %sw.bb667
    i32 109, label %sw.bb667
  ]

sw.bb:                                            ; preds = %if.end80
  %cmp81 = icmp eq i32 %bf.clear, 13
  %cmp83 = icmp eq i32 %bf.clear10, 6
  %or.cond1300 = and i1 %cmp81, %cmp83
  br i1 %or.cond1300, label %if.then84, label %if.else86

if.then84:                                        ; preds = %sw.bb
  %call85 = call %union.tree_node* @pointer_int_sum(i32 59, %union.tree_node* %op0.1, %union.tree_node* %op1.1) #6
  br label %return

if.else86:                                        ; preds = %sw.bb
  %cmp87 = icmp eq i32 %bf.clear10, 13
  %cmp89 = icmp eq i32 %bf.clear, 6
  %or.cond1301 = and i1 %cmp87, %cmp89
  br i1 %or.cond1301, label %if.then90, label %sw.epilog

if.then90:                                        ; preds = %if.else86
  %call91 = call %union.tree_node* @pointer_int_sum(i32 59, %union.tree_node* %op1.1, %union.tree_node* %op0.1) #6
  br label %return

sw.bb95:                                          ; preds = %if.end80
  %cmp96 = icmp eq i32 %bf.clear, 13
  %cmp98 = icmp eq i32 %bf.clear10, 13
  %or.cond1302 = and i1 %cmp96, %cmp98
  br i1 %or.cond1302, label %land.lhs.true99, label %if.else104

land.lhs.true99:                                  ; preds = %sw.bb95
  %call.i = call i32 @maybe_objc_comptypes(%union.tree_node* %0, %union.tree_node* %1, i32 1) #6
  %cmp.i = icmp sgt i32 %call.i, -1
  br i1 %cmp.i, label %comp_target_types.exit, label %if.end.i

if.end.i:                                         ; preds = %land.lhs.true99
  %type.i = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type.i, align 8, !tbaa !1
  %8 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 15
  %9 = load %union.tree_node** %8, align 8, !tbaa !24
  %type3.i = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %10 = load %union.tree_node** %type3.i, align 8, !tbaa !1
  %11 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 15
  %12 = load %union.tree_node** %11, align 8, !tbaa !24
  %call6.i = call i32 @comptypes(%union.tree_node* %9, %union.tree_node* %12) #6
  %cmp7.i = icmp eq i32 %call6.i, 2
  %13 = load i32* @pedantic, align 4
  %tobool.i = icmp ne i32 %13, 0
  %or.cond.i = and i1 %cmp7.i, %tobool.i
  br i1 %or.cond.i, label %comp_target_types.exit.thread, label %comp_target_types.exit

comp_target_types.exit.thread:                    ; preds = %if.end.i
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([31 x i8]* @.str182, i64 0, i64 0)) #6
  br label %if.then102

comp_target_types.exit:                           ; preds = %land.lhs.true99, %if.end.i
  %retval.0.i = phi i32 [ %call.i, %land.lhs.true99 ], [ %call6.i, %if.end.i ]
  %tobool101 = icmp eq i32 %retval.0.i, 0
  br i1 %tobool101, label %if.else104, label %if.then102

if.then102:                                       ; preds = %comp_target_types.exit.thread, %comp_target_types.exit
  %14 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 30), align 8, !tbaa !7
  %type.i1714 = getelementptr inbounds %union.tree_node* %op0.1, i64 0, i32 0, i32 0, i32 1
  %15 = load %union.tree_node** %type.i1714, align 8, !tbaa !1
  %type2.i = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 0, i32 1
  %16 = load %union.tree_node** %type2.i, align 8, !tbaa !1
  %17 = load i32* @pedantic, align 4, !tbaa !27
  %18 = load i32* @warn_pointer_arith, align 4
  %19 = or i32 %18, %17
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %if.end13.i, label %if.then.i

if.then.i:                                        ; preds = %if.then102
  %code.i = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i1715 = icmp eq i32 %bf.clear.i, 5
  br i1 %cmp.i1715, label %if.then5.i, label %if.end.i1716

if.then5.i:                                       ; preds = %if.then.i
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([45 x i8]* @.str180, i64 0, i64 0)) #6
  %bf.load8.i.pre = load i32* %code.i, align 8
  br label %if.end.i1716

if.end.i1716:                                     ; preds = %if.then5.i, %if.then.i
  %bf.load8.i = phi i32 [ %bf.load8.i.pre, %if.then5.i ], [ %bf.load.i, %if.then.i ]
  %bf.clear9.i = and i32 %bf.load8.i, 255
  %cmp10.i = icmp eq i32 %bf.clear9.i, 23
  br i1 %cmp10.i, label %if.then11.i, label %if.end13.i

if.then11.i:                                      ; preds = %if.end.i1716
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([42 x i8]* @.str181, i64 0, i64 0)) #6
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.then11.i, %if.end.i1716, %if.then102
  %bf.load16.i = load i32* %code12, align 8
  %bf.clear17.i = and i32 %bf.load16.i, 255
  %cmp18.i = icmp eq i32 %bf.clear17.i, 115
  br i1 %cmp18.i, label %cond.true.i, label %cond.end.i

cond.true.i:                                      ; preds = %if.end13.i
  %operands.i = getelementptr inbounds %union.tree_node* %op0.1, i64 0, i32 0, i32 2
  %arrayidx.i = bitcast i32* %operands.i to %union.tree_node**
  %21 = load %union.tree_node** %arrayidx.i, align 8, !tbaa !7
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %if.end13.i
  %cond.i = phi %union.tree_node* [ %21, %cond.true.i ], [ %op0.1, %if.end13.i ]
  %bf.load21.i = load i32* %code40, align 8
  %bf.clear22.i = and i32 %bf.load21.i, 255
  %cmp23.i = icmp eq i32 %bf.clear22.i, 115
  br i1 %cmp23.i, label %cond.true24.i, label %cond.end29.i

cond.true24.i:                                    ; preds = %cond.end.i
  %operands26.i = getelementptr inbounds %union.tree_node* %op1.1, i64 0, i32 0, i32 2
  %arrayidx27.i = bitcast i32* %operands26.i to %union.tree_node**
  %22 = load %union.tree_node** %arrayidx27.i, align 8, !tbaa !7
  br label %cond.end29.i

cond.end29.i:                                     ; preds = %cond.true24.i, %cond.end.i
  %cond30.i = phi %union.tree_node* [ %22, %cond.true24.i ], [ %op1.1, %cond.end.i ]
  %code32.i = getelementptr inbounds %union.tree_node* %cond.i, i64 0, i32 0, i32 0, i32 2
  %bf.load33.i = load i32* %code32.i, align 8
  %bf.clear34.i = and i32 %bf.load33.i, 255
  %cmp35.i = icmp eq i32 %bf.clear34.i, 59
  br i1 %cmp35.i, label %if.then36.i, label %if.end43.i

if.then36.i:                                      ; preds = %cond.end29.i
  %operands38.i = getelementptr inbounds %union.tree_node* %cond.i, i64 0, i32 0, i32 2
  %arrayidx39.i = getelementptr inbounds i32* %operands38.i, i64 2
  %23 = bitcast i32* %arrayidx39.i to %union.tree_node**
  %arrayidx42.i = bitcast i32* %operands38.i to %union.tree_node**
  %24 = load %union.tree_node** %arrayidx42.i, align 8, !tbaa !7
  br label %if.end43.i

if.end43.i:                                       ; preds = %if.then36.i, %cond.end29.i
  %con0.0.i = phi %union.tree_node* [ %24, %if.then36.i ], [ %cond.i, %cond.end29.i ]
  %lit0.0.in.i = phi %union.tree_node** [ %23, %if.then36.i ], [ getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), %cond.end29.i ]
  %lit0.0.i = load %union.tree_node** %lit0.0.in.i, align 8
  %code45.i = getelementptr inbounds %union.tree_node* %cond30.i, i64 0, i32 0, i32 0, i32 2
  %bf.load46.i = load i32* %code45.i, align 8
  %bf.clear47.i = and i32 %bf.load46.i, 255
  %cmp48.i = icmp eq i32 %bf.clear47.i, 59
  br i1 %cmp48.i, label %if.then49.i, label %if.end57.i

if.then49.i:                                      ; preds = %if.end43.i
  %operands51.i = getelementptr inbounds %union.tree_node* %cond30.i, i64 0, i32 0, i32 2
  %arrayidx52.i = getelementptr inbounds i32* %operands51.i, i64 2
  %25 = bitcast i32* %arrayidx52.i to %union.tree_node**
  %arrayidx55.i = bitcast i32* %operands51.i to %union.tree_node**
  %26 = load %union.tree_node** %arrayidx55.i, align 8, !tbaa !7
  br label %if.end57.i

if.end57.i:                                       ; preds = %if.then49.i, %if.end43.i
  %con1.0.i = phi %union.tree_node* [ %26, %if.then49.i ], [ %cond30.i, %if.end43.i ]
  %lit1.0.in.i = phi %union.tree_node** [ %25, %if.then49.i ], [ getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), %if.end43.i ]
  %lit1.0.i = load %union.tree_node** %lit1.0.in.i, align 8
  %call.i1717 = call i32 @operand_equal_p(%union.tree_node* %con0.0.i, %union.tree_node* %con1.0.i, i32 0) #6
  %tobool58.i = icmp eq i32 %call.i1717, 0
  %op1.lit1.0.i = select i1 %tobool58.i, %union.tree_node* %op1.1, %union.tree_node* %lit1.0.i
  %op0.lit0.0.i = select i1 %tobool58.i, %union.tree_node* %op0.1, %union.tree_node* %lit0.0.i
  %call61.i = call %union.tree_node* @convert(%union.tree_node* %14, %union.tree_node* %op0.lit0.0.i) #6
  %call62.i = call %union.tree_node* @convert(%union.tree_node* %14, %union.tree_node* %op1.lit1.0.i) #6
  %call63.i = call %union.tree_node* @build_binary_op(i32 60, %union.tree_node* %call61.i, %union.tree_node* %call62.i, i32 0) #6
  %type65.i = getelementptr inbounds %union.tree_node* %op1.1, i64 0, i32 0, i32 0, i32 1
  %27 = load %union.tree_node** %type65.i, align 8, !tbaa !1
  %type67.i = getelementptr inbounds %union.tree_node* %27, i64 0, i32 0, i32 0, i32 1
  %28 = load %union.tree_node** %type67.i, align 8, !tbaa !1
  %size.i = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 2
  %29 = bitcast i32* %size.i to %union.tree_node**
  %30 = load %union.tree_node** %29, align 8, !tbaa !8
  %cmp69.i = icmp eq %union.tree_node* %30, null
  br i1 %cmp69.i, label %lor.lhs.false70.i, label %if.end81.i

lor.lhs.false70.i:                                ; preds = %if.end57.i
  %code76.i = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 0, i32 2
  %bf.load77.i = load i32* %code76.i, align 8
  %bf.clear78.i = and i32 %bf.load77.i, 255
  %cmp79.i = icmp eq i32 %bf.clear78.i, 5
  br i1 %cmp79.i, label %if.end81.i, label %if.then80.i

if.then80.i:                                      ; preds = %lor.lhs.false70.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([44 x i8]* @.str14, i64 0, i64 0)) #6
  br label %if.end81.i

if.end81.i:                                       ; preds = %if.then80.i, %lor.lhs.false70.i, %if.end57.i
  %code1.i.i = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %code1.i.i, align 8
  %bf.clear.i.i = and i32 %bf.load.i.i, 255
  switch i32 %bf.clear.i.i, label %if.end.i.i [
    i32 23, label %if.then.i.i
    i32 5, label %if.then.i.i
    i32 0, label %if.then.i.i
  ]

if.then.i.i:                                      ; preds = %if.end81.i, %if.end81.i, %if.end81.i
  %31 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %c_size_in_bytes.exit.i

if.end.i.i:                                       ; preds = %if.end81.i
  %cmp2.i.i = icmp eq i32 %bf.clear.i.i, 5
  %size.i.i = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 2
  %32 = bitcast i32* %size.i.i to %union.tree_node**
  %33 = load %union.tree_node** %32, align 8, !tbaa !8
  %cmp6.not.i.i = icmp ne %union.tree_node* %33, null
  %brmerge.i.i = or i1 %cmp6.not.i.i, %cmp2.i.i
  br i1 %brmerge.i.i, label %if.end14.i.i, label %if.then13.i.i

if.then13.i.i:                                    ; preds = %if.end.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([44 x i8]* @.str14, i64 0, i64 0)) #6
  %34 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %c_size_in_bytes.exit.i

if.end14.i.i:                                     ; preds = %if.end.i.i
  %35 = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 4
  %36 = load %union.tree_node** %35, align 8, !tbaa !32
  %37 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %type16.i.i = bitcast %union.tree_node* %37 to %struct.tree_type*
  %precision.i.i = getelementptr inbounds %struct.tree_type* %type16.i.i, i64 0, i32 6
  %bf.load17.i.i = load i32* %precision.i.i, align 4
  %bf.clear18.i.i = lshr i32 %bf.load17.i.i, 3
  %div.i.i = and i32 %bf.clear18.i.i, 63
  %conv26.i.i = zext i32 %div.i.i to i64
  %call.i.i = call %union.tree_node* @size_int_wide(i64 %conv26.i.i, i32 0) #6
  %call19.i.i = call %union.tree_node* @size_binop(i32 63, %union.tree_node* %36, %union.tree_node* %call.i.i) #6
  br label %c_size_in_bytes.exit.i

c_size_in_bytes.exit.i:                           ; preds = %if.end14.i.i, %if.then13.i.i, %if.then.i.i
  %retval.0.i.i = phi %union.tree_node* [ %31, %if.then.i.i ], [ %call19.i.i, %if.end14.i.i ], [ %34, %if.then13.i.i ]
  %call83.i = call %union.tree_node* @convert(%union.tree_node* %14, %union.tree_node* %retval.0.i.i) #6
  %call84.i = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 71, %union.tree_node* %14, %union.tree_node* %call63.i, %union.tree_node* %call83.i) #6
  %call85.i = call %union.tree_node* @fold(%union.tree_node* %call84.i) #6
  %cmp86.i = icmp eq %union.tree_node* %call85.i, %call84.i
  br i1 %cmp86.i, label %if.then87.i, label %return

if.then87.i:                                      ; preds = %c_size_in_bytes.exit.i
  %constant_flag.i = getelementptr inbounds %union.tree_node* %call63.i, i64 0, i32 0, i32 0, i32 2
  %bf.load89.i = load i32* %constant_flag.i, align 8
  %constant_flag92.i = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load93.i = load i32* %constant_flag92.i, align 8
  %constant_flag97.i = getelementptr inbounds %union.tree_node* %call84.i, i64 0, i32 0, i32 0, i32 2
  %bf.load98.i = load i32* %constant_flag97.i, align 8
  %bf.load93.mask.i = and i32 %bf.load89.i, 512
  %bf.shl.i = and i32 %bf.load93.mask.i, %bf.load93.i
  %bf.clear99.i = and i32 %bf.load98.i, -513
  %bf.set.i = or i32 %bf.clear99.i, %bf.shl.i
  store i32 %bf.set.i, i32* %constant_flag97.i, align 8
  br label %return

if.else104:                                       ; preds = %comp_target_types.exit, %sw.bb95
  %cmp107 = icmp eq i32 %bf.clear10, 6
  %or.cond1303 = and i1 %cmp96, %cmp107
  br i1 %or.cond1303, label %if.then108, label %sw.epilog

if.then108:                                       ; preds = %if.else104
  %call109 = call %union.tree_node* @pointer_int_sum(i32 60, %union.tree_node* %op0.1, %union.tree_node* %op1.1) #6
  br label %return

sw.bb113:                                         ; preds = %if.end80
  br label %sw.epilog

sw.bb114:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80, %if.end80
  %38 = load i32* @warn_div_by_zero, align 4, !tbaa !27
  %tobool115 = icmp ne i32 %38, 0
  %39 = load i32* @skip_evaluation, align 4
  %cmp117 = icmp eq i32 %39, 0
  %or.cond1304 = and i1 %tobool115, %cmp117
  br i1 %or.cond1304, label %land.lhs.true118, label %if.end122

land.lhs.true118:                                 ; preds = %sw.bb114
  %call119 = call i32 @integer_zerop(%union.tree_node* %op1.1) #6
  %tobool120 = icmp eq i32 %call119, 0
  br i1 %tobool120, label %if.end122, label %if.then121

if.then121:                                       ; preds = %land.lhs.true118
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([17 x i8]* @.str45, i64 0, i64 0)) #6
  br label %if.end122

if.end122:                                        ; preds = %land.lhs.true118, %if.then121, %sw.bb114
  %cmp123 = icmp eq i32 %bf.clear, 6
  %40 = and i32 %bf.load, 254
  %41 = icmp eq i32 %40, 6
  %cmp127 = icmp eq i32 %bf.clear, 8
  %or.cond1306 = or i1 %41, %cmp127
  br i1 %or.cond1306, label %land.lhs.true128, label %sw.epilog

land.lhs.true128:                                 ; preds = %if.end122
  %42 = and i32 %bf.load9, 254
  %43 = icmp eq i32 %42, 6
  %cmp133 = icmp eq i32 %bf.clear10, 8
  %or.cond1308 = or i1 %43, %cmp133
  br i1 %or.cond1308, label %if.then134, label %sw.epilog

if.then134:                                       ; preds = %land.lhs.true128
  %cmp129 = icmp eq i32 %bf.clear10, 6
  %or.cond1309 = and i1 %cmp123, %cmp129
  br i1 %or.cond1309, label %if.else139, label %sw.epilog

if.else139:                                       ; preds = %if.then134
  %type141 = getelementptr inbounds %union.tree_node* %orig_op0, i64 0, i32 0, i32 0, i32 1
  %44 = load %union.tree_node** %type141, align 8, !tbaa !1
  %unsigned_flag = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 0, i32 2
  %bf.load143 = load i32* %unsigned_flag, align 8
  %bf.clear144 = and i32 %bf.load143, 8192
  %tobool145 = icmp eq i32 %bf.clear144, 0
  br i1 %tobool145, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.else139
  %bf.load148 = load i32* %code40, align 8
  %bf.clear149 = and i32 %bf.load148, 255
  %cmp150 = icmp eq i32 %bf.clear149, 25
  br i1 %cmp150, label %land.rhs151, label %lor.end

land.rhs151:                                      ; preds = %lor.rhs
  %call152 = call i32 @integer_all_onesp(%union.tree_node* %op1.1) #6
  %lnot = icmp eq i32 %call152, 0
  br label %lor.end

lor.end:                                          ; preds = %if.else139, %lor.rhs, %land.rhs151
  %45 = phi i1 [ true, %if.else139 ], [ false, %lor.rhs ], [ %lnot, %land.rhs151 ]
  %lor.ext = zext i1 %45 to i32
  br label %sw.epilog

sw.bb157:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80
  %cmp158 = icmp eq i32 %bf.clear, 6
  %cmp160 = icmp eq i32 %bf.clear10, 6
  %or.cond1310 = and i1 %cmp158, %cmp160
  %. = sext i1 %or.cond1310 to i32
  br label %sw.epilog

sw.bb163:                                         ; preds = %if.end80, %if.end80
  %46 = load i32* @warn_div_by_zero, align 4, !tbaa !27
  %tobool164 = icmp ne i32 %46, 0
  %47 = load i32* @skip_evaluation, align 4
  %cmp166 = icmp eq i32 %47, 0
  %or.cond1311 = and i1 %tobool164, %cmp166
  br i1 %or.cond1311, label %land.lhs.true167, label %if.end171

land.lhs.true167:                                 ; preds = %sw.bb163
  %call168 = call i32 @integer_zerop(%union.tree_node* %op1.1) #6
  %tobool169 = icmp eq i32 %call168, 0
  br i1 %tobool169, label %if.end171, label %if.then170

if.then170:                                       ; preds = %land.lhs.true167
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([17 x i8]* @.str45, i64 0, i64 0)) #6
  br label %if.end171

if.end171:                                        ; preds = %land.lhs.true167, %if.then170, %sw.bb163
  %cmp172 = icmp eq i32 %bf.clear, 6
  %cmp174 = icmp eq i32 %bf.clear10, 6
  %or.cond1312 = and i1 %cmp172, %cmp174
  br i1 %or.cond1312, label %if.then175, label %sw.epilog

if.then175:                                       ; preds = %if.end171
  %type177 = getelementptr inbounds %union.tree_node* %orig_op0, i64 0, i32 0, i32 0, i32 1
  %48 = load %union.tree_node** %type177, align 8, !tbaa !1
  %unsigned_flag179 = getelementptr inbounds %union.tree_node* %48, i64 0, i32 0, i32 0, i32 2
  %bf.load180 = load i32* %unsigned_flag179, align 8
  %bf.clear182 = and i32 %bf.load180, 8192
  %tobool183 = icmp eq i32 %bf.clear182, 0
  br i1 %tobool183, label %lor.rhs184, label %lor.end195

lor.rhs184:                                       ; preds = %if.then175
  %bf.load187 = load i32* %code40, align 8
  %bf.clear188 = and i32 %bf.load187, 255
  %cmp189 = icmp eq i32 %bf.clear188, 25
  br i1 %cmp189, label %land.rhs190, label %lor.end195

land.rhs190:                                      ; preds = %lor.rhs184
  %call191 = call i32 @integer_all_onesp(%union.tree_node* %op1.1) #6
  %lnot193 = icmp eq i32 %call191, 0
  br label %lor.end195

lor.end195:                                       ; preds = %if.then175, %lor.rhs184, %land.rhs190
  %49 = phi i1 [ true, %if.then175 ], [ false, %lor.rhs184 ], [ %lnot193, %land.rhs190 ]
  %lor.ext196 = zext i1 %49 to i32
  br label %sw.epilog

sw.bb198:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80, %if.end80
  switch i32 %bf.clear, label %sw.epilog [
    i32 13, label %land.lhs.true206
    i32 8, label %land.lhs.true206
    i32 7, label %land.lhs.true206
    i32 6, label %land.lhs.true206
  ]

land.lhs.true206:                                 ; preds = %sw.bb198, %sw.bb198, %sw.bb198, %sw.bb198
  switch i32 %bf.clear10, label %sw.epilog [
    i32 13, label %if.then214
    i32 8, label %if.then214
    i32 7, label %if.then214
    i32 6, label %if.then214
  ]

if.then214:                                       ; preds = %land.lhs.true206, %land.lhs.true206, %land.lhs.true206, %land.lhs.true206
  %50 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %call215 = call %union.tree_node* @truthvalue_conversion(%union.tree_node* %op0.1) #6
  %call216 = call %union.tree_node* @truthvalue_conversion(%union.tree_node* %op1.1) #6
  br label %sw.epilog

sw.bb218:                                         ; preds = %if.end80
  %cmp219 = icmp eq i32 %bf.clear, 6
  %cmp221 = icmp eq i32 %bf.clear10, 6
  %or.cond1319 = and i1 %cmp219, %cmp221
  br i1 %or.cond1319, label %if.then222, label %sw.epilog

if.then222:                                       ; preds = %sw.bb218
  %cmp227 = icmp eq i32 %bf.clear42, 25
  %51 = load i32* @skip_evaluation, align 4
  %cmp229 = icmp eq i32 %51, 0
  %or.cond1320 = and i1 %cmp227, %cmp229
  br i1 %or.cond1320, label %if.then230, label %if.end248

if.then230:                                       ; preds = %if.then222
  %call231 = call i32 @tree_int_cst_sgn(%union.tree_node* %op1.1) #6
  %cmp232 = icmp slt i32 %call231, 0
  br i1 %cmp232, label %if.then233, label %if.else234

if.then233:                                       ; preds = %if.then230
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([30 x i8]* @.str46, i64 0, i64 0)) #6
  br label %if.end248

if.else234:                                       ; preds = %if.then230
  %call235 = call i32 @integer_zerop(%union.tree_node* %op1.1) #6
  %tobool236 = icmp eq i32 %call235, 0
  %.1660 = zext i1 %tobool236 to i32
  %type239 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type239, i64 0, i32 6
  %bf.load240 = load i32* %precision, align 4
  %bf.clear241 = and i32 %bf.load240, 511
  %conv = zext i32 %bf.clear241 to i64
  %call242 = call i32 @compare_tree_int(%union.tree_node* %op1.1, i64 %conv) #6
  %cmp243 = icmp sgt i32 %call242, -1
  br i1 %cmp243, label %if.then245, label %if.end248

if.then245:                                       ; preds = %if.else234
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([35 x i8]* @.str47, i64 0, i64 0)) #6
  br label %if.end248

if.end248:                                        ; preds = %if.then233, %if.then245, %if.else234, %if.then222
  %short_shift.1 = phi i32 [ 0, %if.then233 ], [ %.1660, %if.then245 ], [ %.1660, %if.else234 ], [ 0, %if.then222 ]
  %52 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool249 = icmp eq i32 %52, 0
  br i1 %tobool249, label %if.then250, label %sw.epilog

if.then250:                                       ; preds = %if.end248
  %type252 = getelementptr inbounds %union.tree_node* %op1.1, i64 0, i32 0, i32 0, i32 1
  %53 = load %union.tree_node** %type252, align 8, !tbaa !1
  %54 = getelementptr inbounds %union.tree_node* %53, i64 0, i32 0, i32 15
  %55 = load %union.tree_node** %54, align 8, !tbaa !24
  %56 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %cmp254 = icmp eq %union.tree_node* %55, %56
  br i1 %cmp254, label %sw.epilog, label %if.then256

if.then256:                                       ; preds = %if.then250
  %call257 = call %union.tree_node* @convert(%union.tree_node* %56, %union.tree_node* %op1.1) #6
  br label %sw.epilog

sw.bb261:                                         ; preds = %if.end80
  %cmp262 = icmp eq i32 %bf.clear, 6
  %cmp265 = icmp eq i32 %bf.clear10, 6
  %or.cond1321 = and i1 %cmp262, %cmp265
  br i1 %or.cond1321, label %if.then267, label %sw.epilog

if.then267:                                       ; preds = %sw.bb261
  %cmp272 = icmp eq i32 %bf.clear42, 25
  %57 = load i32* @skip_evaluation, align 4
  %cmp275 = icmp eq i32 %57, 0
  %or.cond1322 = and i1 %cmp272, %cmp275
  br i1 %or.cond1322, label %if.then277, label %if.end294

if.then277:                                       ; preds = %if.then267
  %call278 = call i32 @tree_int_cst_sgn(%union.tree_node* %op1.1) #6
  %cmp279 = icmp slt i32 %call278, 0
  br i1 %cmp279, label %if.then281, label %if.else282

if.then281:                                       ; preds = %if.then277
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([29 x i8]* @.str48, i64 0, i64 0)) #6
  br label %if.end294

if.else282:                                       ; preds = %if.then277
  %type283 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %precision284 = getelementptr inbounds %struct.tree_type* %type283, i64 0, i32 6
  %bf.load285 = load i32* %precision284, align 4
  %bf.clear286 = and i32 %bf.load285, 511
  %conv287 = zext i32 %bf.clear286 to i64
  %call288 = call i32 @compare_tree_int(%union.tree_node* %op1.1, i64 %conv287) #6
  %cmp289 = icmp sgt i32 %call288, -1
  br i1 %cmp289, label %if.then291, label %if.end294

if.then291:                                       ; preds = %if.else282
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([34 x i8]* @.str49, i64 0, i64 0)) #6
  br label %if.end294

if.end294:                                        ; preds = %if.then281, %if.then291, %if.else282, %if.then267
  %58 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool295 = icmp eq i32 %58, 0
  br i1 %tobool295, label %if.then296, label %sw.epilog

if.then296:                                       ; preds = %if.end294
  %type298 = getelementptr inbounds %union.tree_node* %op1.1, i64 0, i32 0, i32 0, i32 1
  %59 = load %union.tree_node** %type298, align 8, !tbaa !1
  %60 = getelementptr inbounds %union.tree_node* %59, i64 0, i32 0, i32 15
  %61 = load %union.tree_node** %60, align 8, !tbaa !24
  %62 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %cmp301 = icmp eq %union.tree_node* %61, %62
  br i1 %cmp301, label %sw.epilog, label %if.then303

if.then303:                                       ; preds = %if.then296
  %call304 = call %union.tree_node* @convert(%union.tree_node* %62, %union.tree_node* %op1.1) #6
  br label %sw.epilog

sw.bb308:                                         ; preds = %if.end80, %if.end80
  %cmp309 = icmp eq i32 %bf.clear, 6
  %cmp312 = icmp eq i32 %bf.clear10, 6
  %or.cond1323 = and i1 %cmp309, %cmp312
  br i1 %or.cond1323, label %if.then314, label %sw.epilog

if.then314:                                       ; preds = %sw.bb308
  %cmp319 = icmp eq i32 %bf.clear42, 25
  %63 = load i32* @skip_evaluation, align 4
  %cmp322 = icmp eq i32 %63, 0
  %or.cond1324 = and i1 %cmp319, %cmp322
  br i1 %or.cond1324, label %if.then324, label %if.end341

if.then324:                                       ; preds = %if.then314
  %call325 = call i32 @tree_int_cst_sgn(%union.tree_node* %op1.1) #6
  %cmp326 = icmp slt i32 %call325, 0
  br i1 %cmp326, label %if.then328, label %if.else329

if.then328:                                       ; preds = %if.then324
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([24 x i8]* @.str50, i64 0, i64 0)) #6
  br label %if.end341

if.else329:                                       ; preds = %if.then324
  %type330 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %precision331 = getelementptr inbounds %struct.tree_type* %type330, i64 0, i32 6
  %bf.load332 = load i32* %precision331, align 4
  %bf.clear333 = and i32 %bf.load332, 511
  %conv334 = zext i32 %bf.clear333 to i64
  %call335 = call i32 @compare_tree_int(%union.tree_node* %op1.1, i64 %conv334) #6
  %cmp336 = icmp sgt i32 %call335, -1
  br i1 %cmp336, label %if.then338, label %if.end341

if.then338:                                       ; preds = %if.else329
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([29 x i8]* @.str51, i64 0, i64 0)) #6
  br label %if.end341

if.end341:                                        ; preds = %if.then328, %if.then338, %if.else329, %if.then314
  %64 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool342 = icmp eq i32 %64, 0
  br i1 %tobool342, label %if.then343, label %sw.epilog

if.then343:                                       ; preds = %if.end341
  %type345 = getelementptr inbounds %union.tree_node* %op1.1, i64 0, i32 0, i32 0, i32 1
  %65 = load %union.tree_node** %type345, align 8, !tbaa !1
  %66 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 15
  %67 = load %union.tree_node** %66, align 8, !tbaa !24
  %68 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %cmp348 = icmp eq %union.tree_node* %67, %68
  br i1 %cmp348, label %sw.epilog, label %if.then350

if.then350:                                       ; preds = %if.then343
  %call351 = call %union.tree_node* @convert(%union.tree_node* %68, %union.tree_node* %op1.1) #6
  br label %sw.epilog

sw.bb355:                                         ; preds = %if.end80, %if.end80
  %69 = load i32* @warn_float_equal, align 4, !tbaa !27
  %tobool356 = icmp eq i32 %69, 0
  br i1 %tobool356, label %if.end364, label %land.lhs.true357

land.lhs.true357:                                 ; preds = %sw.bb355
  %cmp358 = icmp eq i32 %bf.clear, 7
  %cmp361 = icmp eq i32 %bf.clear10, 7
  %or.cond1325 = or i1 %cmp358, %cmp361
  br i1 %or.cond1325, label %if.then363, label %if.end364

if.then363:                                       ; preds = %land.lhs.true357
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([49 x i8]* @.str52, i64 0, i64 0)) #6
  br label %if.end364

if.end364:                                        ; preds = %sw.bb355, %land.lhs.true357, %if.then363
  %70 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %cmp365 = icmp eq i32 %bf.clear, 6
  %71 = and i32 %bf.load, 254
  %72 = icmp eq i32 %71, 6
  %cmp371 = icmp eq i32 %bf.clear, 8
  %or.cond1327 = or i1 %72, %cmp371
  br i1 %or.cond1327, label %land.lhs.true373, label %if.else383

land.lhs.true373:                                 ; preds = %if.end364
  %73 = and i32 %bf.load9, 254
  %74 = icmp eq i32 %73, 6
  %cmp380 = icmp eq i32 %bf.clear10, 8
  %or.cond1329 = or i1 %74, %cmp380
  br i1 %or.cond1329, label %sw.epilog, label %if.else383

if.else383:                                       ; preds = %land.lhs.true373, %if.end364
  %cmp384 = icmp eq i32 %bf.clear, 13
  %cmp387 = icmp eq i32 %bf.clear10, 13
  %or.cond1330 = and i1 %cmp384, %cmp387
  br i1 %or.cond1330, label %if.then389, label %if.else454

if.then389:                                       ; preds = %if.else383
  %type391 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %75 = load %union.tree_node** %type391, align 8, !tbaa !1
  %type393 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %76 = load %union.tree_node** %type393, align 8, !tbaa !1
  %call.i1678 = call i32 @maybe_objc_comptypes(%union.tree_node* %0, %union.tree_node* %1, i32 1) #6
  %cmp.i1679 = icmp sgt i32 %call.i1678, -1
  br i1 %cmp.i1679, label %comp_target_types.exit1689, label %if.end.i1686

if.end.i1686:                                     ; preds = %if.then389
  %77 = load %union.tree_node** %type391, align 8, !tbaa !1
  %78 = getelementptr inbounds %union.tree_node* %77, i64 0, i32 0, i32 15
  %79 = load %union.tree_node** %78, align 8, !tbaa !24
  %80 = load %union.tree_node** %type393, align 8, !tbaa !1
  %81 = getelementptr inbounds %union.tree_node* %80, i64 0, i32 0, i32 15
  %82 = load %union.tree_node** %81, align 8, !tbaa !24
  %call6.i1682 = call i32 @comptypes(%union.tree_node* %79, %union.tree_node* %82) #6
  %cmp7.i1683 = icmp eq i32 %call6.i1682, 2
  %83 = load i32* @pedantic, align 4
  %tobool.i1684 = icmp ne i32 %83, 0
  %or.cond.i1685 = and i1 %cmp7.i1683, %tobool.i1684
  br i1 %or.cond.i1685, label %comp_target_types.exit1689.thread, label %comp_target_types.exit1689

comp_target_types.exit1689.thread:                ; preds = %if.end.i1686
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([31 x i8]* @.str182, i64 0, i64 0)) #6
  br label %if.then396

comp_target_types.exit1689:                       ; preds = %if.then389, %if.end.i1686
  %retval.0.i1688 = phi i32 [ %call.i1678, %if.then389 ], [ %call6.i1682, %if.end.i1686 ]
  %tobool395 = icmp eq i32 %retval.0.i1688, 0
  br i1 %tobool395, label %if.else398, label %if.then396

if.then396:                                       ; preds = %comp_target_types.exit1689.thread, %comp_target_types.exit1689
  %call397 = call %union.tree_node* @common_type(%union.tree_node* %0, %union.tree_node* %1)
  br label %if.end449

if.else398:                                       ; preds = %comp_target_types.exit1689
  %code400 = getelementptr inbounds %union.tree_node* %75, i64 0, i32 0, i32 0, i32 2
  %bf.load401 = load i32* %code400, align 8
  %bf.clear402 = and i32 %bf.load401, 255
  %cmp403 = icmp eq i32 %bf.clear402, 5
  br i1 %cmp403, label %if.then405, label %if.else422

if.then405:                                       ; preds = %if.else398
  %84 = load i32* @pedantic, align 4, !tbaa !27
  %tobool406 = icmp eq i32 %84, 0
  br i1 %tobool406, label %if.end449, label %land.lhs.true407

land.lhs.true407:                                 ; preds = %if.then405
  %call408 = call i32 @integer_zerop(%union.tree_node* %op0.1) #6
  %tobool409 = icmp ne i32 %call408, 0
  %cmp411 = icmp eq %union.tree_node* %op0.1, %orig_op0
  %or.cond1661 = and i1 %tobool409, %cmp411
  br i1 %or.cond1661, label %if.end449, label %land.lhs.true413

land.lhs.true413:                                 ; preds = %land.lhs.true407
  %code415 = getelementptr inbounds %union.tree_node* %76, i64 0, i32 0, i32 0, i32 2
  %bf.load416 = load i32* %code415, align 8
  %bf.clear417 = and i32 %bf.load416, 255
  %cmp418 = icmp eq i32 %bf.clear417, 23
  br i1 %cmp418, label %if.then420, label %if.end449

if.then420:                                       ; preds = %land.lhs.true413
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([59 x i8]* @.str53, i64 0, i64 0)) #6
  br label %if.end449

if.else422:                                       ; preds = %if.else398
  %code424 = getelementptr inbounds %union.tree_node* %76, i64 0, i32 0, i32 0, i32 2
  %bf.load425 = load i32* %code424, align 8
  %bf.clear426 = and i32 %bf.load425, 255
  %cmp427 = icmp eq i32 %bf.clear426, 5
  br i1 %cmp427, label %if.then429, label %if.else446

if.then429:                                       ; preds = %if.else422
  %85 = load i32* @pedantic, align 4, !tbaa !27
  %tobool430 = icmp eq i32 %85, 0
  br i1 %tobool430, label %if.end449, label %land.lhs.true431

land.lhs.true431:                                 ; preds = %if.then429
  %call432 = call i32 @integer_zerop(%union.tree_node* %op1.1) #6
  %tobool433 = icmp ne i32 %call432, 0
  %cmp435 = icmp eq %union.tree_node* %op1.1, %orig_op1
  %or.cond1662 = and i1 %tobool433, %cmp435
  br i1 %or.cond1662, label %if.end449, label %land.lhs.true437

land.lhs.true437:                                 ; preds = %land.lhs.true431
  %bf.load440 = load i32* %code400, align 8
  %bf.clear441 = and i32 %bf.load440, 255
  %cmp442 = icmp eq i32 %bf.clear441, 23
  br i1 %cmp442, label %if.then444, label %if.end449

if.then444:                                       ; preds = %land.lhs.true437
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([59 x i8]* @.str53, i64 0, i64 0)) #6
  br label %if.end449

if.else446:                                       ; preds = %if.else422
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([50 x i8]* @.str54, i64 0, i64 0)) #6
  br label %if.end449

if.end449:                                        ; preds = %land.lhs.true431, %land.lhs.true407, %if.then405, %if.then429, %if.then420, %land.lhs.true413, %land.lhs.true437, %if.then444, %if.else446, %if.then396
  %result_type.0 = phi %union.tree_node* [ %call397, %if.then396 ], [ null, %if.then420 ], [ null, %land.lhs.true413 ], [ null, %if.then405 ], [ null, %if.then444 ], [ null, %land.lhs.true437 ], [ null, %if.then429 ], [ null, %if.else446 ], [ null, %land.lhs.true407 ], [ null, %land.lhs.true431 ]
  %cmp450 = icmp eq %union.tree_node* %result_type.0, null
  %86 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 28), align 8, !tbaa !7
  %.result_type.0 = select i1 %cmp450, %union.tree_node* %86, %union.tree_node* %result_type.0
  br label %sw.epilog

if.else454:                                       ; preds = %if.else383
  br i1 %cmp384, label %land.lhs.true457, label %if.else468

land.lhs.true457:                                 ; preds = %if.else454
  %bf.load460 = load i32* %code40, align 8
  %bf.clear461 = and i32 %bf.load460, 255
  %cmp462 = icmp eq i32 %bf.clear461, 25
  br i1 %cmp462, label %land.lhs.true464, label %if.else468

land.lhs.true464:                                 ; preds = %land.lhs.true457
  %call465 = call i32 @integer_zerop(%union.tree_node* %op1.1) #6
  %tobool466 = icmp eq i32 %call465, 0
  br i1 %tobool466, label %if.else468, label %sw.epilog

if.else468:                                       ; preds = %land.lhs.true464, %land.lhs.true457, %if.else454
  br i1 %cmp387, label %land.lhs.true471, label %if.else482

land.lhs.true471:                                 ; preds = %if.else468
  %bf.load474 = load i32* %code12, align 8
  %bf.clear475 = and i32 %bf.load474, 255
  %cmp476 = icmp eq i32 %bf.clear475, 25
  br i1 %cmp476, label %land.lhs.true478, label %if.else492

land.lhs.true478:                                 ; preds = %land.lhs.true471
  %call479 = call i32 @integer_zerop(%union.tree_node* %op0.1) #6
  %tobool480 = icmp eq i32 %call479, 0
  br i1 %tobool480, label %if.else482, label %sw.epilog

if.else482:                                       ; preds = %land.lhs.true478, %if.else468
  %cmp486 = icmp eq i32 %bf.clear10, 6
  %or.cond1331 = and i1 %cmp384, %cmp486
  br i1 %or.cond1331, label %if.then488, label %if.else492

if.then488:                                       ; preds = %if.else482
  %87 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool489 = icmp eq i32 %87, 0
  br i1 %tobool489, label %if.then490, label %sw.epilog

if.then490:                                       ; preds = %if.then488
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([39 x i8]* @.str55, i64 0, i64 0)) #6
  br label %sw.epilog

if.else492:                                       ; preds = %land.lhs.true471, %if.else482
  %or.cond1332 = and i1 %cmp365, %cmp387
  br i1 %or.cond1332, label %if.then498, label %sw.epilog

if.then498:                                       ; preds = %if.else492
  %88 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool499 = icmp eq i32 %88, 0
  br i1 %tobool499, label %if.then500, label %sw.epilog

if.then500:                                       ; preds = %if.then498
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([39 x i8]* @.str55, i64 0, i64 0)) #6
  br label %sw.epilog

sw.bb508:                                         ; preds = %if.end80, %if.end80
  %89 = and i32 %bf.load, 254
  %90 = icmp eq i32 %89, 6
  %91 = and i32 %bf.load9, 254
  %92 = icmp eq i32 %91, 6
  %or.cond1665 = and i1 %90, %92
  br i1 %or.cond1665, label %sw.epilog, label %if.else521

if.else521:                                       ; preds = %sw.bb508
  %cmp522 = icmp eq i32 %bf.clear, 13
  %cmp525 = icmp eq i32 %bf.clear10, 13
  %or.cond1335 = and i1 %cmp522, %cmp525
  br i1 %or.cond1335, label %if.then527, label %sw.epilog

if.then527:                                       ; preds = %if.else521
  %call.i1690 = call i32 @maybe_objc_comptypes(%union.tree_node* %0, %union.tree_node* %1, i32 1) #6
  %cmp.i1691 = icmp sgt i32 %call.i1690, -1
  br i1 %cmp.i1691, label %comp_target_types.exit1701, label %if.end.i1698

if.end.i1698:                                     ; preds = %if.then527
  %type.i1692 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %93 = load %union.tree_node** %type.i1692, align 8, !tbaa !1
  %94 = getelementptr inbounds %union.tree_node* %93, i64 0, i32 0, i32 15
  %95 = load %union.tree_node** %94, align 8, !tbaa !24
  %type3.i1693 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %96 = load %union.tree_node** %type3.i1693, align 8, !tbaa !1
  %97 = getelementptr inbounds %union.tree_node* %96, i64 0, i32 0, i32 15
  %98 = load %union.tree_node** %97, align 8, !tbaa !24
  %call6.i1694 = call i32 @comptypes(%union.tree_node* %95, %union.tree_node* %98) #6
  %cmp7.i1695 = icmp eq i32 %call6.i1694, 2
  %99 = load i32* @pedantic, align 4
  %tobool.i1696 = icmp ne i32 %99, 0
  %or.cond.i1697 = and i1 %cmp7.i1695, %tobool.i1696
  br i1 %or.cond.i1697, label %comp_target_types.exit1701.thread, label %comp_target_types.exit1701

comp_target_types.exit1701.thread:                ; preds = %if.end.i1698
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([31 x i8]* @.str182, i64 0, i64 0)) #6
  br label %if.then530

comp_target_types.exit1701:                       ; preds = %if.then527, %if.end.i1698
  %retval.0.i1700 = phi i32 [ %call.i1690, %if.then527 ], [ %call6.i1694, %if.end.i1698 ]
  %tobool529 = icmp eq i32 %retval.0.i1700, 0
  br i1 %tobool529, label %if.else544, label %if.then530

if.then530:                                       ; preds = %comp_target_types.exit1701.thread, %comp_target_types.exit1701
  %call531 = call %union.tree_node* @common_type(%union.tree_node* %0, %union.tree_node* %1)
  %100 = load i32* @pedantic, align 4, !tbaa !27
  %tobool532 = icmp eq i32 %100, 0
  br i1 %tobool532, label %sw.epilog, label %land.lhs.true533

land.lhs.true533:                                 ; preds = %if.then530
  %type535 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %101 = load %union.tree_node** %type535, align 8, !tbaa !1
  %code537 = getelementptr inbounds %union.tree_node* %101, i64 0, i32 0, i32 0, i32 2
  %bf.load538 = load i32* %code537, align 8
  %bf.clear539 = and i32 %bf.load538, 255
  %cmp540 = icmp eq i32 %bf.clear539, 23
  br i1 %cmp540, label %if.then542, label %sw.epilog

if.then542:                                       ; preds = %land.lhs.true533
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([59 x i8]* @.str56, i64 0, i64 0)) #6
  br label %sw.epilog

if.else544:                                       ; preds = %comp_target_types.exit1701
  %102 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 28), align 8, !tbaa !7
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([50 x i8]* @.str54, i64 0, i64 0)) #6
  br label %sw.epilog

sw.bb548:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80
  %103 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %cmp549 = icmp eq i32 %bf.clear, 6
  %104 = and i32 %bf.load, 254
  %105 = icmp eq i32 %104, 6
  %106 = and i32 %bf.load9, 254
  %107 = icmp eq i32 %106, 6
  %or.cond1668 = and i1 %105, %107
  br i1 %or.cond1668, label %sw.epilog, label %if.else561

if.else561:                                       ; preds = %sw.bb548
  %cmp562 = icmp eq i32 %bf.clear, 13
  %cmp565 = icmp eq i32 %bf.clear10, 13
  %or.cond1338 = and i1 %cmp562, %cmp565
  br i1 %or.cond1338, label %if.then567, label %if.else605

if.then567:                                       ; preds = %if.else561
  %call.i1702 = call i32 @maybe_objc_comptypes(%union.tree_node* %0, %union.tree_node* %1, i32 1) #6
  %cmp.i1703 = icmp sgt i32 %call.i1702, -1
  br i1 %cmp.i1703, label %comp_target_types.exit1713, label %if.end.i1710

if.end.i1710:                                     ; preds = %if.then567
  %type.i1704 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %108 = load %union.tree_node** %type.i1704, align 8, !tbaa !1
  %109 = getelementptr inbounds %union.tree_node* %108, i64 0, i32 0, i32 15
  %110 = load %union.tree_node** %109, align 8, !tbaa !24
  %type3.i1705 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %111 = load %union.tree_node** %type3.i1705, align 8, !tbaa !1
  %112 = getelementptr inbounds %union.tree_node* %111, i64 0, i32 0, i32 15
  %113 = load %union.tree_node** %112, align 8, !tbaa !24
  %call6.i1706 = call i32 @comptypes(%union.tree_node* %110, %union.tree_node* %113) #6
  %cmp7.i1707 = icmp eq i32 %call6.i1706, 2
  %114 = load i32* @pedantic, align 4
  %tobool.i1708 = icmp ne i32 %114, 0
  %or.cond.i1709 = and i1 %cmp7.i1707, %tobool.i1708
  br i1 %or.cond.i1709, label %comp_target_types.exit1713.thread, label %comp_target_types.exit1713

comp_target_types.exit1713.thread:                ; preds = %if.end.i1710
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([31 x i8]* @.str182, i64 0, i64 0)) #6
  br label %if.then570

comp_target_types.exit1713:                       ; preds = %if.then567, %if.end.i1710
  %retval.0.i1712 = phi i32 [ %call.i1702, %if.then567 ], [ %call6.i1706, %if.end.i1710 ]
  %tobool569 = icmp eq i32 %retval.0.i1712, 0
  br i1 %tobool569, label %if.else603, label %comp_target_types.exit1713.if.then570_crit_edge

comp_target_types.exit1713.if.then570_crit_edge:  ; preds = %comp_target_types.exit1713
  %type573.pre = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %type579.pre = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  br label %if.then570

if.then570:                                       ; preds = %comp_target_types.exit1713.if.then570_crit_edge, %comp_target_types.exit1713.thread
  %type579.pre-phi = phi %union.tree_node** [ %type579.pre, %comp_target_types.exit1713.if.then570_crit_edge ], [ %type3.i1705, %comp_target_types.exit1713.thread ]
  %type573.pre-phi = phi %union.tree_node** [ %type573.pre, %comp_target_types.exit1713.if.then570_crit_edge ], [ %type.i1704, %comp_target_types.exit1713.thread ]
  %call571 = call %union.tree_node* @common_type(%union.tree_node* %0, %union.tree_node* %1)
  %115 = load %union.tree_node** %type573.pre-phi, align 8, !tbaa !1
  %size = getelementptr inbounds %union.tree_node* %115, i64 0, i32 0, i32 2
  %116 = bitcast i32* %size to %union.tree_node**
  %117 = load %union.tree_node** %116, align 8, !tbaa !8
  %lnot577 = icmp eq %union.tree_node* %117, null
  %118 = load %union.tree_node** %type579.pre-phi, align 8, !tbaa !1
  %size581 = getelementptr inbounds %union.tree_node* %118, i64 0, i32 0, i32 2
  %119 = bitcast i32* %size581 to %union.tree_node**
  %120 = load %union.tree_node** %119, align 8, !tbaa !8
  %lnot584 = icmp eq %union.tree_node* %120, null
  %cmp586 = xor i1 %lnot577, %lnot584
  br i1 %cmp586, label %if.then588, label %if.else589

if.then588:                                       ; preds = %if.then570
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([47 x i8]* @.str57, i64 0, i64 0)) #6
  br label %sw.epilog

if.else589:                                       ; preds = %if.then570
  %121 = load i32* @pedantic, align 4, !tbaa !27
  %tobool590 = icmp eq i32 %121, 0
  br i1 %tobool590, label %sw.epilog, label %land.lhs.true591

land.lhs.true591:                                 ; preds = %if.else589
  %code595 = getelementptr inbounds %union.tree_node* %115, i64 0, i32 0, i32 0, i32 2
  %bf.load596 = load i32* %code595, align 8
  %bf.clear597 = and i32 %bf.load596, 255
  %cmp598 = icmp eq i32 %bf.clear597, 23
  br i1 %cmp598, label %if.then600, label %sw.epilog

if.then600:                                       ; preds = %land.lhs.true591
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([59 x i8]* @.str56, i64 0, i64 0)) #6
  br label %sw.epilog

if.else603:                                       ; preds = %comp_target_types.exit1713
  %122 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 28), align 8, !tbaa !7
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([50 x i8]* @.str54, i64 0, i64 0)) #6
  br label %sw.epilog

if.else605:                                       ; preds = %if.else561
  %cmp613 = icmp eq i32 %bf.clear42, 25
  %or.cond1753 = and i1 %cmp562, %cmp613
  br i1 %or.cond1753, label %land.lhs.true615, label %if.else624

land.lhs.true615:                                 ; preds = %if.else605
  %call616 = call i32 @integer_zerop(%union.tree_node* %op1.1) #6
  %tobool617 = icmp eq i32 %call616, 0
  br i1 %tobool617, label %if.else624, label %if.then618

if.then618:                                       ; preds = %land.lhs.true615
  %123 = load i32* @pedantic, align 4, !tbaa !27
  %124 = load i32* @extra_warnings, align 4
  %125 = or i32 %124, %123
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %sw.epilog, label %if.then622

if.then622:                                       ; preds = %if.then618
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([48 x i8]* @.str58, i64 0, i64 0)) #6
  br label %sw.epilog

if.else624:                                       ; preds = %land.lhs.true615, %if.else605
  br i1 %cmp565, label %land.lhs.true627, label %if.else641

land.lhs.true627:                                 ; preds = %if.else624
  %bf.load630 = load i32* %code12, align 8
  %bf.clear631 = and i32 %bf.load630, 255
  %cmp632 = icmp eq i32 %bf.clear631, 25
  br i1 %cmp632, label %land.lhs.true634, label %if.else651

land.lhs.true634:                                 ; preds = %land.lhs.true627
  %call635 = call i32 @integer_zerop(%union.tree_node* %op0.1) #6
  %tobool636 = icmp eq i32 %call635, 0
  br i1 %tobool636, label %if.else641, label %if.then637

if.then637:                                       ; preds = %land.lhs.true634
  %127 = load i32* @pedantic, align 4, !tbaa !27
  %tobool638 = icmp eq i32 %127, 0
  br i1 %tobool638, label %sw.epilog, label %if.then639

if.then639:                                       ; preds = %if.then637
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([48 x i8]* @.str58, i64 0, i64 0)) #6
  br label %sw.epilog

if.else641:                                       ; preds = %land.lhs.true634, %if.else624
  %cmp645 = icmp eq i32 %bf.clear10, 6
  %or.cond1340 = and i1 %cmp562, %cmp645
  br i1 %or.cond1340, label %if.then647, label %if.else651

if.then647:                                       ; preds = %if.else641
  %128 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool648 = icmp eq i32 %128, 0
  br i1 %tobool648, label %if.then649, label %sw.epilog

if.then649:                                       ; preds = %if.then647
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([39 x i8]* @.str55, i64 0, i64 0)) #6
  br label %sw.epilog

if.else651:                                       ; preds = %land.lhs.true627, %if.else641
  %or.cond1341 = and i1 %cmp549, %cmp565
  br i1 %or.cond1341, label %if.then657, label %sw.epilog

if.then657:                                       ; preds = %if.else651
  %129 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool658 = icmp eq i32 %129, 0
  br i1 %tobool658, label %if.then659, label %sw.epilog

if.then659:                                       ; preds = %if.then657
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([39 x i8]* @.str55, i64 0, i64 0)) #6
  br label %sw.epilog

sw.bb667:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80
  %cmp668 = icmp ne i32 %bf.clear, 7
  %cmp671 = icmp ne i32 %bf.clear10, 7
  %or.cond1342 = or i1 %cmp668, %cmp671
  br i1 %or.cond1342, label %if.then673, label %if.end674

if.then673:                                       ; preds = %sw.bb667
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([52 x i8]* @.str59, i64 0, i64 0)) #6
  %130 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end674:                                        ; preds = %sw.bb667
  %131 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end449, %sw.bb157, %sw.bb548, %sw.bb508, %land.lhs.true478, %land.lhs.true464, %land.lhs.true373, %if.then350, %if.then343, %if.then303, %if.then296, %if.then256, %if.then250, %land.lhs.true206, %sw.bb198, %lor.end, %if.then134, %if.else104, %if.else86, %if.end248, %if.end294, %if.end341, %if.then488, %if.then498, %if.then530, %if.else589, %if.then618, %if.then637, %if.then647, %if.then657, %if.end80, %if.then622, %if.then649, %if.then659, %if.else651, %if.then639, %if.else603, %land.lhs.true591, %if.then600, %if.then588, %if.else544, %if.then542, %land.lhs.true533, %if.else521, %if.then490, %if.then500, %if.else492, %sw.bb308, %sw.bb261, %sw.bb218, %if.then214, %if.end171, %lor.end195, %if.end122, %land.lhs.true128, %if.end674, %sw.bb113
  %common.0 = phi i32 [ 0, %if.end80 ], [ 1, %if.end674 ], [ 0, %if.then588 ], [ 0, %if.then600 ], [ 0, %land.lhs.true591 ], [ 0, %if.else589 ], [ 0, %if.else603 ], [ 0, %if.then622 ], [ 0, %if.then618 ], [ 0, %if.then639 ], [ 0, %if.then637 ], [ 0, %if.then647 ], [ 0, %if.then649 ], [ 0, %if.then657 ], [ 0, %if.then659 ], [ 0, %if.else651 ], [ 0, %if.then542 ], [ 0, %land.lhs.true533 ], [ 0, %if.then530 ], [ 0, %if.else544 ], [ 0, %if.else521 ], [ 0, %if.then488 ], [ 0, %if.then490 ], [ 0, %if.then498 ], [ 0, %if.then500 ], [ 0, %if.else492 ], [ 0, %if.end341 ], [ 0, %sw.bb308 ], [ 0, %if.end294 ], [ 0, %sw.bb261 ], [ 0, %if.end248 ], [ 0, %sw.bb218 ], [ 0, %if.then214 ], [ 0, %land.lhs.true206 ], [ 0, %sw.bb198 ], [ 1, %lor.end195 ], [ 0, %if.end171 ], [ 0, %land.lhs.true128 ], [ 0, %if.end122 ], [ 1, %sw.bb113 ], [ 1, %if.else86 ], [ 1, %if.else104 ], [ 1, %if.then134 ], [ 1, %lor.end ], [ 0, %sw.bb157 ], [ 0, %if.then250 ], [ 0, %if.then256 ], [ 0, %if.then296 ], [ 0, %if.then303 ], [ 0, %if.then343 ], [ 0, %if.then350 ], [ 0, %land.lhs.true373 ], [ 0, %if.end449 ], [ 0, %land.lhs.true464 ], [ 0, %land.lhs.true478 ], [ 0, %sw.bb508 ], [ 0, %sw.bb548 ]
  %short_shift.2 = phi i32 [ 0, %if.end80 ], [ 0, %if.end674 ], [ 0, %if.then588 ], [ 0, %if.then600 ], [ 0, %land.lhs.true591 ], [ 0, %if.else589 ], [ 0, %if.else603 ], [ 0, %if.then622 ], [ 0, %if.then618 ], [ 0, %if.then639 ], [ 0, %if.then637 ], [ 0, %if.then647 ], [ 0, %if.then649 ], [ 0, %if.then657 ], [ 0, %if.then659 ], [ 0, %if.else651 ], [ 0, %if.then542 ], [ 0, %land.lhs.true533 ], [ 0, %if.then530 ], [ 0, %if.else544 ], [ 0, %if.else521 ], [ 0, %if.then488 ], [ 0, %if.then490 ], [ 0, %if.then498 ], [ 0, %if.then500 ], [ 0, %if.else492 ], [ 0, %if.end341 ], [ 0, %sw.bb308 ], [ 0, %if.end294 ], [ 0, %sw.bb261 ], [ %short_shift.1, %if.end248 ], [ 0, %sw.bb218 ], [ 0, %if.then214 ], [ 0, %land.lhs.true206 ], [ 0, %sw.bb198 ], [ 0, %lor.end195 ], [ 0, %if.end171 ], [ 0, %land.lhs.true128 ], [ 0, %if.end122 ], [ 0, %sw.bb113 ], [ 0, %if.else86 ], [ 0, %if.else104 ], [ 0, %if.then134 ], [ 0, %lor.end ], [ 0, %sw.bb157 ], [ %short_shift.1, %if.then250 ], [ %short_shift.1, %if.then256 ], [ 0, %if.then296 ], [ 0, %if.then303 ], [ 0, %if.then343 ], [ 0, %if.then350 ], [ 0, %land.lhs.true373 ], [ 0, %if.end449 ], [ 0, %land.lhs.true464 ], [ 0, %land.lhs.true478 ], [ 0, %sw.bb508 ], [ 0, %sw.bb548 ]
  %short_compare.0 = phi i32 [ 0, %if.end80 ], [ 0, %if.end674 ], [ 0, %if.then588 ], [ 0, %if.then600 ], [ 0, %land.lhs.true591 ], [ 0, %if.else589 ], [ 0, %if.else603 ], [ 0, %if.then622 ], [ 0, %if.then618 ], [ 0, %if.then639 ], [ 0, %if.then637 ], [ 0, %if.then647 ], [ 0, %if.then649 ], [ 0, %if.then657 ], [ 0, %if.then659 ], [ 0, %if.else651 ], [ 0, %if.then542 ], [ 0, %land.lhs.true533 ], [ 0, %if.then530 ], [ 0, %if.else544 ], [ 0, %if.else521 ], [ 0, %if.then488 ], [ 0, %if.then490 ], [ 0, %if.then498 ], [ 0, %if.then500 ], [ 0, %if.else492 ], [ 0, %if.end341 ], [ 0, %sw.bb308 ], [ 0, %if.end294 ], [ 0, %sw.bb261 ], [ 0, %if.end248 ], [ 0, %sw.bb218 ], [ 0, %if.then214 ], [ 0, %land.lhs.true206 ], [ 0, %sw.bb198 ], [ 0, %lor.end195 ], [ 0, %if.end171 ], [ 0, %land.lhs.true128 ], [ 0, %if.end122 ], [ 0, %sw.bb113 ], [ 0, %if.else86 ], [ 0, %if.else104 ], [ 0, %if.then134 ], [ 0, %lor.end ], [ 0, %sw.bb157 ], [ 0, %if.then250 ], [ 0, %if.then256 ], [ 0, %if.then296 ], [ 0, %if.then303 ], [ 0, %if.then343 ], [ 0, %if.then350 ], [ 1, %land.lhs.true373 ], [ 0, %if.end449 ], [ 0, %land.lhs.true464 ], [ 0, %land.lhs.true478 ], [ 0, %sw.bb508 ], [ 1, %sw.bb548 ]
  %shorten.1 = phi i32 [ 0, %if.end80 ], [ 0, %if.end674 ], [ 0, %if.then588 ], [ 0, %if.then600 ], [ 0, %land.lhs.true591 ], [ 0, %if.else589 ], [ 0, %if.else603 ], [ 0, %if.then622 ], [ 0, %if.then618 ], [ 0, %if.then639 ], [ 0, %if.then637 ], [ 0, %if.then647 ], [ 0, %if.then649 ], [ 0, %if.then657 ], [ 0, %if.then659 ], [ 0, %if.else651 ], [ 0, %if.then542 ], [ 0, %land.lhs.true533 ], [ 0, %if.then530 ], [ 0, %if.else544 ], [ 0, %if.else521 ], [ 0, %if.then488 ], [ 0, %if.then490 ], [ 0, %if.then498 ], [ 0, %if.then500 ], [ 0, %if.else492 ], [ 0, %if.end341 ], [ 0, %sw.bb308 ], [ 0, %if.end294 ], [ 0, %sw.bb261 ], [ 0, %if.end248 ], [ 0, %sw.bb218 ], [ 0, %if.then214 ], [ 0, %land.lhs.true206 ], [ 0, %sw.bb198 ], [ %lor.ext196, %lor.end195 ], [ 0, %if.end171 ], [ 0, %land.lhs.true128 ], [ 0, %if.end122 ], [ 0, %sw.bb113 ], [ 0, %if.else86 ], [ 0, %if.else104 ], [ 0, %if.then134 ], [ %lor.ext, %lor.end ], [ %., %sw.bb157 ], [ 0, %if.then250 ], [ 0, %if.then256 ], [ 0, %if.then296 ], [ 0, %if.then303 ], [ 0, %if.then343 ], [ 0, %if.then350 ], [ 0, %land.lhs.true373 ], [ 0, %if.end449 ], [ 0, %land.lhs.true464 ], [ 0, %land.lhs.true478 ], [ 1, %sw.bb508 ], [ 0, %sw.bb548 ]
  %build_type.0 = phi %union.tree_node* [ null, %if.end80 ], [ %131, %if.end674 ], [ %103, %if.then588 ], [ %103, %if.then600 ], [ %103, %land.lhs.true591 ], [ %103, %if.else589 ], [ %103, %if.else603 ], [ %103, %if.then622 ], [ %103, %if.then618 ], [ %103, %if.then639 ], [ %103, %if.then637 ], [ %103, %if.then647 ], [ %103, %if.then649 ], [ %103, %if.then657 ], [ %103, %if.then659 ], [ %103, %if.else651 ], [ null, %if.then542 ], [ null, %land.lhs.true533 ], [ null, %if.then530 ], [ null, %if.else544 ], [ null, %if.else521 ], [ %70, %if.then488 ], [ %70, %if.then490 ], [ %70, %if.then498 ], [ %70, %if.then500 ], [ %70, %if.else492 ], [ null, %if.end341 ], [ null, %sw.bb308 ], [ null, %if.end294 ], [ null, %sw.bb261 ], [ null, %if.end248 ], [ null, %sw.bb218 ], [ null, %if.then214 ], [ null, %land.lhs.true206 ], [ null, %sw.bb198 ], [ null, %lor.end195 ], [ null, %if.end171 ], [ null, %land.lhs.true128 ], [ null, %if.end122 ], [ null, %sw.bb113 ], [ null, %if.else86 ], [ null, %if.else104 ], [ null, %if.then134 ], [ null, %lor.end ], [ null, %sw.bb157 ], [ null, %if.then250 ], [ null, %if.then256 ], [ null, %if.then296 ], [ null, %if.then303 ], [ null, %if.then343 ], [ null, %if.then350 ], [ %70, %land.lhs.true373 ], [ %70, %if.end449 ], [ %70, %land.lhs.true464 ], [ %70, %land.lhs.true478 ], [ null, %sw.bb508 ], [ %103, %sw.bb548 ]
  %converted.0 = phi i32 [ 0, %if.end80 ], [ 0, %if.end674 ], [ 0, %if.then588 ], [ 0, %if.then600 ], [ 0, %land.lhs.true591 ], [ 0, %if.else589 ], [ 0, %if.else603 ], [ 0, %if.then622 ], [ 0, %if.then618 ], [ 0, %if.then639 ], [ 0, %if.then637 ], [ 0, %if.then647 ], [ 0, %if.then649 ], [ 0, %if.then657 ], [ 0, %if.then659 ], [ 0, %if.else651 ], [ 0, %if.then542 ], [ 0, %land.lhs.true533 ], [ 0, %if.then530 ], [ 0, %if.else544 ], [ 0, %if.else521 ], [ 0, %if.then488 ], [ 0, %if.then490 ], [ 0, %if.then498 ], [ 0, %if.then500 ], [ 0, %if.else492 ], [ 0, %if.end341 ], [ 0, %sw.bb308 ], [ 0, %if.end294 ], [ 0, %sw.bb261 ], [ 0, %if.end248 ], [ 0, %sw.bb218 ], [ 1, %if.then214 ], [ 0, %land.lhs.true206 ], [ 0, %sw.bb198 ], [ 0, %lor.end195 ], [ 0, %if.end171 ], [ 0, %land.lhs.true128 ], [ 0, %if.end122 ], [ 0, %sw.bb113 ], [ 0, %if.else86 ], [ 0, %if.else104 ], [ 0, %if.then134 ], [ 0, %lor.end ], [ 0, %sw.bb157 ], [ 1, %if.then250 ], [ 1, %if.then256 ], [ 1, %if.then296 ], [ 1, %if.then303 ], [ 1, %if.then343 ], [ 1, %if.then350 ], [ 0, %land.lhs.true373 ], [ 0, %if.end449 ], [ 0, %land.lhs.true464 ], [ 0, %land.lhs.true478 ], [ 0, %sw.bb508 ], [ 0, %sw.bb548 ]
  %result_type.1 = phi %union.tree_node* [ null, %if.end80 ], [ null, %if.end674 ], [ %call571, %if.then588 ], [ %call571, %if.then600 ], [ %call571, %land.lhs.true591 ], [ %call571, %if.else589 ], [ %122, %if.else603 ], [ %0, %if.then622 ], [ %0, %if.then618 ], [ %1, %if.then639 ], [ %1, %if.then637 ], [ %0, %if.then647 ], [ %0, %if.then649 ], [ %1, %if.then657 ], [ %1, %if.then659 ], [ null, %if.else651 ], [ %call531, %if.then542 ], [ %call531, %land.lhs.true533 ], [ %call531, %if.then530 ], [ %102, %if.else544 ], [ null, %if.else521 ], [ %0, %if.then488 ], [ %0, %if.then490 ], [ %1, %if.then498 ], [ %1, %if.then500 ], [ null, %if.else492 ], [ %0, %if.end341 ], [ null, %sw.bb308 ], [ %0, %if.end294 ], [ null, %sw.bb261 ], [ %0, %if.end248 ], [ null, %sw.bb218 ], [ %50, %if.then214 ], [ null, %land.lhs.true206 ], [ null, %sw.bb198 ], [ null, %lor.end195 ], [ null, %if.end171 ], [ null, %land.lhs.true128 ], [ null, %if.end122 ], [ null, %sw.bb113 ], [ null, %if.else86 ], [ null, %if.else104 ], [ null, %if.then134 ], [ null, %lor.end ], [ null, %sw.bb157 ], [ %0, %if.then250 ], [ %0, %if.then256 ], [ %0, %if.then296 ], [ %0, %if.then303 ], [ %0, %if.then343 ], [ %0, %if.then350 ], [ null, %land.lhs.true373 ], [ %.result_type.0, %if.end449 ], [ %0, %land.lhs.true464 ], [ %1, %land.lhs.true478 ], [ null, %sw.bb508 ], [ null, %sw.bb548 ]
  %resultcode.1 = phi i32 [ %code, %if.end80 ], [ %code, %if.end674 ], [ %code, %if.then588 ], [ %code, %if.then600 ], [ %code, %land.lhs.true591 ], [ %code, %if.else589 ], [ %code, %if.else603 ], [ %code, %if.then622 ], [ %code, %if.then618 ], [ %code, %if.then639 ], [ %code, %if.then637 ], [ %code, %if.then647 ], [ %code, %if.then649 ], [ %code, %if.then657 ], [ %code, %if.then659 ], [ %code, %if.else651 ], [ %code, %if.then542 ], [ %code, %land.lhs.true533 ], [ %code, %if.then530 ], [ %code, %if.else544 ], [ %code, %if.else521 ], [ %code, %if.then488 ], [ %code, %if.then490 ], [ %code, %if.then498 ], [ %code, %if.then500 ], [ %code, %if.else492 ], [ %code, %if.end341 ], [ %code, %sw.bb308 ], [ 82, %if.end294 ], [ 82, %sw.bb261 ], [ 83, %if.end248 ], [ 83, %sw.bb218 ], [ %code, %if.then214 ], [ %code, %land.lhs.true206 ], [ %code, %sw.bb198 ], [ %code, %lor.end195 ], [ %code, %if.end171 ], [ %code, %land.lhs.true128 ], [ %code, %if.end122 ], [ 61, %sw.bb113 ], [ 59, %if.else86 ], [ 60, %if.else104 ], [ 70, %if.then134 ], [ %code, %lor.end ], [ %code, %sw.bb157 ], [ 83, %if.then250 ], [ 83, %if.then256 ], [ 82, %if.then296 ], [ 82, %if.then303 ], [ %code, %if.then343 ], [ %code, %if.then350 ], [ %code, %land.lhs.true373 ], [ %code, %if.end449 ], [ %code, %land.lhs.true464 ], [ %code, %land.lhs.true478 ], [ %code, %sw.bb508 ], [ %code, %sw.bb548 ]
  %op1.5 = phi %union.tree_node* [ %op1.1, %if.end80 ], [ %op1.1, %if.end674 ], [ %op1.1, %if.then588 ], [ %op1.1, %if.then600 ], [ %op1.1, %land.lhs.true591 ], [ %op1.1, %if.else589 ], [ %op1.1, %if.else603 ], [ %op1.1, %if.then622 ], [ %op1.1, %if.then618 ], [ %op1.1, %if.then639 ], [ %op1.1, %if.then637 ], [ %op1.1, %if.then647 ], [ %op1.1, %if.then649 ], [ %op1.1, %if.then657 ], [ %op1.1, %if.then659 ], [ %op1.1, %if.else651 ], [ %op1.1, %if.then542 ], [ %op1.1, %land.lhs.true533 ], [ %op1.1, %if.then530 ], [ %op1.1, %if.else544 ], [ %op1.1, %if.else521 ], [ %op1.1, %if.then488 ], [ %op1.1, %if.then490 ], [ %op1.1, %if.then498 ], [ %op1.1, %if.then500 ], [ %op1.1, %if.else492 ], [ %op1.1, %if.end341 ], [ %op1.1, %sw.bb308 ], [ %op1.1, %if.end294 ], [ %op1.1, %sw.bb261 ], [ %op1.1, %if.end248 ], [ %op1.1, %sw.bb218 ], [ %call216, %if.then214 ], [ %op1.1, %land.lhs.true206 ], [ %op1.1, %sw.bb198 ], [ %op1.1, %lor.end195 ], [ %op1.1, %if.end171 ], [ %op1.1, %land.lhs.true128 ], [ %op1.1, %if.end122 ], [ %op1.1, %sw.bb113 ], [ %op1.1, %if.else86 ], [ %op1.1, %if.else104 ], [ %op1.1, %if.then134 ], [ %op1.1, %lor.end ], [ %op1.1, %sw.bb157 ], [ %op1.1, %if.then250 ], [ %call257, %if.then256 ], [ %op1.1, %if.then296 ], [ %call304, %if.then303 ], [ %op1.1, %if.then343 ], [ %call351, %if.then350 ], [ %op1.1, %land.lhs.true373 ], [ %op1.1, %if.end449 ], [ %op1.1, %land.lhs.true464 ], [ %op1.1, %land.lhs.true478 ], [ %op1.1, %sw.bb508 ], [ %op1.1, %sw.bb548 ]
  %op0.2 = phi %union.tree_node* [ %op0.1, %if.end80 ], [ %op0.1, %if.end674 ], [ %op0.1, %if.then588 ], [ %op0.1, %if.then600 ], [ %op0.1, %land.lhs.true591 ], [ %op0.1, %if.else589 ], [ %op0.1, %if.else603 ], [ %op0.1, %if.then622 ], [ %op0.1, %if.then618 ], [ %op0.1, %if.then639 ], [ %op0.1, %if.then637 ], [ %op0.1, %if.then647 ], [ %op0.1, %if.then649 ], [ %op0.1, %if.then657 ], [ %op0.1, %if.then659 ], [ %op0.1, %if.else651 ], [ %op0.1, %if.then542 ], [ %op0.1, %land.lhs.true533 ], [ %op0.1, %if.then530 ], [ %op0.1, %if.else544 ], [ %op0.1, %if.else521 ], [ %op0.1, %if.then488 ], [ %op0.1, %if.then490 ], [ %op0.1, %if.then498 ], [ %op0.1, %if.then500 ], [ %op0.1, %if.else492 ], [ %op0.1, %if.end341 ], [ %op0.1, %sw.bb308 ], [ %op0.1, %if.end294 ], [ %op0.1, %sw.bb261 ], [ %op0.1, %if.end248 ], [ %op0.1, %sw.bb218 ], [ %call215, %if.then214 ], [ %op0.1, %land.lhs.true206 ], [ %op0.1, %sw.bb198 ], [ %op0.1, %lor.end195 ], [ %op0.1, %if.end171 ], [ %op0.1, %land.lhs.true128 ], [ %op0.1, %if.end122 ], [ %op0.1, %sw.bb113 ], [ %op0.1, %if.else86 ], [ %op0.1, %if.else104 ], [ %op0.1, %if.then134 ], [ %op0.1, %lor.end ], [ %op0.1, %sw.bb157 ], [ %op0.1, %if.then250 ], [ %op0.1, %if.then256 ], [ %op0.1, %if.then296 ], [ %op0.1, %if.then303 ], [ %op0.1, %if.then343 ], [ %op0.1, %if.then350 ], [ %op0.1, %land.lhs.true373 ], [ %op0.1, %if.end449 ], [ %op0.1, %land.lhs.true464 ], [ %op0.1, %land.lhs.true478 ], [ %op0.1, %sw.bb508 ], [ %op0.1, %sw.bb548 ]
  %132 = and i32 %bf.load, 254
  %133 = icmp eq i32 %132, 6
  %cmp681 = icmp eq i32 %bf.clear, 8
  %or.cond1344 = or i1 %133, %cmp681
  br i1 %or.cond1344, label %land.lhs.true683, label %if.end1248

land.lhs.true683:                                 ; preds = %sw.epilog
  %134 = and i32 %bf.load9, 254
  %135 = icmp eq i32 %134, 6
  %cmp690 = icmp eq i32 %bf.clear10, 8
  %or.cond1346 = or i1 %135, %cmp690
  br i1 %or.cond1346, label %if.then692, label %if.end1248

if.then692:                                       ; preds = %land.lhs.true683
  %cmp696 = icmp ne i32 %bf.clear10, 8
  %not.cmp681 = xor i1 %cmp681, true
  %.cmp696 = and i1 %cmp696, %not.cmp681
  %tobool699 = icmp ne i32 %shorten.1, 0
  %tobool703 = icmp eq i32 %short_compare.0, 0
  %136 = or i32 %short_compare.0, %common.0
  %137 = or i32 %136, %shorten.1
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %if.end706, label %if.then704

if.then704:                                       ; preds = %if.then692
  %call705 = call %union.tree_node* @common_type(%union.tree_node* %0, %union.tree_node* %1)
  br label %if.end706

if.end706:                                        ; preds = %if.then692, %if.then704
  %result_type.2 = phi %union.tree_node* [ %call705, %if.then704 ], [ %result_type.1, %if.then692 ]
  %or.cond1349 = and i1 %tobool699, %.cmp696
  br i1 %or.cond1349, label %if.then710, label %if.end885

if.then710:                                       ; preds = %if.end706
  %call711 = call %union.tree_node* @get_narrower(%union.tree_node* %op0.2, i32* %unsigned0) #6
  %call712 = call %union.tree_node* @get_narrower(%union.tree_node* %op1.5, i32* %unsigned1) #6
  %unsigned_flag714 = getelementptr inbounds %union.tree_node* %result_type.2, i64 0, i32 0, i32 0, i32 2
  %bf.load715 = load i32* %unsigned_flag714, align 8
  %bf.lshr716 = lshr i32 %bf.load715, 13
  %bf.clear717 = and i32 %bf.lshr716, 1
  %type720 = getelementptr inbounds %union.tree_node* %op0.2, i64 0, i32 0, i32 0, i32 1
  %139 = load %union.tree_node** %type720, align 8, !tbaa !1
  %type721 = bitcast %union.tree_node* %139 to %struct.tree_type*
  %precision722 = getelementptr inbounds %struct.tree_type* %type721, i64 0, i32 6
  %bf.load723 = load i32* %precision722, align 4
  %type726 = getelementptr inbounds %union.tree_node* %call711, i64 0, i32 0, i32 0, i32 1
  %140 = load %union.tree_node** %type726, align 8, !tbaa !1
  %type727 = bitcast %union.tree_node* %140 to %struct.tree_type*
  %precision728 = getelementptr inbounds %struct.tree_type* %type727, i64 0, i32 6
  %bf.load729 = load i32* %precision728, align 4
  %141 = xor i32 %bf.load729, %bf.load723
  %142 = and i32 %141, 511
  %cmp731 = icmp ne i32 %142, 0
  %cmp736 = icmp eq %union.tree_node* %139, %result_type.2
  %or.cond1669 = or i1 %cmp731, %cmp736
  br i1 %or.cond1669, label %if.end746, label %if.then738

if.then738:                                       ; preds = %if.then710
  %unsigned_flag742 = getelementptr inbounds %union.tree_node* %139, i64 0, i32 0, i32 0, i32 2
  %bf.load743 = load i32* %unsigned_flag742, align 8
  %bf.lshr744 = lshr i32 %bf.load743, 13
  %bf.clear745 = and i32 %bf.lshr744, 1
  store i32 %bf.clear745, i32* %unsigned0, align 4, !tbaa !27
  br label %if.end746

if.end746:                                        ; preds = %if.then710, %if.then738
  %type748 = getelementptr inbounds %union.tree_node* %op1.5, i64 0, i32 0, i32 0, i32 1
  %143 = load %union.tree_node** %type748, align 8, !tbaa !1
  %type749 = bitcast %union.tree_node* %143 to %struct.tree_type*
  %precision750 = getelementptr inbounds %struct.tree_type* %type749, i64 0, i32 6
  %bf.load751 = load i32* %precision750, align 4
  %type754 = getelementptr inbounds %union.tree_node* %call712, i64 0, i32 0, i32 0, i32 1
  %144 = load %union.tree_node** %type754, align 8, !tbaa !1
  %type755 = bitcast %union.tree_node* %144 to %struct.tree_type*
  %precision756 = getelementptr inbounds %struct.tree_type* %type755, i64 0, i32 6
  %bf.load757 = load i32* %precision756, align 4
  %145 = xor i32 %bf.load757, %bf.load751
  %146 = and i32 %145, 511
  %cmp759 = icmp ne i32 %146, 0
  %cmp764 = icmp eq %union.tree_node* %143, %result_type.2
  %or.cond1670 = or i1 %cmp759, %cmp764
  br i1 %or.cond1670, label %if.end774, label %if.then766

if.then766:                                       ; preds = %if.end746
  %unsigned_flag770 = getelementptr inbounds %union.tree_node* %143, i64 0, i32 0, i32 0, i32 2
  %bf.load771 = load i32* %unsigned_flag770, align 8
  %bf.lshr772 = lshr i32 %bf.load771, 13
  %bf.clear773 = and i32 %bf.lshr772, 1
  store i32 %bf.clear773, i32* %unsigned1, align 4, !tbaa !27
  br label %if.end774

if.end774:                                        ; preds = %if.end746, %if.then766
  %cmp775 = icmp eq i32 %shorten.1, -1
  %147 = load i32* %unsigned0, align 4, !tbaa !27
  %.bf.clear717 = select i1 %cmp775, i32 %147, i32 %bf.clear717
  %bf.load783 = load i32* %precision728, align 4
  %bf.clear784 = and i32 %bf.load783, 511
  %type785 = bitcast %union.tree_node* %result_type.2 to %struct.tree_type*
  %precision786 = getelementptr inbounds %struct.tree_type* %type785, i64 0, i32 6
  %bf.load787 = load i32* %precision786, align 4
  %bf.clear788 = and i32 %bf.load787, 511
  %cmp789 = icmp ult i32 %bf.clear784, %bf.clear788
  br i1 %cmp789, label %land.lhs.true791, label %if.else820

land.lhs.true791:                                 ; preds = %if.end774
  %bf.load796 = load i32* %precision756, align 4
  %bf.clear797 = and i32 %bf.load796, 511
  %cmp804 = icmp eq i32 %bf.clear797, %bf.clear784
  %148 = load i32* %unsigned1, align 4
  %cmp807 = icmp eq i32 %147, %148
  %or.cond1727 = and i1 %cmp804, %cmp807
  br i1 %or.cond1727, label %land.lhs.true809, label %if.else820

land.lhs.true809:                                 ; preds = %land.lhs.true791
  %tobool810 = icmp eq i32 %147, 0
  %tobool812 = icmp ne i32 %.bf.clear717, 0
  %or.cond1350 = and i1 %tobool810, %tobool812
  br i1 %or.cond1350, label %if.else820, label %if.then813

if.then813:                                       ; preds = %land.lhs.true809
  %call818 = call %union.tree_node* @common_type(%union.tree_node* %140, %union.tree_node* %144)
  %call819 = call %union.tree_node* @signed_or_unsigned_type(i32 %147, %union.tree_node* %call818) #6
  br label %if.end885

if.else820:                                       ; preds = %land.lhs.true809, %land.lhs.true791, %if.end774
  %code822 = getelementptr inbounds %union.tree_node* %call711, i64 0, i32 0, i32 0, i32 2
  %bf.load823 = load i32* %code822, align 8
  %bf.clear824 = and i32 %bf.load823, 255
  %cmp825 = icmp eq i32 %bf.clear824, 25
  br i1 %cmp825, label %land.lhs.true827, label %if.else851

land.lhs.true827:                                 ; preds = %if.else820
  %149 = load i32* %unsigned1, align 4, !tbaa !27
  %tobool828 = icmp eq i32 %149, 0
  %tobool830 = icmp ne i32 %.bf.clear717, 0
  %or.cond1351 = and i1 %tobool828, %tobool830
  br i1 %or.cond1351, label %if.else851, label %land.lhs.true831

land.lhs.true831:                                 ; preds = %land.lhs.true827
  %bf.load836 = load i32* %precision756, align 4
  %bf.clear837 = and i32 %bf.load836, 511
  %cmp842 = icmp ult i32 %bf.clear837, %bf.clear788
  br i1 %cmp842, label %land.lhs.true844, label %if.else851

land.lhs.true844:                                 ; preds = %land.lhs.true831
  %call847 = call %union.tree_node* @signed_or_unsigned_type(i32 %149, %union.tree_node* %144) #6
  %call848 = call i32 @int_fits_type_p(%union.tree_node* %call711, %union.tree_node* %call847) #6
  %tobool849 = icmp eq i32 %call848, 0
  br i1 %tobool849, label %if.else851, label %if.end885

if.else851:                                       ; preds = %land.lhs.true844, %land.lhs.true827, %land.lhs.true831, %if.else820
  %code853 = getelementptr inbounds %union.tree_node* %call712, i64 0, i32 0, i32 0, i32 2
  %bf.load854 = load i32* %code853, align 8
  %bf.clear855 = and i32 %bf.load854, 255
  %cmp856 = icmp eq i32 %bf.clear855, 25
  br i1 %cmp856, label %land.lhs.true858, label %if.end885

land.lhs.true858:                                 ; preds = %if.else851
  %150 = load i32* %unsigned0, align 4, !tbaa !27
  %tobool859 = icmp eq i32 %150, 0
  %tobool861 = icmp ne i32 %.bf.clear717, 0
  %or.cond1352 = and i1 %tobool859, %tobool861
  br i1 %or.cond1352, label %if.end885, label %land.lhs.true862

land.lhs.true862:                                 ; preds = %land.lhs.true858
  %151 = load %union.tree_node** %type726, align 8, !tbaa !1
  %type865 = bitcast %union.tree_node* %151 to %struct.tree_type*
  %precision866 = getelementptr inbounds %struct.tree_type* %type865, i64 0, i32 6
  %bf.load867 = load i32* %precision866, align 4
  %bf.clear868 = and i32 %bf.load867, 511
  %bf.load871 = load i32* %precision786, align 4
  %bf.clear872 = and i32 %bf.load871, 511
  %cmp873 = icmp ult i32 %bf.clear868, %bf.clear872
  br i1 %cmp873, label %land.lhs.true875, label %if.end885

land.lhs.true875:                                 ; preds = %land.lhs.true862
  %call878 = call %union.tree_node* @signed_or_unsigned_type(i32 %150, %union.tree_node* %151) #6
  %call879 = call i32 @int_fits_type_p(%union.tree_node* %call712, %union.tree_node* %call878) #6
  %tobool880 = icmp eq i32 %call879, 0
  %result_type.2.call878 = select i1 %tobool880, %union.tree_node* %result_type.2, %union.tree_node* %call878
  br label %if.end885

if.end885:                                        ; preds = %land.lhs.true875, %land.lhs.true844, %if.then813, %if.else851, %land.lhs.true862, %land.lhs.true858, %if.end706
  %final_type.0 = phi %union.tree_node* [ %result_type.2, %land.lhs.true858 ], [ %result_type.2, %land.lhs.true862 ], [ %result_type.2, %if.else851 ], [ %result_type.2, %if.then813 ], [ null, %if.end706 ], [ %result_type.2, %land.lhs.true844 ], [ %result_type.2, %land.lhs.true875 ]
  %result_type.3 = phi %union.tree_node* [ %result_type.2, %land.lhs.true858 ], [ %result_type.2, %land.lhs.true862 ], [ %result_type.2, %if.else851 ], [ %call819, %if.then813 ], [ %result_type.2, %if.end706 ], [ %call847, %land.lhs.true844 ], [ %result_type.2.call878, %land.lhs.true875 ]
  %tobool886 = icmp eq i32 %short_shift.2, 0
  br i1 %tobool886, label %if.end950, label %if.then887

if.then887:                                       ; preds = %if.end885
  %call889 = call %union.tree_node* @get_narrower(%union.tree_node* %op0.2, i32* %unsigned_arg) #6
  %cmp890 = icmp eq %union.tree_node* %call889, %op0.2
  br i1 %cmp890, label %land.lhs.true892, label %if.end905

land.lhs.true892:                                 ; preds = %if.then887
  %type894 = getelementptr inbounds %union.tree_node* %op0.2, i64 0, i32 0, i32 0, i32 1
  %152 = load %union.tree_node** %type894, align 8, !tbaa !1
  %cmp895 = icmp eq %union.tree_node* %result_type.3, %152
  br i1 %cmp895, label %if.then897, label %if.end905

if.then897:                                       ; preds = %land.lhs.true892
  %unsigned_flag901 = getelementptr inbounds %union.tree_node* %result_type.3, i64 0, i32 0, i32 0, i32 2
  %bf.load902 = load i32* %unsigned_flag901, align 8
  %bf.lshr903 = lshr i32 %bf.load902, 13
  %bf.clear904 = and i32 %bf.lshr903, 1
  store i32 %bf.clear904, i32* %unsigned_arg, align 4, !tbaa !27
  br label %if.end905

if.end905:                                        ; preds = %if.then897, %land.lhs.true892, %if.then887
  %type907 = getelementptr inbounds %union.tree_node* %call889, i64 0, i32 0, i32 0, i32 1
  %153 = load %union.tree_node** %type907, align 8, !tbaa !1
  %type908 = bitcast %union.tree_node* %153 to %struct.tree_type*
  %precision909 = getelementptr inbounds %struct.tree_type* %type908, i64 0, i32 6
  %bf.load910 = load i32* %precision909, align 4
  %bf.clear911 = and i32 %bf.load910, 511
  %type912 = bitcast %union.tree_node* %result_type.3 to %struct.tree_type*
  %precision913 = getelementptr inbounds %struct.tree_type* %type912, i64 0, i32 6
  %bf.load914 = load i32* %precision913, align 4
  %bf.clear915 = and i32 %bf.load914, 511
  %cmp916 = icmp ult i32 %bf.clear911, %bf.clear915
  br i1 %cmp916, label %land.lhs.true918, label %if.end950

land.lhs.true918:                                 ; preds = %if.end905
  %conv925 = zext i32 %bf.clear911 to i64
  %call926 = call i32 @compare_tree_int(%union.tree_node* %op1.5, i64 %conv925) #6
  %cmp927 = icmp slt i32 %call926, 0
  br i1 %cmp927, label %land.lhs.true929, label %if.end950

land.lhs.true929:                                 ; preds = %land.lhs.true918
  %unsigned_flag931 = getelementptr inbounds %union.tree_node* %result_type.3, i64 0, i32 0, i32 0, i32 2
  %bf.load932 = load i32* %unsigned_flag931, align 8
  %bf.clear934 = and i32 %bf.load932, 8192
  %tobool935 = icmp eq i32 %bf.clear934, 0
  %154 = load i32* %unsigned_arg, align 4
  %tobool937 = icmp ne i32 %154, 0
  %or.cond1353 = or i1 %tobool935, %tobool937
  br i1 %or.cond1353, label %if.then938, label %if.end950

if.then938:                                       ; preds = %land.lhs.true929
  %155 = load %union.tree_node** %type907, align 8, !tbaa !1
  %call941 = call %union.tree_node* @signed_or_unsigned_type(i32 %154, %union.tree_node* %155) #6
  %type943 = getelementptr inbounds %union.tree_node* %op0.2, i64 0, i32 0, i32 0, i32 1
  %156 = load %union.tree_node** %type943, align 8, !tbaa !1
  %cmp944 = icmp eq %union.tree_node* %156, %call941
  br i1 %cmp944, label %if.end950, label %if.then946

if.then946:                                       ; preds = %if.then938
  %call947 = call %union.tree_node* @convert(%union.tree_node* %call941, %union.tree_node* %op0.2) #6
  br label %if.end950

if.end950:                                        ; preds = %if.then946, %if.then938, %if.end885, %if.end905, %land.lhs.true918, %land.lhs.true929
  %final_type.1 = phi %union.tree_node* [ %result_type.3, %land.lhs.true929 ], [ %result_type.3, %land.lhs.true918 ], [ %result_type.3, %if.end905 ], [ %final_type.0, %if.end885 ], [ %result_type.3, %if.then938 ], [ %result_type.3, %if.then946 ]
  %converted.1 = phi i32 [ %converted.0, %land.lhs.true929 ], [ %converted.0, %land.lhs.true918 ], [ %converted.0, %if.end905 ], [ %converted.0, %if.end885 ], [ 1, %if.then938 ], [ 1, %if.then946 ]
  %result_type.4 = phi %union.tree_node* [ %result_type.3, %land.lhs.true929 ], [ %result_type.3, %land.lhs.true918 ], [ %result_type.3, %if.end905 ], [ %result_type.3, %if.end885 ], [ %call941, %if.then938 ], [ %call941, %if.then946 ]
  %op0.4 = phi %union.tree_node* [ %op0.2, %land.lhs.true929 ], [ %op0.2, %land.lhs.true918 ], [ %op0.2, %if.end905 ], [ %op0.2, %if.end885 ], [ %op0.2, %if.then938 ], [ %call947, %if.then946 ]
  br i1 %tobool703, label %if.end1248, label %if.then952

if.then952:                                       ; preds = %if.end950
  store %union.tree_node* %op0.4, %union.tree_node** %xop0, align 8, !tbaa !7
  store %union.tree_node* %op1.5, %union.tree_node** %xop1, align 8, !tbaa !7
  store %union.tree_node* %result_type.4, %union.tree_node** %xresult_type, align 8, !tbaa !7
  store i32 %resultcode.1, i32* %xresultcode, align 4, !tbaa !34
  %call953 = call %union.tree_node* @shorten_compare(%union.tree_node** %xop0, %union.tree_node** %xop1, %union.tree_node** %xresult_type, i32* %xresultcode) #6
  %cmp954 = icmp eq %union.tree_node* %call953, null
  br i1 %cmp954, label %if.end957, label %return

if.end957:                                        ; preds = %if.then952
  %157 = load %union.tree_node** %xop0, align 8, !tbaa !7
  %158 = load %union.tree_node** %xop1, align 8, !tbaa !7
  %159 = load i32* %xresultcode, align 4, !tbaa !34
  %160 = load i32* @warn_sign_compare, align 4, !tbaa !27
  %cmp958 = icmp slt i32 %160, 0
  br i1 %cmp958, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end957
  %161 = load i32* @extra_warnings, align 4, !tbaa !27
  %tobool960 = icmp ne i32 %161, 0
  %.old = load i32* @skip_evaluation, align 4
  %cmp964.old = icmp eq i32 %.old, 0
  %or.cond1356 = and i1 %tobool960, %cmp964.old
  br i1 %or.cond1356, label %if.then966, label %if.end1248

cond.false:                                       ; preds = %if.end957
  %cmp961 = icmp ne i32 %160, 0
  %162 = load i32* @skip_evaluation, align 4
  %cmp964 = icmp eq i32 %162, 0
  %or.cond1354 = and i1 %cmp961, %cmp964
  br i1 %or.cond1354, label %if.then966, label %if.end1248

if.then966:                                       ; preds = %cond.true, %cond.false
  %type968 = getelementptr inbounds %union.tree_node* %orig_op0, i64 0, i32 0, i32 0, i32 1
  %163 = load %union.tree_node** %type968, align 8, !tbaa !1
  %unsigned_flag970 = getelementptr inbounds %union.tree_node* %163, i64 0, i32 0, i32 0, i32 2
  %bf.load971 = load i32* %unsigned_flag970, align 8
  %bf.clear973 = and i32 %bf.load971, 8192
  %lnot975 = icmp eq i32 %bf.clear973, 0
  %bf.clear973.lobit = lshr exact i32 %bf.clear973, 13
  %type978 = getelementptr inbounds %union.tree_node* %orig_op1, i64 0, i32 0, i32 0, i32 1
  %164 = load %union.tree_node** %type978, align 8, !tbaa !1
  %unsigned_flag980 = getelementptr inbounds %union.tree_node* %164, i64 0, i32 0, i32 0, i32 2
  %bf.load981 = load i32* %unsigned_flag980, align 8
  %bf.clear983 = lshr i32 %bf.load981, 13
  %bf.clear983.lobit = and i32 %bf.clear983, 1
  %call987 = call %union.tree_node* @get_narrower(%union.tree_node* %157, i32* %unsignedp0) #6
  %call988 = call %union.tree_node* @get_narrower(%union.tree_node* %158, i32* %unsignedp1) #6
  store %union.tree_node* %orig_op0, %union.tree_node** %xop0, align 8, !tbaa !7
  store %union.tree_node* %orig_op1, %union.tree_node** %xop1, align 8, !tbaa !7
  %code9911741 = getelementptr inbounds %union.tree_node* %orig_op0, i64 0, i32 0, i32 0, i32 2
  %bf.load9921742 = load i32* %code9911741, align 8
  %bf.clear9931743 = and i32 %bf.load9921742, 255
  %bf.clear993.off1744 = add i32 %bf.clear9931743, -114
  %switch16761745 = icmp ult i32 %bf.clear993.off1744, 3
  br i1 %switch16761745, label %land.lhs.true1010.lr.ph, label %while.cond1033.preheader

land.lhs.true1010.lr.ph:                          ; preds = %if.then966
  %.pre1751 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %land.lhs.true1010

while.cond1033.preheader:                         ; preds = %while.body1028, %land.lhs.true1010, %land.rhs1016, %if.then966
  %xop0.val = phi %union.tree_node* [ %orig_op0, %if.then966 ], [ %166, %while.body1028 ], [ %165, %land.lhs.true1010 ], [ %165, %land.rhs1016 ]
  %code10351736 = getelementptr inbounds %union.tree_node* %orig_op1, i64 0, i32 0, i32 0, i32 2
  %bf.load10361737 = load i32* %code10351736, align 8
  %bf.clear10371738 = and i32 %bf.load10361737, 255
  %bf.clear1037.off1739 = add i32 %bf.clear10371738, -114
  %switch16771740 = icmp ult i32 %bf.clear1037.off1739, 3
  br i1 %switch16771740, label %land.lhs.true1054.lr.ph, label %while.end1076

land.lhs.true1054.lr.ph:                          ; preds = %while.cond1033.preheader
  %.pre = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %land.lhs.true1054

land.lhs.true1010:                                ; preds = %land.lhs.true1010.lr.ph, %while.body1028
  %165 = phi %union.tree_node* [ %orig_op0, %land.lhs.true1010.lr.ph ], [ %166, %while.body1028 ]
  %operands1012 = getelementptr inbounds %union.tree_node* %165, i64 0, i32 0, i32 2
  %arrayidx1013 = bitcast i32* %operands1012 to %union.tree_node**
  %166 = load %union.tree_node** %arrayidx1013, align 8, !tbaa !7
  %cmp1014 = icmp eq %union.tree_node* %166, %.pre1751
  br i1 %cmp1014, label %while.cond1033.preheader, label %land.rhs1016

land.rhs1016:                                     ; preds = %land.lhs.true1010
  %type1018 = getelementptr inbounds %union.tree_node* %165, i64 0, i32 0, i32 0, i32 1
  %167 = load %union.tree_node** %type1018, align 8, !tbaa !1
  %type1023 = getelementptr inbounds %union.tree_node* %166, i64 0, i32 0, i32 0, i32 1
  %168 = load %union.tree_node** %type1023, align 8, !tbaa !1
  %cmp1024 = icmp eq %union.tree_node* %167, %168
  br i1 %cmp1024, label %while.body1028, label %while.cond1033.preheader

while.body1028:                                   ; preds = %land.rhs1016
  store %union.tree_node* %166, %union.tree_node** %xop0, align 8, !tbaa !7
  %code991 = getelementptr inbounds %union.tree_node* %166, i64 0, i32 0, i32 0, i32 2
  %bf.load992 = load i32* %code991, align 8
  %bf.clear993 = and i32 %bf.load992, 255
  %bf.clear993.off = add i32 %bf.clear993, -114
  %switch1676 = icmp ult i32 %bf.clear993.off, 3
  br i1 %switch1676, label %land.lhs.true1010, label %while.cond1033.preheader

land.lhs.true1054:                                ; preds = %land.lhs.true1054.lr.ph, %while.body1072
  %169 = phi %union.tree_node* [ %orig_op1, %land.lhs.true1054.lr.ph ], [ %170, %while.body1072 ]
  %operands1056 = getelementptr inbounds %union.tree_node* %169, i64 0, i32 0, i32 2
  %arrayidx1057 = bitcast i32* %operands1056 to %union.tree_node**
  %170 = load %union.tree_node** %arrayidx1057, align 8, !tbaa !7
  %cmp1058 = icmp eq %union.tree_node* %170, %.pre
  br i1 %cmp1058, label %while.end1076, label %land.rhs1060

land.rhs1060:                                     ; preds = %land.lhs.true1054
  %type1062 = getelementptr inbounds %union.tree_node* %169, i64 0, i32 0, i32 0, i32 1
  %171 = load %union.tree_node** %type1062, align 8, !tbaa !1
  %type1067 = getelementptr inbounds %union.tree_node* %170, i64 0, i32 0, i32 0, i32 1
  %172 = load %union.tree_node** %type1067, align 8, !tbaa !1
  %cmp1068 = icmp eq %union.tree_node* %171, %172
  br i1 %cmp1068, label %while.body1072, label %while.end1076

while.body1072:                                   ; preds = %land.rhs1060
  store %union.tree_node* %170, %union.tree_node** %xop1, align 8, !tbaa !7
  %code1035 = getelementptr inbounds %union.tree_node* %170, i64 0, i32 0, i32 0, i32 2
  %bf.load1036 = load i32* %code1035, align 8
  %bf.clear1037 = and i32 %bf.load1036, 255
  %bf.clear1037.off = add i32 %bf.clear1037, -114
  %switch1677 = icmp ult i32 %bf.clear1037.off, 3
  br i1 %switch1677, label %land.lhs.true1054, label %while.end1076

while.end1076:                                    ; preds = %land.rhs1060, %land.lhs.true1054, %while.body1072, %while.cond1033.preheader
  %xop1.val = phi %union.tree_node* [ %orig_op1, %while.cond1033.preheader ], [ %169, %land.rhs1060 ], [ %169, %land.lhs.true1054 ], [ %170, %while.body1072 ]
  %unsigned_flag1078 = getelementptr inbounds %union.tree_node* %result_type.4, i64 0, i32 0, i32 0, i32 2
  %bf.load1079 = load i32* %unsigned_flag1078, align 8
  %bf.clear1081 = and i32 %bf.load1079, 8192
  %tobool1082 = icmp eq i32 %bf.clear1081, 0
  %cmp1085 = icmp eq i32 %bf.clear973.lobit, %bf.clear983.lobit
  %or.cond1671 = or i1 %tobool1082, %cmp1085
  br i1 %or.cond1671, label %if.end1143, label %if.else1088

if.else1088:                                      ; preds = %while.end1076
  %uop.0 = select i1 %lnot975, %union.tree_node* %xop1.val, %union.tree_node* %xop0.val
  %sop.0 = select i1 %lnot975, %union.tree_node* %xop0.val, %union.tree_node* %xop1.val
  %call1093 = call i32 @tree_expr_nonnegative_p(%union.tree_node* %sop.0) #6
  %tobool1094 = icmp eq i32 %call1093, 0
  br i1 %tobool1094, label %if.else1096, label %if.end1143

if.else1096:                                      ; preds = %if.else1088
  %code1098 = getelementptr inbounds %union.tree_node* %uop.0, i64 0, i32 0, i32 0, i32 2
  %bf.load1099 = load i32* %code1098, align 8
  %bf.clear1100 = and i32 %bf.load1099, 255
  %cmp1101 = icmp eq i32 %bf.clear1100, 25
  %.off = add i32 %159, -101
  %173 = icmp ult i32 %.off, 2
  %or.cond1674 = and i1 %cmp1101, %173
  br i1 %or.cond1674, label %land.lhs.true1109, label %if.else1114

land.lhs.true1109:                                ; preds = %if.else1096
  %call1110 = call %union.tree_node* @signed_type(%union.tree_node* %result_type.4) #6
  %call1111 = call i32 @int_fits_type_p(%union.tree_node* %uop.0, %union.tree_node* %call1110) #6
  %tobool1112 = icmp eq i32 %call1111, 0
  br i1 %tobool1112, label %land.lhs.true1109.if.else1114_crit_edge, label %if.end1143

land.lhs.true1109.if.else1114_crit_edge:          ; preds = %land.lhs.true1109
  %bf.load1117.pre = load i32* %code1098, align 8
  br label %if.else1114

if.else1114:                                      ; preds = %land.lhs.true1109.if.else1114_crit_edge, %if.else1096
  %bf.load1117 = phi i32 [ %bf.load1117.pre, %land.lhs.true1109.if.else1114_crit_edge ], [ %bf.load1099, %if.else1096 ]
  %bf.clear1118 = and i32 %bf.load1117, 255
  %cmp1119 = icmp eq i32 %bf.clear1118, 25
  br i1 %cmp1119, label %land.lhs.true1121, label %if.else1138

land.lhs.true1121:                                ; preds = %if.else1114
  %type1123 = getelementptr inbounds %union.tree_node* %uop.0, i64 0, i32 0, i32 0, i32 1
  %174 = load %union.tree_node** %type1123, align 8, !tbaa !1
  %code1125 = getelementptr inbounds %union.tree_node* %174, i64 0, i32 0, i32 0, i32 2
  %bf.load1126 = load i32* %code1125, align 8
  %bf.clear1127 = and i32 %bf.load1126, 255
  %cmp1128 = icmp eq i32 %bf.clear1127, 10
  br i1 %cmp1128, label %land.lhs.true1130, label %if.else1138

land.lhs.true1130:                                ; preds = %land.lhs.true1121
  %175 = getelementptr inbounds %union.tree_node* %174, i64 0, i32 0, i32 13
  %176 = load %union.tree_node** %175, align 8, !tbaa !16
  %call1134 = call %union.tree_node* @signed_type(%union.tree_node* %result_type.4) #6
  %call1135 = call i32 @int_fits_type_p(%union.tree_node* %176, %union.tree_node* %call1134) #6
  %tobool1136 = icmp eq i32 %call1135, 0
  br i1 %tobool1136, label %if.else1138, label %if.end1143

if.else1138:                                      ; preds = %land.lhs.true1130, %land.lhs.true1121, %if.else1114
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([39 x i8]* @.str60, i64 0, i64 0)) #6
  br label %if.end1143

if.end1143:                                       ; preds = %land.lhs.true1109, %land.lhs.true1130, %if.else1088, %while.end1076, %if.else1138
  %code1145 = getelementptr inbounds %union.tree_node* %call987, i64 0, i32 0, i32 0, i32 2
  %bf.load1146 = load i32* %code1145, align 8
  %bf.clear1147 = and i32 %bf.load1146, 255
  %cmp1148 = icmp eq i32 %bf.clear1147, 90
  %code1151 = getelementptr inbounds %union.tree_node* %call988, i64 0, i32 0, i32 0, i32 2
  %bf.load1152 = load i32* %code1151, align 8
  %bf.clear1153 = and i32 %bf.load1152, 255
  %cmp1154 = icmp eq i32 %bf.clear1153, 90
  %cmp1156 = xor i1 %cmp1148, %cmp1154
  br i1 %cmp1156, label %if.then1158, label %if.end1248

if.then1158:                                      ; preds = %if.end1143
  br i1 %cmp1148, label %if.then1165, label %if.else1170

if.then1165:                                      ; preds = %if.then1158
  %operands1167 = getelementptr inbounds %union.tree_node* %call987, i64 0, i32 0, i32 2
  %arrayidx1168 = bitcast i32* %operands1167 to %union.tree_node**
  %177 = load %union.tree_node** %arrayidx1168, align 8, !tbaa !7
  %call1169 = call %union.tree_node* @get_narrower(%union.tree_node* %177, i32* %unsignedp0) #6
  br label %if.end1175

if.else1170:                                      ; preds = %if.then1158
  %operands1172 = getelementptr inbounds %union.tree_node* %call988, i64 0, i32 0, i32 2
  %arrayidx1173 = bitcast i32* %operands1172 to %union.tree_node**
  %178 = load %union.tree_node** %arrayidx1173, align 8, !tbaa !7
  %call1174 = call %union.tree_node* @get_narrower(%union.tree_node* %178, i32* %unsignedp1) #6
  br label %if.end1175

if.end1175:                                       ; preds = %if.else1170, %if.then1165
  %primop0.0 = phi %union.tree_node* [ %call1169, %if.then1165 ], [ %call987, %if.else1170 ]
  %primop1.0 = phi %union.tree_node* [ %call988, %if.then1165 ], [ %call1174, %if.else1170 ]
  %call1176 = call i32 @host_integerp(%union.tree_node* %primop0.0, i32 0) #6
  %tobool1177 = icmp eq i32 %call1176, 0
  br i1 %tobool1177, label %lor.lhs.false1178, label %if.then1181

lor.lhs.false1178:                                ; preds = %if.end1175
  %call1179 = call i32 @host_integerp(%union.tree_node* %primop1.0, i32 0) #6
  %tobool1180 = icmp eq i32 %call1179, 0
  br i1 %tobool1180, label %if.else1212, label %if.then1181

if.then1181:                                      ; preds = %lor.lhs.false1178, %if.end1175
  %call1182 = call i32 @host_integerp(%union.tree_node* %primop0.0, i32 0) #6
  %tobool1183 = icmp eq i32 %call1182, 0
  br i1 %tobool1183, label %if.else1186, label %if.then1184

if.then1184:                                      ; preds = %if.then1181
  %179 = load i32* %unsignedp1, align 4, !tbaa !27
  %call1185 = call i64 @tree_low_cst(%union.tree_node* %primop0.0, i32 0) #6
  br label %if.end1188

if.else1186:                                      ; preds = %if.then1181
  %180 = load i32* %unsignedp0, align 4, !tbaa !27
  %call1187 = call i64 @tree_low_cst(%union.tree_node* %primop1.0, i32 0) #6
  br label %if.end1188

if.end1188:                                       ; preds = %if.else1186, %if.then1184
  %primop.0 = phi %union.tree_node* [ %primop1.0, %if.then1184 ], [ %primop0.0, %if.else1186 ]
  %constant.0 = phi i64 [ %call1185, %if.then1184 ], [ %call1187, %if.else1186 ]
  %unsignedp.0 = phi i32 [ %179, %if.then1184 ], [ %180, %if.else1186 ]
  %type1190 = getelementptr inbounds %union.tree_node* %primop.0, i64 0, i32 0, i32 0, i32 1
  %181 = load %union.tree_node** %type1190, align 8, !tbaa !1
  %type1191 = bitcast %union.tree_node* %181 to %struct.tree_type*
  %precision1192 = getelementptr inbounds %struct.tree_type* %type1191, i64 0, i32 6
  %bf.load1193 = load i32* %precision1192, align 4
  %bf.clear1194 = and i32 %bf.load1193, 511
  %type1195 = bitcast %union.tree_node* %result_type.4 to %struct.tree_type*
  %precision1196 = getelementptr inbounds %struct.tree_type* %type1195, i64 0, i32 6
  %bf.load1197 = load i32* %precision1196, align 4
  %bf.clear1198 = and i32 %bf.load1197, 511
  %cmp1199 = icmp ult i32 %bf.clear1194, %bf.clear1198
  %cmp1202 = icmp ult i32 %bf.clear1194, 64
  %or.cond1362 = and i1 %cmp1199, %cmp1202
  %tobool1205 = icmp ne i32 %unsignedp.0, 0
  %or.cond1364 = and i1 %or.cond1362, %tobool1205
  br i1 %or.cond1364, label %if.then1206, label %if.end1248

if.then1206:                                      ; preds = %if.end1188
  %sh_prom = zext i32 %bf.clear1194 to i64
  %shl = shl i64 -1, %sh_prom
  %and = and i64 %shl, %constant.0
  %cmp1207 = icmp eq i64 %and, %shl
  br i1 %cmp1207, label %if.end1248, label %if.then1209

if.then1209:                                      ; preds = %if.then1206
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([47 x i8]* @.str61, i64 0, i64 0)) #6
  br label %if.end1248

if.else1212:                                      ; preds = %lor.lhs.false1178
  %182 = load i32* %unsignedp0, align 4, !tbaa !27
  %tobool1213 = icmp ne i32 %182, 0
  %183 = load i32* %unsignedp1, align 4
  %tobool1215 = icmp ne i32 %183, 0
  %or.cond1366 = and i1 %tobool1213, %tobool1215
  br i1 %or.cond1366, label %land.lhs.true1216, label %if.end1248

land.lhs.true1216:                                ; preds = %if.else1212
  %type1218 = getelementptr inbounds %union.tree_node* %primop0.0, i64 0, i32 0, i32 0, i32 1
  %184 = load %union.tree_node** %type1218, align 8, !tbaa !1
  %type1219 = bitcast %union.tree_node* %184 to %struct.tree_type*
  %precision1220 = getelementptr inbounds %struct.tree_type* %type1219, i64 0, i32 6
  %bf.load1221 = load i32* %precision1220, align 4
  %bf.clear1222 = and i32 %bf.load1221, 511
  %type1223 = bitcast %union.tree_node* %result_type.4 to %struct.tree_type*
  %precision1224 = getelementptr inbounds %struct.tree_type* %type1223, i64 0, i32 6
  %bf.load1225 = load i32* %precision1224, align 4
  %bf.clear1226 = and i32 %bf.load1225, 511
  %cmp1227 = icmp ult i32 %bf.clear1222, %bf.clear1226
  br i1 %cmp1227, label %land.lhs.true1229, label %if.end1248

land.lhs.true1229:                                ; preds = %land.lhs.true1216
  %type1231 = getelementptr inbounds %union.tree_node* %primop1.0, i64 0, i32 0, i32 0, i32 1
  %185 = load %union.tree_node** %type1231, align 8, !tbaa !1
  %type1232 = bitcast %union.tree_node* %185 to %struct.tree_type*
  %precision1233 = getelementptr inbounds %struct.tree_type* %type1232, i64 0, i32 6
  %bf.load1234 = load i32* %precision1233, align 4
  %bf.clear1235 = and i32 %bf.load1234, 511
  %cmp1240 = icmp ult i32 %bf.clear1235, %bf.clear1226
  br i1 %cmp1240, label %if.then1242, label %if.end1248

if.then1242:                                      ; preds = %land.lhs.true1229
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([47 x i8]* @.str62, i64 0, i64 0)) #6
  br label %if.end1248

if.end1248:                                       ; preds = %if.then1206, %if.end950, %if.end1143, %if.else1212, %land.lhs.true1216, %land.lhs.true1229, %if.then1242, %if.end1188, %if.then1209, %cond.false, %cond.true, %land.lhs.true683, %sw.epilog
  %final_type.2 = phi %union.tree_node* [ %final_type.1, %if.then1209 ], [ %final_type.1, %if.then1206 ], [ %final_type.1, %if.end1188 ], [ %final_type.1, %if.then1242 ], [ %final_type.1, %land.lhs.true1229 ], [ %final_type.1, %land.lhs.true1216 ], [ %final_type.1, %if.else1212 ], [ %final_type.1, %if.end1143 ], [ %final_type.1, %cond.true ], [ %final_type.1, %cond.false ], [ %final_type.1, %if.end950 ], [ null, %land.lhs.true683 ], [ null, %sw.epilog ]
  %converted.2 = phi i32 [ 1, %if.then1209 ], [ 1, %if.then1206 ], [ 1, %if.end1188 ], [ 1, %if.then1242 ], [ 1, %land.lhs.true1229 ], [ 1, %land.lhs.true1216 ], [ 1, %if.else1212 ], [ 1, %if.end1143 ], [ 1, %cond.true ], [ 1, %cond.false ], [ %converted.1, %if.end950 ], [ %converted.0, %land.lhs.true683 ], [ %converted.0, %sw.epilog ]
  %result_type.5 = phi %union.tree_node* [ %result_type.4, %if.then1209 ], [ %result_type.4, %if.then1206 ], [ %result_type.4, %if.end1188 ], [ %result_type.4, %if.then1242 ], [ %result_type.4, %land.lhs.true1229 ], [ %result_type.4, %land.lhs.true1216 ], [ %result_type.4, %if.else1212 ], [ %result_type.4, %if.end1143 ], [ %result_type.4, %cond.true ], [ %result_type.4, %cond.false ], [ %result_type.4, %if.end950 ], [ %result_type.1, %land.lhs.true683 ], [ %result_type.1, %sw.epilog ]
  %resultcode.2 = phi i32 [ %159, %if.then1209 ], [ %159, %if.then1206 ], [ %159, %if.end1188 ], [ %159, %if.then1242 ], [ %159, %land.lhs.true1229 ], [ %159, %land.lhs.true1216 ], [ %159, %if.else1212 ], [ %159, %if.end1143 ], [ %159, %cond.true ], [ %159, %cond.false ], [ %resultcode.1, %if.end950 ], [ %resultcode.1, %land.lhs.true683 ], [ %resultcode.1, %sw.epilog ]
  %op1.6 = phi %union.tree_node* [ %158, %if.then1209 ], [ %158, %if.then1206 ], [ %158, %if.end1188 ], [ %158, %if.then1242 ], [ %158, %land.lhs.true1229 ], [ %158, %land.lhs.true1216 ], [ %158, %if.else1212 ], [ %158, %if.end1143 ], [ %158, %cond.true ], [ %158, %cond.false ], [ %op1.5, %if.end950 ], [ %op1.5, %land.lhs.true683 ], [ %op1.5, %sw.epilog ]
  %op0.5 = phi %union.tree_node* [ %157, %if.then1209 ], [ %157, %if.then1206 ], [ %157, %if.end1188 ], [ %157, %if.then1242 ], [ %157, %land.lhs.true1229 ], [ %157, %land.lhs.true1216 ], [ %157, %if.else1212 ], [ %157, %if.end1143 ], [ %157, %cond.true ], [ %157, %cond.false ], [ %op0.4, %if.end950 ], [ %op0.2, %land.lhs.true683 ], [ %op0.2, %sw.epilog ]
  %tobool1249 = icmp eq %union.tree_node* %result_type.5, null
  br i1 %tobool1249, label %if.then1250, label %if.end1251

if.then1250:                                      ; preds = %if.end1248
  call void @binary_op_error(i32 %code) #6
  %186 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end1251:                                       ; preds = %if.end1248
  %tobool1252 = icmp eq i32 %converted.2, 0
  br i1 %tobool1252, label %if.then1253, label %if.end1268

if.then1253:                                      ; preds = %if.end1251
  %type1255 = getelementptr inbounds %union.tree_node* %op0.5, i64 0, i32 0, i32 0, i32 1
  %187 = load %union.tree_node** %type1255, align 8, !tbaa !1
  %cmp1256 = icmp eq %union.tree_node* %187, %result_type.5
  br i1 %cmp1256, label %if.end1260, label %if.then1258

if.then1258:                                      ; preds = %if.then1253
  %call1259 = call %union.tree_node* @convert(%union.tree_node* %result_type.5, %union.tree_node* %op0.5) #6
  br label %if.end1260

if.end1260:                                       ; preds = %if.then1253, %if.then1258
  %op0.6 = phi %union.tree_node* [ %call1259, %if.then1258 ], [ %op0.5, %if.then1253 ]
  %type1262 = getelementptr inbounds %union.tree_node* %op1.6, i64 0, i32 0, i32 0, i32 1
  %188 = load %union.tree_node** %type1262, align 8, !tbaa !1
  %cmp1263 = icmp eq %union.tree_node* %188, %result_type.5
  br i1 %cmp1263, label %if.end1268, label %if.then1265

if.then1265:                                      ; preds = %if.end1260
  %call1266 = call %union.tree_node* @convert(%union.tree_node* %result_type.5, %union.tree_node* %op1.6) #6
  br label %if.end1268

if.end1268:                                       ; preds = %if.end1260, %if.end1251, %if.then1265
  %op1.7 = phi %union.tree_node* [ %op1.6, %if.end1251 ], [ %call1266, %if.then1265 ], [ %op1.6, %if.end1260 ]
  %op0.7 = phi %union.tree_node* [ %op0.5, %if.end1251 ], [ %op0.6, %if.then1265 ], [ %op0.6, %if.end1260 ]
  %cmp1269 = icmp eq %union.tree_node* %build_type.0, null
  %result_type.5.build_type.0 = select i1 %cmp1269, %union.tree_node* %result_type.5, %union.tree_node* %build_type.0
  %call1273 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %resultcode.2, %union.tree_node* %result_type.5.build_type.0, %union.tree_node* %op0.7, %union.tree_node* %op1.7) #6
  %call1274 = call %union.tree_node* @fold(%union.tree_node* %call1273) #6
  %cmp1275 = icmp eq %union.tree_node* %call1274, %call1273
  br i1 %cmp1275, label %if.then1277, label %if.end1292

if.then1277:                                      ; preds = %if.end1268
  %constant_flag = getelementptr inbounds %union.tree_node* %op0.7, i64 0, i32 0, i32 0, i32 2
  %bf.load1279 = load i32* %constant_flag, align 8
  %constant_flag1283 = getelementptr inbounds %union.tree_node* %op1.7, i64 0, i32 0, i32 0, i32 2
  %bf.load1284 = load i32* %constant_flag1283, align 8
  %constant_flag1289 = getelementptr inbounds %union.tree_node* %call1273, i64 0, i32 0, i32 0, i32 2
  %bf.load1290 = load i32* %constant_flag1289, align 8
  %bf.load1284.mask = and i32 %bf.load1279, 512
  %bf.shl = and i32 %bf.load1284.mask, %bf.load1284
  %bf.clear1291 = and i32 %bf.load1290, -513
  %bf.set = or i32 %bf.clear1291, %bf.shl
  store i32 %bf.set, i32* %constant_flag1289, align 8
  br label %if.end1292

if.end1292:                                       ; preds = %if.then1277, %if.end1268
  %cmp1293 = icmp eq %union.tree_node* %final_type.2, null
  br i1 %cmp1293, label %return, label %if.then1295

if.then1295:                                      ; preds = %if.end1292
  %call1296 = call %union.tree_node* @convert(%union.tree_node* %final_type.2, %union.tree_node* %call1274) #6
  br label %return

return:                                           ; preds = %while.end75, %if.then87.i, %c_size_in_bytes.exit.i, %if.end1292, %if.then952, %if.then1295, %if.then1250, %if.then673, %if.then108, %if.then90, %if.then84
  %retval.0 = phi %union.tree_node* [ %call1296, %if.then1295 ], [ %186, %if.then1250 ], [ %130, %if.then673 ], [ %call109, %if.then108 ], [ %call85, %if.then84 ], [ %call91, %if.then90 ], [ %call953, %if.then952 ], [ %call1274, %if.end1292 ], [ %call85.i, %c_size_in_bytes.exit.i ], [ %call84.i, %if.then87.i ], [ %2, %while.end75 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_external_ref(%union.tree_node* %id, i32 %fun) #0 {
entry:
  %call = tail call %union.tree_node* @lookup_name(%union.tree_node* %id) #6
  %call1 = tail call %union.tree_node* @lookup_objc_ivar(%union.tree_node* %id) #6
  %tobool = icmp ne %union.tree_node* %call, null
  br i1 %tobool, label %land.lhs.true, label %if.then10

land.lhs.true:                                    ; preds = %entry
  %deprecated_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %deprecated_flag, align 8
  %bf.clear = and i32 %bf.load, 8388608
  %tobool2 = icmp eq i32 %bf.clear, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @warn_deprecated_use(%union.tree_node* %call) #6
  br label %if.end

if.end:                                           ; preds = %land.lhs.true, %if.then
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp = icmp eq %union.tree_node* %call, %0
  br i1 %cmp, label %if.then10, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.end
  %lang_flag_3 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 5
  %1 = bitcast i48* %lang_flag_3 to i64*
  %bf.load6 = load i64* %1, align 8
  %bf.cast = and i64 %bf.load6, 1099511627776
  %tobool9 = icmp eq i64 %bf.cast, 0
  br i1 %tobool9, label %if.else47, label %if.then10

if.then10:                                        ; preds = %entry, %if.end, %lor.lhs.false4
  %tobool11 = icmp eq %union.tree_node* %call1, null
  br i1 %tobool11, label %if.else, label %if.end61

if.else:                                          ; preds = %if.then10
  %tobool13 = icmp eq i32 %fun, 0
  br i1 %tobool13, label %if.else26, label %if.then14

if.then14:                                        ; preds = %if.else
  %tobool.not111 = xor i1 %tobool, true
  %2 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp17 = icmp eq %union.tree_node* %call, %2
  %or.cond112 = or i1 %cmp17, %tobool.not111
  br i1 %or.cond112, label %if.then18, label %if.else20

if.then18:                                        ; preds = %if.then14
  %call19 = tail call %union.tree_node* @implicitly_declare(%union.tree_node* %id) #6
  br label %if.end61

if.else20:                                        ; preds = %if.then14
  tail call void @implicit_decl_warning(%union.tree_node* %id) #6
  %lang_flag_322 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 5
  %3 = bitcast i48* %lang_flag_322 to i64*
  %bf.load23 = load i64* %3, align 8
  %bf.clear24 = and i64 %bf.load23, -1099511627777
  store i64 %bf.clear24, i64* %3, align 8
  br label %if.end61

if.else26:                                        ; preds = %if.else
  %4 = load %union.tree_node** @current_function_decl, align 8, !tbaa !7
  %cmp27 = icmp eq %union.tree_node* %4, null
  br i1 %cmp27, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.else26
  %id29 = getelementptr inbounds %union.tree_node* %id, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds i8** %id29, i64 1
  %6 = load i8** %5, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([41 x i8]* @.str30, i64 0, i64 0), i8* %6) #6
  br label %if.end44

if.else30:                                        ; preds = %if.else26
  %global_value = getelementptr inbounds %union.tree_node* %id, i64 0, i32 0, i32 6
  %7 = bitcast %union.anon* %global_value to %union.tree_node**
  %8 = load %union.tree_node** %7, align 8, !tbaa !42
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp31 = icmp eq %union.tree_node* %8, %9
  br i1 %cmp31, label %lor.lhs.false32, label %if.then34

lor.lhs.false32:                                  ; preds = %if.else30
  %10 = getelementptr inbounds %union.tree_node* %id, i64 0, i32 0, i32 10
  %11 = load %union.tree_node** %10, align 8, !tbaa !47
  %cmp33 = icmp eq %union.tree_node* %11, %4
  br i1 %cmp33, label %if.end41, label %if.then34

if.then34:                                        ; preds = %lor.lhs.false32, %if.else30
  %id36 = getelementptr inbounds %union.tree_node* %id, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds i8** %id36, i64 1
  %13 = load i8** %12, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([45 x i8]* @.str31, i64 0, i64 0), i8* %13) #6
  %.b = load i1* @undeclared_variable_notice, align 1
  br i1 %.b, label %if.end41, label %if.then39

if.then39:                                        ; preds = %if.then34
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([50 x i8]* @.str32, i64 0, i64 0)) #6
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([34 x i8]* @.str33, i64 0, i64 0)) #6
  store i1 true, i1* @undeclared_variable_notice, align 1
  br label %if.end41

if.end41:                                         ; preds = %lor.lhs.false32, %if.then34, %if.then39
  %14 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %15 = getelementptr inbounds %union.anon* %global_value, i64 0, i32 0
  %.c = ptrtoint %union.tree_node* %14 to i64
  store i64 %.c, i64* %15, align 8, !tbaa !42
  %16 = load %union.tree_node** @current_function_decl, align 8, !tbaa !7
  %17 = getelementptr inbounds %union.tree_node* %id, i64 0, i32 0, i32 10
  store %union.tree_node* %16, %union.tree_node** %17, align 8, !tbaa !47
  br label %if.end44

if.end44:                                         ; preds = %if.end41, %if.then28
  %18 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.else47:                                        ; preds = %lor.lhs.false4
  %tobool48 = icmp eq %union.tree_node* %call1, null
  %cmp51 = icmp eq %union.tree_node* %call, %call1
  %or.cond = or i1 %tobool48, %cmp51
  br i1 %or.cond, label %if.end61, label %land.lhs.true52

land.lhs.true52:                                  ; preds = %if.else47
  %19 = getelementptr inbounds %union.tree_node* %id, i64 0, i32 0, i32 7
  %20 = load %union.tree_node** %19, align 8, !tbaa !48
  %tobool53 = icmp eq %union.tree_node* %20, null
  br i1 %tobool53, label %if.end61, label %if.then54

if.then54:                                        ; preds = %land.lhs.true52
  %id56 = getelementptr inbounds %union.tree_node* %id, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds i8** %id56, i64 1
  %22 = load i8** %21, align 8, !tbaa !13
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([50 x i8]* @.str34, i64 0, i64 0), i8* %22) #6
  br label %if.end61

if.end61:                                         ; preds = %land.lhs.true52, %if.else47, %if.then10, %if.then54, %if.then18, %if.else20
  %ref.0 = phi %union.tree_node* [ %call19, %if.then18 ], [ %call, %if.else20 ], [ %call, %if.then54 ], [ %call1, %if.then10 ], [ %call, %if.else47 ], [ %call1, %land.lhs.true52 ]
  %type = getelementptr inbounds %union.tree_node* %ref.0, i64 0, i32 0, i32 0, i32 1
  %23 = load %union.tree_node** %type, align 8, !tbaa !1
  %24 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp63 = icmp eq %union.tree_node* %23, %24
  br i1 %cmp63, label %return, label %if.end65

if.end65:                                         ; preds = %if.end61
  tail call void @assemble_external(%union.tree_node* %ref.0) #6
  %used_flag = getelementptr inbounds %union.tree_node* %ref.0, i64 0, i32 0, i32 0, i32 2
  %bf.load67 = load i32* %used_flag, align 8
  %bf.set = or i32 %bf.load67, 65536
  store i32 %bf.set, i32* %used_flag, align 8
  %bf.clear71 = and i32 %bf.load67, 255
  %cmp72 = icmp eq i32 %bf.clear71, 32
  br i1 %cmp72, label %if.then73, label %return

if.then73:                                        ; preds = %if.end65
  %initial = getelementptr inbounds %union.tree_node* %ref.0, i64 0, i32 0, i32 12
  %25 = load %union.tree_node** %initial, align 8, !tbaa !33
  %constant_flag = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 2
  %bf.load76 = load i32* %constant_flag, align 8
  %bf.set78 = or i32 %bf.load76, 512
  store i32 %bf.set78, i32* %constant_flag, align 8
  br label %return

return:                                           ; preds = %if.end65, %if.then73, %if.end61, %if.end44
  %retval.0 = phi %union.tree_node* [ %18, %if.end44 ], [ %23, %if.end61 ], [ %25, %if.then73 ], [ %ref.0, %if.end65 ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @lookup_name(%union.tree_node*) #1

declare %union.tree_node* @lookup_objc_ivar(%union.tree_node*) #1

declare %union.tree_node* @implicitly_declare(%union.tree_node*) #1

declare void @implicit_decl_warning(%union.tree_node*) #1

declare void @assemble_external(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_function_call(%union.tree_node* %function, %union.tree_node* %params) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %function.addr.0 = phi %union.tree_node* [ %function, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %function.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %function.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %if.else, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %function.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !1
  %type18 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type18, align 8, !tbaa !1
  %cmp19 = icmp eq %union.tree_node* %2, %3
  br i1 %cmp19, label %while.cond, label %if.else

while.end:                                        ; preds = %while.cond
  %cmp27 = icmp eq i32 %bf.clear, 30
  br i1 %cmp27, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %name28 = getelementptr inbounds %union.tree_node* %function.addr.0, i64 0, i32 0, i32 8
  %4 = load %union.tree_node** %name28, align 8, !tbaa !11
  %assembler_name30 = getelementptr inbounds %union.tree_node* %function.addr.0, i64 0, i32 0, i32 14
  %5 = load %union.tree_node** %assembler_name30, align 8, !tbaa !49
  %cmp31 = icmp eq %union.tree_node* %5, null
  br i1 %cmp31, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.then
  %6 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !7
  tail call void %6(%union.tree_node* %function.addr.0) #6
  %bf.load37.pre = load i32* %code, align 8
  br label %cond.end

cond.end:                                         ; preds = %if.then, %cond.false
  %bf.load37 = phi i32 [ %bf.load, %if.then ], [ %bf.load37.pre, %cond.false ]
  %type35 = getelementptr inbounds %union.tree_node* %function.addr.0, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type35, align 8, !tbaa !1
  %bf.clear38 = lshr i32 %bf.load37, 12
  %bf.clear38.lobit = and i32 %bf.clear38, 1
  %bf.clear42 = lshr i32 %bf.load37, 10
  %8 = and i32 %bf.clear42, 2
  %or = or i32 %bf.clear38.lobit, %8
  %call = tail call %union.tree_node* @build_qualified_type(%union.tree_node* %7, i32 %or) #6
  %call45 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %call) #6
  %call46 = tail call %union.tree_node* @build1(i32 121, %union.tree_node* %call45, %union.tree_node* %function.addr.0) #6
  br label %if.end

if.else:                                          ; preds = %land.rhs, %land.lhs.true, %while.end
  %call47 = tail call %union.tree_node* @default_conversion(%union.tree_node* %function.addr.0)
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %function.addr.1 = phi %union.tree_node* [ %call46, %cond.end ], [ %call47, %if.else ]
  %fundecl.0 = phi %union.tree_node* [ %function.addr.0, %cond.end ], [ null, %if.else ]
  %name.0 = phi %union.tree_node* [ %4, %cond.end ], [ null, %if.else ]
  %type49 = getelementptr inbounds %union.tree_node* %function.addr.1, i64 0, i32 0, i32 0, i32 1
  %9 = load %union.tree_node** %type49, align 8, !tbaa !1
  %code51 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 2
  %bf.load52 = load i32* %code51, align 8
  %bf.clear53 = and i32 %bf.load52, 255
  switch i32 %bf.clear53, label %if.then70 [
    i32 0, label %if.then55
    i32 13, label %land.lhs.true62
  ]

if.then55:                                        ; preds = %if.end
  %10 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

land.lhs.true62:                                  ; preds = %if.end
  %type64 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type64, align 8, !tbaa !1
  %code66 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 2
  %bf.load67 = load i32* %code66, align 8
  %bf.clear68 = and i32 %bf.load67, 255
  %cmp69 = icmp eq i32 %bf.clear68, 23
  br i1 %cmp69, label %if.end71, label %if.then70

if.then70:                                        ; preds = %if.end, %land.lhs.true62
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([32 x i8]* @.str35, i64 0, i64 0)) #6
  %12 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end71:                                         ; preds = %land.lhs.true62
  %tobool72 = icmp eq %union.tree_node* %fundecl.0, null
  br i1 %tobool72, label %if.end81, label %land.lhs.true73

land.lhs.true73:                                  ; preds = %if.end71
  %volatile_flag75 = getelementptr inbounds %union.tree_node* %fundecl.0, i64 0, i32 0, i32 0, i32 2
  %bf.load76 = load i32* %volatile_flag75, align 8
  %bf.clear78 = and i32 %bf.load76, 2048
  %tobool79 = icmp eq i32 %bf.clear78, 0
  br i1 %tobool79, label %if.end81, label %if.then80

if.then80:                                        ; preds = %land.lhs.true73
  store i32 1, i32* @current_function_returns_abnormally, align 4, !tbaa !27
  br label %if.end81

if.end81:                                         ; preds = %land.lhs.true73, %if.end71, %if.then80
  %values = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 1
  %13 = load i8** %values, align 8
  %14 = bitcast i8* %13 to %union.tree_node*
  %tobool608.i = icmp eq %union.tree_node* %params, null
  br i1 %tobool608.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %if.end81, %for.inc.i
  %typetail.0617.i = phi %union.tree_node* [ %typetail.1.i, %for.inc.i ], [ %14, %if.end81 ]
  %valtail.0616.i = phi %union.tree_node* [ %53, %for.inc.i ], [ %params, %if.end81 ]
  %result.0615.i = phi %union.tree_node* [ %result.1.i, %for.inc.i ], [ null, %if.end81 ]
  %parmnum.0609.i = phi i32 [ %phitmp.i, %for.inc.i ], [ 1, %if.end81 ]
  %tobool1.i = icmp ne %union.tree_node* %typetail.0617.i, null
  br i1 %tobool1.i, label %cond.true.i, label %cond.end.i

cond.true.i:                                      ; preds = %for.body.i
  %value.i = getelementptr inbounds %union.tree_node* %typetail.0617.i, i64 0, i32 0, i32 2
  %15 = bitcast i32* %value.i to %union.tree_node**
  %16 = load %union.tree_node** %15, align 8, !tbaa !25
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %for.body.i
  %cond.i = phi %union.tree_node* [ %16, %cond.true.i ], [ null, %for.body.i ]
  %value3.i = getelementptr inbounds %union.tree_node* %valtail.0616.i, i64 0, i32 0, i32 2
  %17 = bitcast i32* %value3.i to %union.tree_node**
  %18 = load %union.tree_node** %17, align 8, !tbaa !25
  %19 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !7
  %cmp.i = icmp eq %union.tree_node* %cond.i, %19
  br i1 %cmp.i, label %if.then.i, label %if.end6.i

if.then.i:                                        ; preds = %cond.end.i
  %tobool4.i = icmp eq %union.tree_node* %name.0, null
  br i1 %tobool4.i, label %if.else.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  %id.i = getelementptr inbounds %union.tree_node* %name.0, i64 0, i32 0, i32 1
  %20 = getelementptr inbounds i8** %id.i, i64 1
  %21 = load i8** %20, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([36 x i8]* @.str183, i64 0, i64 0), i8* %21) #6
  br label %for.end.i

if.else.i:                                        ; preds = %if.then.i
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([31 x i8]* @.str184, i64 0, i64 0)) #6
  br label %for.end.i

if.end6.i:                                        ; preds = %cond.end.i
  %code.i = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp7.i = icmp eq i32 %bf.clear.i, 116
  br i1 %cmp7.i, label %if.then8.i, label %if.end9.i

if.then8.i:                                       ; preds = %if.end6.i
  %operands.i = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 2
  %arrayidx.i = bitcast i32* %operands.i to %union.tree_node**
  %22 = load %union.tree_node** %arrayidx.i, align 8, !tbaa !7
  br label %if.end9.i

if.end9.i:                                        ; preds = %if.then8.i, %if.end6.i
  %val.0.i = phi %union.tree_node* [ %22, %if.then8.i ], [ %18, %if.end6.i ]
  %call.i = tail call fastcc %union.tree_node* @default_function_array_conversion(%union.tree_node* %val.0.i) #6
  %type1.i.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 1
  %23 = load %union.tree_node** %type1.i.i, align 8, !tbaa !1
  %24 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp.i.i = icmp eq %union.tree_node* %24, %call.i
  %cmp2.i.i = icmp eq %union.tree_node* %23, %24
  %or.cond.i.i = or i1 %cmp.i.i, %cmp2.i.i
  br i1 %or.cond.i.i, label %require_complete_type.exit.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.end9.i
  %size.i.i = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 2
  %25 = bitcast i32* %size.i.i to %union.tree_node**
  %26 = load %union.tree_node** %25, align 8, !tbaa !8
  %cmp4.i.i = icmp eq %union.tree_node* %26, null
  br i1 %cmp4.i.i, label %if.end6.i.i, label %require_complete_type.exit.i

if.end6.i.i:                                      ; preds = %if.end.i.i
  tail call void @incomplete_type_error(%union.tree_node* %call.i, %union.tree_node* %23) #6
  %27 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %require_complete_type.exit.i

require_complete_type.exit.i:                     ; preds = %if.end6.i.i, %if.end.i.i, %if.end9.i
  %retval.0.i.i = phi %union.tree_node* [ %27, %if.end6.i.i ], [ %call.i, %if.end.i.i ], [ %24, %if.end9.i ]
  %cmp11.i = icmp eq %union.tree_node* %cond.i, null
  br i1 %cmp11.i, label %if.else448.i, label %if.then12.i

if.then12.i:                                      ; preds = %require_complete_type.exit.i
  %type13.i = bitcast %union.tree_node* %cond.i to %struct.tree_type*
  %size.i = getelementptr inbounds %union.tree_node* %cond.i, i64 0, i32 0, i32 2
  %28 = bitcast i32* %size.i to %union.tree_node**
  %29 = load %union.tree_node** %28, align 8, !tbaa !8
  %cmp14.i = icmp eq %union.tree_node* %29, null
  br i1 %cmp14.i, label %if.then15.i, label %if.else16.i

if.then15.i:                                      ; preds = %if.then12.i
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([42 x i8]* @.str185, i64 0, i64 0), i32 %parmnum.0609.i) #6
  br label %if.end446.i

if.else16.i:                                      ; preds = %if.then12.i
  %30 = load i32* @warn_conversion, align 4, !tbaa !27
  %31 = load i32* @warn_traditional, align 4
  %32 = or i32 %31, %30
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %if.end405.i, label %if.then19.i

if.then19.i:                                      ; preds = %if.else16.i
  %precision.i = getelementptr inbounds %struct.tree_type* %type13.i, i64 0, i32 6
  %bf.load21.i = load i32* %precision.i, align 4
  %bf.clear22.i = and i32 %bf.load21.i, 511
  %code24.i = getelementptr inbounds %union.tree_node* %cond.i, i64 0, i32 0, i32 0, i32 2
  %bf.load25.i = load i32* %code24.i, align 8
  %bf.clear26.i = and i32 %bf.load25.i, 255
  switch i32 %bf.clear26.i, label %if.end55.i [
    i32 6, label %land.lhs.true.i
    i32 10, label %land.lhs.true.i
    i32 11, label %land.lhs.true.i
    i32 12, label %land.lhs.true.i
  ]

land.lhs.true.i:                                  ; preds = %if.then19.i, %if.then19.i, %if.then19.i, %if.then19.i
  %type47.i = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 0, i32 1
  %34 = load %union.tree_node** %type47.i, align 8, !tbaa !1
  %code49.i = getelementptr inbounds %union.tree_node* %34, i64 0, i32 0, i32 0, i32 2
  %bf.load50.i = load i32* %code49.i, align 8
  %bf.clear51.i = and i32 %bf.load50.i, 255
  %cmp52.i = icmp eq i32 %bf.clear51.i, 7
  br i1 %cmp52.i, label %if.then53.i, label %if.end55.i

if.then53.i:                                      ; preds = %land.lhs.true.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([52 x i8]* @.str186, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  %bf.load58.pre.i = load i32* %code24.i, align 8
  br label %if.end55.i

if.end55.i:                                       ; preds = %if.then53.i, %land.lhs.true.i, %if.then19.i
  %bf.load229.i = phi i32 [ %bf.load25.i, %if.then19.i ], [ %bf.load58.pre.i, %if.then53.i ], [ %bf.load25.i, %land.lhs.true.i ]
  %bf.clear59.i = and i32 %bf.load229.i, 255
  switch i32 %bf.clear59.i, label %if.else224.i [
    i32 6, label %land.lhs.true79.i
    i32 10, label %land.lhs.true79.i
    i32 11, label %land.lhs.true79.i
    i32 12, label %land.lhs.true79.i
    i32 8, label %if.end55.i.land.lhs.true95.i_crit_edge
    i32 7, label %if.end55.i.land.lhs.true111.i_crit_edge
  ]

if.end55.i.land.lhs.true111.i_crit_edge:          ; preds = %if.end55.i
  %type113.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 0, i32 1
  %.pre210 = load %union.tree_node** %type113.i.phi.trans.insert, align 8, !tbaa !1
  %code115.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre210, i64 0, i32 0, i32 0, i32 2
  %bf.load116.i.pre = load i32* %code115.i.phi.trans.insert, align 8
  br label %land.lhs.true111.i

if.end55.i.land.lhs.true95.i_crit_edge:           ; preds = %if.end55.i
  %type97.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 0, i32 1
  %.pre208 = load %union.tree_node** %type97.i.phi.trans.insert, align 8, !tbaa !1
  %code99.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre208, i64 0, i32 0, i32 0, i32 2
  %bf.load100.i.pre = load i32* %code99.i.phi.trans.insert, align 8
  br label %land.lhs.true95.i

land.lhs.true79.i:                                ; preds = %if.end55.i, %if.end55.i, %if.end55.i, %if.end55.i
  %.in212 = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 0, i32 1
  %35 = load %union.tree_node** %.in212, align 8
  %code83.i = getelementptr inbounds %union.tree_node* %35, i64 0, i32 0, i32 0, i32 2
  %bf.load84.i = load i32* %code83.i, align 8
  %bf.clear85.i = and i32 %bf.load84.i, 255
  %cmp86.i = icmp eq i32 %bf.clear85.i, 8
  br i1 %cmp86.i, label %if.then87.i, label %if.else89.i

if.then87.i:                                      ; preds = %land.lhs.true79.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([51 x i8]* @.str187, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  br label %if.end405.i

if.else89.i:                                      ; preds = %land.lhs.true79.i
  switch i32 %bf.clear59.i, label %if.else224.i [
    i32 8, label %land.lhs.true95.i
    i32 7, label %land.lhs.true111.i
  ]

land.lhs.true95.i:                                ; preds = %if.end55.i.land.lhs.true95.i_crit_edge, %if.else89.i
  %bf.load156.i = phi i32 [ %bf.load100.i.pre, %if.end55.i.land.lhs.true95.i_crit_edge ], [ %bf.load84.i, %if.else89.i ]
  %bf.clear101.i = and i32 %bf.load156.i, 255
  switch i32 %bf.clear101.i, label %if.else224.i [
    i32 7, label %if.then103.i
    i32 6, label %if.then183.i
    i32 10, label %if.then183.i
    i32 11, label %if.then183.i
    i32 12, label %if.then183.i
  ]

if.then103.i:                                     ; preds = %land.lhs.true95.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([52 x i8]* @.str188, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  br label %if.end405.i

land.lhs.true111.i:                               ; preds = %if.end55.i.land.lhs.true111.i_crit_edge, %if.else89.i
  %bf.load196.i = phi i32 [ %bf.load116.i.pre, %if.end55.i.land.lhs.true111.i_crit_edge ], [ %bf.load84.i, %if.else89.i ]
  %bf.clear117.i = and i32 %bf.load196.i, 255
  switch i32 %bf.clear117.i, label %if.else224.i [
    i32 6, label %if.then143.i
    i32 10, label %if.then143.i
    i32 11, label %if.then143.i
    i32 12, label %if.then143.i
    i32 8, label %if.then199.i
    i32 7, label %if.then215.i
  ]

if.then143.i:                                     ; preds = %land.lhs.true111.i, %land.lhs.true111.i, %land.lhs.true111.i, %land.lhs.true111.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([52 x i8]* @.str189, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  br label %if.end405.i

if.then183.i:                                     ; preds = %land.lhs.true95.i, %land.lhs.true95.i, %land.lhs.true95.i, %land.lhs.true95.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([51 x i8]* @.str190, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  br label %if.end405.i

if.then199.i:                                     ; preds = %land.lhs.true111.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([52 x i8]* @.str191, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  br label %if.end405.i

if.then215.i:                                     ; preds = %land.lhs.true111.i
  %36 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 24), align 8, !tbaa !7
  %type216.i = bitcast %union.tree_node* %36 to %struct.tree_type*
  %precision217.i = getelementptr inbounds %struct.tree_type* %type216.i, i64 0, i32 6
  %bf.load218.i = load i32* %precision217.i, align 4
  %bf.clear219.i = and i32 %bf.load218.i, 511
  %cmp220.i = icmp eq i32 %bf.clear22.i, %bf.clear219.i
  br i1 %cmp220.i, label %if.then221.i, label %if.end405.i

if.then221.i:                                     ; preds = %if.then215.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([52 x i8]* @.str192, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  br label %if.end405.i

if.else224.i:                                     ; preds = %land.lhs.true111.i, %land.lhs.true95.i, %if.end55.i, %if.else89.i
  %37 = load i32* @warn_conversion, align 4, !tbaa !27
  %tobool225.i = icmp eq i32 %37, 0
  br i1 %tobool225.i, label %if.end405.i, label %land.lhs.true226.i

land.lhs.true226.i:                               ; preds = %if.else224.i
  switch i32 %bf.clear59.i, label %if.end405.i [
    i32 6, label %land.lhs.true250.i
    i32 10, label %land.lhs.true250.i
    i32 11, label %land.lhs.true250.i
    i32 12, label %land.lhs.true250.i
  ]

land.lhs.true250.i:                               ; preds = %land.lhs.true226.i, %land.lhs.true226.i, %land.lhs.true226.i, %land.lhs.true226.i
  %.in = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 0, i32 1
  %38 = load %union.tree_node** %.in, align 8
  %.in642.i = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 0, i32 1
  %code254.i = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 0, i32 2
  %bf.load255.i = load i32* %code254.i, align 8
  %bf.clear256.i = and i32 %bf.load255.i, 255
  switch i32 %bf.clear256.i, label %if.end405.i [
    i32 6, label %if.then282.i
    i32 10, label %if.then282.i
    i32 11, label %if.then282.i
    i32 12, label %if.then282.i
  ]

if.then282.i:                                     ; preds = %land.lhs.true250.i, %land.lhs.true250.i, %land.lhs.true250.i, %land.lhs.true250.i
  %call283.i = tail call %union.tree_node* @default_conversion(%union.tree_node* %retval.0.i.i) #6
  %type285.i = getelementptr inbounds %union.tree_node* %call283.i, i64 0, i32 0, i32 0, i32 1
  %39 = load %union.tree_node** %type285.i, align 8, !tbaa !1
  %bf.load288.i = load i32* %code24.i, align 8
  %bf.clear289.i = and i32 %bf.load288.i, 255
  %cmp290.i = icmp eq i32 %bf.clear289.i, 10
  br i1 %cmp290.i, label %land.lhs.true291.i, label %if.else299.i

land.lhs.true291.i:                               ; preds = %if.then282.i
  %40 = getelementptr inbounds %union.tree_node* %cond.i, i64 0, i32 0, i32 15
  %41 = load %union.tree_node** %40, align 8, !tbaa !24
  %42 = load %union.tree_node** %.in642.i, align 8, !tbaa !1
  %43 = getelementptr inbounds %union.tree_node* %42, i64 0, i32 0, i32 15
  %44 = load %union.tree_node** %43, align 8, !tbaa !24
  %cmp297.i = icmp eq %union.tree_node* %41, %44
  br i1 %cmp297.i, label %if.end405.i, label %if.else299.i

if.else299.i:                                     ; preds = %land.lhs.true291.i, %if.then282.i
  %type300.i = bitcast %union.tree_node* %39 to %struct.tree_type*
  %precision301.i = getelementptr inbounds %struct.tree_type* %type300.i, i64 0, i32 6
  %bf.load302.i = load i32* %precision301.i, align 4
  %bf.clear303.i = and i32 %bf.load302.i, 511
  %cmp304.i = icmp eq i32 %bf.clear22.i, %bf.clear303.i
  br i1 %cmp304.i, label %if.else307.i, label %if.then305.i

if.then305.i:                                     ; preds = %if.else299.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([41 x i8]* @.str193, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  br label %if.end405.i

if.else307.i:                                     ; preds = %if.else299.i
  %unsigned_flag312.i = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 0, i32 2
  %bf.load313.i = load i32* %unsigned_flag312.i, align 8
  %bf.lshr603.i = xor i32 %bf.load313.i, %bf.load288.i
  %45 = and i32 %bf.lshr603.i, 8192
  %cmp316.i = icmp eq i32 %45, 0
  %or.cond.i = or i1 %cmp316.i, %cmp290.i
  br i1 %or.cond.i, label %if.end405.i, label %if.else325.i

if.else325.i:                                     ; preds = %if.else307.i
  %code327.i = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load328.i = load i32* %code327.i, align 8
  %bf.clear329.i = and i32 %bf.load328.i, 255
  %cmp330.i = icmp eq i32 %bf.clear329.i, 25
  br i1 %cmp330.i, label %land.lhs.true331.i, label %if.else335.i

land.lhs.true331.i:                               ; preds = %if.else325.i
  %call332.i = tail call i32 @int_fits_type_p(%union.tree_node* %retval.0.i.i, %union.tree_node* %cond.i) #6
  %tobool333.i = icmp eq i32 %call332.i, 0
  br i1 %tobool333.i, label %land.lhs.true331.if.else335_crit_edge.i, label %if.end405.i

land.lhs.true331.if.else335_crit_edge.i:          ; preds = %land.lhs.true331.i
  %bf.load338.pre.i = load i32* %code327.i, align 8
  br label %if.else335.i

if.else335.i:                                     ; preds = %land.lhs.true331.if.else335_crit_edge.i, %if.else325.i
  %bf.load338.i = phi i32 [ %bf.load338.pre.i, %land.lhs.true331.if.else335_crit_edge.i ], [ %bf.load328.i, %if.else325.i ]
  %bf.clear339.i = and i32 %bf.load338.i, 255
  %cmp340.i = icmp eq i32 %bf.clear339.i, 115
  br i1 %cmp340.i, label %land.lhs.true341.i, label %if.else357.i

land.lhs.true341.i:                               ; preds = %if.else335.i
  %operands343.i = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 2
  %arrayidx344.i = bitcast i32* %operands343.i to %union.tree_node**
  %46 = load %union.tree_node** %arrayidx344.i, align 8, !tbaa !7
  %code346.i = getelementptr inbounds %union.tree_node* %46, i64 0, i32 0, i32 0, i32 2
  %bf.load347.i = load i32* %code346.i, align 8
  %bf.clear348.i = and i32 %bf.load347.i, 255
  %cmp349.i = icmp eq i32 %bf.clear348.i, 25
  br i1 %cmp349.i, label %land.lhs.true350.i, label %if.else357.i

land.lhs.true350.i:                               ; preds = %land.lhs.true341.i
  %call354.i = tail call i32 @int_fits_type_p(%union.tree_node* %46, %union.tree_node* %cond.i) #6
  %tobool355.i = icmp eq i32 %call354.i, 0
  br i1 %tobool355.i, label %if.else357.i, label %if.end405.i

if.else357.i:                                     ; preds = %land.lhs.true350.i, %land.lhs.true341.i, %if.else335.i
  %47 = load %union.tree_node** %.in642.i, align 8, !tbaa !1
  %type360.i = bitcast %union.tree_node* %47 to %struct.tree_type*
  %precision361.i = getelementptr inbounds %struct.tree_type* %type360.i, i64 0, i32 6
  %bf.load362.i = load i32* %precision361.i, align 4
  %bf.clear363.i = and i32 %bf.load362.i, 511
  %bf.load366.i = load i32* %precision.i, align 4
  %bf.clear367.i = and i32 %bf.load366.i, 511
  %cmp368.i = icmp ult i32 %bf.clear363.i, %bf.clear367.i
  br i1 %cmp368.i, label %land.lhs.true369.i, label %if.else379.i

land.lhs.true369.i:                               ; preds = %if.else357.i
  %unsigned_flag373.i = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 0, i32 2
  %bf.load374.i = load i32* %unsigned_flag373.i, align 8
  %bf.clear376.i = and i32 %bf.load374.i, 8192
  %tobool377.i = icmp eq i32 %bf.clear376.i, 0
  br i1 %tobool377.i, label %if.else379.i, label %if.end405.i

if.else379.i:                                     ; preds = %land.lhs.true369.i, %if.else357.i
  %bf.load382.i = load i32* %code24.i, align 8
  %bf.clear384.i = and i32 %bf.load382.i, 8192
  %tobool385.i = icmp eq i32 %bf.clear384.i, 0
  br i1 %tobool385.i, label %if.else388.i, label %if.then386.i

if.then386.i:                                     ; preds = %if.else379.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([32 x i8]* @.str194, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  br label %if.end405.i

if.else388.i:                                     ; preds = %if.else379.i
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([30 x i8]* @.str195, i64 0, i64 0), i8* null, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  br label %if.end405.i

if.end405.i:                                      ; preds = %if.else388.i, %if.then386.i, %land.lhs.true369.i, %land.lhs.true350.i, %land.lhs.true331.i, %if.else307.i, %if.then305.i, %land.lhs.true291.i, %land.lhs.true250.i, %land.lhs.true226.i, %if.else224.i, %if.then221.i, %if.then215.i, %if.then199.i, %if.then183.i, %if.then143.i, %if.then103.i, %if.then87.i, %if.else16.i
  %call407.i = tail call fastcc %union.tree_node* @convert_for_assignment(%union.tree_node* %cond.i, %union.tree_node* %retval.0.i.i, i8* null, %union.tree_node* %fundecl.0, %union.tree_node* %name.0, i32 %parmnum.0609.i) #6
  %48 = load i32* @target_flags, align 4, !tbaa !27
  %and.i = and i32 %48, 33554432
  %tobool408.i = icmp eq i32 %and.i, 0
  br i1 %tobool408.i, label %land.lhs.true409.i, label %if.end446.i

land.lhs.true409.i:                               ; preds = %if.end405.i
  %code411.i = getelementptr inbounds %union.tree_node* %cond.i, i64 0, i32 0, i32 0, i32 2
  %bf.load412.i = load i32* %code411.i, align 8
  %bf.clear413.i = and i32 %bf.load412.i, 255
  switch i32 %bf.clear413.i, label %if.end446.i [
    i32 6, label %land.lhs.true433.i
    i32 10, label %land.lhs.true433.i
    i32 11, label %land.lhs.true433.i
    i32 12, label %land.lhs.true433.i
  ]

land.lhs.true433.i:                               ; preds = %land.lhs.true409.i, %land.lhs.true409.i, %land.lhs.true409.i, %land.lhs.true409.i
  %precision435.i = getelementptr inbounds %struct.tree_type* %type13.i, i64 0, i32 6
  %bf.load436.i = load i32* %precision435.i, align 4
  %bf.clear437.i = and i32 %bf.load436.i, 511
  %49 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %type438.i = bitcast %union.tree_node* %49 to %struct.tree_type*
  %precision439.i = getelementptr inbounds %struct.tree_type* %type438.i, i64 0, i32 6
  %bf.load440.i = load i32* %precision439.i, align 4
  %bf.clear441.i = and i32 %bf.load440.i, 511
  %cmp442.i = icmp ult i32 %bf.clear437.i, %bf.clear441.i
  br i1 %cmp442.i, label %if.then443.i, label %if.end446.i

if.then443.i:                                     ; preds = %land.lhs.true433.i
  %call444.i = tail call %union.tree_node* @default_conversion(%union.tree_node* %call407.i) #6
  br label %if.end446.i

if.end446.i:                                      ; preds = %if.then443.i, %land.lhs.true433.i, %land.lhs.true409.i, %if.end405.i, %if.then15.i
  %parmval.0.i = phi %union.tree_node* [ %call407.i, %if.end405.i ], [ %call444.i, %if.then443.i ], [ %call407.i, %land.lhs.true433.i ], [ %retval.0.i.i, %if.then15.i ], [ %call407.i, %land.lhs.true409.i ]
  %call447.i = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %parmval.0.i, %union.tree_node* %result.0615.i) #6
  br label %if.end475.i

if.else448.i:                                     ; preds = %require_complete_type.exit.i
  %type450.i = getelementptr inbounds %union.tree_node* %retval.0.i.i, i64 0, i32 0, i32 0, i32 1
  %50 = load %union.tree_node** %type450.i, align 8, !tbaa !1
  %code452.i = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 0, i32 2
  %bf.load453.i = load i32* %code452.i, align 8
  %bf.clear454.i = and i32 %bf.load453.i, 255
  %cmp455.i = icmp eq i32 %bf.clear454.i, 7
  br i1 %cmp455.i, label %land.lhs.true456.i, label %if.else471.i

land.lhs.true456.i:                               ; preds = %if.else448.i
  %type459.i = bitcast %union.tree_node* %50 to %struct.tree_type*
  %precision460.i = getelementptr inbounds %struct.tree_type* %type459.i, i64 0, i32 6
  %bf.load461.i = load i32* %precision460.i, align 4
  %bf.clear462.i = and i32 %bf.load461.i, 511
  %51 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !tbaa !7
  %type463.i = bitcast %union.tree_node* %51 to %struct.tree_type*
  %precision464.i = getelementptr inbounds %struct.tree_type* %type463.i, i64 0, i32 6
  %bf.load465.i = load i32* %precision464.i, align 4
  %bf.clear466.i = and i32 %bf.load465.i, 511
  %cmp467.i = icmp ult i32 %bf.clear462.i, %bf.clear466.i
  br i1 %cmp467.i, label %if.then468.i, label %if.else471.i

if.then468.i:                                     ; preds = %land.lhs.true456.i
  %call469.i = tail call %union.tree_node* @convert(%union.tree_node* %51, %union.tree_node* %retval.0.i.i) #6
  %call470.i = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call469.i, %union.tree_node* %result.0615.i) #6
  br label %if.end475.i

if.else471.i:                                     ; preds = %land.lhs.true456.i, %if.else448.i
  %call472.i = tail call %union.tree_node* @default_conversion(%union.tree_node* %retval.0.i.i) #6
  %call473.i = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call472.i, %union.tree_node* %result.0615.i) #6
  br label %if.end475.i

if.end475.i:                                      ; preds = %if.else471.i, %if.then468.i, %if.end446.i
  %result.1.i = phi %union.tree_node* [ %call447.i, %if.end446.i ], [ %call470.i, %if.then468.i ], [ %call473.i, %if.else471.i ]
  br i1 %tobool1.i, label %if.then477.i, label %for.inc.i

if.then477.i:                                     ; preds = %if.end475.i
  %chain.i = getelementptr inbounds %union.tree_node* %typetail.0617.i, i64 0, i32 0, i32 0, i32 0
  %52 = load %union.tree_node** %chain.i, align 8, !tbaa !28
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then477.i, %if.end475.i
  %typetail.1.i = phi %union.tree_node* [ %52, %if.then477.i ], [ null, %if.end475.i ]
  %chain481.i = getelementptr inbounds %union.tree_node* %valtail.0616.i, i64 0, i32 0, i32 0, i32 0
  %53 = load %union.tree_node** %chain481.i, align 8, !tbaa !28
  %phitmp.i = add i32 %parmnum.0609.i, 1
  %tobool.i = icmp eq %union.tree_node* %53, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.inc.i, %if.else.i, %if.then5.i, %if.end81
  %typetail.0607.i = phi %union.tree_node* [ %typetail.0617.i, %if.then5.i ], [ %typetail.0617.i, %if.else.i ], [ %14, %if.end81 ], [ %typetail.1.i, %for.inc.i ]
  %result.0605.i = phi %union.tree_node* [ %result.0615.i, %if.then5.i ], [ %result.0615.i, %if.else.i ], [ null, %if.end81 ], [ %result.1.i, %for.inc.i ]
  %cmp482.i = icmp eq %union.tree_node* %typetail.0607.i, null
  br i1 %cmp482.i, label %convert_arguments.exit, label %land.lhs.true483.i

land.lhs.true483.i:                               ; preds = %for.end.i
  %value485.i = getelementptr inbounds %union.tree_node* %typetail.0607.i, i64 0, i32 0, i32 2
  %54 = bitcast i32* %value485.i to %union.tree_node**
  %55 = load %union.tree_node** %54, align 8, !tbaa !25
  %56 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !7
  %cmp486.i = icmp eq %union.tree_node* %55, %56
  br i1 %cmp486.i, label %convert_arguments.exit, label %if.then487.i

if.then487.i:                                     ; preds = %land.lhs.true483.i
  %tobool488.i = icmp eq %union.tree_node* %name.0, null
  br i1 %tobool488.i, label %if.else493.i, label %if.then489.i

if.then489.i:                                     ; preds = %if.then487.i
  %id491.i = getelementptr inbounds %union.tree_node* %name.0, i64 0, i32 0, i32 1
  %57 = getelementptr inbounds i8** %id491.i, i64 1
  %58 = load i8** %57, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([35 x i8]* @.str196, i64 0, i64 0), i8* %58) #6
  br label %convert_arguments.exit

if.else493.i:                                     ; preds = %if.then487.i
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([30 x i8]* @.str197, i64 0, i64 0)) #6
  br label %convert_arguments.exit

convert_arguments.exit:                           ; preds = %for.end.i, %land.lhs.true483.i, %if.then489.i, %if.else493.i
  %call496.i = tail call %union.tree_node* @nreverse(%union.tree_node* %result.0605.i) #6
  %59 = load i32* @warn_format, align 4, !tbaa !27
  %tobool86 = icmp eq i32 %59, 0
  br i1 %tobool86, label %if.end89, label %if.then87

if.then87:                                        ; preds = %convert_arguments.exit
  %attributes = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 5
  %60 = bitcast i48* %attributes to %union.tree_node**
  %61 = load %union.tree_node** %60, align 8, !tbaa !50
  tail call void @check_function_format(i32* null, %union.tree_node* %61, %union.tree_node* %call496.i) #6
  br label %if.end89

if.end89:                                         ; preds = %convert_arguments.exit, %if.then87
  %code91 = getelementptr inbounds %union.tree_node* %function.addr.1, i64 0, i32 0, i32 0, i32 2
  %bf.load92 = load i32* %code91, align 8
  %bf.clear93 = and i32 %bf.load92, 255
  %cmp94 = icmp eq i32 %bf.clear93, 121
  br i1 %cmp94, label %land.lhs.true95, label %if.end121

land.lhs.true95:                                  ; preds = %if.end89
  %operands97 = getelementptr inbounds %union.tree_node* %function.addr.1, i64 0, i32 0, i32 2
  %arrayidx98 = bitcast i32* %operands97 to %union.tree_node**
  %62 = load %union.tree_node** %arrayidx98, align 8, !tbaa !7
  %code100 = getelementptr inbounds %union.tree_node* %62, i64 0, i32 0, i32 0, i32 2
  %bf.load101 = load i32* %code100, align 8
  %bf.clear102 = and i32 %bf.load101, 255
  %cmp103 = icmp eq i32 %bf.clear102, 30
  br i1 %cmp103, label %land.lhs.true104, label %if.end121

land.lhs.true104:                                 ; preds = %land.lhs.true95
  %built_in_class = getelementptr inbounds %union.tree_node* %62, i64 0, i32 0, i32 5
  %63 = bitcast i48* %built_in_class to i64*
  %bf.load109 = load i64* %63, align 8
  %bf.cast = and i64 %bf.load109, 1610612736
  %cmp112 = icmp eq i64 %bf.cast, 0
  br i1 %cmp112, label %if.end121, label %if.then113

if.then113:                                       ; preds = %land.lhs.true104
  %call117 = tail call %union.tree_node* @expand_tree_builtin(%union.tree_node* %62, %union.tree_node* %params, %union.tree_node* %call496.i) #6
  %tobool118 = icmp eq %union.tree_node* %call117, null
  br i1 %tobool118, label %if.end121, label %return

if.end121:                                        ; preds = %if.then113, %land.lhs.true104, %land.lhs.true95, %if.end89
  %type123 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 1
  %64 = load %union.tree_node** %type123, align 8, !tbaa !1
  %call124 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 53, %union.tree_node* %64, %union.tree_node* %function.addr.1, %union.tree_node* %call496.i, %union.tree_node* null) #6
  %side_effects_flag = getelementptr inbounds %union.tree_node* %call124, i64 0, i32 0, i32 0, i32 2
  %bf.load126 = load i32* %side_effects_flag, align 8
  %bf.set = or i32 %bf.load126, 256
  store i32 %bf.set, i32* %side_effects_flag, align 8
  %call128 = tail call %union.tree_node* @fold(%union.tree_node* %call124) #6
  %type130 = getelementptr inbounds %union.tree_node* %call128, i64 0, i32 0, i32 0, i32 1
  %65 = load %union.tree_node** %type130, align 8, !tbaa !1
  %code132 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 0, i32 2
  %bf.load133 = load i32* %code132, align 8
  %bf.clear134 = and i32 %bf.load133, 255
  %cmp135 = icmp eq i32 %bf.clear134, 5
  br i1 %cmp135, label %return, label %if.end137

if.end137:                                        ; preds = %if.end121
  %66 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp.i178 = icmp eq %union.tree_node* %66, %call128
  %cmp2.i = icmp eq %union.tree_node* %65, %66
  %or.cond.i179 = or i1 %cmp.i178, %cmp2.i
  br i1 %or.cond.i179, label %return, label %if.end.i

if.end.i:                                         ; preds = %if.end137
  %size.i180 = getelementptr inbounds %union.tree_node* %65, i64 0, i32 0, i32 2
  %67 = bitcast i32* %size.i180 to %union.tree_node**
  %68 = load %union.tree_node** %67, align 8, !tbaa !8
  %cmp4.i = icmp eq %union.tree_node* %68, null
  br i1 %cmp4.i, label %if.end6.i181, label %return

if.end6.i181:                                     ; preds = %if.end.i
  tail call void @incomplete_type_error(%union.tree_node* %call128, %union.tree_node* %65) #6
  %69 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

return:                                           ; preds = %if.end6.i181, %if.end.i, %if.end137, %if.end121, %if.then113, %if.then70, %if.then55
  %retval.0 = phi %union.tree_node* [ %10, %if.then55 ], [ %12, %if.then70 ], [ %call117, %if.then113 ], [ %call128, %if.end121 ], [ %69, %if.end6.i181 ], [ %call128, %if.end.i ], [ %66, %if.end137 ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #1

declare void @check_function_format(i32*, %union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @expand_tree_builtin(%union.tree_node*, %union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @parser_build_binary_op(i32 %code, %union.tree_node* %arg1, %union.tree_node* %arg2) #0 {
entry:
  %call = tail call %union.tree_node* @build_binary_op(i32 %code, %union.tree_node* %arg1, %union.tree_node* %arg2, i32 1)
  %code3 = getelementptr inbounds %union.tree_node* %arg2, i64 0, i32 0, i32 0, i32 2
  %bf.load4 = load i32* %code3, align 8
  %bf.clear5 = and i32 %bf.load4, 255
  %idxprom6330 = zext i32 %bf.clear5 to i64
  %arrayidx7 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom6330
  %0 = load i8* %arrayidx7, align 1, !tbaa !34
  %code10 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load11 = load i32* %code10, align 8
  %bf.clear12 = and i32 %bf.load11, 255
  %cmp = icmp eq i32 %bf.clear12, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end:                                           ; preds = %entry
  %code1 = getelementptr inbounds %union.tree_node* %arg1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom329 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom329
  %2 = load i8* %arrayidx, align 1, !tbaa !34
  switch i8 %2, label %if.end27 [
    i8 60, label %if.then26
    i8 49, label %if.then26
    i8 50, label %if.then26
    i8 101, label %if.then26
  ]

if.then26:                                        ; preds = %if.end, %if.end, %if.end, %if.end
  %complexity = getelementptr inbounds %union.tree_node* %arg1, i64 0, i32 0, i32 1
  %3 = bitcast i8** %complexity to i32*
  %4 = load i32* %3, align 4, !tbaa !35
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then26
  %code18.0 = phi i32 [ %4, %if.then26 ], [ 0, %if.end ]
  switch i8 %0, label %if.end46 [
    i8 60, label %if.then43
    i8 49, label %if.then43
    i8 50, label %if.then43
    i8 101, label %if.then43
  ]

if.then43:                                        ; preds = %if.end27, %if.end27, %if.end27, %if.end27
  %complexity45 = getelementptr inbounds %union.tree_node* %arg2, i64 0, i32 0, i32 1
  %5 = bitcast i8** %complexity45 to i32*
  %6 = load i32* %5, align 4, !tbaa !35
  br label %if.end46

if.end46:                                         ; preds = %if.end27, %if.then43
  %code2.0 = phi i32 [ %6, %if.then43 ], [ 0, %if.end27 ]
  %7 = load i32* @warn_parentheses, align 4, !tbaa !27
  %tobool = icmp eq i32 %7, 0
  br i1 %tobool, label %if.end187, label %if.then47

if.then47:                                        ; preds = %if.end46
  %8 = and i32 %code, -2
  %9 = icmp eq i32 %8, 82
  br i1 %9, label %if.then53, label %if.end67

if.then53:                                        ; preds = %if.then47
  %code18.0.off333 = add i32 %code18.0, -59
  %10 = icmp ult i32 %code18.0.off333, 2
  %cmp60 = icmp eq i32 %code2.0, 59
  %or.cond245 = or i1 %10, %cmp60
  %cmp63 = icmp eq i32 %code2.0, 60
  %or.cond246 = or i1 %or.cond245, %cmp63
  br i1 %or.cond246, label %if.then65, label %if.end67

if.then65:                                        ; preds = %if.then53
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([47 x i8]* @.str36, i64 0, i64 0)) #6
  br label %if.end67

if.end67:                                         ; preds = %if.then65, %if.then53, %if.then47
  switch i32 %code, label %if.end187 [
    i32 92, label %if.then70
    i32 86, label %if.then81
    i32 87, label %if.then123
    i32 88, label %if.then159
  ]

if.then70:                                        ; preds = %if.end67
  %cmp71 = icmp eq i32 %code18.0, 91
  %cmp74 = icmp eq i32 %code2.0, 91
  %or.cond247 = or i1 %cmp71, %cmp74
  br i1 %or.cond247, label %if.end78.thread334, label %if.end187

if.end78.thread334:                               ; preds = %if.then70
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([40 x i8]* @.str37, i64 0, i64 0)) #6
  br label %if.end187

if.then81:                                        ; preds = %if.end67
  %code18.0.off332 = add i32 %code18.0, -87
  %11 = icmp ult i32 %code18.0.off332, 2
  %cmp88 = icmp eq i32 %code18.0, 59
  %or.cond249 = or i1 %11, %cmp88
  %cmp91 = icmp eq i32 %code18.0, 60
  %or.cond250 = or i1 %or.cond249, %cmp91
  %cmp94 = icmp eq i32 %code2.0, 88
  %or.cond251 = or i1 %or.cond250, %cmp94
  %cmp97 = icmp eq i32 %code2.0, 87
  %or.cond252 = or i1 %or.cond251, %cmp97
  %cmp100 = icmp eq i32 %code2.0, 59
  %or.cond253 = or i1 %or.cond252, %cmp100
  %cmp103 = icmp eq i32 %code2.0, 60
  %or.cond254 = or i1 %or.cond253, %cmp103
  br i1 %or.cond254, label %if.then105, label %if.end106

if.then105:                                       ; preds = %if.then81
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([54 x i8]* @.str38, i64 0, i64 0)) #6
  br label %if.end106

if.end106:                                        ; preds = %if.then81, %if.then105
  %idxprom107 = sext i32 %code18.0 to i64
  %arrayidx108 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom107
  %12 = load i8* %arrayidx108, align 1, !tbaa !34
  %cmp110 = icmp eq i8 %12, 60
  br i1 %cmp110, label %if.then118, label %lor.lhs.false112

lor.lhs.false112:                                 ; preds = %if.end106
  %idxprom113 = sext i32 %code2.0 to i64
  %arrayidx114 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom113
  %13 = load i8* %arrayidx114, align 1, !tbaa !34
  %cmp116 = icmp eq i8 %13, 60
  br i1 %cmp116, label %if.then118, label %if.end187

if.then118:                                       ; preds = %lor.lhs.false112, %if.end106
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([54 x i8]* @.str39, i64 0, i64 0)) #6
  br label %if.end187

if.then123:                                       ; preds = %if.end67
  %cmp124 = icmp eq i32 %code18.0, 88
  %cmp127 = icmp eq i32 %code18.0, 59
  %or.cond255 = or i1 %cmp124, %cmp127
  %cmp130 = icmp eq i32 %code18.0, 60
  %or.cond256 = or i1 %or.cond255, %cmp130
  %cmp133 = icmp eq i32 %code2.0, 88
  %or.cond257 = or i1 %or.cond256, %cmp133
  %cmp136 = icmp eq i32 %code2.0, 59
  %or.cond258 = or i1 %or.cond257, %cmp136
  %cmp139 = icmp eq i32 %code2.0, 60
  %or.cond259 = or i1 %or.cond258, %cmp139
  br i1 %or.cond259, label %if.then141, label %if.end142

if.then141:                                       ; preds = %if.then123
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([54 x i8]* @.str40, i64 0, i64 0)) #6
  br label %if.end142

if.end142:                                        ; preds = %if.then123, %if.then141
  %idxprom143 = sext i32 %code18.0 to i64
  %arrayidx144 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom143
  %14 = load i8* %arrayidx144, align 1, !tbaa !34
  %cmp146 = icmp eq i8 %14, 60
  br i1 %cmp146, label %if.then154, label %lor.lhs.false148

lor.lhs.false148:                                 ; preds = %if.end142
  %idxprom149 = sext i32 %code2.0 to i64
  %arrayidx150 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom149
  %15 = load i8* %arrayidx150, align 1, !tbaa !34
  %cmp152 = icmp eq i8 %15, 60
  br i1 %cmp152, label %if.then154, label %if.end156

if.then154:                                       ; preds = %lor.lhs.false148, %if.end142
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([54 x i8]* @.str41, i64 0, i64 0)) #6
  br label %if.end156

if.end156:                                        ; preds = %lor.lhs.false148, %if.then154
  %cmp157 = icmp eq i32 %code, 88
  br i1 %cmp157, label %if.then159, label %if.end187

if.then159:                                       ; preds = %if.end67, %if.end156
  %code18.0.off = add i32 %code18.0, -59
  %16 = icmp ult i32 %code18.0.off, 2
  %cmp166 = icmp eq i32 %code2.0, 59
  %or.cond261 = or i1 %16, %cmp166
  %cmp169 = icmp eq i32 %code2.0, 60
  %or.cond262 = or i1 %or.cond261, %cmp169
  br i1 %or.cond262, label %if.then171, label %if.end172

if.then171:                                       ; preds = %if.then159
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([50 x i8]* @.str42, i64 0, i64 0)) #6
  br label %if.end172

if.end172:                                        ; preds = %if.then159, %if.then171
  %idxprom173 = sext i32 %code18.0 to i64
  %arrayidx174 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom173
  %17 = load i8* %arrayidx174, align 1, !tbaa !34
  %cmp176 = icmp eq i8 %17, 60
  br i1 %cmp176, label %if.then184, label %lor.lhs.false178

lor.lhs.false178:                                 ; preds = %if.end172
  %idxprom179 = sext i32 %code2.0 to i64
  %arrayidx180 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom179
  %18 = load i8* %arrayidx180, align 1, !tbaa !34
  %cmp182 = icmp eq i8 %18, 60
  br i1 %cmp182, label %if.then184, label %if.end187

if.then184:                                       ; preds = %lor.lhs.false178, %if.end172
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([54 x i8]* @.str43, i64 0, i64 0)) #6
  br label %if.end187

if.end187:                                        ; preds = %if.then118, %lor.lhs.false112, %if.then70, %if.end78.thread334, %if.end67, %if.end46, %if.end156, %if.then184, %lor.lhs.false178
  %idxprom188 = sext i32 %code to i64
  %arrayidx189 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom188
  %19 = load i8* %arrayidx189, align 1, !tbaa !34
  %cmp191 = icmp eq i8 %19, 60
  %20 = load i32* @extra_warnings, align 4
  %tobool193 = icmp ne i32 %20, 0
  %or.cond263 = and i1 %cmp191, %tobool193
  br i1 %or.cond263, label %land.lhs.true194, label %if.end207

land.lhs.true194:                                 ; preds = %if.end187
  %idxprom195 = sext i32 %code18.0 to i64
  %arrayidx196 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom195
  %21 = load i8* %arrayidx196, align 1, !tbaa !34
  %cmp198 = icmp eq i8 %21, 60
  br i1 %cmp198, label %if.then206, label %lor.lhs.false200

lor.lhs.false200:                                 ; preds = %land.lhs.true194
  %idxprom201 = sext i32 %code2.0 to i64
  %arrayidx202 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom201
  %22 = load i8* %arrayidx202, align 1, !tbaa !34
  %cmp204 = icmp eq i8 %22, 60
  br i1 %cmp204, label %if.then206, label %if.end207

if.then206:                                       ; preds = %lor.lhs.false200, %land.lhs.true194
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([64 x i8]* @.str44, i64 0, i64 0)) #6
  br label %if.end207

if.end207:                                        ; preds = %if.then206, %lor.lhs.false200, %if.end187
  tail call void @unsigned_conversion_warning(%union.tree_node* %call, %union.tree_node* %arg1) #6
  tail call void @unsigned_conversion_warning(%union.tree_node* %call, %union.tree_node* %arg2) #6
  tail call void @overflow_warning(%union.tree_node* %call) #6
  %bf.load210 = load i32* %code10, align 8
  %bf.clear211 = and i32 %bf.load210, 255
  %idxprom212331 = zext i32 %bf.clear211 to i64
  %arrayidx213 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom212331
  %23 = load i8* %arrayidx213, align 1, !tbaa !34
  switch i8 %23, label %if.else [
    i8 60, label %if.then229
    i8 49, label %if.then229
    i8 50, label %if.then229
    i8 101, label %if.then229
  ]

if.then229:                                       ; preds = %if.end207, %if.end207, %if.end207, %if.end207
  %complexity231 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 1
  %24 = bitcast i8** %complexity231 to i32*
  store i32 %code, i32* %24, align 4, !tbaa !35
  br label %return

if.else:                                          ; preds = %if.end207
  %bf.clear234 = and i32 %bf.load210, 512
  %type = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %25 = load %union.tree_node** %type, align 8, !tbaa !1
  %call236 = tail call %union.tree_node* @build1(i32 116, %union.tree_node* %25, %union.tree_node* %call) #6
  %complexity238 = getelementptr inbounds %union.tree_node* %call236, i64 0, i32 0, i32 1
  %26 = bitcast i8** %complexity238 to i32*
  store i32 %code, i32* %26, align 4, !tbaa !35
  %constant_flag240 = getelementptr inbounds %union.tree_node* %call236, i64 0, i32 0, i32 0, i32 2
  %bf.load241 = load i32* %constant_flag240, align 8
  %bf.clear242 = and i32 %bf.load241, -513
  %bf.set = or i32 %bf.clear242, %bf.clear234
  store i32 %bf.set, i32* %constant_flag240, align 8
  br label %return

return:                                           ; preds = %if.then229, %if.else, %if.then
  %retval.0 = phi %union.tree_node* [ %1, %if.then ], [ %call, %if.then229 ], [ %call236, %if.else ]
  ret %union.tree_node* %retval.0
}

declare void @unsigned_conversion_warning(%union.tree_node*, %union.tree_node*) #1

declare void @overflow_warning(%union.tree_node*) #1

declare %union.tree_node* @pointer_int_sum(i32, %union.tree_node*, %union.tree_node*) #1

declare i32 @integer_zerop(%union.tree_node*) #1

declare i32 @integer_all_onesp(%union.tree_node*) #1

declare %union.tree_node* @truthvalue_conversion(%union.tree_node*) #1

declare i32 @tree_int_cst_sgn(%union.tree_node*) #1

declare %union.tree_node* @get_narrower(%union.tree_node*, i32*) #1

declare %union.tree_node* @signed_or_unsigned_type(i32, %union.tree_node*) #1

declare %union.tree_node* @shorten_compare(%union.tree_node**, %union.tree_node**, %union.tree_node**, i32*) #1

declare i32 @tree_expr_nonnegative_p(%union.tree_node*) #1

declare %union.tree_node* @signed_type(%union.tree_node*) #1

declare i32 @host_integerp(%union.tree_node*, i32) #1

declare i64 @tree_low_cst(%union.tree_node*, i32) #1

declare void @binary_op_error(i32) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_unary_op(i32 %code, %union.tree_node* %xarg, i32 %flag) #0 {
entry:
  %type = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !1
  %code2 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code2, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end:                                           ; preds = %entry
  %2 = and i32 %bf.load, 254
  %3 = icmp eq i32 %2, 10
  %.bf.clear = select i1 %3, i32 6, i32 %bf.clear
  switch i32 %code, label %if.then524 [
    i32 114, label %sw.bb
    i32 77, label %sw.bb16
    i32 90, label %sw.bb29
    i32 80, label %sw.bb49
    i32 126, label %sw.bb62
    i32 96, label %sw.bb75
    i32 121, label %sw.bb360
    i32 127, label %sw.bb90
    i32 128, label %sw.bb113
    i32 130, label %sw.bb140
    i32 132, label %sw.bb140
    i32 129, label %sw.bb140
    i32 131, label %sw.bb140
  ]

sw.bb:                                            ; preds = %if.end
  %4 = and i32 %.bf.clear, 254
  %5 = icmp eq i32 %4, 6
  %cmp11 = icmp eq i32 %.bf.clear, 8
  %or.cond531 = or i1 %5, %cmp11
  br i1 %or.cond531, label %if.else, label %if.then12

if.then12:                                        ; preds = %sw.bb
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([34 x i8]* @.str63, i64 0, i64 0)) #6
  %6 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.else:                                          ; preds = %sw.bb
  %tobool = icmp eq i32 %flag, 0
  br i1 %tobool, label %if.then13, label %if.then524

if.then13:                                        ; preds = %if.else
  %call = tail call %union.tree_node* @default_conversion(%union.tree_node* %xarg)
  br label %if.then524

sw.bb16:                                          ; preds = %if.end
  %7 = and i32 %.bf.clear, 254
  %8 = icmp eq i32 %7, 6
  %cmp21 = icmp eq i32 %.bf.clear, 8
  %or.cond533 = or i1 %8, %cmp21
  br i1 %or.cond533, label %if.else23, label %if.then22

if.then22:                                        ; preds = %sw.bb16
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([35 x i8]* @.str64, i64 0, i64 0)) #6
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.else23:                                        ; preds = %sw.bb16
  %tobool24 = icmp eq i32 %flag, 0
  br i1 %tobool24, label %if.then25, label %if.then524

if.then25:                                        ; preds = %if.else23
  %call26 = tail call %union.tree_node* @default_conversion(%union.tree_node* %xarg)
  br label %if.then524

sw.bb29:                                          ; preds = %if.end
  switch i32 %.bf.clear, label %if.then41 [
    i32 8, label %if.then31
    i32 6, label %if.else42
  ]

if.then31:                                        ; preds = %sw.bb29
  %10 = load i32* @pedantic, align 4, !tbaa !27
  %tobool32 = icmp eq i32 %10, 0
  br i1 %tobool32, label %if.end34, label %if.then33

if.then33:                                        ; preds = %if.then31
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([51 x i8]* @.str65, i64 0, i64 0)) #6
  br label %if.end34

if.end34:                                         ; preds = %if.then31, %if.then33
  %tobool35 = icmp eq i32 %flag, 0
  br i1 %tobool35, label %if.then36, label %if.then524

if.then36:                                        ; preds = %if.end34
  %call37 = tail call %union.tree_node* @default_conversion(%union.tree_node* %xarg)
  br label %if.then524

if.then41:                                        ; preds = %sw.bb29
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([38 x i8]* @.str66, i64 0, i64 0)) #6
  %11 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.else42:                                        ; preds = %sw.bb29
  %tobool43 = icmp eq i32 %flag, 0
  br i1 %tobool43, label %if.then44, label %if.then524

if.then44:                                        ; preds = %if.else42
  %call45 = tail call %union.tree_node* @default_conversion(%union.tree_node* %xarg)
  br label %if.then524

sw.bb49:                                          ; preds = %if.end
  %12 = and i32 %.bf.clear, 254
  %13 = icmp eq i32 %12, 6
  %cmp54 = icmp eq i32 %.bf.clear, 8
  %or.cond535 = or i1 %13, %cmp54
  br i1 %or.cond535, label %if.else56, label %if.then55

if.then55:                                        ; preds = %sw.bb49
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([27 x i8]* @.str67, i64 0, i64 0)) #6
  %14 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.else56:                                        ; preds = %sw.bb49
  %tobool57 = icmp eq i32 %flag, 0
  br i1 %tobool57, label %if.then58, label %if.then524

if.then58:                                        ; preds = %if.else56
  %call59 = tail call %union.tree_node* @default_conversion(%union.tree_node* %xarg)
  br label %if.then524

sw.bb62:                                          ; preds = %if.end
  %15 = and i32 %.bf.clear, 254
  %16 = icmp eq i32 %15, 6
  %cmp67 = icmp eq i32 %.bf.clear, 8
  %or.cond537 = or i1 %16, %cmp67
  br i1 %or.cond537, label %if.else69, label %if.then68

if.then68:                                        ; preds = %sw.bb62
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([35 x i8]* @.str68, i64 0, i64 0)) #6
  %17 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.else69:                                        ; preds = %sw.bb62
  %tobool70 = icmp eq i32 %flag, 0
  br i1 %tobool70, label %if.then71, label %if.then524

if.then71:                                        ; preds = %if.else69
  %call72 = tail call %union.tree_node* @default_conversion(%union.tree_node* %xarg)
  br label %if.then524

sw.bb75:                                          ; preds = %if.end
  %18 = and i32 %.bf.clear, 254
  %typecode.0.cmp = icmp ne i32 %18, 6
  %cmp79 = icmp ne i32 %.bf.clear, 13
  %or.cond539 = and i1 %typecode.0.cmp, %cmp79
  %cmp81 = icmp ne i32 %.bf.clear, 8
  %or.cond540 = and i1 %or.cond539, %cmp81
  %cmp83 = icmp ne i32 %.bf.clear, 18
  %or.cond541 = and i1 %or.cond540, %cmp83
  %cmp85 = icmp ne i32 %.bf.clear, 23
  %or.cond542 = and i1 %or.cond541, %cmp85
  br i1 %or.cond542, label %if.then86, label %if.end87

if.then86:                                        ; preds = %sw.bb75
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([46 x i8]* @.str69, i64 0, i64 0)) #6
  %19 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end87:                                         ; preds = %sw.bb75
  %call88 = tail call %union.tree_node* @truthvalue_conversion(%union.tree_node* %xarg) #6
  %call89 = tail call %union.tree_node* @invert_truthvalue(%union.tree_node* %call88) #6
  br label %return

sw.bb90:                                          ; preds = %if.end
  %code92 = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 0, i32 2
  %bf.load93 = load i32* %code92, align 8
  %bf.clear94 = and i32 %bf.load93, 255
  %cmp95 = icmp eq i32 %bf.clear94, 27
  br i1 %cmp95, label %if.then96, label %if.else97

if.then96:                                        ; preds = %sw.bb90
  %real = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 2
  %20 = bitcast i32* %real to %union.tree_node**
  %21 = load %union.tree_node** %20, align 8, !tbaa !51
  br label %return

if.else97:                                        ; preds = %sw.bb90
  %cmp104 = icmp eq i32 %bf.clear, 8
  br i1 %cmp104, label %if.then105, label %return

if.then105:                                       ; preds = %if.else97
  %type109 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %22 = load %union.tree_node** %type109, align 8, !tbaa !1
  %call110 = tail call %union.tree_node* @build1(i32 127, %union.tree_node* %22, %union.tree_node* %xarg) #6
  %call111 = tail call %union.tree_node* @fold(%union.tree_node* %call110) #6
  br label %return

sw.bb113:                                         ; preds = %if.end
  %code115 = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 0, i32 2
  %bf.load116 = load i32* %code115, align 8
  %bf.clear117 = and i32 %bf.load116, 255
  %cmp118 = icmp eq i32 %bf.clear117, 27
  br i1 %cmp118, label %if.then119, label %if.else121

if.then119:                                       ; preds = %sw.bb113
  %23 = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 4
  %24 = load %union.tree_node** %23, align 8, !tbaa !53
  br label %return

if.else121:                                       ; preds = %sw.bb113
  %cmp128 = icmp eq i32 %bf.clear, 8
  br i1 %cmp128, label %if.then129, label %if.else136

if.then129:                                       ; preds = %if.else121
  %type133 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %25 = load %union.tree_node** %type133, align 8, !tbaa !1
  %call134 = tail call %union.tree_node* @build1(i32 128, %union.tree_node* %25, %union.tree_node* %xarg) #6
  %call135 = tail call %union.tree_node* @fold(%union.tree_node* %call134) #6
  br label %return

if.else136:                                       ; preds = %if.else121
  %26 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !7
  %call139 = tail call %union.tree_node* @convert(%union.tree_node* %0, %union.tree_node* %26) #6
  br label %return

sw.bb140:                                         ; preds = %if.end, %if.end, %if.end, %if.end
  %call141 = tail call fastcc %union.tree_node* @unary_complex_lvalue(i32 %code, %union.tree_node* %xarg, i32 0)
  %cmp142 = icmp eq %union.tree_node* %call141, null
  br i1 %cmp142, label %if.end144, label %return

if.end144:                                        ; preds = %sw.bb140
  switch i32 %.bf.clear, label %if.then165 [
    i32 8, label %if.then146
    i32 13, label %if.end172
    i32 7, label %if.end172
    i32 6, label %if.end172
  ]

if.then146:                                       ; preds = %if.end144
  %27 = load i32* @pedantic, align 4, !tbaa !27
  %tobool149 = icmp eq i32 %27, 0
  br i1 %tobool149, label %if.end151, label %if.then150

if.then150:                                       ; preds = %if.then146
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([54 x i8]* @.str70, i64 0, i64 0)) #6
  br label %if.end151

if.end151:                                        ; preds = %if.then146, %if.then150
  %call152 = tail call %union.tree_node* @stabilize_reference(%union.tree_node* %xarg) #6
  %type.i753 = getelementptr inbounds %union.tree_node* %call152, i64 0, i32 0, i32 0, i32 1
  %28 = load %union.tree_node** %type.i753, align 8, !tbaa !1
  %code2.i = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 0, i32 2
  %bf.load.i754 = load i32* %code2.i, align 8
  %bf.clear.i755 = and i32 %bf.load.i754, 255
  %cmp.i = icmp eq i32 %bf.clear.i755, 0
  br i1 %cmp.i, label %if.then.i756, label %if.end.i757

if.then.i756:                                     ; preds = %if.end151
  %29 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %build_unary_op.exit

if.end.i757:                                      ; preds = %if.end151
  %code92.i = getelementptr inbounds %union.tree_node* %call152, i64 0, i32 0, i32 0, i32 2
  %bf.load93.i = load i32* %code92.i, align 8
  %bf.clear94.i = and i32 %bf.load93.i, 255
  %cmp95.i = icmp eq i32 %bf.clear94.i, 27
  br i1 %cmp95.i, label %if.then96.i, label %if.else97.i

if.then96.i:                                      ; preds = %if.end.i757
  %real.i = getelementptr inbounds %union.tree_node* %call152, i64 0, i32 0, i32 2
  %30 = bitcast i32* %real.i to %union.tree_node**
  %31 = load %union.tree_node** %30, align 8, !tbaa !51
  br label %build_unary_op.exit

if.else97.i:                                      ; preds = %if.end.i757
  %cmp104.i = icmp eq i32 %bf.clear.i755, 8
  br i1 %cmp104.i, label %if.then105.i, label %build_unary_op.exit

if.then105.i:                                     ; preds = %if.else97.i
  %type109.i = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 0, i32 1
  %32 = load %union.tree_node** %type109.i, align 8, !tbaa !1
  %call110.i = tail call %union.tree_node* @build1(i32 127, %union.tree_node* %32, %union.tree_node* %call152) #6
  %call111.i = tail call %union.tree_node* @fold(%union.tree_node* %call110.i) #6
  %.pre = load %union.tree_node** %type.i753, align 8, !tbaa !1
  %code2.i760.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre, i64 0, i32 0, i32 0, i32 2
  %bf.load.i761.pre = load i32* %code2.i760.phi.trans.insert, align 8
  br label %build_unary_op.exit

build_unary_op.exit:                              ; preds = %if.then.i756, %if.then96.i, %if.else97.i, %if.then105.i
  %bf.load.i761 = phi i32 [ %bf.load.i754, %if.then.i756 ], [ %bf.load.i754, %if.then96.i ], [ %bf.load.i761.pre, %if.then105.i ], [ %bf.load.i754, %if.else97.i ]
  %33 = phi %union.tree_node* [ %28, %if.then.i756 ], [ %28, %if.then96.i ], [ %.pre, %if.then105.i ], [ %28, %if.else97.i ]
  %retval.0.i758 = phi %union.tree_node* [ %29, %if.then.i756 ], [ %31, %if.then96.i ], [ %call111.i, %if.then105.i ], [ %call152, %if.else97.i ]
  %bf.clear.i762 = and i32 %bf.load.i761, 255
  %cmp.i763 = icmp eq i32 %bf.clear.i762, 0
  br i1 %cmp.i763, label %if.then.i764, label %if.end.i766

if.then.i764:                                     ; preds = %build_unary_op.exit
  %34 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %build_unary_op.exit768

if.end.i766:                                      ; preds = %build_unary_op.exit
  %code115.i = getelementptr inbounds %union.tree_node* %call152, i64 0, i32 0, i32 0, i32 2
  %bf.load116.i = load i32* %code115.i, align 8
  %bf.clear117.i = and i32 %bf.load116.i, 255
  %cmp118.i = icmp eq i32 %bf.clear117.i, 27
  br i1 %cmp118.i, label %if.then119.i, label %if.else121.i

if.then119.i:                                     ; preds = %if.end.i766
  %35 = getelementptr inbounds %union.tree_node* %call152, i64 0, i32 0, i32 4
  %36 = load %union.tree_node** %35, align 8, !tbaa !53
  br label %build_unary_op.exit768

if.else121.i:                                     ; preds = %if.end.i766
  %cmp128.i = icmp eq i32 %bf.clear.i762, 8
  br i1 %cmp128.i, label %if.then129.i, label %if.else136.i

if.then129.i:                                     ; preds = %if.else121.i
  %type133.i = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 0, i32 1
  %37 = load %union.tree_node** %type133.i, align 8, !tbaa !1
  %call134.i = tail call %union.tree_node* @build1(i32 128, %union.tree_node* %37, %union.tree_node* %call152) #6
  %call135.i = tail call %union.tree_node* @fold(%union.tree_node* %call134.i) #6
  br label %build_unary_op.exit768

if.else136.i:                                     ; preds = %if.else121.i
  %38 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !7
  %call139.i = tail call %union.tree_node* @convert(%union.tree_node* %33, %union.tree_node* %38) #6
  br label %build_unary_op.exit768

build_unary_op.exit768:                           ; preds = %if.then.i764, %if.then119.i, %if.then129.i, %if.else136.i
  %retval.0.i767 = phi %union.tree_node* [ %34, %if.then.i764 ], [ %36, %if.then119.i ], [ %call135.i, %if.then129.i ], [ %call139.i, %if.else136.i ]
  %39 = load %union.tree_node** %type.i753, align 8, !tbaa !1
  %call157 = tail call %union.tree_node* @build_unary_op(i32 %code, %union.tree_node* %retval.0.i758, i32 1)
  %call158 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 125, %union.tree_node* %39, %union.tree_node* %call157, %union.tree_node* %retval.0.i767) #6
  ret %union.tree_node* %call158

if.then165:                                       ; preds = %if.end144
  switch i32 %code, label %if.else170 [
    i32 132, label %if.then169
    i32 130, label %if.then169
  ]

if.then169:                                       ; preds = %if.then165, %if.then165
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([33 x i8]* @.str71, i64 0, i64 0)) #6
  br label %if.end171

if.else170:                                       ; preds = %if.then165
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([33 x i8]* @.str72, i64 0, i64 0)) #6
  br label %if.end171

if.end171:                                        ; preds = %if.else170, %if.then169
  %40 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end172:                                        ; preds = %if.end144, %if.end144, %if.end144
  %41 = load %union.tree_node** %type, align 8, !tbaa !1
  %call175 = tail call %union.tree_node* @get_unwidened(%union.tree_node* %xarg, %union.tree_node* null) #6
  %type177 = getelementptr inbounds %union.tree_node* %call175, i64 0, i32 0, i32 0, i32 1
  %42 = load %union.tree_node** %type177, align 8, !tbaa !1
  %cmp178 = icmp eq i32 %.bf.clear, 13
  br i1 %cmp178, label %if.then179, label %if.else231

if.then179:                                       ; preds = %if.end172
  %type181 = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 0, i32 1
  %43 = load %union.tree_node** %type181, align 8, !tbaa !1
  %size = getelementptr inbounds %union.tree_node* %43, i64 0, i32 0, i32 2
  %44 = bitcast i32* %size to %union.tree_node**
  %45 = load %union.tree_node** %44, align 8, !tbaa !8
  %cmp183 = icmp eq %union.tree_node* %45, null
  br i1 %cmp183, label %lor.lhs.false184, label %if.else199

lor.lhs.false184:                                 ; preds = %if.then179
  %code188 = getelementptr inbounds %union.tree_node* %43, i64 0, i32 0, i32 0, i32 2
  %bf.load189 = load i32* %code188, align 8
  %bf.clear190 = and i32 %bf.load189, 255
  %cmp191 = icmp eq i32 %bf.clear190, 5
  br i1 %cmp191, label %if.else199, label %if.then192

if.then192:                                       ; preds = %lor.lhs.false184
  switch i32 %code, label %if.else197 [
    i32 132, label %if.then196
    i32 130, label %if.then196
  ]

if.then196:                                       ; preds = %if.then192, %if.then192
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([42 x i8]* @.str73, i64 0, i64 0)) #6
  br label %if.end227

if.else197:                                       ; preds = %if.then192
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([42 x i8]* @.str74, i64 0, i64 0)) #6
  br label %if.end227

if.else199:                                       ; preds = %if.then179, %lor.lhs.false184
  %46 = load i32* @pedantic, align 4, !tbaa !27
  %47 = load i32* @warn_pointer_arith, align 4
  %48 = or i32 %47, %46
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %if.end227, label %land.lhs.true203

land.lhs.true203:                                 ; preds = %if.else199
  %code207 = getelementptr inbounds %union.tree_node* %43, i64 0, i32 0, i32 0, i32 2
  %bf.load208 = load i32* %code207, align 8
  %bf.clear209 = and i32 %bf.load208, 255
  switch i32 %bf.clear209, label %if.end227 [
    i32 23, label %if.then219
    i32 5, label %if.then219
  ]

if.then219:                                       ; preds = %land.lhs.true203, %land.lhs.true203
  switch i32 %code, label %if.else224 [
    i32 132, label %if.then223
    i32 130, label %if.then223
  ]

if.then223:                                       ; preds = %if.then219, %if.then219
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([33 x i8]* @.str71, i64 0, i64 0)) #6
  br label %if.end227

if.else224:                                       ; preds = %if.then219
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([33 x i8]* @.str72, i64 0, i64 0)) #6
  br label %if.end227

if.end227:                                        ; preds = %land.lhs.true203, %if.else199, %if.else224, %if.then223, %if.then196, %if.else197
  %50 = load %union.tree_node** %type181, align 8, !tbaa !1
  %code1.i748 = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 0, i32 2
  %bf.load.i749 = load i32* %code1.i748, align 8
  %bf.clear.i750 = and i32 %bf.load.i749, 255
  switch i32 %bf.clear.i750, label %if.end.i [
    i32 23, label %if.then.i751
    i32 5, label %if.then.i751
    i32 0, label %if.then.i751
  ]

if.then.i751:                                     ; preds = %if.end227, %if.end227, %if.end227
  %51 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %if.end232

if.end.i:                                         ; preds = %if.end227
  %cmp2.i = icmp eq i32 %bf.clear.i750, 5
  %size.i = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 2
  %52 = bitcast i32* %size.i to %union.tree_node**
  %53 = load %union.tree_node** %52, align 8, !tbaa !8
  %cmp6.not.i = icmp ne %union.tree_node* %53, null
  %brmerge.i = or i1 %cmp6.not.i, %cmp2.i
  br i1 %brmerge.i, label %if.end14.i, label %if.then13.i

if.then13.i:                                      ; preds = %if.end.i
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([44 x i8]* @.str14, i64 0, i64 0)) #6
  %54 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 8, !tbaa !7
  br label %if.end232

if.end14.i:                                       ; preds = %if.end.i
  %55 = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 4
  %56 = load %union.tree_node** %55, align 8, !tbaa !32
  %57 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %type16.i = bitcast %union.tree_node* %57 to %struct.tree_type*
  %precision.i = getelementptr inbounds %struct.tree_type* %type16.i, i64 0, i32 6
  %bf.load17.i = load i32* %precision.i, align 4
  %bf.clear18.i = lshr i32 %bf.load17.i, 3
  %div.i = and i32 %bf.clear18.i, 63
  %conv26.i = zext i32 %div.i to i64
  %call.i = tail call %union.tree_node* @size_int_wide(i64 %conv26.i, i32 0) #6
  %call19.i = tail call %union.tree_node* @size_binop(i32 63, %union.tree_node* %56, %union.tree_node* %call.i) #6
  br label %if.end232

if.else231:                                       ; preds = %if.end172
  %58 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !7
  br label %if.end232

if.end232:                                        ; preds = %if.end14.i, %if.then13.i, %if.then.i751, %if.else231
  %inc.0 = phi %union.tree_node* [ %58, %if.else231 ], [ %51, %if.then.i751 ], [ %call19.i, %if.end14.i ], [ %54, %if.then13.i ]
  %call233 = tail call %union.tree_node* @convert(%union.tree_node* %42, %union.tree_node* %inc.0) #6
  br label %while.body

while.body:                                       ; preds = %land.lhs.true252, %if.end232
  %arg.0 = phi %union.tree_node* [ %call175, %if.end232 ], [ %61, %land.lhs.true252 ]
  %code235 = getelementptr inbounds %union.tree_node* %arg.0, i64 0, i32 0, i32 0, i32 2
  %bf.load236 = load i32* %code235, align 8
  %bf.clear237 = and i32 %bf.load236, 255
  switch i32 %bf.clear237, label %give_up [
    i32 115, label %sw.bb238
    i32 114, label %sw.bb238
    i32 76, label %sw.bb238
    i32 72, label %sw.bb238
    i32 74, label %sw.bb238
    i32 75, label %sw.bb238
    i32 73, label %sw.bb238
  ]

sw.bb238:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %59 = load i32* @pedantic, align 4
  %tobool.i746 = icmp eq i32 %59, 0
  br i1 %tobool.i746, label %pedantic_lvalue_warning.exit, label %if.then.i747

if.then.i747:                                     ; preds = %sw.bb238
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([49 x i8]* @.str179, i64 0, i64 0)) #6
  br label %pedantic_lvalue_warning.exit

pedantic_lvalue_warning.exit:                     ; preds = %sw.bb238, %if.then.i747
  %type240 = getelementptr inbounds %union.tree_node* %arg.0, i64 0, i32 0, i32 0, i32 1
  %60 = load %union.tree_node** %type240, align 8, !tbaa !1
  %code242 = getelementptr inbounds %union.tree_node* %60, i64 0, i32 0, i32 0, i32 2
  %bf.load243 = load i32* %code242, align 8
  %operands = getelementptr inbounds %union.tree_node* %arg.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %61 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %type246 = getelementptr inbounds %union.tree_node* %61, i64 0, i32 0, i32 0, i32 1
  %62 = load %union.tree_node** %type246, align 8, !tbaa !1
  %code248 = getelementptr inbounds %union.tree_node* %62, i64 0, i32 0, i32 0, i32 2
  %bf.load249 = load i32* %code248, align 8
  %63 = xor i32 %bf.load249, %bf.load243
  %64 = and i32 %63, 255
  %cmp251 = icmp eq i32 %64, 0
  br i1 %cmp251, label %land.lhs.true252, label %if.else273

land.lhs.true252:                                 ; preds = %pedantic_lvalue_warning.exit
  %type255 = bitcast %union.tree_node* %60 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type255, i64 0, i32 6
  %bf.load256 = load i32* %mode, align 4
  %type263 = bitcast %union.tree_node* %62 to %struct.tree_type*
  %mode264 = getelementptr inbounds %struct.tree_type* %type263, i64 0, i32 6
  %bf.load265 = load i32* %mode264, align 4
  %bf.lshr711 = xor i32 %bf.load265, %bf.load256
  %65 = and i32 %bf.lshr711, 65024
  %cmp268 = icmp eq i32 %65, 0
  br i1 %cmp268, label %while.body, label %if.else273

if.else273:                                       ; preds = %land.lhs.true252, %pedantic_lvalue_warning.exit
  %bf.clear279 = and i32 %bf.load243, 255
  %cmp280 = icmp eq i32 %bf.clear279, 11
  br i1 %cmp280, label %if.then281, label %if.else283

if.then281:                                       ; preds = %if.else273
  %call282 = tail call %union.tree_node* @boolean_increment(i32 %code, %union.tree_node* %arg.0) #6
  br label %if.end302

if.else283:                                       ; preds = %if.else273
  %call284 = tail call %union.tree_node* @stabilize_reference(%union.tree_node* %arg.0) #6
  %cmp285 = icmp eq i32 %code, 130
  %code.off = add i32 %code, -129
  %66 = icmp ult i32 %code.off, 2
  br i1 %66, label %if.end291, label %if.else289

if.else289:                                       ; preds = %if.else283
  %call290 = tail call %union.tree_node* @save_expr(%union.tree_node* %call284) #6
  br label %if.end291

if.end291:                                        ; preds = %if.else283, %if.else289
  %value.0 = phi %union.tree_node* [ %call290, %if.else289 ], [ %call284, %if.else283 ]
  br i1 %cmp285, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end291
  %cmp293 = icmp eq i32 %code, 132
  %phitmp = select i1 %cmp293, i32 59, i32 60
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end291
  %67 = phi i32 [ 59, %if.end291 ], [ %phitmp, %lor.rhs ]
  %call294 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %67, %union.tree_node* %42, %union.tree_node* %value.0, %union.tree_node* %call233) #6
  %side_effects_flag = getelementptr inbounds %union.tree_node* %call294, i64 0, i32 0, i32 0, i32 2
  %bf.load296 = load i32* %side_effects_flag, align 8
  %bf.set = or i32 %bf.load296, 256
  store i32 %bf.set, i32* %side_effects_flag, align 8
  %call298 = tail call %union.tree_node* @build_modify_expr(%union.tree_node* %call284, i32 115, %union.tree_node* %call294)
  %type300 = getelementptr inbounds %union.tree_node* %call284, i64 0, i32 0, i32 0, i32 1
  %68 = load %union.tree_node** %type300, align 8, !tbaa !1
  %call301 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 47, %union.tree_node* %68, %union.tree_node* %call298, %union.tree_node* %value.0) #6
  br label %if.end302

if.end302:                                        ; preds = %lor.end, %if.then281
  %value.1 = phi %union.tree_node* [ %call282, %if.then281 ], [ %call301, %lor.end ]
  %used_flag = getelementptr inbounds %union.tree_node* %value.1, i64 0, i32 0, i32 0, i32 2
  %bf.load304 = load i32* %used_flag, align 8
  %bf.set306 = or i32 %bf.load304, 65536
  store i32 %bf.set306, i32* %used_flag, align 8
  br label %return

give_up:                                          ; preds = %while.body
  %cmp308 = icmp eq i32 %code, 130
  br i1 %cmp308, label %lor.end311, label %lor.rhs309

lor.rhs309:                                       ; preds = %give_up
  %cmp310 = icmp eq i32 %code, 132
  %phitmp708 = select i1 %cmp310, i8* getelementptr inbounds ([28 x i8]* @.str75, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8]* @.str76, i64 0, i64 0)
  br label %lor.end311

lor.end311:                                       ; preds = %lor.rhs309, %give_up
  %69 = phi i8* [ getelementptr inbounds ([28 x i8]* @.str75, i64 0, i64 0), %give_up ], [ %phitmp708, %lor.rhs309 ]
  br label %tailrecurse.i.i723

tailrecurse.i.i723:                               ; preds = %sw.bb.i.i726, %lor.end311
  %bf.load.i.i721 = phi i32 [ %bf.load236, %lor.end311 ], [ %bf.load.i.i721.pre, %sw.bb.i.i726 ]
  %ref.tr.i.i719 = phi %union.tree_node* [ %arg.0, %lor.end311 ], [ %70, %sw.bb.i.i726 ]
  %bf.clear.i.i722 = and i32 %bf.load.i.i721, 255
  switch i32 %bf.clear.i.i722, label %lvalue_or_else.exit745.thread [
    i32 127, label %sw.bb.i.i726
    i32 128, label %sw.bb.i.i726
    i32 39, label %sw.bb.i.i726
    i32 170, label %if.end316
    i32 29, label %if.end316
    i32 41, label %sw.bb3.i.i735
    i32 43, label %sw.bb3.i.i735
    i32 34, label %sw.bb3.i.i735
    i32 35, label %sw.bb3.i.i735
    i32 36, label %sw.bb3.i.i735
    i32 0, label %sw.bb3.i.i735
    i32 52, label %lvalue_p.exit.i742
    i32 120, label %lvalue_p.exit.i742
  ]

sw.bb.i.i726:                                     ; preds = %tailrecurse.i.i723, %tailrecurse.i.i723, %tailrecurse.i.i723
  %operands.i.i724 = getelementptr inbounds %union.tree_node* %ref.tr.i.i719, i64 0, i32 0, i32 2
  %arrayidx.i.i725 = bitcast i32* %operands.i.i724 to %union.tree_node**
  %70 = load %union.tree_node** %arrayidx.i.i725, align 8, !tbaa !7
  %code1.i.i720.phi.trans.insert = getelementptr inbounds %union.tree_node* %70, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i721.pre = load i32* %code1.i.i720.phi.trans.insert, align 8
  br label %tailrecurse.i.i723

sw.bb3.i.i735:                                    ; preds = %tailrecurse.i.i723, %tailrecurse.i.i723, %tailrecurse.i.i723, %tailrecurse.i.i723, %tailrecurse.i.i723, %tailrecurse.i.i723
  %.in841 = getelementptr inbounds %union.tree_node* %ref.tr.i.i719, i64 0, i32 0, i32 0, i32 1
  %71 = load %union.tree_node** %.in841, align 8
  %code6.i.i728 = getelementptr inbounds %union.tree_node* %71, i64 0, i32 0, i32 0, i32 2
  %bf.load7.i.i729 = load i32* %code6.i.i728, align 8
  %bf.clear8.i.i730 = and i32 %bf.load7.i.i729, 255
  %cmp15.i.i731 = icmp ne i32 %bf.clear8.i.i730, 16
  %not.cmp.i.i732 = icmp ne i32 %bf.clear8.i.i730, 23
  %.cmp15.i.i733 = and i1 %cmp15.i.i731, %not.cmp.i.i732
  %land.ext.i13.i734 = zext i1 %.cmp15.i.i733 to i32
  switch i32 %bf.clear8.i.i730, label %lvalue_or_else.exit745 [
    i32 23, label %lvalue_or_else.exit745.thread
    i32 16, label %lvalue_or_else.exit745.thread
  ]

lvalue_p.exit.i742:                               ; preds = %tailrecurse.i.i723, %tailrecurse.i.i723
  %.in = getelementptr inbounds %union.tree_node* %ref.tr.i.i719, i64 0, i32 0, i32 0, i32 1
  %72 = load %union.tree_node** %.in, align 8
  %code20.i.i737 = getelementptr inbounds %union.tree_node* %72, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i.i738 = load i32* %code20.i.i737, align 8
  %bf.clear22.i.i739 = and i32 %bf.load21.i.i738, 255
  %cmp23.i.i740 = icmp eq i32 %bf.clear22.i.i739, 18
  %land.ext.i.i741 = zext i1 %cmp23.i.i740 to i32
  br i1 %cmp23.i.i740, label %lvalue_or_else.exit745, label %lvalue_or_else.exit745.thread

lvalue_or_else.exit745.thread:                    ; preds = %tailrecurse.i.i723, %sw.bb3.i.i735, %sw.bb3.i.i735, %lvalue_p.exit.i742
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([3 x i8]* @.str81, i64 0, i64 0), i8* %69) #6
  br label %if.then315

lvalue_or_else.exit745:                           ; preds = %sw.bb3.i.i735, %lvalue_p.exit.i742
  %retval.0.i3.i744 = phi i32 [ %land.ext.i.i741, %lvalue_p.exit.i742 ], [ %land.ext.i13.i734, %sw.bb3.i.i735 ]
  %tobool314 = icmp eq i32 %retval.0.i3.i744, 0
  br i1 %tobool314, label %if.then315, label %if.end316

if.then315:                                       ; preds = %lvalue_or_else.exit745.thread, %lvalue_or_else.exit745
  %73 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end316:                                        ; preds = %tailrecurse.i.i723, %tailrecurse.i.i723, %lvalue_or_else.exit745
  %bf.clear320 = and i32 %bf.load236, 4096
  %tobool321 = icmp eq i32 %bf.clear320, 0
  br i1 %tobool321, label %if.end328, label %if.then322

if.then322:                                       ; preds = %if.end316
  br i1 %cmp308, label %lor.end326, label %lor.rhs324

lor.rhs324:                                       ; preds = %if.then322
  %cmp325 = icmp eq i32 %code, 132
  %phitmp709 = select i1 %cmp325, i8* getelementptr inbounds ([10 x i8]* @.str77, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @.str78, i64 0, i64 0)
  br label %lor.end326

lor.end326:                                       ; preds = %lor.rhs324, %if.then322
  %74 = phi i8* [ getelementptr inbounds ([10 x i8]* @.str77, i64 0, i64 0), %if.then322 ], [ %phitmp709, %lor.rhs324 ]
  br label %tailrecurse.i714

tailrecurse.i714:                                 ; preds = %if.then.i718.tailrecurse.i714_crit_edge, %lor.end326
  %bf.load.i712 = phi i32 [ %bf.load236, %lor.end326 ], [ %bf.load.i712.pre, %if.then.i718.tailrecurse.i714_crit_edge ]
  %arg.tr.i = phi %union.tree_node* [ %arg.0, %lor.end326 ], [ %75, %if.then.i718.tailrecurse.i714_crit_edge ]
  %bf.clear.i713 = and i32 %bf.load.i712, 255
  switch i32 %bf.clear.i713, label %if.else24.i [
    i32 39, label %if.then.i718
    i32 34, label %if.then18.i
  ]

if.then.i718:                                     ; preds = %tailrecurse.i714
  %operands.i715 = getelementptr inbounds %union.tree_node* %arg.tr.i, i64 0, i32 0, i32 2
  %arrayidx.i716 = bitcast i32* %operands.i715 to %union.tree_node**
  %75 = load %union.tree_node** %arrayidx.i716, align 8, !tbaa !7
  %type.i717 = getelementptr inbounds %union.tree_node* %75, i64 0, i32 0, i32 0, i32 1
  %76 = load %union.tree_node** %type.i717, align 8, !tbaa !1
  %readonly_flag.i = getelementptr inbounds %union.tree_node* %76, i64 0, i32 0, i32 0, i32 2
  %bf.load3.i = load i32* %readonly_flag.i, align 8
  %bf.clear4.i = and i32 %bf.load3.i, 4096
  %tobool.i = icmp eq i32 %bf.clear4.i, 0
  br i1 %tobool.i, label %if.else.i, label %if.then.i718.tailrecurse.i714_crit_edge

if.then.i718.tailrecurse.i714_crit_edge:          ; preds = %if.then.i718
  %code.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %75, i64 0, i32 0, i32 0, i32 2
  %bf.load.i712.pre = load i32* %code.i.phi.trans.insert, align 8
  br label %tailrecurse.i714

if.else.i:                                        ; preds = %if.then.i718
  %arrayidx11.i = getelementptr inbounds i32* %operands.i715, i64 2
  %77 = bitcast i32* %arrayidx11.i to %union.tree_node**
  %78 = load %union.tree_node** %77, align 8, !tbaa !7
  %name.i = getelementptr inbounds %union.tree_node* %78, i64 0, i32 0, i32 8
  %79 = load %union.tree_node** %name.i, align 8, !tbaa !11
  %id.i = getelementptr inbounds %union.tree_node* %79, i64 0, i32 0, i32 1
  %80 = getelementptr inbounds i8** %id.i, i64 1
  %81 = load i8** %80, align 8, !tbaa !13
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([28 x i8]* @.str82, i64 0, i64 0), i8* %74, i8* %81) #6
  br label %if.end328

if.then18.i:                                      ; preds = %tailrecurse.i714
  %name20.i = getelementptr inbounds %union.tree_node* %arg.tr.i, i64 0, i32 0, i32 8
  %82 = load %union.tree_node** %name20.i, align 8, !tbaa !11
  %id22.i = getelementptr inbounds %union.tree_node* %82, i64 0, i32 0, i32 1
  %83 = getelementptr inbounds i8** %id22.i, i64 1
  %84 = load i8** %83, align 8, !tbaa !13
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([30 x i8]* @.str83, i64 0, i64 0), i8* %74, i8* %84) #6
  br label %if.end328

if.else24.i:                                      ; preds = %tailrecurse.i714
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([25 x i8]* @.str84, i64 0, i64 0), i8* %74) #6
  br label %if.end328

if.end328:                                        ; preds = %if.else24.i, %if.then18.i, %if.else.i, %if.end316
  %type330 = getelementptr inbounds %union.tree_node* %arg.0, i64 0, i32 0, i32 0, i32 1
  %85 = load %union.tree_node** %type330, align 8, !tbaa !1
  %code332 = getelementptr inbounds %union.tree_node* %85, i64 0, i32 0, i32 0, i32 2
  %bf.load333 = load i32* %code332, align 8
  %bf.clear334 = and i32 %bf.load333, 255
  %cmp335 = icmp eq i32 %bf.clear334, 11
  br i1 %cmp335, label %if.then336, label %if.else338

if.then336:                                       ; preds = %if.end328
  %call337 = tail call %union.tree_node* @boolean_increment(i32 %code, %union.tree_node* %arg.0) #6
  br label %if.end342

if.else338:                                       ; preds = %if.end328
  %call341 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %code, %union.tree_node* %85, %union.tree_node* %arg.0, %union.tree_node* %call233) #6
  br label %if.end342

if.end342:                                        ; preds = %if.else338, %if.then336
  %val.0 = phi %union.tree_node* [ %call337, %if.then336 ], [ %call341, %if.else338 ]
  %side_effects_flag344 = getelementptr inbounds %union.tree_node* %val.0, i64 0, i32 0, i32 0, i32 2
  %bf.load345 = load i32* %side_effects_flag344, align 8
  %bf.set347 = or i32 %bf.load345, 256
  store i32 %bf.set347, i32* %side_effects_flag344, align 8
  %call348 = tail call %union.tree_node* @convert(%union.tree_node* %41, %union.tree_node* %val.0) #6
  %code350 = getelementptr inbounds %union.tree_node* %call348, i64 0, i32 0, i32 0, i32 2
  %bf.load351 = load i32* %code350, align 8
  %bf.clear352 = and i32 %bf.load351, 255
  %cmp353 = icmp eq i32 %bf.clear352, %code
  br i1 %cmp353, label %return, label %if.then354

if.then354:                                       ; preds = %if.end342
  %bf.set358 = or i32 %bf.load351, 262144
  store i32 %bf.set358, i32* %code350, align 8
  br label %return

sw.bb360:                                         ; preds = %if.end
  %code362 = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 0, i32 2
  %bf.load363 = load i32* %code362, align 8
  %bf.clear364 = and i32 %bf.load363, 255
  switch i32 %bf.clear364, label %if.end402 [
    i32 41, label %if.then366
    i32 43, label %if.then387
  ]

if.then366:                                       ; preds = %sw.bb360
  %operands368 = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 2
  %arrayidx369 = bitcast i32* %operands368 to %union.tree_node**
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %sw.bb.i, %if.then366
  %ref.tr.i.in = phi %union.tree_node** [ %arrayidx369, %if.then366 ], [ %arrayidx.i, %sw.bb.i ]
  %ref.tr.i = load %union.tree_node** %ref.tr.i.in, align 8
  %code1.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code1.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  switch i32 %bf.clear.i, label %lvalue_p.exit.thread [
    i32 127, label %sw.bb.i
    i32 128, label %sw.bb.i
    i32 39, label %sw.bb.i
    i32 170, label %lvalue_p.exit.thread773
    i32 29, label %lvalue_p.exit.thread773
    i32 41, label %sw.bb3.i
    i32 43, label %sw.bb3.i
    i32 34, label %sw.bb3.i
    i32 35, label %sw.bb3.i
    i32 36, label %sw.bb3.i
    i32 0, label %sw.bb3.i
    i32 52, label %lvalue_p.exit
    i32 120, label %lvalue_p.exit
  ]

lvalue_p.exit.thread:                             ; preds = %tailrecurse.i
  %86 = load %union.tree_node** %arrayidx369, align 8, !tbaa !7
  br label %return

sw.bb.i:                                          ; preds = %tailrecurse.i, %tailrecurse.i, %tailrecurse.i
  %operands.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 2
  %arrayidx.i = bitcast i32* %operands.i to %union.tree_node**
  br label %tailrecurse.i

sw.bb3.i:                                         ; preds = %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i
  %type.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 1
  %87 = load %union.tree_node** %type.i, align 8, !tbaa !1
  %code6.i = getelementptr inbounds %union.tree_node* %87, i64 0, i32 0, i32 0, i32 2
  %bf.load7.i = load i32* %code6.i, align 8
  %bf.clear8.i = and i32 %bf.load7.i, 255
  %88 = load %union.tree_node** %arrayidx369, align 8, !tbaa !7
  switch i32 %bf.clear8.i, label %if.then372 [
    i32 23, label %return
    i32 16, label %return
  ]

lvalue_p.exit.thread773:                          ; preds = %tailrecurse.i, %tailrecurse.i
  %89 = load %union.tree_node** %arrayidx369, align 8, !tbaa !7
  br label %if.then372

lvalue_p.exit:                                    ; preds = %tailrecurse.i, %tailrecurse.i
  %type18.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 1
  %90 = load %union.tree_node** %type18.i, align 8, !tbaa !1
  %code20.i = getelementptr inbounds %union.tree_node* %90, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i = load i32* %code20.i, align 8
  %bf.clear22.i = and i32 %bf.load21.i, 255
  %cmp23.i = icmp eq i32 %bf.clear22.i, 18
  %91 = load %union.tree_node** %arrayidx369, align 8, !tbaa !7
  br i1 %cmp23.i, label %if.then372, label %return

if.then372:                                       ; preds = %sw.bb3.i, %lvalue_p.exit, %lvalue_p.exit.thread773
  %92 = phi %union.tree_node* [ %89, %lvalue_p.exit.thread773 ], [ %91, %lvalue_p.exit ], [ %88, %sw.bb3.i ]
  %call376 = tail call %union.tree_node* @non_lvalue(%union.tree_node* %92) #6
  br label %return

if.then387:                                       ; preds = %sw.bb360
  %operands389 = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 2
  %arrayidx390 = bitcast i32* %operands389 to %union.tree_node**
  %93 = load %union.tree_node** %arrayidx390, align 8, !tbaa !7
  %call391 = tail call i32 @mark_addressable(%union.tree_node* %93)
  %cmp392 = icmp eq i32 %call391, 0
  br i1 %cmp392, label %if.then393, label %if.end394

if.then393:                                       ; preds = %if.then387
  %94 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end394:                                        ; preds = %if.then387
  %95 = load %union.tree_node** %arrayidx390, align 8, !tbaa !7
  %arrayidx400 = getelementptr inbounds i32* %operands389, i64 2
  %96 = bitcast i32* %arrayidx400 to %union.tree_node**
  %97 = load %union.tree_node** %96, align 8, !tbaa !7
  %call401 = tail call %union.tree_node* @build_binary_op(i32 59, %union.tree_node* %95, %union.tree_node* %97, i32 1)
  br label %return

if.end402:                                        ; preds = %sw.bb360
  %call403 = tail call fastcc %union.tree_node* @unary_complex_lvalue(i32 121, %union.tree_node* %xarg, i32 %flag)
  %cmp404 = icmp eq %union.tree_node* %call403, null
  br i1 %cmp404, label %if.else406, label %return

if.else406:                                       ; preds = %if.end402
  %cmp407 = icmp eq i32 %.bf.clear, 23
  %tobool409 = icmp ne i32 %flag, 0
  %or.cond550 = or i1 %cmp407, %tobool409
  br i1 %or.cond550, label %if.end415, label %tailrecurse.i.i

tailrecurse.i.i:                                  ; preds = %if.else406, %sw.bb.i.i
  %ref.tr.i.i = phi %union.tree_node* [ %98, %sw.bb.i.i ], [ %xarg, %if.else406 ]
  %code1.i.i = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %code1.i.i, align 8
  %bf.clear.i.i = and i32 %bf.load.i.i, 255
  switch i32 %bf.clear.i.i, label %lvalue_or_else.exit.thread [
    i32 127, label %sw.bb.i.i
    i32 128, label %sw.bb.i.i
    i32 39, label %sw.bb.i.i
    i32 170, label %if.end415
    i32 29, label %if.end415
    i32 41, label %sw.bb3.i.i
    i32 43, label %sw.bb3.i.i
    i32 34, label %sw.bb3.i.i
    i32 35, label %sw.bb3.i.i
    i32 36, label %sw.bb3.i.i
    i32 0, label %sw.bb3.i.i
    i32 52, label %lvalue_p.exit.i
    i32 120, label %lvalue_p.exit.i
  ]

sw.bb.i.i:                                        ; preds = %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i
  %operands.i.i = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 2
  %arrayidx.i.i = bitcast i32* %operands.i.i to %union.tree_node**
  %98 = load %union.tree_node** %arrayidx.i.i, align 8, !tbaa !7
  br label %tailrecurse.i.i

sw.bb3.i.i:                                       ; preds = %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i
  %type.i.i = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 0, i32 1
  %99 = load %union.tree_node** %type.i.i, align 8, !tbaa !1
  %code6.i.i = getelementptr inbounds %union.tree_node* %99, i64 0, i32 0, i32 0, i32 2
  %bf.load7.i.i = load i32* %code6.i.i, align 8
  %bf.clear8.i.i = and i32 %bf.load7.i.i, 255
  %cmp15.i.i = icmp ne i32 %bf.clear8.i.i, 16
  %not.cmp.i.i = icmp ne i32 %bf.clear8.i.i, 23
  %.cmp15.i.i = and i1 %cmp15.i.i, %not.cmp.i.i
  %land.ext.i13.i = zext i1 %.cmp15.i.i to i32
  switch i32 %bf.clear8.i.i, label %lvalue_or_else.exit [
    i32 23, label %lvalue_or_else.exit.thread
    i32 16, label %lvalue_or_else.exit.thread
  ]

lvalue_p.exit.i:                                  ; preds = %tailrecurse.i.i, %tailrecurse.i.i
  %type18.i.i = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 0, i32 1
  %100 = load %union.tree_node** %type18.i.i, align 8, !tbaa !1
  %code20.i.i = getelementptr inbounds %union.tree_node* %100, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i.i = load i32* %code20.i.i, align 8
  %bf.clear22.i.i = and i32 %bf.load21.i.i, 255
  %cmp23.i.i = icmp eq i32 %bf.clear22.i.i, 18
  %land.ext.i.i = zext i1 %cmp23.i.i to i32
  br i1 %cmp23.i.i, label %lvalue_or_else.exit, label %lvalue_or_else.exit.thread

lvalue_or_else.exit.thread:                       ; preds = %tailrecurse.i.i, %sw.bb3.i.i, %sw.bb3.i.i, %lvalue_p.exit.i
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([3 x i8]* @.str81, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8]* @.str79, i64 0, i64 0)) #6
  br label %if.then413

lvalue_or_else.exit:                              ; preds = %sw.bb3.i.i, %lvalue_p.exit.i
  %retval.0.i3.i = phi i32 [ %land.ext.i.i, %lvalue_p.exit.i ], [ %land.ext.i13.i, %sw.bb3.i.i ]
  %tobool412 = icmp eq i32 %retval.0.i3.i, 0
  br i1 %tobool412, label %if.then413, label %if.end415

if.then413:                                       ; preds = %lvalue_or_else.exit.thread, %lvalue_or_else.exit
  %101 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end415:                                        ; preds = %tailrecurse.i.i, %tailrecurse.i.i, %lvalue_or_else.exit, %if.else406
  %102 = load %union.tree_node** %type, align 8, !tbaa !1
  %bf.load420 = load i32* %code362, align 8
  %bf.clear421 = and i32 %bf.load420, 255
  %idxprom710 = zext i32 %bf.clear421 to i64
  %arrayidx422 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom710
  %103 = load i8* %arrayidx422, align 1, !tbaa !34
  switch i8 %103, label %if.end464 [
    i8 100, label %land.lhs.true435
    i8 114, label %land.lhs.true435
  ]

land.lhs.true435:                                 ; preds = %if.end415, %if.end415
  %104 = and i32 %bf.load420, 6144
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %if.end464, label %if.then448

if.then448:                                       ; preds = %land.lhs.true435
  %bf.clear453 = lshr i32 %bf.load420, 12
  %bf.clear453.lobit = and i32 %bf.clear453, 1
  %bf.clear460 = lshr i32 %bf.load420, 10
  %106 = and i32 %bf.clear460, 2
  %or = or i32 %bf.clear453.lobit, %106
  %call463 = tail call %union.tree_node* @c_build_qualified_type(%union.tree_node* %102, i32 %or) #6
  br label %if.end464

if.end464:                                        ; preds = %land.lhs.true435, %if.end415, %if.then448
  %argtype.0 = phi %union.tree_node* [ %call463, %if.then448 ], [ %102, %if.end415 ], [ %102, %land.lhs.true435 ]
  %call465 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %argtype.0) #6
  %call466 = tail call i32 @mark_addressable(%union.tree_node* %xarg)
  %cmp467 = icmp eq i32 %call466, 0
  br i1 %cmp467, label %if.then469, label %if.end470

if.then469:                                       ; preds = %if.end464
  %107 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end470:                                        ; preds = %if.end464
  %bf.load473 = load i32* %code362, align 8
  %bf.clear474 = and i32 %bf.load473, 255
  %cmp475 = icmp eq i32 %bf.clear474, 39
  br i1 %cmp475, label %if.then477, label %if.else498

if.then477:                                       ; preds = %if.end470
  %operands479 = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 2
  %arrayidx480 = getelementptr inbounds i32* %operands479, i64 2
  %108 = bitcast i32* %arrayidx480 to %union.tree_node**
  %109 = load %union.tree_node** %108, align 8, !tbaa !7
  %arrayidx483 = bitcast i32* %operands479 to %union.tree_node**
  %110 = load %union.tree_node** %arrayidx483, align 8, !tbaa !7
  %call484 = tail call %union.tree_node* @build_unary_op(i32 121, %union.tree_node* %110, i32 %flag)
  %lang_flag_4 = getelementptr inbounds %union.tree_node* %109, i64 0, i32 0, i32 5
  %111 = bitcast i48* %lang_flag_4 to i64*
  %bf.load485 = load i64* %111, align 8
  %bf.cast = and i64 %bf.load485, 2199023255552
  %cmp488 = icmp eq i64 %bf.cast, 0
  br i1 %cmp488, label %if.end492, label %if.then490

if.then490:                                       ; preds = %if.then477
  %name = getelementptr inbounds %union.tree_node* %109, i64 0, i32 0, i32 8
  %112 = load %union.tree_node** %name, align 8, !tbaa !11
  %id = getelementptr inbounds %union.tree_node* %112, i64 0, i32 0, i32 1
  %113 = getelementptr inbounds i8** %id, i64 1
  %114 = load i8** %113, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([59 x i8]* @.str80, i64 0, i64 0), i8* %114) #6
  %115 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end492:                                        ; preds = %if.then477
  %call493 = tail call %union.tree_node* @convert(%union.tree_node* %call465, %union.tree_node* %call484) #6
  %call494 = tail call %union.tree_node* @byte_position(%union.tree_node* %109) #6
  %call495 = tail call %union.tree_node* @convert(%union.tree_node* %call465, %union.tree_node* %call494) #6
  %call496 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 59, %union.tree_node* %call465, %union.tree_node* %call493, %union.tree_node* %call495) #6
  %call497 = tail call %union.tree_node* @fold(%union.tree_node* %call496) #6
  br label %if.end500

if.else498:                                       ; preds = %if.end470
  %call499 = tail call %union.tree_node* @build1(i32 121, %union.tree_node* %call465, %union.tree_node* %xarg) #6
  br label %if.end500

if.end500:                                        ; preds = %if.else498, %if.end492
  %addr.0 = phi %union.tree_node* [ %call497, %if.end492 ], [ %call499, %if.else498 ]
  %call501 = tail call i32 @staticp(%union.tree_node* %xarg) #6
  %tobool502 = icmp eq i32 %call501, 0
  br i1 %tobool502, label %return, label %land.lhs.true503

land.lhs.true503:                                 ; preds = %if.end500
  %bf.load506 = load i32* %code362, align 8
  %bf.clear507 = and i32 %bf.load506, 255
  %cmp508 = icmp eq i32 %bf.clear507, 30
  br i1 %cmp508, label %land.lhs.true510, label %if.then514

land.lhs.true510:                                 ; preds = %land.lhs.true503
  %context = getelementptr inbounds %union.tree_node* %xarg, i64 0, i32 0, i32 9
  %116 = load %union.tree_node** %context, align 8, !tbaa !54
  %cmp512 = icmp eq %union.tree_node* %116, null
  br i1 %cmp512, label %if.then514, label %return

if.then514:                                       ; preds = %land.lhs.true510, %land.lhs.true503
  %constant_flag = getelementptr inbounds %union.tree_node* %addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load516 = load i32* %constant_flag, align 8
  %bf.set518 = or i32 %bf.load516, 512
  store i32 %bf.set518, i32* %constant_flag, align 8
  br label %return

if.then524:                                       ; preds = %if.then13, %if.then25, %if.then44, %if.then36, %if.then58, %if.then71, %if.end, %if.else69, %if.else56, %if.else42, %if.end34, %if.else23, %if.else
  %arg.1 = phi %union.tree_node* [ %xarg, %if.end ], [ %xarg, %if.else69 ], [ %call72, %if.then71 ], [ %xarg, %if.else56 ], [ %call59, %if.then58 ], [ %xarg, %if.end34 ], [ %call37, %if.then36 ], [ %xarg, %if.else42 ], [ %call45, %if.then44 ], [ %xarg, %if.else23 ], [ %call26, %if.then25 ], [ %xarg, %if.else ], [ %call, %if.then13 ]
  %code.addr.0 = phi i32 [ %code, %if.end ], [ 126, %if.else69 ], [ 126, %if.then71 ], [ 80, %if.else56 ], [ 80, %if.then58 ], [ 126, %if.end34 ], [ 126, %if.then36 ], [ 90, %if.else42 ], [ 90, %if.then44 ], [ 77, %if.else23 ], [ 77, %if.then25 ], [ 114, %if.else ], [ 114, %if.then13 ]
  %type526 = getelementptr inbounds %union.tree_node* %arg.1, i64 0, i32 0, i32 0, i32 1
  %117 = load %union.tree_node** %type526, align 8, !tbaa !1
  %call528 = tail call %union.tree_node* @build1(i32 %code.addr.0, %union.tree_node* %117, %union.tree_node* %arg.1) #6
  %call529 = tail call %union.tree_node* @fold(%union.tree_node* %call528) #6
  br label %return

return:                                           ; preds = %sw.bb3.i, %sw.bb3.i, %lvalue_p.exit, %lvalue_p.exit.thread, %if.then514, %if.end500, %land.lhs.true510, %if.end402, %if.then354, %if.end342, %sw.bb140, %if.else97, %if.then524, %if.then490, %if.then469, %if.then413, %if.end394, %if.then393, %if.then372, %if.then315, %if.end302, %if.end171, %if.else136, %if.then129, %if.then119, %if.then105, %if.then96, %if.end87, %if.then86, %if.then68, %if.then55, %if.then41, %if.then22, %if.then12, %if.then
  %retval.0 = phi %union.tree_node* [ %1, %if.then ], [ %call529, %if.then524 ], [ %40, %if.end171 ], [ %73, %if.then315 ], [ %value.1, %if.end302 ], [ %24, %if.then119 ], [ %call135, %if.then129 ], [ %call139, %if.else136 ], [ %21, %if.then96 ], [ %call111, %if.then105 ], [ %call376, %if.then372 ], [ %94, %if.then393 ], [ %call401, %if.end394 ], [ %107, %if.then469 ], [ %115, %if.then490 ], [ %101, %if.then413 ], [ %19, %if.then86 ], [ %call89, %if.end87 ], [ %17, %if.then68 ], [ %14, %if.then55 ], [ %11, %if.then41 ], [ %9, %if.then22 ], [ %6, %if.then12 ], [ %xarg, %if.else97 ], [ %call141, %sw.bb140 ], [ %call348, %if.end342 ], [ %call348, %if.then354 ], [ %91, %lvalue_p.exit ], [ %call403, %if.end402 ], [ %addr.0, %land.lhs.true510 ], [ %addr.0, %if.end500 ], [ %addr.0, %if.then514 ], [ %86, %lvalue_p.exit.thread ], [ %88, %sw.bb3.i ], [ %88, %sw.bb3.i ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @invert_truthvalue(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @unary_complex_lvalue(i32 %code, %union.tree_node* nocapture readonly %arg, i32 %flag) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return [
    i32 47, label %if.then
    i32 51, label %if.then21
  ]

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %0 = bitcast i32* %arrayidx to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !7
  %call = tail call %union.tree_node* @build_unary_op(i32 %code, %union.tree_node* %1, i32 0)
  %type = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !1
  %code4 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load5 = load i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 23
  %tobool = icmp ne i32 %flag, 0
  %or.cond = or i1 %cmp7, %tobool
  %3 = load i32* @pedantic, align 4
  %tobool.i68 = icmp eq i32 %3, 0
  %or.cond71 = or i1 %or.cond, %tobool.i68
  br i1 %or.cond71, label %if.end, label %if.then.i69

if.then.i69:                                      ; preds = %if.then
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([53 x i8]* @.str178, i64 0, i64 0)) #6
  br label %if.end

if.end:                                           ; preds = %if.then.i69, %if.then
  %type10 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type10, align 8, !tbaa !1
  %arrayidx13 = bitcast i32* %operands to %union.tree_node**
  %5 = load %union.tree_node** %arrayidx13, align 8, !tbaa !7
  %call14 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 47, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %call) #6
  br label %return

if.then21:                                        ; preds = %entry
  %tobool22 = icmp ne i32 %flag, 0
  %6 = load i32* @pedantic, align 4
  %tobool.i65 = icmp eq i32 %6, 0
  %or.cond72 = or i1 %tobool22, %tobool.i65
  br i1 %or.cond72, label %if.end24, label %if.then.i66

if.then.i66:                                      ; preds = %if.then21
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([56 x i8]* @.str177, i64 0, i64 0)) #6
  %.pre = load i32* @pedantic, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then.i66, %if.then21
  %7 = phi i32 [ %.pre, %if.then.i66 ], [ %6, %if.then21 ]
  %type26 = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type26, align 8, !tbaa !1
  %code28 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load29 = load i32* %code28, align 8
  %bf.clear30 = and i32 %bf.load29, 255
  %cmp31 = icmp eq i32 %bf.clear30, 23
  %or.cond49 = or i1 %cmp31, %tobool22
  %tobool.i = icmp eq i32 %7, 0
  %or.cond73 = or i1 %or.cond49, %tobool.i
  br i1 %or.cond73, label %if.end35, label %if.then.i

if.then.i:                                        ; preds = %if.end24
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([53 x i8]* @.str178, i64 0, i64 0)) #6
  br label %if.end35

if.end35:                                         ; preds = %if.then.i, %if.end24
  %operands37 = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 2
  %arrayidx38 = bitcast i32* %operands37 to %union.tree_node**
  %9 = load %union.tree_node** %arrayidx38, align 8, !tbaa !7
  %arrayidx41 = getelementptr inbounds i32* %operands37, i64 2
  %10 = bitcast i32* %arrayidx41 to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !7
  %call42 = tail call %union.tree_node* @build_unary_op(i32 %code, %union.tree_node* %11, i32 %flag)
  %arrayidx45 = getelementptr inbounds i32* %operands37, i64 4
  %12 = bitcast i32* %arrayidx45 to %union.tree_node**
  %13 = load %union.tree_node** %12, align 8, !tbaa !7
  %call46 = tail call %union.tree_node* @build_unary_op(i32 %code, %union.tree_node* %13, i32 %flag)
  %call47 = tail call %union.tree_node* @build_conditional_expr(%union.tree_node* %9, %union.tree_node* %call42, %union.tree_node* %call46)
  br label %return

return:                                           ; preds = %entry, %if.end35, %if.end
  %retval.0 = phi %union.tree_node* [ %call14, %if.end ], [ %call47, %if.end35 ], [ null, %entry ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @stabilize_reference(%union.tree_node*) #1

declare %union.tree_node* @get_unwidened(%union.tree_node*, %union.tree_node*) #1

declare %union.tree_node* @boolean_increment(i32, %union.tree_node*) #1

declare %union.tree_node* @save_expr(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_modify_expr(%union.tree_node* %lhs, i32 %modifycode, %union.tree_node* %rhs) #0 {
entry:
  %type = getelementptr inbounds %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !1
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp.i = icmp eq %union.tree_node* %1, %lhs
  %cmp2.i = icmp eq %union.tree_node* %0, %1
  %or.cond.i = or i1 %cmp.i, %cmp2.i
  br i1 %or.cond.i, label %require_complete_type.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %size.i = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 2
  %2 = bitcast i32* %size.i to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !8
  %cmp4.i = icmp eq %union.tree_node* %3, null
  br i1 %cmp4.i, label %if.end6.i, label %require_complete_type.exit

if.end6.i:                                        ; preds = %if.end.i
  tail call void @incomplete_type_error(%union.tree_node* %lhs, %union.tree_node* %0) #6
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %require_complete_type.exit

require_complete_type.exit:                       ; preds = %entry, %if.end.i, %if.end6.i
  %5 = phi %union.tree_node* [ %4, %if.end6.i ], [ %1, %if.end.i ], [ %1, %entry ]
  %retval.0.i = phi %union.tree_node* [ %4, %if.end6.i ], [ %lhs, %if.end.i ], [ %1, %entry ]
  %code = getelementptr inbounds %union.tree_node* %retval.0.i, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %require_complete_type.exit
  %code3 = getelementptr inbounds %union.tree_node* %rhs, i64 0, i32 0, i32 0, i32 2
  %bf.load4 = load i32* %code3, align 8
  %bf.clear5 = and i32 %bf.load4, 255
  switch i32 %bf.clear5, label %if.end13 [
    i32 0, label %return
    i32 116, label %if.then12
  ]

if.then12:                                        ; preds = %lor.lhs.false
  %operands = getelementptr inbounds %union.tree_node* %rhs, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %6 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  br label %if.end13

if.end13:                                         ; preds = %lor.lhs.false, %if.then12
  %rhs.addr.0 = phi %union.tree_node* [ %6, %if.then12 ], [ %rhs, %lor.lhs.false ]
  switch i32 %bf.clear, label %sw.epilog [
    i32 47, label %sw.bb
    i32 51, label %sw.bb33
  ]

sw.bb:                                            ; preds = %if.end13
  %7 = load i32* @pedantic, align 4, !tbaa !27
  %tobool.i = icmp eq i32 %7, 0
  br i1 %tobool.i, label %pedantic_lvalue_warning.exit, label %if.then.i

if.then.i:                                        ; preds = %sw.bb
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([53 x i8]* @.str178, i64 0, i64 0)) #6
  br label %pedantic_lvalue_warning.exit

pedantic_lvalue_warning.exit:                     ; preds = %sw.bb, %if.then.i
  %operands19 = getelementptr inbounds %union.tree_node* %retval.0.i, i64 0, i32 0, i32 2
  %arrayidx20 = getelementptr inbounds i32* %operands19, i64 2
  %8 = bitcast i32* %arrayidx20 to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !7
  %call21 = tail call %union.tree_node* @build_modify_expr(%union.tree_node* %9, i32 %modifycode, %union.tree_node* %rhs.addr.0)
  %code23 = getelementptr inbounds %union.tree_node* %call21, i64 0, i32 0, i32 0, i32 2
  %bf.load24 = load i32* %code23, align 8
  %bf.clear25 = and i32 %bf.load24, 255
  %cmp26 = icmp eq i32 %bf.clear25, 0
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %pedantic_lvalue_warning.exit
  %10 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end28:                                         ; preds = %pedantic_lvalue_warning.exit
  %arrayidx31 = bitcast i32* %operands19 to %union.tree_node**
  %11 = load %union.tree_node** %arrayidx31, align 8, !tbaa !7
  %call32 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 47, %union.tree_node* %0, %union.tree_node* %11, %union.tree_node* %call21) #6
  br label %return

sw.bb33:                                          ; preds = %if.end13
  %12 = load i32* @pedantic, align 4, !tbaa !27
  %tobool.i249 = icmp eq i32 %12, 0
  br i1 %tobool.i249, label %pedantic_lvalue_warning.exit252, label %if.then.i250

if.then.i250:                                     ; preds = %sw.bb33
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([56 x i8]* @.str177, i64 0, i64 0)) #6
  br label %pedantic_lvalue_warning.exit252

pedantic_lvalue_warning.exit252:                  ; preds = %sw.bb33, %if.then.i250
  %call34 = tail call %union.tree_node* @save_expr(%union.tree_node* %rhs.addr.0) #6
  %operands36 = getelementptr inbounds %union.tree_node* %retval.0.i, i64 0, i32 0, i32 2
  %arrayidx37 = bitcast i32* %operands36 to %union.tree_node**
  %13 = load %union.tree_node** %arrayidx37, align 8, !tbaa !7
  %arrayidx40 = getelementptr inbounds i32* %operands36, i64 2
  %14 = bitcast i32* %arrayidx40 to %union.tree_node**
  %15 = load %union.tree_node** %14, align 8, !tbaa !7
  %call41 = tail call %union.tree_node* @build_modify_expr(%union.tree_node* %15, i32 %modifycode, %union.tree_node* %call34)
  %arrayidx44 = getelementptr inbounds i32* %operands36, i64 4
  %16 = bitcast i32* %arrayidx44 to %union.tree_node**
  %17 = load %union.tree_node** %16, align 8, !tbaa !7
  %call45 = tail call %union.tree_node* @build_modify_expr(%union.tree_node* %17, i32 %modifycode, %union.tree_node* %call34)
  %call46 = tail call %union.tree_node* @build_conditional_expr(%union.tree_node* %13, %union.tree_node* %call41, %union.tree_node* %call45)
  %code48 = getelementptr inbounds %union.tree_node* %call46, i64 0, i32 0, i32 0, i32 2
  %bf.load49 = load i32* %code48, align 8
  %bf.clear50 = and i32 %bf.load49, 255
  %cmp51 = icmp eq i32 %bf.clear50, 0
  br i1 %cmp51, label %return, label %if.end53

if.end53:                                         ; preds = %pedantic_lvalue_warning.exit252
  %type55 = getelementptr inbounds %union.tree_node* %retval.0.i, i64 0, i32 0, i32 0, i32 1
  %18 = load %union.tree_node** %type55, align 8, !tbaa !1
  %19 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !7
  %call56 = tail call %union.tree_node* @convert(%union.tree_node* %19, %union.tree_node* %call34) #6
  %call57 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 47, %union.tree_node* %18, %union.tree_node* %call56, %union.tree_node* %call46) #6
  br label %return

sw.epilog:                                        ; preds = %if.end13
  %cmp58 = icmp eq i32 %modifycode, 115
  br i1 %cmp58, label %if.end62, label %if.then59

if.then59:                                        ; preds = %sw.epilog
  %call60 = tail call %union.tree_node* @stabilize_reference(%union.tree_node* %retval.0.i) #6
  %call61 = tail call %union.tree_node* @build_binary_op(i32 %modifycode, %union.tree_node* %call60, %union.tree_node* %rhs.addr.0, i32 1)
  %code64.phi.trans.insert = getelementptr inbounds %union.tree_node* %call60, i64 0, i32 0, i32 0, i32 2
  %bf.load65.pre = load i32* %code64.phi.trans.insert, align 8
  br label %if.end62

if.end62:                                         ; preds = %sw.epilog, %if.then59
  %bf.load94 = phi i32 [ %bf.load65.pre, %if.then59 ], [ %bf.load, %sw.epilog ]
  %newrhs.0 = phi %union.tree_node* [ %call61, %if.then59 ], [ %rhs.addr.0, %sw.epilog ]
  %lhs.addr.0 = phi %union.tree_node* [ %call60, %if.then59 ], [ %retval.0.i, %sw.epilog ]
  %code64 = getelementptr inbounds %union.tree_node* %lhs.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.clear66 = and i32 %bf.load94, 255
  switch i32 %bf.clear66, label %tailrecurse.i.i [
    i32 115, label %sw.bb67
    i32 114, label %sw.bb67
    i32 76, label %sw.bb67
    i32 72, label %sw.bb67
    i32 74, label %sw.bb67
    i32 75, label %sw.bb67
    i32 73, label %sw.bb67
  ]

sw.bb67:                                          ; preds = %if.end62, %if.end62, %if.end62, %if.end62, %if.end62, %if.end62, %if.end62
  %call68 = tail call fastcc %union.tree_node* @default_function_array_conversion(%union.tree_node* %newrhs.0)
  %operands70 = getelementptr inbounds %union.tree_node* %lhs.addr.0, i64 0, i32 0, i32 2
  %arrayidx71 = bitcast i32* %operands70 to %union.tree_node**
  %20 = load %union.tree_node** %arrayidx71, align 8, !tbaa !7
  %type74 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 1
  %21 = load %union.tree_node** %type74, align 8, !tbaa !1
  %call75 = tail call %union.tree_node* @convert(%union.tree_node* %0, %union.tree_node* %call68) #6
  %call76 = tail call %union.tree_node* @convert(%union.tree_node* %21, %union.tree_node* %call75) #6
  %call77 = tail call %union.tree_node* @build_modify_expr(%union.tree_node* %20, i32 115, %union.tree_node* %call76)
  %code79 = getelementptr inbounds %union.tree_node* %call77, i64 0, i32 0, i32 0, i32 2
  %bf.load80 = load i32* %code79, align 8
  %bf.clear81 = and i32 %bf.load80, 255
  %cmp82 = icmp eq i32 %bf.clear81, 0
  br i1 %cmp82, label %return, label %if.end84

if.end84:                                         ; preds = %sw.bb67
  %22 = load i32* @pedantic, align 4, !tbaa !27
  %tobool.i253 = icmp eq i32 %22, 0
  br i1 %tobool.i253, label %pedantic_lvalue_warning.exit256, label %if.then.i254

if.then.i254:                                     ; preds = %if.end84
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([49 x i8]* @.str179, i64 0, i64 0)) #6
  br label %pedantic_lvalue_warning.exit256

pedantic_lvalue_warning.exit256:                  ; preds = %if.end84, %if.then.i254
  %type86 = getelementptr inbounds %union.tree_node* %lhs.addr.0, i64 0, i32 0, i32 0, i32 1
  %23 = load %union.tree_node** %type86, align 8, !tbaa !1
  %call87 = tail call %union.tree_node* @convert(%union.tree_node* %23, %union.tree_node* %call77) #6
  br label %return

tailrecurse.i.i:                                  ; preds = %if.end62, %sw.bb.i.i
  %bf.load.i.i = phi i32 [ %bf.load.i.i.pre, %sw.bb.i.i ], [ %bf.load94, %if.end62 ]
  %ref.tr.i.i = phi %union.tree_node* [ %24, %sw.bb.i.i ], [ %lhs.addr.0, %if.end62 ]
  %bf.clear.i.i = and i32 %bf.load.i.i, 255
  switch i32 %bf.clear.i.i, label %lvalue_or_else.exit.thread [
    i32 127, label %sw.bb.i.i
    i32 128, label %sw.bb.i.i
    i32 39, label %sw.bb.i.i
    i32 170, label %if.end92
    i32 29, label %if.end92
    i32 41, label %sw.bb3.i.i
    i32 43, label %sw.bb3.i.i
    i32 34, label %sw.bb3.i.i
    i32 35, label %sw.bb3.i.i
    i32 36, label %sw.bb3.i.i
    i32 0, label %sw.bb3.i.i
    i32 52, label %lvalue_p.exit.i
    i32 120, label %lvalue_p.exit.i
  ]

sw.bb.i.i:                                        ; preds = %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i
  %operands.i.i = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 2
  %arrayidx.i.i = bitcast i32* %operands.i.i to %union.tree_node**
  %24 = load %union.tree_node** %arrayidx.i.i, align 8, !tbaa !7
  %code1.i.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i.pre = load i32* %code1.i.i.phi.trans.insert, align 8
  br label %tailrecurse.i.i

sw.bb3.i.i:                                       ; preds = %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i
  %type.i.i = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 0, i32 1
  %25 = load %union.tree_node** %type.i.i, align 8, !tbaa !1
  %code6.i.i = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 2
  %bf.load7.i.i = load i32* %code6.i.i, align 8
  %bf.clear8.i.i = and i32 %bf.load7.i.i, 255
  %cmp15.i.i = icmp ne i32 %bf.clear8.i.i, 16
  %not.cmp.i.i = icmp ne i32 %bf.clear8.i.i, 23
  %.cmp15.i.i = and i1 %cmp15.i.i, %not.cmp.i.i
  %land.ext.i13.i = zext i1 %.cmp15.i.i to i32
  switch i32 %bf.clear8.i.i, label %lvalue_or_else.exit [
    i32 23, label %lvalue_or_else.exit.thread
    i32 16, label %lvalue_or_else.exit.thread
  ]

lvalue_p.exit.i:                                  ; preds = %tailrecurse.i.i, %tailrecurse.i.i
  %type18.i.i = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 0, i32 1
  %26 = load %union.tree_node** %type18.i.i, align 8, !tbaa !1
  %code20.i.i = getelementptr inbounds %union.tree_node* %26, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i.i = load i32* %code20.i.i, align 8
  %bf.clear22.i.i = and i32 %bf.load21.i.i, 255
  %cmp23.i.i = icmp eq i32 %bf.clear22.i.i, 18
  %land.ext.i.i = zext i1 %cmp23.i.i to i32
  br i1 %cmp23.i.i, label %lvalue_or_else.exit, label %lvalue_or_else.exit.thread

lvalue_or_else.exit.thread:                       ; preds = %tailrecurse.i.i, %sw.bb3.i.i, %sw.bb3.i.i, %lvalue_p.exit.i
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([3 x i8]* @.str81, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8]* @.str108, i64 0, i64 0)) #6
  br label %if.then91

lvalue_or_else.exit:                              ; preds = %sw.bb3.i.i, %lvalue_p.exit.i
  %retval.0.i3.i = phi i32 [ %land.ext.i.i, %lvalue_p.exit.i ], [ %land.ext.i13.i, %sw.bb3.i.i ]
  %tobool = icmp eq i32 %retval.0.i3.i, 0
  br i1 %tobool, label %if.then91, label %if.end92

if.then91:                                        ; preds = %lvalue_or_else.exit.thread, %lvalue_or_else.exit
  %27 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end92:                                         ; preds = %tailrecurse.i.i, %tailrecurse.i.i, %lvalue_or_else.exit
  %bf.clear95 = and i32 %bf.load94, 4096
  %tobool96 = icmp eq i32 %bf.clear95, 0
  br i1 %tobool96, label %lor.lhs.false97, label %tailrecurse.i

lor.lhs.false97:                                  ; preds = %if.end92
  %readonly_flag99 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load100 = load i32* %readonly_flag99, align 8
  %bf.clear102 = and i32 %bf.load100, 4096
  %tobool103 = icmp ne i32 %bf.clear102, 0
  %28 = and i32 %bf.load100, 33554686
  %29 = icmp eq i32 %28, 33554452
  %or.cond = or i1 %tobool103, %29
  br i1 %or.cond, label %tailrecurse.i, label %if.end122

tailrecurse.i:                                    ; preds = %lor.lhs.false97, %if.end92, %if.then.i260.tailrecurse.i_crit_edge
  %bf.load.i = phi i32 [ %bf.load.i.pre, %if.then.i260.tailrecurse.i_crit_edge ], [ %bf.load94, %if.end92 ], [ %bf.load94, %lor.lhs.false97 ]
  %arg.tr.i = phi %union.tree_node* [ %30, %if.then.i260.tailrecurse.i_crit_edge ], [ %lhs.addr.0, %if.end92 ], [ %lhs.addr.0, %lor.lhs.false97 ]
  %bf.clear.i = and i32 %bf.load.i, 255
  switch i32 %bf.clear.i, label %if.else24.i [
    i32 39, label %if.then.i260
    i32 34, label %if.then18.i
  ]

if.then.i260:                                     ; preds = %tailrecurse.i
  %operands.i = getelementptr inbounds %union.tree_node* %arg.tr.i, i64 0, i32 0, i32 2
  %arrayidx.i = bitcast i32* %operands.i to %union.tree_node**
  %30 = load %union.tree_node** %arrayidx.i, align 8, !tbaa !7
  %type.i = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 0, i32 1
  %31 = load %union.tree_node** %type.i, align 8, !tbaa !1
  %readonly_flag.i = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 0, i32 2
  %bf.load3.i = load i32* %readonly_flag.i, align 8
  %bf.clear4.i = and i32 %bf.load3.i, 4096
  %tobool.i259 = icmp eq i32 %bf.clear4.i, 0
  br i1 %tobool.i259, label %if.else.i, label %if.then.i260.tailrecurse.i_crit_edge

if.then.i260.tailrecurse.i_crit_edge:             ; preds = %if.then.i260
  %code.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.pre = load i32* %code.i.phi.trans.insert, align 8
  br label %tailrecurse.i

if.else.i:                                        ; preds = %if.then.i260
  %arrayidx11.i = getelementptr inbounds i32* %operands.i, i64 2
  %32 = bitcast i32* %arrayidx11.i to %union.tree_node**
  %33 = load %union.tree_node** %32, align 8, !tbaa !7
  %name.i = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 8
  %34 = load %union.tree_node** %name.i, align 8, !tbaa !11
  %id.i = getelementptr inbounds %union.tree_node* %34, i64 0, i32 0, i32 1
  %35 = getelementptr inbounds i8** %id.i, i64 1
  %36 = load i8** %35, align 8, !tbaa !13
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([28 x i8]* @.str82, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @.str109, i64 0, i64 0), i8* %36) #6
  br label %if.end122

if.then18.i:                                      ; preds = %tailrecurse.i
  %name20.i = getelementptr inbounds %union.tree_node* %arg.tr.i, i64 0, i32 0, i32 8
  %37 = load %union.tree_node** %name20.i, align 8, !tbaa !11
  %id22.i = getelementptr inbounds %union.tree_node* %37, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds i8** %id22.i, i64 1
  %39 = load i8** %38, align 8, !tbaa !13
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([30 x i8]* @.str83, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @.str109, i64 0, i64 0), i8* %39) #6
  br label %if.end122

if.else24.i:                                      ; preds = %tailrecurse.i
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([25 x i8]* @.str84, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @.str109, i64 0, i64 0)) #6
  br label %if.end122

if.end122:                                        ; preds = %lor.lhs.false97, %if.else24.i, %if.then18.i, %if.else.i
  %bf.load125 = load i32* %code64, align 8
  %bf.clear126 = and i32 %bf.load125, 255
  %cmp127 = icmp eq i32 %bf.clear126, 39
  br i1 %cmp127, label %land.lhs.true128, label %if.end156

land.lhs.true128:                                 ; preds = %if.end122
  %code130 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load131 = load i32* %code130, align 8
  %bf.clear132 = and i32 %bf.load131, 255
  switch i32 %bf.clear132, label %if.end156 [
    i32 6, label %if.then152
    i32 11, label %if.then152
    i32 7, label %if.then152
    i32 10, label %if.then152
  ]

if.then152:                                       ; preds = %land.lhs.true128, %land.lhs.true128, %land.lhs.true128, %land.lhs.true128
  %call153 = tail call %union.tree_node* @get_unwidened(%union.tree_node* %lhs.addr.0, %union.tree_node* null) #6
  %type155 = getelementptr inbounds %union.tree_node* %call153, i64 0, i32 0, i32 0, i32 1
  %40 = load %union.tree_node** %type155, align 8, !tbaa !1
  br label %if.end156

if.end156:                                        ; preds = %land.lhs.true128, %if.then152, %if.end122
  %lhstype.0 = phi %union.tree_node* [ %40, %if.then152 ], [ %0, %if.end122 ], [ %0, %land.lhs.true128 ]
  %type158 = getelementptr inbounds %union.tree_node* %lhs.addr.0, i64 0, i32 0, i32 0, i32 1
  %41 = load %union.tree_node** %type158, align 8, !tbaa !1
  %cmp159 = icmp eq %union.tree_node* %lhstype.0, %41
  br i1 %cmp159, label %if.end164, label %if.then160

if.then160:                                       ; preds = %if.end156
  %call161 = tail call %union.tree_node* @copy_node(%union.tree_node* %lhs.addr.0) #6
  %type163 = getelementptr inbounds %union.tree_node* %call161, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %lhstype.0, %union.tree_node** %type163, align 8, !tbaa !1
  br label %if.end164

if.end164:                                        ; preds = %if.end156, %if.then160
  %lhs.addr.1 = phi %union.tree_node* [ %call161, %if.then160 ], [ %lhs.addr.0, %if.end156 ]
  %call165 = tail call fastcc %union.tree_node* @convert_for_assignment(%union.tree_node* %lhstype.0, %union.tree_node* %newrhs.0, i8* getelementptr inbounds ([11 x i8]* @.str109, i64 0, i64 0), %union.tree_node* null, %union.tree_node* null, i32 0)
  %code167 = getelementptr inbounds %union.tree_node* %call165, i64 0, i32 0, i32 0, i32 2
  %bf.load168 = load i32* %code167, align 8
  %bf.clear169 = and i32 %bf.load168, 255
  %cmp170 = icmp eq i32 %bf.clear169, 0
  br i1 %cmp170, label %if.then171, label %if.end172

if.then171:                                       ; preds = %if.end164
  %42 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end172:                                        ; preds = %if.end164
  %call173 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 48, %union.tree_node* %lhstype.0, %union.tree_node* %lhs.addr.1, %union.tree_node* %call165) #6
  %side_effects_flag = getelementptr inbounds %union.tree_node* %call173, i64 0, i32 0, i32 0, i32 2
  %bf.load175 = load i32* %side_effects_flag, align 8
  %bf.set = or i32 %bf.load175, 256
  store i32 %bf.set, i32* %side_effects_flag, align 8
  %type178 = getelementptr inbounds %union.tree_node* %call173, i64 0, i32 0, i32 0, i32 1
  %43 = load %union.tree_node** %type178, align 8, !tbaa !1
  %cmp179 = icmp eq %union.tree_node* %0, %43
  br i1 %cmp179, label %return, label %if.end181

if.end181:                                        ; preds = %if.end172
  %call182 = tail call fastcc %union.tree_node* @convert_for_assignment(%union.tree_node* %0, %union.tree_node* %call173, i8* getelementptr inbounds ([11 x i8]* @.str109, i64 0, i64 0), %union.tree_node* null, %union.tree_node* null, i32 0)
  br label %return

return:                                           ; preds = %require_complete_type.exit, %lor.lhs.false, %if.end172, %sw.bb67, %pedantic_lvalue_warning.exit252, %if.end181, %if.then171, %if.then91, %pedantic_lvalue_warning.exit256, %if.end53, %if.end28, %if.then27
  %retval.0 = phi %union.tree_node* [ %42, %if.then171 ], [ %call182, %if.end181 ], [ %27, %if.then91 ], [ %call87, %pedantic_lvalue_warning.exit256 ], [ %call57, %if.end53 ], [ %10, %if.then27 ], [ %call32, %if.end28 ], [ %call46, %pedantic_lvalue_warning.exit252 ], [ %call77, %sw.bb67 ], [ %call173, %if.end172 ], [ %5, %lor.lhs.false ], [ %5, %require_complete_type.exit ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @lvalue_or_else(%union.tree_node* nocapture readonly %ref, i8* %msgid) #0 {
entry:
  br label %tailrecurse.i

tailrecurse.i:                                    ; preds = %sw.bb.i, %entry
  %ref.tr.i = phi %union.tree_node* [ %ref, %entry ], [ %0, %sw.bb.i ]
  %code1.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code1.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  switch i32 %bf.clear.i, label %if.then [
    i32 127, label %sw.bb.i
    i32 128, label %sw.bb.i
    i32 39, label %sw.bb.i
    i32 170, label %if.end
    i32 29, label %if.end
    i32 41, label %sw.bb3.i
    i32 43, label %sw.bb3.i
    i32 34, label %sw.bb3.i
    i32 35, label %sw.bb3.i
    i32 36, label %sw.bb3.i
    i32 0, label %sw.bb3.i
    i32 52, label %lvalue_p.exit
    i32 120, label %lvalue_p.exit
  ]

sw.bb.i:                                          ; preds = %tailrecurse.i, %tailrecurse.i, %tailrecurse.i
  %operands.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 2
  %arrayidx.i = bitcast i32* %operands.i to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx.i, align 8, !tbaa !7
  br label %tailrecurse.i

sw.bb3.i:                                         ; preds = %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i, %tailrecurse.i
  %type.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type.i, align 8, !tbaa !1
  %code6.i = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load7.i = load i32* %code6.i, align 8
  %bf.clear8.i = and i32 %bf.load7.i, 255
  %cmp15.i = icmp ne i32 %bf.clear8.i, 16
  %not.cmp.i = icmp ne i32 %bf.clear8.i, 23
  %.cmp15.i = and i1 %cmp15.i, %not.cmp.i
  %land.ext.i13 = zext i1 %.cmp15.i to i32
  switch i32 %bf.clear8.i, label %if.end [
    i32 23, label %if.then
    i32 16, label %if.then
  ]

lvalue_p.exit:                                    ; preds = %tailrecurse.i, %tailrecurse.i
  %type18.i = getelementptr inbounds %union.tree_node* %ref.tr.i, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type18.i, align 8, !tbaa !1
  %code20.i = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i = load i32* %code20.i, align 8
  %bf.clear22.i = and i32 %bf.load21.i, 255
  %cmp23.i = icmp eq i32 %bf.clear22.i, 18
  %land.ext.i = zext i1 %cmp23.i to i32
  br i1 %cmp23.i, label %if.end, label %if.then

if.then:                                          ; preds = %tailrecurse.i, %sw.bb3.i, %sw.bb3.i, %lvalue_p.exit
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([3 x i8]* @.str81, i64 0, i64 0), i8* %msgid) #6
  br label %if.end

if.end:                                           ; preds = %tailrecurse.i, %tailrecurse.i, %sw.bb3.i, %lvalue_p.exit, %if.then
  %retval.0.i3 = phi i32 [ %land.ext.i, %lvalue_p.exit ], [ 0, %if.then ], [ %land.ext.i13, %sw.bb3.i ], [ 1, %tailrecurse.i ], [ 1, %tailrecurse.i ]
  ret i32 %retval.0.i3
}

; Function Attrs: nounwind uwtable
define void @readonly_warning(%union.tree_node* nocapture readonly %arg, i8* %msgid) #0 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %if.then, %entry
  %arg.tr = phi %union.tree_node* [ %arg, %entry ], [ %0, %if.then ]
  %code = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else24 [
    i32 39, label %if.then
    i32 34, label %if.then18
  ]

if.then:                                          ; preds = %tailrecurse
  %operands = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %type = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !1
  %readonly_flag = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load3 = load i32* %readonly_flag, align 8
  %bf.clear4 = and i32 %bf.load3, 4096
  %tobool = icmp eq i32 %bf.clear4, 0
  br i1 %tobool, label %if.else, label %tailrecurse

if.else:                                          ; preds = %if.then
  %arrayidx11 = getelementptr inbounds i32* %operands, i64 2
  %2 = bitcast i32* %arrayidx11 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !7
  %name = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 8
  %4 = load %union.tree_node** %name, align 8, !tbaa !11
  %id = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds i8** %id, i64 1
  %6 = load i8** %5, align 8, !tbaa !13
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([28 x i8]* @.str82, i64 0, i64 0), i8* %msgid, i8* %6) #6
  br label %if.end26

if.then18:                                        ; preds = %tailrecurse
  %name20 = getelementptr inbounds %union.tree_node* %arg.tr, i64 0, i32 0, i32 8
  %7 = load %union.tree_node** %name20, align 8, !tbaa !11
  %id22 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds i8** %id22, i64 1
  %9 = load i8** %8, align 8, !tbaa !13
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([30 x i8]* @.str83, i64 0, i64 0), i8* %msgid, i8* %9) #6
  br label %if.end26

if.else24:                                        ; preds = %tailrecurse
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([25 x i8]* @.str84, i64 0, i64 0), i8* %msgid) #6
  br label %if.end26

if.end26:                                         ; preds = %if.then18, %if.else24, %if.else
  ret void
}

declare %union.tree_node* @non_lvalue(%union.tree_node*) #1

declare %union.tree_node* @byte_position(%union.tree_node*) #1

declare i32 @staticp(%union.tree_node*) #1

declare void @put_var_into_stack(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_conditional_expr(%union.tree_node* %ifexp, %union.tree_node* %op1, %union.tree_node* %op2) #0 {
entry:
  %call = tail call %union.tree_node* @default_conversion(%union.tree_node* %ifexp)
  %call1 = tail call %union.tree_node* @truthvalue_conversion(%union.tree_node* %call) #6
  %type = getelementptr inbounds %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 5
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call3 = tail call %union.tree_node* @default_conversion(%union.tree_node* %op1)
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %op1.addr.0 = phi %union.tree_node* [ %call3, %if.then ], [ %op1, %entry ]
  %type5 = getelementptr inbounds %union.tree_node* %op2, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type5, align 8, !tbaa !1
  %code7 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, 5
  br i1 %cmp10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.end
  %call12 = tail call %union.tree_node* @default_conversion(%union.tree_node* %op2)
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then11
  %op2.addr.0 = phi %union.tree_node* [ %call12, %if.then11 ], [ %op2, %if.end ]
  %code15 = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 2
  %bf.load16 = load i32* %code15, align 8
  %bf.clear17 = and i32 %bf.load16, 255
  %cmp18 = icmp eq i32 %bf.clear17, 0
  br i1 %cmp18, label %if.then34, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end13
  %type20 = getelementptr inbounds %union.tree_node* %op1.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type20, align 8, !tbaa !1
  %code22 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load23 = load i32* %code22, align 8
  %bf.clear24 = and i32 %bf.load23, 255
  %cmp25 = icmp eq i32 %bf.clear24, 0
  br i1 %cmp25, label %if.then34, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %type28 = getelementptr inbounds %union.tree_node* %op2.addr.0, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type28, align 8, !tbaa !1
  %code30 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load31 = load i32* %code30, align 8
  %bf.clear32 = and i32 %bf.load31, 255
  %cmp33 = icmp eq i32 %bf.clear32, 0
  br i1 %cmp33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %lor.lhs.false26, %lor.lhs.false, %if.end13
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end35:                                         ; preds = %lor.lhs.false26
  %5 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 15
  %6 = load %union.tree_node** %5, align 8, !tbaa !24
  %7 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 15
  %8 = load %union.tree_node** %7, align 8, !tbaa !24
  %cmp51 = icmp eq %union.tree_node* %6, %8
  br i1 %cmp51, label %if.then52, label %if.else58

if.then52:                                        ; preds = %if.end35
  %cmp53 = icmp eq %union.tree_node* %2, %3
  %. = select i1 %cmp53, %union.tree_node* %2, %union.tree_node* %6
  br label %if.end248

if.else58:                                        ; preds = %if.end35
  %cmp59 = icmp eq i32 %bf.clear24, 6
  %9 = and i32 %bf.load23, 254
  %10 = icmp eq i32 %9, 6
  %cmp63 = icmp eq i32 %bf.clear24, 8
  %or.cond309 = or i1 %10, %cmp63
  br i1 %or.cond309, label %land.lhs.true, label %if.else113

land.lhs.true:                                    ; preds = %if.else58
  %11 = and i32 %bf.load31, 254
  %12 = icmp eq i32 %11, 6
  %cmp68 = icmp eq i32 %bf.clear32, 8
  %or.cond311 = or i1 %12, %cmp68
  br i1 %or.cond311, label %if.then69, label %if.else113

if.then69:                                        ; preds = %land.lhs.true
  %call70 = tail call %union.tree_node* @common_type(%union.tree_node* %2, %union.tree_node* %3)
  %13 = load i32* @warn_sign_compare, align 4, !tbaa !27
  %cmp71 = icmp slt i32 %13, 0
  br i1 %cmp71, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then69
  %14 = load i32* @extra_warnings, align 4, !tbaa !27
  %tobool = icmp eq i32 %14, 0
  %.old = load i32* @skip_evaluation, align 4
  %tobool74.old = icmp ne i32 %.old, 0
  %or.cond314 = or i1 %tobool, %tobool74.old
  br i1 %or.cond314, label %if.end248, label %if.then75

cond.false:                                       ; preds = %if.then69
  %tobool72 = icmp eq i32 %13, 0
  %15 = load i32* @skip_evaluation, align 4
  %tobool74 = icmp ne i32 %15, 0
  %or.cond312 = or i1 %tobool72, %tobool74
  br i1 %or.cond312, label %if.end248, label %if.then75

if.then75:                                        ; preds = %cond.true, %cond.false
  %16 = load %union.tree_node** %type, align 8, !tbaa !1
  %unsigned_flag = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 2
  %bf.load79 = load i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load79, 13
  %bf.clear80 = and i32 %bf.lshr, 1
  %17 = load %union.tree_node** %type5, align 8, !tbaa !1
  %unsigned_flag84 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 2
  %bf.load85 = load i32* %unsigned_flag84, align 8
  %bf.lshr86 = lshr i32 %bf.load85, 13
  %bf.clear87 = and i32 %bf.lshr86, 1
  %tobool88 = icmp eq i32 %bf.clear80, %bf.clear87
  br i1 %tobool88, label %if.end248, label %if.then89

if.then89:                                        ; preds = %if.then75
  %unsigned_flag91 = getelementptr inbounds %union.tree_node* %call70, i64 0, i32 0, i32 0, i32 2
  %bf.load92 = load i32* %unsigned_flag91, align 8
  %bf.clear94 = and i32 %bf.load92, 8192
  %tobool95 = icmp eq i32 %bf.clear94, 0
  br i1 %tobool95, label %if.end248, label %if.else97

if.else97:                                        ; preds = %if.then89
  %tobool98 = icmp eq i32 %bf.clear87, 0
  br i1 %tobool98, label %lor.lhs.false102, label %land.lhs.true99

land.lhs.true99:                                  ; preds = %if.else97
  %call100 = tail call i32 @tree_expr_nonnegative_p(%union.tree_node* %op1.addr.0) #6
  %tobool101 = icmp eq i32 %call100, 0
  br i1 %tobool101, label %lor.lhs.false102, label %if.end248

lor.lhs.false102:                                 ; preds = %land.lhs.true99, %if.else97
  %tobool103 = icmp eq i32 %bf.clear80, 0
  br i1 %tobool103, label %if.else108, label %land.lhs.true104

land.lhs.true104:                                 ; preds = %lor.lhs.false102
  %call105 = tail call i32 @tree_expr_nonnegative_p(%union.tree_node* %op2.addr.0) #6
  %tobool106 = icmp eq i32 %call105, 0
  br i1 %tobool106, label %if.else108, label %if.end248

if.else108:                                       ; preds = %land.lhs.true104, %lor.lhs.false102
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([51 x i8]* @.str91, i64 0, i64 0)) #6
  br label %if.end248

if.else113:                                       ; preds = %land.lhs.true, %if.else58
  %cmp114 = icmp eq i32 %bf.clear24, 5
  %cmp116 = icmp eq i32 %bf.clear32, 5
  %or.cond316 = or i1 %cmp114, %cmp116
  br i1 %or.cond316, label %if.then117, label %if.else125

if.then117:                                       ; preds = %if.else113
  %18 = load i32* @pedantic, align 4, !tbaa !27
  %tobool118 = icmp eq i32 %18, 0
  br i1 %tobool118, label %if.end124, label %land.lhs.true119

land.lhs.true119:                                 ; preds = %if.then117
  %cmp120 = icmp ne i32 %bf.clear24, 5
  %cmp122 = icmp ne i32 %bf.clear32, 5
  %or.cond318 = or i1 %cmp120, %cmp122
  br i1 %or.cond318, label %if.then123, label %if.end124

if.then123:                                       ; preds = %land.lhs.true119
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([55 x i8]* @.str92, i64 0, i64 0)) #6
  br label %if.end124

if.end124:                                        ; preds = %if.then117, %land.lhs.true119, %if.then123
  %19 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !7
  br label %if.end248

if.else125:                                       ; preds = %if.else113
  %cmp126 = icmp eq i32 %bf.clear24, 13
  %cmp128 = icmp eq i32 %bf.clear32, 13
  %or.cond320 = and i1 %cmp126, %cmp128
  br i1 %or.cond320, label %if.then129, label %if.else223

if.then129:                                       ; preds = %if.else125
  %call.i491 = tail call i32 @maybe_objc_comptypes(%union.tree_node* %2, %union.tree_node* %3, i32 1) #6
  %cmp.i492 = icmp sgt i32 %call.i491, -1
  br i1 %cmp.i492, label %comp_target_types.exit, label %if.end.i

if.end.i:                                         ; preds = %if.then129
  %type.i = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type.i, align 8, !tbaa !1
  %21 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 15
  %22 = load %union.tree_node** %21, align 8, !tbaa !24
  %type3.i = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  %23 = load %union.tree_node** %type3.i, align 8, !tbaa !1
  %24 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 15
  %25 = load %union.tree_node** %24, align 8, !tbaa !24
  %call6.i = tail call i32 @comptypes(%union.tree_node* %22, %union.tree_node* %25) #6
  %cmp7.i = icmp eq i32 %call6.i, 2
  %26 = load i32* @pedantic, align 4
  %tobool.i493 = icmp ne i32 %26, 0
  %or.cond.i = and i1 %cmp7.i, %tobool.i493
  br i1 %or.cond.i, label %comp_target_types.exit.thread, label %comp_target_types.exit

comp_target_types.exit.thread:                    ; preds = %if.end.i
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([31 x i8]* @.str182, i64 0, i64 0)) #6
  br label %if.then132

comp_target_types.exit:                           ; preds = %if.then129, %if.end.i
  %retval.0.i = phi i32 [ %call.i491, %if.then129 ], [ %call6.i, %if.end.i ]
  %tobool131 = icmp eq i32 %retval.0.i, 0
  br i1 %tobool131, label %if.else134, label %if.then132

if.then132:                                       ; preds = %comp_target_types.exit.thread, %comp_target_types.exit
  %call133 = tail call %union.tree_node* @common_type(%union.tree_node* %2, %union.tree_node* %3)
  br label %if.end248

if.else134:                                       ; preds = %comp_target_types.exit
  %call135 = tail call i32 @integer_zerop(%union.tree_node* %op1.addr.0) #6
  %tobool136 = icmp eq i32 %call135, 0
  br i1 %tobool136, label %if.else149, label %land.lhs.true137

land.lhs.true137:                                 ; preds = %if.else134
  %type139 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %27 = load %union.tree_node** %type139, align 8, !tbaa !1
  %28 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !7
  %cmp140 = icmp eq %union.tree_node* %27, %28
  br i1 %cmp140, label %land.lhs.true141, label %if.else149

land.lhs.true141:                                 ; preds = %land.lhs.true137
  %code143 = getelementptr inbounds %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 2
  %bf.load144 = load i32* %code143, align 8
  %bf.clear145 = and i32 %bf.load144, 255
  %cmp146 = icmp eq i32 %bf.clear145, 115
  br i1 %cmp146, label %if.else149, label %if.then147

if.then147:                                       ; preds = %land.lhs.true141
  %bf.load.i495 = load i32* %code30, align 8
  %bf.lshr.i496 = lshr i32 %bf.load.i495, 12
  %bf.clear.i497 = and i32 %bf.lshr.i496, 1
  %29 = lshr i32 %bf.load.i495, 10
  %mul5.i498 = and i32 %29, 2
  %type6.i499 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %restrict_flag.i500 = getelementptr inbounds %struct.tree_type* %type6.i499, i64 0, i32 6
  %bf.load7.i501 = load i32* %restrict_flag.i500, align 4
  %30 = lshr i32 %bf.load7.i501, 19
  %mul10.i502 = and i32 %30, 4
  %bf.clear14.i503 = and i32 %bf.load.i495, 255
  %cmp.i504 = icmp eq i32 %bf.clear14.i503, 20
  br i1 %cmp.i504, label %land.rhs.i507, label %land.end.i521

land.rhs.i507:                                    ; preds = %if.then147
  %type16.i505 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  %31 = load %union.tree_node** %type16.i505, align 8, !tbaa !1
  %tobool.i506 = icmp ne %union.tree_node* %31, null
  br label %land.end.i521

land.end.i521:                                    ; preds = %land.rhs.i507, %if.then147
  %32 = phi i1 [ false, %if.then147 ], [ %tobool.i506, %land.rhs.i507 ]
  %land.ext.i508 = zext i1 %32 to i32
  %mul17.i509 = shl nuw nsw i32 %land.ext.i508, 3
  %bf.load21.i511 = load i32* %code22, align 8
  %bf.lshr22.i512 = lshr i32 %bf.load21.i511, 12
  %bf.clear23.i513 = and i32 %bf.lshr22.i512, 1
  %33 = lshr i32 %bf.load21.i511, 10
  %mul30.i514 = and i32 %33, 2
  %type32.i515 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %restrict_flag33.i516 = getelementptr inbounds %struct.tree_type* %type32.i515, i64 0, i32 6
  %bf.load34.i517 = load i32* %restrict_flag33.i516, align 4
  %34 = lshr i32 %bf.load34.i517, 19
  %mul37.i518 = and i32 %34, 4
  %bf.clear42.i519 = and i32 %bf.load21.i511, 255
  %cmp43.i520 = icmp eq i32 %bf.clear42.i519, 20
  %tobool47.i523 = icmp ne %union.tree_node* %27, null
  %tobool47.i523. = and i1 %cmp43.i520, %tobool47.i523
  %land.ext49.i525 = zext i1 %tobool47.i523. to i32
  %mul50.i526 = shl nuw nsw i32 %land.ext49.i525, 3
  %or31.i527 = or i32 %bf.clear.i497, %mul5.i498
  %or38.i528 = or i32 %or31.i527, %mul10.i502
  %or51.i529 = or i32 %or38.i528, %mul17.i509
  %or.i530 = or i32 %or51.i529, %mul30.i514
  %or11.i531 = or i32 %or.i530, %bf.clear23.i513
  %or18.i532 = or i32 %or11.i531, %mul37.i518
  %or52.i533 = or i32 %or18.i532, %mul50.i526
  %call.i534 = tail call %union.tree_node* @c_build_qualified_type(%union.tree_node* %3, i32 %or52.i533) #6
  br label %if.end248

if.else149:                                       ; preds = %land.lhs.true141, %if.else134, %land.lhs.true137
  %call150 = tail call i32 @integer_zerop(%union.tree_node* %op2.addr.0) #6
  %tobool151 = icmp eq i32 %call150, 0
  br i1 %tobool151, label %if.else164, label %land.lhs.true152

land.lhs.true152:                                 ; preds = %if.else149
  %type154 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  %35 = load %union.tree_node** %type154, align 8, !tbaa !1
  %36 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !7
  %cmp155 = icmp eq %union.tree_node* %35, %36
  br i1 %cmp155, label %land.lhs.true156, label %if.else164

land.lhs.true156:                                 ; preds = %land.lhs.true152
  %code158 = getelementptr inbounds %union.tree_node* %op2, i64 0, i32 0, i32 0, i32 2
  %bf.load159 = load i32* %code158, align 8
  %bf.clear160 = and i32 %bf.load159, 255
  %cmp161 = icmp eq i32 %bf.clear160, 115
  br i1 %cmp161, label %if.else164, label %if.then162

if.then162:                                       ; preds = %land.lhs.true156
  %bf.load.i450 = load i32* %code22, align 8
  %bf.lshr.i451 = lshr i32 %bf.load.i450, 12
  %bf.clear.i452 = and i32 %bf.lshr.i451, 1
  %37 = lshr i32 %bf.load.i450, 10
  %mul5.i453 = and i32 %37, 2
  %type6.i454 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %restrict_flag.i455 = getelementptr inbounds %struct.tree_type* %type6.i454, i64 0, i32 6
  %bf.load7.i456 = load i32* %restrict_flag.i455, align 4
  %38 = lshr i32 %bf.load7.i456, 19
  %mul10.i457 = and i32 %38, 4
  %bf.clear14.i458 = and i32 %bf.load.i450, 255
  %cmp.i459 = icmp eq i32 %bf.clear14.i458, 20
  br i1 %cmp.i459, label %land.rhs.i462, label %land.end.i476

land.rhs.i462:                                    ; preds = %if.then162
  %type16.i460 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %39 = load %union.tree_node** %type16.i460, align 8, !tbaa !1
  %tobool.i461 = icmp ne %union.tree_node* %39, null
  br label %land.end.i476

land.end.i476:                                    ; preds = %land.rhs.i462, %if.then162
  %40 = phi i1 [ false, %if.then162 ], [ %tobool.i461, %land.rhs.i462 ]
  %land.ext.i463 = zext i1 %40 to i32
  %mul17.i464 = shl nuw nsw i32 %land.ext.i463, 3
  %bf.load21.i466 = load i32* %code30, align 8
  %bf.lshr22.i467 = lshr i32 %bf.load21.i466, 12
  %bf.clear23.i468 = and i32 %bf.lshr22.i467, 1
  %41 = lshr i32 %bf.load21.i466, 10
  %mul30.i469 = and i32 %41, 2
  %type32.i470 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %restrict_flag33.i471 = getelementptr inbounds %struct.tree_type* %type32.i470, i64 0, i32 6
  %bf.load34.i472 = load i32* %restrict_flag33.i471, align 4
  %42 = lshr i32 %bf.load34.i472, 19
  %mul37.i473 = and i32 %42, 4
  %bf.clear42.i474 = and i32 %bf.load21.i466, 255
  %cmp43.i475 = icmp eq i32 %bf.clear42.i474, 20
  %tobool47.i478 = icmp ne %union.tree_node* %35, null
  %tobool47.i478. = and i1 %cmp43.i475, %tobool47.i478
  %land.ext49.i480 = zext i1 %tobool47.i478. to i32
  %mul50.i481 = shl nuw nsw i32 %land.ext49.i480, 3
  %or31.i482 = or i32 %bf.clear.i452, %mul5.i453
  %or38.i483 = or i32 %or31.i482, %mul10.i457
  %or51.i484 = or i32 %or38.i483, %mul17.i464
  %or.i485 = or i32 %or51.i484, %mul30.i469
  %or11.i486 = or i32 %or.i485, %bf.clear23.i468
  %or18.i487 = or i32 %or11.i486, %mul37.i473
  %or52.i488 = or i32 %or18.i487, %mul50.i481
  %call.i489 = tail call %union.tree_node* @c_build_qualified_type(%union.tree_node* %2, i32 %or52.i488) #6
  br label %if.end248

if.else164:                                       ; preds = %land.lhs.true156, %if.else149, %land.lhs.true152
  %type166 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %43 = load %union.tree_node** %type166, align 8, !tbaa !1
  %code168 = getelementptr inbounds %union.tree_node* %43, i64 0, i32 0, i32 0, i32 2
  %bf.load169 = load i32* %code168, align 8
  %bf.clear170 = and i32 %bf.load169, 255
  %cmp171 = icmp eq i32 %bf.clear170, 5
  br i1 %cmp171, label %if.then172, label %if.else190

if.then172:                                       ; preds = %if.else164
  %44 = load i32* @pedantic, align 4, !tbaa !27
  %tobool173 = icmp eq i32 %44, 0
  %type187.pre = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  br i1 %tobool173, label %if.end183, label %land.lhs.true174

land.lhs.true174:                                 ; preds = %if.then172
  %45 = load %union.tree_node** %type187.pre, align 8, !tbaa !1
  %code178 = getelementptr inbounds %union.tree_node* %45, i64 0, i32 0, i32 0, i32 2
  %bf.load179 = load i32* %code178, align 8
  %bf.clear180 = and i32 %bf.load179, 255
  %cmp181 = icmp eq i32 %bf.clear180, 23
  br i1 %cmp181, label %if.then182, label %if.end183

if.then182:                                       ; preds = %land.lhs.true174
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([69 x i8]* @.str93, i64 0, i64 0)) #6
  %.pre = load %union.tree_node** %type166, align 8, !tbaa !1
  %readonly_flag.i407.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre, i64 0, i32 0, i32 0, i32 2
  %bf.load.i408.pre = load i32* %readonly_flag.i407.phi.trans.insert, align 8
  br label %if.end183

if.end183:                                        ; preds = %if.then172, %if.then182, %land.lhs.true174
  %bf.load.i408 = phi i32 [ %bf.load.i408.pre, %if.then182 ], [ %bf.load169, %land.lhs.true174 ], [ %bf.load169, %if.then172 ]
  %46 = phi %union.tree_node* [ %.pre, %if.then182 ], [ %43, %land.lhs.true174 ], [ %43, %if.then172 ]
  %47 = load %union.tree_node** %type187.pre, align 8, !tbaa !1
  %bf.lshr.i409 = lshr i32 %bf.load.i408, 12
  %bf.clear.i410 = and i32 %bf.lshr.i409, 1
  %48 = lshr i32 %bf.load.i408, 10
  %mul5.i411 = and i32 %48, 2
  %type6.i412 = bitcast %union.tree_node* %46 to %struct.tree_type*
  %restrict_flag.i413 = getelementptr inbounds %struct.tree_type* %type6.i412, i64 0, i32 6
  %bf.load7.i414 = load i32* %restrict_flag.i413, align 4
  %49 = lshr i32 %bf.load7.i414, 19
  %mul10.i415 = and i32 %49, 4
  %bf.clear14.i416 = and i32 %bf.load.i408, 255
  %cmp.i417 = icmp eq i32 %bf.clear14.i416, 20
  br i1 %cmp.i417, label %land.rhs.i420, label %land.end.i434

land.rhs.i420:                                    ; preds = %if.end183
  %type16.i418 = getelementptr inbounds %union.tree_node* %46, i64 0, i32 0, i32 0, i32 1
  %50 = load %union.tree_node** %type16.i418, align 8, !tbaa !1
  %tobool.i419 = icmp ne %union.tree_node* %50, null
  br label %land.end.i434

land.end.i434:                                    ; preds = %land.rhs.i420, %if.end183
  %51 = phi i1 [ false, %if.end183 ], [ %tobool.i419, %land.rhs.i420 ]
  %land.ext.i421 = zext i1 %51 to i32
  %mul17.i422 = shl nuw nsw i32 %land.ext.i421, 3
  %readonly_flag20.i423 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i424 = load i32* %readonly_flag20.i423, align 8
  %bf.lshr22.i425 = lshr i32 %bf.load21.i424, 12
  %bf.clear23.i426 = and i32 %bf.lshr22.i425, 1
  %52 = lshr i32 %bf.load21.i424, 10
  %mul30.i427 = and i32 %52, 2
  %type32.i428 = bitcast %union.tree_node* %47 to %struct.tree_type*
  %restrict_flag33.i429 = getelementptr inbounds %struct.tree_type* %type32.i428, i64 0, i32 6
  %bf.load34.i430 = load i32* %restrict_flag33.i429, align 4
  %53 = lshr i32 %bf.load34.i430, 19
  %mul37.i431 = and i32 %53, 4
  %bf.clear42.i432 = and i32 %bf.load21.i424, 255
  %cmp43.i433 = icmp eq i32 %bf.clear42.i432, 20
  br i1 %cmp43.i433, label %land.rhs44.i437, label %qualify_type.exit448

land.rhs44.i437:                                  ; preds = %land.end.i434
  %type46.i435 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 0, i32 1
  %54 = load %union.tree_node** %type46.i435, align 8, !tbaa !1
  %tobool47.i436 = icmp ne %union.tree_node* %54, null
  br label %qualify_type.exit448

qualify_type.exit448:                             ; preds = %land.end.i434, %land.rhs44.i437
  %55 = phi i1 [ false, %land.end.i434 ], [ %tobool47.i436, %land.rhs44.i437 ]
  %land.ext49.i438 = zext i1 %55 to i32
  %mul50.i439 = shl nuw nsw i32 %land.ext49.i438, 3
  %or31.i440 = or i32 %bf.clear.i410, %mul5.i411
  %or38.i441 = or i32 %or31.i440, %mul10.i415
  %or51.i442 = or i32 %or38.i441, %mul17.i422
  %or.i443 = or i32 %or51.i442, %mul30.i427
  %or11.i444 = or i32 %or.i443, %bf.clear23.i426
  %or18.i445 = or i32 %or11.i444, %mul37.i431
  %or52.i446 = or i32 %or18.i445, %mul50.i439
  %call.i447 = tail call %union.tree_node* @c_build_qualified_type(%union.tree_node* %46, i32 %or52.i446) #6
  %call189 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %call.i447) #6
  br label %if.end248

if.else190:                                       ; preds = %if.else164
  %type192 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  %56 = load %union.tree_node** %type192, align 8, !tbaa !1
  %code194 = getelementptr inbounds %union.tree_node* %56, i64 0, i32 0, i32 0, i32 2
  %bf.load195 = load i32* %code194, align 8
  %bf.clear196 = and i32 %bf.load195, 255
  %cmp197 = icmp eq i32 %bf.clear196, 5
  br i1 %cmp197, label %if.then198, label %if.else216

if.then198:                                       ; preds = %if.else190
  %57 = load i32* @pedantic, align 4, !tbaa !27
  %tobool199 = icmp ne i32 %57, 0
  %cmp207 = icmp eq i32 %bf.clear170, 23
  %or.cond = and i1 %tobool199, %cmp207
  br i1 %or.cond, label %if.then208, label %if.end209

if.then208:                                       ; preds = %if.then198
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([69 x i8]* @.str93, i64 0, i64 0)) #6
  %.pre543 = load %union.tree_node** %type192, align 8, !tbaa !1
  %.pre544 = load %union.tree_node** %type166, align 8, !tbaa !1
  %readonly_flag.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre543, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.pre = load i32* %readonly_flag.i.phi.trans.insert, align 8
  br label %if.end209

if.end209:                                        ; preds = %if.then198, %if.then208
  %bf.load.i = phi i32 [ %bf.load195, %if.then198 ], [ %bf.load.i.pre, %if.then208 ]
  %58 = phi %union.tree_node* [ %43, %if.then198 ], [ %.pre544, %if.then208 ]
  %59 = phi %union.tree_node* [ %56, %if.then198 ], [ %.pre543, %if.then208 ]
  %bf.lshr.i = lshr i32 %bf.load.i, 12
  %bf.clear.i = and i32 %bf.lshr.i, 1
  %60 = lshr i32 %bf.load.i, 10
  %mul5.i = and i32 %60, 2
  %type6.i = bitcast %union.tree_node* %59 to %struct.tree_type*
  %restrict_flag.i = getelementptr inbounds %struct.tree_type* %type6.i, i64 0, i32 6
  %bf.load7.i = load i32* %restrict_flag.i, align 4
  %61 = lshr i32 %bf.load7.i, 19
  %mul10.i = and i32 %61, 4
  %bf.clear14.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear14.i, 20
  br i1 %cmp.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %if.end209
  %type16.i = getelementptr inbounds %union.tree_node* %59, i64 0, i32 0, i32 0, i32 1
  %62 = load %union.tree_node** %type16.i, align 8, !tbaa !1
  %tobool.i = icmp ne %union.tree_node* %62, null
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %if.end209
  %63 = phi i1 [ false, %if.end209 ], [ %tobool.i, %land.rhs.i ]
  %land.ext.i = zext i1 %63 to i32
  %mul17.i = shl nuw nsw i32 %land.ext.i, 3
  %readonly_flag20.i = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i = load i32* %readonly_flag20.i, align 8
  %bf.lshr22.i = lshr i32 %bf.load21.i, 12
  %bf.clear23.i = and i32 %bf.lshr22.i, 1
  %64 = lshr i32 %bf.load21.i, 10
  %mul30.i = and i32 %64, 2
  %type32.i = bitcast %union.tree_node* %58 to %struct.tree_type*
  %restrict_flag33.i = getelementptr inbounds %struct.tree_type* %type32.i, i64 0, i32 6
  %bf.load34.i = load i32* %restrict_flag33.i, align 4
  %65 = lshr i32 %bf.load34.i, 19
  %mul37.i = and i32 %65, 4
  %bf.clear42.i = and i32 %bf.load21.i, 255
  %cmp43.i = icmp eq i32 %bf.clear42.i, 20
  br i1 %cmp43.i, label %land.rhs44.i, label %qualify_type.exit

land.rhs44.i:                                     ; preds = %land.end.i
  %type46.i = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 0, i32 1
  %66 = load %union.tree_node** %type46.i, align 8, !tbaa !1
  %tobool47.i = icmp ne %union.tree_node* %66, null
  br label %qualify_type.exit

qualify_type.exit:                                ; preds = %land.end.i, %land.rhs44.i
  %67 = phi i1 [ false, %land.end.i ], [ %tobool47.i, %land.rhs44.i ]
  %land.ext49.i = zext i1 %67 to i32
  %mul50.i = shl nuw nsw i32 %land.ext49.i, 3
  %or31.i = or i32 %bf.clear.i, %mul5.i
  %or38.i = or i32 %or31.i, %mul10.i
  %or51.i = or i32 %or38.i, %mul17.i
  %or.i = or i32 %or51.i, %mul30.i
  %or11.i = or i32 %or.i, %bf.clear23.i
  %or18.i = or i32 %or11.i, %mul37.i
  %or52.i = or i32 %or18.i, %mul50.i
  %call.i = tail call %union.tree_node* @c_build_qualified_type(%union.tree_node* %59, i32 %or52.i) #6
  %call215 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %call.i) #6
  br label %if.end248

if.else216:                                       ; preds = %if.else190
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([48 x i8]* @.str94, i64 0, i64 0)) #6
  %68 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !7
  %call217 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %68) #6
  br label %if.end248

if.else223:                                       ; preds = %if.else125
  %cmp226 = icmp eq i32 %bf.clear32, 6
  %or.cond322 = and i1 %cmp126, %cmp226
  br i1 %or.cond322, label %if.then227, label %if.else233

if.then227:                                       ; preds = %if.else223
  %call228 = tail call i32 @integer_zerop(%union.tree_node* %op2.addr.0) #6
  %tobool229 = icmp eq i32 %call228, 0
  br i1 %tobool229, label %if.then230, label %if.else231

if.then230:                                       ; preds = %if.then227
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([56 x i8]* @.str95, i64 0, i64 0)) #6
  br label %if.end248

if.else231:                                       ; preds = %if.then227
  %69 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !7
  br label %if.end248

if.else233:                                       ; preds = %if.else223
  %or.cond324 = and i1 %cmp128, %cmp59
  br i1 %or.cond324, label %if.then237, label %if.then250

if.then237:                                       ; preds = %if.else233
  %call238 = tail call i32 @integer_zerop(%union.tree_node* %op1.addr.0) #6
  %tobool239 = icmp eq i32 %call238, 0
  br i1 %tobool239, label %if.then240, label %if.else241

if.then240:                                       ; preds = %if.then237
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([56 x i8]* @.str95, i64 0, i64 0)) #6
  br label %if.end248

if.else241:                                       ; preds = %if.then237
  %70 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !7
  br label %if.end248

if.end248:                                        ; preds = %if.then240, %if.else241, %if.then230, %if.else231, %if.then52, %land.lhs.true99, %land.lhs.true104, %if.then89, %if.then75, %if.else108, %cond.true, %cond.false, %land.end.i521, %qualify_type.exit448, %if.else216, %qualify_type.exit, %land.end.i476, %if.then132, %if.end124
  %result_type.0 = phi %union.tree_node* [ %call70, %cond.true ], [ %call70, %land.lhs.true99 ], [ %call70, %land.lhs.true104 ], [ %call70, %if.else108 ], [ %call70, %if.then89 ], [ %call70, %if.then75 ], [ %call70, %cond.false ], [ %19, %if.end124 ], [ %call133, %if.then132 ], [ %call.i534, %land.end.i521 ], [ %call.i489, %land.end.i476 ], [ %call189, %qualify_type.exit448 ], [ %call215, %qualify_type.exit ], [ %call217, %if.else216 ], [ %., %if.then52 ], [ %2, %if.else231 ], [ %2, %if.then230 ], [ %3, %if.else241 ], [ %3, %if.then240 ]
  %op2.addr.2 = phi %union.tree_node* [ %op2.addr.0, %cond.true ], [ %op2.addr.0, %land.lhs.true99 ], [ %op2.addr.0, %land.lhs.true104 ], [ %op2.addr.0, %if.else108 ], [ %op2.addr.0, %if.then89 ], [ %op2.addr.0, %if.then75 ], [ %op2.addr.0, %cond.false ], [ %op2.addr.0, %if.end124 ], [ %op2.addr.0, %if.then132 ], [ %op2.addr.0, %land.end.i521 ], [ %op2.addr.0, %land.end.i476 ], [ %op2.addr.0, %qualify_type.exit448 ], [ %op2.addr.0, %qualify_type.exit ], [ %op2.addr.0, %if.else216 ], [ %op2.addr.0, %if.then52 ], [ %69, %if.else231 ], [ %op2.addr.0, %if.then230 ], [ %op2.addr.0, %if.else241 ], [ %op2.addr.0, %if.then240 ]
  %op1.addr.2 = phi %union.tree_node* [ %op1.addr.0, %cond.true ], [ %op1.addr.0, %land.lhs.true99 ], [ %op1.addr.0, %land.lhs.true104 ], [ %op1.addr.0, %if.else108 ], [ %op1.addr.0, %if.then89 ], [ %op1.addr.0, %if.then75 ], [ %op1.addr.0, %cond.false ], [ %op1.addr.0, %if.end124 ], [ %op1.addr.0, %if.then132 ], [ %op1.addr.0, %land.end.i521 ], [ %op1.addr.0, %land.end.i476 ], [ %op1.addr.0, %qualify_type.exit448 ], [ %op1.addr.0, %qualify_type.exit ], [ %op1.addr.0, %if.else216 ], [ %op1.addr.0, %if.then52 ], [ %op1.addr.0, %if.else231 ], [ %op1.addr.0, %if.then230 ], [ %70, %if.else241 ], [ %op1.addr.0, %if.then240 ]
  %tobool249 = icmp eq %union.tree_node* %result_type.0, null
  br i1 %tobool249, label %if.then250, label %if.end255

if.then250:                                       ; preds = %if.else233, %if.end248
  %op1.addr.2541 = phi %union.tree_node* [ %op1.addr.2, %if.end248 ], [ %op1.addr.0, %if.else233 ]
  %op2.addr.2539 = phi %union.tree_node* [ %op2.addr.2, %if.end248 ], [ %op2.addr.0, %if.else233 ]
  %71 = load i32* @flag_cond_mismatch, align 4, !tbaa !27
  %tobool251 = icmp eq i32 %71, 0
  br i1 %tobool251, label %if.else253, label %if.then252

if.then252:                                       ; preds = %if.then250
  %72 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !7
  br label %if.end255

if.else253:                                       ; preds = %if.then250
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([40 x i8]* @.str96, i64 0, i64 0)) #6
  %73 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end255:                                        ; preds = %if.end248, %if.then252
  %op1.addr.2540 = phi %union.tree_node* [ %op1.addr.2, %if.end248 ], [ %op1.addr.2541, %if.then252 ]
  %op2.addr.2538 = phi %union.tree_node* [ %op2.addr.2, %if.end248 ], [ %op2.addr.2539, %if.then252 ]
  %result_type.1 = phi %union.tree_node* [ %result_type.0, %if.end248 ], [ %72, %if.then252 ]
  %readonly_flag = getelementptr inbounds %union.tree_node* %op1.addr.2540, i64 0, i32 0, i32 0, i32 2
  %bf.load257 = load i32* %readonly_flag, align 8
  %bf.clear259 = and i32 %bf.load257, 4096
  %tobool260 = icmp eq i32 %bf.clear259, 0
  br i1 %tobool260, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end255
  %readonly_flag262 = getelementptr inbounds %union.tree_node* %op2.addr.2538, i64 0, i32 0, i32 0, i32 2
  %bf.load263 = load i32* %readonly_flag262, align 8
  %bf.clear265 = and i32 %bf.load263, 4096
  %tobool266 = icmp ne i32 %bf.clear265, 0
  br label %lor.end

lor.end:                                          ; preds = %if.end255, %lor.rhs
  %74 = phi i1 [ true, %if.end255 ], [ %tobool266, %lor.rhs ]
  %cond = zext i1 %74 to i32
  %bf.clear270 = and i32 %bf.load257, 2048
  %tobool271 = icmp eq i32 %bf.clear270, 0
  br i1 %tobool271, label %lor.rhs272, label %lor.end279

lor.rhs272:                                       ; preds = %lor.end
  %volatile_flag274 = getelementptr inbounds %union.tree_node* %op2.addr.2538, i64 0, i32 0, i32 0, i32 2
  %bf.load275 = load i32* %volatile_flag274, align 8
  %bf.clear277 = lshr i32 %bf.load275, 10
  %75 = and i32 %bf.clear277, 2
  br label %lor.end279

lor.end279:                                       ; preds = %lor.end, %lor.rhs272
  %76 = phi i32 [ 2, %lor.end ], [ %75, %lor.rhs272 ]
  %or = or i32 %76, %cond
  %call281 = tail call %union.tree_node* @build_qualified_type(%union.tree_node* %result_type.1, i32 %or) #6
  %type283 = getelementptr inbounds %union.tree_node* %op1.addr.2540, i64 0, i32 0, i32 0, i32 1
  %77 = load %union.tree_node** %type283, align 8, !tbaa !1
  %cmp284 = icmp eq %union.tree_node* %call281, %77
  br i1 %cmp284, label %if.end287, label %if.then285

if.then285:                                       ; preds = %lor.end279
  %call286 = tail call %union.tree_node* @convert_and_check(%union.tree_node* %call281, %union.tree_node* %op1.addr.2540) #6
  br label %if.end287

if.end287:                                        ; preds = %lor.end279, %if.then285
  %op1.addr.3 = phi %union.tree_node* [ %call286, %if.then285 ], [ %op1.addr.2540, %lor.end279 ]
  %type289 = getelementptr inbounds %union.tree_node* %op2.addr.2538, i64 0, i32 0, i32 0, i32 1
  %78 = load %union.tree_node** %type289, align 8, !tbaa !1
  %cmp290 = icmp eq %union.tree_node* %call281, %78
  br i1 %cmp290, label %if.end293, label %if.then291

if.then291:                                       ; preds = %if.end287
  %call292 = tail call %union.tree_node* @convert_and_check(%union.tree_node* %call281, %union.tree_node* %op2.addr.2538) #6
  br label %if.end293

if.end293:                                        ; preds = %if.end287, %if.then291
  %op2.addr.3 = phi %union.tree_node* [ %call292, %if.then291 ], [ %op2.addr.2538, %if.end287 ]
  %bf.load296 = load i32* %code15, align 8
  %bf.clear297 = and i32 %bf.load296, 255
  %cmp298 = icmp eq i32 %bf.clear297, 25
  br i1 %cmp298, label %if.then299, label %if.end306

if.then299:                                       ; preds = %if.end293
  %call300 = tail call i32 @integer_zerop(%union.tree_node* %call1) #6
  %tobool301 = icmp ne i32 %call300, 0
  %cond304 = select i1 %tobool301, %union.tree_node* %op2.addr.3, %union.tree_node* %op1.addr.3
  %call305 = tail call %union.tree_node* @pedantic_non_lvalue(%union.tree_node* %cond304) #6
  br label %return

if.end306:                                        ; preds = %if.end293
  %call307 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 51, %union.tree_node* %call281, %union.tree_node* %call1, %union.tree_node* %op1.addr.3, %union.tree_node* %op2.addr.3) #6
  %call308 = tail call %union.tree_node* @fold(%union.tree_node* %call307) #6
  br label %return

return:                                           ; preds = %if.end306, %if.then299, %if.else253, %if.then34
  %retval.0 = phi %union.tree_node* [ %4, %if.then34 ], [ %call305, %if.then299 ], [ %call308, %if.end306 ], [ %73, %if.else253 ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @convert_and_check(%union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_compound_expr(%union.tree_node* nocapture %list) #0 {
entry:
  %call = tail call fastcc %union.tree_node* @internal_build_compound_expr(%union.tree_node* %list, i32 1)
  ret %union.tree_node* %call
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @internal_build_compound_expr(%union.tree_node* nocapture %list, i32 %first_p) #0 {
entry:
  %chain = getelementptr inbounds %union.tree_node* %list, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain, align 8, !tbaa !28
  %cmp = icmp eq %union.tree_node* %0, null
  br i1 %cmp, label %if.then, label %if.end17

if.then:                                          ; preds = %entry
  %tobool = icmp eq i32 %first_p, 0
  %value = getelementptr inbounds %union.tree_node* %list, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  br i1 %tobool, label %if.then1, label %if.end14

if.then1:                                         ; preds = %if.then
  %2 = load %union.tree_node** %1, align 8, !tbaa !25
  %call = tail call fastcc %union.tree_node* @default_function_array_conversion(%union.tree_node* %2)
  store %union.tree_node* %call, %union.tree_node** %1, align 8, !tbaa !25
  %call8 = tail call i32 @integer_zerop(%union.tree_node* %call) #6
  %tobool9 = icmp eq i32 %call8, 0
  br i1 %tobool9, label %if.end14, label %if.then10

if.then10:                                        ; preds = %if.then1
  %3 = load %union.tree_node** %1, align 8, !tbaa !25
  %call13 = tail call %union.tree_node* @non_lvalue(%union.tree_node* %3) #6
  br label %return

if.end14:                                         ; preds = %if.then, %if.then1
  %4 = load %union.tree_node** %1, align 8, !tbaa !25
  br label %return

if.end17:                                         ; preds = %entry
  %call20 = tail call fastcc %union.tree_node* @internal_build_compound_expr(%union.tree_node* %0, i32 0)
  %value22 = getelementptr inbounds %union.tree_node* %list, i64 0, i32 0, i32 2
  %5 = bitcast i32* %value22 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !25
  %side_effects_flag = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %side_effects_flag, align 8
  %bf.clear = and i32 %bf.load, 256
  %tobool24 = icmp eq i32 %bf.clear, 0
  br i1 %tobool24, label %if.then25, label %if.else

if.then25:                                        ; preds = %if.end17
  %7 = load i32* @extra_warnings, align 4, !tbaa !27
  %8 = load i32* @warn_unused_value, align 4
  %9 = or i32 %8, %7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %if.end45, label %land.lhs.true28

land.lhs.true28:                                  ; preds = %if.then25
  %bf.clear33 = and i32 %bf.load, 255
  %cmp34 = icmp eq i32 %bf.clear33, 114
  br i1 %cmp34, label %land.lhs.true35, label %if.then44

land.lhs.true35:                                  ; preds = %land.lhs.true28
  %type = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type, align 8, !tbaa !1
  %code40 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 2
  %bf.load41 = load i32* %code40, align 8
  %bf.clear42 = and i32 %bf.load41, 255
  %cmp43 = icmp eq i32 %bf.clear42, 5
  br i1 %cmp43, label %if.end45, label %if.then44

if.then44:                                        ; preds = %land.lhs.true35, %land.lhs.true28
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([52 x i8]* @.str176, i64 0, i64 0)) #6
  br label %if.end45

if.end45:                                         ; preds = %if.then25, %if.then44, %land.lhs.true35
  %12 = load i32* @pedantic, align 4, !tbaa !27
  %tobool46 = icmp eq i32 %12, 0
  br i1 %tobool46, label %return, label %if.end55

if.else:                                          ; preds = %if.end17
  %13 = load i32* @warn_unused_value, align 4, !tbaa !27
  %tobool49 = icmp eq i32 %13, 0
  br i1 %tobool49, label %if.end55, label %if.then50

if.then50:                                        ; preds = %if.else
  %call53 = tail call i32 @warn_if_unused_value(%union.tree_node* %6) #6
  br label %if.end55

if.end55:                                         ; preds = %if.else, %if.end45, %if.then50
  %type57 = getelementptr inbounds %union.tree_node* %call20, i64 0, i32 0, i32 0, i32 1
  %14 = load %union.tree_node** %type57, align 8, !tbaa !1
  %15 = load %union.tree_node** %5, align 8, !tbaa !25
  %call60 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 47, %union.tree_node* %14, %union.tree_node* %15, %union.tree_node* %call20) #6
  br label %return

return:                                           ; preds = %if.end45, %if.end55, %if.end14, %if.then10
  %retval.0 = phi %union.tree_node* [ %4, %if.end14 ], [ %call13, %if.then10 ], [ %call60, %if.end55 ], [ %call20, %if.end45 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_c_cast(%union.tree_node* readonly %type, %union.tree_node* %expr) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp = icmp eq %union.tree_node* %0, %type
  %cmp1 = icmp eq %union.tree_node* %0, %expr
  %or.cond507 = or i1 %cmp, %cmp1
  br i1 %or.cond507, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %2 = load %union.tree_node** %1, align 8, !tbaa !24
  %code = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.end12 [
    i32 18, label %if.then4
    i32 23, label %if.then11
  ]

if.then4:                                         ; preds = %if.end
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([26 x i8]* @.str97, i64 0, i64 0)) #6
  %3 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.then11:                                        ; preds = %if.end
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([29 x i8]* @.str98, i64 0, i64 0)) #6
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end12:                                         ; preds = %if.end
  %type14 = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 1
  %5 = load %union.tree_node** %type14, align 8, !tbaa !1
  %6 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 15
  %7 = load %union.tree_node** %6, align 8, !tbaa !24
  %cmp17 = icmp eq %union.tree_node* %2, %7
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.end12
  %8 = load i32* @pedantic, align 4, !tbaa !27
  %tobool = icmp ne i32 %8, 0
  %9 = and i32 %bf.load, 254
  %switch = icmp eq i32 %9, 20
  %or.cond508 = and i1 %tobool, %switch
  br i1 %or.cond508, label %if.then31, label %if.end391

if.then31:                                        ; preds = %if.then18
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([49 x i8]* @.str99, i64 0, i64 0)) #6
  br label %if.end391thread-pre-split

if.else:                                          ; preds = %if.end12
  %cmp38 = icmp eq i32 %bf.clear, 21
  br i1 %cmp38, label %if.then39, label %if.else95

if.then39:                                        ; preds = %if.else
  %call = tail call fastcc %union.tree_node* @default_function_array_conversion(%union.tree_node* %expr)
  %values = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 1
  %10 = load i8** %values, align 8
  %tobool41510 = icmp eq i8* %10, null
  br i1 %tobool41510, label %if.end94, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then39
  %11 = bitcast i8* %10 to %union.tree_node*
  %type47 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %field.0511 = phi %union.tree_node* [ %11, %for.body.lr.ph ], [ %18, %for.inc ]
  %type43 = getelementptr inbounds %union.tree_node* %field.0511, i64 0, i32 0, i32 0, i32 1
  %12 = load %union.tree_node** %type43, align 8, !tbaa !1
  %13 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 15
  %14 = load %union.tree_node** %13, align 8, !tbaa !24
  %15 = load %union.tree_node** %type47, align 8, !tbaa !1
  %16 = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 15
  %17 = load %union.tree_node** %16, align 8, !tbaa !24
  %call50 = tail call i32 @comptypes(%union.tree_node* %14, %union.tree_node* %17)
  %tobool51 = icmp eq i32 %call50, 0
  br i1 %tobool51, label %for.inc, label %if.then56

for.inc:                                          ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node* %field.0511, i64 0, i32 0, i32 0, i32 0
  %18 = load %union.tree_node** %chain, align 8, !tbaa !28
  %tobool41 = icmp eq %union.tree_node* %18, null
  br i1 %tobool41, label %if.end94, label %for.body

if.then56:                                        ; preds = %for.body
  %19 = load i32* @pedantic, align 4, !tbaa !27
  %tobool57 = icmp eq i32 %19, 0
  br i1 %tobool57, label %if.end59, label %if.then58

if.then58:                                        ; preds = %if.then56
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([34 x i8]* @.str100, i64 0, i64 0)) #6
  br label %if.end59

if.end59:                                         ; preds = %if.then56, %if.then58
  %call84 = tail call %union.tree_node* @build_tree_list(%union.tree_node* %field.0511, %union.tree_node* %call) #6
  %call85 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 46, %union.tree_node* %2, %union.tree_node* null, %union.tree_node* %call84) #6
  %call86 = tail call fastcc %union.tree_node* @digest_init(%union.tree_node* %2, %union.tree_node* %call85, i32 0)
  %constant_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load88 = load i32* %constant_flag, align 8
  %bf.clear89 = and i32 %bf.load88, 512
  %constant_flag91 = getelementptr inbounds %union.tree_node* %call86, i64 0, i32 0, i32 0, i32 2
  %bf.load92 = load i32* %constant_flag91, align 8
  %bf.clear93 = and i32 %bf.load92, -513
  %bf.set = or i32 %bf.clear93, %bf.clear89
  store i32 %bf.set, i32* %constant_flag91, align 8
  br label %return

if.end94:                                         ; preds = %for.inc, %if.then39
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([50 x i8]* @.str102, i64 0, i64 0)) #6
  %20 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.else95:                                        ; preds = %if.else
  %21 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !7
  %cmp96 = icmp eq %union.tree_node* %2, %21
  br i1 %cmp96, label %if.then97, label %if.end99

if.then97:                                        ; preds = %if.else95
  %call98 = tail call %union.tree_node* @build1(i32 114, %union.tree_node* %2, %union.tree_node* %expr) #6
  br label %return

if.end99:                                         ; preds = %if.else95
  %call100 = tail call fastcc %union.tree_node* @default_function_array_conversion(%union.tree_node* %expr)
  %type102 = getelementptr inbounds %union.tree_node* %call100, i64 0, i32 0, i32 0, i32 1
  %22 = load %union.tree_node** %type102, align 8, !tbaa !1
  %23 = load i32* @warn_cast_qual, align 4, !tbaa !27
  %tobool103 = icmp eq i32 %23, 0
  br i1 %tobool103, label %if.end281, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end99
  %bf.load106 = load i32* %code, align 8
  %bf.clear107 = and i32 %bf.load106, 255
  %cmp108 = icmp eq i32 %bf.clear107, 13
  br i1 %cmp108, label %land.lhs.true109, label %if.end281

land.lhs.true109:                                 ; preds = %land.lhs.true
  %code111 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 2
  %bf.load112 = load i32* %code111, align 8
  %bf.clear113 = and i32 %bf.load112, 255
  %cmp114 = icmp eq i32 %bf.clear113, 13
  br i1 %cmp114, label %do.body, label %if.end281

do.body:                                          ; preds = %land.lhs.true109, %do.cond
  %in_type.0 = phi %union.tree_node* [ %25, %do.cond ], [ %2, %land.lhs.true109 ]
  %in_otype.0 = phi %union.tree_node* [ %24, %do.cond ], [ %22, %land.lhs.true109 ]
  %added.0 = phi i32 [ %added.1, %do.cond ], [ 0, %land.lhs.true109 ]
  %discarded.0 = phi i32 [ %discarded.1, %do.cond ], [ 0, %land.lhs.true109 ]
  %type117 = getelementptr inbounds %union.tree_node* %in_otype.0, i64 0, i32 0, i32 0, i32 1
  %24 = load %union.tree_node** %type117, align 8, !tbaa !1
  %type119 = getelementptr inbounds %union.tree_node* %in_type.0, i64 0, i32 0, i32 0, i32 1
  %25 = load %union.tree_node** %type119, align 8, !tbaa !1
  %code121 = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load122 = load i32* %code121, align 8
  %bf.clear123 = and i32 %bf.load122, 255
  %cmp124 = icmp eq i32 %bf.clear123, 23
  br i1 %cmp124, label %land.lhs.true125, label %if.else191

land.lhs.true125:                                 ; preds = %do.body
  %code127 = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 2
  %bf.load128 = load i32* %code127, align 8
  %bf.clear129 = and i32 %bf.load128, 255
  %cmp130 = icmp eq i32 %bf.clear129, 23
  br i1 %cmp130, label %land.end186, label %if.else191

land.end186:                                      ; preds = %land.lhs.true125
  %bf.lshr134 = lshr i32 %bf.load128, 12
  %bf.clear135 = and i32 %bf.lshr134, 1
  %26 = lshr i32 %bf.load128, 10
  %mul140 = and i32 %26, 2
  %or = or i32 %bf.clear135, %mul140
  %type141 = bitcast %union.tree_node* %25 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type141, i64 0, i32 6
  %bf.load142 = load i32* %restrict_flag, align 4
  %27 = lshr i32 %bf.load142, 19
  %mul145 = and i32 %27, 4
  %or146 = or i32 %or, %mul145
  %bf.lshr160 = lshr i32 %bf.load122, 12
  %bf.clear161 = and i32 %bf.lshr160, 1
  %28 = lshr i32 %bf.load122, 10
  %mul168 = and i32 %28, 2
  %or169 = or i32 %bf.clear161, %mul168
  %type170 = bitcast %union.tree_node* %24 to %struct.tree_type*
  %restrict_flag171 = getelementptr inbounds %struct.tree_type* %type170, i64 0, i32 6
  %bf.load172 = load i32* %restrict_flag171, align 4
  %29 = lshr i32 %bf.load172, 19
  %mul175 = and i32 %29, 4
  %or189 = or i32 %or169, %mul175
  %neg = xor i32 %or189, -1
  %and = and i32 %or146, %neg
  %or190 = or i32 %and, %added.0
  br label %do.cond

if.else191:                                       ; preds = %land.lhs.true125, %do.body
  %bf.lshr195 = lshr i32 %bf.load122, 12
  %bf.clear196 = and i32 %bf.lshr195, 1
  %30 = lshr i32 %bf.load122, 10
  %mul203 = and i32 %30, 2
  %or204 = or i32 %bf.clear196, %mul203
  %type205 = bitcast %union.tree_node* %24 to %struct.tree_type*
  %restrict_flag206 = getelementptr inbounds %struct.tree_type* %type205, i64 0, i32 6
  %bf.load207 = load i32* %restrict_flag206, align 4
  %31 = lshr i32 %bf.load207, 19
  %mul210 = and i32 %31, 4
  %or211 = or i32 %or204, %mul210
  %cmp216 = icmp eq i32 %bf.clear123, 20
  br i1 %cmp216, label %land.rhs217, label %land.end221

land.rhs217:                                      ; preds = %if.else191
  %type219 = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 1
  %32 = load %union.tree_node** %type219, align 8, !tbaa !1
  %tobool220 = icmp ne %union.tree_node* %32, null
  br label %land.end221

land.end221:                                      ; preds = %land.rhs217, %if.else191
  %33 = phi i1 [ false, %if.else191 ], [ %tobool220, %land.rhs217 ]
  %land.ext222 = zext i1 %33 to i32
  %mul223 = shl nuw nsw i32 %land.ext222, 3
  %or224 = or i32 %or211, %mul223
  %readonly_flag226 = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 2
  %bf.load227 = load i32* %readonly_flag226, align 8
  %bf.lshr228 = lshr i32 %bf.load227, 12
  %bf.clear229 = and i32 %bf.lshr228, 1
  %34 = lshr i32 %bf.load227, 10
  %mul236 = and i32 %34, 2
  %or237 = or i32 %bf.clear229, %mul236
  %type238 = bitcast %union.tree_node* %25 to %struct.tree_type*
  %restrict_flag239 = getelementptr inbounds %struct.tree_type* %type238, i64 0, i32 6
  %bf.load240 = load i32* %restrict_flag239, align 4
  %35 = lshr i32 %bf.load240, 19
  %mul243 = and i32 %35, 4
  %or244 = or i32 %or237, %mul243
  %bf.clear248 = and i32 %bf.load227, 255
  %cmp249 = icmp eq i32 %bf.clear248, 20
  br i1 %cmp249, label %land.rhs250, label %land.end254

land.rhs250:                                      ; preds = %land.end221
  %type252 = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 1
  %36 = load %union.tree_node** %type252, align 8, !tbaa !1
  %tobool253 = icmp ne %union.tree_node* %36, null
  br label %land.end254

land.end254:                                      ; preds = %land.rhs250, %land.end221
  %37 = phi i1 [ false, %land.end221 ], [ %tobool253, %land.rhs250 ]
  %land.ext255 = zext i1 %37 to i32
  %mul256 = shl nuw nsw i32 %land.ext255, 3
  %or257 = or i32 %or244, %mul256
  %neg258 = xor i32 %or257, -1
  %and259 = and i32 %or224, %neg258
  %or260 = or i32 %and259, %discarded.0
  br label %do.cond

do.cond:                                          ; preds = %land.end186, %land.end254
  %bf.load264 = phi i32 [ %bf.load128, %land.end186 ], [ %bf.load227, %land.end254 ]
  %added.1 = phi i32 [ %or190, %land.end186 ], [ %added.0, %land.end254 ]
  %discarded.1 = phi i32 [ %discarded.0, %land.end186 ], [ %or260, %land.end254 ]
  %bf.clear265 = and i32 %bf.load264, 255
  %cmp266 = icmp eq i32 %bf.clear265, 13
  %cmp272 = icmp eq i32 %bf.clear123, 13
  %or.cond518 = and i1 %cmp266, %cmp272
  br i1 %or.cond518, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %tobool275 = icmp eq i32 %added.1, 0
  br i1 %tobool275, label %if.end277, label %if.then276

if.then276:                                       ; preds = %do.end
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([42 x i8]* @.str103, i64 0, i64 0)) #6
  br label %if.end277

if.end277:                                        ; preds = %do.end, %if.then276
  %tobool278 = icmp eq i32 %discarded.1, 0
  br i1 %tobool278, label %if.end281, label %if.then279

if.then279:                                       ; preds = %if.end277
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([50 x i8]* @.str104, i64 0, i64 0)) #6
  br label %if.end281

if.end281:                                        ; preds = %if.end277, %if.end99, %if.then279, %land.lhs.true109, %land.lhs.true
  %bf.load284 = load i32* %code, align 8
  %bf.clear285 = and i32 %bf.load284, 255
  %cmp286 = icmp eq i32 %bf.clear285, 6
  br i1 %cmp286, label %land.lhs.true287, label %if.end310

land.lhs.true287:                                 ; preds = %if.end281
  %code289 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 2
  %bf.load290 = load i32* %code289, align 8
  %bf.clear291 = and i32 %bf.load290, 255
  %cmp292 = icmp eq i32 %bf.clear291, 13
  br i1 %cmp292, label %land.lhs.true293, label %if.end310

land.lhs.true293:                                 ; preds = %land.lhs.true287
  %type294 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type294, i64 0, i32 6
  %bf.load295 = load i32* %precision, align 4
  %type297 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %precision298 = getelementptr inbounds %struct.tree_type* %type297, i64 0, i32 6
  %bf.load299 = load i32* %precision298, align 4
  %38 = xor i32 %bf.load299, %bf.load295
  %39 = and i32 %38, 511
  %cmp301 = icmp eq i32 %39, 0
  br i1 %cmp301, label %if.end310, label %land.lhs.true302

land.lhs.true302:                                 ; preds = %land.lhs.true293
  %constant_flag304 = getelementptr inbounds %union.tree_node* %call100, i64 0, i32 0, i32 0, i32 2
  %bf.load305 = load i32* %constant_flag304, align 8
  %bf.clear307 = and i32 %bf.load305, 512
  %tobool308 = icmp eq i32 %bf.clear307, 0
  br i1 %tobool308, label %if.then309, label %if.end310

if.then309:                                       ; preds = %land.lhs.true302
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([47 x i8]* @.str105, i64 0, i64 0)) #6
  br label %if.end310

if.end310:                                        ; preds = %land.lhs.true302, %land.lhs.true293, %if.then309, %land.lhs.true287, %if.end281
  %40 = load i32* @warn_bad_function_cast, align 4, !tbaa !27
  %tobool311 = icmp eq i32 %40, 0
  br i1 %tobool311, label %if.end329, label %land.lhs.true312

land.lhs.true312:                                 ; preds = %if.end310
  %code314 = getelementptr inbounds %union.tree_node* %call100, i64 0, i32 0, i32 0, i32 2
  %bf.load315 = load i32* %code314, align 8
  %bf.clear316 = and i32 %bf.load315, 255
  %cmp317 = icmp eq i32 %bf.clear316, 53
  br i1 %cmp317, label %land.lhs.true318, label %if.end329

land.lhs.true318:                                 ; preds = %land.lhs.true312
  %bf.load321 = load i32* %code, align 8
  %code324 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 2
  %bf.load325 = load i32* %code324, align 8
  %41 = xor i32 %bf.load325, %bf.load321
  %42 = and i32 %41, 255
  %cmp327 = icmp eq i32 %42, 0
  br i1 %cmp327, label %if.end329, label %if.then328

if.then328:                                       ; preds = %land.lhs.true318
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([34 x i8]* @.str106, i64 0, i64 0)) #6
  br label %if.end329

if.end329:                                        ; preds = %land.lhs.true318, %if.end310, %if.then328, %land.lhs.true312
  %bf.load332 = load i32* %code, align 8
  %bf.clear333 = and i32 %bf.load332, 255
  %cmp334 = icmp eq i32 %bf.clear333, 13
  br i1 %cmp334, label %land.lhs.true335, label %if.end359

land.lhs.true335:                                 ; preds = %if.end329
  %code337 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 2
  %bf.load338 = load i32* %code337, align 8
  %bf.clear339 = and i32 %bf.load338, 255
  %cmp340 = icmp eq i32 %bf.clear339, 6
  br i1 %cmp340, label %land.lhs.true341, label %if.end359

land.lhs.true341:                                 ; preds = %land.lhs.true335
  %type342 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %precision343 = getelementptr inbounds %struct.tree_type* %type342, i64 0, i32 6
  %bf.load344 = load i32* %precision343, align 4
  %type346 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %precision347 = getelementptr inbounds %struct.tree_type* %type346, i64 0, i32 6
  %bf.load348 = load i32* %precision347, align 4
  %43 = xor i32 %bf.load348, %bf.load344
  %44 = and i32 %43, 511
  %cmp350 = icmp eq i32 %44, 0
  br i1 %cmp350, label %if.end359, label %land.lhs.true351

land.lhs.true351:                                 ; preds = %land.lhs.true341
  %constant_flag353 = getelementptr inbounds %union.tree_node* %call100, i64 0, i32 0, i32 0, i32 2
  %bf.load354 = load i32* %constant_flag353, align 8
  %bf.clear356 = and i32 %bf.load354, 512
  %tobool357 = icmp eq i32 %bf.clear356, 0
  br i1 %tobool357, label %if.then358, label %if.end359

if.then358:                                       ; preds = %land.lhs.true351
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([47 x i8]* @.str107, i64 0, i64 0)) #6
  br label %if.end359

if.end359:                                        ; preds = %land.lhs.true351, %land.lhs.true341, %if.then358, %land.lhs.true335, %if.end329
  %call360 = tail call %union.tree_node* @convert(%union.tree_node* %2, %union.tree_node* %call100) #6
  %code362 = getelementptr inbounds %union.tree_node* %call360, i64 0, i32 0, i32 0, i32 2
  %bf.load363 = load i32* %code362, align 8
  %bf.clear364 = and i32 %bf.load363, 255
  %cmp365 = icmp eq i32 %bf.clear364, 25
  br i1 %cmp365, label %if.then366, label %if.end391thread-pre-split

if.then366:                                       ; preds = %if.end359
  %public_flag = getelementptr inbounds %union.tree_node* %call100, i64 0, i32 0, i32 0, i32 2
  %bf.load368 = load i32* %public_flag, align 8
  %bf.clear370 = and i32 %bf.load368, 524288
  %bf.clear376 = and i32 %bf.load363, -524289
  %bf.set377 = or i32 %bf.clear370, %bf.clear376
  store i32 %bf.set377, i32* %code362, align 8
  %bf.load379 = load i32* %public_flag, align 8
  %bf.clear381 = and i32 %bf.load379, 262144
  %bf.clear387 = and i32 %bf.set377, -262145
  %bf.set388 = or i32 %bf.clear387, %bf.clear381
  store i32 %bf.set388, i32* %code362, align 8
  br label %if.end391thread-pre-split

if.end391thread-pre-split:                        ; preds = %if.then31, %if.end359, %if.then366
  %value.0.ph = phi %union.tree_node* [ %call360, %if.then366 ], [ %call360, %if.end359 ], [ %expr, %if.then31 ]
  %.pr = load i32* @pedantic, align 4, !tbaa !27
  br label %if.end391

if.end391:                                        ; preds = %if.end391thread-pre-split, %if.then18
  %45 = phi i32 [ %.pr, %if.end391thread-pre-split ], [ %8, %if.then18 ]
  %value.0 = phi %union.tree_node* [ %value.0.ph, %if.end391thread-pre-split ], [ %expr, %if.then18 ]
  %tobool392 = icmp eq i32 %45, 0
  br i1 %tobool392, label %return, label %land.lhs.true393

land.lhs.true393:                                 ; preds = %if.end391
  %code395 = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 2
  %bf.load396 = load i32* %code395, align 8
  %bf.clear397 = and i32 %bf.load396, 255
  %cmp398 = icmp eq i32 %bf.clear397, 25
  br i1 %cmp398, label %land.lhs.true399, label %if.end415

land.lhs.true399:                                 ; preds = %land.lhs.true393
  %code401 = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 2
  %bf.load402 = load i32* %code401, align 8
  %bf.clear403 = and i32 %bf.load402, 255
  %cmp404 = icmp eq i32 %bf.clear403, 25
  br i1 %cmp404, label %land.lhs.true405, label %if.end415

land.lhs.true405:                                 ; preds = %land.lhs.true399
  %46 = load %union.tree_node** %type14, align 8, !tbaa !1
  %code409 = getelementptr inbounds %union.tree_node* %46, i64 0, i32 0, i32 0, i32 2
  %bf.load410 = load i32* %code409, align 8
  %bf.clear411 = and i32 %bf.load410, 255
  %cmp412 = icmp eq i32 %bf.clear411, 6
  br i1 %cmp412, label %if.end415, label %if.then413

if.then413:                                       ; preds = %land.lhs.true405
  %call414 = tail call %union.tree_node* @non_lvalue(%union.tree_node* %value.0) #6
  %.pre = load i32* @pedantic, align 4
  br label %if.end415

if.end415:                                        ; preds = %land.lhs.true405, %if.then413, %land.lhs.true399, %land.lhs.true393
  %47 = phi i32 [ %.pre, %if.then413 ], [ %45, %land.lhs.true405 ], [ %45, %land.lhs.true399 ], [ %45, %land.lhs.true393 ]
  %value.1 = phi %union.tree_node* [ %call414, %if.then413 ], [ %value.0, %land.lhs.true405 ], [ %value.0, %land.lhs.true399 ], [ %value.0, %land.lhs.true393 ]
  %cmp416 = icmp eq %union.tree_node* %value.1, %expr
  %tobool418 = icmp ne i32 %47, 0
  %or.cond = and i1 %cmp416, %tobool418
  br i1 %or.cond, label %if.then419, label %return

if.then419:                                       ; preds = %if.end415
  %call420 = tail call %union.tree_node* @non_lvalue(%union.tree_node* %expr) #6
  br label %return

return:                                           ; preds = %if.end391, %entry, %if.end415, %if.then419, %if.then97, %if.end94, %if.end59, %if.then11, %if.then4
  %retval.0 = phi %union.tree_node* [ %3, %if.then4 ], [ %4, %if.then11 ], [ %call86, %if.end59 ], [ %20, %if.end94 ], [ %call98, %if.then97 ], [ %call420, %if.then419 ], [ %value.1, %if.end415 ], [ %0, %entry ], [ %value.0, %if.end391 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @digest_init(%union.tree_node* %type, %union.tree_node* %init, i32 %require_constant) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp = icmp eq %union.tree_node* %0, %type
  %cmp2 = icmp eq %union.tree_node* %0, %init
  %or.cond1 = or i1 %cmp, %cmp2
  br i1 %or.cond1, label %return, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %entry
  %type5 = getelementptr inbounds %union.tree_node* %init, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type5, align 8, !tbaa !1
  %cmp6 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp6, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false3
  %code8 = getelementptr inbounds %union.tree_node* %init, i64 0, i32 0, i32 0, i32 2
  %bf.load9 = load i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  %cmp11 = icmp eq i32 %bf.clear10, 116
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end
  %operands = getelementptr inbounds %union.tree_node* %init, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %2 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end
  %inside_init.0 = phi %union.tree_node* [ %2, %if.then12 ], [ %init, %if.end ]
  %call = tail call %union.tree_node* @fold(%union.tree_node* %inside_init.0) #6
  %cmp14 = icmp eq i32 %bf.clear, 18
  br i1 %cmp14, label %if.then15, label %if.end118

if.then15:                                        ; preds = %if.end13
  %type17 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type17, align 8, !tbaa !1
  %4 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 15
  %5 = load %union.tree_node** %4, align 8, !tbaa !24
  %6 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %cmp19 = icmp eq %union.tree_node* %5, %6
  %7 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8
  %cmp21 = icmp eq %union.tree_node* %5, %7
  %or.cond2 = or i1 %cmp19, %cmp21
  %8 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 8
  %cmp23 = icmp eq %union.tree_node* %5, %8
  %or.cond3 = or i1 %or.cond2, %cmp23
  %9 = load %union.tree_node** getelementptr inbounds ([32 x %union.tree_node*]* @c_global_trees, i64 0, i64 2), align 8
  %cmp25 = icmp eq %union.tree_node* %5, %9
  %or.cond4 = or i1 %or.cond3, %cmp25
  br i1 %or.cond4, label %land.lhs.true, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %if.then15
  %10 = load %union.tree_node** getelementptr inbounds ([32 x %union.tree_node*]* @c_global_trees, i64 0, i64 1), align 8, !tbaa !7
  %cmp27 = icmp eq %union.tree_node* %5, %10
  %tobool = icmp ne %union.tree_node* %call, null
  %or.cond = and i1 %cmp27, %tobool
  br i1 %or.cond, label %land.lhs.true28, label %if.end118

land.lhs.true:                                    ; preds = %if.then15
  %cond5 = icmp eq %union.tree_node* %call, null
  br i1 %cond5, label %if.end270, label %land.lhs.true28

land.lhs.true28:                                  ; preds = %land.lhs.true, %lor.lhs.false26
  %code30 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load31 = load i32* %code30, align 8
  %bf.clear32 = and i32 %bf.load31, 255
  %cmp33 = icmp eq i32 %bf.clear32, 29
  br i1 %cmp33, label %if.then34, label %land.lhs.true120

if.then34:                                        ; preds = %land.lhs.true28
  %type36 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type36, align 8, !tbaa !1
  %12 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 15
  %13 = load %union.tree_node** %12, align 8, !tbaa !24
  %14 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %15 = load %union.tree_node** %14, align 8, !tbaa !24
  %call41 = tail call i32 @comptypes(%union.tree_node* %13, %union.tree_node* %15)
  %tobool42 = icmp eq i32 %call41, 0
  br i1 %tobool42, label %if.end44, label %return

if.end44:                                         ; preds = %if.then34
  %16 = load %union.tree_node** %type36, align 8, !tbaa !1
  %type48 = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 1
  %17 = load %union.tree_node** %type48, align 8, !tbaa !1
  %18 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 15
  %19 = load %union.tree_node** %18, align 8, !tbaa !24
  %20 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %cmp51 = icmp eq %union.tree_node* %19, %20
  %type71 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %precision72 = getelementptr inbounds %struct.tree_type* %type71, i64 0, i32 6
  %bf.load73 = load i32* %precision72, align 4
  br i1 %cmp51, label %land.lhs.true70, label %land.lhs.true52

land.lhs.true52:                                  ; preds = %if.end44
  %type56 = bitcast %union.tree_node* %20 to %struct.tree_type*
  %precision57 = getelementptr inbounds %struct.tree_type* %type56, i64 0, i32 6
  %bf.load58 = load i32* %precision57, align 4
  %21 = xor i32 %bf.load58, %bf.load73
  %22 = and i32 %21, 511
  %cmp60 = icmp eq i32 %22, 0
  br i1 %cmp60, label %if.then61, label %if.end81

if.then61:                                        ; preds = %land.lhs.true52
  tail call void @error_init(i8* getelementptr inbounds ([40 x i8]* @.str155, i64 0, i64 0))
  %23 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

land.lhs.true70:                                  ; preds = %if.end44
  %type75 = bitcast %union.tree_node* %19 to %struct.tree_type*
  %precision76 = getelementptr inbounds %struct.tree_type* %type75, i64 0, i32 6
  %bf.load77 = load i32* %precision76, align 4
  %24 = xor i32 %bf.load77, %bf.load73
  %25 = and i32 %24, 511
  %cmp79 = icmp eq i32 %25, 0
  br i1 %cmp79, label %if.end81, label %if.then80

if.then80:                                        ; preds = %land.lhs.true70
  tail call void @error_init(i8* getelementptr inbounds ([43 x i8]* @.str156, i64 0, i64 0))
  %26 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end81:                                         ; preds = %land.lhs.true52, %land.lhs.true70
  store %union.tree_node* %type, %union.tree_node** %type36, align 8, !tbaa !1
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %27 = load i8** %values, align 8
  %cmp85 = icmp eq i8* %27, null
  br i1 %cmp85, label %return, label %land.lhs.true86

land.lhs.true86:                                  ; preds = %if.end81
  %size = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 2
  %28 = bitcast i32* %size to %union.tree_node**
  %29 = load %union.tree_node** %28, align 8, !tbaa !8
  %cmp88 = icmp eq %union.tree_node* %29, null
  br i1 %cmp88, label %return, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %land.lhs.true86
  %code93 = getelementptr inbounds %union.tree_node* %29, i64 0, i32 0, i32 0, i32 2
  %bf.load94 = load i32* %code93, align 8
  %bf.clear95 = and i32 %bf.load94, 255
  %cmp96 = icmp eq i32 %bf.clear95, 25
  br i1 %cmp96, label %land.lhs.true97, label %return

land.lhs.true97:                                  ; preds = %land.lhs.true89
  %30 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 4
  %31 = load %union.tree_node** %30, align 8, !tbaa !32
  %32 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %33 = load i32* %32, align 4, !tbaa !55
  %type99 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %precision100 = getelementptr inbounds %struct.tree_type* %type99, i64 0, i32 6
  %bf.load101 = load i32* %precision100, align 4
  %34 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %type103 = bitcast %union.tree_node* %34 to %struct.tree_type*
  %precision104 = getelementptr inbounds %struct.tree_type* %type103, i64 0, i32 6
  %bf.load105 = load i32* %precision104, align 4
  %35 = xor i32 %bf.load105, %bf.load101
  %36 = and i32 %35, 511
  %cmp107 = icmp eq i32 %36, 0
  br i1 %cmp107, label %cond.end, label %cond.true

cond.true:                                        ; preds = %land.lhs.true97
  %37 = load %union.tree_node** getelementptr inbounds ([32 x %union.tree_node*]* @c_global_trees, i64 0, i64 0), align 8, !tbaa !7
  %type108 = bitcast %union.tree_node* %37 to %struct.tree_type*
  %precision109 = getelementptr inbounds %struct.tree_type* %type108, i64 0, i32 6
  %bf.load110 = load i32* %precision109, align 4
  %bf.clear111 = lshr i32 %bf.load110, 3
  %div = and i32 %bf.clear111, 63
  br label %cond.end

cond.end:                                         ; preds = %land.lhs.true97, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ 1, %land.lhs.true97 ]
  %sub = sub nsw i32 %33, %cond
  %conv = sext i32 %sub to i64
  %call112 = tail call i32 @compare_tree_int(%union.tree_node* %31, i64 %conv) #6
  %cmp113 = icmp slt i32 %call112, 0
  br i1 %cmp113, label %if.then115, label %return

if.then115:                                       ; preds = %cond.end
  tail call void @pedwarn_init(i8* getelementptr inbounds ([50 x i8]* @.str157, i64 0, i64 0))
  br label %return

if.end118:                                        ; preds = %lor.lhs.false26, %if.end13
  %tobool119 = icmp eq %union.tree_node* %call, null
  br i1 %tobool119, label %if.end270, label %land.lhs.true120

land.lhs.true120:                                 ; preds = %land.lhs.true28, %if.end118
  %type122 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %38 = load %union.tree_node** %type122, align 8, !tbaa !1
  %cmp123 = icmp eq %union.tree_node* %38, null
  br i1 %cmp123, label %if.end270, label %land.lhs.true125

land.lhs.true125:                                 ; preds = %land.lhs.true120
  %39 = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 15
  %40 = load %union.tree_node** %39, align 8, !tbaa !24
  %41 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %42 = load %union.tree_node** %41, align 8, !tbaa !24
  %call132 = tail call i32 @comptypes(%union.tree_node* %40, %union.tree_node* %42)
  %tobool133 = icmp eq i32 %call132, 0
  br i1 %tobool133, label %lor.lhs.false134, label %if.then180

lor.lhs.false134:                                 ; preds = %land.lhs.true125
  br i1 %cmp14, label %land.lhs.true137, label %lor.lhs.false142

land.lhs.true137:                                 ; preds = %lor.lhs.false134
  %43 = load %union.tree_node** %type122, align 8, !tbaa !1
  %call140 = tail call i32 @comptypes(%union.tree_node* %43, %union.tree_node* %type)
  %tobool141 = icmp eq i32 %call140, 0
  br i1 %tobool141, label %if.end270, label %if.end185

lor.lhs.false142:                                 ; preds = %lor.lhs.false134
  switch i32 %bf.clear, label %if.end270 [
    i32 9, label %land.lhs.true145
    i32 13, label %land.lhs.true153
  ]

land.lhs.true145:                                 ; preds = %lor.lhs.false142
  %44 = load %union.tree_node** %type122, align 8, !tbaa !1
  %call148 = tail call i32 @comptypes(%union.tree_node* %44, %union.tree_node* %type)
  %tobool149 = icmp eq i32 %call148, 0
  br i1 %tobool149, label %if.end270, label %if.end185

land.lhs.true153:                                 ; preds = %lor.lhs.false142
  %45 = load %union.tree_node** %type122, align 8, !tbaa !1
  %code157 = getelementptr inbounds %union.tree_node* %45, i64 0, i32 0, i32 0, i32 2
  %bf.load158 = load i32* %code157, align 8
  %bf.clear159 = and i32 %bf.load158, 255
  switch i32 %bf.clear159, label %if.end270 [
    i32 18, label %land.lhs.true171
    i32 23, label %land.lhs.true171
  ]

land.lhs.true171:                                 ; preds = %land.lhs.true153, %land.lhs.true153
  %type175 = getelementptr inbounds %union.tree_node* %45, i64 0, i32 0, i32 0, i32 1
  %46 = load %union.tree_node** %type175, align 8, !tbaa !1
  %type177 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %47 = load %union.tree_node** %type177, align 8, !tbaa !1
  %call178 = tail call i32 @comptypes(%union.tree_node* %46, %union.tree_node* %47)
  %tobool179 = icmp eq i32 %call178, 0
  br i1 %tobool179, label %if.end270, label %if.then180

if.then180:                                       ; preds = %land.lhs.true171, %land.lhs.true125
  %cmp181 = icmp eq i32 %bf.clear, 13
  br i1 %cmp181, label %if.then183, label %if.end185

if.then183:                                       ; preds = %if.then180
  %call184 = tail call fastcc %union.tree_node* @default_function_array_conversion(%union.tree_node* %call)
  br label %if.end185

if.end185:                                        ; preds = %land.lhs.true145, %land.lhs.true137, %if.then183, %if.then180
  %inside_init.1 = phi %union.tree_node* [ %call184, %if.then183 ], [ %call, %if.then180 ], [ %call, %land.lhs.true137 ], [ %call, %land.lhs.true145 ]
  %tobool186 = icmp eq i32 %require_constant, 0
  %48 = load i32* @flag_isoc99, align 4
  %tobool188 = icmp ne i32 %48, 0
  %or.cond396 = or i1 %tobool186, %tobool188
  br i1 %or.cond396, label %if.end204, label %land.lhs.true189

land.lhs.true189:                                 ; preds = %if.end185
  %code191 = getelementptr inbounds %union.tree_node* %inside_init.1, i64 0, i32 0, i32 0, i32 2
  %bf.load192 = load i32* %code191, align 8
  %bf.clear193 = and i32 %bf.load192, 255
  %cmp194 = icmp eq i32 %bf.clear193, 170
  br i1 %cmp194, label %if.then196, label %if.end204

if.then196:                                       ; preds = %land.lhs.true189
  %operands198 = getelementptr inbounds %union.tree_node* %inside_init.1, i64 0, i32 0, i32 2
  %arrayidx199 = bitcast i32* %operands198 to %union.tree_node**
  %49 = load %union.tree_node** %arrayidx199, align 8, !tbaa !7
  %operands201 = getelementptr inbounds %union.tree_node* %49, i64 0, i32 0, i32 2
  %arrayidx202 = bitcast i32* %operands201 to %union.tree_node**
  %50 = load %union.tree_node** %arrayidx202, align 8, !tbaa !7
  %initial = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 12
  %51 = load %union.tree_node** %initial, align 8, !tbaa !33
  br label %if.end204

if.end204:                                        ; preds = %if.end185, %if.then196, %land.lhs.true189
  %inside_init.2 = phi %union.tree_node* [ %inside_init.1, %if.end185 ], [ %51, %if.then196 ], [ %inside_init.1, %land.lhs.true189 ]
  br i1 %cmp14, label %land.lhs.true207, label %if.end222

land.lhs.true207:                                 ; preds = %if.end204
  %code209 = getelementptr inbounds %union.tree_node* %inside_init.2, i64 0, i32 0, i32 0, i32 2
  %bf.load210 = load i32* %code209, align 8
  %bf.clear211 = and i32 %bf.load210, 255
  switch i32 %bf.clear211, label %if.then221 [
    i32 29, label %if.end222
    i32 46, label %if.end222
  ]

if.then221:                                       ; preds = %land.lhs.true207
  tail call void @error_init(i8* getelementptr inbounds ([53 x i8]* @.str158, i64 0, i64 0))
  %52 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end222:                                        ; preds = %land.lhs.true207, %land.lhs.true207, %if.end204
  %53 = load i32* @optimize, align 4, !tbaa !27
  %tobool223 = icmp eq i32 %53, 0
  br i1 %tobool223, label %if.end222.if.end233_crit_edge, label %land.lhs.true224

if.end222.if.end233_crit_edge:                    ; preds = %if.end222
  %.pre = load i32* @pedantic, align 4
  br label %if.end233

land.lhs.true224:                                 ; preds = %if.end222
  %code226 = getelementptr inbounds %union.tree_node* %inside_init.2, i64 0, i32 0, i32 0, i32 2
  %bf.load227 = load i32* %code226, align 8
  %bf.clear228 = and i32 %bf.load227, 255
  %cmp229 = icmp eq i32 %bf.clear228, 34
  %54 = load i32* @pedantic, align 4
  %tobool.i = icmp eq i32 %54, 0
  %or.cond8 = and i1 %cmp229, %tobool.i
  br i1 %or.cond8, label %lor.lhs.false.i, label %if.end233

lor.lhs.false.i:                                  ; preds = %land.lhs.true224
  %mode.i = getelementptr inbounds %union.tree_node* %inside_init.2, i64 0, i32 0, i32 5
  %55 = bitcast i48* %mode.i to i64*
  %bf.load.i = load i64* %55, align 8
  %bf.cast.i = and i64 %bf.load.i, 255
  %cmp.i = icmp eq i64 %bf.cast.i, 51
  br i1 %cmp.i, label %if.end233.thread, label %if.else.i

if.else.i:                                        ; preds = %lor.lhs.false.i
  %56 = load %union.tree_node** @current_function_decl, align 8, !tbaa !7
  %cmp.i.i = icmp ne %union.tree_node* %56, null
  %57 = and i32 %bf.load227, 6144
  %58 = icmp eq i32 %57, 4096
  %or.cond10 = and i1 %cmp.i.i, %58
  br i1 %or.cond10, label %land.lhs.true7.i.i, label %if.end.i.i

land.lhs.true7.i.i:                               ; preds = %if.else.i
  %initial.i.i = getelementptr inbounds %union.tree_node* %inside_init.2, i64 0, i32 0, i32 12
  %59 = load %union.tree_node** %initial.i.i, align 8, !tbaa !33
  %cmp9.i.i = icmp eq %union.tree_node* %59, null
  br i1 %cmp9.i.i, label %if.end.i.i, label %land.lhs.true10.i.i

land.lhs.true10.i.i:                              ; preds = %land.lhs.true7.i.i
  %code.i.i = getelementptr inbounds %union.tree_node* %59, i64 0, i32 0, i32 0, i32 2
  %bf.load14.i.i = load i32* %code.i.i, align 8
  %bf.clear23.i.i = and i32 %bf.load14.i.i, 512
  %tobool24.i.i = icmp eq i32 %bf.clear23.i.i, 0
  br i1 %tobool24.i.i, label %if.end.i.i, label %switch.early.test.i.i

switch.early.test.i.i:                            ; preds = %land.lhs.true10.i.i
  %bf.clear15.i.i = and i32 %bf.load14.i.i, 255
  switch i32 %bf.clear15.i.i, label %if.end233.thread [
    i32 46, label %if.end.i.i
    i32 0, label %if.end.i.i
  ]

if.end.i.i:                                       ; preds = %if.else.i, %switch.early.test.i.i, %switch.early.test.i.i, %land.lhs.true10.i.i, %land.lhs.true7.i.i
  br label %if.end233.thread

if.end233.thread:                                 ; preds = %lor.lhs.false.i, %if.end.i.i, %switch.early.test.i.i
  %inside_init.3.ph = phi %union.tree_node* [ %inside_init.2, %lor.lhs.false.i ], [ %inside_init.2, %if.end.i.i ], [ %59, %switch.early.test.i.i ]
  %tobool23418 = icmp eq i32 %require_constant, 0
  br i1 %tobool23418, label %return, label %land.lhs.true257

if.end233:                                        ; preds = %if.end222.if.end233_crit_edge, %land.lhs.true224
  %60 = phi i32 [ %54, %land.lhs.true224 ], [ %.pre, %if.end222.if.end233_crit_edge ]
  %tobool234 = icmp ne i32 %require_constant, 0
  %tobool236 = icmp ne i32 %60, 0
  %or.cond398 = and i1 %tobool234, %tobool236
  br i1 %or.cond398, label %land.lhs.true237, label %if.else255

land.lhs.true237:                                 ; preds = %if.end233
  %code239 = getelementptr inbounds %union.tree_node* %inside_init.2, i64 0, i32 0, i32 0, i32 2
  %bf.load240 = load i32* %code239, align 8
  %bf.clear241 = and i32 %bf.load240, 255
  %cmp242 = icmp eq i32 %bf.clear241, 47
  br i1 %cmp242, label %if.then244, label %if.else255

if.then244:                                       ; preds = %land.lhs.true237
  %type246 = getelementptr inbounds %union.tree_node* %inside_init.2, i64 0, i32 0, i32 0, i32 1
  %61 = load %union.tree_node** %type246, align 8, !tbaa !1
  %call247 = tail call fastcc %union.tree_node* @valid_compound_expr_initializer(%union.tree_node* %inside_init.2, %union.tree_node* %61)
  %62 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp248 = icmp eq %union.tree_node* %call247, %62
  br i1 %cmp248, label %if.then250, label %if.else

if.then250:                                       ; preds = %if.then244
  tail call void @error_init(i8* getelementptr inbounds ([36 x i8]* @.str150, i64 0, i64 0))
  br label %if.end251

if.else:                                          ; preds = %if.then244
  tail call void @pedwarn_init(i8* getelementptr inbounds ([36 x i8]* @.str150, i64 0, i64 0))
  br label %if.end251

if.end251:                                        ; preds = %if.else, %if.then250
  %63 = load i32* @flag_pedantic_errors, align 4, !tbaa !27
  %tobool252 = icmp eq i32 %63, 0
  %64 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %call247. = select i1 %tobool252, %union.tree_node* %call247, %union.tree_node* %64
  ret %union.tree_node* %call247.

if.else255:                                       ; preds = %land.lhs.true237, %if.end233
  br i1 %tobool234, label %land.lhs.true257, label %return

land.lhs.true257:                                 ; preds = %if.end233.thread, %if.else255
  %inside_init.32123 = phi %union.tree_node* [ %inside_init.3.ph, %if.end233.thread ], [ %inside_init.2, %if.else255 ]
  %constant_flag = getelementptr inbounds %union.tree_node* %inside_init.32123, i64 0, i32 0, i32 0, i32 2
  %bf.load259 = load i32* %constant_flag, align 8
  %bf.clear260 = and i32 %bf.load259, 512
  %tobool261 = icmp eq i32 %bf.clear260, 0
  br i1 %tobool261, label %if.then267, label %lor.lhs.false262

lor.lhs.false262:                                 ; preds = %land.lhs.true257
  %type264 = getelementptr inbounds %union.tree_node* %inside_init.32123, i64 0, i32 0, i32 0, i32 1
  %65 = load %union.tree_node** %type264, align 8, !tbaa !1
  %call265 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %inside_init.32123, %union.tree_node* %65) #6
  %tobool266 = icmp eq %union.tree_node* %call265, null
  br i1 %tobool266, label %if.then267, label %return

if.then267:                                       ; preds = %lor.lhs.false262, %land.lhs.true257
  tail call void @error_init(i8* getelementptr inbounds ([36 x i8]* @.str150, i64 0, i64 0))
  %66 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end270:                                        ; preds = %land.lhs.true145, %land.lhs.true137, %land.lhs.true, %land.lhs.true153, %lor.lhs.false142, %land.lhs.true171, %land.lhs.true120, %if.end118
  %67 = and i32 %bf.load, 254
  %68 = icmp eq i32 %67, 6
  %cmp277 = icmp eq i32 %bf.clear, 13
  %or.cond402 = or i1 %68, %cmp277
  %cmp280 = icmp eq i32 %bf.clear, 10
  %or.cond404 = or i1 %or.cond402, %cmp280
  %cmp283 = icmp eq i32 %bf.clear, 11
  %or.cond406 = or i1 %or.cond404, %cmp283
  %cmp286 = icmp eq i32 %bf.clear, 8
  %or.cond408 = or i1 %or.cond406, %cmp286
  br i1 %or.cond408, label %if.then288, label %if.end310

if.then288:                                       ; preds = %if.end270
  %call289 = tail call fastcc %union.tree_node* @convert_for_assignment(%union.tree_node* %type, %union.tree_node* %init, i8* getelementptr inbounds ([15 x i8]* @.str159, i64 0, i64 0), %union.tree_node* null, %union.tree_node* null, i32 0)
  %tobool290 = icmp eq i32 %require_constant, 0
  br i1 %tobool290, label %return, label %land.lhs.true291

land.lhs.true291:                                 ; preds = %if.then288
  %constant_flag293 = getelementptr inbounds %union.tree_node* %call289, i64 0, i32 0, i32 0, i32 2
  %bf.load294 = load i32* %constant_flag293, align 8
  %bf.clear296 = and i32 %bf.load294, 512
  %tobool297 = icmp eq i32 %bf.clear296, 0
  br i1 %tobool297, label %if.then298, label %land.lhs.true301

if.then298:                                       ; preds = %land.lhs.true291
  tail call void @error_init(i8* getelementptr inbounds ([36 x i8]* @.str150, i64 0, i64 0))
  %69 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

land.lhs.true301:                                 ; preds = %land.lhs.true291
  %type303 = getelementptr inbounds %union.tree_node* %call289, i64 0, i32 0, i32 0, i32 1
  %70 = load %union.tree_node** %type303, align 8, !tbaa !1
  %call304 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %call289, %union.tree_node* %70) #6
  %cmp305 = icmp eq %union.tree_node* %call304, null
  br i1 %cmp305, label %if.then307, label %return

if.then307:                                       ; preds = %land.lhs.true301
  tail call void @error_init(i8* getelementptr inbounds ([51 x i8]* @.str151, i64 0, i64 0))
  %71 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end310:                                        ; preds = %if.end270
  %size312 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 2
  %72 = bitcast i32* %size312 to %union.tree_node**
  %73 = load %union.tree_node** %72, align 8, !tbaa !8
  %cmp313 = icmp eq %union.tree_node* %73, null
  br i1 %cmp313, label %if.end325, label %land.lhs.true315

land.lhs.true315:                                 ; preds = %if.end310
  %code319 = getelementptr inbounds %union.tree_node* %73, i64 0, i32 0, i32 0, i32 2
  %bf.load320 = load i32* %code319, align 8
  %bf.clear321 = and i32 %bf.load320, 255
  %cmp322 = icmp eq i32 %bf.clear321, 25
  br i1 %cmp322, label %if.end325, label %if.then324

if.then324:                                       ; preds = %land.lhs.true315
  tail call void @error_init(i8* getelementptr inbounds ([45 x i8]* @.str160, i64 0, i64 0))
  %74 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end325:                                        ; preds = %land.lhs.true315, %if.end310
  %75 = load i32* @flag_traditional, align 4, !tbaa !27
  %tobool326 = icmp eq i32 %75, 0
  br i1 %tobool326, label %if.end394, label %while.cond

while.cond:                                       ; preds = %if.end325, %while.cond.backedge
  %top.0 = phi %union.tree_node* [ %top.1, %while.cond.backedge ], [ null, %if.end325 ]
  %prev.0 = phi %union.tree_node* [ %call354, %while.cond.backedge ], [ null, %if.end325 ]
  %type.addr.0 = phi %union.tree_node* [ %type.addr.0.be, %while.cond.backedge ], [ %type, %if.end325 ]
  %code329 = getelementptr inbounds %union.tree_node* %type.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load330 = load i32* %code329, align 8
  %bf.clear331 = and i32 %bf.load330, 255
  switch i32 %bf.clear331, label %while.end [
    i32 20, label %while.body
    i32 18, label %while.body
    i32 22, label %while.body
    i32 21, label %while.body
  ]

while.body:                                       ; preds = %while.cond, %while.cond, %while.cond, %while.cond
  %call354 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 46, %union.tree_node* %type.addr.0, %union.tree_node* null, %union.tree_node* null) #6
  %cmp355 = icmp eq %union.tree_node* %prev.0, null
  br i1 %cmp355, label %if.end363, label %if.else358

if.else358:                                       ; preds = %while.body
  %call359 = tail call %union.tree_node* @build_tree_list(%union.tree_node* null, %union.tree_node* %call354) #6
  %operands361 = getelementptr inbounds %union.tree_node* %prev.0, i64 0, i32 0, i32 2
  %arrayidx362 = getelementptr inbounds i32* %operands361, i64 2
  %76 = bitcast i32* %arrayidx362 to %union.tree_node**
  store %union.tree_node* %call359, %union.tree_node** %76, align 8, !tbaa !7
  br label %if.end363

if.end363:                                        ; preds = %while.body, %if.else358
  %top.1 = phi %union.tree_node* [ %top.0, %if.else358 ], [ %call354, %while.body ]
  %bf.load366 = load i32* %code329, align 8
  %bf.clear367 = and i32 %bf.load366, 255
  %cmp368 = icmp eq i32 %bf.clear367, 18
  br i1 %cmp368, label %if.then370, label %if.else373

if.then370:                                       ; preds = %if.end363
  %type372 = getelementptr inbounds %union.tree_node* %type.addr.0, i64 0, i32 0, i32 0, i32 1
  br label %while.cond.backedge

if.else373:                                       ; preds = %if.end363
  %values375 = getelementptr inbounds %union.tree_node* %type.addr.0, i64 0, i32 0, i32 1
  %77 = load i8** %values375, align 8
  %tobool376 = icmp eq i8* %77, null
  br i1 %tobool376, label %if.else382, label %if.then377

if.then377:                                       ; preds = %if.else373
  %type381 = getelementptr inbounds i8* %77, i64 8
  %78 = bitcast i8* %type381 to %union.tree_node**
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then377, %if.then370
  %type.addr.0.be.in = phi %union.tree_node** [ %type372, %if.then370 ], [ %78, %if.then377 ]
  %type.addr.0.be = load %union.tree_node** %type.addr.0.be.in, align 8
  br label %while.cond

if.else382:                                       ; preds = %if.else373
  tail call void @error_init(i8* getelementptr inbounds ([20 x i8]* @.str161, i64 0, i64 0))
  %79 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

while.end:                                        ; preds = %while.cond
  %cmp385 = icmp eq %union.tree_node* %type.addr.0, %type
  br i1 %cmp385, label %if.else393, label %if.then387

if.then387:                                       ; preds = %while.end
  %call388 = tail call fastcc %union.tree_node* @digest_init(%union.tree_node* %type.addr.0, %union.tree_node* %init, i32 %require_constant)
  %call389 = tail call %union.tree_node* @build_tree_list(%union.tree_node* null, %union.tree_node* %call388) #6
  %operands391 = getelementptr inbounds %union.tree_node* %prev.0, i64 0, i32 0, i32 2
  %arrayidx392 = getelementptr inbounds i32* %operands391, i64 2
  %80 = bitcast i32* %arrayidx392 to %union.tree_node**
  store %union.tree_node* %call389, %union.tree_node** %80, align 8, !tbaa !7
  ret %union.tree_node* %top.0

if.else393:                                       ; preds = %while.end
  %81 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end394:                                        ; preds = %if.end325
  tail call void @error_init(i8* getelementptr inbounds ([20 x i8]* @.str161, i64 0, i64 0))
  %82 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

return:                                           ; preds = %if.end233.thread, %entry, %lor.lhs.false3, %if.then288, %if.then298, %if.then307, %land.lhs.true301, %if.then267, %if.else255, %lor.lhs.false262, %land.lhs.true89, %cond.end, %if.then115, %if.end81, %land.lhs.true86, %if.then34, %if.end394, %if.else393, %if.else382, %if.then324, %if.then221, %if.then80, %if.then61
  %retval.0 = phi %union.tree_node* [ %23, %if.then61 ], [ %26, %if.then80 ], [ %52, %if.then221 ], [ %74, %if.then324 ], [ %79, %if.else382 ], [ %81, %if.else393 ], [ %82, %if.end394 ], [ %call, %if.then34 ], [ %call, %land.lhs.true86 ], [ %call, %if.end81 ], [ %call, %if.then115 ], [ %call, %cond.end ], [ %call, %land.lhs.true89 ], [ %inside_init.32123, %lor.lhs.false262 ], [ %66, %if.then267 ], [ %inside_init.2, %if.else255 ], [ %71, %if.then307 ], [ %call289, %land.lhs.true301 ], [ %69, %if.then298 ], [ %call289, %if.then288 ], [ %0, %lor.lhs.false3 ], [ %0, %entry ], [ %inside_init.3.ph, %if.end233.thread ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @build_tree_list(%union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @c_cast_expr(%union.tree_node* %type, %union.tree_node* %expr) #0 {
entry:
  %0 = load i32* @warn_strict_prototypes, align 4, !tbaa !27
  %code = getelementptr inbounds %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 25
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* @warn_strict_prototypes, align 4, !tbaa !27
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call = tail call %union.tree_node* @groktypename(%union.tree_node* %type) #6
  store i32 %0, i32* @warn_strict_prototypes, align 4, !tbaa !27
  %call1 = tail call %union.tree_node* @build_c_cast(%union.tree_node* %call, %union.tree_node* %expr)
  ret %union.tree_node* %call1
}

declare %union.tree_node* @groktypename(%union.tree_node*) #1

declare %union.tree_node* @copy_node(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @convert_for_assignment(%union.tree_node* %type, %union.tree_node* %rhs, i8* %errtype, %union.tree_node* nocapture readonly %fundecl, %union.tree_node* readonly %funname, i32 %parmnum) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %code2 = getelementptr inbounds %union.tree_node* %rhs, i64 0, i32 0, i32 0, i32 2
  %bf.load3 = load i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp = icmp eq i32 %bf.clear4, 116
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node* %rhs, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %rhs.addr.0 = phi %union.tree_node* [ %0, %if.then ], [ %rhs, %entry ]
  %type6 = getelementptr inbounds %union.tree_node* %rhs.addr.0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type6, align 8, !tbaa !1
  %code8 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load9 = load i32* %code8, align 8
  %bf.clear10 = and i32 %bf.load9, 255
  switch i32 %bf.clear10, label %if.else [
    i32 18, label %if.then19
    i32 23, label %if.then19
  ]

if.then19:                                        ; preds = %if.end, %if.end
  %call = tail call %union.tree_node* @default_conversion(%union.tree_node* %rhs.addr.0)
  br label %if.end28

if.else:                                          ; preds = %if.end
  %2 = load i32* @optimize, align 4, !tbaa !27
  %tobool = icmp eq i32 %2, 0
  br i1 %tobool, label %if.end28, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %code21 = getelementptr inbounds %union.tree_node* %rhs.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load22 = load i32* %code21, align 8
  %bf.clear23 = and i32 %bf.load22, 255
  %cmp24 = icmp eq i32 %bf.clear23, 34
  %3 = load i32* @pedantic, align 4
  %tobool.i = icmp eq i32 %3, 0
  %or.cond1249 = and i1 %cmp24, %tobool.i
  br i1 %or.cond1249, label %lor.lhs.false.i, label %if.end28

lor.lhs.false.i:                                  ; preds = %land.lhs.true
  %mode.i = getelementptr inbounds %union.tree_node* %rhs.addr.0, i64 0, i32 0, i32 5
  %4 = bitcast i48* %mode.i to i64*
  %bf.load.i = load i64* %4, align 8
  %bf.cast.i = and i64 %bf.load.i, 255
  %cmp.i = icmp eq i64 %bf.cast.i, 51
  br i1 %cmp.i, label %if.end28, label %if.else.i

if.else.i:                                        ; preds = %lor.lhs.false.i
  %5 = load %union.tree_node** @current_function_decl, align 8, !tbaa !7
  %cmp.i.i = icmp ne %union.tree_node* %5, null
  %6 = and i32 %bf.load22, 6144
  %7 = icmp eq i32 %6, 4096
  %or.cond1251 = and i1 %cmp.i.i, %7
  br i1 %or.cond1251, label %land.lhs.true7.i.i, label %if.end.i.i

land.lhs.true7.i.i:                               ; preds = %if.else.i
  %initial.i.i = getelementptr inbounds %union.tree_node* %rhs.addr.0, i64 0, i32 0, i32 12
  %8 = load %union.tree_node** %initial.i.i, align 8, !tbaa !33
  %cmp9.i.i = icmp eq %union.tree_node* %8, null
  br i1 %cmp9.i.i, label %if.end.i.i, label %land.lhs.true10.i.i

land.lhs.true10.i.i:                              ; preds = %land.lhs.true7.i.i
  %code.i.i = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load14.i.i = load i32* %code.i.i, align 8
  %bf.clear23.i.i = and i32 %bf.load14.i.i, 512
  %tobool24.i.i = icmp eq i32 %bf.clear23.i.i, 0
  br i1 %tobool24.i.i, label %if.end.i.i, label %switch.early.test.i.i

switch.early.test.i.i:                            ; preds = %land.lhs.true10.i.i
  %bf.clear15.i.i = and i32 %bf.load14.i.i, 255
  switch i32 %bf.clear15.i.i, label %if.end28 [
    i32 46, label %if.end.i.i
    i32 0, label %if.end.i.i
  ]

if.end.i.i:                                       ; preds = %if.else.i, %switch.early.test.i.i, %switch.early.test.i.i, %land.lhs.true10.i.i, %land.lhs.true7.i.i
  br label %if.end28

if.end28:                                         ; preds = %if.end.i.i, %switch.early.test.i.i, %lor.lhs.false.i, %if.else, %land.lhs.true, %if.then19
  %rhs.addr.1 = phi %union.tree_node* [ %call, %if.then19 ], [ %rhs.addr.0, %land.lhs.true ], [ %rhs.addr.0, %if.else ], [ %rhs.addr.0, %lor.lhs.false.i ], [ %rhs.addr.0, %if.end.i.i ], [ %8, %switch.early.test.i.i ]
  %type30 = getelementptr inbounds %union.tree_node* %rhs.addr.1, i64 0, i32 0, i32 0, i32 1
  %9 = load %union.tree_node** %type30, align 8, !tbaa !1
  %code32 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 2
  %bf.load33 = load i32* %code32, align 8
  %bf.clear34 = and i32 %bf.load33, 255
  %cmp35 = icmp eq i32 %bf.clear34, 0
  br i1 %cmp35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %if.end28
  %10 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end37:                                         ; preds = %if.end28
  %type38 = bitcast %union.tree_node* %type to %struct.tree_type*
  %11 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %12 = load %union.tree_node** %11, align 8, !tbaa !24
  %13 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 15
  %14 = load %union.tree_node** %13, align 8, !tbaa !24
  %cmp41 = icmp eq %union.tree_node* %12, %14
  br i1 %cmp41, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.end37
  tail call void @overflow_warning(%union.tree_node* %rhs.addr.1) #6
  %call43 = tail call i32 @maybe_objc_comptypes(%union.tree_node* %type, %union.tree_node* %9, i32 0) #6
  br label %return

if.end44:                                         ; preds = %if.end37
  %cmp45 = icmp eq i32 %bf.clear34, 5
  br i1 %cmp45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end44
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([41 x i8]* @.str15, i64 0, i64 0)) #6
  %15 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end47:                                         ; preds = %if.end44
  %cmp48 = icmp eq i32 %bf.clear, 15
  br i1 %cmp48, label %land.lhs.true49, label %if.else79

land.lhs.true49:                                  ; preds = %if.end47
  %type51 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %16 = load %union.tree_node** %type51, align 8, !tbaa !1
  %call54 = tail call i32 @comptypes(%union.tree_node* %16, %union.tree_node* %9)
  %cmp55 = icmp eq i32 %call54, 1
  br i1 %cmp55, label %if.then56, label %if.else79

if.then56:                                        ; preds = %land.lhs.true49
  %call57 = tail call i32 @mark_addressable(%union.tree_node* %rhs.addr.1)
  %cmp58 = icmp eq i32 %call57, 0
  br i1 %cmp58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.then56
  %17 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

if.end60:                                         ; preds = %if.then56
  %18 = load %union.tree_node** %type30, align 8, !tbaa !1
  %call63 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %18) #6
  %call64 = tail call %union.tree_node* @build1(i32 121, %union.tree_node* %call63, %union.tree_node* %rhs.addr.1) #6
  %type66 = getelementptr inbounds %union.tree_node* %call64, i64 0, i32 0, i32 0, i32 1
  %19 = load %union.tree_node** %type66, align 8, !tbaa !1
  %type68 = getelementptr inbounds %union.tree_node* %19, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type68, align 8, !tbaa !1
  %21 = load %union.tree_node** %type51, align 8, !tbaa !1
  %cmp71 = icmp eq %union.tree_node* %20, %21
  br i1 %cmp71, label %if.end77, label %if.then72

if.then72:                                        ; preds = %if.end60
  %call75 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %21) #6
  %call76 = tail call %union.tree_node* @build1(i32 115, %union.tree_node* %call75, %union.tree_node* %call64) #6
  br label %if.end77

if.end77:                                         ; preds = %if.end60, %if.then72
  %rhs.addr.2 = phi %union.tree_node* [ %call76, %if.then72 ], [ %call64, %if.end60 ]
  %call78 = tail call %union.tree_node* @build1(i32 115, %union.tree_node* %type, %union.tree_node* %rhs.addr.2) #6
  br label %return

if.else79:                                        ; preds = %land.lhs.true49, %if.end47
  %cmp80 = icmp eq i32 %bf.clear, 6
  %22 = and i32 %bf.load, 254
  %23 = icmp eq i32 %22, 6
  %cmp84 = icmp eq i32 %bf.clear, 10
  %or.cond975 = or i1 %23, %cmp84
  %cmp86 = icmp eq i32 %bf.clear, 8
  %or.cond976 = or i1 %or.cond975, %cmp86
  %cmp88 = icmp eq i32 %bf.clear, 11
  %or.cond977 = or i1 %or.cond976, %cmp88
  br i1 %or.cond977, label %land.lhs.true89, label %if.else101

land.lhs.true89:                                  ; preds = %if.else79
  %24 = and i32 %bf.load33, 254
  %25 = icmp eq i32 %24, 6
  %cmp94 = icmp eq i32 %bf.clear34, 10
  %or.cond979 = or i1 %25, %cmp94
  %cmp96 = icmp eq i32 %bf.clear34, 8
  %or.cond980 = or i1 %or.cond979, %cmp96
  %cmp98 = icmp eq i32 %bf.clear34, 11
  %or.cond981 = or i1 %or.cond980, %cmp98
  br i1 %or.cond981, label %if.then99, label %if.else101

if.then99:                                        ; preds = %land.lhs.true89
  %call100 = tail call %union.tree_node* @convert_and_check(%union.tree_node* %type, %union.tree_node* %rhs.addr.1) #6
  br label %return

if.else101:                                       ; preds = %land.lhs.true89, %if.else79
  %cmp102 = icmp eq i32 %bf.clear, 21
  br i1 %cmp102, label %land.lhs.true103, label %if.else625

land.lhs.true103:                                 ; preds = %if.else101
  %transparent_union_flag = getelementptr inbounds %struct.tree_type* %type38, i64 0, i32 6
  %bf.load105 = load i32* %transparent_union_flag, align 4
  %bf.clear106 = and i32 %bf.load105, 524288
  %tobool107 = icmp eq i32 %bf.clear106, 0
  %tobool109 = icmp ne i8* %errtype, null
  %or.cond982 = or i1 %tobool107, %tobool109
  br i1 %or.cond982, label %if.else625, label %if.then110

if.then110:                                       ; preds = %land.lhs.true103
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %26 = load i8** %values, align 8
  %tobool1121257 = icmp eq i8* %26, null
  br i1 %tobool1121257, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then110
  %27 = bitcast i8* %26 to %union.tree_node*
  %cmp130 = icmp eq i32 %bf.clear34, 13
  %type135 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 1
  %code435 = getelementptr inbounds %union.tree_node* %rhs.addr.1, i64 0, i32 0, i32 0, i32 2
  %operands441 = getelementptr inbounds %union.tree_node* %rhs.addr.1, i64 0, i32 0, i32 2
  %arrayidx442 = bitcast i32* %operands441 to %union.tree_node**
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %memb_types.01260 = phi %union.tree_node* [ %27, %for.body.lr.ph ], [ %57, %for.inc ]
  %marginal_memb_type.01258 = phi %union.tree_node* [ null, %for.body.lr.ph ], [ %marginal_memb_type.2, %for.inc ]
  %type114 = getelementptr inbounds %union.tree_node* %memb_types.01260, i64 0, i32 0, i32 0, i32 1
  %28 = load %union.tree_node** %type114, align 8, !tbaa !1
  %29 = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 15
  %30 = load %union.tree_node** %29, align 8, !tbaa !24
  %31 = load %union.tree_node** %13, align 8, !tbaa !24
  %call119 = tail call i32 @comptypes(%union.tree_node* %30, %union.tree_node* %31)
  %tobool120 = icmp eq i32 %call119, 0
  br i1 %tobool120, label %if.end122, label %if.end614

if.end122:                                        ; preds = %for.body
  %code124 = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 0, i32 2
  %bf.load125 = load i32* %code124, align 8
  %bf.clear126 = and i32 %bf.load125, 255
  %cmp127 = icmp eq i32 %bf.clear126, 13
  br i1 %cmp127, label %if.end129, label %for.inc

if.end129:                                        ; preds = %if.end122
  br i1 %cmp130, label %if.then131, label %if.end430

if.then131:                                       ; preds = %if.end129
  %type133 = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 0, i32 1
  %32 = load %union.tree_node** %type133, align 8, !tbaa !1
  %33 = load %union.tree_node** %type135, align 8, !tbaa !1
  %code137 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 0, i32 2
  %bf.load138 = load i32* %code137, align 8
  %bf.clear139 = and i32 %bf.load138, 255
  %cmp140 = icmp eq i32 %bf.clear139, 5
  br i1 %cmp140, label %if.then150, label %lor.lhs.false141

lor.lhs.false141:                                 ; preds = %if.then131
  %code143 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 0, i32 2
  %bf.load144 = load i32* %code143, align 8
  %bf.clear145 = and i32 %bf.load144, 255
  %cmp146 = icmp eq i32 %bf.clear145, 5
  br i1 %cmp146, label %if.then150, label %lor.lhs.false147

lor.lhs.false147:                                 ; preds = %lor.lhs.false141
  %call.i = tail call i32 @maybe_objc_comptypes(%union.tree_node* %28, %union.tree_node* %9, i32 1) #6
  %cmp.i1212 = icmp sgt i32 %call.i, -1
  br i1 %cmp.i1212, label %comp_target_types.exit, label %if.end.i

if.end.i:                                         ; preds = %lor.lhs.false147
  %34 = load %union.tree_node** %type133, align 8, !tbaa !1
  %35 = getelementptr inbounds %union.tree_node* %34, i64 0, i32 0, i32 15
  %36 = load %union.tree_node** %35, align 8, !tbaa !24
  %37 = load %union.tree_node** %type135, align 8, !tbaa !1
  %38 = getelementptr inbounds %union.tree_node* %37, i64 0, i32 0, i32 15
  %39 = load %union.tree_node** %38, align 8, !tbaa !24
  %call6.i = tail call i32 @comptypes(%union.tree_node* %36, %union.tree_node* %39) #6
  %cmp7.i = icmp eq i32 %call6.i, 2
  %40 = load i32* @pedantic, align 4
  %tobool.i1213 = icmp ne i32 %40, 0
  %or.cond.i = and i1 %cmp7.i, %tobool.i1213
  br i1 %or.cond.i, label %comp_target_types.exit.thread, label %comp_target_types.exit

comp_target_types.exit.thread:                    ; preds = %if.end.i
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([31 x i8]* @.str182, i64 0, i64 0)) #6
  br label %if.then150

comp_target_types.exit:                           ; preds = %lor.lhs.false147, %if.end.i
  %retval.0.i1214 = phi i32 [ %call.i, %lor.lhs.false147 ], [ %call6.i, %if.end.i ]
  %tobool149 = icmp eq i32 %retval.0.i1214, 0
  br i1 %tobool149, label %if.end430, label %if.then150

if.then150:                                       ; preds = %comp_target_types.exit.thread, %comp_target_types.exit, %lor.lhs.false141, %if.then131
  %bf.load152 = load i32* %code137, align 8
  %bf.lshr153 = lshr i32 %bf.load152, 12
  %bf.clear154 = and i32 %bf.lshr153, 1
  %41 = lshr i32 %bf.load152, 10
  %mul159 = and i32 %41, 2
  %or = or i32 %bf.clear154, %mul159
  %type160 = bitcast %union.tree_node* %32 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type160, i64 0, i32 6
  %bf.load161 = load i32* %restrict_flag, align 4
  %42 = lshr i32 %bf.load161, 19
  %mul164 = and i32 %42, 4
  %or165 = or i32 %or, %mul164
  %bf.clear169 = and i32 %bf.load152, 255
  %cmp170 = icmp eq i32 %bf.clear169, 20
  br i1 %cmp170, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then150
  %type172 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 0, i32 1
  %43 = load %union.tree_node** %type172, align 8, !tbaa !1
  %tobool173 = icmp ne %union.tree_node* %43, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then150
  %44 = phi i1 [ false, %if.then150 ], [ %tobool173, %land.rhs ]
  %land.ext = zext i1 %44 to i32
  %mul174 = shl nuw nsw i32 %land.ext, 3
  %or175 = or i32 %or165, %mul174
  %readonly_flag177 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 0, i32 2
  %bf.load178 = load i32* %readonly_flag177, align 8
  %bf.lshr179 = lshr i32 %bf.load178, 12
  %bf.clear180 = and i32 %bf.lshr179, 1
  %45 = lshr i32 %bf.load178, 10
  %mul187 = and i32 %45, 2
  %or188 = or i32 %bf.clear180, %mul187
  %type189 = bitcast %union.tree_node* %33 to %struct.tree_type*
  %restrict_flag190 = getelementptr inbounds %struct.tree_type* %type189, i64 0, i32 6
  %bf.load191 = load i32* %restrict_flag190, align 4
  %46 = lshr i32 %bf.load191, 19
  %mul194 = and i32 %46, 4
  %or195 = or i32 %or188, %mul194
  %bf.clear199 = and i32 %bf.load178, 255
  %cmp200 = icmp eq i32 %bf.clear199, 20
  br i1 %cmp200, label %land.rhs201, label %land.end205

land.rhs201:                                      ; preds = %land.end
  %type203 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 0, i32 1
  %47 = load %union.tree_node** %type203, align 8, !tbaa !1
  %tobool204 = icmp ne %union.tree_node* %47, null
  br label %land.end205

land.end205:                                      ; preds = %land.rhs201, %land.end
  %48 = phi i1 [ false, %land.end ], [ %tobool204, %land.rhs201 ]
  %land.ext206 = zext i1 %48 to i32
  %mul207 = shl nuw nsw i32 %land.ext206, 3
  %or208 = or i32 %or195, %mul207
  %cmp209 = icmp eq i32 %or175, %or208
  br i1 %cmp209, label %if.end614, label %lor.lhs.false210

lor.lhs.false210:                                 ; preds = %land.end205
  %cmp215 = icmp eq i32 %bf.clear199, 23
  %cmp221 = icmp eq i32 %bf.clear169, 23
  %or.cond1293 = and i1 %cmp215, %cmp221
  br i1 %or.cond1293, label %land.end318, label %cond.false

land.end318:                                      ; preds = %lor.lhs.false210
  %or287 = or i32 %or188, %mul159
  %or234 = or i32 %or287, %bf.clear154
  %or241 = or i32 %or234, %mul164
  %or288 = or i32 %or241, %mul194
  %cmp322 = icmp eq i32 %or288, %or195
  br i1 %cmp322, label %if.end614, label %if.end425

cond.false:                                       ; preds = %lor.lhs.false210
  br i1 %cmp170, label %land.rhs348, label %land.end352

land.rhs348:                                      ; preds = %cond.false
  %type350 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 0, i32 1
  %49 = load %union.tree_node** %type350, align 8, !tbaa !1
  %tobool351 = icmp ne %union.tree_node* %49, null
  br label %land.end352

land.end352:                                      ; preds = %land.rhs348, %cond.false
  %50 = phi i1 [ false, %cond.false ], [ %tobool351, %land.rhs348 ]
  %land.ext353 = zext i1 %50 to i32
  %mul354 = shl nuw nsw i32 %land.ext353, 3
  br i1 %cmp200, label %land.rhs381, label %land.end385

land.rhs381:                                      ; preds = %land.end352
  %type383 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 0, i32 1
  %51 = load %union.tree_node** %type383, align 8, !tbaa !1
  %tobool384 = icmp ne %union.tree_node* %51, null
  br label %land.end385

land.end385:                                      ; preds = %land.rhs381, %land.end352
  %52 = phi i1 [ false, %land.end352 ], [ %tobool384, %land.rhs381 ]
  %land.ext386 = zext i1 %52 to i32
  %mul387 = shl nuw nsw i32 %land.ext386, 3
  %or388 = or i32 %or165, %mul354
  %or335 = or i32 %or388, %mul187
  %or342 = or i32 %or335, %bf.clear180
  %or355 = or i32 %or342, %mul194
  %or389 = or i32 %or355, %mul387
  br i1 %cmp170, label %land.rhs415, label %land.end419

land.rhs415:                                      ; preds = %land.end385
  %type417 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 0, i32 1
  %53 = load %union.tree_node** %type417, align 8, !tbaa !1
  %tobool418 = icmp ne %union.tree_node* %53, null
  br label %land.end419

land.end419:                                      ; preds = %land.rhs415, %land.end385
  %54 = phi i1 [ false, %land.end385 ], [ %tobool418, %land.rhs415 ]
  %land.ext420 = zext i1 %54 to i32
  %mul421 = shl nuw nsw i32 %land.ext420, 3
  %or422 = or i32 %or165, %mul421
  %cmp423 = icmp eq i32 %or389, %or422
  br i1 %cmp423, label %if.end614, label %if.end425

if.end425:                                        ; preds = %land.end419, %land.end318
  %tobool426 = icmp eq %union.tree_node* %marginal_memb_type.01258, null
  %.marginal_memb_type.0 = select i1 %tobool426, %union.tree_node* %28, %union.tree_node* %marginal_memb_type.01258
  br label %if.end430

if.end430:                                        ; preds = %if.end425, %comp_target_types.exit, %if.end129
  %marginal_memb_type.1 = phi %union.tree_node* [ %marginal_memb_type.01258, %comp_target_types.exit ], [ %marginal_memb_type.01258, %if.end129 ], [ %.marginal_memb_type.0, %if.end425 ]
  %call431 = tail call i32 @integer_zerop(%union.tree_node* %rhs.addr.1) #6
  %tobool432 = icmp eq i32 %call431, 0
  br i1 %tobool432, label %lor.lhs.false433, label %if.then445

lor.lhs.false433:                                 ; preds = %if.end430
  %bf.load436 = load i32* %code435, align 8
  %bf.clear437 = and i32 %bf.load436, 255
  %cmp438 = icmp eq i32 %bf.clear437, 115
  br i1 %cmp438, label %land.lhs.true439, label %for.inc

land.lhs.true439:                                 ; preds = %lor.lhs.false433
  %55 = load %union.tree_node** %arrayidx442, align 8, !tbaa !7
  %call443 = tail call i32 @integer_zerop(%union.tree_node* %55) #6
  %tobool444 = icmp eq i32 %call443, 0
  br i1 %tobool444, label %for.inc, label %if.then445

if.then445:                                       ; preds = %land.lhs.true439, %if.end430
  %56 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !7
  br label %if.end614

for.inc:                                          ; preds = %land.lhs.true439, %if.end122, %lor.lhs.false433
  %marginal_memb_type.2 = phi %union.tree_node* [ %marginal_memb_type.01258, %if.end122 ], [ %marginal_memb_type.1, %land.lhs.true439 ], [ %marginal_memb_type.1, %lor.lhs.false433 ]
  %chain = getelementptr inbounds %union.tree_node* %memb_types.01260, i64 0, i32 0, i32 0, i32 0
  %57 = load %union.tree_node** %chain, align 8, !tbaa !28
  %tobool112 = icmp eq %union.tree_node* %57, null
  br i1 %tobool112, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.then110
  %marginal_memb_type.3 = phi %union.tree_node* [ null, %if.then110 ], [ %marginal_memb_type.2, %for.inc ]
  %tobool450 = icmp eq %union.tree_node* %marginal_memb_type.3, null
  br i1 %tobool450, label %if.end956, label %if.then453

if.then453:                                       ; preds = %for.end
  %type456 = getelementptr inbounds %union.tree_node* %marginal_memb_type.3, i64 0, i32 0, i32 0, i32 1
  %58 = load %union.tree_node** %type456, align 8, !tbaa !1
  %type459 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 1
  %59 = load %union.tree_node** %type459, align 8, !tbaa !1
  %code461 = getelementptr inbounds %union.tree_node* %59, i64 0, i32 0, i32 0, i32 2
  %bf.load462 = load i32* %code461, align 8
  %bf.clear463 = and i32 %bf.load462, 255
  %cmp464 = icmp eq i32 %bf.clear463, 23
  br i1 %cmp464, label %land.lhs.true465, label %if.else541

land.lhs.true465:                                 ; preds = %if.then453
  %code467 = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 0, i32 2
  %bf.load468 = load i32* %code467, align 8
  %bf.clear469 = and i32 %bf.load468, 255
  %cmp470 = icmp eq i32 %bf.clear469, 23
  br i1 %cmp470, label %land.end534, label %if.else541

land.end534:                                      ; preds = %land.lhs.true465
  %bf.lshr475 = lshr i32 %bf.load468, 12
  %bf.clear476 = and i32 %bf.lshr475, 1
  %60 = lshr i32 %bf.load468, 10
  %mul483 = and i32 %60, 2
  %or484 = or i32 %bf.clear476, %mul483
  %type485 = bitcast %union.tree_node* %58 to %struct.tree_type*
  %restrict_flag486 = getelementptr inbounds %struct.tree_type* %type485, i64 0, i32 6
  %bf.load487 = load i32* %restrict_flag486, align 4
  %61 = lshr i32 %bf.load487, 19
  %mul490 = and i32 %61, 4
  %or491 = or i32 %or484, %mul490
  %bf.lshr508 = lshr i32 %bf.load462, 12
  %bf.clear509 = and i32 %bf.lshr508, 1
  %62 = lshr i32 %bf.load462, 10
  %mul516 = and i32 %62, 2
  %or517 = or i32 %bf.clear509, %mul516
  %type518 = bitcast %union.tree_node* %59 to %struct.tree_type*
  %restrict_flag519 = getelementptr inbounds %struct.tree_type* %type518, i64 0, i32 6
  %bf.load520 = load i32* %restrict_flag519, align 4
  %63 = lshr i32 %bf.load520, 19
  %mul523 = and i32 %63, 4
  %or537 = or i32 %or517, %mul523
  %neg = xor i32 %or537, -1
  %and = and i32 %or491, %neg
  %tobool538 = icmp eq i32 %and, 0
  br i1 %tobool538, label %if.end614, label %if.then539

if.then539:                                       ; preds = %land.end534
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([53 x i8]* @.str163, i64 0, i64 0), i8* null, %union.tree_node* %funname, i32 %parmnum)
  br label %if.end614

if.else541:                                       ; preds = %land.lhs.true465, %if.then453
  %bf.lshr545 = lshr i32 %bf.load462, 12
  %bf.clear546 = and i32 %bf.lshr545, 1
  %64 = lshr i32 %bf.load462, 10
  %mul553 = and i32 %64, 2
  %or554 = or i32 %bf.clear546, %mul553
  %type555 = bitcast %union.tree_node* %59 to %struct.tree_type*
  %restrict_flag556 = getelementptr inbounds %struct.tree_type* %type555, i64 0, i32 6
  %bf.load557 = load i32* %restrict_flag556, align 4
  %65 = lshr i32 %bf.load557, 19
  %mul560 = and i32 %65, 4
  %or561 = or i32 %or554, %mul560
  %cmp566 = icmp eq i32 %bf.clear463, 20
  br i1 %cmp566, label %land.rhs567, label %land.end571

land.rhs567:                                      ; preds = %if.else541
  %type569 = getelementptr inbounds %union.tree_node* %59, i64 0, i32 0, i32 0, i32 1
  %66 = load %union.tree_node** %type569, align 8, !tbaa !1
  %tobool570 = icmp ne %union.tree_node* %66, null
  br label %land.end571

land.end571:                                      ; preds = %land.rhs567, %if.else541
  %67 = phi i1 [ false, %if.else541 ], [ %tobool570, %land.rhs567 ]
  %land.ext572 = zext i1 %67 to i32
  %mul573 = shl nuw nsw i32 %land.ext572, 3
  %or574 = or i32 %or561, %mul573
  %readonly_flag576 = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 0, i32 2
  %bf.load577 = load i32* %readonly_flag576, align 8
  %bf.lshr578 = lshr i32 %bf.load577, 12
  %bf.clear579 = and i32 %bf.lshr578, 1
  %68 = lshr i32 %bf.load577, 10
  %mul586 = and i32 %68, 2
  %or587 = or i32 %bf.clear579, %mul586
  %type588 = bitcast %union.tree_node* %58 to %struct.tree_type*
  %restrict_flag589 = getelementptr inbounds %struct.tree_type* %type588, i64 0, i32 6
  %bf.load590 = load i32* %restrict_flag589, align 4
  %69 = lshr i32 %bf.load590, 19
  %mul593 = and i32 %69, 4
  %or594 = or i32 %or587, %mul593
  %bf.clear598 = and i32 %bf.load577, 255
  %cmp599 = icmp eq i32 %bf.clear598, 20
  br i1 %cmp599, label %land.rhs600, label %land.end604

land.rhs600:                                      ; preds = %land.end571
  %type602 = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 0, i32 1
  %70 = load %union.tree_node** %type602, align 8, !tbaa !1
  %tobool603 = icmp ne %union.tree_node* %70, null
  br label %land.end604

land.end604:                                      ; preds = %land.rhs600, %land.end571
  %71 = phi i1 [ false, %land.end571 ], [ %tobool603, %land.rhs600 ]
  %land.ext605 = zext i1 %71 to i32
  %mul606 = shl nuw nsw i32 %land.ext605, 3
  %or607 = or i32 %or594, %mul606
  %neg608 = xor i32 %or607, -1
  %and609 = and i32 %or574, %neg608
  %tobool610 = icmp eq i32 %and609, 0
  br i1 %tobool610, label %if.end614, label %if.then611

if.then611:                                       ; preds = %land.end604
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([48 x i8]* @.str164, i64 0, i64 0), i8* null, %union.tree_node* %funname, i32 %parmnum)
  br label %if.end614

if.end614:                                        ; preds = %land.end419, %land.end318, %land.end205, %for.body, %if.then445, %land.end534, %land.end604, %if.then539, %if.then611
  %rhs.addr.312431244 = phi %union.tree_node* [ %rhs.addr.1, %land.end534 ], [ %rhs.addr.1, %land.end604 ], [ %rhs.addr.1, %if.then539 ], [ %rhs.addr.1, %if.then611 ], [ %56, %if.then445 ], [ %rhs.addr.1, %for.body ], [ %rhs.addr.1, %land.end205 ], [ %rhs.addr.1, %land.end318 ], [ %rhs.addr.1, %land.end419 ]
  %72 = load i32* @pedantic, align 4, !tbaa !27
  %tobool615 = icmp eq i32 %72, 0
  br i1 %tobool615, label %if.end622, label %land.lhs.true616

land.lhs.true616:                                 ; preds = %if.end614
  %in_system_header_flag = getelementptr inbounds %union.tree_node* %fundecl, i64 0, i32 0, i32 5
  %73 = bitcast i48* %in_system_header_flag to i64*
  %bf.load617 = load i64* %73, align 8
  %bf.cast = and i64 %bf.load617, 65536
  %tobool620 = icmp eq i64 %bf.cast, 0
  br i1 %tobool620, label %if.then621, label %if.end622

if.then621:                                       ; preds = %land.lhs.true616
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([50 x i8]* @.str165, i64 0, i64 0)) #6
  br label %if.end622

if.end622:                                        ; preds = %land.lhs.true616, %if.end614, %if.then621
  %call623 = tail call %union.tree_node* @build1(i32 115, %union.tree_node* %type, %union.tree_node* %rhs.addr.312431244) #6
  br label %return

if.else625:                                       ; preds = %land.lhs.true103, %if.else101
  %74 = and i32 %bf.load, 253
  %75 = icmp eq i32 %74, 13
  %76 = and i32 %bf.load33, 253
  %77 = icmp eq i32 %76, 13
  %or.cond = and i1 %75, %77
  br i1 %or.cond, label %if.then633, label %if.else893

if.then633:                                       ; preds = %if.else625
  %type636 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %78 = load %union.tree_node** %type636, align 8, !tbaa !1
  %type639 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 1
  %79 = load %union.tree_node** %type639, align 8, !tbaa !1
  %code641 = getelementptr inbounds %union.tree_node* %78, i64 0, i32 0, i32 0, i32 2
  %bf.load642 = load i32* %code641, align 8
  %bf.clear643 = and i32 %bf.load642, 255
  %cmp644 = icmp eq i32 %bf.clear643, 5
  br i1 %cmp644, label %if.then662, label %lor.lhs.false645

lor.lhs.false645:                                 ; preds = %if.then633
  %code647 = getelementptr inbounds %union.tree_node* %79, i64 0, i32 0, i32 0, i32 2
  %bf.load648 = load i32* %code647, align 8
  %bf.clear649 = and i32 %bf.load648, 255
  %cmp650 = icmp eq i32 %bf.clear649, 5
  br i1 %cmp650, label %if.then662, label %lor.lhs.false651

lor.lhs.false651:                                 ; preds = %lor.lhs.false645
  %call.i1215 = tail call i32 @maybe_objc_comptypes(%union.tree_node* %type, %union.tree_node* %9, i32 1) #6
  %cmp.i1216 = icmp sgt i32 %call.i1215, -1
  br i1 %cmp.i1216, label %comp_target_types.exit1226, label %if.end.i1223

if.end.i1223:                                     ; preds = %lor.lhs.false651
  %80 = load %union.tree_node** %type636, align 8, !tbaa !1
  %81 = getelementptr inbounds %union.tree_node* %80, i64 0, i32 0, i32 15
  %82 = load %union.tree_node** %81, align 8, !tbaa !24
  %83 = load %union.tree_node** %type639, align 8, !tbaa !1
  %84 = getelementptr inbounds %union.tree_node* %83, i64 0, i32 0, i32 15
  %85 = load %union.tree_node** %84, align 8, !tbaa !24
  %call6.i1219 = tail call i32 @comptypes(%union.tree_node* %82, %union.tree_node* %85) #6
  %cmp7.i1220 = icmp eq i32 %call6.i1219, 2
  %86 = load i32* @pedantic, align 4
  %tobool.i1221 = icmp ne i32 %86, 0
  %or.cond.i1222 = and i1 %cmp7.i1220, %tobool.i1221
  br i1 %or.cond.i1222, label %comp_target_types.exit1226.thread, label %comp_target_types.exit1226

comp_target_types.exit1226.thread:                ; preds = %if.end.i1223
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([31 x i8]* @.str182, i64 0, i64 0)) #6
  br label %if.then662

comp_target_types.exit1226:                       ; preds = %lor.lhs.false651, %if.end.i1223
  %retval.0.i1225 = phi i32 [ %call.i1215, %lor.lhs.false651 ], [ %call6.i1219, %if.end.i1223 ]
  %tobool653 = icmp eq i32 %retval.0.i1225, 0
  br i1 %tobool653, label %lor.lhs.false654, label %if.then662

lor.lhs.false654:                                 ; preds = %comp_target_types.exit1226
  %87 = getelementptr inbounds %union.tree_node* %78, i64 0, i32 0, i32 15
  %88 = load %union.tree_node** %87, align 8, !tbaa !24
  %call657 = tail call %union.tree_node* @unsigned_type(%union.tree_node* %88) #6
  %89 = getelementptr inbounds %union.tree_node* %79, i64 0, i32 0, i32 15
  %90 = load %union.tree_node** %89, align 8, !tbaa !24
  %call660 = tail call %union.tree_node* @unsigned_type(%union.tree_node* %90) #6
  %cmp661 = icmp eq %union.tree_node* %call657, %call660
  br i1 %cmp661, label %if.then662, label %if.else890

if.then662:                                       ; preds = %comp_target_types.exit1226.thread, %comp_target_types.exit1226, %lor.lhs.false654, %lor.lhs.false645, %if.then633
  %91 = load i32* @pedantic, align 4, !tbaa !27
  %tobool663 = icmp eq i32 %91, 0
  br i1 %tobool663, label %if.then662.if.else698_crit_edge, label %land.lhs.true664

if.then662.if.else698_crit_edge:                  ; preds = %if.then662
  %code700.pre = getelementptr inbounds %union.tree_node* %79, i64 0, i32 0, i32 0, i32 2
  br label %if.else698

land.lhs.true664:                                 ; preds = %if.then662
  %bf.load667 = load i32* %code641, align 8
  %bf.clear668 = and i32 %bf.load667, 255
  %cmp669 = icmp eq i32 %bf.clear668, 5
  %code672 = getelementptr inbounds %union.tree_node* %79, i64 0, i32 0, i32 0, i32 2
  %bf.load673 = load i32* %code672, align 8
  %bf.clear674 = and i32 %bf.load673, 255
  %cmp675 = icmp eq i32 %bf.clear674, 23
  %or.cond1294 = and i1 %cmp669, %cmp675
  br i1 %or.cond1294, label %if.then697, label %lor.lhs.false676

lor.lhs.false676:                                 ; preds = %land.lhs.true664
  %code678 = getelementptr inbounds %union.tree_node* %79, i64 0, i32 0, i32 0, i32 2
  %bf.clear680 = and i32 %bf.load673, 255
  %cmp681 = icmp eq i32 %bf.clear680, 5
  br i1 %cmp681, label %land.lhs.true682, label %if.else698

land.lhs.true682:                                 ; preds = %lor.lhs.false676
  %call683 = tail call i32 @integer_zerop(%union.tree_node* %rhs.addr.1) #6
  %tobool684 = icmp eq i32 %call683, 0
  br i1 %tobool684, label %land.lhs.true691, label %lor.lhs.false685

lor.lhs.false685:                                 ; preds = %land.lhs.true682
  %code687 = getelementptr inbounds %union.tree_node* %rhs.addr.1, i64 0, i32 0, i32 0, i32 2
  %bf.load688 = load i32* %code687, align 8
  %bf.clear689 = and i32 %bf.load688, 255
  %cmp690 = icmp eq i32 %bf.clear689, 115
  br i1 %cmp690, label %land.lhs.true691, label %if.else698

land.lhs.true691:                                 ; preds = %land.lhs.true682, %lor.lhs.false685
  %bf.load694 = load i32* %code641, align 8
  %bf.clear695 = and i32 %bf.load694, 255
  %cmp696 = icmp eq i32 %bf.clear695, 23
  br i1 %cmp696, label %if.then697, label %if.else698

if.then697:                                       ; preds = %land.lhs.true664, %land.lhs.true691
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([55 x i8]* @.str166, i64 0, i64 0), i8* %errtype, %union.tree_node* %funname, i32 %parmnum)
  br label %if.end891

if.else698:                                       ; preds = %if.then662.if.else698_crit_edge, %land.lhs.true691, %lor.lhs.false685, %lor.lhs.false676
  %code700.pre-phi = phi i32* [ %code700.pre, %if.then662.if.else698_crit_edge ], [ %code678, %land.lhs.true691 ], [ %code678, %lor.lhs.false685 ], [ %code678, %lor.lhs.false676 ]
  %bf.load701 = load i32* %code700.pre-phi, align 8
  %bf.clear702 = and i32 %bf.load701, 255
  %cmp703 = icmp eq i32 %bf.clear702, 23
  %bf.load806.pre = load i32* %code641, align 8
  br i1 %cmp703, label %if.else803, label %land.lhs.true704

land.lhs.true704:                                 ; preds = %if.else698
  %bf.clear708 = and i32 %bf.load806.pre, 255
  %cmp709 = icmp eq i32 %bf.clear708, 23
  br i1 %cmp709, label %if.else803, label %if.then710

if.then710:                                       ; preds = %land.lhs.true704
  %bf.lshr714 = lshr i32 %bf.load701, 12
  %bf.clear715 = and i32 %bf.lshr714, 1
  %92 = lshr i32 %bf.load701, 10
  %mul722 = and i32 %92, 2
  %or723 = or i32 %bf.clear715, %mul722
  %type724 = bitcast %union.tree_node* %79 to %struct.tree_type*
  %restrict_flag725 = getelementptr inbounds %struct.tree_type* %type724, i64 0, i32 6
  %bf.load726 = load i32* %restrict_flag725, align 4
  %93 = lshr i32 %bf.load726, 19
  %mul729 = and i32 %93, 4
  %or730 = or i32 %or723, %mul729
  %cmp735 = icmp eq i32 %bf.clear702, 20
  br i1 %cmp735, label %land.rhs736, label %land.end740

land.rhs736:                                      ; preds = %if.then710
  %type738 = getelementptr inbounds %union.tree_node* %79, i64 0, i32 0, i32 0, i32 1
  %94 = load %union.tree_node** %type738, align 8, !tbaa !1
  %tobool739 = icmp ne %union.tree_node* %94, null
  br label %land.end740

land.end740:                                      ; preds = %land.rhs736, %if.then710
  %95 = phi i1 [ false, %if.then710 ], [ %tobool739, %land.rhs736 ]
  %land.ext741 = zext i1 %95 to i32
  %mul742 = shl nuw nsw i32 %land.ext741, 3
  %or743 = or i32 %or730, %mul742
  %bf.lshr747 = lshr i32 %bf.load806.pre, 12
  %bf.clear748 = and i32 %bf.lshr747, 1
  %96 = lshr i32 %bf.load806.pre, 10
  %mul755 = and i32 %96, 2
  %or756 = or i32 %bf.clear748, %mul755
  %type757 = bitcast %union.tree_node* %78 to %struct.tree_type*
  %restrict_flag758 = getelementptr inbounds %struct.tree_type* %type757, i64 0, i32 6
  %bf.load759 = load i32* %restrict_flag758, align 4
  %97 = lshr i32 %bf.load759, 19
  %mul762 = and i32 %97, 4
  %or763 = or i32 %or756, %mul762
  %cmp768 = icmp eq i32 %bf.clear708, 20
  br i1 %cmp768, label %land.rhs769, label %land.end773

land.rhs769:                                      ; preds = %land.end740
  %type771 = getelementptr inbounds %union.tree_node* %78, i64 0, i32 0, i32 0, i32 1
  %98 = load %union.tree_node** %type771, align 8, !tbaa !1
  %tobool772 = icmp ne %union.tree_node* %98, null
  br label %land.end773

land.end773:                                      ; preds = %land.rhs769, %land.end740
  %99 = phi i1 [ false, %land.end740 ], [ %tobool772, %land.rhs769 ]
  %land.ext774 = zext i1 %99 to i32
  %mul775 = shl nuw nsw i32 %land.ext774, 3
  %or776 = or i32 %or763, %mul775
  %neg777 = xor i32 %or776, -1
  %and778 = and i32 %or743, %neg777
  %tobool779 = icmp eq i32 %and778, 0
  br i1 %tobool779, label %if.else781, label %if.then780

if.then780:                                       ; preds = %land.end773
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([48 x i8]* @.str164, i64 0, i64 0), i8* %errtype, %union.tree_node* %funname, i32 %parmnum)
  br label %if.end891

if.else781:                                       ; preds = %land.end773
  %cmp786 = icmp eq i32 %bf.clear708, 5
  %cmp792 = icmp eq i32 %bf.clear702, 5
  %or.cond1295 = or i1 %cmp786, %cmp792
  br i1 %or.cond1295, label %if.end891, label %lor.lhs.false793

lor.lhs.false793:                                 ; preds = %if.else781
  %call.i1227 = tail call i32 @maybe_objc_comptypes(%union.tree_node* %type, %union.tree_node* %9, i32 1) #6
  %cmp.i1228 = icmp sgt i32 %call.i1227, -1
  br i1 %cmp.i1228, label %lor.lhs.false793.comp_target_types.exit1238_crit_edge, label %if.end.i1235

lor.lhs.false793.comp_target_types.exit1238_crit_edge: ; preds = %lor.lhs.false793
  %.pre = load i32* @pedantic, align 4
  br label %comp_target_types.exit1238

if.end.i1235:                                     ; preds = %lor.lhs.false793
  %100 = load %union.tree_node** %type636, align 8, !tbaa !1
  %101 = getelementptr inbounds %union.tree_node* %100, i64 0, i32 0, i32 15
  %102 = load %union.tree_node** %101, align 8, !tbaa !24
  %103 = load %union.tree_node** %type639, align 8, !tbaa !1
  %104 = getelementptr inbounds %union.tree_node* %103, i64 0, i32 0, i32 15
  %105 = load %union.tree_node** %104, align 8, !tbaa !24
  %call6.i1231 = tail call i32 @comptypes(%union.tree_node* %102, %union.tree_node* %105) #6
  %cmp7.i1232 = icmp eq i32 %call6.i1231, 2
  %106 = load i32* @pedantic, align 4
  %tobool.i1233 = icmp ne i32 %106, 0
  %or.cond.i1234 = and i1 %cmp7.i1232, %tobool.i1233
  br i1 %or.cond.i1234, label %comp_target_types.exit1238.thread, label %comp_target_types.exit1238

comp_target_types.exit1238.thread:                ; preds = %if.end.i1235
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([31 x i8]* @.str182, i64 0, i64 0)) #6
  br label %if.end891

comp_target_types.exit1238:                       ; preds = %lor.lhs.false793.comp_target_types.exit1238_crit_edge, %if.end.i1235
  %107 = phi i32 [ %.pre, %lor.lhs.false793.comp_target_types.exit1238_crit_edge ], [ %106, %if.end.i1235 ]
  %retval.0.i1237 = phi i32 [ %call.i1227, %lor.lhs.false793.comp_target_types.exit1238_crit_edge ], [ %call6.i1231, %if.end.i1235 ]
  %tobool795 = icmp eq i32 %retval.0.i1237, 0
  %tobool798 = icmp ne i32 %107, 0
  %or.cond990 = and i1 %tobool795, %tobool798
  br i1 %or.cond990, label %if.then799, label %if.end891

if.then799:                                       ; preds = %comp_target_types.exit1238
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([43 x i8]* @.str167, i64 0, i64 0), i8* %errtype, %union.tree_node* %funname, i32 %parmnum)
  br label %if.end891

if.else803:                                       ; preds = %if.else698, %land.lhs.true704
  %bf.clear807 = and i32 %bf.load806.pre, 255
  %cmp808.not = icmp ne i32 %bf.clear807, 23
  %cmp703.not = xor i1 %cmp703, true
  %brmerge = or i1 %cmp808.not, %cmp703.not
  br i1 %brmerge, label %if.end891, label %land.end878

land.end878:                                      ; preds = %if.else803
  %bf.lshr819 = lshr i32 %bf.load806.pre, 12
  %bf.clear820 = and i32 %bf.lshr819, 1
  %108 = lshr i32 %bf.load806.pre, 10
  %mul827 = and i32 %108, 2
  %or828 = or i32 %bf.clear820, %mul827
  %type829 = bitcast %union.tree_node* %78 to %struct.tree_type*
  %restrict_flag830 = getelementptr inbounds %struct.tree_type* %type829, i64 0, i32 6
  %bf.load831 = load i32* %restrict_flag830, align 4
  %109 = lshr i32 %bf.load831, 19
  %mul834 = and i32 %109, 4
  %or848 = or i32 %or828, %mul834
  %bf.lshr852 = lshr i32 %bf.load701, 12
  %bf.clear853 = and i32 %bf.lshr852, 1
  %110 = lshr i32 %bf.load701, 10
  %mul860 = and i32 %110, 2
  %or861 = or i32 %bf.clear853, %mul860
  %type862 = bitcast %union.tree_node* %79 to %struct.tree_type*
  %restrict_flag863 = getelementptr inbounds %struct.tree_type* %type862, i64 0, i32 6
  %bf.load864 = load i32* %restrict_flag863, align 4
  %111 = lshr i32 %bf.load864, 19
  %mul867 = and i32 %111, 4
  %or868 = or i32 %or861, %mul867
  %neg882 = xor i32 %or868, -1
  %and883 = and i32 %or848, %neg882
  %tobool884 = icmp eq i32 %and883, 0
  br i1 %tobool884, label %if.end891, label %if.then885

if.then885:                                       ; preds = %land.end878
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([53 x i8]* @.str163, i64 0, i64 0), i8* %errtype, %union.tree_node* %funname, i32 %parmnum)
  br label %if.end891

if.else890:                                       ; preds = %lor.lhs.false654
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([34 x i8]* @.str168, i64 0, i64 0), i8* %errtype, %union.tree_node* %funname, i32 %parmnum)
  br label %if.end891

if.end891:                                        ; preds = %if.else803, %comp_target_types.exit1238.thread, %land.end878, %comp_target_types.exit1238, %if.then697, %if.then885, %if.then780, %if.then799, %if.else781, %if.else890
  %call892 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %rhs.addr.1) #6
  br label %return

if.else893:                                       ; preds = %if.else625
  %cmp626 = icmp eq i32 %bf.clear, 13
  %cmp896 = icmp eq i32 %bf.clear34, 6
  %or.cond986 = and i1 %cmp626, %cmp896
  br i1 %or.cond986, label %if.then897, label %if.else938

if.then897:                                       ; preds = %if.else893
  %code899 = getelementptr inbounds %union.tree_node* %rhs.addr.1, i64 0, i32 0, i32 0, i32 2
  %bf.load900 = load i32* %code899, align 8
  %bf.clear901 = and i32 %bf.load900, 255
  %cmp902 = icmp eq i32 %bf.clear901, 25
  br i1 %cmp902, label %land.lhs.true903, label %land.lhs.true906

land.lhs.true903:                                 ; preds = %if.then897
  %call904 = tail call i32 @integer_zerop(%union.tree_node* %rhs.addr.1) #6
  %tobool905 = icmp eq i32 %call904, 0
  br i1 %tobool905, label %land.lhs.true903.land.lhs.true906_crit_edge, label %if.end937

land.lhs.true903.land.lhs.true906_crit_edge:      ; preds = %land.lhs.true903
  %bf.load909.pre = load i32* %code899, align 8
  br label %land.lhs.true906

land.lhs.true906:                                 ; preds = %land.lhs.true903.land.lhs.true906_crit_edge, %if.then897
  %bf.load909 = phi i32 [ %bf.load909.pre, %land.lhs.true903.land.lhs.true906_crit_edge ], [ %bf.load900, %if.then897 ]
  %bf.clear910 = and i32 %bf.load909, 255
  %cmp911 = icmp eq i32 %bf.clear910, 115
  br i1 %cmp911, label %land.lhs.true912, label %if.then935

land.lhs.true912:                                 ; preds = %land.lhs.true906
  %112 = load %union.tree_node** %type30, align 8, !tbaa !1
  %code916 = getelementptr inbounds %union.tree_node* %112, i64 0, i32 0, i32 0, i32 2
  %bf.load917 = load i32* %code916, align 8
  %bf.clear918 = and i32 %bf.load917, 255
  %cmp919 = icmp eq i32 %bf.clear918, 6
  br i1 %cmp919, label %land.lhs.true920, label %if.then935

land.lhs.true920:                                 ; preds = %land.lhs.true912
  %operands922 = getelementptr inbounds %union.tree_node* %rhs.addr.1, i64 0, i32 0, i32 2
  %arrayidx923 = bitcast i32* %operands922 to %union.tree_node**
  %113 = load %union.tree_node** %arrayidx923, align 8, !tbaa !7
  %code925 = getelementptr inbounds %union.tree_node* %113, i64 0, i32 0, i32 0, i32 2
  %bf.load926 = load i32* %code925, align 8
  %bf.clear927 = and i32 %bf.load926, 255
  %cmp928 = icmp eq i32 %bf.clear927, 25
  br i1 %cmp928, label %land.lhs.true929, label %if.then935

land.lhs.true929:                                 ; preds = %land.lhs.true920
  %call933 = tail call i32 @integer_zerop(%union.tree_node* %113) #6
  %tobool934 = icmp eq i32 %call933, 0
  br i1 %tobool934, label %if.then935, label %if.end937

if.then935:                                       ; preds = %land.lhs.true929, %land.lhs.true920, %land.lhs.true912, %land.lhs.true906
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([45 x i8]* @.str169, i64 0, i64 0), i8* %errtype, %union.tree_node* %funname, i32 %parmnum)
  %call936 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %rhs.addr.1) #6
  br label %return

if.end937:                                        ; preds = %land.lhs.true903, %land.lhs.true929
  %114 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !7
  br label %return

if.else938:                                       ; preds = %if.else893
  %cmp941 = icmp eq i32 %bf.clear34, 13
  %or.cond987 = and i1 %cmp80, %cmp941
  br i1 %or.cond987, label %if.then942, label %if.else944

if.then942:                                       ; preds = %if.else938
  tail call fastcc void @warn_for_assignment(i8* getelementptr inbounds ([45 x i8]* @.str170, i64 0, i64 0), i8* %errtype, %union.tree_node* %funname, i32 %parmnum)
  %call943 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %rhs.addr.1) #6
  br label %return

if.else944:                                       ; preds = %if.else938
  %or.cond988 = and i1 %cmp88, %cmp941
  br i1 %or.cond988, label %if.then948, label %if.end956

if.then948:                                       ; preds = %if.else944
  %call949 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %rhs.addr.1) #6
  br label %return

if.end956:                                        ; preds = %for.end, %if.else944
  %tobool957 = icmp eq i8* %errtype, null
  br i1 %tobool957, label %if.then958, label %if.else973

if.then958:                                       ; preds = %if.end956
  %tobool959 = icmp eq %union.tree_node* %funname, null
  br i1 %tobool959, label %if.else971, label %if.then960

if.then960:                                       ; preds = %if.then958
  %call961 = tail call %union.tree_node* @maybe_building_objc_message_expr() #6
  %tobool962 = icmp ne %union.tree_node* %call961, null
  %cmp964 = icmp sgt i32 %parmnum, 2
  %or.cond989 = and i1 %tobool962, %cmp964
  br i1 %or.cond989, label %if.then965, label %if.else966

if.then965:                                       ; preds = %if.then960
  %sub = add nsw i32 %parmnum, -2
  %id = getelementptr inbounds %union.tree_node* %call961, i64 0, i32 0, i32 1
  %115 = getelementptr inbounds i8** %id, i64 1
  %116 = load i8** %115, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([42 x i8]* @.str171, i64 0, i64 0), i32 %sub, i8* %116) #6
  br label %if.end974

if.else966:                                       ; preds = %if.then960
  %id968 = getelementptr inbounds %union.tree_node* %funname, i64 0, i32 0, i32 1
  %117 = getelementptr inbounds i8** %id968, i64 1
  %118 = load i8** %117, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([42 x i8]* @.str171, i64 0, i64 0), i32 %parmnum, i8* %118) #6
  br label %if.end974

if.else971:                                       ; preds = %if.then958
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([60 x i8]* @.str172, i64 0, i64 0), i32 %parmnum) #6
  br label %if.end974

if.else973:                                       ; preds = %if.end956
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([25 x i8]* @.str173, i64 0, i64 0), i8* %errtype) #6
  br label %if.end974

if.end974:                                        ; preds = %if.else971, %if.else966, %if.then965, %if.else973
  %119 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %return

return:                                           ; preds = %if.end974, %if.then948, %if.then942, %if.end937, %if.then935, %if.end891, %if.end622, %if.then99, %if.end77, %if.then59, %if.then46, %if.then42, %if.then36
  %retval.0 = phi %union.tree_node* [ %10, %if.then36 ], [ %rhs.addr.1, %if.then42 ], [ %15, %if.then46 ], [ %17, %if.then59 ], [ %call78, %if.end77 ], [ %call100, %if.then99 ], [ %call892, %if.end891 ], [ %114, %if.end937 ], [ %call936, %if.then935 ], [ %call943, %if.then942 ], [ %call949, %if.then948 ], [ %119, %if.end974 ], [ %call623, %if.end622 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @c_convert_parm_for_inlining(%union.tree_node* nocapture readonly %parm, %union.tree_node* %value, %union.tree_node* nocapture readonly %fn) #0 {
entry:
  %tobool = icmp eq %union.tree_node* %value, null
  br i1 %tobool, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %type1 = getelementptr inbounds %union.tree_node* %fn, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !1
  %values = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 1
  %1 = load i8** %values, align 8
  %tobool3 = icmp eq i8* %1, null
  br i1 %tobool3, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false
  %type5 = getelementptr inbounds %union.tree_node* %parm, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type5, align 8, !tbaa !1
  %name = getelementptr inbounds %union.tree_node* %fn, i64 0, i32 0, i32 8
  %3 = load %union.tree_node** %name, align 8, !tbaa !11
  %call = tail call fastcc %union.tree_node* @convert_for_assignment(%union.tree_node* %2, %union.tree_node* %value, i8* null, %union.tree_node* %fn, %union.tree_node* %3, i32 0)
  %4 = load i32* @target_flags, align 4, !tbaa !27
  %and = and i32 %4, 33554432
  %tobool6 = icmp eq i32 %and, 0
  br i1 %tobool6, label %land.lhs.true, label %return

land.lhs.true:                                    ; preds = %if.end
  %code = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return [
    i32 6, label %land.lhs.true26
    i32 10, label %land.lhs.true26
    i32 11, label %land.lhs.true26
    i32 12, label %land.lhs.true26
  ]

land.lhs.true26:                                  ; preds = %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true
  %type27 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type27, i64 0, i32 6
  %bf.load28 = load i32* %precision, align 4
  %bf.clear29 = and i32 %bf.load28, 511
  %5 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !tbaa !7
  %type30 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %precision31 = getelementptr inbounds %struct.tree_type* %type30, i64 0, i32 6
  %bf.load32 = load i32* %precision31, align 4
  %bf.clear33 = and i32 %bf.load32, 511
  %cmp34 = icmp ult i32 %bf.clear29, %bf.clear33
  br i1 %cmp34, label %if.then35, label %return

if.then35:                                        ; preds = %land.lhs.true26
  %call36 = tail call %union.tree_node* @default_conversion(%union.tree_node* %call)
  br label %return

return:                                           ; preds = %land.lhs.true26, %if.then35, %if.end, %land.lhs.true, %entry, %lor.lhs.false
  %retval.0 = phi %union.tree_node* [ %value, %lor.lhs.false ], [ null, %entry ], [ %call, %if.end ], [ %call36, %if.then35 ], [ %call, %land.lhs.true26 ], [ %call, %land.lhs.true ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define void @store_init_value(%union.tree_node* nocapture %decl, %union.tree_node* %init) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.end145, label %if.end

if.end:                                           ; preds = %entry
  %static_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load4 = load i32* %static_flag, align 8
  %bf.lshr = lshr i32 %bf.load4, 18
  %bf.clear5 = and i32 %bf.lshr, 1
  %call = tail call fastcc %union.tree_node* @digest_init(%union.tree_node* %0, %union.tree_node* %init, i32 %bf.clear5)
  %1 = load i32* @warn_traditional, align 4, !tbaa !27
  %tobool13 = icmp eq i32 %1, 0
  %2 = load i32* @in_system_header, align 4
  %tobool14 = icmp ne i32 %2, 0
  %or.cond = or i1 %tobool13, %tobool14
  br i1 %or.cond, label %if.end62, label %land.lhs.true15

land.lhs.true15:                                  ; preds = %if.end
  %3 = load %union.tree_node** %type1, align 8, !tbaa !1
  %code19 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load20 = load i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %bf.clear21.off = add i32 %bf.clear21, -18
  %switch = icmp ult i32 %bf.clear21.off, 5
  br i1 %switch, label %land.lhs.true54, label %if.end62

land.lhs.true54:                                  ; preds = %land.lhs.true15
  %bf.load57 = load i32* %static_flag, align 8
  %bf.clear59 = and i32 %bf.load57, 262144
  %tobool60 = icmp eq i32 %bf.clear59, 0
  br i1 %tobool60, label %if.then61, label %if.end62

if.then61:                                        ; preds = %land.lhs.true54
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([57 x i8]* @.str110, i64 0, i64 0)) #6
  br label %if.end62

if.end62:                                         ; preds = %land.lhs.true15, %land.lhs.true54, %if.end, %if.then61
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  store %union.tree_node* %call, %union.tree_node** %initial, align 8, !tbaa !33
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %while.cond

while.cond:                                       ; preds = %land.rhs83, %if.end62
  %value.0 = phi %union.tree_node* [ %call, %if.end62 ], [ %5, %land.rhs83 ]
  %code65 = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 2
  %bf.load66 = load i32* %code65, align 8
  %bf.clear67 = and i32 %bf.load66, 255
  %bf.clear67.off = add i32 %bf.clear67, -114
  %switch178 = icmp ult i32 %bf.clear67.off, 3
  br i1 %switch178, label %land.lhs.true81, label %while.end

land.lhs.true81:                                  ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %5 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %cmp82 = icmp eq %union.tree_node* %5, %4
  br i1 %cmp82, label %while.end, label %land.rhs83

land.rhs83:                                       ; preds = %land.lhs.true81
  %type85 = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type85, align 8, !tbaa !1
  %type90 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type90, align 8, !tbaa !1
  %cmp91 = icmp eq %union.tree_node* %6, %7
  br i1 %cmp91, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.lhs.true81, %land.rhs83
  tail call void @constant_expression_warning(%union.tree_node* %value.0) #6
  %bf.load98 = load i32* %code, align 8
  %bf.clear99 = and i32 %bf.load98, 255
  %cmp100 = icmp eq i32 %bf.clear99, 18
  br i1 %cmp100, label %land.lhs.true101, label %if.end145

land.lhs.true101:                                 ; preds = %while.end
  %values = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 1
  %8 = load i8** %values, align 8
  %cmp103 = icmp ne i8* %8, null
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp105 = icmp eq %union.tree_node* %value.0, %9
  %or.cond177 = or i1 %cmp103, %cmp105
  br i1 %or.cond177, label %if.end145, label %if.then106

if.then106:                                       ; preds = %land.lhs.true101
  %code108 = getelementptr inbounds %union.tree_node* %init, i64 0, i32 0, i32 0, i32 2
  %bf.load109 = load i32* %code108, align 8
  %bf.clear110 = and i32 %bf.load109, 255
  %cmp111 = icmp eq i32 %bf.clear110, 116
  br i1 %cmp111, label %if.then112, label %if.end116

if.then112:                                       ; preds = %if.then106
  %operands114 = getelementptr inbounds %union.tree_node* %init, i64 0, i32 0, i32 2
  %arrayidx115 = bitcast i32* %operands114 to %union.tree_node**
  %10 = load %union.tree_node** %arrayidx115, align 8, !tbaa !7
  br label %if.end116

if.end116:                                        ; preds = %if.then112, %if.then106
  %inside_init.0 = phi %union.tree_node* [ %10, %if.then112 ], [ %init, %if.then106 ]
  %call117 = tail call %union.tree_node* @fold(%union.tree_node* %inside_init.0) #6
  %code119 = getelementptr inbounds %union.tree_node* %call117, i64 0, i32 0, i32 0, i32 2
  %bf.load120 = load i32* %code119, align 8
  %bf.clear121 = and i32 %bf.load120, 255
  %cmp122 = icmp eq i32 %bf.clear121, 170
  br i1 %cmp122, label %if.then123, label %if.end145

if.then123:                                       ; preds = %if.end116
  %operands126 = getelementptr inbounds %union.tree_node* %call117, i64 0, i32 0, i32 2
  %arrayidx127 = bitcast i32* %operands126 to %union.tree_node**
  %11 = load %union.tree_node** %arrayidx127, align 8, !tbaa !7
  %operands129 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 2
  %arrayidx130 = bitcast i32* %operands129 to %union.tree_node**
  %12 = load %union.tree_node** %arrayidx130, align 8, !tbaa !7
  %type132 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 1
  %13 = load %union.tree_node** %type132, align 8, !tbaa !1
  %values134 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 1
  %14 = load i8** %values134, align 8
  %tobool135 = icmp eq i8* %14, null
  br i1 %tobool135, label %if.end145, label %if.then136

if.then136:                                       ; preds = %if.then123
  store i8* %14, i8** %values, align 8, !tbaa !57
  tail call void @layout_type(%union.tree_node* %0) #6
  tail call void @layout_decl(%union.tree_node* %12, i32 0) #6
  br label %if.end145

if.end145:                                        ; preds = %land.lhs.true101, %if.then123, %if.end116, %if.then136, %entry, %while.end
  ret void
}

declare void @constant_expression_warning(%union.tree_node*) #1

declare void @layout_type(%union.tree_node*) #1

declare void @layout_decl(%union.tree_node*, i32) #1

; Function Attrs: nounwind uwtable
define void @error_init(i8* %msgid) #0 {
entry:
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([3 x i8]* @.str81, i64 0, i64 0), i8* %msgid) #6
  %0 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %1 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %cmp11.i = icmp ult %struct.spelling* %0, %1
  br i1 %cmp11.i, label %for.body.i, label %spelling_length.exit.thread

spelling_length.exit.thread:                      ; preds = %entry
  %2 = alloca i8, align 1
  br label %print_spelling.exit

for.body.i:                                       ; preds = %entry, %for.inc.i
  %p.013.i = phi %struct.spelling* [ %incdec.ptr.i, %for.inc.i ], [ %0, %entry ]
  %size.012.i = phi i32 [ %size.1.i, %for.inc.i ], [ 0, %entry ]
  %kind.i = getelementptr inbounds %struct.spelling* %p.013.i, i64 0, i32 0
  %3 = load i32* %kind.i, align 4, !tbaa !58
  %cmp1.i = icmp eq i32 %3, 3
  br i1 %cmp1.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body.i
  %add.i = add nsw i32 %size.012.i, 25
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body.i
  %s.i = getelementptr inbounds %struct.spelling* %p.013.i, i64 0, i32 1, i32 0
  %4 = load i8** %s.i, align 8, !tbaa !7
  %call.i = call i64 @strlen(i8* %4) #6
  %conv10.i = zext i32 %size.012.i to i64
  %add2.i = add i64 %conv10.i, 1
  %add3.i = add i64 %add2.i, %call.i
  %conv4.i = trunc i64 %add3.i to i32
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %size.1.i = phi i32 [ %add.i, %if.then.i ], [ %conv4.i, %if.else.i ]
  %incdec.ptr.i = getelementptr inbounds %struct.spelling* %p.013.i, i64 1
  %cmp.i = icmp ult %struct.spelling* %incdec.ptr.i, %1
  br i1 %cmp.i, label %for.body.i, label %spelling_length.exit

spelling_length.exit:                             ; preds = %for.inc.i
  %add = add nsw i32 %size.1.i, 1
  %conv = sext i32 %add to i64
  %5 = alloca i8, i64 %conv, align 1
  br i1 %cmp11.i, label %for.body.i4, label %print_spelling.exit

for.body.i4:                                      ; preds = %spelling_length.exit, %for.inc13.i
  %p.034.i = phi %struct.spelling* [ %incdec.ptr14.i, %for.inc13.i ], [ %0, %spelling_length.exit ]
  %d.033.i = phi i8* [ %d.3.i, %for.inc13.i ], [ %5, %spelling_length.exit ]
  %kind.i3 = getelementptr inbounds %struct.spelling* %p.034.i, i64 0, i32 0
  %6 = load i32* %kind.i3, align 4, !tbaa !58
  switch i32 %6, label %if.end.i [
    i32 3, label %if.then.i6
    i32 2, label %if.then5.i
  ]

if.then.i6:                                       ; preds = %for.body.i4
  %u.i = getelementptr inbounds %struct.spelling* %p.034.i, i64 0, i32 1
  %i.i = bitcast %union.anon.4* %u.i to i32*
  %7 = load i32* %i.i, align 4, !tbaa !27
  %call.i5 = call i32 (i8*, i8*, ...)* @sprintf(i8* %d.033.i, i8* getelementptr inbounds ([5 x i8]* @.str162, i64 0, i64 0), i32 %7) #6
  %call2.i = call i64 @strlen(i8* %d.033.i) #6
  %add.ptr.i = getelementptr inbounds i8* %d.033.i, i64 %call2.i
  br label %for.inc13.i

if.then5.i:                                       ; preds = %for.body.i4
  %incdec.ptr.i7 = getelementptr inbounds i8* %d.033.i, i64 1
  store i8 46, i8* %d.033.i, align 1, !tbaa !34
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %for.body.i4
  %d.1.i = phi i8* [ %incdec.ptr.i7, %if.then5.i ], [ %d.033.i, %for.body.i4 ]
  %s7.i = getelementptr inbounds %struct.spelling* %p.034.i, i64 0, i32 1, i32 0
  %8 = load i8** %s7.i, align 8, !tbaa !7
  %9 = load i8* %8, align 1, !tbaa !34
  store i8 %9, i8* %d.1.i, align 1, !tbaa !34
  %tobool29.i = icmp eq i8 %9, 0
  br i1 %tobool29.i, label %for.inc13.i, label %for.inc.i8

for.inc.i8:                                       ; preds = %if.end.i, %for.inc.i8
  %s.031.i = phi i8* [ %incdec.ptr9.i, %for.inc.i8 ], [ %8, %if.end.i ]
  %d.230.i = phi i8* [ %incdec.ptr11.i, %for.inc.i8 ], [ %d.1.i, %if.end.i ]
  %incdec.ptr9.i = getelementptr inbounds i8* %s.031.i, i64 1
  %incdec.ptr11.i = getelementptr inbounds i8* %d.230.i, i64 1
  %10 = load i8* %incdec.ptr9.i, align 1, !tbaa !34
  store i8 %10, i8* %incdec.ptr11.i, align 1, !tbaa !34
  %tobool.i = icmp eq i8 %10, 0
  br i1 %tobool.i, label %for.inc13.i, label %for.inc.i8

for.inc13.i:                                      ; preds = %for.inc.i8, %if.end.i, %if.then.i6
  %d.3.i = phi i8* [ %add.ptr.i, %if.then.i6 ], [ %d.1.i, %if.end.i ], [ %incdec.ptr11.i, %for.inc.i8 ]
  %incdec.ptr14.i = getelementptr inbounds %struct.spelling* %p.034.i, i64 1
  %11 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %cmp.i9 = icmp ult %struct.spelling* %incdec.ptr14.i, %11
  br i1 %cmp.i9, label %for.body.i4, label %print_spelling.exit

print_spelling.exit:                              ; preds = %for.inc13.i, %spelling_length.exit.thread, %spelling_length.exit
  %12 = phi i8* [ %5, %spelling_length.exit ], [ %2, %spelling_length.exit.thread ], [ %5, %for.inc13.i ]
  %d.0.lcssa.i = phi i8* [ %5, %spelling_length.exit ], [ %2, %spelling_length.exit.thread ], [ %d.3.i, %for.inc13.i ]
  store i8 0, i8* %d.0.lcssa.i, align 1, !tbaa !34
  %13 = load i8* %12, align 1, !tbaa !34
  %tobool = icmp eq i8 %13, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %print_spelling.exit
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([31 x i8]* @.str111, i64 0, i64 0), i8* %12) #6
  br label %if.end

if.end:                                           ; preds = %print_spelling.exit, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @pedwarn_init(i8* %msgid) #0 {
entry:
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([3 x i8]* @.str81, i64 0, i64 0), i8* %msgid) #6
  %0 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %1 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %cmp11.i = icmp ult %struct.spelling* %0, %1
  br i1 %cmp11.i, label %for.body.i, label %spelling_length.exit.thread

spelling_length.exit.thread:                      ; preds = %entry
  %2 = alloca i8, align 1
  br label %print_spelling.exit

for.body.i:                                       ; preds = %entry, %for.inc.i
  %p.013.i = phi %struct.spelling* [ %incdec.ptr.i, %for.inc.i ], [ %0, %entry ]
  %size.012.i = phi i32 [ %size.1.i, %for.inc.i ], [ 0, %entry ]
  %kind.i = getelementptr inbounds %struct.spelling* %p.013.i, i64 0, i32 0
  %3 = load i32* %kind.i, align 4, !tbaa !58
  %cmp1.i = icmp eq i32 %3, 3
  br i1 %cmp1.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body.i
  %add.i = add nsw i32 %size.012.i, 25
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body.i
  %s.i = getelementptr inbounds %struct.spelling* %p.013.i, i64 0, i32 1, i32 0
  %4 = load i8** %s.i, align 8, !tbaa !7
  %call.i = call i64 @strlen(i8* %4) #6
  %conv10.i = zext i32 %size.012.i to i64
  %add2.i = add i64 %conv10.i, 1
  %add3.i = add i64 %add2.i, %call.i
  %conv4.i = trunc i64 %add3.i to i32
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %size.1.i = phi i32 [ %add.i, %if.then.i ], [ %conv4.i, %if.else.i ]
  %incdec.ptr.i = getelementptr inbounds %struct.spelling* %p.013.i, i64 1
  %cmp.i = icmp ult %struct.spelling* %incdec.ptr.i, %1
  br i1 %cmp.i, label %for.body.i, label %spelling_length.exit

spelling_length.exit:                             ; preds = %for.inc.i
  %add = add nsw i32 %size.1.i, 1
  %conv = sext i32 %add to i64
  %5 = alloca i8, i64 %conv, align 1
  br i1 %cmp11.i, label %for.body.i4, label %print_spelling.exit

for.body.i4:                                      ; preds = %spelling_length.exit, %for.inc13.i
  %p.034.i = phi %struct.spelling* [ %incdec.ptr14.i, %for.inc13.i ], [ %0, %spelling_length.exit ]
  %d.033.i = phi i8* [ %d.3.i, %for.inc13.i ], [ %5, %spelling_length.exit ]
  %kind.i3 = getelementptr inbounds %struct.spelling* %p.034.i, i64 0, i32 0
  %6 = load i32* %kind.i3, align 4, !tbaa !58
  switch i32 %6, label %if.end.i [
    i32 3, label %if.then.i6
    i32 2, label %if.then5.i
  ]

if.then.i6:                                       ; preds = %for.body.i4
  %u.i = getelementptr inbounds %struct.spelling* %p.034.i, i64 0, i32 1
  %i.i = bitcast %union.anon.4* %u.i to i32*
  %7 = load i32* %i.i, align 4, !tbaa !27
  %call.i5 = call i32 (i8*, i8*, ...)* @sprintf(i8* %d.033.i, i8* getelementptr inbounds ([5 x i8]* @.str162, i64 0, i64 0), i32 %7) #6
  %call2.i = call i64 @strlen(i8* %d.033.i) #6
  %add.ptr.i = getelementptr inbounds i8* %d.033.i, i64 %call2.i
  br label %for.inc13.i

if.then5.i:                                       ; preds = %for.body.i4
  %incdec.ptr.i7 = getelementptr inbounds i8* %d.033.i, i64 1
  store i8 46, i8* %d.033.i, align 1, !tbaa !34
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %for.body.i4
  %d.1.i = phi i8* [ %incdec.ptr.i7, %if.then5.i ], [ %d.033.i, %for.body.i4 ]
  %s7.i = getelementptr inbounds %struct.spelling* %p.034.i, i64 0, i32 1, i32 0
  %8 = load i8** %s7.i, align 8, !tbaa !7
  %9 = load i8* %8, align 1, !tbaa !34
  store i8 %9, i8* %d.1.i, align 1, !tbaa !34
  %tobool29.i = icmp eq i8 %9, 0
  br i1 %tobool29.i, label %for.inc13.i, label %for.inc.i8

for.inc.i8:                                       ; preds = %if.end.i, %for.inc.i8
  %s.031.i = phi i8* [ %incdec.ptr9.i, %for.inc.i8 ], [ %8, %if.end.i ]
  %d.230.i = phi i8* [ %incdec.ptr11.i, %for.inc.i8 ], [ %d.1.i, %if.end.i ]
  %incdec.ptr9.i = getelementptr inbounds i8* %s.031.i, i64 1
  %incdec.ptr11.i = getelementptr inbounds i8* %d.230.i, i64 1
  %10 = load i8* %incdec.ptr9.i, align 1, !tbaa !34
  store i8 %10, i8* %incdec.ptr11.i, align 1, !tbaa !34
  %tobool.i = icmp eq i8 %10, 0
  br i1 %tobool.i, label %for.inc13.i, label %for.inc.i8

for.inc13.i:                                      ; preds = %for.inc.i8, %if.end.i, %if.then.i6
  %d.3.i = phi i8* [ %add.ptr.i, %if.then.i6 ], [ %d.1.i, %if.end.i ], [ %incdec.ptr11.i, %for.inc.i8 ]
  %incdec.ptr14.i = getelementptr inbounds %struct.spelling* %p.034.i, i64 1
  %11 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %cmp.i9 = icmp ult %struct.spelling* %incdec.ptr14.i, %11
  br i1 %cmp.i9, label %for.body.i4, label %print_spelling.exit

print_spelling.exit:                              ; preds = %for.inc13.i, %spelling_length.exit.thread, %spelling_length.exit
  %12 = phi i8* [ %5, %spelling_length.exit ], [ %2, %spelling_length.exit.thread ], [ %5, %for.inc13.i ]
  %d.0.lcssa.i = phi i8* [ %5, %spelling_length.exit ], [ %2, %spelling_length.exit.thread ], [ %d.3.i, %for.inc13.i ]
  store i8 0, i8* %d.0.lcssa.i, align 1, !tbaa !34
  %13 = load i8* %12, align 1, !tbaa !34
  %tobool = icmp eq i8 %13, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %print_spelling.exit
  call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([31 x i8]* @.str111, i64 0, i64 0), i8* %12) #6
  br label %if.end

if.end:                                           ; preds = %print_spelling.exit, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @start_init(%union.tree_node* %decl, %union.tree_node* readonly %asmspec_tree, i32 %top_level) #0 {
entry:
  %call = tail call noalias i8* @xmalloc(i64 72) #6
  %0 = bitcast i8* %call to %struct.initializer_stack*
  %tobool = icmp eq %union.tree_node* %asmspec_tree, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %pointer = getelementptr inbounds %union.tree_node* %asmspec_tree, i64 0, i32 0, i32 4
  %1 = load %union.tree_node** %pointer, align 8
  %2 = bitcast %union.tree_node* %1 to i8*
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %asmspec.0 = phi i8* [ %2, %if.then ], [ null, %entry ]
  %3 = load %union.tree_node** @constructor_decl, align 8, !tbaa !7
  %decl1 = getelementptr inbounds i8* %call, i64 8
  %4 = bitcast i8* %decl1 to %union.tree_node**
  store %union.tree_node* %3, %union.tree_node** %4, align 8, !tbaa !60
  %5 = load i8** @constructor_asmspec, align 8, !tbaa !7
  %asmspec2 = getelementptr inbounds i8* %call, i64 16
  %6 = bitcast i8* %asmspec2 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !62
  %7 = load i32* @require_constant_value, align 4, !tbaa !27
  %conv = trunc i32 %7 to i8
  %8 = getelementptr inbounds i8* %call, i64 69
  store i8 %conv, i8* %8, align 1, !tbaa !63
  %9 = load i32* @require_constant_elements, align 4, !tbaa !27
  %conv3 = trunc i32 %9 to i8
  %10 = getelementptr inbounds i8* %call, i64 70
  store i8 %conv3, i8* %10, align 1, !tbaa !64
  %11 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %constructor_stack = getelementptr inbounds i8* %call, i64 24
  %12 = bitcast i8* %constructor_stack to %struct.constructor_stack**
  store %struct.constructor_stack* %11, %struct.constructor_stack** %12, align 8, !tbaa !65
  %13 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %constructor_range_stack = getelementptr inbounds i8* %call, i64 32
  %14 = bitcast i8* %constructor_range_stack to %struct.constructor_range_stack**
  store %struct.constructor_range_stack* %13, %struct.constructor_range_stack** %14, align 8, !tbaa !66
  %15 = load %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %elements = getelementptr inbounds i8* %call, i64 40
  %16 = bitcast i8* %elements to %union.tree_node**
  store %union.tree_node* %15, %union.tree_node** %16, align 8, !tbaa !67
  %17 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %spelling = getelementptr inbounds i8* %call, i64 48
  %18 = bitcast i8* %spelling to %struct.spelling**
  store %struct.spelling* %17, %struct.spelling** %18, align 8, !tbaa !68
  %19 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %spelling_base = getelementptr inbounds i8* %call, i64 56
  %20 = bitcast i8* %spelling_base to %struct.spelling**
  store %struct.spelling* %19, %struct.spelling** %20, align 8, !tbaa !69
  %21 = load i32* @spelling_size, align 4, !tbaa !27
  %spelling_size = getelementptr inbounds i8* %call, i64 64
  %22 = bitcast i8* %spelling_size to i32*
  store i32 %21, i32* %22, align 4, !tbaa !70
  %23 = load i32* @constructor_subconstants_deferred, align 4, !tbaa !27
  %conv4 = trunc i32 %23 to i8
  %24 = getelementptr inbounds i8* %call, i64 71
  store i8 %conv4, i8* %24, align 1, !tbaa !71
  %25 = load i32* @constructor_top_level, align 4, !tbaa !27
  %conv5 = trunc i32 %25 to i8
  %26 = getelementptr inbounds i8* %call, i64 68
  store i8 %conv5, i8* %26, align 1, !tbaa !72
  %27 = load %struct.initializer_stack** @initializer_stack, align 8, !tbaa !7
  %next = bitcast i8* %call to %struct.initializer_stack**
  store %struct.initializer_stack* %27, %struct.initializer_stack** %next, align 8, !tbaa !73
  store %struct.initializer_stack* %0, %struct.initializer_stack** @initializer_stack, align 8, !tbaa !7
  store %union.tree_node* %decl, %union.tree_node** @constructor_decl, align 8, !tbaa !7
  store i8* %asmspec.0, i8** @constructor_asmspec, align 8, !tbaa !7
  store i32 0, i32* @constructor_subconstants_deferred, align 4, !tbaa !27
  store i32 0, i32* @constructor_designated, align 4, !tbaa !27
  store i32 %top_level, i32* @constructor_top_level, align 4, !tbaa !27
  %cmp = icmp eq %union.tree_node* %decl, null
  br i1 %cmp, label %if.else, label %if.then8

if.then8:                                         ; preds = %if.end
  %static_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %static_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 18
  %bf.clear = and i32 %bf.lshr, 1
  store i32 %bf.clear, i32* @require_constant_value, align 4, !tbaa !27
  %bf.load11 = load i32* %static_flag, align 8
  %bf.clear13 = and i32 %bf.load11, 262144
  %tobool14 = icmp eq i32 %bf.clear13, 0
  br i1 %tobool14, label %lor.lhs.false, label %land.rhs

lor.lhs.false:                                    ; preds = %if.then8
  %28 = load i32* @pedantic, align 4, !tbaa !27
  %tobool15 = icmp eq i32 %28, 0
  %29 = load i32* @flag_isoc99, align 4
  %tobool16 = icmp ne i32 %29, 0
  %or.cond = or i1 %tobool15, %tobool16
  br i1 %or.cond, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then8, %lor.lhs.false
  %type = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %30 = load %union.tree_node** %type, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 0, i32 2
  %bf.load19 = load i32* %code, align 8
  %bf.clear20 = and i32 %bf.load19, 255
  %switch.tableidx = add i32 %bf.clear20, -18
  %31 = icmp ult i32 %switch.tableidx, 5
  br i1 %31, label %switch.lookup, label %land.end

switch.lookup:                                    ; preds = %land.rhs
  %switch.cast = trunc i32 %switch.tableidx to i5
  %switch.downshift = lshr i5 -3, %switch.cast
  %switch.masked = zext i5 %switch.downshift to i32
  %phitmp = and i32 %switch.masked, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %switch.lookup, %lor.lhs.false
  %32 = phi i32 [ 0, %lor.lhs.false ], [ %phitmp, %switch.lookup ], [ 0, %land.rhs ]
  store i32 %32, i32* @require_constant_elements, align 4, !tbaa !27
  %name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 8
  %33 = load %union.tree_node** %name, align 8, !tbaa !11
  %id = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 1
  %34 = getelementptr inbounds i8** %id, i64 1
  %35 = load i8** %34, align 8, !tbaa !13
  br label %if.end50

if.else:                                          ; preds = %if.end
  store i32 0, i32* @require_constant_value, align 4, !tbaa !27
  store i32 0, i32* @require_constant_elements, align 4, !tbaa !27
  br label %if.end50

if.end50:                                         ; preds = %if.else, %land.end
  %locus.0 = phi i8* [ %35, %land.end ], [ getelementptr inbounds ([12 x i8]* @.str112, i64 0, i64 0), %if.else ]
  store %struct.constructor_stack* null, %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  store %struct.constructor_range_stack* null, %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  store i1 false, i1* @missing_braces_mentioned, align 1
  store %struct.spelling* null, %struct.spelling** @spelling_base, align 8, !tbaa !7
  store i32 0, i32* @spelling_size, align 4, !tbaa !27
  store %struct.spelling* null, %struct.spelling** @spelling, align 8, !tbaa !7
  %tobool51 = icmp eq i8* %locus.0, null
  br i1 %tobool51, label %if.end53, label %push_string.exit

push_string.exit:                                 ; preds = %if.end50
  store i32 10, i32* @spelling_size, align 4, !tbaa !27
  %call.i = tail call noalias i8* @xmalloc(i64 160) #6
  %phitmp77 = bitcast i8* %call.i to %struct.spelling*
  store %struct.spelling* %phitmp77, %struct.spelling** @spelling_base, align 8, !tbaa !7
  store %struct.spelling* %phitmp77, %struct.spelling** @spelling, align 8, !tbaa !7
  %kind.i = bitcast i8* %call.i to i32*
  store i32 1, i32* %kind.i, align 4, !tbaa !58
  %s.i = getelementptr inbounds i8* %call.i, i64 8
  %36 = bitcast i8* %s.i to i8**
  store i8* %locus.0, i8** %36, align 8, !tbaa !7
  %37 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %incdec.ptr.i = getelementptr inbounds %struct.spelling* %37, i64 1
  store %struct.spelling* %incdec.ptr.i, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %if.end53

if.end53:                                         ; preds = %if.end50, %push_string.exit
  ret void
}

declare noalias i8* @xmalloc(i64) #1

; Function Attrs: nounwind uwtable
define void @finish_init() #0 {
entry:
  %0 = load %struct.initializer_stack** @initializer_stack, align 8, !tbaa !7
  %1 = load i32* @constructor_subconstants_deferred, align 4, !tbaa !27
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %while.cond.preheader, label %if.then

if.then:                                          ; preds = %entry
  tail call void @output_deferred_addressed_constants() #6
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then, %entry
  %2 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %tobool123 = icmp eq %struct.constructor_stack* %2, null
  br i1 %tobool123, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %3 = phi %struct.constructor_stack* [ %6, %while.body ], [ %2, %while.cond.preheader ]
  %next = getelementptr inbounds %struct.constructor_stack* %3, i64 0, i32 0
  %4 = load %struct.constructor_stack** %next, align 8, !tbaa !74
  store %struct.constructor_stack* %4, %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %5 = bitcast %struct.constructor_stack* %3 to i8*
  tail call void @free(i8* %5)
  %6 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %tobool1 = icmp eq %struct.constructor_stack* %6, null
  br i1 %tobool1, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %while.cond.preheader
  %7 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %tobool2 = icmp eq %struct.constructor_range_stack* %7, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %while.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 5151, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.finish_init, i64 0, i64 0)) #7
  unreachable

if.end4:                                          ; preds = %while.end
  %decl = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 1
  %8 = load %union.tree_node** %decl, align 8, !tbaa !60
  store %union.tree_node* %8, %union.tree_node** @constructor_decl, align 8, !tbaa !7
  %asmspec = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 2
  %9 = load i8** %asmspec, align 8, !tbaa !62
  store i8* %9, i8** @constructor_asmspec, align 8, !tbaa !7
  %require_constant_value = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 10
  %10 = load i8* %require_constant_value, align 1, !tbaa !63
  %conv = sext i8 %10 to i32
  store i32 %conv, i32* @require_constant_value, align 4, !tbaa !27
  %require_constant_elements = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 11
  %11 = load i8* %require_constant_elements, align 1, !tbaa !64
  %conv5 = sext i8 %11 to i32
  store i32 %conv5, i32* @require_constant_elements, align 4, !tbaa !27
  %constructor_stack = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 3
  %12 = load %struct.constructor_stack** %constructor_stack, align 8, !tbaa !65
  store %struct.constructor_stack* %12, %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %constructor_range_stack = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 4
  %13 = load %struct.constructor_range_stack** %constructor_range_stack, align 8, !tbaa !66
  store %struct.constructor_range_stack* %13, %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %elements = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 5
  %14 = load %union.tree_node** %elements, align 8, !tbaa !67
  store %union.tree_node* %14, %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %spelling = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 6
  %15 = load %struct.spelling** %spelling, align 8, !tbaa !68
  store %struct.spelling* %15, %struct.spelling** @spelling, align 8, !tbaa !7
  %spelling_base = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 7
  %16 = load %struct.spelling** %spelling_base, align 8, !tbaa !69
  store %struct.spelling* %16, %struct.spelling** @spelling_base, align 8, !tbaa !7
  %spelling_size = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 8
  %17 = load i32* %spelling_size, align 4, !tbaa !70
  store i32 %17, i32* @spelling_size, align 4, !tbaa !27
  %deferred = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 12
  %18 = load i8* %deferred, align 1, !tbaa !71
  %conv6 = sext i8 %18 to i32
  store i32 %conv6, i32* @constructor_subconstants_deferred, align 4, !tbaa !27
  %top_level = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 9
  %19 = load i8* %top_level, align 1, !tbaa !72
  %conv7 = sext i8 %19 to i32
  store i32 %conv7, i32* @constructor_top_level, align 4, !tbaa !27
  %next8 = getelementptr inbounds %struct.initializer_stack* %0, i64 0, i32 0
  %20 = load %struct.initializer_stack** %next8, align 8, !tbaa !73
  store %struct.initializer_stack* %20, %struct.initializer_stack** @initializer_stack, align 8, !tbaa !7
  %21 = bitcast %struct.initializer_stack* %0 to i8*
  tail call void @free(i8* %21)
  ret void
}

declare void @output_deferred_addressed_constants() #1

; Function Attrs: nounwind
declare void @free(i8* nocapture) #4

; Function Attrs: nounwind uwtable
define void @really_start_incremental_init(%union.tree_node* %type) #0 {
entry:
  %call = tail call noalias i8* @xmalloc(i64 112) #6
  %0 = bitcast i8* %call to %struct.constructor_stack*
  %cmp = icmp eq %union.tree_node* %type, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node** @constructor_decl, align 8, !tbaa !7
  %type1 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type1, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = phi %union.tree_node* [ %2, %if.then ], [ %type, %entry ]
  %4 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %type2 = getelementptr inbounds i8* %call, i64 8
  %5 = bitcast i8* %type2 to %union.tree_node**
  store %union.tree_node* %4, %union.tree_node** %5, align 8, !tbaa !76
  %6 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %fields = getelementptr inbounds i8* %call, i64 16
  %7 = bitcast i8* %fields to %union.tree_node**
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !tbaa !77
  %8 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %index = getelementptr inbounds i8* %call, i64 24
  %9 = bitcast i8* %index to %union.tree_node**
  store %union.tree_node* %8, %union.tree_node** %9, align 8, !tbaa !78
  %10 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %max_index = getelementptr inbounds i8* %call, i64 32
  %11 = bitcast i8* %max_index to %union.tree_node**
  store %union.tree_node* %10, %union.tree_node** %11, align 8, !tbaa !79
  %12 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %unfilled_index = getelementptr inbounds i8* %call, i64 40
  %13 = bitcast i8* %unfilled_index to %union.tree_node**
  store %union.tree_node* %12, %union.tree_node** %13, align 8, !tbaa !80
  %14 = load %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %unfilled_fields = getelementptr inbounds i8* %call, i64 48
  %15 = bitcast i8* %unfilled_fields to %union.tree_node**
  store %union.tree_node* %14, %union.tree_node** %15, align 8, !tbaa !81
  %16 = load %union.tree_node** @constructor_bit_index, align 8, !tbaa !7
  %bit_index = getelementptr inbounds i8* %call, i64 56
  %17 = bitcast i8* %bit_index to %union.tree_node**
  store %union.tree_node* %16, %union.tree_node** %17, align 8, !tbaa !82
  %18 = load %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %elements = getelementptr inbounds i8* %call, i64 64
  %19 = bitcast i8* %elements to %union.tree_node**
  store %union.tree_node* %18, %union.tree_node** %19, align 8, !tbaa !83
  %20 = load i32* @constructor_constant, align 4, !tbaa !27
  %conv = trunc i32 %20 to i8
  %21 = getelementptr inbounds i8* %call, i64 104
  store i8 %conv, i8* %21, align 1, !tbaa !84
  %22 = load i32* @constructor_simple, align 4, !tbaa !27
  %conv3 = trunc i32 %22 to i8
  %23 = getelementptr inbounds i8* %call, i64 105
  store i8 %conv3, i8* %23, align 1, !tbaa !85
  %24 = load i32* @constructor_erroneous, align 4, !tbaa !27
  %conv4 = trunc i32 %24 to i8
  %25 = getelementptr inbounds i8* %call, i64 107
  store i8 %conv4, i8* %25, align 1, !tbaa !86
  %26 = load %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  %pending_elts = getelementptr inbounds i8* %call, i64 72
  %27 = bitcast i8* %pending_elts to %struct.init_node**
  store %struct.init_node* %26, %struct.init_node** %27, align 8, !tbaa !87
  %28 = load i32* @constructor_depth, align 4, !tbaa !27
  %depth = getelementptr inbounds i8* %call, i64 84
  %29 = bitcast i8* %depth to i32*
  store i32 %28, i32* %29, align 4, !tbaa !88
  %replacement_value = getelementptr inbounds i8* %call, i64 88
  %30 = getelementptr inbounds i8* %call, i64 106
  store i8 0, i8* %30, align 1, !tbaa !89
  %31 = getelementptr inbounds i8* %call, i64 108
  store i8 0, i8* %31, align 1, !tbaa !90
  call void @llvm.memset.p0i8.i64(i8* %replacement_value, i8 0, i64 16, i32 8, i1 false)
  %32 = load i32* @constructor_incremental, align 4, !tbaa !27
  %conv5 = trunc i32 %32 to i8
  %33 = getelementptr inbounds i8* %call, i64 109
  store i8 %conv5, i8* %33, align 1, !tbaa !91
  %34 = load i32* @constructor_designated, align 4, !tbaa !27
  %conv6 = trunc i32 %34 to i8
  %35 = getelementptr inbounds i8* %call, i64 110
  store i8 %conv6, i8* %35, align 1, !tbaa !92
  %next = bitcast i8* %call to %struct.constructor_stack**
  store %struct.constructor_stack* null, %struct.constructor_stack** %next, align 8, !tbaa !74
  store %struct.constructor_stack* %0, %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  store i32 1, i32* @constructor_constant, align 4, !tbaa !27
  store i32 1, i32* @constructor_simple, align 4, !tbaa !27
  %36 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %37 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sub.ptr.lhs.cast = ptrtoint %struct.spelling* %36 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.spelling* %37 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div126 = lshr exact i64 %sub.ptr.sub, 4
  %conv7 = trunc i64 %sub.ptr.div126 to i32
  store i32 %conv7, i32* @constructor_depth, align 4, !tbaa !27
  store %union.tree_node* null, %union.tree_node** @constructor_elements, align 8, !tbaa !7
  store %struct.init_node* null, %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  store %union.tree_node* %3, %union.tree_node** @constructor_type, align 8, !tbaa !7
  store i32 1, i32* @constructor_incremental, align 4, !tbaa !27
  store i32 0, i32* @constructor_designated, align 4, !tbaa !27
  store i32 0, i32* @designator_depth, align 4, !tbaa !27
  store i1 false, i1* @designator_errorneous, align 1
  %code = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else101 [
    i32 20, label %if.then17
    i32 21, label %if.then17
    i32 18, label %if.then35
    i32 9, label %if.then74
  ]

if.then17:                                        ; preds = %if.end, %if.end
  %values = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 1
  %38 = load i8** %values, align 8
  %39 = bitcast i8* %38 to %union.tree_node*
  store %union.tree_node* %39, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp19132 = icmp eq i8* %38, null
  br i1 %cmp19132, label %while.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then17, %while.body
  %40 = phi %union.tree_node* [ %43, %while.body ], [ %39, %if.then17 ]
  %lang_flag_4 = getelementptr inbounds %union.tree_node* %40, i64 0, i32 0, i32 5
  %41 = bitcast i48* %lang_flag_4 to i64*
  %bf.load21 = load i64* %41, align 8
  %bf.cast = and i64 %bf.load21, 2199023255552
  %cmp23 = icmp eq i64 %bf.cast, 0
  br i1 %cmp23, label %while.end, label %land.end

land.end:                                         ; preds = %land.lhs.true
  %name = getelementptr inbounds %union.tree_node* %40, i64 0, i32 0, i32 8
  %42 = load %union.tree_node** %name, align 8, !tbaa !11
  %cmp26 = icmp eq %union.tree_node* %42, null
  br i1 %cmp26, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %chain = getelementptr inbounds %union.tree_node* %40, i64 0, i32 0, i32 0, i32 0
  %43 = load %union.tree_node** %chain, align 8, !tbaa !28
  store %union.tree_node* %43, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp19 = icmp eq %union.tree_node* %43, null
  br i1 %cmp19, label %while.end, label %land.lhs.true

while.end:                                        ; preds = %land.end, %land.lhs.true, %while.body, %if.then17
  %44 = phi %union.tree_node* [ %39, %if.then17 ], [ %40, %land.end ], [ %40, %land.lhs.true ], [ null, %while.body ]
  store %union.tree_node* %44, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %45 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !7
  store %union.tree_node* %45, %union.tree_node** @constructor_bit_index, align 8, !tbaa !7
  br label %if.end104

if.then35:                                        ; preds = %if.end
  %values37 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 1
  %46 = load i8** %values37, align 8
  %tobool = icmp eq i8* %46, null
  br i1 %tobool, label %if.else65, label %if.then38

if.then38:                                        ; preds = %if.then35
  %maxval = getelementptr inbounds i8* %46, i64 112
  %47 = bitcast i8* %maxval to %union.tree_node**
  %48 = load %union.tree_node** %47, align 8, !tbaa !16
  store %union.tree_node* %48, %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %cmp42 = icmp eq %union.tree_node* %48, null
  br i1 %cmp42, label %land.lhs.true44, label %land.lhs.true51

land.lhs.true44:                                  ; preds = %if.then38
  %size = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 2
  %49 = bitcast i32* %size to %union.tree_node**
  %50 = load %union.tree_node** %49, align 8, !tbaa !8
  %tobool46 = icmp eq %union.tree_node* %50, null
  br i1 %tobool46, label %if.end60, label %if.end49

if.end49:                                         ; preds = %land.lhs.true44
  %call48 = tail call %union.tree_node* @build_int_2_wide(i64 -1, i64 -1) #6
  store %union.tree_node* %call48, %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %tobool50 = icmp eq %union.tree_node* %call48, null
  br i1 %tobool50, label %if.end60, label %land.lhs.true51

land.lhs.true51:                                  ; preds = %if.then38, %if.end49
  %51 = phi %union.tree_node* [ %call48, %if.end49 ], [ %48, %if.then38 ]
  %code53 = getelementptr inbounds %union.tree_node* %51, i64 0, i32 0, i32 0, i32 2
  %bf.load54 = load i32* %code53, align 8
  %bf.clear55 = and i32 %bf.load54, 255
  %cmp56 = icmp eq i32 %bf.clear55, 25
  br i1 %cmp56, label %if.end60, label %if.then58

if.then58:                                        ; preds = %land.lhs.true51
  %call59 = tail call %union.tree_node* @build_int_2_wide(i64 -1, i64 -1) #6
  store %union.tree_node* %call59, %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  br label %if.end60

if.end60:                                         ; preds = %land.lhs.true44, %land.lhs.true51, %if.end49, %if.then58
  %52 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !7
  %53 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %values62 = getelementptr inbounds %union.tree_node* %53, i64 0, i32 0, i32 1
  %54 = load i8** %values62, align 8
  %minval = getelementptr inbounds i8* %54, i64 104
  %55 = bitcast i8* %minval to %union.tree_node**
  %56 = load %union.tree_node** %55, align 8, !tbaa !31
  %call64 = tail call %union.tree_node* @convert(%union.tree_node* %52, %union.tree_node* %56) #6
  br label %if.end66

if.else65:                                        ; preds = %if.then35
  %57 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !7
  br label %if.end66

if.end66:                                         ; preds = %if.else65, %if.end60
  %storemerge = phi %union.tree_node* [ %57, %if.else65 ], [ %call64, %if.end60 ]
  store %union.tree_node* %storemerge, %union.tree_node** @constructor_index, align 8, !tbaa !7
  store %union.tree_node* %storemerge, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br label %if.end104

if.then74:                                        ; preds = %if.end
  %type75 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type75, i64 0, i32 6
  %bf.load76 = load i32* %mode, align 4
  %bf.lshr77 = lshr i32 %bf.load76, 9
  %bf.clear78 = and i32 %bf.lshr77, 127
  %idxprom127 = zext i32 %bf.clear78 to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom127
  %58 = load i8* %arrayidx, align 1, !tbaa !34
  %cmp80 = icmp eq i8 %58, 0
  br i1 %cmp80, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.then74
  %arrayidx88 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom127
  %59 = load i8* %arrayidx88, align 1, !tbaa !34
  %div128 = udiv i8 %59, %58
  %div = zext i8 %div128 to i64
  %phitmp = add i64 %div, -1
  br label %cond.end

cond.end:                                         ; preds = %if.then74, %cond.false
  %cond = phi i64 [ %phitmp, %cond.false ], [ -1, %if.then74 ]
  %call99 = tail call %union.tree_node* @build_int_2_wide(i64 %cond, i64 0) #6
  store %union.tree_node* %call99, %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %60 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !7
  %61 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !7
  %call100 = tail call %union.tree_node* @convert(%union.tree_node* %60, %union.tree_node* %61) #6
  store %union.tree_node* %call100, %union.tree_node** @constructor_index, align 8, !tbaa !7
  store %union.tree_node* %call100, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br label %if.end104

if.else101:                                       ; preds = %if.end
  store %union.tree_node* %3, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  store %union.tree_node* %3, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  br label %if.end104

if.end104:                                        ; preds = %if.end66, %if.else101, %cond.end, %while.end
  ret void
}

declare %union.tree_node* @build_int_2_wide(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @push_init_level(i32 %implicit) #0 {
entry:
  %val.i = alloca [2 x i64], align 16
  %0 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %implicit1343 = getelementptr inbounds %struct.constructor_stack* %0, i64 0, i32 16
  %1 = load i8* %implicit1343, align 1, !tbaa !89
  %tobool344 = icmp eq i8 %1, 0
  br i1 %tobool344, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.cond.backedge
  %2 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 20
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %cmp6 = icmp eq i32 %bf.clear, 21
  %3 = load %union.tree_node** @constructor_fields, align 8
  %cmp7 = icmp eq %union.tree_node* %3, null
  %or.cond = and i1 %cmp6, %cmp7
  br i1 %or.cond, label %if.then, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %.old = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp7.old = icmp eq %union.tree_node* %.old, null
  br i1 %cmp7.old, label %if.then, label %while.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %call = tail call %union.tree_node* @pop_init_level(i32 1)
  tail call void @process_init_element(%union.tree_node* %call)
  br label %while.cond.backedge

if.else:                                          ; preds = %lor.lhs.false
  %cmp12 = icmp eq i32 %bf.clear, 18
  br i1 %cmp12, label %land.lhs.true13, label %while.end

land.lhs.true13:                                  ; preds = %if.else
  %4 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %5 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %call14 = tail call i32 @tree_int_cst_lt(%union.tree_node* %4, %union.tree_node* %5) #6
  %tobool15 = icmp eq i32 %call14, 0
  br i1 %tobool15, label %while.end, label %if.then16

if.then16:                                        ; preds = %land.lhs.true13
  %call17 = tail call %union.tree_node* @pop_init_level(i32 1)
  tail call void @process_init_element(%union.tree_node* %call17)
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then16, %if.then
  %6 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %implicit1 = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 16
  %7 = load i8* %implicit1, align 1, !tbaa !89
  %tobool = icmp eq i8 %7, 0
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %land.lhs.true, %if.else, %while.cond.backedge, %land.lhs.true13, %entry
  %tobool20 = icmp ne i32 %implicit, 0
  br i1 %tobool20, label %if.then21, label %if.end47

if.then21:                                        ; preds = %while.end
  %8 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code23 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load24 = load i32* %code23, align 8
  %bf.clear25 = and i32 %bf.load24, 255
  %cmp26 = icmp eq i32 %bf.clear25, 20
  br i1 %cmp26, label %land.lhs.true33, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %if.then21
  %cmp32 = icmp eq i32 %bf.clear25, 21
  %9 = load %union.tree_node** @constructor_fields, align 8
  %tobool34 = icmp ne %union.tree_node* %9, null
  %or.cond267 = and i1 %cmp32, %tobool34
  br i1 %or.cond267, label %if.then35, label %if.else37

land.lhs.true33:                                  ; preds = %if.then21
  %.old266 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %tobool34.old = icmp eq %union.tree_node* %.old266, null
  br i1 %tobool34.old, label %if.end47, label %if.then35

if.then35:                                        ; preds = %land.lhs.true33, %lor.lhs.false27
  %10 = phi %union.tree_node* [ %.old266, %land.lhs.true33 ], [ %9, %lor.lhs.false27 ]
  %call36 = tail call fastcc %union.tree_node* @find_init_member(%union.tree_node* %10)
  br label %if.end47

if.else37:                                        ; preds = %lor.lhs.false27
  %cmp42 = icmp eq i32 %bf.clear25, 18
  br i1 %cmp42, label %if.then43, label %if.end47

if.then43:                                        ; preds = %if.else37
  %11 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %call44 = tail call fastcc %union.tree_node* @find_init_member(%union.tree_node* %11)
  br label %if.end47

if.end47:                                         ; preds = %land.lhs.true33, %if.then35, %if.then43, %if.else37, %while.end
  %value.0 = phi %union.tree_node* [ %call36, %if.then35 ], [ %call44, %if.then43 ], [ null, %if.else37 ], [ null, %while.end ], [ null, %land.lhs.true33 ]
  %call48 = tail call noalias i8* @xmalloc(i64 112) #6
  %12 = bitcast i8* %call48 to %struct.constructor_stack*
  %13 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %type = getelementptr inbounds i8* %call48, i64 8
  %14 = bitcast i8* %type to %union.tree_node**
  store %union.tree_node* %13, %union.tree_node** %14, align 8, !tbaa !76
  %15 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %fields = getelementptr inbounds i8* %call48, i64 16
  %16 = bitcast i8* %fields to %union.tree_node**
  store %union.tree_node* %15, %union.tree_node** %16, align 8, !tbaa !77
  %17 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %index = getelementptr inbounds i8* %call48, i64 24
  %18 = bitcast i8* %index to %union.tree_node**
  store %union.tree_node* %17, %union.tree_node** %18, align 8, !tbaa !78
  %19 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %max_index = getelementptr inbounds i8* %call48, i64 32
  %20 = bitcast i8* %max_index to %union.tree_node**
  store %union.tree_node* %19, %union.tree_node** %20, align 8, !tbaa !79
  %21 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %unfilled_index = getelementptr inbounds i8* %call48, i64 40
  %22 = bitcast i8* %unfilled_index to %union.tree_node**
  store %union.tree_node* %21, %union.tree_node** %22, align 8, !tbaa !80
  %23 = load %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %unfilled_fields = getelementptr inbounds i8* %call48, i64 48
  %24 = bitcast i8* %unfilled_fields to %union.tree_node**
  store %union.tree_node* %23, %union.tree_node** %24, align 8, !tbaa !81
  %25 = load %union.tree_node** @constructor_bit_index, align 8, !tbaa !7
  %bit_index = getelementptr inbounds i8* %call48, i64 56
  %26 = bitcast i8* %bit_index to %union.tree_node**
  store %union.tree_node* %25, %union.tree_node** %26, align 8, !tbaa !82
  %27 = load %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %elements = getelementptr inbounds i8* %call48, i64 64
  %28 = bitcast i8* %elements to %union.tree_node**
  store %union.tree_node* %27, %union.tree_node** %28, align 8, !tbaa !83
  %29 = load i32* @constructor_constant, align 4, !tbaa !27
  %conv = trunc i32 %29 to i8
  %30 = getelementptr inbounds i8* %call48, i64 104
  store i8 %conv, i8* %30, align 1, !tbaa !84
  %31 = load i32* @constructor_simple, align 4, !tbaa !27
  %conv49 = trunc i32 %31 to i8
  %32 = getelementptr inbounds i8* %call48, i64 105
  store i8 %conv49, i8* %32, align 1, !tbaa !85
  %33 = load i32* @constructor_erroneous, align 4, !tbaa !27
  %conv50 = trunc i32 %33 to i8
  %34 = getelementptr inbounds i8* %call48, i64 107
  store i8 %conv50, i8* %34, align 1, !tbaa !86
  %35 = load %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  %pending_elts = getelementptr inbounds i8* %call48, i64 72
  %36 = bitcast i8* %pending_elts to %struct.init_node**
  store %struct.init_node* %35, %struct.init_node** %36, align 8, !tbaa !87
  %37 = load i32* @constructor_depth, align 4, !tbaa !27
  %depth = getelementptr inbounds i8* %call48, i64 84
  %38 = bitcast i8* %depth to i32*
  store i32 %37, i32* %38, align 4, !tbaa !88
  %replacement_value = getelementptr inbounds i8* %call48, i64 88
  %39 = bitcast i8* %replacement_value to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %39, align 8, !tbaa !93
  %conv51 = trunc i32 %implicit to i8
  %40 = getelementptr inbounds i8* %call48, i64 106
  store i8 %conv51, i8* %40, align 1, !tbaa !89
  %41 = getelementptr inbounds i8* %call48, i64 108
  store i8 0, i8* %41, align 1, !tbaa !90
  %42 = load i32* @constructor_incremental, align 4, !tbaa !27
  %conv53 = trunc i32 %42 to i8
  %43 = getelementptr inbounds i8* %call48, i64 109
  store i8 %conv53, i8* %43, align 1, !tbaa !91
  %44 = load i32* @constructor_designated, align 4, !tbaa !27
  %conv54 = trunc i32 %44 to i8
  %45 = getelementptr inbounds i8* %call48, i64 110
  store i8 %conv54, i8* %45, align 1, !tbaa !92
  %46 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %next = bitcast i8* %call48 to %struct.constructor_stack**
  store %struct.constructor_stack* %46, %struct.constructor_stack** %next, align 8, !tbaa !74
  %range_stack = getelementptr inbounds i8* %call48, i64 96
  %47 = bitcast i8* %range_stack to %struct.constructor_range_stack**
  store %struct.constructor_range_stack* null, %struct.constructor_range_stack** %47, align 8, !tbaa !94
  store %struct.constructor_stack* %12, %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  store i32 1, i32* @constructor_constant, align 4, !tbaa !27
  store i32 1, i32* @constructor_simple, align 4, !tbaa !27
  %48 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %49 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sub.ptr.lhs.cast = ptrtoint %struct.spelling* %48 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.spelling* %49 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div303 = lshr exact i64 %sub.ptr.sub, 4
  %conv55 = trunc i64 %sub.ptr.div303 to i32
  store i32 %conv55, i32* @constructor_depth, align 4, !tbaa !27
  store %union.tree_node* null, %union.tree_node** @constructor_elements, align 8, !tbaa !7
  store i32 1, i32* @constructor_incremental, align 4, !tbaa !27
  store i32 0, i32* @constructor_designated, align 4, !tbaa !27
  store %struct.init_node* null, %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  br i1 %tobool20, label %if.end59, label %if.then57

if.then57:                                        ; preds = %if.end47
  %50 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  store %struct.constructor_range_stack* %50, %struct.constructor_range_stack** %47, align 8, !tbaa !94
  store %struct.constructor_range_stack* null, %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  store i32 0, i32* @designator_depth, align 4, !tbaa !27
  store i1 false, i1* @designator_errorneous, align 1
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.end47
  %cmp60 = icmp eq %union.tree_node* %13, null
  br i1 %cmp60, label %if.then103, label %if.else63

if.else63:                                        ; preds = %if.end59
  %code65 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 2
  %bf.load66 = load i32* %code65, align 8
  %bf.clear67 = and i32 %bf.load66, 255
  switch i32 %bf.clear67, label %if.end100 [
    i32 20, label %if.then77
    i32 21, label %if.then77
    i32 18, label %if.then92
  ]

if.then77:                                        ; preds = %if.else63, %if.else63
  %cmp78 = icmp eq %union.tree_node* %15, null
  br i1 %cmp78, label %if.then80, label %if.else81

if.then80:                                        ; preds = %if.then77
  store %union.tree_node* null, %union.tree_node** @constructor_type, align 8, !tbaa !7
  br label %if.then103

if.else81:                                        ; preds = %if.then77
  %type83 = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 0, i32 1
  %51 = load %union.tree_node** %type83, align 8, !tbaa !1
  store %union.tree_node* %51, %union.tree_node** @constructor_type, align 8, !tbaa !7
  %.idx = getelementptr %union.tree_node* %15, i64 0, i32 0, i32 8
  %.idx.val = load %union.tree_node** %.idx, align 8, !tbaa !11
  %tobool.i = icmp eq %union.tree_node* %.idx.val, null
  br i1 %tobool.i, label %cond.end.i, label %cond.true.i

cond.true.i:                                      ; preds = %if.else81
  %id.i = getelementptr inbounds %union.tree_node* %.idx.val, i64 0, i32 0, i32 1
  %52 = getelementptr inbounds i8** %id.i, i64 1
  %53 = load i8** %52, align 8, !tbaa !13
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %if.else81
  %cond.i = phi i8* [ %53, %cond.true.i ], [ getelementptr inbounds ([12 x i8]* @.str154, i64 0, i64 0), %if.else81 ]
  %54 = load i32* @spelling_size, align 4, !tbaa !27
  %cmp.i321 = icmp slt i32 %conv55, %54
  br i1 %cmp.i321, label %push_member_name.exit, label %if.then.i323

if.then.i323:                                     ; preds = %cond.end.i
  %add.i322 = add nsw i32 %54, 10
  store i32 %add.i322, i32* @spelling_size, align 4, !tbaa !27
  %cmp5.i = icmp eq %struct.spelling* %49, null
  br i1 %cmp5.i, label %if.then7.i, label %if.else.i326

if.then7.i:                                       ; preds = %if.then.i323
  %conv8.i = sext i32 %add.i322 to i64
  %mul.i324 = shl nsw i64 %conv8.i, 4
  %call.i325 = tail call noalias i8* @xmalloc(i64 %mul.i324) #6
  br label %if.end.i332

if.else.i326:                                     ; preds = %if.then.i323
  %55 = bitcast %struct.spelling* %49 to i8*
  %conv9.i = sext i32 %add.i322 to i64
  %mul10.i = shl nsw i64 %conv9.i, 4
  %call11.i = tail call i8* @xrealloc(i8* %55, i64 %mul10.i) #6
  br label %if.end.i332

if.end.i332:                                      ; preds = %if.else.i326, %if.then7.i
  %storemerge.in.i327 = phi i8* [ %call11.i, %if.else.i326 ], [ %call.i325, %if.then7.i ]
  %storemerge.i328 = bitcast i8* %storemerge.in.i327 to %struct.spelling*
  store %struct.spelling* %storemerge.i328, %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sext.i329 = shl i64 %sub.ptr.sub, 28
  %idx.ext.i330 = ashr exact i64 %sext.i329, 32
  %add.ptr.i331 = getelementptr inbounds %struct.spelling* %storemerge.i328, i64 %idx.ext.i330
  store %struct.spelling* %add.ptr.i331, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %push_member_name.exit

push_member_name.exit:                            ; preds = %cond.end.i, %if.end.i332
  %56 = phi %struct.spelling* [ %48, %cond.end.i ], [ %add.ptr.i331, %if.end.i332 ]
  %kind.i333 = getelementptr inbounds %struct.spelling* %56, i64 0, i32 0
  store i32 2, i32* %kind.i333, align 4, !tbaa !58
  %s.i = getelementptr inbounds %struct.spelling* %56, i64 0, i32 1, i32 0
  store i8* %cond.i, i8** %s.i, align 8, !tbaa !7
  %57 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %incdec.ptr.i334 = getelementptr inbounds %struct.spelling* %57, i64 1
  store %struct.spelling* %incdec.ptr.i334, %struct.spelling** @spelling, align 8, !tbaa !7
  %58 = load i32* @constructor_depth, align 4, !tbaa !27
  %inc = add nsw i32 %58, 1
  store i32 %inc, i32* @constructor_depth, align 4, !tbaa !27
  br label %if.end100

if.then92:                                        ; preds = %if.else63
  %type94 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 1
  %59 = load %union.tree_node** %type94, align 8, !tbaa !1
  store %union.tree_node* %59, %union.tree_node** @constructor_type, align 8, !tbaa !7
  %call95 = tail call i64 @tree_low_cst(%union.tree_node* %17, i32 0) #6
  %conv96 = trunc i64 %call95 to i32
  %60 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %61 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sub.ptr.lhs.cast.i = ptrtoint %struct.spelling* %60 to i64
  %sub.ptr.rhs.cast.i = ptrtoint %struct.spelling* %61 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div11.i = lshr exact i64 %sub.ptr.sub.i, 4
  %conv.i = trunc i64 %sub.ptr.div11.i to i32
  %62 = load i32* @spelling_size, align 4, !tbaa !27
  %cmp.i308 = icmp slt i32 %conv.i, %62
  br i1 %cmp.i308, label %push_array_bounds.exit, label %if.then.i310

if.then.i310:                                     ; preds = %if.then92
  %add.i309 = add nsw i32 %62, 10
  store i32 %add.i309, i32* @spelling_size, align 4, !tbaa !27
  %cmp2.i = icmp eq %struct.spelling* %61, null
  br i1 %cmp2.i, label %if.then4.i, label %if.else.i313

if.then4.i:                                       ; preds = %if.then.i310
  %conv5.i = sext i32 %add.i309 to i64
  %mul.i311 = shl nsw i64 %conv5.i, 4
  %call.i312 = tail call noalias i8* @xmalloc(i64 %mul.i311) #6
  br label %if.end.i316

if.else.i313:                                     ; preds = %if.then.i310
  %63 = bitcast %struct.spelling* %61 to i8*
  %conv6.i = sext i32 %add.i309 to i64
  %mul7.i = shl nsw i64 %conv6.i, 4
  %call8.i = tail call i8* @xrealloc(i8* %63, i64 %mul7.i) #6
  br label %if.end.i316

if.end.i316:                                      ; preds = %if.else.i313, %if.then4.i
  %storemerge.in.i = phi i8* [ %call8.i, %if.else.i313 ], [ %call.i312, %if.then4.i ]
  %storemerge.i = bitcast i8* %storemerge.in.i to %struct.spelling*
  store %struct.spelling* %storemerge.i, %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sext.i = shl i64 %sub.ptr.sub.i, 28
  %idx.ext.i314 = ashr exact i64 %sext.i, 32
  %add.ptr.i315 = getelementptr inbounds %struct.spelling* %storemerge.i, i64 %idx.ext.i314
  store %struct.spelling* %add.ptr.i315, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %push_array_bounds.exit

push_array_bounds.exit:                           ; preds = %if.then92, %if.end.i316
  %64 = phi %struct.spelling* [ %60, %if.then92 ], [ %add.ptr.i315, %if.end.i316 ]
  %kind.i = getelementptr inbounds %struct.spelling* %64, i64 0, i32 0
  store i32 3, i32* %kind.i, align 4, !tbaa !58
  %u.i = getelementptr inbounds %struct.spelling* %64, i64 0, i32 1
  %i.i = bitcast %union.anon.4* %u.i to i32*
  store i32 %conv96, i32* %i.i, align 4, !tbaa !27
  %incdec.ptr.i = getelementptr inbounds %struct.spelling* %64, i64 1
  store %struct.spelling* %incdec.ptr.i, %struct.spelling** @spelling, align 8, !tbaa !7
  %65 = load i32* @constructor_depth, align 4, !tbaa !27
  %inc97 = add nsw i32 %65, 1
  store i32 %inc97, i32* @constructor_depth, align 4, !tbaa !27
  br label %if.end100

if.end100:                                        ; preds = %if.else63, %push_member_name.exit, %push_array_bounds.exit
  %.pr = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %cmp101 = icmp eq %union.tree_node* %.pr, null
  br i1 %cmp101, label %if.then103, label %if.end104

if.then103:                                       ; preds = %if.end59, %if.then80, %if.end100
  tail call void @error_init(i8* getelementptr inbounds ([40 x i8]* @.str113, i64 0, i64 0))
  store %union.tree_node* null, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  store %union.tree_node* null, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  br label %if.end265

if.end104:                                        ; preds = %if.end100
  %tobool105 = icmp ne %union.tree_node* %value.0, null
  br i1 %tobool105, label %land.lhs.true106, label %if.end138

land.lhs.true106:                                 ; preds = %if.end104
  %code108 = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 2
  %bf.load109 = load i32* %code108, align 8
  %bf.clear110 = and i32 %bf.load109, 255
  %cmp111 = icmp eq i32 %bf.clear110, 46
  br i1 %cmp111, label %if.then113, label %if.end138

if.then113:                                       ; preds = %land.lhs.true106
  %bf.lshr = lshr i32 %bf.load109, 9
  %bf.clear116 = and i32 %bf.lshr, 1
  store i32 %bf.clear116, i32* @constructor_constant, align 4, !tbaa !27
  %bf.load118 = load i32* %code108, align 8
  %bf.lshr119 = lshr i32 %bf.load118, 18
  %bf.clear120 = and i32 %bf.lshr119, 1
  store i32 %bf.clear120, i32* @constructor_simple, align 4, !tbaa !27
  %operands = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %66 = bitcast i32* %arrayidx to %union.tree_node**
  %67 = load %union.tree_node** %66, align 8, !tbaa !7
  store %union.tree_node* %67, %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %tobool121 = icmp eq %union.tree_node* %67, null
  br i1 %tobool121, label %if.end138, label %land.lhs.true122

land.lhs.true122:                                 ; preds = %if.then113
  %code124 = getelementptr inbounds %union.tree_node* %.pr, i64 0, i32 0, i32 0, i32 2
  %bf.load125 = load i32* %code124, align 8
  %bf.clear126 = and i32 %bf.load125, 255
  switch i32 %bf.clear126, label %if.end138 [
    i32 20, label %if.then136
    i32 18, label %if.then136
  ]

if.then136:                                       ; preds = %land.lhs.true122, %land.lhs.true122
  tail call fastcc void @set_nonincremental_init()
  br label %if.end138

if.end138:                                        ; preds = %land.lhs.true122, %if.then113, %if.then136, %land.lhs.true106, %if.end104
  %68 = load i32* @warn_missing_braces, align 4
  %notlhs = icmp ne i32 %implicit, 1
  %notrhs = icmp eq i32 %68, 0
  %or.cond269.not = or i1 %notrhs, %notlhs
  %.b = load i1* @missing_braces_mentioned, align 1
  %or.cond271 = or i1 %or.cond269.not, %.b
  br i1 %or.cond271, label %if.end146, label %if.then145

if.then145:                                       ; preds = %if.end138
  store i1 true, i1* @missing_braces_mentioned, align 1
  tail call fastcc void @warning_init(i8* getelementptr inbounds ([34 x i8]* @.str114, i64 0, i64 0))
  br label %if.end146

if.end146:                                        ; preds = %if.end138, %if.then145
  %69 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code148 = getelementptr inbounds %union.tree_node* %69, i64 0, i32 0, i32 0, i32 2
  %bf.load149 = load i32* %code148, align 8
  %bf.clear150 = and i32 %bf.load149, 255
  switch i32 %bf.clear150, label %if.else262 [
    i32 20, label %if.then160
    i32 21, label %if.then160
    i32 9, label %if.then184
    i32 18, label %if.then219
  ]

if.then160:                                       ; preds = %if.end146, %if.end146
  %values = getelementptr inbounds %union.tree_node* %69, i64 0, i32 0, i32 1
  %70 = load i8** %values, align 8
  %71 = bitcast i8* %70 to %union.tree_node*
  store %union.tree_node* %71, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp163341 = icmp eq i8* %70, null
  br i1 %cmp163341, label %while.end176, label %land.lhs.true165

land.lhs.true165:                                 ; preds = %if.then160, %while.body174
  %72 = phi %union.tree_node* [ %75, %while.body174 ], [ %71, %if.then160 ]
  %lang_flag_4 = getelementptr inbounds %union.tree_node* %72, i64 0, i32 0, i32 5
  %73 = bitcast i48* %lang_flag_4 to i64*
  %bf.load166 = load i64* %73, align 8
  %bf.cast = and i64 %bf.load166, 2199023255552
  %cmp169 = icmp eq i64 %bf.cast, 0
  br i1 %cmp169, label %while.end176, label %land.end

land.end:                                         ; preds = %land.lhs.true165
  %name = getelementptr inbounds %union.tree_node* %72, i64 0, i32 0, i32 8
  %74 = load %union.tree_node** %name, align 8, !tbaa !11
  %cmp172 = icmp eq %union.tree_node* %74, null
  br i1 %cmp172, label %while.body174, label %while.end176

while.body174:                                    ; preds = %land.end
  %chain = getelementptr inbounds %union.tree_node* %72, i64 0, i32 0, i32 0, i32 0
  %75 = load %union.tree_node** %chain, align 8, !tbaa !28
  store %union.tree_node* %75, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp163 = icmp eq %union.tree_node* %75, null
  br i1 %cmp163, label %while.end176, label %land.lhs.true165

while.end176:                                     ; preds = %land.end, %land.lhs.true165, %while.body174, %if.then160
  %76 = phi %union.tree_node* [ %71, %if.then160 ], [ %72, %land.end ], [ %72, %land.lhs.true165 ], [ null, %while.body174 ]
  store %union.tree_node* %76, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %77 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !7
  store %union.tree_node* %77, %union.tree_node** @constructor_bit_index, align 8, !tbaa !7
  br label %if.end265

if.then184:                                       ; preds = %if.end146
  %type185 = bitcast %union.tree_node* %69 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type185, i64 0, i32 6
  %bf.load186 = load i32* %mode, align 4
  %bf.lshr187 = lshr i32 %bf.load186, 9
  %bf.clear188 = and i32 %bf.lshr187, 127
  %idxprom304 = zext i32 %bf.clear188 to i64
  %arrayidx189 = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom304
  %78 = load i8* %arrayidx189, align 1, !tbaa !34
  %cmp191 = icmp eq i8 %78, 0
  br i1 %cmp191, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.then184
  %arrayidx199 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom304
  %79 = load i8* %arrayidx199, align 1, !tbaa !34
  %div305 = udiv i8 %79, %78
  %div = zext i8 %div305 to i64
  %phitmp = add i64 %div, -1
  br label %cond.end

cond.end:                                         ; preds = %if.then184, %cond.false
  %cond = phi i64 [ %phitmp, %cond.false ], [ -1, %if.then184 ]
  %call210 = tail call %union.tree_node* @build_int_2_wide(i64 %cond, i64 0) #6
  store %union.tree_node* %call210, %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %80 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !7
  %81 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !7
  %call211 = tail call %union.tree_node* @convert(%union.tree_node* %80, %union.tree_node* %81) #6
  store %union.tree_node* %call211, %union.tree_node** @constructor_index, align 8, !tbaa !7
  store %union.tree_node* %call211, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br label %if.end265

if.then219:                                       ; preds = %if.end146
  %values221 = getelementptr inbounds %union.tree_node* %69, i64 0, i32 0, i32 1
  %82 = load i8** %values221, align 8
  %tobool222 = icmp eq i8* %82, null
  br i1 %tobool222, label %if.else250, label %if.then223

if.then223:                                       ; preds = %if.then219
  %maxval = getelementptr inbounds i8* %82, i64 112
  %83 = bitcast i8* %maxval to %union.tree_node**
  %84 = load %union.tree_node** %83, align 8, !tbaa !16
  store %union.tree_node* %84, %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %cmp227 = icmp eq %union.tree_node* %84, null
  br i1 %cmp227, label %land.lhs.true229, label %land.lhs.true236

land.lhs.true229:                                 ; preds = %if.then223
  %size = getelementptr inbounds %union.tree_node* %69, i64 0, i32 0, i32 2
  %85 = bitcast i32* %size to %union.tree_node**
  %86 = load %union.tree_node** %85, align 8, !tbaa !8
  %tobool231 = icmp eq %union.tree_node* %86, null
  br i1 %tobool231, label %if.end245, label %if.end234

if.end234:                                        ; preds = %land.lhs.true229
  %call233 = tail call %union.tree_node* @build_int_2_wide(i64 -1, i64 -1) #6
  store %union.tree_node* %call233, %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %tobool235 = icmp eq %union.tree_node* %call233, null
  br i1 %tobool235, label %if.end245, label %land.lhs.true236

land.lhs.true236:                                 ; preds = %if.then223, %if.end234
  %87 = phi %union.tree_node* [ %call233, %if.end234 ], [ %84, %if.then223 ]
  %code238 = getelementptr inbounds %union.tree_node* %87, i64 0, i32 0, i32 0, i32 2
  %bf.load239 = load i32* %code238, align 8
  %bf.clear240 = and i32 %bf.load239, 255
  %cmp241 = icmp eq i32 %bf.clear240, 25
  br i1 %cmp241, label %if.end245, label %if.then243

if.then243:                                       ; preds = %land.lhs.true236
  %call244 = tail call %union.tree_node* @build_int_2_wide(i64 -1, i64 -1) #6
  store %union.tree_node* %call244, %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  br label %if.end245

if.end245:                                        ; preds = %land.lhs.true229, %land.lhs.true236, %if.end234, %if.then243
  %88 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !7
  %89 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %values247 = getelementptr inbounds %union.tree_node* %89, i64 0, i32 0, i32 1
  %90 = load i8** %values247, align 8
  %minval = getelementptr inbounds i8* %90, i64 104
  %91 = bitcast i8* %minval to %union.tree_node**
  %92 = load %union.tree_node** %91, align 8, !tbaa !31
  %call249 = tail call %union.tree_node* @convert(%union.tree_node* %88, %union.tree_node* %92) #6
  br label %if.end251

if.else250:                                       ; preds = %if.then219
  %93 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !7
  br label %if.end251

if.end251:                                        ; preds = %if.else250, %if.end245
  %storemerge = phi %union.tree_node* [ %93, %if.else250 ], [ %call249, %if.end245 ]
  store %union.tree_node* %storemerge, %union.tree_node** @constructor_index, align 8, !tbaa !7
  store %union.tree_node* %storemerge, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br i1 %tobool105, label %land.lhs.true253, label %if.end265

land.lhs.true253:                                 ; preds = %if.end251
  %code255 = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 2
  %bf.load256 = load i32* %code255, align 8
  %bf.clear257 = and i32 %bf.load256, 255
  %cmp258 = icmp eq i32 %bf.clear257, 29
  br i1 %cmp258, label %if.then260, label %if.end265

if.then260:                                       ; preds = %land.lhs.true253
  %94 = bitcast [2 x i64]* %val.i to i8*
  call void @llvm.lifetime.start(i64 16, i8* %94) #6
  %95 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code.i = getelementptr inbounds %union.tree_node* %95, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 18
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then260
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 6091, i8* getelementptr inbounds ([36 x i8]* @__FUNCTION__.set_nonincremental_init_from_string, i64 0, i64 0)) #7
  unreachable

if.end.i:                                         ; preds = %if.then260
  %type2.i = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 1
  %96 = load %union.tree_node** %type2.i, align 8, !tbaa !1
  %type4.i = getelementptr inbounds %union.tree_node* %96, i64 0, i32 0, i32 0, i32 1
  %97 = load %union.tree_node** %type4.i, align 8, !tbaa !1
  %type5.i = bitcast %union.tree_node* %97 to %struct.tree_type*
  %precision.i = getelementptr inbounds %struct.tree_type* %type5.i, i64 0, i32 6
  %bf.load6.i = load i32* %precision.i, align 4
  %bf.clear7.i = and i32 %bf.load6.i, 511
  %98 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 8, !tbaa !7
  %type8.i = bitcast %union.tree_node* %98 to %struct.tree_type*
  %precision9.i = getelementptr inbounds %struct.tree_type* %type8.i, i64 0, i32 6
  %bf.load10.i = load i32* %precision9.i, align 4
  %bf.clear11.i = and i32 %bf.load10.i, 511
  %cmp12.i = icmp eq i32 %bf.clear7.i, %bf.clear11.i
  br i1 %cmp12.i, label %if.end34.i, label %if.else.i

if.else.i:                                        ; preds = %if.end.i
  %99 = load %union.tree_node** getelementptr inbounds ([32 x %union.tree_node*]* @c_global_trees, i64 0, i64 0), align 8, !tbaa !7
  %type22.i = bitcast %union.tree_node* %99 to %struct.tree_type*
  %precision23.i = getelementptr inbounds %struct.tree_type* %type22.i, i64 0, i32 6
  %bf.load24.i = load i32* %precision23.i, align 4
  %bf.clear25.i = and i32 %bf.load24.i, 511
  %cmp26.i = icmp eq i32 %bf.clear7.i, %bf.clear25.i
  br i1 %cmp26.i, label %if.then27.i, label %if.else32.i

if.then27.i:                                      ; preds = %if.else.i
  %div.i = lshr i32 %bf.clear7.i, 3
  br label %if.end34.i

if.else32.i:                                      ; preds = %if.else.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 6100, i8* getelementptr inbounds ([36 x i8]* @__FUNCTION__.set_nonincremental_init_from_string, i64 0, i64 0)) #7
  unreachable

if.end34.i:                                       ; preds = %if.then27.i, %if.end.i
  %wchar_bytes.0.i = phi i32 [ %div.i, %if.then27.i ], [ 1, %if.end.i ]
  %type40.i = getelementptr inbounds %union.tree_node* %95, i64 0, i32 0, i32 0, i32 1
  %100 = load %union.tree_node** %type40.i, align 8, !tbaa !1
  %pointer.i = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 4
  %101 = load %union.tree_node** %pointer.i, align 8
  %102 = bitcast %union.tree_node* %101 to i8*
  %103 = getelementptr inbounds %union.tree_node* %value.0, i64 0, i32 0, i32 2
  %104 = load i32* %103, align 4, !tbaa !55
  %idx.ext.i = sext i32 %104 to i64
  %add.ptr.i = getelementptr inbounds i8* %102, i64 %idx.ext.i
  %105 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !7
  %cmp42141.i = icmp ult i8* %102, %add.ptr.i
  br i1 %cmp42141.i, label %land.rhs.lr.ph.i, label %set_nonincremental_init_from_string.exit

land.rhs.lr.ph.i:                                 ; preds = %if.end34.i
  %cmp43.i = icmp eq i32 %wchar_bytes.0.i, 1
  %arrayidx.i = getelementptr inbounds [2 x i64]* %val.i, i64 0, i64 1
  %arrayidx45.i = getelementptr inbounds [2 x i64]* %val.i, i64 0, i64 0
  %unsigned_flag.i = getelementptr inbounds %union.tree_node* %100, i64 0, i32 0, i32 0, i32 2
  %sub.i = add i32 %wchar_bytes.0.i, -1
  %mul64.i = mul nsw i32 %sub.i, %bf.clear11.i
  %add.i = add nsw i32 %mul64.i, 8
  %cmp65.i = icmp slt i32 %add.i, 64
  %sub69.i = add nsw i32 %mul64.i, 7
  %sh_prom70.i = zext i32 %sub69.i to i64
  %shl71.i = shl i64 1, %sh_prom70.i
  %sh_prom74.i = zext i32 %add.i to i64
  %shl75.i = shl i64 -1, %sh_prom74.i
  %cmp81.i = icmp eq i32 %add.i, 64
  %sub93.i = add nsw i32 %mul64.i, -57
  %sh_prom94.i = zext i32 %sub93.i to i64
  %shl95.i = shl i64 1, %sh_prom94.i
  %sub99.i = add nsw i32 %mul64.i, -56
  %sh_prom100.i = zext i32 %sub99.i to i64
  %shl101.i = shl i64 -1, %sh_prom100.i
  %cmp50138.i = icmp eq i32 %wchar_bytes.0.i, 0
  br i1 %cmp43.i, label %land.rhs.us.i.preheader, label %land.rhs.lr.ph.land.rhs.lr.ph.split_crit_edge.i

land.rhs.us.i.preheader:                          ; preds = %land.rhs.lr.ph.i
  br i1 %cmp65.i, label %land.rhs.us.i, label %land.rhs.us.i.us

land.rhs.us.i.us:                                 ; preds = %land.rhs.us.i.preheader, %if.end107.us.i.us
  %purpose.0143.us.i.us = phi %union.tree_node* [ %call114.us.i.us, %if.end107.us.i.us ], [ %105, %land.rhs.us.i.preheader ]
  %p.0142.us.i.us = phi i8* [ %incdec.ptr.us.i.us, %if.end107.us.i.us ], [ %102, %land.rhs.us.i.preheader ]
  %106 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %call.us.i.us = tail call i32 @tree_int_cst_lt(%union.tree_node* %106, %union.tree_node* %purpose.0143.us.i.us) #6
  %lnot.us.i.us = icmp eq i32 %call.us.i.us, 0
  br i1 %lnot.us.i.us, label %if.end107.us.i.us, label %set_nonincremental_init_from_string.exit

if.end107.us.i.us:                                ; preds = %land.rhs.us.i.us
  %incdec.ptr.us.i.us = getelementptr inbounds i8* %p.0142.us.i.us, i64 1
  %107 = load i8* %p.0142.us.i.us, align 1, !tbaa !34
  %conv.us.i.us = zext i8 %107 to i64
  store i64 %conv.us.i.us, i64* %arrayidx.i, align 8, !tbaa !95
  store i64 0, i64* %arrayidx45.i, align 16, !tbaa !95
  %call110.us.i.us = tail call %union.tree_node* @build_int_2_wide(i64 %conv.us.i.us, i64 0) #6
  %type112.us.i.us = getelementptr inbounds %union.tree_node* %call110.us.i.us, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %100, %union.tree_node** %type112.us.i.us, align 8, !tbaa !1
  tail call fastcc void @add_pending_init(%union.tree_node* %purpose.0143.us.i.us, %union.tree_node* %call110.us.i.us) #6
  %108 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 8, !tbaa !7
  %call114.us.i.us = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %purpose.0143.us.i.us, %union.tree_node* %108) #6
  %cmp42.us.i.us = icmp ult i8* %incdec.ptr.us.i.us, %add.ptr.i
  br i1 %cmp42.us.i.us, label %land.rhs.us.i.us, label %set_nonincremental_init_from_string.exit

land.rhs.lr.ph.land.rhs.lr.ph.split_crit_edge.i:  ; preds = %land.rhs.lr.ph.i
  %109 = icmp ugt i32 %wchar_bytes.0.i, 1
  %110 = zext i32 %sub.i to i64
  %.op.i = add i64 %110, 1
  %111 = select i1 %109, i64 %.op.i, i64 1
  br label %land.rhs.i

land.rhs.us.i:                                    ; preds = %land.rhs.us.i.preheader, %if.end107.us.i
  %purpose.0143.us.i = phi %union.tree_node* [ %call114.us.i, %if.end107.us.i ], [ %105, %land.rhs.us.i.preheader ]
  %p.0142.us.i = phi i8* [ %incdec.ptr.us.i, %if.end107.us.i ], [ %102, %land.rhs.us.i.preheader ]
  %112 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %call.us.i = tail call i32 @tree_int_cst_lt(%union.tree_node* %112, %union.tree_node* %purpose.0143.us.i) #6
  %lnot.us.i = icmp eq i32 %call.us.i, 0
  br i1 %lnot.us.i, label %if.end58.us.i, label %set_nonincremental_init_from_string.exit

if.end58.us.i:                                    ; preds = %land.rhs.us.i
  %incdec.ptr.us.i = getelementptr inbounds i8* %p.0142.us.i, i64 1
  %113 = load i8* %p.0142.us.i, align 1, !tbaa !34
  %conv.us.i = zext i8 %113 to i64
  store i64 %conv.us.i, i64* %arrayidx.i, align 8, !tbaa !95
  store i64 0, i64* %arrayidx45.i, align 16, !tbaa !95
  %bf.load60.us.i = load i32* %unsigned_flag.i, align 8
  %bf.clear61.us.i = and i32 %bf.load60.us.i, 8192
  %tobool62.us.i.not = icmp ne i32 %bf.clear61.us.i, 0
  %and.us.i = and i64 %conv.us.i, %shl71.i
  %tobool72.us.i = icmp eq i64 %and.us.i, 0
  %or.cond339 = or i1 %tobool62.us.i.not, %tobool72.us.i
  br i1 %or.cond339, label %if.end107.us.i, label %if.then73.us.i

if.then73.us.i:                                   ; preds = %if.end58.us.i
  %or77.us.i = or i64 %conv.us.i, %shl75.i
  store i64 %or77.us.i, i64* %arrayidx.i, align 8, !tbaa !95
  store i64 -1, i64* %arrayidx45.i, align 16, !tbaa !95
  br label %if.end107.us.i

if.end107.us.i:                                   ; preds = %if.end58.us.i, %if.then73.us.i
  %114 = phi i64 [ -1, %if.then73.us.i ], [ 0, %if.end58.us.i ]
  %115 = phi i64 [ %or77.us.i, %if.then73.us.i ], [ %conv.us.i, %if.end58.us.i ]
  %call110.us.i = tail call %union.tree_node* @build_int_2_wide(i64 %115, i64 %114) #6
  %type112.us.i = getelementptr inbounds %union.tree_node* %call110.us.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %100, %union.tree_node** %type112.us.i, align 8, !tbaa !1
  tail call fastcc void @add_pending_init(%union.tree_node* %purpose.0143.us.i, %union.tree_node* %call110.us.i) #6
  %116 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 8, !tbaa !7
  %call114.us.i = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %purpose.0143.us.i, %union.tree_node* %116) #6
  %cmp42.us.i = icmp ult i8* %incdec.ptr.us.i, %add.ptr.i
  br i1 %cmp42.us.i, label %land.rhs.us.i, label %set_nonincremental_init_from_string.exit

land.rhs.i:                                       ; preds = %if.end107.i, %land.rhs.lr.ph.land.rhs.lr.ph.split_crit_edge.i
  %purpose.0143.i = phi %union.tree_node* [ %105, %land.rhs.lr.ph.land.rhs.lr.ph.split_crit_edge.i ], [ %call114.i, %if.end107.i ]
  %p.0142.i = phi i8* [ %102, %land.rhs.lr.ph.land.rhs.lr.ph.split_crit_edge.i ], [ %p.1.lcssa.i, %if.end107.i ]
  %117 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %call.i = tail call i32 @tree_int_cst_lt(%union.tree_node* %117, %union.tree_node* %purpose.0143.i) #6
  %lnot.i = icmp eq i32 %call.i, 0
  br i1 %lnot.i, label %if.else46.i, label %set_nonincremental_init_from_string.exit

if.else46.i:                                      ; preds = %land.rhs.i
  call void @llvm.memset.p0i8.i64(i8* %94, i8 0, i64 16, i32 16, i1 false) #6
  br i1 %cmp50138.i, label %if.end58.i, label %for.body52.i

for.body52.i:                                     ; preds = %if.else46.i, %for.body52.i
  %byte.0140.i = phi i32 [ %inc.i, %for.body52.i ], [ 0, %if.else46.i ]
  %p.1139.i = phi i8* [ %incdec.ptr53.i, %for.body52.i ], [ %p.0142.i, %if.else46.i ]
  %mul.i = mul nsw i32 %byte.0140.i, %bf.clear11.i
  %incdec.ptr53.i = getelementptr inbounds i8* %p.1139.i, i64 1
  %118 = load i8* %p.1139.i, align 1, !tbaa !34
  %conv54.i = zext i8 %118 to i64
  %rem.i = srem i32 %mul.i, 64
  %sh_prom.i = zext i32 %rem.i to i64
  %shl.i = shl i64 %conv54.i, %sh_prom.i
  %cmp55.i = icmp slt i32 %mul.i, 64
  %idxprom.i = zext i1 %cmp55.i to i64
  %arrayidx57.i = getelementptr inbounds [2 x i64]* %val.i, i64 0, i64 %idxprom.i
  %119 = load i64* %arrayidx57.i, align 8, !tbaa !95
  %or.i = or i64 %shl.i, %119
  store i64 %or.i, i64* %arrayidx57.i, align 8, !tbaa !95
  %inc.i = add nsw i32 %byte.0140.i, 1
  %cmp50.i = icmp slt i32 %inc.i, %wchar_bytes.0.i
  br i1 %cmp50.i, label %for.body52.i, label %for.cond49.if.end58.loopexit_crit_edge.i

for.cond49.if.end58.loopexit_crit_edge.i:         ; preds = %for.body52.i
  %scevgep.i = getelementptr i8* %p.0142.i, i64 %111
  br label %if.end58.i

if.end58.i:                                       ; preds = %for.cond49.if.end58.loopexit_crit_edge.i, %if.else46.i
  %p.1.lcssa.i = phi i8* [ %scevgep.i, %for.cond49.if.end58.loopexit_crit_edge.i ], [ %p.0142.i, %if.else46.i ]
  %bf.load60.i = load i32* %unsigned_flag.i, align 8
  %bf.clear61.i = and i32 %bf.load60.i, 8192
  %tobool62.i = icmp eq i32 %bf.clear61.i, 0
  br i1 %tobool62.i, label %if.then63.i, label %if.end107.i

if.then63.i:                                      ; preds = %if.end58.i
  br i1 %cmp65.i, label %if.then67.i, label %if.else80.i

if.then67.i:                                      ; preds = %if.then63.i
  %120 = load i64* %arrayidx.i, align 8, !tbaa !95
  %and.i = and i64 %120, %shl71.i
  %tobool72.i = icmp eq i64 %and.i, 0
  br i1 %tobool72.i, label %if.end107.i, label %if.then73.i

if.then73.i:                                      ; preds = %if.then67.i
  %or77.i = or i64 %120, %shl75.i
  store i64 %or77.i, i64* %arrayidx.i, align 8, !tbaa !95
  store i64 -1, i64* %arrayidx45.i, align 16, !tbaa !95
  br label %if.end107.i

if.else80.i:                                      ; preds = %if.then63.i
  br i1 %cmp81.i, label %if.then83.i, label %if.else90.i

if.then83.i:                                      ; preds = %if.else80.i
  %121 = load i64* %arrayidx.i, align 8, !tbaa !95
  %cmp85.i = icmp slt i64 %121, 0
  br i1 %cmp85.i, label %if.then87.i, label %if.end107.i

if.then87.i:                                      ; preds = %if.then83.i
  store i64 -1, i64* %arrayidx45.i, align 16, !tbaa !95
  br label %if.end107.i

if.else90.i:                                      ; preds = %if.else80.i
  %122 = load i64* %arrayidx45.i, align 16, !tbaa !95
  %and96.i = and i64 %122, %shl95.i
  %tobool97.i = icmp eq i64 %and96.i, 0
  br i1 %tobool97.i, label %if.end107.i, label %if.then98.i

if.then98.i:                                      ; preds = %if.else90.i
  %or103.i = or i64 %122, %shl101.i
  store i64 %or103.i, i64* %arrayidx45.i, align 16, !tbaa !95
  br label %if.end107.i

if.end107.i:                                      ; preds = %if.then98.i, %if.else90.i, %if.then87.i, %if.then83.i, %if.then73.i, %if.then67.i, %if.end58.i
  %123 = load i64* %arrayidx.i, align 8, !tbaa !95
  %124 = load i64* %arrayidx45.i, align 16, !tbaa !95
  %call110.i = tail call %union.tree_node* @build_int_2_wide(i64 %123, i64 %124) #6
  %type112.i = getelementptr inbounds %union.tree_node* %call110.i, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %100, %union.tree_node** %type112.i, align 8, !tbaa !1
  tail call fastcc void @add_pending_init(%union.tree_node* %purpose.0143.i, %union.tree_node* %call110.i) #6
  %125 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 8, !tbaa !7
  %call114.i = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %purpose.0143.i, %union.tree_node* %125) #6
  %cmp42.i = icmp ult i8* %p.1.lcssa.i, %add.ptr.i
  br i1 %cmp42.i, label %land.rhs.i, label %set_nonincremental_init_from_string.exit

set_nonincremental_init_from_string.exit:         ; preds = %land.rhs.i, %if.end107.i, %if.end107.us.i.us, %land.rhs.us.i.us, %land.rhs.us.i, %if.end107.us.i, %if.end34.i
  store i32 0, i32* @constructor_incremental, align 4, !tbaa !27
  call void @llvm.lifetime.end(i64 16, i8* %94) #6
  br label %if.end265

if.else262:                                       ; preds = %if.end146
  tail call fastcc void @warning_init(i8* getelementptr inbounds ([33 x i8]* @.str115, i64 0, i64 0))
  %126 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  store %union.tree_node* %126, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  store %union.tree_node* %126, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  br label %if.end265

if.end265:                                        ; preds = %cond.end, %if.end251, %land.lhs.true253, %set_nonincremental_init_from_string.exit, %if.else262, %if.then103, %while.end176
  ret void
}

; Function Attrs: nounwind uwtable
define void @process_init_element(%union.tree_node* %value) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %value, null
  br i1 %cmp, label %land.end.thread, label %land.end

land.end.thread:                                  ; preds = %entry
  store i32 0, i32* @designator_depth, align 4, !tbaa !27
  store i1 false, i1* @designator_errorneous, align 1
  br label %if.end21

land.end:                                         ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp1 = icmp eq i32 %bf.clear, 29
  store i32 0, i32* @designator_depth, align 4, !tbaa !27
  store i1 false, i1* @designator_errorneous, align 1
  %0 = load %union.tree_node** @constructor_type, align 8
  %tobool2 = icmp ne %union.tree_node* %0, null
  %or.cond = and i1 %cmp1, %tobool2
  br i1 %or.cond, label %land.lhs.true3, label %if.end21

land.lhs.true3:                                   ; preds = %land.end
  %code5 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load6 = load i32* %code5, align 8
  %bf.clear7 = and i32 %bf.load6, 255
  %cmp8 = icmp eq i32 %bf.clear7, 18
  br i1 %cmp8, label %land.lhs.true9, label %if.end21

land.lhs.true9:                                   ; preds = %land.lhs.true3
  %type = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !1
  %code12 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load13 = load i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 6
  br i1 %cmp15, label %land.lhs.true16, label %if.end21

land.lhs.true16:                                  ; preds = %land.lhs.true9
  %2 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %call = tail call i32 @integer_zerop(%union.tree_node* %2) #6
  %tobool17 = icmp eq i32 %call, 0
  br i1 %tobool17, label %if.end21, label %if.then

if.then:                                          ; preds = %land.lhs.true16
  %3 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %replacement_value = getelementptr inbounds %struct.constructor_stack* %3, i64 0, i32 12
  %4 = load %union.tree_node** %replacement_value, align 8, !tbaa !93
  %tobool18 = icmp eq %union.tree_node* %4, null
  br i1 %tobool18, label %if.end, label %if.then19

if.then19:                                        ; preds = %if.then
  tail call void @error_init(i8* getelementptr inbounds ([42 x i8]* @.str128, i64 0, i64 0))
  %.pre668 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  br label %if.end

if.end:                                           ; preds = %if.then, %if.then19
  %5 = phi %struct.constructor_stack* [ %3, %if.then ], [ %.pre668, %if.then19 ]
  %replacement_value20 = getelementptr inbounds %struct.constructor_stack* %5, i64 0, i32 12
  store %union.tree_node* %value, %union.tree_node** %replacement_value20, align 8, !tbaa !93
  br label %return

if.end21:                                         ; preds = %land.end.thread, %land.lhs.true16, %land.lhs.true9, %land.lhs.true3, %land.end
  %6 = phi i1 [ false, %land.end.thread ], [ true, %land.lhs.true16 ], [ true, %land.lhs.true9 ], [ true, %land.lhs.true3 ], [ %cmp1, %land.end ]
  %7 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %replacement_value22 = getelementptr inbounds %struct.constructor_stack* %7, i64 0, i32 12
  %8 = load %union.tree_node** %replacement_value22, align 8, !tbaa !93
  %cmp23 = icmp eq %union.tree_node* %8, null
  br i1 %cmp23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %if.end21
  tail call void @error_init(i8* getelementptr inbounds ([38 x i8]* @.str129, i64 0, i64 0))
  br label %return

if.end25:                                         ; preds = %if.end21
  %9 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %cmp26 = icmp eq %union.tree_node* %9, null
  br i1 %cmp26, label %return, label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.end25
  %implicit653 = getelementptr inbounds %struct.constructor_stack* %7, i64 0, i32 16
  %10 = load i8* %implicit653, align 1, !tbaa !89
  %tobool29654 = icmp eq i8 %10, 0
  br i1 %tobool29654, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.cond.backedge.while.body_crit_edge
  %11 = phi %union.tree_node* [ %.pre667, %while.cond.backedge.while.body_crit_edge ], [ %9, %while.cond.preheader ]
  %code31 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 2
  %bf.load32 = load i32* %code31, align 8
  %bf.clear33 = and i32 %bf.load32, 255
  %cmp34 = icmp eq i32 %bf.clear33, 20
  br i1 %cmp34, label %land.lhs.true40, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %cmp39 = icmp eq i32 %bf.clear33, 21
  %12 = load %union.tree_node** @constructor_fields, align 8
  %cmp41 = icmp eq %union.tree_node* %12, null
  %or.cond450 = and i1 %cmp39, %cmp41
  br i1 %or.cond450, label %if.then42, label %if.else

land.lhs.true40:                                  ; preds = %while.body
  %.old = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp41.old = icmp eq %union.tree_node* %.old, null
  br i1 %cmp41.old, label %if.then42, label %while.end

if.then42:                                        ; preds = %lor.lhs.false, %land.lhs.true40
  %call43 = tail call %union.tree_node* @pop_init_level(i32 1)
  tail call void @process_init_element(%union.tree_node* %call43)
  br label %while.cond.backedge

if.else:                                          ; preds = %lor.lhs.false
  %cmp48 = icmp eq i32 %bf.clear33, 18
  br i1 %cmp48, label %land.lhs.true49, label %while.end

land.lhs.true49:                                  ; preds = %if.else
  %13 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %cmp50 = icmp eq %union.tree_node* %13, null
  br i1 %cmp50, label %if.then54, label %lor.lhs.false51

lor.lhs.false51:                                  ; preds = %land.lhs.true49
  %14 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %call52 = tail call i32 @tree_int_cst_lt(%union.tree_node* %13, %union.tree_node* %14) #6
  %tobool53 = icmp eq i32 %call52, 0
  br i1 %tobool53, label %while.end, label %if.then54

if.then54:                                        ; preds = %lor.lhs.false51, %land.lhs.true49
  %call55 = tail call %union.tree_node* @pop_init_level(i32 1)
  tail call void @process_init_element(%union.tree_node* %call55)
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then54, %if.then42
  %15 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %implicit = getelementptr inbounds %struct.constructor_stack* %15, i64 0, i32 16
  %16 = load i8* %implicit, align 1, !tbaa !89
  %tobool29 = icmp eq i8 %16, 0
  br i1 %tobool29, label %while.end, label %while.cond.backedge.while.body_crit_edge

while.cond.backedge.while.body_crit_edge:         ; preds = %while.cond.backedge
  %.pre667 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  br label %while.body

while.end:                                        ; preds = %land.lhs.true40, %if.else, %while.cond.backedge, %lor.lhs.false51, %while.cond.preheader
  %17 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %tobool59 = icmp eq %struct.constructor_range_stack* %17, null
  br i1 %tobool59, label %while.body75.outer, label %if.then60

if.then60:                                        ; preds = %while.end
  %code62 = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 0, i32 2
  %bf.load63 = load i32* %code62, align 8
  %bf.clear64 = and i32 %bf.load63, 255
  %18 = load i32* @require_constant_value, align 4
  %notlhs = icmp ne i32 %bf.clear64, 170
  %notrhs = icmp eq i32 %18, 0
  %or.cond452.not = or i1 %notrhs, %notlhs
  %19 = load i32* @flag_isoc99, align 4
  %tobool69 = icmp ne i32 %19, 0
  %or.cond454 = or i1 %or.cond452.not, %tobool69
  br i1 %or.cond454, label %if.then70, label %while.body75.outer

if.then70:                                        ; preds = %if.then60
  %call71 = tail call %union.tree_node* @save_expr(%union.tree_node* %value) #6
  br label %while.body75.outer

while.body75.outer:                               ; preds = %if.then446, %while.end444, %while.end, %if.then60, %if.then70
  %value.addr.0.ph640 = phi %union.tree_node* [ %value, %while.end ], [ %value, %if.then60 ], [ %call71, %if.then70 ], [ %value.addr.4, %while.end444 ], [ %value.addr.4, %if.then446 ]
  %cmp106 = icmp ne %union.tree_node* %value.addr.0.ph640, null
  %cmp121 = icmp eq %union.tree_node* %value.addr.0.ph640, null
  %type128 = getelementptr inbounds %union.tree_node* %value.addr.0.ph640, i64 0, i32 0, i32 0, i32 1
  br label %while.body75

while.body75:                                     ; preds = %if.then138, %if.then263, %if.then323, %while.body75.outer
  %20 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code77 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 2
  %bf.load78 = load i32* %code77, align 8
  %bf.clear79 = and i32 %bf.load78, 255
  switch i32 %bf.clear79, label %if.else369 [
    i32 20, label %if.then81
    i32 21, label %if.then199
    i32 18, label %if.then282
    i32 9, label %if.then352
  ]

if.then81:                                        ; preds = %while.body75
  %21 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp82 = icmp eq %union.tree_node* %21, null
  br i1 %cmp82, label %if.then83, label %if.end84

if.then83:                                        ; preds = %if.then81
  tail call void @pedwarn_init(i8* getelementptr inbounds ([38 x i8]* @.str129, i64 0, i64 0))
  br label %while.end449

if.end84:                                         ; preds = %if.then81
  %type86 = getelementptr inbounds %union.tree_node* %21, i64 0, i32 0, i32 0, i32 1
  %22 = load %union.tree_node** %type86, align 8, !tbaa !1
  %23 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp87 = icmp eq %union.tree_node* %22, %23
  br i1 %cmp87, label %if.end90, label %if.then88

if.then88:                                        ; preds = %if.end84
  %24 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 15
  %25 = load %union.tree_node** %24, align 8, !tbaa !24
  br label %if.end90

if.end90:                                         ; preds = %if.end84, %if.then88
  %fieldtype.0 = phi %union.tree_node* [ %25, %if.then88 ], [ %22, %if.end84 ]
  %code92 = getelementptr inbounds %union.tree_node* %fieldtype.0, i64 0, i32 0, i32 0, i32 2
  %bf.load93 = load i32* %code92, align 8
  %bf.clear94 = and i32 %bf.load93, 255
  %cmp95 = icmp ne i32 %bf.clear94, 18
  %26 = load i32* @require_constant_value, align 4
  %tobool97 = icmp ne i32 %26, 0
  %or.cond456 = or i1 %cmp95, %tobool97
  br i1 %or.cond456, label %if.end105, label %land.lhs.true98

land.lhs.true98:                                  ; preds = %if.end90
  %size = getelementptr inbounds %union.tree_node* %fieldtype.0, i64 0, i32 0, i32 2
  %27 = bitcast i32* %size to %union.tree_node**
  %28 = load %union.tree_node** %27, align 8, !tbaa !8
  %cmp100 = icmp eq %union.tree_node* %28, null
  br i1 %cmp100, label %land.lhs.true101, label %if.end105

land.lhs.true101:                                 ; preds = %land.lhs.true98
  %chain = getelementptr inbounds %union.tree_node* %21, i64 0, i32 0, i32 0, i32 0
  %29 = load %union.tree_node** %chain, align 8, !tbaa !28
  %cmp103 = icmp eq %union.tree_node* %29, null
  br i1 %cmp103, label %if.then104, label %if.end105

if.then104:                                       ; preds = %land.lhs.true101
  tail call void @error_init(i8* getelementptr inbounds ([53 x i8]* @.str130, i64 0, i64 0))
  br label %while.end449

if.end105:                                        ; preds = %if.end90, %land.lhs.true101, %land.lhs.true98
  %cmp108 = icmp eq i32 %bf.clear94, 18
  %or.cond458 = and i1 %cmp106, %cmp108
  br i1 %or.cond458, label %land.lhs.true109, label %if.else120

land.lhs.true109:                                 ; preds = %if.end105
  %type111 = getelementptr inbounds %union.tree_node* %fieldtype.0, i64 0, i32 0, i32 0, i32 1
  %30 = load %union.tree_node** %type111, align 8, !tbaa !1
  %code113 = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 0, i32 2
  %bf.load114 = load i32* %code113, align 8
  %bf.clear115 = and i32 %bf.load114, 255
  %cmp116 = icmp eq i32 %bf.clear115, 6
  %or.cond460 = and i1 %cmp116, %6
  br i1 %or.cond460, label %if.end140, label %if.else120

if.else120:                                       ; preds = %land.lhs.true109, %if.end105
  %31 = load i32* @constructor_no_implicit, align 4
  %tobool123 = icmp ne i32 %31, 0
  %or.cond462 = or i1 %cmp121, %tobool123
  %cmp125 = icmp eq %union.tree_node* %value.addr.0.ph640, %23
  %or.cond582 = or i1 %or.cond462, %cmp125
  br i1 %or.cond582, label %if.end140, label %land.lhs.true126

land.lhs.true126:                                 ; preds = %if.else120
  %32 = load %union.tree_node** %type128, align 8, !tbaa !1
  %33 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 15
  %34 = load %union.tree_node** %33, align 8, !tbaa !24
  %cmp131 = icmp eq %union.tree_node* %34, %fieldtype.0
  br i1 %cmp131, label %if.then142, label %land.lhs.true132

land.lhs.true132:                                 ; preds = %land.lhs.true126
  switch i32 %bf.clear94, label %if.end140 [
    i32 21, label %if.then138
    i32 20, label %if.then138
    i32 18, label %if.then138
  ]

if.then138:                                       ; preds = %land.lhs.true132, %land.lhs.true132, %land.lhs.true132
  tail call void @push_init_level(i32 1)
  br label %while.body75

if.end140:                                        ; preds = %land.lhs.true132, %land.lhs.true109, %if.else120
  %value.addr.1 = phi %union.tree_node* [ %value.addr.0.ph640, %if.else120 ], [ %value.addr.0.ph640, %land.lhs.true132 ], [ %value, %land.lhs.true109 ]
  %tobool141 = icmp eq %union.tree_node* %value.addr.1, null
  br i1 %tobool141, label %if.else143, label %if.then142

if.then142:                                       ; preds = %land.lhs.true126, %if.end140
  %value.addr.1671 = phi %union.tree_node* [ %value.addr.1, %if.end140 ], [ %value.addr.0.ph640, %land.lhs.true126 ]
  %.idx587 = getelementptr %union.tree_node* %21, i64 0, i32 0, i32 8
  %.idx587.val = load %union.tree_node** %.idx587, align 8, !tbaa !11
  %tobool.i = icmp eq %union.tree_node* %.idx587.val, null
  br i1 %tobool.i, label %cond.end.i, label %cond.true.i

cond.true.i:                                      ; preds = %if.then142
  %id.i = getelementptr inbounds %union.tree_node* %.idx587.val, i64 0, i32 0, i32 1
  %35 = getelementptr inbounds i8** %id.i, i64 1
  %36 = load i8** %35, align 8, !tbaa !13
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %if.then142
  %cond.i = phi i8* [ %36, %cond.true.i ], [ getelementptr inbounds ([12 x i8]* @.str154, i64 0, i64 0), %if.then142 ]
  %37 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %38 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sub.ptr.lhs.cast.i = ptrtoint %struct.spelling* %37 to i64
  %sub.ptr.rhs.cast.i = ptrtoint %struct.spelling* %38 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div15.i = lshr exact i64 %sub.ptr.sub.i, 4
  %conv.i = trunc i64 %sub.ptr.div15.i to i32
  %39 = load i32* @spelling_size, align 4, !tbaa !27
  %cmp.i = icmp slt i32 %conv.i, %39
  br i1 %cmp.i, label %push_member_name.exit, label %if.then.i

if.then.i:                                        ; preds = %cond.end.i
  %add.i = add nsw i32 %39, 10
  store i32 %add.i, i32* @spelling_size, align 4, !tbaa !27
  %cmp5.i = icmp eq %struct.spelling* %38, null
  br i1 %cmp5.i, label %if.then7.i, label %if.else.i

if.then7.i:                                       ; preds = %if.then.i
  %conv8.i = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv8.i, 4
  %call.i = tail call noalias i8* @xmalloc(i64 %mul.i) #6
  br label %if.end.i

if.else.i:                                        ; preds = %if.then.i
  %40 = bitcast %struct.spelling* %38 to i8*
  %conv9.i = sext i32 %add.i to i64
  %mul10.i = shl nsw i64 %conv9.i, 4
  %call11.i = tail call i8* @xrealloc(i8* %40, i64 %mul10.i) #6
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %if.then7.i
  %storemerge.in.i = phi i8* [ %call11.i, %if.else.i ], [ %call.i, %if.then7.i ]
  %storemerge.i = bitcast i8* %storemerge.in.i to %struct.spelling*
  store %struct.spelling* %storemerge.i, %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sext.i = shl i64 %sub.ptr.sub.i, 28
  %idx.ext.i = ashr exact i64 %sext.i, 32
  %add.ptr.i = getelementptr inbounds %struct.spelling* %storemerge.i, i64 %idx.ext.i
  store %struct.spelling* %add.ptr.i, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %push_member_name.exit

push_member_name.exit:                            ; preds = %cond.end.i, %if.end.i
  %41 = phi %struct.spelling* [ %37, %cond.end.i ], [ %add.ptr.i, %if.end.i ]
  %kind.i = getelementptr inbounds %struct.spelling* %41, i64 0, i32 0
  store i32 2, i32* %kind.i, align 4, !tbaa !58
  %s.i = getelementptr inbounds %struct.spelling* %41, i64 0, i32 1, i32 0
  store i8* %cond.i, i8** %s.i, align 8, !tbaa !7
  %42 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %incdec.ptr.i = getelementptr inbounds %struct.spelling* %42, i64 1
  store %struct.spelling* %incdec.ptr.i, %struct.spelling** @spelling, align 8, !tbaa !7
  %43 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  tail call fastcc void @output_init_element(%union.tree_node* %value.addr.1671, %union.tree_node* %fieldtype.0, %union.tree_node* %43, i32 1)
  %44 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %45 = load i32* @constructor_depth, align 4, !tbaa !27
  %idx.ext = sext i32 %45 to i64
  %add.ptr = getelementptr inbounds %struct.spelling* %44, i64 %idx.ext
  store %struct.spelling* %add.ptr, %struct.spelling** @spelling, align 8, !tbaa !7
  %.pre666 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  br label %if.end170

if.else143:                                       ; preds = %if.end140
  %size144 = getelementptr inbounds %union.tree_node* %21, i64 0, i32 0, i32 4
  %46 = load %union.tree_node** %size144, align 8, !tbaa !37
  %tobool145 = icmp eq %union.tree_node* %46, null
  br i1 %tobool145, label %if.end151, label %if.then146

if.then146:                                       ; preds = %if.else143
  %call147 = tail call %union.tree_node* @bit_position(%union.tree_node* %21) #6
  %47 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %size149 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 4
  %48 = load %union.tree_node** %size149, align 8, !tbaa !37
  %call150 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call147, %union.tree_node* %48) #6
  store %union.tree_node* %call150, %union.tree_node** @constructor_bit_index, align 8, !tbaa !7
  %.pre = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  br label %if.end151

if.end151:                                        ; preds = %if.else143, %if.then146
  %49 = phi %union.tree_node* [ %21, %if.else143 ], [ %.pre, %if.then146 ]
  br label %while.cond154

while.cond154:                                    ; preds = %land.rhs161, %if.end151
  %.pn580 = phi %union.tree_node* [ %49, %if.end151 ], [ %storemerge, %land.rhs161 ]
  %storemerge.in = getelementptr inbounds %union.tree_node* %.pn580, i64 0, i32 0, i32 0, i32 0
  %storemerge = load %union.tree_node** %storemerge.in, align 8
  store %union.tree_node* %storemerge, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %cmp155 = icmp eq %union.tree_node* %storemerge, null
  br i1 %cmp155, label %if.end170, label %land.lhs.true156

land.lhs.true156:                                 ; preds = %while.cond154
  %lang_flag_4 = getelementptr inbounds %union.tree_node* %storemerge, i64 0, i32 0, i32 5
  %50 = bitcast i48* %lang_flag_4 to i64*
  %bf.load158 = load i64* %50, align 8
  %bf.cast = and i64 %bf.load158, 2199023255552
  %cmp160 = icmp eq i64 %bf.cast, 0
  br i1 %cmp160, label %if.end170, label %land.rhs161

land.rhs161:                                      ; preds = %land.lhs.true156
  %name = getelementptr inbounds %union.tree_node* %storemerge, i64 0, i32 0, i32 8
  %51 = load %union.tree_node** %name, align 8, !tbaa !11
  %cmp163 = icmp eq %union.tree_node* %51, null
  br i1 %cmp163, label %while.cond154, label %if.end170

if.end170:                                        ; preds = %land.lhs.true156, %while.cond154, %land.rhs161, %push_member_name.exit
  %value.addr.1672 = phi %union.tree_node* [ %value.addr.1671, %push_member_name.exit ], [ %value.addr.1, %land.rhs161 ], [ %value.addr.1, %while.cond154 ], [ %value.addr.1, %land.lhs.true156 ]
  %52 = phi %union.tree_node* [ %.pre666, %push_member_name.exit ], [ %49, %land.rhs161 ], [ %49, %while.cond154 ], [ %49, %land.lhs.true156 ]
  br label %while.cond173

while.cond173:                                    ; preds = %land.rhs183, %if.end170
  %.pn = phi %union.tree_node* [ %52, %if.end170 ], [ %storemerge579, %land.rhs183 ]
  %storemerge579.in = getelementptr inbounds %union.tree_node* %.pn, i64 0, i32 0, i32 0, i32 0
  %storemerge579 = load %union.tree_node** %storemerge579.in, align 8
  store %union.tree_node* %storemerge579, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp174 = icmp eq %union.tree_node* %storemerge579, null
  br i1 %cmp174, label %if.end381, label %land.lhs.true175

land.lhs.true175:                                 ; preds = %while.cond173
  %lang_flag_4177 = getelementptr inbounds %union.tree_node* %storemerge579, i64 0, i32 0, i32 5
  %53 = bitcast i48* %lang_flag_4177 to i64*
  %bf.load178 = load i64* %53, align 8
  %bf.cast181 = and i64 %bf.load178, 2199023255552
  %cmp182 = icmp eq i64 %bf.cast181, 0
  br i1 %cmp182, label %if.end381, label %land.rhs183

land.rhs183:                                      ; preds = %land.lhs.true175
  %name185 = getelementptr inbounds %union.tree_node* %storemerge579, i64 0, i32 0, i32 8
  %54 = load %union.tree_node** %name185, align 8, !tbaa !11
  %cmp186 = icmp eq %union.tree_node* %54, null
  br i1 %cmp186, label %while.cond173, label %if.end381

if.then199:                                       ; preds = %while.body75
  %55 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp202 = icmp eq %union.tree_node* %55, null
  br i1 %cmp202, label %if.then203, label %if.end204

if.then203:                                       ; preds = %if.then199
  tail call void @pedwarn_init(i8* getelementptr inbounds ([37 x i8]* @.str131, i64 0, i64 0))
  br label %while.end449

if.end204:                                        ; preds = %if.then199
  %type206 = getelementptr inbounds %union.tree_node* %55, i64 0, i32 0, i32 0, i32 1
  %56 = load %union.tree_node** %type206, align 8, !tbaa !1
  %57 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp207 = icmp eq %union.tree_node* %56, %57
  br i1 %cmp207, label %if.end211, label %if.then208

if.then208:                                       ; preds = %if.end204
  %58 = getelementptr inbounds %union.tree_node* %56, i64 0, i32 0, i32 15
  %59 = load %union.tree_node** %58, align 8, !tbaa !24
  br label %if.end211

if.end211:                                        ; preds = %if.end204, %if.then208
  %fieldtype200.0 = phi %union.tree_node* [ %59, %if.then208 ], [ %56, %if.end204 ]
  %code213 = getelementptr inbounds %union.tree_node* %fieldtype200.0, i64 0, i32 0, i32 0, i32 2
  %bf.load214 = load i32* %code213, align 8
  %bf.clear215 = and i32 %bf.load214, 255
  %60 = load i32* @warn_traditional, align 4, !tbaa !27
  %tobool216 = icmp eq i32 %60, 0
  %61 = load i32* @in_system_header, align 4
  %tobool218 = icmp ne i32 %61, 0
  %or.cond470 = or i1 %tobool216, %tobool218
  %62 = load i32* @constructor_designated, align 4
  %tobool220 = icmp ne i32 %62, 0
  %or.cond472 = or i1 %or.cond470, %tobool220
  br i1 %or.cond472, label %if.end230, label %land.lhs.true221

land.lhs.true221:                                 ; preds = %if.end211
  br i1 %cmp121, label %if.then229, label %land.lhs.true223

land.lhs.true223:                                 ; preds = %land.lhs.true221
  %call224 = tail call i32 @integer_zerop(%union.tree_node* %value.addr.0.ph640) #6
  %tobool225 = icmp eq i32 %call224, 0
  br i1 %tobool225, label %lor.lhs.false226, label %if.end230

lor.lhs.false226:                                 ; preds = %land.lhs.true223
  %call227 = tail call i32 @real_zerop(%union.tree_node* %value.addr.0.ph640) #6
  %tobool228 = icmp eq i32 %call227, 0
  br i1 %tobool228, label %if.then229, label %if.end230

if.then229:                                       ; preds = %lor.lhs.false226, %land.lhs.true221
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([47 x i8]* @.str132, i64 0, i64 0)) #6
  br label %if.end230

if.end230:                                        ; preds = %lor.lhs.false226, %land.lhs.true223, %if.end211, %if.then229
  %cmp233 = icmp eq i32 %bf.clear215, 18
  %or.cond474 = and i1 %cmp106, %cmp233
  br i1 %or.cond474, label %land.lhs.true234, label %if.else245

land.lhs.true234:                                 ; preds = %if.end230
  %type236 = getelementptr inbounds %union.tree_node* %fieldtype200.0, i64 0, i32 0, i32 0, i32 1
  %63 = load %union.tree_node** %type236, align 8, !tbaa !1
  %code238 = getelementptr inbounds %union.tree_node* %63, i64 0, i32 0, i32 0, i32 2
  %bf.load239 = load i32* %code238, align 8
  %bf.clear240 = and i32 %bf.load239, 255
  %cmp241 = icmp eq i32 %bf.clear240, 6
  %or.cond476 = and i1 %cmp241, %6
  br i1 %or.cond476, label %if.end265, label %if.else245

if.else245:                                       ; preds = %land.lhs.true234, %if.end230
  %64 = load i32* @constructor_no_implicit, align 4
  %tobool248 = icmp ne i32 %64, 0
  %or.cond478 = or i1 %cmp121, %tobool248
  %65 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp250 = icmp eq %union.tree_node* %value.addr.0.ph640, %65
  %or.cond584 = or i1 %or.cond478, %cmp250
  br i1 %or.cond584, label %if.end265, label %land.lhs.true251

land.lhs.true251:                                 ; preds = %if.else245
  %66 = load %union.tree_node** %type128, align 8, !tbaa !1
  %67 = getelementptr inbounds %union.tree_node* %66, i64 0, i32 0, i32 15
  %68 = load %union.tree_node** %67, align 8, !tbaa !24
  %cmp256 = icmp eq %union.tree_node* %68, %fieldtype200.0
  br i1 %cmp256, label %if.end265, label %land.lhs.true257

land.lhs.true257:                                 ; preds = %land.lhs.true251
  switch i32 %bf.clear215, label %if.end265 [
    i32 21, label %if.then263
    i32 20, label %if.then263
    i32 18, label %if.then263
  ]

if.then263:                                       ; preds = %land.lhs.true257, %land.lhs.true257, %land.lhs.true257
  tail call void @push_init_level(i32 1)
  br label %while.body75

if.end265:                                        ; preds = %land.lhs.true257, %land.lhs.true234, %land.lhs.true251, %if.else245
  %value.addr.2 = phi %union.tree_node* [ %value.addr.0.ph640, %if.else245 ], [ %value.addr.0.ph640, %land.lhs.true257 ], [ %value.addr.0.ph640, %land.lhs.true251 ], [ %value, %land.lhs.true234 ]
  %tobool266 = icmp eq %union.tree_node* %value.addr.2, null
  %69 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  br i1 %tobool266, label %if.else270, label %if.then267

if.then267:                                       ; preds = %if.end265
  %.idx = getelementptr %union.tree_node* %69, i64 0, i32 0, i32 8
  %.idx.val = load %union.tree_node** %.idx, align 8, !tbaa !11
  %tobool.i588 = icmp eq %union.tree_node* %.idx.val, null
  br i1 %tobool.i588, label %cond.end.i598, label %cond.true.i590

cond.true.i590:                                   ; preds = %if.then267
  %id.i589 = getelementptr inbounds %union.tree_node* %.idx.val, i64 0, i32 0, i32 1
  %70 = getelementptr inbounds i8** %id.i589, i64 1
  %71 = load i8** %70, align 8, !tbaa !13
  br label %cond.end.i598

cond.end.i598:                                    ; preds = %cond.true.i590, %if.then267
  %cond.i591 = phi i8* [ %71, %cond.true.i590 ], [ getelementptr inbounds ([12 x i8]* @.str154, i64 0, i64 0), %if.then267 ]
  %72 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %73 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sub.ptr.lhs.cast.i592 = ptrtoint %struct.spelling* %72 to i64
  %sub.ptr.rhs.cast.i593 = ptrtoint %struct.spelling* %73 to i64
  %sub.ptr.sub.i594 = sub i64 %sub.ptr.lhs.cast.i592, %sub.ptr.rhs.cast.i593
  %sub.ptr.div15.i595 = lshr exact i64 %sub.ptr.sub.i594, 4
  %conv.i596 = trunc i64 %sub.ptr.div15.i595 to i32
  %74 = load i32* @spelling_size, align 4, !tbaa !27
  %cmp.i597 = icmp slt i32 %conv.i596, %74
  br i1 %cmp.i597, label %push_member_name.exit619, label %if.then.i601

if.then.i601:                                     ; preds = %cond.end.i598
  %add.i599 = add nsw i32 %74, 10
  store i32 %add.i599, i32* @spelling_size, align 4, !tbaa !27
  %cmp5.i600 = icmp eq %struct.spelling* %73, null
  br i1 %cmp5.i600, label %if.then7.i605, label %if.else.i609

if.then7.i605:                                    ; preds = %if.then.i601
  %conv8.i602 = sext i32 %add.i599 to i64
  %mul.i603 = shl nsw i64 %conv8.i602, 4
  %call.i604 = tail call noalias i8* @xmalloc(i64 %mul.i603) #6
  br label %if.end.i615

if.else.i609:                                     ; preds = %if.then.i601
  %75 = bitcast %struct.spelling* %73 to i8*
  %conv9.i606 = sext i32 %add.i599 to i64
  %mul10.i607 = shl nsw i64 %conv9.i606, 4
  %call11.i608 = tail call i8* @xrealloc(i8* %75, i64 %mul10.i607) #6
  br label %if.end.i615

if.end.i615:                                      ; preds = %if.else.i609, %if.then7.i605
  %storemerge.in.i610 = phi i8* [ %call11.i608, %if.else.i609 ], [ %call.i604, %if.then7.i605 ]
  %storemerge.i611 = bitcast i8* %storemerge.in.i610 to %struct.spelling*
  store %struct.spelling* %storemerge.i611, %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sext.i612 = shl i64 %sub.ptr.sub.i594, 28
  %idx.ext.i613 = ashr exact i64 %sext.i612, 32
  %add.ptr.i614 = getelementptr inbounds %struct.spelling* %storemerge.i611, i64 %idx.ext.i613
  store %struct.spelling* %add.ptr.i614, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %push_member_name.exit619

push_member_name.exit619:                         ; preds = %cond.end.i598, %if.end.i615
  %76 = phi %struct.spelling* [ %72, %cond.end.i598 ], [ %add.ptr.i614, %if.end.i615 ]
  %kind.i616 = getelementptr inbounds %struct.spelling* %76, i64 0, i32 0
  store i32 2, i32* %kind.i616, align 4, !tbaa !58
  %s.i617 = getelementptr inbounds %struct.spelling* %76, i64 0, i32 1, i32 0
  store i8* %cond.i591, i8** %s.i617, align 8, !tbaa !7
  %77 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %incdec.ptr.i618 = getelementptr inbounds %struct.spelling* %77, i64 1
  store %struct.spelling* %incdec.ptr.i618, %struct.spelling** @spelling, align 8, !tbaa !7
  %78 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  tail call fastcc void @output_init_element(%union.tree_node* %value.addr.2, %union.tree_node* %fieldtype200.0, %union.tree_node* %78, i32 1)
  %79 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %80 = load i32* @constructor_depth, align 4, !tbaa !27
  %idx.ext268 = sext i32 %80 to i64
  %add.ptr269 = getelementptr inbounds %struct.spelling* %79, i64 %idx.ext268
  store %struct.spelling* %add.ptr269, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %if.end275

if.else270:                                       ; preds = %if.end265
  %size272 = getelementptr inbounds %union.tree_node* %69, i64 0, i32 0, i32 4
  %81 = load %union.tree_node** %size272, align 8, !tbaa !37
  store %union.tree_node* %81, %union.tree_node** @constructor_bit_index, align 8, !tbaa !7
  %chain274 = getelementptr inbounds %union.tree_node* %69, i64 0, i32 0, i32 0, i32 0
  %82 = load %union.tree_node** %chain274, align 8, !tbaa !28
  store %union.tree_node* %82, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  br label %if.end275

if.end275:                                        ; preds = %if.else270, %push_member_name.exit619
  store %union.tree_node* null, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  br label %if.end381

if.then282:                                       ; preds = %while.body75
  %type284 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 1
  %83 = load %union.tree_node** %type284, align 8, !tbaa !1
  %84 = getelementptr inbounds %union.tree_node* %83, i64 0, i32 0, i32 15
  %85 = load %union.tree_node** %84, align 8, !tbaa !24
  %code288 = getelementptr inbounds %union.tree_node* %85, i64 0, i32 0, i32 0, i32 2
  %bf.load289 = load i32* %code288, align 8
  %bf.clear290 = and i32 %bf.load289, 255
  %cmp293 = icmp eq i32 %bf.clear290, 18
  %or.cond484 = and i1 %cmp106, %cmp293
  br i1 %or.cond484, label %land.lhs.true294, label %if.else305

land.lhs.true294:                                 ; preds = %if.then282
  %type296 = getelementptr inbounds %union.tree_node* %85, i64 0, i32 0, i32 0, i32 1
  %86 = load %union.tree_node** %type296, align 8, !tbaa !1
  %code298 = getelementptr inbounds %union.tree_node* %86, i64 0, i32 0, i32 0, i32 2
  %bf.load299 = load i32* %code298, align 8
  %bf.clear300 = and i32 %bf.load299, 255
  %cmp301 = icmp eq i32 %bf.clear300, 6
  %or.cond486 = and i1 %cmp301, %6
  br i1 %or.cond486, label %if.end325, label %if.else305

if.else305:                                       ; preds = %land.lhs.true294, %if.then282
  %87 = load i32* @constructor_no_implicit, align 4
  %tobool308 = icmp ne i32 %87, 0
  %or.cond488 = or i1 %cmp121, %tobool308
  %88 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp310 = icmp eq %union.tree_node* %value.addr.0.ph640, %88
  %or.cond586 = or i1 %or.cond488, %cmp310
  br i1 %or.cond586, label %if.end325, label %land.lhs.true311

land.lhs.true311:                                 ; preds = %if.else305
  %89 = load %union.tree_node** %type128, align 8, !tbaa !1
  %90 = getelementptr inbounds %union.tree_node* %89, i64 0, i32 0, i32 15
  %91 = load %union.tree_node** %90, align 8, !tbaa !24
  %cmp316 = icmp eq %union.tree_node* %91, %85
  br i1 %cmp316, label %if.end325, label %land.lhs.true317

land.lhs.true317:                                 ; preds = %land.lhs.true311
  switch i32 %bf.clear290, label %if.end325 [
    i32 21, label %if.then323
    i32 20, label %if.then323
    i32 18, label %if.then323
  ]

if.then323:                                       ; preds = %land.lhs.true317, %land.lhs.true317, %land.lhs.true317
  tail call void @push_init_level(i32 1)
  br label %while.body75

if.end325:                                        ; preds = %land.lhs.true317, %land.lhs.true294, %land.lhs.true311, %if.else305
  %value.addr.3 = phi %union.tree_node* [ %value.addr.0.ph640, %if.else305 ], [ %value.addr.0.ph640, %land.lhs.true317 ], [ %value.addr.0.ph640, %land.lhs.true311 ], [ %value, %land.lhs.true294 ]
  %92 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %cmp326 = icmp eq %union.tree_node* %92, null
  br i1 %cmp326, label %if.end334, label %land.lhs.true327

land.lhs.true327:                                 ; preds = %if.end325
  %93 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %call328 = tail call i32 @tree_int_cst_lt(%union.tree_node* %92, %union.tree_node* %93) #6
  %tobool329 = icmp eq i32 %call328, 0
  br i1 %tobool329, label %lor.lhs.false330, label %if.then333

lor.lhs.false330:                                 ; preds = %land.lhs.true327
  %94 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %call331 = tail call i32 @integer_all_onesp(%union.tree_node* %94) #6
  %tobool332 = icmp eq i32 %call331, 0
  br i1 %tobool332, label %if.end334, label %if.then333

if.then333:                                       ; preds = %lor.lhs.false330, %land.lhs.true327
  tail call void @pedwarn_init(i8* getelementptr inbounds ([37 x i8]* @.str133, i64 0, i64 0))
  br label %while.end449

if.end334:                                        ; preds = %lor.lhs.false330, %if.end325
  %tobool335 = icmp ne %union.tree_node* %value.addr.3, null
  br i1 %tobool335, label %if.then336, label %if.end340

if.then336:                                       ; preds = %if.end334
  %95 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %call337 = tail call i64 @tree_low_cst(%union.tree_node* %95, i32 0) #6
  %conv = trunc i64 %call337 to i32
  %96 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %97 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sub.ptr.lhs.cast.i620 = ptrtoint %struct.spelling* %96 to i64
  %sub.ptr.rhs.cast.i621 = ptrtoint %struct.spelling* %97 to i64
  %sub.ptr.sub.i622 = sub i64 %sub.ptr.lhs.cast.i620, %sub.ptr.rhs.cast.i621
  %sub.ptr.div11.i = lshr exact i64 %sub.ptr.sub.i622, 4
  %conv.i623 = trunc i64 %sub.ptr.div11.i to i32
  %98 = load i32* @spelling_size, align 4, !tbaa !27
  %cmp.i624 = icmp slt i32 %conv.i623, %98
  br i1 %cmp.i624, label %push_array_bounds.exit, label %if.then.i626

if.then.i626:                                     ; preds = %if.then336
  %add.i625 = add nsw i32 %98, 10
  store i32 %add.i625, i32* @spelling_size, align 4, !tbaa !27
  %cmp2.i = icmp eq %struct.spelling* %97, null
  br i1 %cmp2.i, label %if.then4.i, label %if.else.i629

if.then4.i:                                       ; preds = %if.then.i626
  %conv5.i = sext i32 %add.i625 to i64
  %mul.i627 = shl nsw i64 %conv5.i, 4
  %call.i628 = tail call noalias i8* @xmalloc(i64 %mul.i627) #6
  br label %if.end.i635

if.else.i629:                                     ; preds = %if.then.i626
  %99 = bitcast %struct.spelling* %97 to i8*
  %conv6.i = sext i32 %add.i625 to i64
  %mul7.i = shl nsw i64 %conv6.i, 4
  %call8.i = tail call i8* @xrealloc(i8* %99, i64 %mul7.i) #6
  br label %if.end.i635

if.end.i635:                                      ; preds = %if.else.i629, %if.then4.i
  %storemerge.in.i630 = phi i8* [ %call8.i, %if.else.i629 ], [ %call.i628, %if.then4.i ]
  %storemerge.i631 = bitcast i8* %storemerge.in.i630 to %struct.spelling*
  store %struct.spelling* %storemerge.i631, %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sext.i632 = shl i64 %sub.ptr.sub.i622, 28
  %idx.ext.i633 = ashr exact i64 %sext.i632, 32
  %add.ptr.i634 = getelementptr inbounds %struct.spelling* %storemerge.i631, i64 %idx.ext.i633
  store %struct.spelling* %add.ptr.i634, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %push_array_bounds.exit

push_array_bounds.exit:                           ; preds = %if.then336, %if.end.i635
  %100 = phi %struct.spelling* [ %96, %if.then336 ], [ %add.ptr.i634, %if.end.i635 ]
  %kind.i636 = getelementptr inbounds %struct.spelling* %100, i64 0, i32 0
  store i32 3, i32* %kind.i636, align 4, !tbaa !58
  %u.i = getelementptr inbounds %struct.spelling* %100, i64 0, i32 1
  %i.i = bitcast %union.anon.4* %u.i to i32*
  store i32 %conv, i32* %i.i, align 4, !tbaa !27
  %incdec.ptr.i637 = getelementptr inbounds %struct.spelling* %100, i64 1
  store %struct.spelling* %incdec.ptr.i637, %struct.spelling** @spelling, align 8, !tbaa !7
  %101 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  tail call fastcc void @output_init_element(%union.tree_node* %value.addr.3, %union.tree_node* %85, %union.tree_node* %101, i32 1)
  %102 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %103 = load i32* @constructor_depth, align 4, !tbaa !27
  %idx.ext338 = sext i32 %103 to i64
  %add.ptr339 = getelementptr inbounds %struct.spelling* %102, i64 %idx.ext338
  store %struct.spelling* %add.ptr339, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %if.end340

if.end340:                                        ; preds = %push_array_bounds.exit, %if.end334
  %104 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %105 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 8, !tbaa !7
  %call341 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %104, %union.tree_node* %105) #6
  store %union.tree_node* %call341, %union.tree_node** @constructor_index, align 8, !tbaa !7
  br i1 %tobool335, label %if.end381, label %if.then343

if.then343:                                       ; preds = %if.end340
  store %union.tree_node* %call341, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br label %if.end381

if.then352:                                       ; preds = %while.body75
  %type355 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 1
  %106 = load %union.tree_node** %type355, align 8, !tbaa !1
  %107 = getelementptr inbounds %union.tree_node* %106, i64 0, i32 0, i32 15
  %108 = load %union.tree_node** %107, align 8, !tbaa !24
  %109 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %110 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %call358 = tail call i32 @tree_int_cst_lt(%union.tree_node* %109, %union.tree_node* %110) #6
  %tobool359 = icmp eq i32 %call358, 0
  br i1 %tobool359, label %if.end361, label %if.then360

if.then360:                                       ; preds = %if.then352
  tail call void @pedwarn_init(i8* getelementptr inbounds ([38 x i8]* @.str134, i64 0, i64 0))
  br label %while.end449

if.end361:                                        ; preds = %if.then352
  br i1 %cmp106, label %if.then363, label %if.end364

if.then363:                                       ; preds = %if.end361
  %111 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  tail call fastcc void @output_init_element(%union.tree_node* %value.addr.0.ph640, %union.tree_node* %108, %union.tree_node* %111, i32 1)
  br label %if.end364

if.end364:                                        ; preds = %if.then363, %if.end361
  %112 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %113 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 8, !tbaa !7
  %call365 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %112, %union.tree_node* %113) #6
  store %union.tree_node* %call365, %union.tree_node** @constructor_index, align 8, !tbaa !7
  br i1 %cmp106, label %if.end381, label %if.then367

if.then367:                                       ; preds = %if.end364
  store %union.tree_node* %call365, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br label %if.end381

if.else369:                                       ; preds = %while.body75
  %114 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %cmp370 = icmp eq %union.tree_node* %114, null
  br i1 %cmp370, label %if.then372, label %if.else373

if.then372:                                       ; preds = %if.else369
  tail call void @pedwarn_init(i8* getelementptr inbounds ([38 x i8]* @.str135, i64 0, i64 0))
  br label %while.end449

if.else373:                                       ; preds = %if.else369
  br i1 %cmp121, label %if.end376, label %if.then375

if.then375:                                       ; preds = %if.else373
  tail call fastcc void @output_init_element(%union.tree_node* %value.addr.0.ph640, %union.tree_node* %20, %union.tree_node* null, i32 1)
  br label %if.end376

if.end376:                                        ; preds = %if.else373, %if.then375
  store %union.tree_node* null, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  br label %if.end381

if.end381:                                        ; preds = %land.lhs.true175, %while.cond173, %land.rhs183, %if.end275, %if.end376, %if.then367, %if.end364, %if.end340, %if.then343
  %value.addr.4 = phi %union.tree_node* [ %value.addr.2, %if.end275 ], [ %value.addr.3, %if.end340 ], [ null, %if.then343 ], [ %value.addr.0.ph640, %if.end364 ], [ null, %if.then367 ], [ %value.addr.0.ph640, %if.end376 ], [ %value.addr.1672, %land.rhs183 ], [ %value.addr.1672, %while.cond173 ], [ %value.addr.1672, %land.lhs.true175 ]
  %115 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %tobool382 = icmp eq %struct.constructor_range_stack* %115, null
  br i1 %tobool382, label %while.end449, label %if.then383

if.then383:                                       ; preds = %if.end381
  store %struct.constructor_range_stack* null, %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %116 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %stack = getelementptr inbounds %struct.constructor_range_stack* %115, i64 0, i32 2
  %117 = load %struct.constructor_stack** %stack, align 8, !tbaa !96
  %cmp385652 = icmp eq %struct.constructor_stack* %116, %117
  br i1 %cmp385652, label %for.cond, label %while.body387

while.body387:                                    ; preds = %if.then383, %if.end391
  %118 = phi %struct.constructor_stack* [ %120, %if.end391 ], [ %116, %if.then383 ]
  %implicit388 = getelementptr inbounds %struct.constructor_stack* %118, i64 0, i32 16
  %119 = load i8* %implicit388, align 1, !tbaa !89
  %tobool389 = icmp eq i8 %119, 0
  br i1 %tobool389, label %if.then390, label %if.end391

if.then390:                                       ; preds = %while.body387
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 6830, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.process_init_element, i64 0, i64 0)) #7
  unreachable

if.end391:                                        ; preds = %while.body387
  %call392 = tail call %union.tree_node* @pop_init_level(i32 1)
  tail call void @process_init_element(%union.tree_node* %call392)
  %120 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %121 = load %struct.constructor_stack** %stack, align 8, !tbaa !96
  %cmp385 = icmp eq %struct.constructor_stack* %120, %121
  br i1 %cmp385, label %for.cond, label %while.body387

for.cond:                                         ; preds = %if.then383, %if.end391, %if.end401
  %p.0 = phi %struct.constructor_range_stack* [ %126, %if.end401 ], [ %115, %if.end391 ], [ %115, %if.then383 ]
  %range_end = getelementptr inbounds %struct.constructor_range_stack* %p.0, i64 0, i32 5
  %122 = load %union.tree_node** %range_end, align 8, !tbaa !98
  %tobool394 = icmp eq %union.tree_node* %122, null
  br i1 %tobool394, label %for.body, label %lor.rhs

lor.rhs:                                          ; preds = %for.cond
  %index = getelementptr inbounds %struct.constructor_range_stack* %p.0, i64 0, i32 4
  %123 = load %union.tree_node** %index, align 8, !tbaa !99
  %call396 = tail call i32 @tree_int_cst_equal(%union.tree_node* %123, %union.tree_node* %122) #6
  %tobool397 = icmp eq i32 %call396, 0
  br i1 %tobool397, label %for.end, label %for.body

for.body:                                         ; preds = %lor.rhs, %for.cond
  %124 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %implicit398 = getelementptr inbounds %struct.constructor_stack* %124, i64 0, i32 16
  %125 = load i8* %implicit398, align 1, !tbaa !89
  %tobool399 = icmp eq i8 %125, 0
  br i1 %tobool399, label %if.then400, label %if.end401

if.then400:                                       ; preds = %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 6838, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.process_init_element, i64 0, i64 0)) #7
  unreachable

if.end401:                                        ; preds = %for.body
  %call402 = tail call %union.tree_node* @pop_init_level(i32 1)
  tail call void @process_init_element(%union.tree_node* %call402)
  %prev = getelementptr inbounds %struct.constructor_range_stack* %p.0, i64 0, i32 1
  %126 = load %struct.constructor_range_stack** %prev, align 8, !tbaa !100
  br label %for.cond

for.end:                                          ; preds = %lor.rhs
  %127 = load %union.tree_node** %index, align 8, !tbaa !99
  %128 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 8, !tbaa !7
  %call404 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %127, %union.tree_node* %128) #6
  store %union.tree_node* %call404, %union.tree_node** %index, align 8, !tbaa !99
  %129 = load %union.tree_node** %range_end, align 8, !tbaa !98
  %call408 = tail call i32 @tree_int_cst_equal(%union.tree_node* %call404, %union.tree_node* %129) #6
  %tobool409 = icmp eq i32 %call408, 0
  br i1 %tobool409, label %while.body416, label %land.lhs.true410

land.lhs.true410:                                 ; preds = %for.end
  %prev411 = getelementptr inbounds %struct.constructor_range_stack* %p.0, i64 0, i32 1
  %130 = load %struct.constructor_range_stack** %prev411, align 8, !tbaa !100
  %tobool412 = icmp eq %struct.constructor_range_stack* %130, null
  %. = zext i1 %tobool412 to i32
  br label %while.body416

while.body416:                                    ; preds = %land.lhs.true435, %if.end431, %if.then440, %land.lhs.true410, %for.end
  %p.1 = phi %struct.constructor_range_stack* [ %p.0, %for.end ], [ %p.0, %land.lhs.true410 ], [ %136, %if.then440 ], [ %136, %if.end431 ], [ %136, %land.lhs.true435 ]
  %finish.0 = phi i32 [ %., %land.lhs.true410 ], [ 0, %for.end ], [ %finish.1, %if.then440 ], [ %finish.1, %if.end431 ], [ %finish.1, %land.lhs.true435 ]
  %index417 = getelementptr inbounds %struct.constructor_range_stack* %p.1, i64 0, i32 4
  %131 = load %union.tree_node** %index417, align 8, !tbaa !99
  store %union.tree_node* %131, %union.tree_node** @constructor_index, align 8, !tbaa !7
  %fields = getelementptr inbounds %struct.constructor_range_stack* %p.1, i64 0, i32 6
  %132 = load %union.tree_node** %fields, align 8, !tbaa !101
  store %union.tree_node* %132, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %tobool418 = icmp eq i32 %finish.0, 0
  br i1 %tobool418, label %if.end428, label %land.lhs.true419

land.lhs.true419:                                 ; preds = %while.body416
  %range_end420 = getelementptr inbounds %struct.constructor_range_stack* %p.1, i64 0, i32 5
  %133 = load %union.tree_node** %range_end420, align 8, !tbaa !98
  %tobool421 = icmp eq %union.tree_node* %133, null
  br i1 %tobool421, label %if.end428, label %land.lhs.true422

land.lhs.true422:                                 ; preds = %land.lhs.true419
  %134 = load %union.tree_node** %index417, align 8, !tbaa !99
  %range_start = getelementptr inbounds %struct.constructor_range_stack* %p.1, i64 0, i32 3
  %135 = load %union.tree_node** %range_start, align 8, !tbaa !102
  %cmp424 = icmp eq %union.tree_node* %134, %135
  br i1 %cmp424, label %if.then426, label %if.end428

if.then426:                                       ; preds = %land.lhs.true422
  %prev427 = getelementptr inbounds %struct.constructor_range_stack* %p.1, i64 0, i32 1
  store %struct.constructor_range_stack* null, %struct.constructor_range_stack** %prev427, align 8, !tbaa !100
  br label %if.end428

if.end428:                                        ; preds = %land.lhs.true419, %while.body416, %if.then426, %land.lhs.true422
  %finish.1 = phi i32 [ 0, %if.then426 ], [ %finish.0, %land.lhs.true422 ], [ %finish.0, %land.lhs.true419 ], [ 0, %while.body416 ]
  %next = getelementptr inbounds %struct.constructor_range_stack* %p.1, i64 0, i32 0
  %136 = load %struct.constructor_range_stack** %next, align 8, !tbaa !103
  %tobool429 = icmp eq %struct.constructor_range_stack* %136, null
  br i1 %tobool429, label %while.end444, label %if.end431

if.end431:                                        ; preds = %if.end428
  tail call void @push_init_level(i32 2)
  %137 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %stack432 = getelementptr inbounds %struct.constructor_range_stack* %136, i64 0, i32 2
  store %struct.constructor_stack* %137, %struct.constructor_stack** %stack432, align 8, !tbaa !96
  %range_end433 = getelementptr inbounds %struct.constructor_range_stack* %136, i64 0, i32 5
  %138 = load %union.tree_node** %range_end433, align 8, !tbaa !98
  %tobool434 = icmp eq %union.tree_node* %138, null
  br i1 %tobool434, label %while.body416, label %land.lhs.true435

land.lhs.true435:                                 ; preds = %if.end431
  %index436 = getelementptr inbounds %struct.constructor_range_stack* %136, i64 0, i32 4
  %139 = load %union.tree_node** %index436, align 8, !tbaa !99
  %call438 = tail call i32 @tree_int_cst_equal(%union.tree_node* %139, %union.tree_node* %138) #6
  %tobool439 = icmp eq i32 %call438, 0
  br i1 %tobool439, label %while.body416, label %if.then440

if.then440:                                       ; preds = %land.lhs.true435
  %range_start441 = getelementptr inbounds %struct.constructor_range_stack* %136, i64 0, i32 3
  %140 = load %union.tree_node** %range_start441, align 8, !tbaa !102
  store %union.tree_node* %140, %union.tree_node** %index436, align 8, !tbaa !99
  br label %while.body416

while.end444:                                     ; preds = %if.end428
  %tobool445 = icmp eq i32 %finish.1, 0
  br i1 %tobool445, label %if.then446, label %while.body75.outer

if.then446:                                       ; preds = %while.end444
  store %struct.constructor_range_stack* %115, %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  br label %while.body75.outer

while.end449:                                     ; preds = %if.end381, %if.then372, %if.then360, %if.then333, %if.then203, %if.then104, %if.then83
  store %struct.constructor_range_stack* null, %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  br label %return

return:                                           ; preds = %if.end25, %while.end449, %if.then24, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @pop_init_level(i32 %implicit) #0 {
entry:
  %cmp = icmp eq i32 %implicit, 0
  %0 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  br i1 %cmp, label %while.cond.preheader, label %if.end4

while.cond.preheader:                             ; preds = %entry
  %implicit1187 = getelementptr inbounds %struct.constructor_stack* %0, i64 0, i32 16
  %1 = load i8* %implicit1187, align 1, !tbaa !89
  %tobool188 = icmp eq i8 %1, 0
  br i1 %tobool188, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %call = tail call %union.tree_node* @pop_init_level(i32 1)
  tail call void @process_init_element(%union.tree_node* %call)
  %2 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %implicit1 = getelementptr inbounds %struct.constructor_stack* %2, i64 0, i32 16
  %3 = load i8* %implicit1, align 1, !tbaa !89
  %tobool = icmp eq i8 %3, 0
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %while.cond.preheader
  %4 = phi %struct.constructor_stack* [ %0, %while.cond.preheader ], [ %2, %while.body ]
  %5 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %tobool2 = icmp eq %struct.constructor_range_stack* %5, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %while.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 5488, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.pop_init_level, i64 0, i64 0)) #7
  unreachable

if.end4:                                          ; preds = %entry, %while.end
  %6 = phi %struct.constructor_stack* [ %4, %while.end ], [ %0, %entry ]
  %7 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %tobool5 = icmp ne %union.tree_node* %7, null
  %8 = load %union.tree_node** @constructor_fields, align 8
  %tobool6 = icmp ne %union.tree_node* %8, null
  %or.cond = and i1 %tobool5, %tobool6
  br i1 %or.cond, label %land.lhs.true7, label %if.end37

land.lhs.true7:                                   ; preds = %if.end4
  %code = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp8 = icmp eq i32 %bf.clear, 18
  br i1 %cmp8, label %land.lhs.true9, label %if.end37

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %values = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 1
  %9 = load i8** %values, align 8
  %tobool10 = icmp eq i8* %9, null
  br i1 %tobool10, label %if.end37, label %land.lhs.true11

land.lhs.true11:                                  ; preds = %land.lhs.true9
  %maxval = getelementptr inbounds i8* %9, i64 112
  %10 = bitcast i8* %maxval to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !16
  %tobool15 = icmp eq %union.tree_node* %11, null
  br i1 %tobool15, label %if.then16, label %if.end37

if.then16:                                        ; preds = %land.lhs.true11
  %12 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %call17 = tail call i32 @integer_zerop(%union.tree_node* %12) #6
  %tobool18 = icmp eq i32 %call17, 0
  br i1 %tobool18, label %if.else, label %if.then19

if.then19:                                        ; preds = %if.then16
  store %union.tree_node* null, %union.tree_node** @constructor_type, align 8, !tbaa !7
  br label %if.end67

if.else:                                          ; preds = %if.then16
  %13 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %size = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 2
  %14 = bitcast i32* %size to %union.tree_node**
  %15 = load %union.tree_node** %14, align 8, !tbaa !8
  %tobool21 = icmp eq %union.tree_node* %15, null
  br i1 %tobool21, label %if.then22, label %if.else34

if.then22:                                        ; preds = %if.else
  %16 = load i32* @constructor_depth, align 4, !tbaa !27
  %cmp23 = icmp sgt i32 %16, 2
  br i1 %cmp23, label %if.then24, label %if.else25

if.then24:                                        ; preds = %if.then22
  tail call void @error_init(i8* getelementptr inbounds ([60 x i8]* @.str116, i64 0, i64 0))
  br label %if.end29

if.else25:                                        ; preds = %if.then22
  %17 = load i32* @pedantic, align 4, !tbaa !27
  %tobool26 = icmp eq i32 %17, 0
  br i1 %tobool26, label %if.end29, label %if.then27

if.then27:                                        ; preds = %if.else25
  tail call void @pedwarn_init(i8* getelementptr inbounds ([42 x i8]* @.str117, i64 0, i64 0))
  br label %if.end29

if.end29:                                         ; preds = %if.else25, %if.then27, %if.then24
  %18 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %chain = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 0
  %19 = load %union.tree_node** %chain, align 8, !tbaa !28
  %cmp31 = icmp eq %union.tree_node* %19, null
  br i1 %cmp31, label %if.end29.if.end37_crit_edge, label %if.then32

if.end29.if.end37_crit_edge:                      ; preds = %if.end29
  %.pre189 = load %union.tree_node** @constructor_type, align 8
  br label %if.end37

if.then32:                                        ; preds = %if.end29
  store %union.tree_node* null, %union.tree_node** @constructor_type, align 8, !tbaa !7
  br label %if.end67

if.else34:                                        ; preds = %if.else
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 5520, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.pop_init_level, i64 0, i64 0)) #7
  unreachable

if.end37:                                         ; preds = %if.end29.if.end37_crit_edge, %land.lhs.true11, %land.lhs.true9, %land.lhs.true7, %if.end4
  %20 = phi %union.tree_node* [ %.pre189, %if.end29.if.end37_crit_edge ], [ %7, %land.lhs.true11 ], [ %7, %land.lhs.true9 ], [ %7, %land.lhs.true7 ], [ %7, %if.end4 ]
  %21 = load i32* @extra_warnings, align 4, !tbaa !27
  %tobool38 = icmp ne i32 %21, 0
  %tobool40 = icmp ne %union.tree_node* %20, null
  %or.cond158 = and i1 %tobool38, %tobool40
  br i1 %or.cond158, label %land.lhs.true41, label %if.end67

land.lhs.true41:                                  ; preds = %if.end37
  %code43 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 2
  %bf.load44 = load i32* %code43, align 8
  %bf.clear45 = and i32 %bf.load44, 255
  %cmp46 = icmp eq i32 %bf.clear45, 20
  %22 = load %union.tree_node** @constructor_unfilled_fields, align 8
  %tobool48 = icmp ne %union.tree_node* %22, null
  %or.cond159 = and i1 %cmp46, %tobool48
  br i1 %or.cond159, label %land.rhs, label %if.end67

land.rhs:                                         ; preds = %land.lhs.true41, %while.body58
  %23 = phi %union.tree_node* [ %27, %while.body58 ], [ %22, %land.lhs.true41 ]
  %size52 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 4
  %24 = load %union.tree_node** %size52, align 8, !tbaa !37
  %tobool53 = icmp eq %union.tree_node* %24, null
  br i1 %tobool53, label %while.body58, label %land.end

land.end:                                         ; preds = %land.rhs
  %call56 = tail call i32 @integer_zerop(%union.tree_node* %24) #6
  %tobool57 = icmp eq i32 %call56, 0
  %25 = load %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  br i1 %tobool57, label %while.end61, label %while.body58

while.body58:                                     ; preds = %land.rhs, %land.end
  %26 = phi %union.tree_node* [ %25, %land.end ], [ %23, %land.rhs ]
  %chain60 = getelementptr inbounds %union.tree_node* %26, i64 0, i32 0, i32 0, i32 0
  %27 = load %union.tree_node** %chain60, align 8, !tbaa !28
  store %union.tree_node* %27, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %tobool51 = icmp eq %union.tree_node* %27, null
  br i1 %tobool51, label %if.end67, label %land.rhs

while.end61:                                      ; preds = %land.end
  %tobool62 = icmp eq %union.tree_node* %25, null
  %28 = load i32* @constructor_designated, align 4
  %tobool64 = icmp ne i32 %28, 0
  %or.cond160 = or i1 %tobool62, %tobool64
  br i1 %or.cond160, label %if.end67, label %if.then65

if.then65:                                        ; preds = %while.end61
  %.idx = getelementptr %union.tree_node* %25, i64 0, i32 0, i32 8
  %.idx.val = load %union.tree_node** %.idx, align 8, !tbaa !11
  %tobool.i = icmp eq %union.tree_node* %.idx.val, null
  br i1 %tobool.i, label %cond.end.i, label %cond.true.i

cond.true.i:                                      ; preds = %if.then65
  %id.i = getelementptr inbounds %union.tree_node* %.idx.val, i64 0, i32 0, i32 1
  %29 = getelementptr inbounds i8** %id.i, i64 1
  %30 = load i8** %29, align 8, !tbaa !13
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %if.then65
  %cond.i = phi i8* [ %30, %cond.true.i ], [ getelementptr inbounds ([12 x i8]* @.str154, i64 0, i64 0), %if.then65 ]
  %31 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %32 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sub.ptr.lhs.cast.i = ptrtoint %struct.spelling* %31 to i64
  %sub.ptr.rhs.cast.i = ptrtoint %struct.spelling* %32 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div15.i = lshr exact i64 %sub.ptr.sub.i, 4
  %conv.i = trunc i64 %sub.ptr.div15.i to i32
  %33 = load i32* @spelling_size, align 4, !tbaa !27
  %cmp.i = icmp slt i32 %conv.i, %33
  br i1 %cmp.i, label %push_member_name.exit, label %if.then.i

if.then.i:                                        ; preds = %cond.end.i
  %add.i = add nsw i32 %33, 10
  store i32 %add.i, i32* @spelling_size, align 4, !tbaa !27
  %cmp5.i = icmp eq %struct.spelling* %32, null
  br i1 %cmp5.i, label %if.then7.i, label %if.else.i

if.then7.i:                                       ; preds = %if.then.i
  %conv8.i = sext i32 %add.i to i64
  %mul.i = shl nsw i64 %conv8.i, 4
  %call.i = tail call noalias i8* @xmalloc(i64 %mul.i) #6
  br label %if.end.i

if.else.i:                                        ; preds = %if.then.i
  %34 = bitcast %struct.spelling* %32 to i8*
  %conv9.i = sext i32 %add.i to i64
  %mul10.i = shl nsw i64 %conv9.i, 4
  %call11.i = tail call i8* @xrealloc(i8* %34, i64 %mul10.i) #6
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %if.then7.i
  %storemerge.in.i = phi i8* [ %call11.i, %if.else.i ], [ %call.i, %if.then7.i ]
  %storemerge.i = bitcast i8* %storemerge.in.i to %struct.spelling*
  store %struct.spelling* %storemerge.i, %struct.spelling** @spelling_base, align 8, !tbaa !7
  %sext.i = shl i64 %sub.ptr.sub.i, 28
  %idx.ext.i = ashr exact i64 %sext.i, 32
  %add.ptr.i = getelementptr inbounds %struct.spelling* %storemerge.i, i64 %idx.ext.i
  store %struct.spelling* %add.ptr.i, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %push_member_name.exit

push_member_name.exit:                            ; preds = %cond.end.i, %if.end.i
  %35 = phi %struct.spelling* [ %31, %cond.end.i ], [ %add.ptr.i, %if.end.i ]
  %kind.i = getelementptr inbounds %struct.spelling* %35, i64 0, i32 0
  store i32 2, i32* %kind.i, align 4, !tbaa !58
  %s.i = getelementptr inbounds %struct.spelling* %35, i64 0, i32 1, i32 0
  store i8* %cond.i, i8** %s.i, align 8, !tbaa !7
  %36 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %incdec.ptr.i = getelementptr inbounds %struct.spelling* %36, i64 1
  store %struct.spelling* %incdec.ptr.i, %struct.spelling** @spelling, align 8, !tbaa !7
  tail call fastcc void @warning_init(i8* getelementptr inbounds ([20 x i8]* @.str118, i64 0, i64 0))
  %37 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %38 = load i32* @constructor_depth, align 4, !tbaa !27
  %idx.ext = sext i32 %38 to i64
  %add.ptr = getelementptr inbounds %struct.spelling* %37, i64 %idx.ext
  store %struct.spelling* %add.ptr, %struct.spelling** @spelling, align 8, !tbaa !7
  br label %if.end67

if.end67:                                         ; preds = %while.body58, %if.then32, %if.then19, %push_member_name.exit, %while.end61, %land.lhs.true41, %if.end37
  store i32 1, i32* @constructor_incremental, align 4, !tbaa !27
  tail call fastcc void @output_pending_init_elements(i32 1)
  %replacement_value = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 12
  %39 = load %union.tree_node** %replacement_value, align 8, !tbaa !93
  %tobool68 = icmp eq %union.tree_node* %39, null
  br i1 %tobool68, label %if.else71, label %if.end138

if.else71:                                        ; preds = %if.end67
  %40 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %cmp72 = icmp eq %union.tree_node* %40, null
  br i1 %cmp72, label %if.end138, label %if.else74

if.else74:                                        ; preds = %if.else71
  %code76 = getelementptr inbounds %union.tree_node* %40, i64 0, i32 0, i32 0, i32 2
  %bf.load77 = load i32* %code76, align 8
  %bf.clear78 = and i32 %bf.load77, 255
  switch i32 %bf.clear78, label %if.then98 [
    i32 20, label %if.else114
    i32 21, label %if.else114
    i32 18, label %if.else114
    i32 9, label %if.else114
  ]

if.then98:                                        ; preds = %if.else74
  %41 = load %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %cmp99 = icmp eq %union.tree_node* %41, null
  br i1 %cmp99, label %if.then100, label %if.else104

if.then100:                                       ; preds = %if.then98
  %42 = load i32* @constructor_erroneous, align 4, !tbaa !27
  %tobool101 = icmp eq i32 %42, 0
  br i1 %tobool101, label %if.then102, label %if.end103

if.then102:                                       ; preds = %if.then100
  tail call void @error_init(i8* getelementptr inbounds ([25 x i8]* @.str119, i64 0, i64 0))
  br label %if.end103

if.end103:                                        ; preds = %if.then100, %if.then102
  %43 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %if.end138

if.else104:                                       ; preds = %if.then98
  %chain106 = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 0, i32 0
  %44 = load %union.tree_node** %chain106, align 8, !tbaa !28
  %cmp107 = icmp eq %union.tree_node* %44, null
  br i1 %cmp107, label %if.else109, label %if.then108

if.then108:                                       ; preds = %if.else104
  tail call void @error_init(i8* getelementptr inbounds ([37 x i8]* @.str120, i64 0, i64 0))
  %45 = load %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %value = getelementptr inbounds %union.tree_node* %45, i64 0, i32 0, i32 2
  %46 = bitcast i32* %value to %union.tree_node**
  %47 = load %union.tree_node** %46, align 8, !tbaa !25
  br label %if.end138

if.else109:                                       ; preds = %if.else104
  %value111 = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 2
  %48 = bitcast i32* %value111 to %union.tree_node**
  %49 = load %union.tree_node** %48, align 8, !tbaa !25
  br label %if.end138

if.else114:                                       ; preds = %if.else74, %if.else74, %if.else74, %if.else74
  %50 = load i32* @constructor_erroneous, align 4, !tbaa !27
  %tobool115 = icmp eq i32 %50, 0
  br i1 %tobool115, label %if.else117, label %if.then116

if.then116:                                       ; preds = %if.else114
  %51 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %if.end138

if.else117:                                       ; preds = %if.else114
  %52 = load %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %call118 = tail call %union.tree_node* @nreverse(%union.tree_node* %52) #6
  %call119 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 46, %union.tree_node* %40, %union.tree_node* null, %union.tree_node* %call118) #6
  %53 = load i32* @constructor_constant, align 4, !tbaa !27
  %tobool120 = icmp eq i32 %53, 0
  br i1 %tobool120, label %if.end138, label %if.end125

if.end125:                                        ; preds = %if.else117
  %constant_flag = getelementptr inbounds %union.tree_node* %call119, i64 0, i32 0, i32 0, i32 2
  %bf.load123 = load i32* %constant_flag, align 8
  %bf.set = or i32 %bf.load123, 512
  store i32 %bf.set, i32* %constant_flag, align 8
  %.pre190 = load i32* @constructor_constant, align 4, !tbaa !27
  %phitmp = icmp ne i32 %.pre190, 0
  %54 = load i32* @constructor_simple, align 4
  %tobool128 = icmp ne i32 %54, 0
  %or.cond161 = and i1 %phitmp, %tobool128
  br i1 %or.cond161, label %if.then129, label %if.end138

if.then129:                                       ; preds = %if.end125
  %static_flag = getelementptr inbounds %union.tree_node* %call119, i64 0, i32 0, i32 0, i32 2
  %bf.load131 = load i32* %static_flag, align 8
  %bf.set133 = or i32 %bf.load131, 262144
  store i32 %bf.set133, i32* %static_flag, align 8
  br label %if.end138

if.end138:                                        ; preds = %if.else117, %if.end67, %if.else71, %if.then116, %if.then129, %if.end125, %if.end103, %if.else109, %if.then108
  %constructor.0 = phi %union.tree_node* [ null, %if.else71 ], [ %43, %if.end103 ], [ %47, %if.then108 ], [ %49, %if.else109 ], [ %51, %if.then116 ], [ %call119, %if.then129 ], [ %call119, %if.end125 ], [ %39, %if.end67 ], [ %call119, %if.else117 ]
  %type139 = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 1
  %55 = load %union.tree_node** %type139, align 8, !tbaa !76
  store %union.tree_node* %55, %union.tree_node** @constructor_type, align 8, !tbaa !7
  %fields = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 2
  %56 = load %union.tree_node** %fields, align 8, !tbaa !77
  store %union.tree_node* %56, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %index = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 3
  %57 = load %union.tree_node** %index, align 8, !tbaa !78
  store %union.tree_node* %57, %union.tree_node** @constructor_index, align 8, !tbaa !7
  %max_index = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 4
  %58 = load %union.tree_node** %max_index, align 8, !tbaa !79
  store %union.tree_node* %58, %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %unfilled_index = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 5
  %59 = load %union.tree_node** %unfilled_index, align 8, !tbaa !80
  store %union.tree_node* %59, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %unfilled_fields = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 6
  %60 = load %union.tree_node** %unfilled_fields, align 8, !tbaa !81
  store %union.tree_node* %60, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %bit_index = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 7
  %61 = load %union.tree_node** %bit_index, align 8, !tbaa !82
  store %union.tree_node* %61, %union.tree_node** @constructor_bit_index, align 8, !tbaa !7
  %elements = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 8
  %62 = load %union.tree_node** %elements, align 8, !tbaa !83
  store %union.tree_node* %62, %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %constant = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 14
  %63 = load i8* %constant, align 1, !tbaa !84
  %conv = sext i8 %63 to i32
  store i32 %conv, i32* @constructor_constant, align 4, !tbaa !27
  %simple = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 15
  %64 = load i8* %simple, align 1, !tbaa !85
  %conv140 = sext i8 %64 to i32
  store i32 %conv140, i32* @constructor_simple, align 4, !tbaa !27
  %erroneous = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 17
  %65 = load i8* %erroneous, align 1, !tbaa !86
  %conv141 = sext i8 %65 to i32
  store i32 %conv141, i32* @constructor_erroneous, align 4, !tbaa !27
  %incremental = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 19
  %66 = load i8* %incremental, align 1, !tbaa !91
  %conv142 = sext i8 %66 to i32
  store i32 %conv142, i32* @constructor_incremental, align 4, !tbaa !27
  %designated = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 20
  %67 = load i8* %designated, align 1, !tbaa !92
  %conv143 = sext i8 %67 to i32
  store i32 %conv143, i32* @constructor_designated, align 4, !tbaa !27
  %pending_elts = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 9
  %68 = load %struct.init_node** %pending_elts, align 8, !tbaa !87
  store %struct.init_node* %68, %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  %depth = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 11
  %69 = load i32* %depth, align 4, !tbaa !88
  store i32 %69, i32* @constructor_depth, align 4, !tbaa !27
  %implicit144 = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 16
  %70 = load i8* %implicit144, align 1, !tbaa !89
  %tobool145 = icmp eq i8 %70, 0
  br i1 %tobool145, label %if.then146, label %if.end147

if.then146:                                       ; preds = %if.end138
  %range_stack = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 13
  %71 = load %struct.constructor_range_stack** %range_stack, align 8, !tbaa !94
  store %struct.constructor_range_stack* %71, %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  br label %if.end147

if.end147:                                        ; preds = %if.end138, %if.then146
  %72 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %idx.ext148 = sext i32 %69 to i64
  %add.ptr149 = getelementptr inbounds %struct.spelling* %72, i64 %idx.ext148
  store %struct.spelling* %add.ptr149, %struct.spelling** @spelling, align 8, !tbaa !7
  %next = getelementptr inbounds %struct.constructor_stack* %6, i64 0, i32 0
  %73 = load %struct.constructor_stack** %next, align 8, !tbaa !74
  store %struct.constructor_stack* %73, %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %74 = bitcast %struct.constructor_stack* %6 to i8*
  tail call void @free(i8* %74)
  %cmp150 = icmp eq %union.tree_node* %constructor.0, null
  br i1 %cmp150, label %if.then152, label %return

if.then152:                                       ; preds = %if.end147
  %75 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %cmp153 = icmp eq %struct.constructor_stack* %75, null
  %76 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %. = select i1 %cmp153, %union.tree_node* %76, %union.tree_node* null
  ret %union.tree_node* %.

return:                                           ; preds = %if.end147
  ret %union.tree_node* %constructor.0
}

declare i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @find_init_member(%union.tree_node* %field) #0 {
entry:
  %0 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else49 [
    i32 18, label %if.then
    i32 20, label %if.then20
  ]

if.then:                                          ; preds = %entry
  %1 = load i32* @constructor_incremental, align 4, !tbaa !27
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %while.cond.preheader, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %2 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %call = tail call i32 @tree_int_cst_lt(%union.tree_node* %field, %union.tree_node* %2) #6
  %tobool1 = icmp eq i32 %call, 0
  br i1 %tobool1, label %while.cond.preheader, label %if.then2

if.then2:                                         ; preds = %land.lhs.true
  tail call fastcc void @set_nonincremental_init()
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %land.lhs.true, %if.then, %if.then2
  %p.084 = load %struct.init_node** @constructor_pending_elts, align 8
  %tobool385 = icmp eq %struct.init_node* %p.084, null
  br i1 %tobool385, label %return, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.cond.backedge
  %p.086 = phi %struct.init_node* [ %p.0, %while.cond.backedge ], [ %p.084, %while.cond.preheader ]
  %purpose = getelementptr inbounds %struct.init_node* %p.086, i64 0, i32 4
  %3 = load %union.tree_node** %purpose, align 8, !tbaa !104
  %call4 = tail call i32 @tree_int_cst_lt(%union.tree_node* %field, %union.tree_node* %3) #6
  %tobool5 = icmp eq i32 %call4, 0
  br i1 %tobool5, label %if.else, label %if.then6

if.then6:                                         ; preds = %while.body
  %left = getelementptr inbounds %struct.init_node* %p.086, i64 0, i32 0
  br label %while.cond.backedge

if.else:                                          ; preds = %while.body
  %4 = load %union.tree_node** %purpose, align 8, !tbaa !104
  %call8 = tail call i32 @tree_int_cst_lt(%union.tree_node* %4, %union.tree_node* %field) #6
  %tobool9 = icmp eq i32 %call8, 0
  br i1 %tobool9, label %if.else11, label %if.then10

if.then10:                                        ; preds = %if.else
  %right = getelementptr inbounds %struct.init_node* %p.086, i64 0, i32 1
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then10, %if.then6
  %p.0.in.be = phi %struct.init_node** [ %left, %if.then6 ], [ %right, %if.then10 ]
  %p.0 = load %struct.init_node** %p.0.in.be, align 8
  %tobool3 = icmp eq %struct.init_node* %p.0, null
  br i1 %tobool3, label %return, label %while.body

if.else11:                                        ; preds = %if.else
  %value = getelementptr inbounds %struct.init_node* %p.086, i64 0, i32 5
  %5 = load %union.tree_node** %value, align 8, !tbaa !106
  br label %return

if.then20:                                        ; preds = %entry
  %call21 = tail call %union.tree_node* @bit_position(%union.tree_node* %field) #6
  %6 = load i32* @constructor_incremental, align 4, !tbaa !27
  %tobool22 = icmp eq i32 %6, 0
  br i1 %tobool22, label %while.cond30.preheader, label %land.lhs.true23

land.lhs.true23:                                  ; preds = %if.then20
  %7 = load %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %tobool24 = icmp eq %union.tree_node* %7, null
  br i1 %tobool24, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true23
  %call25 = tail call %union.tree_node* @bit_position(%union.tree_node* %7) #6
  %call26 = tail call i32 @tree_int_cst_lt(%union.tree_node* %call21, %union.tree_node* %call25) #6
  %tobool27 = icmp eq i32 %call26, 0
  br i1 %tobool27, label %while.cond30.preheader, label %if.then28

if.then28:                                        ; preds = %lor.lhs.false, %land.lhs.true23
  tail call fastcc void @set_nonincremental_init()
  br label %while.cond30.preheader

while.cond30.preheader:                           ; preds = %lor.lhs.false, %if.then20, %if.then28
  %p.187 = load %struct.init_node** @constructor_pending_elts, align 8
  %tobool3188 = icmp eq %struct.init_node* %p.187, null
  br i1 %tobool3188, label %return, label %while.body32

while.body32:                                     ; preds = %while.cond30.preheader, %if.else37
  %p.189 = phi %struct.init_node* [ %p.1, %if.else37 ], [ %p.187, %while.cond30.preheader ]
  %purpose33 = getelementptr inbounds %struct.init_node* %p.189, i64 0, i32 4
  %8 = load %union.tree_node** %purpose33, align 8, !tbaa !104
  %cmp34 = icmp eq %union.tree_node* %8, %field
  br i1 %cmp34, label %if.then35, label %if.else37

if.then35:                                        ; preds = %while.body32
  %value36 = getelementptr inbounds %struct.init_node* %p.189, i64 0, i32 5
  %9 = load %union.tree_node** %value36, align 8, !tbaa !106
  br label %return

if.else37:                                        ; preds = %while.body32
  %call39 = tail call %union.tree_node* @bit_position(%union.tree_node* %8) #6
  %call40 = tail call i32 @tree_int_cst_lt(%union.tree_node* %call21, %union.tree_node* %call39) #6
  %tobool41 = icmp eq i32 %call40, 0
  %left43 = getelementptr inbounds %struct.init_node* %p.189, i64 0, i32 0
  %right45 = getelementptr inbounds %struct.init_node* %p.189, i64 0, i32 1
  %p.1.in.be = select i1 %tobool41, %struct.init_node** %right45, %struct.init_node** %left43
  %p.1 = load %struct.init_node** %p.1.in.be, align 8
  %tobool31 = icmp eq %struct.init_node* %p.1, null
  br i1 %tobool31, label %return, label %while.body32

if.else49:                                        ; preds = %entry
  %cmp54 = icmp eq i32 %bf.clear, 21
  %10 = load %union.tree_node** @constructor_elements, align 8
  %tobool56 = icmp ne %union.tree_node* %10, null
  %or.cond = and i1 %cmp54, %tobool56
  br i1 %or.cond, label %land.lhs.true57, label %return

land.lhs.true57:                                  ; preds = %if.else49
  %purpose58 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 1
  %11 = load i8** %purpose58, align 8
  %12 = bitcast i8* %11 to %union.tree_node*
  %cmp59 = icmp eq %union.tree_node* %12, %field
  br i1 %cmp59, label %if.then60, label %return

if.then60:                                        ; preds = %land.lhs.true57
  %value62 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 2
  %13 = bitcast i32* %value62 to %union.tree_node**
  %14 = load %union.tree_node** %13, align 8, !tbaa !25
  br label %return

return:                                           ; preds = %if.else37, %while.cond.backedge, %while.cond30.preheader, %while.cond.preheader, %if.else49, %land.lhs.true57, %if.then60, %if.then35, %if.else11
  %retval.0 = phi %union.tree_node* [ %5, %if.else11 ], [ %9, %if.then35 ], [ %14, %if.then60 ], [ null, %land.lhs.true57 ], [ null, %if.else49 ], [ null, %while.cond.preheader ], [ null, %while.cond30.preheader ], [ null, %while.cond.backedge ], [ null, %if.else37 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @set_nonincremental_init() #0 {
entry:
  %0 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return [
    i32 20, label %for.cond.preheader
    i32 18, label %for.cond.preheader
  ]

for.cond.preheader:                               ; preds = %entry, %entry
  %chain.047 = load %union.tree_node** @constructor_elements, align 8
  %tobool48 = icmp eq %union.tree_node* %chain.047, null
  br i1 %tobool48, label %for.end, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %chain.049 = phi %union.tree_node* [ %chain.0, %for.body ], [ %chain.047, %for.cond.preheader ]
  %purpose = getelementptr inbounds %union.tree_node* %chain.049, i64 0, i32 0, i32 1
  %1 = load i8** %purpose, align 8
  %2 = bitcast i8* %1 to %union.tree_node*
  %value = getelementptr inbounds %union.tree_node* %chain.049, i64 0, i32 0, i32 2
  %3 = bitcast i32* %value to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !25
  tail call fastcc void @add_pending_init(%union.tree_node* %2, %union.tree_node* %4)
  %chain8 = getelementptr inbounds %union.tree_node* %chain.049, i64 0, i32 0, i32 0, i32 0
  %chain.0 = load %union.tree_node** %chain8, align 8
  %tobool = icmp eq %union.tree_node* %chain.0, null
  br i1 %tobool, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %.pre = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %for.cond.preheader
  %5 = phi %union.tree_node* [ %.pre, %for.cond.for.end_crit_edge ], [ %0, %for.cond.preheader ]
  store %union.tree_node* null, %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %code10 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 2
  %bf.load11 = load i32* %code10, align 8
  %bf.clear12 = and i32 %bf.load11, 255
  switch i32 %bf.clear12, label %if.end40 [
    i32 20, label %if.then14
    i32 18, label %if.then29
  ]

if.then14:                                        ; preds = %for.end
  %values = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 1
  %6 = load i8** %values, align 8
  %7 = bitcast i8* %6 to %union.tree_node*
  store %union.tree_node* %7, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %cmp1545 = icmp eq i8* %6, null
  br i1 %cmp1545, label %if.end40, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %if.then14, %while.body
  %storemerge46 = phi %union.tree_node* [ %10, %while.body ], [ %7, %if.then14 ]
  %lang_flag_4 = getelementptr inbounds %union.tree_node* %storemerge46, i64 0, i32 0, i32 5
  %8 = bitcast i48* %lang_flag_4 to i64*
  %bf.load17 = load i64* %8, align 8
  %bf.cast = and i64 %bf.load17, 2199023255552
  %cmp19 = icmp eq i64 %bf.cast, 0
  br i1 %cmp19, label %if.end40, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true16
  %name = getelementptr inbounds %union.tree_node* %storemerge46, i64 0, i32 0, i32 8
  %9 = load %union.tree_node** %name, align 8, !tbaa !11
  %cmp21 = icmp eq %union.tree_node* %9, null
  br i1 %cmp21, label %while.body, label %if.end40

while.body:                                       ; preds = %land.rhs
  %chain23 = getelementptr inbounds %union.tree_node* %storemerge46, i64 0, i32 0, i32 0, i32 0
  %10 = load %union.tree_node** %chain23, align 8, !tbaa !28
  store %union.tree_node* %10, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %cmp15 = icmp eq %union.tree_node* %10, null
  br i1 %cmp15, label %if.end40, label %land.lhs.true16

if.then29:                                        ; preds = %for.end
  %values31 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 1
  %11 = load i8** %values31, align 8
  %tobool32 = icmp eq i8* %11, null
  br i1 %tobool32, label %if.else37, label %if.then33

if.then33:                                        ; preds = %if.then29
  %12 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !7
  %minval = getelementptr inbounds i8* %11, i64 104
  %13 = bitcast i8* %minval to %union.tree_node**
  %14 = load %union.tree_node** %13, align 8, !tbaa !31
  %call = tail call %union.tree_node* @convert(%union.tree_node* %12, %union.tree_node* %14) #6
  store %union.tree_node* %call, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br label %if.end40

if.else37:                                        ; preds = %if.then29
  %15 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 17), align 8, !tbaa !7
  store %union.tree_node* %15, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br label %if.end40

if.end40:                                         ; preds = %land.rhs, %while.body, %land.lhs.true16, %if.then14, %for.end, %if.else37, %if.then33
  store i32 0, i32* @constructor_incremental, align 4, !tbaa !27
  br label %return

return:                                           ; preds = %entry, %if.end40
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @warning_init(i8* %msgid) #0 {
entry:
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([3 x i8]* @.str81, i64 0, i64 0), i8* %msgid) #6
  %0 = load %struct.spelling** @spelling_base, align 8, !tbaa !7
  %1 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %cmp11.i = icmp ult %struct.spelling* %0, %1
  br i1 %cmp11.i, label %for.body.i, label %spelling_length.exit.thread

spelling_length.exit.thread:                      ; preds = %entry
  %2 = alloca i8, align 1
  br label %print_spelling.exit

for.body.i:                                       ; preds = %entry, %for.inc.i
  %p.013.i = phi %struct.spelling* [ %incdec.ptr.i, %for.inc.i ], [ %0, %entry ]
  %size.012.i = phi i32 [ %size.1.i, %for.inc.i ], [ 0, %entry ]
  %kind.i = getelementptr inbounds %struct.spelling* %p.013.i, i64 0, i32 0
  %3 = load i32* %kind.i, align 4, !tbaa !58
  %cmp1.i = icmp eq i32 %3, 3
  br i1 %cmp1.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body.i
  %add.i = add nsw i32 %size.012.i, 25
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body.i
  %s.i = getelementptr inbounds %struct.spelling* %p.013.i, i64 0, i32 1, i32 0
  %4 = load i8** %s.i, align 8, !tbaa !7
  %call.i = call i64 @strlen(i8* %4) #6
  %conv10.i = zext i32 %size.012.i to i64
  %add2.i = add i64 %conv10.i, 1
  %add3.i = add i64 %add2.i, %call.i
  %conv4.i = trunc i64 %add3.i to i32
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %size.1.i = phi i32 [ %add.i, %if.then.i ], [ %conv4.i, %if.else.i ]
  %incdec.ptr.i = getelementptr inbounds %struct.spelling* %p.013.i, i64 1
  %cmp.i = icmp ult %struct.spelling* %incdec.ptr.i, %1
  br i1 %cmp.i, label %for.body.i, label %spelling_length.exit

spelling_length.exit:                             ; preds = %for.inc.i
  %add = add nsw i32 %size.1.i, 1
  %conv = sext i32 %add to i64
  %5 = alloca i8, i64 %conv, align 1
  br i1 %cmp11.i, label %for.body.i4, label %print_spelling.exit

for.body.i4:                                      ; preds = %spelling_length.exit, %for.inc13.i
  %p.034.i = phi %struct.spelling* [ %incdec.ptr14.i, %for.inc13.i ], [ %0, %spelling_length.exit ]
  %d.033.i = phi i8* [ %d.3.i, %for.inc13.i ], [ %5, %spelling_length.exit ]
  %kind.i3 = getelementptr inbounds %struct.spelling* %p.034.i, i64 0, i32 0
  %6 = load i32* %kind.i3, align 4, !tbaa !58
  switch i32 %6, label %if.end.i [
    i32 3, label %if.then.i6
    i32 2, label %if.then5.i
  ]

if.then.i6:                                       ; preds = %for.body.i4
  %u.i = getelementptr inbounds %struct.spelling* %p.034.i, i64 0, i32 1
  %i.i = bitcast %union.anon.4* %u.i to i32*
  %7 = load i32* %i.i, align 4, !tbaa !27
  %call.i5 = call i32 (i8*, i8*, ...)* @sprintf(i8* %d.033.i, i8* getelementptr inbounds ([5 x i8]* @.str162, i64 0, i64 0), i32 %7) #6
  %call2.i = call i64 @strlen(i8* %d.033.i) #6
  %add.ptr.i = getelementptr inbounds i8* %d.033.i, i64 %call2.i
  br label %for.inc13.i

if.then5.i:                                       ; preds = %for.body.i4
  %incdec.ptr.i7 = getelementptr inbounds i8* %d.033.i, i64 1
  store i8 46, i8* %d.033.i, align 1, !tbaa !34
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %for.body.i4
  %d.1.i = phi i8* [ %incdec.ptr.i7, %if.then5.i ], [ %d.033.i, %for.body.i4 ]
  %s7.i = getelementptr inbounds %struct.spelling* %p.034.i, i64 0, i32 1, i32 0
  %8 = load i8** %s7.i, align 8, !tbaa !7
  %9 = load i8* %8, align 1, !tbaa !34
  store i8 %9, i8* %d.1.i, align 1, !tbaa !34
  %tobool29.i = icmp eq i8 %9, 0
  br i1 %tobool29.i, label %for.inc13.i, label %for.inc.i8

for.inc.i8:                                       ; preds = %if.end.i, %for.inc.i8
  %s.031.i = phi i8* [ %incdec.ptr9.i, %for.inc.i8 ], [ %8, %if.end.i ]
  %d.230.i = phi i8* [ %incdec.ptr11.i, %for.inc.i8 ], [ %d.1.i, %if.end.i ]
  %incdec.ptr9.i = getelementptr inbounds i8* %s.031.i, i64 1
  %incdec.ptr11.i = getelementptr inbounds i8* %d.230.i, i64 1
  %10 = load i8* %incdec.ptr9.i, align 1, !tbaa !34
  store i8 %10, i8* %incdec.ptr11.i, align 1, !tbaa !34
  %tobool.i = icmp eq i8 %10, 0
  br i1 %tobool.i, label %for.inc13.i, label %for.inc.i8

for.inc13.i:                                      ; preds = %for.inc.i8, %if.end.i, %if.then.i6
  %d.3.i = phi i8* [ %add.ptr.i, %if.then.i6 ], [ %d.1.i, %if.end.i ], [ %incdec.ptr11.i, %for.inc.i8 ]
  %incdec.ptr14.i = getelementptr inbounds %struct.spelling* %p.034.i, i64 1
  %11 = load %struct.spelling** @spelling, align 8, !tbaa !7
  %cmp.i9 = icmp ult %struct.spelling* %incdec.ptr14.i, %11
  br i1 %cmp.i9, label %for.body.i4, label %print_spelling.exit

print_spelling.exit:                              ; preds = %for.inc13.i, %spelling_length.exit.thread, %spelling_length.exit
  %12 = phi i8* [ %5, %spelling_length.exit ], [ %2, %spelling_length.exit.thread ], [ %5, %for.inc13.i ]
  %d.0.lcssa.i = phi i8* [ %5, %spelling_length.exit ], [ %2, %spelling_length.exit.thread ], [ %d.3.i, %for.inc13.i ]
  store i8 0, i8* %d.0.lcssa.i, align 1, !tbaa !34
  %13 = load i8* %12, align 1, !tbaa !34
  %tobool = icmp eq i8 %13, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %print_spelling.exit
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([31 x i8]* @.str111, i64 0, i64 0), i8* %12) #6
  br label %if.end

if.end:                                           ; preds = %print_spelling.exit, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @output_pending_init_elements(i32 %all) #0 {
entry:
  %0 = load %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  %tobool173 = icmp eq %struct.init_node* %0, null
  br i1 %tobool173, label %if.then110, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %tobool107 = icmp ne i32 %all, 0
  br label %while.body

while.body:                                       ; preds = %if.else74, %if.then66, %if.else13, %if.then7, %while.cond.backedge, %while.body.lr.ph
  %elt.1174 = phi %struct.init_node* [ %0, %while.body.lr.ph ], [ %elt.1.be, %while.cond.backedge ], [ %10, %if.then7 ], [ %11, %if.else13 ], [ %22, %if.then66 ], [ %23, %if.else74 ]
  %1 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %while.cond.backedge [
    i32 18, label %if.then
    i32 20, label %if.then47
    i32 21, label %if.then47
  ]

if.then:                                          ; preds = %while.body
  %purpose = getelementptr inbounds %struct.init_node* %elt.1174, i64 0, i32 4
  %2 = load %union.tree_node** %purpose, align 8, !tbaa !104
  %3 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %call = tail call i32 @tree_int_cst_equal(%union.tree_node* %2, %union.tree_node* %3) #6
  %tobool1 = icmp eq i32 %call, 0
  br i1 %tobool1, label %if.else, label %if.then2

if.then2:                                         ; preds = %if.then
  %value = getelementptr inbounds %struct.init_node* %elt.1174, i64 0, i32 5
  %4 = load %union.tree_node** %value, align 8, !tbaa !106
  %5 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %type = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type, align 8, !tbaa !1
  %7 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  tail call fastcc void @output_init_element(%union.tree_node* %4, %union.tree_node* %6, %union.tree_node* %7, i32 0)
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %9 = load %union.tree_node** %purpose, align 8, !tbaa !104
  %call5 = tail call i32 @tree_int_cst_lt(%union.tree_node* %8, %union.tree_node* %9) #6
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %if.else13, label %if.then7

if.then7:                                         ; preds = %if.else
  %left = getelementptr inbounds %struct.init_node* %elt.1174, i64 0, i32 0
  %10 = load %struct.init_node** %left, align 8, !tbaa !107
  %tobool8 = icmp eq %struct.init_node* %10, null
  br i1 %tobool8, label %while.end106, label %while.body

if.else13:                                        ; preds = %if.else
  %right = getelementptr inbounds %struct.init_node* %elt.1174, i64 0, i32 1
  %11 = load %struct.init_node** %right, align 8, !tbaa !108
  %tobool14 = icmp eq %struct.init_node* %11, null
  br i1 %tobool14, label %while.cond18, label %while.body

while.cond18:                                     ; preds = %if.else13, %land.rhs
  %elt.2 = phi %struct.init_node* [ %12, %land.rhs ], [ %elt.1174, %if.else13 ]
  %parent = getelementptr inbounds %struct.init_node* %elt.2, i64 0, i32 2
  %12 = load %struct.init_node** %parent, align 8, !tbaa !109
  %tobool19 = icmp eq %struct.init_node* %12, null
  br i1 %tobool19, label %if.then110, label %land.rhs

land.rhs:                                         ; preds = %while.cond18
  %right21 = getelementptr inbounds %struct.init_node* %12, i64 0, i32 1
  %13 = load %struct.init_node** %right21, align 8, !tbaa !108
  %cmp22 = icmp eq %struct.init_node* %13, %elt.2
  br i1 %cmp22, label %while.cond18, label %land.lhs.true

land.lhs.true:                                    ; preds = %land.rhs
  %14 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %purpose27 = getelementptr inbounds %struct.init_node* %12, i64 0, i32 4
  %15 = load %union.tree_node** %purpose27, align 8, !tbaa !104
  %call28 = tail call i32 @tree_int_cst_lt(%union.tree_node* %14, %union.tree_node* %15) #6
  %tobool29 = icmp eq i32 %call28, 0
  br i1 %tobool29, label %while.cond.backedge, label %while.end106

if.then47:                                        ; preds = %while.body, %while.body
  %16 = load %union.tree_node** @constructor_unfilled_fields, align 8
  %cmp48 = icmp eq %union.tree_node* %16, null
  br i1 %cmp48, label %if.then110, label %if.end50

if.end50:                                         ; preds = %if.then47
  %call51 = tail call %union.tree_node* @bit_position(%union.tree_node* %16) #6
  %purpose52 = getelementptr inbounds %struct.init_node* %elt.1174, i64 0, i32 4
  %17 = load %union.tree_node** %purpose52, align 8, !tbaa !104
  %call53 = tail call %union.tree_node* @bit_position(%union.tree_node* %17) #6
  %call54 = tail call i32 @tree_int_cst_equal(%union.tree_node* %call53, %union.tree_node* %call51) #6
  %tobool55 = icmp eq i32 %call54, 0
  br i1 %tobool55, label %if.else63, label %if.then56

if.then56:                                        ; preds = %if.end50
  %18 = load %union.tree_node** %purpose52, align 8, !tbaa !104
  store %union.tree_node* %18, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %value58 = getelementptr inbounds %struct.init_node* %elt.1174, i64 0, i32 5
  %19 = load %union.tree_node** %value58, align 8, !tbaa !106
  %20 = load %union.tree_node** %purpose52, align 8, !tbaa !104
  %type61 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 1
  %21 = load %union.tree_node** %type61, align 8, !tbaa !1
  tail call fastcc void @output_init_element(%union.tree_node* %19, %union.tree_node* %21, %union.tree_node* %20, i32 0)
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then56, %if.then2, %land.lhs.true93, %land.lhs.true, %if.then123, %if.then130, %while.body, %if.end111
  %elt.1.be = phi %struct.init_node* [ %elt.1174, %if.then2 ], [ %12, %land.lhs.true ], [ %elt.1174, %if.then56 ], [ %24, %land.lhs.true93 ], [ %elt.6, %if.then123 ], [ %elt.6, %if.then130 ], [ %elt.1174, %while.body ], [ %elt.6, %if.end111 ]
  %tobool = icmp eq %struct.init_node* %elt.1.be, null
  br i1 %tobool, label %if.then110, label %while.body

if.else63:                                        ; preds = %if.end50
  %call64 = tail call i32 @tree_int_cst_lt(%union.tree_node* %call51, %union.tree_node* %call53) #6
  %tobool65 = icmp eq i32 %call64, 0
  br i1 %tobool65, label %if.else74, label %if.then66

if.then66:                                        ; preds = %if.else63
  %left67 = getelementptr inbounds %struct.init_node* %elt.1174, i64 0, i32 0
  %22 = load %struct.init_node** %left67, align 8, !tbaa !107
  %tobool68 = icmp eq %struct.init_node* %22, null
  br i1 %tobool68, label %while.end106, label %while.body

if.else74:                                        ; preds = %if.else63
  %right75 = getelementptr inbounds %struct.init_node* %elt.1174, i64 0, i32 1
  %23 = load %struct.init_node** %right75, align 8, !tbaa !108
  %tobool76 = icmp eq %struct.init_node* %23, null
  br i1 %tobool76, label %while.cond80, label %while.body

while.cond80:                                     ; preds = %if.else74, %land.rhs83
  %elt.4 = phi %struct.init_node* [ %24, %land.rhs83 ], [ %elt.1174, %if.else74 ]
  %parent81 = getelementptr inbounds %struct.init_node* %elt.4, i64 0, i32 2
  %24 = load %struct.init_node** %parent81, align 8, !tbaa !109
  %tobool82 = icmp eq %struct.init_node* %24, null
  br i1 %tobool82, label %if.then110, label %land.rhs83

land.rhs83:                                       ; preds = %while.cond80
  %right85 = getelementptr inbounds %struct.init_node* %24, i64 0, i32 1
  %25 = load %struct.init_node** %right85, align 8, !tbaa !108
  %cmp86 = icmp eq %struct.init_node* %25, %elt.4
  br i1 %cmp86, label %while.cond80, label %land.lhs.true93

land.lhs.true93:                                  ; preds = %land.rhs83
  %purpose94 = getelementptr inbounds %struct.init_node* %24, i64 0, i32 4
  %26 = load %union.tree_node** %purpose94, align 8, !tbaa !104
  %call95 = tail call %union.tree_node* @bit_position(%union.tree_node* %26) #6
  %call96 = tail call i32 @tree_int_cst_lt(%union.tree_node* %call51, %union.tree_node* %call95) #6
  %tobool97 = icmp eq i32 %call96, 0
  br i1 %tobool97, label %while.cond.backedge, label %while.end106

while.end106:                                     ; preds = %land.lhs.true93, %if.then66, %land.lhs.true, %if.then7
  %next.0.in = phi %union.tree_node** [ %purpose, %if.then7 ], [ %purpose27, %land.lhs.true ], [ %purpose52, %if.then66 ], [ %purpose94, %land.lhs.true93 ]
  %elt.6 = phi %struct.init_node* [ %elt.1174, %if.then7 ], [ %12, %land.lhs.true ], [ %elt.1174, %if.then66 ], [ %24, %land.lhs.true93 ]
  %next.0 = load %union.tree_node** %next.0.in, align 8
  %cmp109 = icmp ne %union.tree_node* %next.0, null
  %or.cond = and i1 %tobool107, %cmp109
  br i1 %or.cond, label %if.end111, label %if.then110

if.then110:                                       ; preds = %while.end106, %if.then47, %while.cond.backedge, %while.cond80, %while.cond18, %entry
  ret void

if.end111:                                        ; preds = %while.end106
  %27 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code113 = getelementptr inbounds %union.tree_node* %27, i64 0, i32 0, i32 0, i32 2
  %bf.load114 = load i32* %code113, align 8
  %bf.clear115 = and i32 %bf.load114, 255
  switch i32 %bf.clear115, label %while.cond.backedge [
    i32 20, label %if.then123
    i32 21, label %if.then123
    i32 18, label %if.then130
  ]

if.then123:                                       ; preds = %if.end111, %if.end111
  store %union.tree_node* %next.0, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  br label %while.cond.backedge

if.then130:                                       ; preds = %if.end111
  store %union.tree_node* %next.0, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br label %while.cond.backedge
}

declare %union.tree_node* @nreverse(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define void @set_init_index(%union.tree_node* %first, %union.tree_node* %last) #0 {
entry:
  %call = tail call fastcc i32 @set_designator(i32 1)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %if.end129

if.end:                                           ; preds = %entry
  store i1 true, i1* @designator_errorneous, align 1
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %if.end
  %first.addr.0 = phi %union.tree_node* [ %first, %if.end ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %first.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %while.cond
  %type = getelementptr inbounds %union.tree_node* %first.addr.0, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !1
  %type13 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type13, i64 0, i32 6
  %bf.load14 = load i32* %mode, align 4
  %operands = getelementptr inbounds %union.tree_node* %first.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %type17 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type17, align 8, !tbaa !1
  %type18 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode19 = getelementptr inbounds %struct.tree_type* %type18, i64 0, i32 6
  %bf.load20 = load i32* %mode19, align 4
  %bf.lshr156 = xor i32 %bf.load20, %bf.load14
  %3 = and i32 %bf.lshr156, 65024
  %cmp23 = icmp eq i32 %3, 0
  br i1 %cmp23, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.rhs
  %tobool27 = icmp eq %union.tree_node* %last, null
  br i1 %tobool27, label %if.end72, label %while.cond29

while.cond29:                                     ; preds = %while.end, %land.rhs47
  %last.addr.0 = phi %union.tree_node* [ %5, %land.rhs47 ], [ %last, %while.end ]
  %code31 = getelementptr inbounds %union.tree_node* %last.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load32 = load i32* %code31, align 8
  %bf.clear33 = and i32 %bf.load32, 255
  %bf.clear33.off = add i32 %bf.clear33, -114
  %switch157 = icmp ult i32 %bf.clear33.off, 3
  br i1 %switch157, label %land.rhs47, label %if.end72

land.rhs47:                                       ; preds = %while.cond29
  %type49 = getelementptr inbounds %union.tree_node* %last.addr.0, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type49, align 8, !tbaa !1
  %type50 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %mode51 = getelementptr inbounds %struct.tree_type* %type50, i64 0, i32 6
  %bf.load52 = load i32* %mode51, align 4
  %operands56 = getelementptr inbounds %union.tree_node* %last.addr.0, i64 0, i32 0, i32 2
  %arrayidx57 = bitcast i32* %operands56 to %union.tree_node**
  %5 = load %union.tree_node** %arrayidx57, align 8, !tbaa !7
  %type59 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type59, align 8, !tbaa !1
  %type60 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %mode61 = getelementptr inbounds %struct.tree_type* %type60, i64 0, i32 6
  %bf.load62 = load i32* %mode61, align 4
  %bf.lshr53155 = xor i32 %bf.load62, %bf.load52
  %7 = and i32 %bf.lshr53155, 65024
  %cmp65 = icmp eq i32 %7, 0
  br i1 %cmp65, label %while.cond29, label %if.end72

if.end72:                                         ; preds = %while.cond29, %land.rhs47, %while.end
  %last.addr.1 = phi %union.tree_node* [ null, %while.end ], [ %last.addr.0, %land.rhs47 ], [ %last.addr.0, %while.cond29 ]
  %cmp77 = icmp eq i32 %bf.clear, 25
  br i1 %cmp77, label %if.else, label %if.then78

if.then78:                                        ; preds = %if.end72
  tail call void @error_init(i8* getelementptr inbounds ([39 x i8]* @.str121, i64 0, i64 0))
  br label %if.end129

if.else:                                          ; preds = %if.end72
  %cmp79 = icmp ne %union.tree_node* %last.addr.1, null
  br i1 %cmp79, label %land.lhs.true, label %if.else86

land.lhs.true:                                    ; preds = %if.else
  %code81 = getelementptr inbounds %union.tree_node* %last.addr.1, i64 0, i32 0, i32 0, i32 2
  %bf.load82 = load i32* %code81, align 8
  %bf.clear83 = and i32 %bf.load82, 255
  %cmp84 = icmp eq i32 %bf.clear83, 25
  br i1 %cmp84, label %if.else86, label %if.then85

if.then85:                                        ; preds = %land.lhs.true
  tail call void @error_init(i8* getelementptr inbounds ([39 x i8]* @.str121, i64 0, i64 0))
  br label %if.end129

if.else86:                                        ; preds = %land.lhs.true, %if.else
  %8 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code88 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load89 = load i32* %code88, align 8
  %bf.clear90 = and i32 %bf.load89, 255
  %cmp91 = icmp eq i32 %bf.clear90, 18
  br i1 %cmp91, label %if.else93, label %if.then92

if.then92:                                        ; preds = %if.else86
  tail call void @error_init(i8* getelementptr inbounds ([37 x i8]* @.str122, i64 0, i64 0))
  br label %if.end129

if.else93:                                        ; preds = %if.else86
  %9 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %tobool94 = icmp eq %union.tree_node* %9, null
  br i1 %tobool94, label %if.else99, label %land.lhs.true95

land.lhs.true95:                                  ; preds = %if.else93
  %call96 = tail call i32 @tree_int_cst_lt(%union.tree_node* %9, %union.tree_node* %first.addr.0) #6
  %tobool97 = icmp eq i32 %call96, 0
  br i1 %tobool97, label %if.else99, label %if.then98

if.then98:                                        ; preds = %land.lhs.true95
  tail call void @error_init(i8* getelementptr inbounds ([48 x i8]* @.str123, i64 0, i64 0))
  br label %if.end129

if.else99:                                        ; preds = %land.lhs.true95, %if.else93
  %10 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !7
  %call100 = tail call %union.tree_node* @convert(%union.tree_node* %10, %union.tree_node* %first.addr.0) #6
  store %union.tree_node* %call100, %union.tree_node** @constructor_index, align 8, !tbaa !7
  br i1 %cmp79, label %if.then102, label %if.end120

if.then102:                                       ; preds = %if.else99
  %call103 = tail call i32 @tree_int_cst_equal(%union.tree_node* %first.addr.0, %union.tree_node* %last.addr.1) #6
  %tobool104 = icmp eq i32 %call103, 0
  br i1 %tobool104, label %if.else106, label %if.end120

if.else106:                                       ; preds = %if.then102
  %call107 = tail call i32 @tree_int_cst_lt(%union.tree_node* %last.addr.1, %union.tree_node* %first.addr.0) #6
  %tobool108 = icmp eq i32 %call107, 0
  br i1 %tobool108, label %if.else110, label %if.then109

if.then109:                                       ; preds = %if.else106
  tail call void @error_init(i8* getelementptr inbounds ([33 x i8]* @.str124, i64 0, i64 0))
  br label %if.end120

if.else110:                                       ; preds = %if.else106
  %11 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !7
  %call111 = tail call %union.tree_node* @convert(%union.tree_node* %11, %union.tree_node* %last.addr.1) #6
  %12 = load %union.tree_node** @constructor_max_index, align 8, !tbaa !7
  %cmp112 = icmp eq %union.tree_node* %12, null
  br i1 %cmp112, label %if.end120, label %land.lhs.true113

land.lhs.true113:                                 ; preds = %if.else110
  %call114 = tail call i32 @tree_int_cst_lt(%union.tree_node* %12, %union.tree_node* %call111) #6
  %tobool115 = icmp eq i32 %call114, 0
  br i1 %tobool115, label %if.end120, label %if.then116

if.then116:                                       ; preds = %land.lhs.true113
  tail call void @error_init(i8* getelementptr inbounds ([54 x i8]* @.str125, i64 0, i64 0))
  br label %if.end120

if.end120:                                        ; preds = %if.then102, %land.lhs.true113, %if.else110, %if.then116, %if.then109, %if.else99
  %last.addr.2 = phi %union.tree_node* [ null, %if.then109 ], [ null, %if.then116 ], [ %call111, %land.lhs.true113 ], [ %call111, %if.else110 ], [ null, %if.else99 ], [ null, %if.then102 ]
  %13 = load i32* @designator_depth, align 4, !tbaa !27
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* @designator_depth, align 4, !tbaa !27
  store i1 false, i1* @designator_errorneous, align 1
  %14 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %tobool121 = icmp ne %struct.constructor_range_stack* %14, null
  %tobool123 = icmp ne %union.tree_node* %last.addr.2, null
  %or.cond = or i1 %tobool121, %tobool123
  br i1 %or.cond, label %if.then124, label %if.end129

if.then124:                                       ; preds = %if.end120
  %call.i = tail call i8* @ggc_alloc(i64 56) #6
  %15 = bitcast i8* %call.i to %struct.constructor_range_stack*
  %16 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %prev.i = getelementptr inbounds i8* %call.i, i64 8
  %17 = bitcast i8* %prev.i to %struct.constructor_range_stack**
  store %struct.constructor_range_stack* %16, %struct.constructor_range_stack** %17, align 8, !tbaa !100
  %next.i = bitcast i8* %call.i to %struct.constructor_range_stack**
  store %struct.constructor_range_stack* null, %struct.constructor_range_stack** %next.i, align 8, !tbaa !103
  %18 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %fields.i = getelementptr inbounds i8* %call.i, i64 48
  %19 = bitcast i8* %fields.i to %union.tree_node**
  store %union.tree_node* %18, %union.tree_node** %19, align 8, !tbaa !101
  %20 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %range_start.i = getelementptr inbounds i8* %call.i, i64 24
  %21 = bitcast i8* %range_start.i to %union.tree_node**
  store %union.tree_node* %20, %union.tree_node** %21, align 8, !tbaa !102
  %22 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %index.i = getelementptr inbounds i8* %call.i, i64 32
  %23 = bitcast i8* %index.i to %union.tree_node**
  store %union.tree_node* %22, %union.tree_node** %23, align 8, !tbaa !99
  %24 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %stack.i = getelementptr inbounds i8* %call.i, i64 16
  %25 = bitcast i8* %stack.i to %struct.constructor_stack**
  store %struct.constructor_stack* %24, %struct.constructor_stack** %25, align 8, !tbaa !96
  %range_end1.i = getelementptr inbounds i8* %call.i, i64 40
  %26 = bitcast i8* %range_end1.i to %union.tree_node**
  store %union.tree_node* %last.addr.2, %union.tree_node** %26, align 8, !tbaa !98
  %27 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %tobool.i = icmp eq %struct.constructor_range_stack* %27, null
  br i1 %tobool.i, label %push_range_stack.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then124
  %next2.i = getelementptr inbounds %struct.constructor_range_stack* %27, i64 0, i32 0
  store %struct.constructor_range_stack* %15, %struct.constructor_range_stack** %next2.i, align 8, !tbaa !103
  br label %push_range_stack.exit

push_range_stack.exit:                            ; preds = %if.then124, %if.then.i
  store %struct.constructor_range_stack* %15, %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  br label %if.end129

if.end129:                                        ; preds = %entry, %if.then85, %if.then98, %if.end120, %push_range_stack.exit, %if.then92, %if.then78
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @set_designator(i32 %array) #0 {
entry:
  %0 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %cmp = icmp eq %union.tree_node* %0, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %.b = load i1* @designator_errorneous, align 1
  br i1 %.b, label %return, label %if.end2

if.end2:                                          ; preds = %if.end
  %1 = load i32* @designator_depth, align 4, !tbaa !27
  %tobool3 = icmp eq i32 %1, 0
  br i1 %tobool3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.end2
  %2 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %tobool5 = icmp eq %struct.constructor_range_stack* %2, null
  br i1 %tobool5, label %while.cond.preheader, label %if.then6

while.cond.preheader:                             ; preds = %if.then4
  %3 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %implicit62 = getelementptr inbounds %struct.constructor_stack* %3, i64 0, i32 16
  %4 = load i8* %implicit62, align 1, !tbaa !89
  %tobool863 = icmp eq i8 %4, 0
  br i1 %tobool863, label %while.end, label %while.body

if.then6:                                         ; preds = %if.then4
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 5645, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.set_designator, i64 0, i64 0)) #7
  unreachable

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %call = tail call %union.tree_node* @pop_init_level(i32 1)
  tail call void @process_init_element(%union.tree_node* %call)
  %5 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %implicit = getelementptr inbounds %struct.constructor_stack* %5, i64 0, i32 16
  %6 = load i8* %implicit, align 1, !tbaa !89
  %tobool8 = icmp eq i8 %6, 0
  br i1 %tobool8, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %while.cond.preheader
  store i32 1, i32* @constructor_designated, align 4, !tbaa !27
  br label %return

if.end9:                                          ; preds = %if.end2
  %7 = load i32* @constructor_no_implicit, align 4, !tbaa !27
  %tobool10 = icmp eq i32 %7, 0
  br i1 %tobool10, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end9
  tail call void @error_init(i8* getelementptr inbounds ([40 x i8]* @.str153, i64 0, i64 0))
  br label %return

if.end12:                                         ; preds = %if.end9
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else35 [
    i32 20, label %if.then19
    i32 21, label %if.then19
    i32 18, label %if.then30
  ]

if.then19:                                        ; preds = %if.end12, %if.end12
  %8 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %type = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 1
  %9 = load %union.tree_node** %type, align 8, !tbaa !1
  %10 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp21 = icmp eq %union.tree_node* %9, %10
  br i1 %cmp21, label %if.end37, label %if.then22

if.then22:                                        ; preds = %if.then19
  %11 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 15
  %12 = load %union.tree_node** %11, align 8, !tbaa !24
  br label %if.end37

if.then30:                                        ; preds = %if.end12
  %type32 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load %union.tree_node** %type32, align 8, !tbaa !1
  %14 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 15
  %15 = load %union.tree_node** %14, align 8, !tbaa !24
  br label %if.end37

if.else35:                                        ; preds = %if.end12
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0), i32 5673, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.set_designator, i64 0, i64 0)) #7
  unreachable

if.end37:                                         ; preds = %if.then19, %if.then22, %if.then30
  %subtype.0 = phi %union.tree_node* [ %12, %if.then22 ], [ %9, %if.then19 ], [ %15, %if.then30 ]
  %code39 = getelementptr inbounds %union.tree_node* %subtype.0, i64 0, i32 0, i32 0, i32 2
  %bf.load40 = load i32* %code39, align 8
  %bf.clear41 = and i32 %bf.load40, 255
  %tobool42 = icmp ne i32 %array, 0
  %cmp43 = icmp ne i32 %bf.clear41, 18
  %or.cond = and i1 %tobool42, %cmp43
  br i1 %or.cond, label %if.then44, label %if.else45

if.then44:                                        ; preds = %if.end37
  tail call void @error_init(i8* getelementptr inbounds ([37 x i8]* @.str122, i64 0, i64 0))
  br label %return

if.else45:                                        ; preds = %if.end37
  %16 = and i32 %bf.load40, 254
  %switch = icmp eq i32 %16, 20
  %or.cond61 = or i1 %tobool42, %switch
  br i1 %or.cond61, label %if.end53, label %if.then51

if.then51:                                        ; preds = %if.else45
  tail call void @error_init(i8* getelementptr inbounds ([46 x i8]* @.str126, i64 0, i64 0))
  br label %return

if.end53:                                         ; preds = %if.else45
  store i32 1, i32* @constructor_designated, align 4, !tbaa !27
  tail call void @push_init_level(i32 2)
  br label %return

return:                                           ; preds = %if.end, %entry, %if.end53, %if.then51, %if.then44, %if.then11, %while.end
  %retval.0 = phi i32 [ 1, %if.then11 ], [ 1, %if.then44 ], [ 1, %if.then51 ], [ 0, %if.end53 ], [ 0, %while.end ], [ 1, %entry ], [ 1, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @set_init_label(%union.tree_node* readonly %fieldname) #0 {
entry:
  %call = tail call fastcc i32 @set_designator(i32 0)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %if.end18

if.end:                                           ; preds = %entry
  store i1 true, i1* @designator_errorneous, align 1
  %0 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %1 = and i32 %bf.load, 254
  %switch = icmp eq i32 %1, 20
  br i1 %switch, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @error_init(i8* getelementptr inbounds ([46 x i8]* @.str126, i64 0, i64 0))
  br label %if.end18

if.end7:                                          ; preds = %if.end
  %values = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 1
  %2 = load i8** %values, align 8
  %cond25 = icmp eq i8* %2, null
  br i1 %cond25, label %if.then14, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end7
  %3 = bitcast i8* %2 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %tail.026 = phi %union.tree_node* [ %3, %for.body.lr.ph ], [ %5, %for.inc ]
  %name = getelementptr inbounds %union.tree_node* %tail.026, i64 0, i32 0, i32 8
  %4 = load %union.tree_node** %name, align 8, !tbaa !11
  %cmp9 = icmp eq %union.tree_node* %4, %fieldname
  br i1 %cmp9, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node* %tail.026, i64 0, i32 0, i32 0, i32 0
  %5 = load %union.tree_node** %chain, align 8, !tbaa !28
  %cond = icmp eq %union.tree_node* %5, null
  br i1 %cond, label %if.then14, label %for.body

for.end:                                          ; preds = %for.body
  %cmp13 = icmp eq %union.tree_node* %tail.026, null
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %for.inc, %if.end7, %for.end
  %id = getelementptr inbounds %union.tree_node* %fieldname, i64 0, i32 0, i32 1
  %6 = getelementptr inbounds i8** %id, i64 1
  %7 = load i8** %6, align 8, !tbaa !13
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([44 x i8]* @.str127, i64 0, i64 0), i8* %7) #6
  br label %if.end18

if.else:                                          ; preds = %for.end
  store %union.tree_node* %tail.026, %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %8 = load i32* @designator_depth, align 4, !tbaa !27
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* @designator_depth, align 4, !tbaa !27
  store i1 false, i1* @designator_errorneous, align 1
  %9 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %tobool15 = icmp eq %struct.constructor_range_stack* %9, null
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %if.else
  %call.i = tail call i8* @ggc_alloc(i64 56) #6
  %10 = bitcast i8* %call.i to %struct.constructor_range_stack*
  %11 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %prev.i = getelementptr inbounds i8* %call.i, i64 8
  %12 = bitcast i8* %prev.i to %struct.constructor_range_stack**
  store %struct.constructor_range_stack* %11, %struct.constructor_range_stack** %12, align 8, !tbaa !100
  %next.i = bitcast i8* %call.i to %struct.constructor_range_stack**
  store %struct.constructor_range_stack* null, %struct.constructor_range_stack** %next.i, align 8, !tbaa !103
  %13 = load %union.tree_node** @constructor_fields, align 8, !tbaa !7
  %fields.i = getelementptr inbounds i8* %call.i, i64 48
  %14 = bitcast i8* %fields.i to %union.tree_node**
  store %union.tree_node* %13, %union.tree_node** %14, align 8, !tbaa !101
  %15 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %range_start.i = getelementptr inbounds i8* %call.i, i64 24
  %16 = bitcast i8* %range_start.i to %union.tree_node**
  store %union.tree_node* %15, %union.tree_node** %16, align 8, !tbaa !102
  %17 = load %union.tree_node** @constructor_index, align 8, !tbaa !7
  %index.i = getelementptr inbounds i8* %call.i, i64 32
  %18 = bitcast i8* %index.i to %union.tree_node**
  store %union.tree_node* %17, %union.tree_node** %18, align 8, !tbaa !99
  %19 = load %struct.constructor_stack** @constructor_stack, align 8, !tbaa !7
  %stack.i = getelementptr inbounds i8* %call.i, i64 16
  %20 = bitcast i8* %stack.i to %struct.constructor_stack**
  store %struct.constructor_stack* %19, %struct.constructor_stack** %20, align 8, !tbaa !96
  %range_end1.i = getelementptr inbounds i8* %call.i, i64 40
  %21 = bitcast i8* %range_end1.i to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %21, align 8, !tbaa !98
  %22 = load %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  %tobool.i = icmp eq %struct.constructor_range_stack* %22, null
  br i1 %tobool.i, label %push_range_stack.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then16
  %next2.i = getelementptr inbounds %struct.constructor_range_stack* %22, i64 0, i32 0
  store %struct.constructor_range_stack* %10, %struct.constructor_range_stack** %next2.i, align 8, !tbaa !103
  br label %push_range_stack.exit

push_range_stack.exit:                            ; preds = %if.then16, %if.then.i
  store %struct.constructor_range_stack* %10, %struct.constructor_range_stack** @constructor_range_stack, align 8, !tbaa !7
  br label %if.end18

if.end18:                                         ; preds = %if.else, %entry, %push_range_stack.exit, %if.then6, %if.then14
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @output_init_element(%union.tree_node* %value, %union.tree_node* %type, %union.tree_node* %field, i32 %pending) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !1
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.end [
    i32 23, label %if.then
    i32 18, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %entry
  %code11 = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 0, i32 2
  %bf.load12 = load i32* %code11, align 8
  %bf.clear13 = and i32 %bf.load12, 255
  %cmp14 = icmp eq i32 %bf.clear13, 29
  br i1 %cmp14, label %land.lhs.true15, label %land.lhs.true29

land.lhs.true15:                                  ; preds = %land.lhs.true
  %code17 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load18 = load i32* %code17, align 8
  %bf.clear19 = and i32 %bf.load18, 255
  %cmp20 = icmp eq i32 %bf.clear19, 18
  br i1 %cmp20, label %land.lhs.true21, label %land.lhs.true29

land.lhs.true21:                                  ; preds = %land.lhs.true15
  %type23 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type23, align 8, !tbaa !1
  %code25 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load26 = load i32* %code25, align 8
  %bf.clear27 = and i32 %bf.load26, 255
  %cmp28 = icmp eq i32 %bf.clear27, 6
  br i1 %cmp28, label %if.end, label %land.lhs.true29

land.lhs.true29:                                  ; preds = %land.lhs.true21, %land.lhs.true15, %land.lhs.true
  %2 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 15
  %3 = load %union.tree_node** %2, align 8, !tbaa !24
  %4 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %5 = load %union.tree_node** %4, align 8, !tbaa !24
  %call = tail call i32 @comptypes(%union.tree_node* %3, %union.tree_node* %5)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry, %land.lhs.true29
  %call35 = tail call %union.tree_node* @default_conversion(%union.tree_node* %value)
  br label %if.end

if.end:                                           ; preds = %entry, %land.lhs.true29, %if.then, %land.lhs.true21
  %value.addr.0 = phi %union.tree_node* [ %call35, %if.then ], [ %value, %land.lhs.true21 ], [ %value, %land.lhs.true29 ], [ %value, %entry ]
  %code37 = getelementptr inbounds %union.tree_node* %value.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load38 = load i32* %code37, align 8
  %bf.clear39 = and i32 %bf.load38, 255
  %6 = load i32* @require_constant_value, align 4
  %notlhs = icmp ne i32 %bf.clear39, 170
  %notrhs = icmp eq i32 %6, 0
  %or.cond.not = or i1 %notrhs, %notlhs
  %7 = load i32* @flag_isoc99, align 4
  %tobool44 = icmp ne i32 %7, 0
  %or.cond258 = or i1 %or.cond.not, %tobool44
  %or.cond258.not = xor i1 %or.cond258, true
  %tobool46 = icmp ne i32 %pending, 0
  %or.cond259 = and i1 %tobool46, %or.cond258.not
  br i1 %or.cond259, label %if.then47, label %if.end52

if.then47:                                        ; preds = %if.end
  %operands = getelementptr inbounds %union.tree_node* %value.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %8 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %operands49 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 2
  %arrayidx50 = bitcast i32* %operands49 to %union.tree_node**
  %9 = load %union.tree_node** %arrayidx50, align 8, !tbaa !7
  %initial = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 12
  %10 = load %union.tree_node** %initial, align 8, !tbaa !33
  br label %if.end52

if.end52:                                         ; preds = %if.end, %if.then47
  %value.addr.1 = phi %union.tree_node* [ %10, %if.then47 ], [ %value.addr.0, %if.end ]
  %11 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp53 = icmp eq %union.tree_node* %value.addr.1, %11
  br i1 %cmp53, label %if.then54, label %if.else

if.then54:                                        ; preds = %if.end52
  store i32 1, i32* @constructor_erroneous, align 4, !tbaa !27
  br label %if.end92

if.else:                                          ; preds = %if.end52
  %constant_flag = getelementptr inbounds %union.tree_node* %value.addr.1, i64 0, i32 0, i32 0, i32 2
  %bf.load56 = load i32* %constant_flag, align 8
  %bf.clear57 = and i32 %bf.load56, 512
  %tobool58 = icmp eq i32 %bf.clear57, 0
  br i1 %tobool58, label %if.then59, label %if.else60

if.then59:                                        ; preds = %if.else
  store i32 0, i32* @constructor_constant, align 4, !tbaa !27
  br label %if.end92

if.else60:                                        ; preds = %if.else
  %type62 = getelementptr inbounds %union.tree_node* %value.addr.1, i64 0, i32 0, i32 0, i32 1
  %12 = load %union.tree_node** %type62, align 8, !tbaa !1
  %call63 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %value.addr.1, %union.tree_node* %12) #6
  %cmp64 = icmp eq %union.tree_node* %call63, null
  br i1 %cmp64, label %if.then89, label %lor.lhs.false65

lor.lhs.false65:                                  ; preds = %if.else60
  %13 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code67 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 2
  %bf.load68 = load i32* %code67, align 8
  %14 = and i32 %bf.load68, 254
  %switch = icmp eq i32 %14, 20
  br i1 %switch, label %land.lhs.true77, label %if.end92

land.lhs.true77:                                  ; preds = %lor.lhs.false65
  %lang_flag_4 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 5
  %15 = bitcast i48* %lang_flag_4 to i64*
  %bf.load79 = load i64* %15, align 8
  %bf.cast = and i64 %bf.load79, 2199023255552
  %cmp82 = icmp eq i64 %bf.cast, 0
  br i1 %cmp82, label %if.end92, label %land.lhs.true83

land.lhs.true83:                                  ; preds = %land.lhs.true77
  %bf.load86 = load i32* %constant_flag, align 8
  %bf.clear87 = and i32 %bf.load86, 255
  %cmp88 = icmp eq i32 %bf.clear87, 25
  br i1 %cmp88, label %if.end92, label %if.then89

if.then89:                                        ; preds = %land.lhs.true83, %if.else60
  store i32 0, i32* @constructor_simple, align 4, !tbaa !27
  br label %if.end92

if.end92:                                         ; preds = %lor.lhs.false65, %land.lhs.true83, %land.lhs.true77, %if.then59, %if.then89, %if.then54
  %16 = load i32* @require_constant_value, align 4, !tbaa !27
  %tobool93 = icmp eq i32 %16, 0
  br i1 %tobool93, label %if.else102, label %land.lhs.true94

land.lhs.true94:                                  ; preds = %if.end92
  %constant_flag96 = getelementptr inbounds %union.tree_node* %value.addr.1, i64 0, i32 0, i32 0, i32 2
  %bf.load97 = load i32* %constant_flag96, align 8
  %bf.clear99 = and i32 %bf.load97, 512
  %tobool100 = icmp eq i32 %bf.clear99, 0
  br i1 %tobool100, label %if.then101, label %if.else102

if.then101:                                       ; preds = %land.lhs.true94
  tail call void @error_init(i8* getelementptr inbounds ([36 x i8]* @.str150, i64 0, i64 0))
  %17 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %if.end111

if.else102:                                       ; preds = %land.lhs.true94, %if.end92
  %18 = load i32* @require_constant_elements, align 4, !tbaa !27
  %tobool103 = icmp eq i32 %18, 0
  br i1 %tobool103, label %if.end111, label %land.lhs.true104

land.lhs.true104:                                 ; preds = %if.else102
  %type106 = getelementptr inbounds %union.tree_node* %value.addr.1, i64 0, i32 0, i32 0, i32 1
  %19 = load %union.tree_node** %type106, align 8, !tbaa !1
  %call107 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %value.addr.1, %union.tree_node* %19) #6
  %cmp108 = icmp eq %union.tree_node* %call107, null
  br i1 %cmp108, label %if.then109, label %if.end111

if.then109:                                       ; preds = %land.lhs.true104
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([51 x i8]* @.str151, i64 0, i64 0)) #6
  br label %if.end111

if.end111:                                        ; preds = %if.else102, %land.lhs.true104, %if.then109, %if.then101
  %value.addr.2 = phi %union.tree_node* [ %value.addr.1, %if.then109 ], [ %value.addr.1, %land.lhs.true104 ], [ %value.addr.1, %if.else102 ], [ %17, %if.then101 ]
  %tobool112 = icmp ne %union.tree_node* %field, null
  br i1 %tobool112, label %land.lhs.true113, label %if.end139

land.lhs.true113:                                 ; preds = %if.end111
  %type115 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type115, align 8, !tbaa !1
  %21 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp116 = icmp eq %union.tree_node* %20, %21
  br i1 %cmp116, label %if.end257, label %lor.lhs.false117

lor.lhs.false117:                                 ; preds = %land.lhs.true113
  %size = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 2
  %22 = bitcast i32* %size to %union.tree_node**
  %23 = load %union.tree_node** %22, align 8, !tbaa !8
  %cmp121 = icmp eq %union.tree_node* %23, null
  br i1 %cmp121, label %if.end139, label %land.lhs.true122

land.lhs.true122:                                 ; preds = %lor.lhs.false117
  %call127 = tail call i32 @integer_zerop(%union.tree_node* %23) #6
  %tobool128 = icmp eq i32 %call127, 0
  br i1 %tobool128, label %if.end139, label %land.lhs.true129

land.lhs.true129:                                 ; preds = %land.lhs.true122
  %24 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code131 = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load132 = load i32* %code131, align 8
  %bf.clear133 = and i32 %bf.load132, 255
  %cmp134 = icmp eq i32 %bf.clear133, 18
  br i1 %cmp134, label %if.end257, label %lor.lhs.false135

lor.lhs.false135:                                 ; preds = %land.lhs.true129
  %chain = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 0, i32 0
  %25 = load %union.tree_node** %chain, align 8, !tbaa !28
  %tobool137 = icmp eq %union.tree_node* %25, null
  br i1 %tobool137, label %if.end139, label %if.end257

if.end139:                                        ; preds = %lor.lhs.false135, %land.lhs.true122, %lor.lhs.false117, %if.end111
  %26 = load i32* @require_constant_value, align 4, !tbaa !27
  %call140 = tail call fastcc %union.tree_node* @digest_init(%union.tree_node* %type, %union.tree_node* %value.addr.2, i32 %26)
  %27 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp141 = icmp eq %union.tree_node* %call140, %27
  br i1 %cmp141, label %if.then142, label %if.end143

if.then142:                                       ; preds = %if.end139
  store i32 1, i32* @constructor_erroneous, align 4, !tbaa !27
  br label %if.end257

if.end143:                                        ; preds = %if.end139
  %28 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code145 = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 0, i32 2
  %bf.load146 = load i32* %code145, align 8
  %bf.clear147 = and i32 %bf.load146, 255
  %cmp148 = icmp eq i32 %bf.clear147, 18
  br i1 %cmp148, label %land.lhs.true149, label %if.else161

land.lhs.true149:                                 ; preds = %if.end143
  %29 = load i32* @constructor_incremental, align 4, !tbaa !27
  %tobool150 = icmp eq i32 %29, 0
  br i1 %tobool150, label %if.end160, label %lor.lhs.false151

lor.lhs.false151:                                 ; preds = %land.lhs.true149
  %30 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %call152 = tail call i32 @tree_int_cst_equal(%union.tree_node* %field, %union.tree_node* %30) #6
  %tobool153 = icmp eq i32 %call152, 0
  br i1 %tobool153, label %if.then154, label %lor.lhs.false151.if.else161_crit_edge

lor.lhs.false151.if.else161_crit_edge:            ; preds = %lor.lhs.false151
  %.pre = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code163.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre, i64 0, i32 0, i32 0, i32 2
  %bf.load164.pre = load i32* %code163.phi.trans.insert, align 8
  br label %if.else161

if.then154:                                       ; preds = %lor.lhs.false151
  %.pr = load i32* @constructor_incremental, align 4, !tbaa !27
  %tobool155 = icmp eq i32 %.pr, 0
  br i1 %tobool155, label %if.end160, label %land.lhs.true156

land.lhs.true156:                                 ; preds = %if.then154
  %31 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %call157 = tail call i32 @tree_int_cst_lt(%union.tree_node* %field, %union.tree_node* %31) #6
  %tobool158 = icmp eq i32 %call157, 0
  br i1 %tobool158, label %if.end160, label %if.then159

if.then159:                                       ; preds = %land.lhs.true156
  tail call fastcc void @set_nonincremental_init()
  br label %if.end160

if.end160:                                        ; preds = %land.lhs.true149, %land.lhs.true156, %if.then154, %if.then159
  tail call fastcc void @add_pending_init(%union.tree_node* %field, %union.tree_node* %call140)
  br label %if.end257

if.else161:                                       ; preds = %lor.lhs.false151.if.else161_crit_edge, %if.end143
  %bf.load188 = phi i32 [ %bf.load164.pre, %lor.lhs.false151.if.else161_crit_edge ], [ %bf.load146, %if.end143 ]
  %bf.clear165 = and i32 %bf.load188, 255
  %cmp166 = icmp eq i32 %bf.clear165, 20
  br i1 %cmp166, label %land.lhs.true167, label %if.else185

land.lhs.true167:                                 ; preds = %if.else161
  %32 = load i32* @constructor_incremental, align 4, !tbaa !27
  %tobool168 = icmp ne i32 %32, 0
  %33 = load %union.tree_node** @constructor_unfilled_fields, align 8
  %cmp170 = icmp eq %union.tree_node* %33, %field
  %or.cond = and i1 %tobool168, %cmp170
  br i1 %or.cond, label %if.else185.thread, label %if.then171

if.else185.thread:                                ; preds = %land.lhs.true167
  %34 = load %union.tree_node** @constructor_elements, align 8
  br label %if.end204

if.then171:                                       ; preds = %land.lhs.true167
  %tobool172 = icmp eq i32 %32, 0
  br i1 %tobool172, label %if.end184, label %if.then173

if.then173:                                       ; preds = %if.then171
  %tobool174 = icmp eq %union.tree_node* %33, null
  br i1 %tobool174, label %if.then175, label %if.else176

if.then175:                                       ; preds = %if.then173
  tail call fastcc void @set_nonincremental_init()
  br label %if.end184

if.else176:                                       ; preds = %if.then173
  %call177 = tail call %union.tree_node* @bit_position(%union.tree_node* %field) #6
  %35 = load %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %call178 = tail call %union.tree_node* @bit_position(%union.tree_node* %35) #6
  %call179 = tail call i32 @tree_int_cst_lt(%union.tree_node* %call177, %union.tree_node* %call178) #6
  %tobool180 = icmp eq i32 %call179, 0
  br i1 %tobool180, label %if.end184, label %if.then181

if.then181:                                       ; preds = %if.else176
  tail call fastcc void @set_nonincremental_init()
  br label %if.end184

if.end184:                                        ; preds = %if.else176, %if.then171, %if.then175, %if.then181
  tail call fastcc void @add_pending_init(%union.tree_node* %field, %union.tree_node* %call140)
  br label %if.end257

if.else185:                                       ; preds = %if.else161
  %cmp190 = icmp eq i32 %bf.clear165, 21
  %36 = load %union.tree_node** @constructor_elements, align 8
  %tobool192 = icmp ne %union.tree_node* %36, null
  %or.cond260 = and i1 %cmp190, %tobool192
  br i1 %or.cond260, label %if.then193, label %if.end204

if.then193:                                       ; preds = %if.else185
  %value194 = getelementptr inbounds %union.tree_node* %36, i64 0, i32 0, i32 2
  %37 = bitcast i32* %value194 to %union.tree_node**
  %38 = load %union.tree_node** %37, align 8, !tbaa !25
  %side_effects_flag = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 0, i32 2
  %bf.load196 = load i32* %side_effects_flag, align 8
  %bf.clear198 = and i32 %bf.load196, 256
  %tobool199 = icmp eq i32 %bf.clear198, 0
  br i1 %tobool199, label %if.end201, label %if.then200

if.then200:                                       ; preds = %if.then193
  tail call fastcc void @warning_init(i8* getelementptr inbounds ([48 x i8]* @.str152, i64 0, i64 0))
  br label %if.end201

if.end201:                                        ; preds = %if.then193, %if.then200
  store %union.tree_node* null, %union.tree_node** @constructor_elements, align 8, !tbaa !7
  br label %if.end204

if.end204:                                        ; preds = %if.else185.thread, %if.end201, %if.else185
  %39 = phi %union.tree_node* [ null, %if.end201 ], [ %36, %if.else185 ], [ %34, %if.else185.thread ]
  br i1 %tobool112, label %land.lhs.true206, label %if.end214

land.lhs.true206:                                 ; preds = %if.end204
  %code208 = getelementptr inbounds %union.tree_node* %field, i64 0, i32 0, i32 0, i32 2
  %bf.load209 = load i32* %code208, align 8
  %bf.clear210 = and i32 %bf.load209, 255
  %cmp211 = icmp eq i32 %bf.clear210, 25
  br i1 %cmp211, label %if.then212, label %if.end214

if.then212:                                       ; preds = %land.lhs.true206
  %call213 = tail call %union.tree_node* @copy_node(%union.tree_node* %field) #6
  %.pre302 = load %union.tree_node** @constructor_elements, align 8, !tbaa !7
  br label %if.end214

if.end214:                                        ; preds = %if.then212, %land.lhs.true206, %if.end204
  %40 = phi %union.tree_node* [ %.pre302, %if.then212 ], [ %39, %land.lhs.true206 ], [ %39, %if.end204 ]
  %field.addr.0 = phi %union.tree_node* [ %call213, %if.then212 ], [ %field, %land.lhs.true206 ], [ null, %if.end204 ]
  %call215 = tail call %union.tree_node* @tree_cons(%union.tree_node* %field.addr.0, %union.tree_node* %call140, %union.tree_node* %40) #6
  store %union.tree_node* %call215, %union.tree_node** @constructor_elements, align 8, !tbaa !7
  %41 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code217 = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 0, i32 2
  %bf.load218 = load i32* %code217, align 8
  %bf.clear219 = and i32 %bf.load218, 255
  switch i32 %bf.clear219, label %if.end254 [
    i32 18, label %if.then221
    i32 20, label %if.then229
    i32 21, label %if.then251
  ]

if.then221:                                       ; preds = %if.end214
  %42 = load %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  %43 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 8, !tbaa !7
  %call222 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %42, %union.tree_node* %43) #6
  store %union.tree_node* %call222, %union.tree_node** @constructor_unfilled_index, align 8, !tbaa !7
  br label %if.end254

if.then229:                                       ; preds = %if.end214
  %44 = load %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %if.then229
  %.pn = phi %union.tree_node* [ %44, %if.then229 ], [ %storemerge, %land.rhs ]
  %storemerge.in = getelementptr inbounds %union.tree_node* %.pn, i64 0, i32 0, i32 0, i32 0
  %storemerge = load %union.tree_node** %storemerge.in, align 8
  store %union.tree_node* %storemerge, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  %cmp232 = icmp eq %union.tree_node* %storemerge, null
  br i1 %cmp232, label %if.end254, label %land.lhs.true233

land.lhs.true233:                                 ; preds = %while.cond
  %lang_flag_4235 = getelementptr inbounds %union.tree_node* %storemerge, i64 0, i32 0, i32 5
  %45 = bitcast i48* %lang_flag_4235 to i64*
  %bf.load236 = load i64* %45, align 8
  %bf.cast239 = and i64 %bf.load236, 2199023255552
  %cmp240 = icmp eq i64 %bf.cast239, 0
  br i1 %cmp240, label %if.end254, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true233
  %name = getelementptr inbounds %union.tree_node* %storemerge, i64 0, i32 0, i32 8
  %46 = load %union.tree_node** %name, align 8, !tbaa !11
  %cmp242 = icmp eq %union.tree_node* %46, null
  br i1 %cmp242, label %while.cond, label %if.end254

if.then251:                                       ; preds = %if.end214
  store %union.tree_node* null, %union.tree_node** @constructor_unfilled_fields, align 8, !tbaa !7
  br label %if.end254

if.end254:                                        ; preds = %land.lhs.true233, %while.cond, %land.rhs, %if.end214, %if.then251, %if.then221
  br i1 %tobool46, label %if.then256, label %if.end257

if.then256:                                       ; preds = %if.end254
  tail call fastcc void @output_pending_init_elements(i32 0)
  br label %if.end257

if.end257:                                        ; preds = %lor.lhs.false135, %land.lhs.true113, %land.lhs.true129, %if.then142, %if.end160, %if.end184, %if.then256, %if.end254
  ret void
}

declare %union.tree_node* @bit_position(%union.tree_node*) #1

declare i32 @real_zerop(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @simple_asm_stmt(%union.tree_node* %expr) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %1, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %1 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %cmp12 = icmp eq %union.tree_node* %1, %0
  br i1 %cmp12, label %if.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !1
  %type14 = bitcast %union.tree_node* %2 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6
  %bf.load15 = load i32* %mode, align 4
  %type21 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type21, align 8, !tbaa !1
  %type22 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %bf.load24 = load i32* %mode23, align 4
  %bf.lshr66 = xor i32 %bf.load24, %bf.load15
  %4 = and i32 %bf.lshr66, 65024
  %cmp27 = icmp eq i32 %4, 0
  br i1 %cmp27, label %while.cond, label %if.end

while.end:                                        ; preds = %while.cond
  %cmp35 = icmp eq i32 %bf.clear, 121
  br i1 %cmp35, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %operands37 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2
  %arrayidx38 = bitcast i32* %operands37 to %union.tree_node**
  %5 = load %union.tree_node** %arrayidx38, align 8, !tbaa !7
  %code40.phi.trans.insert = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 2
  %bf.load41.pre = load i32* %code40.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %land.rhs, %land.lhs.true, %if.then, %while.end
  %bf.load41 = phi i32 [ %bf.load41.pre, %if.then ], [ %bf.load, %while.end ], [ %bf.load, %land.lhs.true ], [ %bf.load, %land.rhs ]
  %expr.addr.1 = phi %union.tree_node* [ %5, %if.then ], [ %expr.addr.0, %while.end ], [ %expr.addr.0, %land.lhs.true ], [ %expr.addr.0, %land.rhs ]
  %bf.clear42 = and i32 %bf.load41, 255
  %cmp43 = icmp eq i32 %bf.clear42, 29
  br i1 %cmp43, label %if.then44, label %if.end53

if.then44:                                        ; preds = %if.end
  %chain = getelementptr inbounds %union.tree_node* %expr.addr.1, i64 0, i32 0, i32 0, i32 0
  %6 = load %union.tree_node** %chain, align 8, !tbaa !28
  %tobool = icmp eq %union.tree_node* %6, null
  br i1 %tobool, label %if.end47, label %if.then46

if.then46:                                        ; preds = %if.then44
  %call = tail call %union.tree_node* @combine_strings(%union.tree_node* %expr.addr.1) #6
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.then46
  %expr.addr.2 = phi %union.tree_node* [ %call, %if.then46 ], [ %expr.addr.1, %if.then44 ]
  %call48 = tail call %union.tree_node* (i32, ...)* @build_stmt(i32 165, %union.tree_node* null, %union.tree_node* %expr.addr.2, %union.tree_node* null, %union.tree_node* null, %union.tree_node* null) #6
  %call49 = tail call %union.tree_node* @add_stmt(%union.tree_node* %call48) #6
  %lang_flag_0 = getelementptr inbounds %union.tree_node* %call49, i64 0, i32 0, i32 0, i32 2
  %bf.load51 = load i32* %lang_flag_0, align 8
  %bf.set = or i32 %bf.load51, 16777216
  store i32 %bf.set, i32* %lang_flag_0, align 8
  br label %return

if.end53:                                         ; preds = %if.end
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([43 x i8]* @.str136, i64 0, i64 0)) #6
  br label %return

return:                                           ; preds = %if.end53, %if.end47
  %retval.0 = phi %union.tree_node* [ %call49, %if.end47 ], [ null, %if.end53 ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @combine_strings(%union.tree_node*) #1

declare %union.tree_node* @add_stmt(%union.tree_node*) #1

declare %union.tree_node* @build_stmt(i32, ...) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @build_asm_stmt(%union.tree_node* %cv_qualifier, %union.tree_node* %string, %union.tree_node* %outputs, %union.tree_node* %inputs, %union.tree_node* %clobbers) #0 {
entry:
  %chain = getelementptr inbounds %union.tree_node* %string, i64 0, i32 0, i32 0, i32 0
  %0 = load %union.tree_node** %chain, align 8, !tbaa !28
  %tobool = icmp eq %union.tree_node* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call %union.tree_node* @combine_strings(%union.tree_node* %string) #6
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %string.addr.0 = phi %union.tree_node* [ %call, %if.then ], [ %string, %entry ]
  %code = getelementptr inbounds %union.tree_node* %string.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 29
  br i1 %cmp, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([38 x i8]* @.str137, i64 0, i64 0)) #6
  br label %return

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp eq %union.tree_node* %cv_qualifier, null
  br i1 %cmp4, label %if.end7, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end3
  %1 = load %union.tree_node*** @ridpointers, align 8, !tbaa !7
  %arrayidx = getelementptr inbounds %union.tree_node** %1, i64 9
  %2 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %cmp5 = icmp eq %union.tree_node* %2, %cv_qualifier
  br i1 %cmp5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %land.lhs.true
  %id = getelementptr inbounds %union.tree_node* %cv_qualifier, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds i8** %id, i64 1
  %4 = load i8** %3, align 8, !tbaa !13
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([28 x i8]* @.str138, i64 0, i64 0), i8* %4) #6
  br label %if.end7

if.end7:                                          ; preds = %land.lhs.true, %if.end3, %if.then6
  %cv_qualifier.addr.0 = phi %union.tree_node* [ null, %if.then6 ], [ %cv_qualifier, %land.lhs.true ], [ null, %if.end3 ]
  %tobool8231 = icmp eq %union.tree_node* %outputs, null
  br i1 %tobool8231, label %for.cond159.preheader, label %for.body

for.cond99.preheader:                             ; preds = %lvalue_or_else.exit
  br i1 %tobool8231, label %for.cond159.preheader, label %for.body101

for.body:                                         ; preds = %if.end7, %lvalue_or_else.exit
  %tail.0232 = phi %union.tree_node* [ %14, %lvalue_or_else.exit ], [ %outputs, %if.end7 ]
  %value = getelementptr inbounds %union.tree_node* %tail.0232, i64 0, i32 0, i32 2
  %5 = bitcast i32* %value to %union.tree_node**
  %6 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %output.0.pre = load %union.tree_node** %5, align 8
  br label %while.cond

while.cond:                                       ; preds = %land.rhs, %for.body
  %output.0 = phi %union.tree_node* [ %output.0.pre, %for.body ], [ %7, %land.rhs ]
  %code10 = getelementptr inbounds %union.tree_node* %output.0, i64 0, i32 0, i32 0, i32 2
  %bf.load11 = load i32* %code10, align 8
  %bf.clear12 = and i32 %bf.load11, 255
  %bf.clear12.off = add i32 %bf.clear12, -114
  %switch = icmp ult i32 %bf.clear12.off, 3
  br i1 %switch, label %land.lhs.true25, label %while.end

land.lhs.true25:                                  ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %output.0, i64 0, i32 0, i32 2
  %arrayidx26 = bitcast i32* %operands to %union.tree_node**
  %7 = load %union.tree_node** %arrayidx26, align 8, !tbaa !7
  %cmp27 = icmp eq %union.tree_node* %7, %6
  br i1 %cmp27, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true25
  %type = getelementptr inbounds %union.tree_node* %output.0, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type, align 8, !tbaa !1
  %type29 = bitcast %union.tree_node* %8 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type29, i64 0, i32 6
  %bf.load30 = load i32* %mode, align 4
  %type36 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 1
  %9 = load %union.tree_node** %type36, align 8, !tbaa !1
  %type37 = bitcast %union.tree_node* %9 to %struct.tree_type*
  %mode38 = getelementptr inbounds %struct.tree_type* %type37, i64 0, i32 6
  %bf.load39 = load i32* %mode38, align 4
  %bf.lshr219 = xor i32 %bf.load39, %bf.load30
  %10 = and i32 %bf.lshr219, 65024
  %cmp42 = icmp eq i32 %10, 0
  br i1 %cmp42, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.lhs.true25, %land.rhs
  store %union.tree_node* %output.0, %union.tree_node** %5, align 8, !tbaa !25
  br label %while.cond48

while.cond48:                                     ; preds = %while.body89, %while.end
  %output.1 = phi %union.tree_node* [ %output.0, %while.end ], [ %11, %while.body89 ]
  %code50 = getelementptr inbounds %union.tree_node* %output.1, i64 0, i32 0, i32 0, i32 2
  %bf.load51 = load i32* %code50, align 8
  %bf.clear52 = and i32 %bf.load51, 255
  switch i32 %bf.clear52, label %tailrecurse.i.i [
    i32 115, label %while.body89
    i32 114, label %while.body89
    i32 76, label %while.body89
    i32 72, label %while.body89
    i32 74, label %while.body89
    i32 75, label %while.body89
    i32 73, label %while.body89
  ]

while.body89:                                     ; preds = %while.cond48, %while.cond48, %while.cond48, %while.cond48, %while.cond48, %while.cond48, %while.cond48
  %operands91 = getelementptr inbounds %union.tree_node* %output.1, i64 0, i32 0, i32 2
  %arrayidx92 = bitcast i32* %operands91 to %union.tree_node**
  %11 = load %union.tree_node** %arrayidx92, align 8, !tbaa !7
  br label %while.cond48

tailrecurse.i.i:                                  ; preds = %while.cond48, %sw.bb.i.i
  %ref.tr.i.i = phi %union.tree_node* [ %ref.tr.i.i.pre, %sw.bb.i.i ], [ %output.0, %while.cond48 ]
  %code1.i.i = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %code1.i.i, align 8
  %bf.clear.i.i = and i32 %bf.load.i.i, 255
  switch i32 %bf.clear.i.i, label %if.then.i [
    i32 127, label %sw.bb.i.i
    i32 128, label %sw.bb.i.i
    i32 39, label %sw.bb.i.i
    i32 170, label %lvalue_or_else.exit
    i32 29, label %lvalue_or_else.exit
    i32 41, label %sw.bb3.i.i
    i32 43, label %sw.bb3.i.i
    i32 34, label %sw.bb3.i.i
    i32 35, label %sw.bb3.i.i
    i32 36, label %sw.bb3.i.i
    i32 0, label %sw.bb3.i.i
    i32 52, label %lvalue_p.exit.i
    i32 120, label %lvalue_p.exit.i
  ]

sw.bb.i.i:                                        ; preds = %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i
  %operands.i.i = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 2
  %arrayidx.i.i = bitcast i32* %operands.i.i to %union.tree_node**
  %ref.tr.i.i.pre = load %union.tree_node** %arrayidx.i.i, align 8
  br label %tailrecurse.i.i

sw.bb3.i.i:                                       ; preds = %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i, %tailrecurse.i.i
  %.in258 = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 0, i32 1
  %12 = load %union.tree_node** %.in258, align 8
  %code6.i.i = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %bf.load7.i.i = load i32* %code6.i.i, align 8
  %bf.clear8.i.i = and i32 %bf.load7.i.i, 255
  switch i32 %bf.clear8.i.i, label %lvalue_or_else.exit [
    i32 23, label %if.then.i
    i32 16, label %if.then.i
  ]

lvalue_p.exit.i:                                  ; preds = %tailrecurse.i.i, %tailrecurse.i.i
  %.in = getelementptr inbounds %union.tree_node* %ref.tr.i.i, i64 0, i32 0, i32 0, i32 1
  %13 = load %union.tree_node** %.in, align 8
  %code20.i.i = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 2
  %bf.load21.i.i = load i32* %code20.i.i, align 8
  %bf.clear22.i.i = and i32 %bf.load21.i.i, 255
  %cmp23.i.i = icmp eq i32 %bf.clear22.i.i, 18
  br i1 %cmp23.i.i, label %lvalue_or_else.exit, label %if.then.i

if.then.i:                                        ; preds = %tailrecurse.i.i, %lvalue_p.exit.i, %sw.bb3.i.i, %sw.bb3.i.i
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([3 x i8]* @.str81, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8]* @.str139, i64 0, i64 0)) #6
  br label %lvalue_or_else.exit

lvalue_or_else.exit:                              ; preds = %tailrecurse.i.i, %tailrecurse.i.i, %sw.bb3.i.i, %lvalue_p.exit.i, %if.then.i
  %chain98 = getelementptr inbounds %union.tree_node* %tail.0232, i64 0, i32 0, i32 0, i32 0
  %14 = load %union.tree_node** %chain98, align 8, !tbaa !28
  %tobool8 = icmp eq %union.tree_node* %14, null
  br i1 %tobool8, label %for.cond99.preheader, label %for.body

for.cond159.preheader:                            ; preds = %while.end152, %if.end7, %for.cond99.preheader
  %tobool160227 = icmp eq %union.tree_node* %inputs, null
  br i1 %tobool160227, label %for.end170, label %for.body161

for.body101:                                      ; preds = %for.cond99.preheader, %while.end152
  %tail.1230 = phi %union.tree_node* [ %21, %while.end152 ], [ %outputs, %for.cond99.preheader ]
  %value104 = getelementptr inbounds %union.tree_node* %tail.1230, i64 0, i32 0, i32 2
  %15 = bitcast i32* %value104 to %union.tree_node**
  %16 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %output102.0.pre = load %union.tree_node** %15, align 8
  br label %while.cond105

while.cond105:                                    ; preds = %land.rhs128, %for.body101
  %output102.0 = phi %union.tree_node* [ %output102.0.pre, %for.body101 ], [ %17, %land.rhs128 ]
  %code107 = getelementptr inbounds %union.tree_node* %output102.0, i64 0, i32 0, i32 0, i32 2
  %bf.load108 = load i32* %code107, align 8
  %bf.clear109 = and i32 %bf.load108, 255
  %bf.clear109.off = add i32 %bf.clear109, -114
  %switch223 = icmp ult i32 %bf.clear109.off, 3
  br i1 %switch223, label %land.lhs.true123, label %while.end152

land.lhs.true123:                                 ; preds = %while.cond105
  %operands125 = getelementptr inbounds %union.tree_node* %output102.0, i64 0, i32 0, i32 2
  %arrayidx126 = bitcast i32* %operands125 to %union.tree_node**
  %17 = load %union.tree_node** %arrayidx126, align 8, !tbaa !7
  %cmp127 = icmp eq %union.tree_node* %17, %16
  br i1 %cmp127, label %while.end152, label %land.rhs128

land.rhs128:                                      ; preds = %land.lhs.true123
  %type130 = getelementptr inbounds %union.tree_node* %output102.0, i64 0, i32 0, i32 0, i32 1
  %18 = load %union.tree_node** %type130, align 8, !tbaa !1
  %type131 = bitcast %union.tree_node* %18 to %struct.tree_type*
  %mode132 = getelementptr inbounds %struct.tree_type* %type131, i64 0, i32 6
  %bf.load133 = load i32* %mode132, align 4
  %type140 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 1
  %19 = load %union.tree_node** %type140, align 8, !tbaa !1
  %type141 = bitcast %union.tree_node* %19 to %struct.tree_type*
  %mode142 = getelementptr inbounds %struct.tree_type* %type141, i64 0, i32 6
  %bf.load143 = load i32* %mode142, align 4
  %bf.lshr134220 = xor i32 %bf.load143, %bf.load133
  %20 = and i32 %bf.lshr134220, 65024
  %cmp146 = icmp eq i32 %20, 0
  br i1 %cmp146, label %while.cond105, label %while.end152

while.end152:                                     ; preds = %while.cond105, %land.lhs.true123, %land.rhs128
  store %union.tree_node* %output102.0, %union.tree_node** %15, align 8, !tbaa !25
  %chain157 = getelementptr inbounds %union.tree_node* %tail.1230, i64 0, i32 0, i32 0, i32 0
  %21 = load %union.tree_node** %chain157, align 8, !tbaa !28
  %tobool100 = icmp eq %union.tree_node* %21, null
  br i1 %tobool100, label %for.cond159.preheader, label %for.body101

for.body161:                                      ; preds = %for.cond159.preheader, %for.body161
  %tail.2228 = phi %union.tree_node* [ %24, %for.body161 ], [ %inputs, %for.cond159.preheader ]
  %value163 = getelementptr inbounds %union.tree_node* %tail.2228, i64 0, i32 0, i32 2
  %22 = bitcast i32* %value163 to %union.tree_node**
  %23 = load %union.tree_node** %22, align 8, !tbaa !25
  %call164 = tail call fastcc %union.tree_node* @default_function_array_conversion(%union.tree_node* %23)
  store %union.tree_node* %call164, %union.tree_node** %22, align 8, !tbaa !25
  %chain169 = getelementptr inbounds %union.tree_node* %tail.2228, i64 0, i32 0, i32 0, i32 0
  %24 = load %union.tree_node** %chain169, align 8, !tbaa !28
  %tobool160 = icmp eq %union.tree_node* %24, null
  br i1 %tobool160, label %for.end170, label %for.body161

for.end170:                                       ; preds = %for.body161, %for.cond159.preheader
  %call171 = tail call %union.tree_node* (i32, ...)* @build_stmt(i32 165, %union.tree_node* %cv_qualifier.addr.0, %union.tree_node* %string.addr.0, %union.tree_node* %outputs, %union.tree_node* %inputs, %union.tree_node* %clobbers) #6
  %call172 = tail call %union.tree_node* @add_stmt(%union.tree_node* %call171) #6
  br label %return

return:                                           ; preds = %for.end170, %if.then2
  %retval.0 = phi %union.tree_node* [ null, %if.then2 ], [ %call172, %for.end170 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define void @c_expand_asm_operands(%union.tree_node* %string, %union.tree_node* %outputs, %union.tree_node* %inputs, %union.tree_node* %clobbers, i32 %vol, i8* %filename, i32 %line) #0 {
entry:
  %call = tail call i32 @list_length(%union.tree_node* %outputs) #6
  %conv = sext i32 %call to i64
  %0 = alloca %union.tree_node*, i64 %conv, align 1
  %tobool91 = icmp eq %union.tree_node* %outputs, null
  br i1 %tobool91, label %for.end.thread, label %for.body

for.end.thread:                                   ; preds = %entry
  tail call void @expand_asm_operands(%union.tree_node* %string, %union.tree_node* %outputs, %union.tree_node* %inputs, %union.tree_node* %clobbers, i32 %vol, i8* %filename, i32 %line) #6
  br label %for.end59

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv96 = phi i64 [ %indvars.iv.next97, %for.body ], [ 0, %entry ]
  %tail.092 = phi %union.tree_node* [ %3, %for.body ], [ %outputs, %entry ]
  %value = getelementptr inbounds %union.tree_node* %tail.092, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !25
  %arrayidx = getelementptr inbounds %union.tree_node** %0, i64 %indvars.iv96
  store %union.tree_node* %2, %union.tree_node** %arrayidx, align 8, !tbaa !7
  %chain = getelementptr inbounds %union.tree_node* %tail.092, i64 0, i32 0, i32 0, i32 0
  %3 = load %union.tree_node** %chain, align 8, !tbaa !28
  %indvars.iv.next97 = add nuw nsw i64 %indvars.iv96, 1
  %tobool = icmp eq %union.tree_node* %3, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  tail call void @expand_asm_operands(%union.tree_node* %string, %union.tree_node* %outputs, %union.tree_node* %inputs, %union.tree_node* %clobbers, i32 %vol, i8* %filename, i32 %line) #6
  br i1 %tobool91, label %for.end59, label %for.body3

for.body3:                                        ; preds = %for.end, %for.inc55
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc55 ], [ 0, %for.end ]
  %tail.189 = phi %union.tree_node* [ %20, %for.inc55 ], [ %outputs, %for.end ]
  %arrayidx5 = getelementptr inbounds %union.tree_node** %0, i64 %indvars.iv
  %4 = load %union.tree_node** %arrayidx5, align 8, !tbaa !7
  %value7 = getelementptr inbounds %union.tree_node* %tail.189, i64 0, i32 0, i32 2
  %5 = bitcast i32* %value7 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !25
  %cmp = icmp eq %union.tree_node* %4, %6
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %for.body3
  %call13 = tail call %union.tree_node* @build_modify_expr(%union.tree_node* %4, i32 115, %union.tree_node* %6)
  %call14 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call13, %struct.rtx_def* null, i32 0, i32 0) #6
  tail call void @free_temp_slots() #6
  store %union.tree_node* %4, %union.tree_node** %5, align 8, !tbaa !25
  br label %for.inc55

if.else:                                          ; preds = %for.body3
  %readonly_flag = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %readonly_flag, align 8
  %bf.clear = and i32 %bf.load, 4096
  %tobool26 = icmp eq i32 %bf.clear, 0
  br i1 %tobool26, label %lor.lhs.false, label %tailrecurse.i

lor.lhs.false:                                    ; preds = %if.else
  %type22 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type22, align 8, !tbaa !1
  %readonly_flag28 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load29 = load i32* %readonly_flag28, align 8
  %bf.clear31 = and i32 %bf.load29, 4096
  %tobool32 = icmp ne i32 %bf.clear31, 0
  %8 = and i32 %bf.load29, 33554686
  %9 = icmp eq i32 %8, 33554452
  %or.cond = or i1 %tobool32, %9
  br i1 %or.cond, label %tailrecurse.i, label %for.inc55

tailrecurse.i:                                    ; preds = %if.else, %lor.lhs.false, %if.then.i.tailrecurse.i_crit_edge
  %bf.load.i = phi i32 [ %bf.load.i.pre, %if.then.i.tailrecurse.i_crit_edge ], [ %bf.load, %lor.lhs.false ], [ %bf.load, %if.else ]
  %arg.tr.i = phi %union.tree_node* [ %10, %if.then.i.tailrecurse.i_crit_edge ], [ %4, %lor.lhs.false ], [ %4, %if.else ]
  %bf.clear.i = and i32 %bf.load.i, 255
  switch i32 %bf.clear.i, label %if.else24.i [
    i32 39, label %if.then.i
    i32 34, label %if.then18.i
  ]

if.then.i:                                        ; preds = %tailrecurse.i
  %operands.i = getelementptr inbounds %union.tree_node* %arg.tr.i, i64 0, i32 0, i32 2
  %arrayidx.i = bitcast i32* %operands.i to %union.tree_node**
  %10 = load %union.tree_node** %arrayidx.i, align 8, !tbaa !7
  %type.i = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type.i, align 8, !tbaa !1
  %readonly_flag.i = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 2
  %bf.load3.i = load i32* %readonly_flag.i, align 8
  %bf.clear4.i = and i32 %bf.load3.i, 4096
  %tobool.i = icmp eq i32 %bf.clear4.i, 0
  br i1 %tobool.i, label %if.else.i, label %if.then.i.tailrecurse.i_crit_edge

if.then.i.tailrecurse.i_crit_edge:                ; preds = %if.then.i
  %code.i.phi.trans.insert = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.pre = load i32* %code.i.phi.trans.insert, align 8
  br label %tailrecurse.i

if.else.i:                                        ; preds = %if.then.i
  %arrayidx11.i = getelementptr inbounds i32* %operands.i, i64 2
  %12 = bitcast i32* %arrayidx11.i to %union.tree_node**
  %13 = load %union.tree_node** %12, align 8, !tbaa !7
  %name.i = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 8
  %14 = load %union.tree_node** %name.i, align 8, !tbaa !11
  %id.i = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds i8** %id.i, i64 1
  %16 = load i8** %15, align 8, !tbaa !13
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([28 x i8]* @.str82, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8]* @.str140, i64 0, i64 0), i8* %16) #6
  br label %for.inc55

if.then18.i:                                      ; preds = %tailrecurse.i
  %name20.i = getelementptr inbounds %union.tree_node* %arg.tr.i, i64 0, i32 0, i32 8
  %17 = load %union.tree_node** %name20.i, align 8, !tbaa !11
  %id22.i = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds i8** %id22.i, i64 1
  %19 = load i8** %18, align 8, !tbaa !13
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([30 x i8]* @.str83, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8]* @.str140, i64 0, i64 0), i8* %19) #6
  br label %for.inc55

if.else24.i:                                      ; preds = %tailrecurse.i
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([25 x i8]* @.str84, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8]* @.str140, i64 0, i64 0)) #6
  br label %for.inc55

for.inc55:                                        ; preds = %lor.lhs.false, %if.else24.i, %if.then18.i, %if.else.i, %if.then
  %chain57 = getelementptr inbounds %union.tree_node* %tail.189, i64 0, i32 0, i32 0, i32 0
  %20 = load %union.tree_node** %chain57, align 8, !tbaa !28
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %tobool2 = icmp eq %union.tree_node* %20, null
  br i1 %tobool2, label %for.end59, label %for.body3

for.end59:                                        ; preds = %for.inc55, %for.end.thread, %for.end
  tail call void @emit_queue() #6
  ret void
}

declare void @expand_asm_operands(%union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i8*, i32) #1

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #1

declare void @free_temp_slots() #1

declare void @emit_queue() #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @c_expand_return(%union.tree_node* %retval1) #0 {
entry:
  %0 = load %union.tree_node** @current_function_decl, align 8, !tbaa !7
  %type = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !1
  %type3 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type3, align 8, !tbaa !1
  %volatile_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %volatile_flag, align 8
  %bf.clear = and i32 %bf.load, 2048
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([54 x i8]* @.str141, i64 0, i64 0)) #6
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %tobool5 = icmp eq %union.tree_node* %retval1, null
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  store i32 1, i32* @current_function_returns_null, align 4, !tbaa !27
  %3 = load i32* @warn_return_type, align 4, !tbaa !27
  %4 = load i32* @flag_isoc99, align 4
  %5 = or i32 %4, %3
  %6 = icmp ne i32 %5, 0
  %cmp = icmp ne %union.tree_node* %2, null
  %or.cond155 = and i1 %6, %cmp
  br i1 %or.cond155, label %land.lhs.true9, label %if.end152

land.lhs.true9:                                   ; preds = %if.then6
  %code = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load11 = load i32* %code, align 8
  %bf.clear12 = and i32 %bf.load11, 255
  %cmp13 = icmp eq i32 %bf.clear12, 5
  br i1 %cmp13, label %if.end152, label %if.then14

if.then14:                                        ; preds = %land.lhs.true9
  tail call void (i8*, ...)* @pedwarn_c99(i8* getelementptr inbounds ([55 x i8]* @.str142, i64 0, i64 0)) #6
  br label %if.end152

if.else:                                          ; preds = %if.end
  %cmp16 = icmp eq %union.tree_node* %2, null
  br i1 %cmp16, label %if.then23, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %if.else
  %code19 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load20 = load i32* %code19, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp eq i32 %bf.clear21, 5
  br i1 %cmp22, label %if.then23, label %if.else35

if.then23:                                        ; preds = %lor.lhs.false17, %if.else
  store i32 1, i32* @current_function_returns_null, align 4, !tbaa !27
  %7 = load i32* @pedantic, align 4, !tbaa !27
  %tobool24 = icmp eq i32 %7, 0
  br i1 %tobool24, label %lor.lhs.false25, label %if.then33

lor.lhs.false25:                                  ; preds = %if.then23
  %type27 = getelementptr inbounds %union.tree_node* %retval1, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type27, align 8, !tbaa !1
  %code29 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load30 = load i32* %code29, align 8
  %bf.clear31 = and i32 %bf.load30, 255
  %cmp32 = icmp eq i32 %bf.clear31, 5
  br i1 %cmp32, label %if.end152, label %if.then33

if.then33:                                        ; preds = %lor.lhs.false25, %if.then23
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([50 x i8]* @.str143, i64 0, i64 0)) #6
  br label %if.end152

if.else35:                                        ; preds = %lor.lhs.false17
  %call = tail call fastcc %union.tree_node* @convert_for_assignment(%union.tree_node* %2, %union.tree_node* %retval1, i8* getelementptr inbounds ([7 x i8]* @.str144, i64 0, i64 0), %union.tree_node* null, %union.tree_node* null, i32 0)
  %9 = load %union.tree_node** @current_function_decl, align 8, !tbaa !7
  %result = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 11
  %10 = load %union.tree_node** %result, align 8, !tbaa !110
  store i32 1, i32* @current_function_returns_value, align 4, !tbaa !27
  %11 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp36 = icmp eq %union.tree_node* %call, %11
  br i1 %cmp36, label %return, label %if.end38

if.end38:                                         ; preds = %if.else35
  %type40 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 1
  %12 = load %union.tree_node** %type40, align 8, !tbaa !1
  %call41 = tail call %union.tree_node* @convert(%union.tree_node* %12, %union.tree_node* %call) #6
  br label %while.body

while.body:                                       ; preds = %while.body.backedge, %if.end38
  %inner.0 = phi %union.tree_node* [ %call41, %if.end38 ], [ %inner.0.be, %while.body.backedge ]
  %code43 = getelementptr inbounds %union.tree_node* %inner.0, i64 0, i32 0, i32 0, i32 2
  %bf.load44 = load i32* %code43, align 8
  %bf.clear45 = and i32 %bf.load44, 255
  switch i32 %bf.clear45, label %while.end147 [
    i32 115, label %sw.bb
    i32 116, label %sw.bb
    i32 114, label %sw.bb
    i32 59, label %sw.bb
    i32 60, label %sw.bb46
    i32 121, label %while.cond110
  ]

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body
  %operands = getelementptr inbounds %union.tree_node* %inner.0, i64 0, i32 0, i32 2
  br label %while.body.backedge

sw.bb46:                                          ; preds = %while.body
  %operands48 = getelementptr inbounds %union.tree_node* %inner.0, i64 0, i32 0, i32 2
  %arrayidx49 = getelementptr inbounds i32* %operands48, i64 2
  br label %while.cond50

while.cond50:                                     ; preds = %land.rhs, %sw.bb46
  %op1.0.in.in = phi i32* [ %arrayidx49, %sw.bb46 ], [ %operands84, %land.rhs ]
  %op1.0.in = bitcast i32* %op1.0.in.in to %union.tree_node**
  %op1.0 = load %union.tree_node** %op1.0.in, align 8
  %type52 = getelementptr inbounds %union.tree_node* %op1.0, i64 0, i32 0, i32 0, i32 1
  %13 = load %union.tree_node** %type52, align 8, !tbaa !1
  %code54 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 2
  %bf.load55 = load i32* %code54, align 8
  %bf.clear56 = and i32 %bf.load55, 255
  switch i32 %bf.clear56, label %land.rhs [
    i32 13, label %while.end147
    i32 15, label %while.end147
  ]

land.rhs:                                         ; preds = %while.cond50
  %code67 = getelementptr inbounds %union.tree_node* %op1.0, i64 0, i32 0, i32 0, i32 2
  %bf.load68 = load i32* %code67, align 8
  %bf.clear69 = and i32 %bf.load68, 255
  %bf.clear69.off = add i32 %bf.clear69, -114
  %switch = icmp ult i32 %bf.clear69.off, 3
  %operands84 = getelementptr inbounds %union.tree_node* %op1.0, i64 0, i32 0, i32 2
  br i1 %switch, label %while.cond50, label %while.end

while.end:                                        ; preds = %land.rhs
  switch i32 %bf.clear56, label %while.body.backedge [
    i32 13, label %while.end147
    i32 15, label %while.end147
  ]

while.body.backedge:                              ; preds = %while.end, %sw.bb
  %inner.0.be.in.in = phi i32* [ %operands, %sw.bb ], [ %operands48, %while.end ]
  %inner.0.be.in = bitcast i32* %inner.0.be.in.in to %union.tree_node**
  %inner.0.be = load %union.tree_node** %inner.0.be.in, align 8
  br label %while.body

while.cond110:                                    ; preds = %while.body, %while.cond110
  %inner.0.pn = phi %union.tree_node* [ %inner.1, %while.cond110 ], [ %inner.0, %while.body ]
  %inner.1.in.in = getelementptr inbounds %union.tree_node* %inner.0.pn, i64 0, i32 0, i32 2
  %inner.1.in = bitcast i32* %inner.1.in.in to %union.tree_node**
  %inner.1 = load %union.tree_node** %inner.1.in, align 8
  %code112 = getelementptr inbounds %union.tree_node* %inner.1, i64 0, i32 0, i32 0, i32 2
  %bf.load113 = load i32* %code112, align 8
  %bf.clear114 = and i32 %bf.load113, 255
  %idxprom182 = zext i32 %bf.clear114 to i64
  %arrayidx115 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom182
  %14 = load i8* %arrayidx115, align 1, !tbaa !34
  %cmp116 = icmp eq i8 %14, 114
  br i1 %cmp116, label %while.cond110, label %while.end122

while.end122:                                     ; preds = %while.cond110
  %cmp127 = icmp eq i32 %bf.clear114, 34
  br i1 %cmp127, label %land.lhs.true129, label %while.end147

land.lhs.true129:                                 ; preds = %while.end122
  %external_flag = getelementptr inbounds %union.tree_node* %inner.1, i64 0, i32 0, i32 5
  %15 = bitcast i48* %external_flag to i64*
  %bf.load131 = load i64* %15, align 8
  %bf.cast = and i64 %bf.load131, 256
  %tobool134 = icmp eq i64 %bf.cast, 0
  %bf.clear139 = and i32 %bf.load113, 262144
  %tobool140 = icmp eq i32 %bf.clear139, 0
  %or.cond = and i1 %tobool134, %tobool140
  br i1 %or.cond, label %land.lhs.true141, label %while.end147

land.lhs.true141:                                 ; preds = %land.lhs.true129
  %context = getelementptr inbounds %union.tree_node* %inner.1, i64 0, i32 0, i32 9
  %16 = load %union.tree_node** %context, align 8, !tbaa !54
  %17 = load %union.tree_node** @current_function_decl, align 8, !tbaa !7
  %cmp143 = icmp eq %union.tree_node* %16, %17
  br i1 %cmp143, label %if.then145, label %while.end147

if.then145:                                       ; preds = %land.lhs.true141
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([43 x i8]* @.str145, i64 0, i64 0)) #6
  br label %while.end147

while.end147:                                     ; preds = %while.end, %while.end, %while.body, %while.cond50, %while.cond50, %land.lhs.true129, %if.then145, %land.lhs.true141, %while.end122
  %18 = load %union.tree_node** %type40, align 8, !tbaa !1
  %call150 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 48, %union.tree_node* %18, %union.tree_node* %10, %union.tree_node* %call41) #6
  br label %if.end152

if.end152:                                        ; preds = %lor.lhs.false25, %land.lhs.true9, %while.end147, %if.then33, %if.then14, %if.then6
  %retval.addr.0 = phi %union.tree_node* [ %retval1, %if.then33 ], [ %retval1, %lor.lhs.false25 ], [ %call150, %while.end147 ], [ null, %if.then14 ], [ null, %land.lhs.true9 ], [ null, %if.then6 ]
  %call153 = tail call %union.tree_node* @build_return_stmt(%union.tree_node* %retval.addr.0) #6
  %call154 = tail call %union.tree_node* @add_stmt(%union.tree_node* %call153) #6
  br label %return

return:                                           ; preds = %if.else35, %if.end152
  %retval.0 = phi %union.tree_node* [ %call154, %if.end152 ], [ null, %if.else35 ]
  ret %union.tree_node* %retval.0
}

declare void @pedwarn_c99(i8*, ...) #1

declare %union.tree_node* @build_return_stmt(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @c_start_case(%union.tree_node* %exp) #0 {
entry:
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp = icmp eq %union.tree_node* %0, %exp
  br i1 %cmp, label %if.end43, label %if.then

if.then:                                          ; preds = %entry
  %type1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type1, align 8, !tbaa !1
  %code3 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code3, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.then29 [
    i32 6, label %if.else
    i32 10, label %if.else
    i32 11, label %if.else
    i32 12, label %if.else
    i32 0, label %if.else
  ]

if.then29:                                        ; preds = %if.then
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([31 x i8]* @.str146, i64 0, i64 0)) #6
  %2 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !7
  br label %if.end43

if.else:                                          ; preds = %if.then, %if.then, %if.then, %if.then, %if.then
  %3 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 15
  %4 = load %union.tree_node** %3, align 8, !tbaa !24
  %5 = load i32* @warn_traditional, align 4, !tbaa !27
  %tobool = icmp eq i32 %5, 0
  %6 = load i32* @in_system_header, align 4
  %tobool34 = icmp ne i32 %6, 0
  %or.cond49 = or i1 %tobool, %tobool34
  br i1 %or.cond49, label %if.end, label %land.lhs.true35

land.lhs.true35:                                  ; preds = %if.else
  %7 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !tbaa !7
  %cmp36 = icmp eq %union.tree_node* %4, %7
  %8 = load %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 8
  %cmp38 = icmp eq %union.tree_node* %4, %8
  %or.cond = or i1 %cmp36, %cmp38
  br i1 %or.cond, label %if.then39, label %if.end

if.then39:                                        ; preds = %land.lhs.true35
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([57 x i8]* @.str147, i64 0, i64 0)) #6
  br label %if.end

if.end:                                           ; preds = %land.lhs.true35, %if.else, %if.then39
  %call = tail call %union.tree_node* @default_conversion(%union.tree_node* %exp)
  br label %if.end43

if.end43:                                         ; preds = %entry, %if.then29, %if.end
  %orig_type.0 = phi %union.tree_node* [ %1, %if.end ], [ %1, %if.then29 ], [ %exp, %entry ]
  %exp.addr.0 = phi %union.tree_node* [ %call, %if.end ], [ %2, %if.then29 ], [ %exp, %entry ]
  %call44 = tail call noalias i8* @xmalloc(i64 24) #6
  %9 = bitcast i8* %call44 to %struct.c_switch*
  %call45 = tail call %union.tree_node* (i32, ...)* @build_stmt(i32 162, %union.tree_node* %exp.addr.0, %union.tree_node* null, %union.tree_node* %orig_type.0) #6
  %switch_stmt = bitcast i8* %call44 to %union.tree_node**
  store %union.tree_node* %call45, %union.tree_node** %switch_stmt, align 8, !tbaa !111
  %call46 = tail call %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)* @case_compare, void (i64)* null, void (i64)* null) #6
  %cases = getelementptr inbounds i8* %call44, i64 8
  %10 = bitcast i8* %cases to %struct.splay_tree_s**
  store %struct.splay_tree_s* %call46, %struct.splay_tree_s** %10, align 8, !tbaa !113
  %11 = load %struct.c_switch** @switch_stack, align 8, !tbaa !7
  %next = getelementptr inbounds i8* %call44, i64 16
  %12 = bitcast i8* %next to %struct.c_switch**
  store %struct.c_switch* %11, %struct.c_switch** %12, align 8, !tbaa !114
  store %struct.c_switch* %9, %struct.c_switch** @switch_stack, align 8, !tbaa !7
  %call48 = tail call %union.tree_node* @add_stmt(%union.tree_node* %call45) #6
  ret %union.tree_node* %call48
}

declare %struct.splay_tree_s* @splay_tree_new(i32 (i64, i64)*, void (i64)*, void (i64)*) #1

declare i32 @case_compare(i64, i64) #1

; Function Attrs: nounwind uwtable
define %union.tree_node* @do_case(%union.tree_node* %low_value, %union.tree_node* %high_value) #0 {
entry:
  %0 = load %struct.c_switch** @switch_stack, align 8, !tbaa !7
  %tobool = icmp eq %struct.c_switch* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %cases = getelementptr inbounds %struct.c_switch* %0, i64 0, i32 1
  %1 = load %struct.splay_tree_s** %cases, align 8, !tbaa !113
  %switch_stmt = getelementptr inbounds %struct.c_switch* %0, i64 0, i32 0
  %2 = load %union.tree_node** %switch_stmt, align 8, !tbaa !111
  %operands = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %3 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %call = tail call %union.tree_node* @c_add_case_label(%struct.splay_tree_s* %1, %union.tree_node* %3, %union.tree_node* %low_value, %union.tree_node* %high_value) #6
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp = icmp eq %union.tree_node* %call, %4
  %.call = select i1 %cmp, %union.tree_node* null, %union.tree_node* %call
  br label %if.end6

if.else:                                          ; preds = %entry
  %tobool2 = icmp eq %union.tree_node* %low_value, null
  br i1 %tobool2, label %if.else4, label %if.then3

if.then3:                                         ; preds = %if.else
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([41 x i8]* @.str148, i64 0, i64 0)) #6
  br label %if.end6

if.else4:                                         ; preds = %if.else
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([46 x i8]* @.str149, i64 0, i64 0)) #6
  br label %if.end6

if.end6:                                          ; preds = %if.then3, %if.else4, %if.then
  %label.0 = phi %union.tree_node* [ %.call, %if.then ], [ null, %if.then3 ], [ null, %if.else4 ]
  ret %union.tree_node* %label.0
}

declare %union.tree_node* @c_add_case_label(%struct.splay_tree_s*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define void @c_finish_case() #0 {
entry:
  %0 = load %struct.c_switch** @switch_stack, align 8, !tbaa !7
  %switch_stmt = getelementptr inbounds %struct.c_switch* %0, i64 0, i32 0
  %1 = load %union.tree_node** %switch_stmt, align 8, !tbaa !111
  %chain = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0
  %2 = load %union.tree_node** %chain, align 8, !tbaa !28
  %operands = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %3 = bitcast i32* %arrayidx to %union.tree_node**
  store %union.tree_node* %2, %union.tree_node** %3, align 8, !tbaa !7
  %4 = load %union.tree_node** %switch_stmt, align 8, !tbaa !111
  %chain4 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* null, %union.tree_node** %chain4, align 8, !tbaa !28
  %call = tail call %struct.stmt_tree_s* @current_stmt_tree() #6
  %x_last_stmt = getelementptr inbounds %struct.stmt_tree_s* %call, i64 0, i32 0
  store %union.tree_node* %4, %union.tree_node** %x_last_stmt, align 8, !tbaa !115
  %5 = load %struct.c_switch** @switch_stack, align 8, !tbaa !7
  %next = getelementptr inbounds %struct.c_switch* %5, i64 0, i32 2
  %6 = load %struct.c_switch** %next, align 8, !tbaa !114
  store %struct.c_switch* %6, %struct.c_switch** @switch_stack, align 8, !tbaa !7
  %cases = getelementptr inbounds %struct.c_switch* %0, i64 0, i32 1
  %7 = load %struct.splay_tree_s** %cases, align 8, !tbaa !113
  tail call void @splay_tree_delete(%struct.splay_tree_s* %7) #6
  %8 = bitcast %struct.c_switch* %0 to i8*
  tail call void @free(i8* %8)
  ret void
}

declare %struct.stmt_tree_s* @current_stmt_tree() #1

declare void @splay_tree_delete(%struct.splay_tree_s*) #1

declare %union.tree_node* @initializer_constant_valid_p(%union.tree_node*, %union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @add_pending_init(%union.tree_node* %purpose, %union.tree_node* %value) #0 {
entry:
  %0 = load %union.tree_node** @constructor_type, align 8, !tbaa !7
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 18
  br i1 %cmp, label %while.cond.preheader, label %if.else18

while.cond.preheader:                             ; preds = %entry
  %1 = load %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  %cmp1395 = icmp eq %struct.init_node* %1, null
  br i1 %cmp1395, label %if.end48, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.cond.backedge
  %2 = phi %struct.init_node* [ %5, %while.cond.backedge ], [ %1, %while.cond.preheader ]
  %purpose2 = getelementptr inbounds %struct.init_node* %2, i64 0, i32 4
  %3 = load %union.tree_node** %purpose2, align 8, !tbaa !104
  %call = tail call i32 @tree_int_cst_lt(%union.tree_node* %purpose, %union.tree_node* %3) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then3

if.then3:                                         ; preds = %while.body
  %left = getelementptr inbounds %struct.init_node* %2, i64 0, i32 0
  br label %while.cond.backedge

if.else:                                          ; preds = %while.body
  %4 = load %union.tree_node** %purpose2, align 8, !tbaa !104
  %call5 = tail call i32 @tree_int_cst_lt(%union.tree_node* %4, %union.tree_node* %purpose) #6
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %if.else8, label %if.then7

if.then7:                                         ; preds = %if.else
  %right = getelementptr inbounds %struct.init_node* %2, i64 0, i32 1
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then7, %if.then3
  %q.0.be = phi %struct.init_node** [ %left, %if.then3 ], [ %right, %if.then7 ]
  %5 = load %struct.init_node** %q.0.be, align 8, !tbaa !7
  %cmp1 = icmp eq %struct.init_node* %5, null
  br i1 %cmp1, label %if.end48, label %while.body

if.else8:                                         ; preds = %if.else
  %value9 = getelementptr inbounds %struct.init_node* %2, i64 0, i32 5
  %6 = load %union.tree_node** %value9, align 8, !tbaa !106
  %side_effects_flag = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load11 = load i32* %side_effects_flag, align 8
  %bf.clear12 = and i32 %bf.load11, 256
  %tobool13 = icmp eq i32 %bf.clear12, 0
  br i1 %tobool13, label %if.end, label %if.then14

if.then14:                                        ; preds = %if.else8
  tail call fastcc void @warning_init(i8* getelementptr inbounds ([48 x i8]* @.str152, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then14
  store %union.tree_node* %value, %union.tree_node** %value9, align 8, !tbaa !106
  br label %while.end238

if.else18:                                        ; preds = %entry
  %call19 = tail call %union.tree_node* @bit_position(%union.tree_node* %purpose) #6
  %7 = load %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  %cmp21397 = icmp eq %struct.init_node* %7, null
  br i1 %cmp21397, label %if.end48, label %while.body22

while.body22:                                     ; preds = %if.else18, %while.cond20.backedge
  %8 = phi %struct.init_node* [ %11, %while.cond20.backedge ], [ %7, %if.else18 ]
  %purpose23 = getelementptr inbounds %struct.init_node* %8, i64 0, i32 4
  %9 = load %union.tree_node** %purpose23, align 8, !tbaa !104
  %call24 = tail call %union.tree_node* @bit_position(%union.tree_node* %9) #6
  %call25 = tail call i32 @tree_int_cst_lt(%union.tree_node* %call19, %union.tree_node* %call24) #6
  %tobool26 = icmp eq i32 %call25, 0
  br i1 %tobool26, label %if.else29, label %if.then27

if.then27:                                        ; preds = %while.body22
  %left28 = getelementptr inbounds %struct.init_node* %8, i64 0, i32 0
  br label %while.cond20.backedge

if.else29:                                        ; preds = %while.body22
  %10 = load %union.tree_node** %purpose23, align 8, !tbaa !104
  %cmp31 = icmp eq %union.tree_node* %10, %purpose
  br i1 %cmp31, label %if.else34, label %if.then32

if.then32:                                        ; preds = %if.else29
  %right33 = getelementptr inbounds %struct.init_node* %8, i64 0, i32 1
  br label %while.cond20.backedge

while.cond20.backedge:                            ; preds = %if.then32, %if.then27
  %q.1.be = phi %struct.init_node** [ %left28, %if.then27 ], [ %right33, %if.then32 ]
  %11 = load %struct.init_node** %q.1.be, align 8, !tbaa !7
  %cmp21 = icmp eq %struct.init_node* %11, null
  br i1 %cmp21, label %if.end48, label %while.body22

if.else34:                                        ; preds = %if.else29
  %value35 = getelementptr inbounds %struct.init_node* %8, i64 0, i32 5
  %12 = load %union.tree_node** %value35, align 8, !tbaa !106
  %side_effects_flag37 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %bf.load38 = load i32* %side_effects_flag37, align 8
  %bf.clear40 = and i32 %bf.load38, 256
  %tobool41 = icmp eq i32 %bf.clear40, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %if.else34
  tail call fastcc void @warning_init(i8* getelementptr inbounds ([48 x i8]* @.str152, i64 0, i64 0))
  br label %if.end43

if.end43:                                         ; preds = %if.else34, %if.then42
  store %union.tree_node* %value, %union.tree_node** %value35, align 8, !tbaa !106
  br label %while.end238

if.end48:                                         ; preds = %while.cond20.backedge, %while.cond.backedge, %if.else18, %while.cond.preheader
  %q.2 = phi %struct.init_node** [ @constructor_pending_elts, %while.cond.preheader ], [ @constructor_pending_elts, %if.else18 ], [ %q.0.be, %while.cond.backedge ], [ %q.1.be, %while.cond20.backedge ]
  %p.2 = phi %struct.init_node* [ null, %while.cond.preheader ], [ null, %if.else18 ], [ %2, %while.cond.backedge ], [ %8, %while.cond20.backedge ]
  %call49 = tail call i8* @ggc_alloc(i64 48) #6
  %13 = bitcast i8* %call49 to %struct.init_node*
  %purpose50 = getelementptr inbounds i8* %call49, i64 32
  %14 = bitcast i8* %purpose50 to %union.tree_node**
  store %union.tree_node* %purpose, %union.tree_node** %14, align 8, !tbaa !104
  %value51 = getelementptr inbounds i8* %call49, i64 40
  %15 = bitcast i8* %value51 to %union.tree_node**
  store %union.tree_node* %value, %union.tree_node** %15, align 8, !tbaa !106
  store %struct.init_node* %13, %struct.init_node** %q.2, align 8, !tbaa !7
  %parent = getelementptr inbounds i8* %call49, i64 16
  %16 = bitcast i8* %parent to %struct.init_node**
  store %struct.init_node* %p.2, %struct.init_node** %16, align 8, !tbaa !109
  %balance = getelementptr inbounds i8* %call49, i64 24
  %17 = bitcast i8* %balance to i32*
  store i32 0, i32* %17, align 4, !tbaa !117
  %tobool55392 = icmp eq %struct.init_node* %p.2, null
  call void @llvm.memset.p0i8.i64(i8* %call49, i8 0, i64 16, i32 8, i1 false)
  br i1 %tobool55392, label %while.end238, label %while.body56

while.body56:                                     ; preds = %if.end48, %if.end236
  %p.3394 = phi %struct.init_node* [ %40, %if.end236 ], [ %p.2, %if.end48 ]
  %r.0393 = phi %struct.init_node* [ %p.3394, %if.end236 ], [ %13, %if.end48 ]
  %left57 = getelementptr inbounds %struct.init_node* %p.3394, i64 0, i32 0
  %18 = load %struct.init_node** %left57, align 8, !tbaa !107
  %cmp58 = icmp eq %struct.init_node* %r.0393, %18
  %balance60 = getelementptr inbounds %struct.init_node* %p.3394, i64 0, i32 3
  %19 = load i32* %balance60, align 4, !tbaa !117
  %cmp61 = icmp eq i32 %19, 0
  br i1 %cmp58, label %if.then59, label %if.else144

if.then59:                                        ; preds = %while.body56
  br i1 %cmp61, label %if.end236, label %if.else64

if.else64:                                        ; preds = %if.then59
  %cmp66 = icmp slt i32 %19, 0
  br i1 %cmp66, label %if.then67, label %if.else141

if.then67:                                        ; preds = %if.else64
  %balance68 = getelementptr inbounds %struct.init_node* %r.0393, i64 0, i32 3
  %20 = load i32* %balance68, align 4, !tbaa !117
  %cmp69 = icmp slt i32 %20, 0
  %right71 = getelementptr inbounds %struct.init_node* %r.0393, i64 0, i32 1
  %21 = load %struct.init_node** %right71, align 8, !tbaa !108
  br i1 %cmp69, label %if.then70, label %if.else96

if.then70:                                        ; preds = %if.then67
  store %struct.init_node* %21, %struct.init_node** %left57, align 8, !tbaa !107
  %tobool74 = icmp eq %struct.init_node* %21, null
  br i1 %tobool74, label %if.end78, label %if.then75

if.then75:                                        ; preds = %if.then70
  %parent77 = getelementptr inbounds %struct.init_node* %21, i64 0, i32 2
  store %struct.init_node* %p.3394, %struct.init_node** %parent77, align 8, !tbaa !109
  br label %if.end78

if.end78:                                         ; preds = %if.then70, %if.then75
  store %struct.init_node* %p.3394, %struct.init_node** %right71, align 8, !tbaa !108
  store i32 0, i32* %balance60, align 4, !tbaa !117
  store i32 0, i32* %balance68, align 4, !tbaa !117
  %parent82 = getelementptr inbounds %struct.init_node* %p.3394, i64 0, i32 2
  %22 = load %struct.init_node** %parent82, align 8, !tbaa !109
  store %struct.init_node* %r.0393, %struct.init_node** %parent82, align 8, !tbaa !109
  %parent84 = getelementptr inbounds %struct.init_node* %r.0393, i64 0, i32 2
  store %struct.init_node* %22, %struct.init_node** %parent84, align 8, !tbaa !109
  %tobool85 = icmp eq %struct.init_node* %22, null
  br i1 %tobool85, label %if.else94, label %if.then86

if.then86:                                        ; preds = %if.end78
  %left87 = getelementptr inbounds %struct.init_node* %22, i64 0, i32 0
  %23 = load %struct.init_node** %left87, align 8, !tbaa !107
  %cmp88 = icmp eq %struct.init_node* %23, %p.3394
  br i1 %cmp88, label %if.then89, label %if.else91

if.then89:                                        ; preds = %if.then86
  store %struct.init_node* %r.0393, %struct.init_node** %left87, align 8, !tbaa !107
  br label %while.end238

if.else91:                                        ; preds = %if.then86
  %right92 = getelementptr inbounds %struct.init_node* %22, i64 0, i32 1
  store %struct.init_node* %r.0393, %struct.init_node** %right92, align 8, !tbaa !108
  br label %while.end238

if.else94:                                        ; preds = %if.end78
  store %struct.init_node* %r.0393, %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  br label %while.end238

if.else96:                                        ; preds = %if.then67
  %left98 = getelementptr inbounds %struct.init_node* %21, i64 0, i32 0
  %24 = load %struct.init_node** %left98, align 8, !tbaa !107
  store %struct.init_node* %24, %struct.init_node** %right71, align 8, !tbaa !108
  %tobool101 = icmp eq %struct.init_node* %24, null
  br i1 %tobool101, label %if.end105, label %if.then102

if.then102:                                       ; preds = %if.else96
  %parent104 = getelementptr inbounds %struct.init_node* %24, i64 0, i32 2
  store %struct.init_node* %r.0393, %struct.init_node** %parent104, align 8, !tbaa !109
  br label %if.end105

if.end105:                                        ; preds = %if.else96, %if.then102
  store %struct.init_node* %r.0393, %struct.init_node** %left98, align 8, !tbaa !107
  %right107 = getelementptr inbounds %struct.init_node* %21, i64 0, i32 1
  %25 = load %struct.init_node** %right107, align 8, !tbaa !108
  store %struct.init_node* %25, %struct.init_node** %left57, align 8, !tbaa !107
  %tobool110 = icmp eq %struct.init_node* %25, null
  br i1 %tobool110, label %if.end114, label %if.then111

if.then111:                                       ; preds = %if.end105
  %parent113 = getelementptr inbounds %struct.init_node* %25, i64 0, i32 2
  store %struct.init_node* %p.3394, %struct.init_node** %parent113, align 8, !tbaa !109
  br label %if.end114

if.end114:                                        ; preds = %if.end105, %if.then111
  store %struct.init_node* %p.3394, %struct.init_node** %right107, align 8, !tbaa !108
  %balance116 = getelementptr inbounds %struct.init_node* %21, i64 0, i32 3
  %26 = load i32* %balance116, align 4, !tbaa !117
  %.lobit375 = lshr i32 %26, 31
  store i32 %.lobit375, i32* %balance60, align 4, !tbaa !117
  %27 = load i32* %balance116, align 4, !tbaa !117
  %cmp120 = icmp sgt i32 %27, 0
  %sub = sext i1 %cmp120 to i32
  store i32 %sub, i32* %balance68, align 4, !tbaa !117
  store i32 0, i32* %balance116, align 4, !tbaa !117
  %parent124 = getelementptr inbounds %struct.init_node* %p.3394, i64 0, i32 2
  %28 = load %struct.init_node** %parent124, align 8, !tbaa !109
  store %struct.init_node* %21, %struct.init_node** %parent124, align 8, !tbaa !109
  %parent126 = getelementptr inbounds %struct.init_node* %r.0393, i64 0, i32 2
  store %struct.init_node* %21, %struct.init_node** %parent126, align 8, !tbaa !109
  %parent127 = getelementptr inbounds %struct.init_node* %21, i64 0, i32 2
  store %struct.init_node* %28, %struct.init_node** %parent127, align 8, !tbaa !109
  %tobool128 = icmp eq %struct.init_node* %28, null
  br i1 %tobool128, label %if.else138, label %if.then129

if.then129:                                       ; preds = %if.end114
  %left130 = getelementptr inbounds %struct.init_node* %28, i64 0, i32 0
  %29 = load %struct.init_node** %left130, align 8, !tbaa !107
  %cmp131 = icmp eq %struct.init_node* %29, %p.3394
  br i1 %cmp131, label %if.then133, label %if.else135

if.then133:                                       ; preds = %if.then129
  store %struct.init_node* %21, %struct.init_node** %left130, align 8, !tbaa !107
  br label %while.end238

if.else135:                                       ; preds = %if.then129
  %right136 = getelementptr inbounds %struct.init_node* %28, i64 0, i32 1
  store %struct.init_node* %21, %struct.init_node** %right136, align 8, !tbaa !108
  br label %while.end238

if.else138:                                       ; preds = %if.end114
  store %struct.init_node* %21, %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  br label %while.end238

if.else141:                                       ; preds = %if.else64
  store i32 0, i32* %balance60, align 4, !tbaa !117
  br label %while.end238

if.else144:                                       ; preds = %while.body56
  br i1 %cmp61, label %if.end236, label %if.else150

if.else150:                                       ; preds = %if.else144
  %cmp152 = icmp sgt i32 %19, 0
  br i1 %cmp152, label %if.then154, label %if.else233

if.then154:                                       ; preds = %if.else150
  %balance155 = getelementptr inbounds %struct.init_node* %r.0393, i64 0, i32 3
  %30 = load i32* %balance155, align 4, !tbaa !117
  %cmp156 = icmp sgt i32 %30, 0
  %left159 = getelementptr inbounds %struct.init_node* %r.0393, i64 0, i32 0
  %31 = load %struct.init_node** %left159, align 8, !tbaa !107
  br i1 %cmp156, label %if.then158, label %if.else185

if.then158:                                       ; preds = %if.then154
  %right160 = getelementptr inbounds %struct.init_node* %p.3394, i64 0, i32 1
  store %struct.init_node* %31, %struct.init_node** %right160, align 8, !tbaa !108
  %tobool162 = icmp eq %struct.init_node* %31, null
  br i1 %tobool162, label %if.end166, label %if.then163

if.then163:                                       ; preds = %if.then158
  %parent165 = getelementptr inbounds %struct.init_node* %31, i64 0, i32 2
  store %struct.init_node* %p.3394, %struct.init_node** %parent165, align 8, !tbaa !109
  br label %if.end166

if.end166:                                        ; preds = %if.then158, %if.then163
  store %struct.init_node* %p.3394, %struct.init_node** %left159, align 8, !tbaa !107
  store i32 0, i32* %balance60, align 4, !tbaa !117
  store i32 0, i32* %balance155, align 4, !tbaa !117
  %parent170 = getelementptr inbounds %struct.init_node* %p.3394, i64 0, i32 2
  %32 = load %struct.init_node** %parent170, align 8, !tbaa !109
  store %struct.init_node* %r.0393, %struct.init_node** %parent170, align 8, !tbaa !109
  %parent172 = getelementptr inbounds %struct.init_node* %r.0393, i64 0, i32 2
  store %struct.init_node* %32, %struct.init_node** %parent172, align 8, !tbaa !109
  %tobool173 = icmp eq %struct.init_node* %32, null
  br i1 %tobool173, label %if.else183, label %if.then174

if.then174:                                       ; preds = %if.end166
  %left175 = getelementptr inbounds %struct.init_node* %32, i64 0, i32 0
  %33 = load %struct.init_node** %left175, align 8, !tbaa !107
  %cmp176 = icmp eq %struct.init_node* %33, %p.3394
  br i1 %cmp176, label %if.then178, label %if.else180

if.then178:                                       ; preds = %if.then174
  store %struct.init_node* %r.0393, %struct.init_node** %left175, align 8, !tbaa !107
  br label %while.end238

if.else180:                                       ; preds = %if.then174
  %right181 = getelementptr inbounds %struct.init_node* %32, i64 0, i32 1
  store %struct.init_node* %r.0393, %struct.init_node** %right181, align 8, !tbaa !108
  br label %while.end238

if.else183:                                       ; preds = %if.end166
  store %struct.init_node* %r.0393, %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  br label %while.end238

if.else185:                                       ; preds = %if.then154
  %right188 = getelementptr inbounds %struct.init_node* %31, i64 0, i32 1
  %34 = load %struct.init_node** %right188, align 8, !tbaa !108
  store %struct.init_node* %34, %struct.init_node** %left159, align 8, !tbaa !107
  %tobool191 = icmp eq %struct.init_node* %34, null
  br i1 %tobool191, label %if.end195, label %if.then192

if.then192:                                       ; preds = %if.else185
  %parent194 = getelementptr inbounds %struct.init_node* %34, i64 0, i32 2
  store %struct.init_node* %r.0393, %struct.init_node** %parent194, align 8, !tbaa !109
  br label %if.end195

if.end195:                                        ; preds = %if.else185, %if.then192
  store %struct.init_node* %r.0393, %struct.init_node** %right188, align 8, !tbaa !108
  %left197 = getelementptr inbounds %struct.init_node* %31, i64 0, i32 0
  %35 = load %struct.init_node** %left197, align 8, !tbaa !107
  %right198 = getelementptr inbounds %struct.init_node* %p.3394, i64 0, i32 1
  store %struct.init_node* %35, %struct.init_node** %right198, align 8, !tbaa !108
  %tobool200 = icmp eq %struct.init_node* %35, null
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %if.end195
  %parent203 = getelementptr inbounds %struct.init_node* %35, i64 0, i32 2
  store %struct.init_node* %p.3394, %struct.init_node** %parent203, align 8, !tbaa !109
  br label %if.end204

if.end204:                                        ; preds = %if.end195, %if.then201
  store %struct.init_node* %p.3394, %struct.init_node** %left197, align 8, !tbaa !107
  %balance206 = getelementptr inbounds %struct.init_node* %31, i64 0, i32 3
  %36 = load i32* %balance206, align 4, !tbaa !117
  %.lobit = lshr i32 %36, 31
  store i32 %.lobit, i32* %balance155, align 4, !tbaa !117
  %37 = load i32* %balance206, align 4, !tbaa !117
  %cmp211 = icmp sgt i32 %37, 0
  %sub213 = sext i1 %cmp211 to i32
  store i32 %sub213, i32* %balance60, align 4, !tbaa !117
  store i32 0, i32* %balance206, align 4, !tbaa !117
  %parent216 = getelementptr inbounds %struct.init_node* %p.3394, i64 0, i32 2
  %38 = load %struct.init_node** %parent216, align 8, !tbaa !109
  store %struct.init_node* %31, %struct.init_node** %parent216, align 8, !tbaa !109
  %parent218 = getelementptr inbounds %struct.init_node* %r.0393, i64 0, i32 2
  store %struct.init_node* %31, %struct.init_node** %parent218, align 8, !tbaa !109
  %parent219 = getelementptr inbounds %struct.init_node* %31, i64 0, i32 2
  store %struct.init_node* %38, %struct.init_node** %parent219, align 8, !tbaa !109
  %tobool220 = icmp eq %struct.init_node* %38, null
  br i1 %tobool220, label %if.else230, label %if.then221

if.then221:                                       ; preds = %if.end204
  %left222 = getelementptr inbounds %struct.init_node* %38, i64 0, i32 0
  %39 = load %struct.init_node** %left222, align 8, !tbaa !107
  %cmp223 = icmp eq %struct.init_node* %39, %p.3394
  br i1 %cmp223, label %if.then225, label %if.else227

if.then225:                                       ; preds = %if.then221
  store %struct.init_node* %31, %struct.init_node** %left222, align 8, !tbaa !107
  br label %while.end238

if.else227:                                       ; preds = %if.then221
  %right228 = getelementptr inbounds %struct.init_node* %38, i64 0, i32 1
  store %struct.init_node* %31, %struct.init_node** %right228, align 8, !tbaa !108
  br label %while.end238

if.else230:                                       ; preds = %if.end204
  store %struct.init_node* %31, %struct.init_node** @constructor_pending_elts, align 8, !tbaa !7
  br label %while.end238

if.else233:                                       ; preds = %if.else150
  store i32 0, i32* %balance60, align 4, !tbaa !117
  br label %while.end238

if.end236:                                        ; preds = %if.else144, %if.then59
  %storemerge = phi i32 [ -1, %if.then59 ], [ 1, %if.else144 ]
  store i32 %storemerge, i32* %balance60, align 4, !tbaa !117
  %parent237 = getelementptr inbounds %struct.init_node* %p.3394, i64 0, i32 2
  %40 = load %struct.init_node** %parent237, align 8, !tbaa !109
  %tobool55 = icmp eq %struct.init_node* %40, null
  br i1 %tobool55, label %while.end238, label %while.body56

while.end238:                                     ; preds = %if.end236, %if.end48, %if.then178, %if.else180, %if.else183, %if.then225, %if.else227, %if.else230, %if.then89, %if.else91, %if.else94, %if.then133, %if.else135, %if.else138, %if.end, %if.end43, %if.else233, %if.else141
  ret void
}

declare i8* @ggc_alloc(i64) #1

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @valid_compound_expr_initializer(%union.tree_node* %value, %union.tree_node* %endtype) #0 {
entry:
  %code22 = getelementptr inbounds %union.tree_node* %value, i64 0, i32 0, i32 0, i32 2
  %bf.load23 = load i32* %code22, align 8
  %bf.clear24 = and i32 %bf.load23, 255
  %cmp25 = icmp eq i32 %bf.clear24, 47
  br i1 %cmp25, label %if.then, label %if.else

if.then:                                          ; preds = %entry, %if.end
  %value.tr26 = phi %union.tree_node* [ %3, %if.end ], [ %value, %entry ]
  %operands = getelementptr inbounds %union.tree_node* %value.tr26, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %call = tail call fastcc %union.tree_node* @valid_compound_expr_initializer(%union.tree_node* %0, %union.tree_node* %endtype)
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %cmp1 = icmp eq %union.tree_node* %call, %1
  br i1 %cmp1, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %arrayidx5 = getelementptr inbounds i32* %operands, i64 2
  %2 = bitcast i32* %arrayidx5 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !7
  %code = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 47
  br i1 %cmp, label %if.then, label %if.else

if.else:                                          ; preds = %if.end, %entry
  %bf.load.lcssa = phi i32 [ %bf.load23, %entry ], [ %bf.load, %if.end ]
  %value.tr.lcssa = phi %union.tree_node* [ %value, %entry ], [ %3, %if.end ]
  %bf.clear9 = and i32 %bf.load.lcssa, 512
  %tobool = icmp eq i32 %bf.clear9, 0
  br i1 %tobool, label %land.lhs.true, label %return

land.lhs.true:                                    ; preds = %if.else
  %call10 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %value.tr.lcssa, %union.tree_node* %endtype) #6
  %tobool11 = icmp eq %union.tree_node* %call10, null
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !7
  %.value = select i1 %tobool11, %union.tree_node* %4, %union.tree_node* %value.tr.lcssa
  ret %union.tree_node* %.value

return:                                           ; preds = %if.then, %if.else
  %retval.0 = phi %union.tree_node* [ %value.tr.lcssa, %if.else ], [ %call, %if.then ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #5

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #4

; Function Attrs: nounwind uwtable
define internal fastcc void @warn_for_assignment(i8* %msgid, i8* %opname, %union.tree_node* readonly %function, i32 %argnum) #0 {
entry:
  %cmp = icmp eq i8* %opname, null
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %call = call %union.tree_node* @maybe_building_objc_message_expr() #6
  %tobool = icmp ne %union.tree_node* %call, null
  %cmp1 = icmp sgt i32 %argnum, 2
  %or.cond = and i1 %tobool, %cmp1
  %sub = add nsw i32 %argnum, -2
  %sub.argnum = select i1 %or.cond, i32 %sub, i32 %argnum
  %call.function = select i1 %or.cond, %union.tree_node* %call, %union.tree_node* %function
  %tobool3 = icmp eq %union.tree_node* %call.function, null
  br i1 %tobool3, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.then
  %id = getelementptr inbounds %union.tree_node* %call.function, i64 0, i32 0, i32 1
  %len = bitcast i8** %id to i32*
  %0 = load i32* %len, align 4, !tbaa !118
  %conv = zext i32 %0 to i64
  %add8 = add i64 %conv, 49
  %1 = alloca i8, i64 %add8, align 1
  %2 = getelementptr inbounds i8** %id, i64 1
  %3 = load i8** %2, align 8, !tbaa !13
  %call11 = call i32 (i8*, i8*, ...)* @sprintf(i8* %1, i8* getelementptr inbounds ([23 x i8]* @.str174, i64 0, i64 0), i32 %sub.argnum, i8* %3) #6
  br label %if.end18

if.else:                                          ; preds = %if.then
  %4 = alloca [64 x i8], align 1
  %.sub = getelementptr inbounds [64 x i8]* %4, i64 0, i64 0
  %call16 = call i32 (i8*, i8*, ...)* @sprintf(i8* %.sub, i8* getelementptr inbounds ([38 x i8]* @.str175, i64 0, i64 0), i32 %sub.argnum) #6
  br label %if.end18

if.end18:                                         ; preds = %if.then4, %if.else, %entry
  %opname.addr.0 = phi i8* [ %opname, %entry ], [ %1, %if.then4 ], [ %.sub, %if.else ]
  call void (i8*, ...)* @pedwarn(i8* %msgid, i8* %opname.addr.0) #6
  ret void
}

declare %union.tree_node* @unsigned_type(%union.tree_node*) #1

declare %union.tree_node* @maybe_building_objc_message_expr() #1

declare i32 @warn_if_unused_value(%union.tree_node*) #1

declare i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #1

declare i32 @self_promoting_args_p(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @type_lists_compatible_p(%union.tree_node* readonly %args1, %union.tree_node* readonly %args2) #0 {
entry:
  %cmp208 = icmp eq %union.tree_node* %args1, null
  %cmp1209 = icmp eq %union.tree_node* %args2, null
  %or.cond210 = and i1 %cmp208, %cmp1209
  br i1 %or.cond210, label %return, label %if.end

if.end:                                           ; preds = %entry, %if.end157
  %cmp1216 = phi i1 [ %cmp1, %if.end157 ], [ %cmp1209, %entry ]
  %cmp215 = phi i1 [ %cmp, %if.end157 ], [ %cmp208, %entry ]
  %newval.0214 = phi i32 [ %newval.1, %if.end157 ], [ 0, %entry ]
  %val.0213 = phi i32 [ %newval.1.val.0, %if.end157 ], [ 1, %entry ]
  %args2.addr.0212 = phi %union.tree_node* [ %37, %if.end157 ], [ %args2, %entry ]
  %args1.addr.0211 = phi %union.tree_node* [ %36, %if.end157 ], [ %args1, %entry ]
  %or.cond165 = or i1 %cmp215, %cmp1216
  br i1 %or.cond165, label %return, label %if.end5

if.end5:                                          ; preds = %if.end
  %value = getelementptr inbounds %union.tree_node* %args1.addr.0211, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !25
  %cmp6 = icmp eq %union.tree_node* %1, null
  %value9 = getelementptr inbounds %union.tree_node* %args2.addr.0212, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value9 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !25
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end5
  %call = tail call %union.tree_node* @simple_type_promotes_to(%union.tree_node* %3) #6
  %cmp10 = icmp eq %union.tree_node* %call, null
  br i1 %cmp10, label %if.end157, label %return

if.else:                                          ; preds = %if.end5
  %cmp15 = icmp eq %union.tree_node* %3, null
  br i1 %cmp15, label %if.then16, label %if.else23

if.then16:                                        ; preds = %if.else
  %call19 = tail call %union.tree_node* @simple_type_promotes_to(%union.tree_node* %1) #6
  %cmp20 = icmp eq %union.tree_node* %call19, null
  br i1 %cmp20, label %if.end157, label %return

if.else23:                                        ; preds = %if.else
  %4 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 15
  %5 = load %union.tree_node** %4, align 8, !tbaa !24
  %6 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 15
  %7 = load %union.tree_node** %6, align 8, !tbaa !24
  %call30 = tail call i32 @comptypes(%union.tree_node* %5, %union.tree_node* %7)
  %tobool = icmp eq i32 %call30, 0
  br i1 %tobool, label %if.then31, label %if.end157

if.then31:                                        ; preds = %if.else23
  %8 = load %union.tree_node** %0, align 8, !tbaa !25
  %code = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp34 = icmp eq i32 %bf.clear, 21
  br i1 %cmp34, label %land.lhs.true35, label %if.else84

land.lhs.true35:                                  ; preds = %if.then31
  %9 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 11
  %10 = load %union.tree_node** %9, align 8, !tbaa !17
  %cmp39 = icmp eq %union.tree_node* %10, null
  br i1 %cmp39, label %land.lhs.true47, label %lor.lhs.false40

lor.lhs.false40:                                  ; preds = %land.lhs.true35
  %type38 = bitcast %union.tree_node* %8 to %struct.tree_type*
  %transparent_union_flag = getelementptr inbounds %struct.tree_type* %type38, i64 0, i32 6
  %bf.load44 = load i32* %transparent_union_flag, align 4
  %bf.clear45 = and i32 %bf.load44, 524288
  %tobool46 = icmp eq i32 %bf.clear45, 0
  br i1 %tobool46, label %if.else84, label %land.lhs.true47

land.lhs.true47:                                  ; preds = %lor.lhs.false40, %land.lhs.true35
  %size = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 2
  %11 = bitcast i32* %size to %union.tree_node**
  %12 = load %union.tree_node** %11, align 8, !tbaa !8
  %code52 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %bf.load53 = load i32* %code52, align 8
  %bf.clear54 = and i32 %bf.load53, 255
  %cmp55 = icmp eq i32 %bf.clear54, 25
  br i1 %cmp55, label %land.lhs.true56, label %if.else84

land.lhs.true56:                                  ; preds = %land.lhs.true47
  %13 = load %union.tree_node** %2, align 8, !tbaa !25
  %size64 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 2
  %14 = bitcast i32* %size64 to %union.tree_node**
  %15 = load %union.tree_node** %14, align 8, !tbaa !8
  %call65 = tail call i32 @tree_int_cst_equal(%union.tree_node* %12, %union.tree_node* %15) #6
  %tobool66 = icmp eq i32 %call65, 0
  br i1 %tobool66, label %if.else84, label %if.then67

if.then67:                                        ; preds = %land.lhs.true56
  %16 = load %union.tree_node** %0, align 8, !tbaa !25
  %values = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 1
  %17 = load i8** %values, align 8
  %cond204 = icmp eq i8* %17, null
  br i1 %cond204, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then67
  %18 = bitcast i8* %17 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %memb.0205 = phi %union.tree_node* [ %18, %for.body.lr.ph ], [ %21, %for.inc ]
  %type73 = getelementptr inbounds %union.tree_node* %memb.0205, i64 0, i32 0, i32 0, i32 1
  %19 = load %union.tree_node** %type73, align 8, !tbaa !1
  %20 = load %union.tree_node** %2, align 8, !tbaa !25
  %call76 = tail call i32 @comptypes(%union.tree_node* %19, %union.tree_node* %20)
  %tobool77 = icmp eq i32 %call76, 0
  br i1 %tobool77, label %for.inc, label %for.end

for.inc:                                          ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node* %memb.0205, i64 0, i32 0, i32 0, i32 0
  %21 = load %union.tree_node** %chain, align 8, !tbaa !28
  %cond = icmp eq %union.tree_node* %21, null
  br i1 %cond, label %return, label %for.body

for.end:                                          ; preds = %for.body
  %cmp81 = icmp eq %union.tree_node* %memb.0205, null
  br i1 %cmp81, label %return, label %if.end157

if.else84:                                        ; preds = %land.lhs.true56, %lor.lhs.false40, %land.lhs.true47, %if.then31
  %22 = load %union.tree_node** %2, align 8, !tbaa !25
  %code88 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 2
  %bf.load89 = load i32* %code88, align 8
  %bf.clear90 = and i32 %bf.load89, 255
  %cmp91 = icmp eq i32 %bf.clear90, 21
  br i1 %cmp91, label %land.lhs.true92, label %return

land.lhs.true92:                                  ; preds = %if.else84
  %23 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 11
  %24 = load %union.tree_node** %23, align 8, !tbaa !17
  %cmp97 = icmp eq %union.tree_node* %24, null
  br i1 %cmp97, label %land.lhs.true107, label %lor.lhs.false98

lor.lhs.false98:                                  ; preds = %land.lhs.true92
  %type95 = bitcast %union.tree_node* %22 to %struct.tree_type*
  %transparent_union_flag102 = getelementptr inbounds %struct.tree_type* %type95, i64 0, i32 6
  %bf.load103 = load i32* %transparent_union_flag102, align 4
  %bf.clear105 = and i32 %bf.load103, 524288
  %tobool106 = icmp eq i32 %bf.clear105, 0
  br i1 %tobool106, label %return, label %land.lhs.true107

land.lhs.true107:                                 ; preds = %lor.lhs.false98, %land.lhs.true92
  %size111 = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 2
  %25 = bitcast i32* %size111 to %union.tree_node**
  %26 = load %union.tree_node** %25, align 8, !tbaa !8
  %code113 = getelementptr inbounds %union.tree_node* %26, i64 0, i32 0, i32 0, i32 2
  %bf.load114 = load i32* %code113, align 8
  %bf.clear115 = and i32 %bf.load114, 255
  %cmp116 = icmp eq i32 %bf.clear115, 25
  br i1 %cmp116, label %land.lhs.true117, label %return

land.lhs.true117:                                 ; preds = %land.lhs.true107
  %27 = load %union.tree_node** %0, align 8, !tbaa !25
  %size125 = getelementptr inbounds %union.tree_node* %27, i64 0, i32 0, i32 2
  %28 = bitcast i32* %size125 to %union.tree_node**
  %29 = load %union.tree_node** %28, align 8, !tbaa !8
  %call126 = tail call i32 @tree_int_cst_equal(%union.tree_node* %26, %union.tree_node* %29) #6
  %tobool127 = icmp eq i32 %call126, 0
  br i1 %tobool127, label %return, label %if.then128

if.then128:                                       ; preds = %land.lhs.true117
  %30 = load %union.tree_node** %2, align 8, !tbaa !25
  %values133 = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 1
  %31 = load i8** %values133, align 8
  %cond199206 = icmp eq i8* %31, null
  br i1 %cond199206, label %return, label %for.body136.lr.ph

for.body136.lr.ph:                                ; preds = %if.then128
  %32 = bitcast i8* %31 to %union.tree_node*
  br label %for.body136

for.body136:                                      ; preds = %for.body136.lr.ph, %for.inc145
  %memb129.0207 = phi %union.tree_node* [ %32, %for.body136.lr.ph ], [ %35, %for.inc145 ]
  %type138 = getelementptr inbounds %union.tree_node* %memb129.0207, i64 0, i32 0, i32 0, i32 1
  %33 = load %union.tree_node** %type138, align 8, !tbaa !1
  %34 = load %union.tree_node** %0, align 8, !tbaa !25
  %call141 = tail call i32 @comptypes(%union.tree_node* %33, %union.tree_node* %34)
  %tobool142 = icmp eq i32 %call141, 0
  br i1 %tobool142, label %for.inc145, label %for.end148

for.inc145:                                       ; preds = %for.body136
  %chain147 = getelementptr inbounds %union.tree_node* %memb129.0207, i64 0, i32 0, i32 0, i32 0
  %35 = load %union.tree_node** %chain147, align 8, !tbaa !28
  %cond199 = icmp eq %union.tree_node* %35, null
  br i1 %cond199, label %return, label %for.body136

for.end148:                                       ; preds = %for.body136
  %cmp149 = icmp eq %union.tree_node* %memb129.0207, null
  br i1 %cmp149, label %return, label %if.end157

if.end157:                                        ; preds = %if.then7, %if.then16, %if.else23, %for.end, %for.end148
  %newval.1 = phi i32 [ %newval.0214, %if.then7 ], [ %newval.0214, %if.then16 ], [ %call30, %if.else23 ], [ 0, %for.end ], [ 0, %for.end148 ]
  %cmp158 = icmp sgt i32 %newval.1, %val.0213
  %newval.1.val.0 = select i1 %cmp158, i32 %newval.1, i32 %val.0213
  %chain162 = getelementptr inbounds %union.tree_node* %args1.addr.0211, i64 0, i32 0, i32 0, i32 0
  %36 = load %union.tree_node** %chain162, align 8, !tbaa !28
  %chain164 = getelementptr inbounds %union.tree_node* %args2.addr.0212, i64 0, i32 0, i32 0, i32 0
  %37 = load %union.tree_node** %chain164, align 8, !tbaa !28
  %cmp = icmp eq %union.tree_node* %36, null
  %cmp1 = icmp eq %union.tree_node* %37, null
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end

return:                                           ; preds = %if.end157, %if.end, %if.then7, %if.then16, %for.end, %for.end148, %land.lhs.true117, %lor.lhs.false98, %land.lhs.true107, %if.else84, %if.then67, %if.then128, %for.inc, %for.inc145, %entry
  %retval.0 = phi i32 [ 1, %entry ], [ 0, %for.inc145 ], [ 0, %for.inc ], [ %newval.1.val.0, %if.end157 ], [ 0, %if.end ], [ 0, %if.then7 ], [ 0, %if.then16 ], [ 0, %for.end ], [ 0, %for.end148 ], [ 0, %land.lhs.true117 ], [ 0, %lor.lhs.false98 ], [ 0, %land.lhs.true107 ], [ 0, %if.else84 ], [ 0, %if.then67 ], [ 0, %if.then128 ]
  ret i32 %retval.0
}

declare %union.tree_node* @simple_type_promotes_to(%union.tree_node*) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #6

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #6

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #6

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !3, i64 8}
!2 = metadata !{metadata !"tree_common", metadata !3, i64 0, metadata !3, i64 8, metadata !4, i64 16, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19}
!3 = metadata !{metadata !"any pointer", metadata !4, i64 0}
!4 = metadata !{metadata !"omnipotent char", metadata !5, i64 0}
!5 = metadata !{metadata !"Simple C/C++ TBAA"}
!6 = metadata !{metadata !"int", metadata !4, i64 0}
!7 = metadata !{metadata !3, metadata !3, i64 0}
!8 = metadata !{metadata !9, metadata !3, i64 32}
!9 = metadata !{metadata !"tree_type", metadata !2, i64 0, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !3, i64 48, metadata !6, i64 56, metadata !6, i64 60, metadata !4, i64 61, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 64, metadata !3, i64 72, metadata !3, i64 80, metadata !4, i64 88, metadata !3, i64 96, metadata !3, i64 104, metadata !3, i64 112, metadata !3, i64 120, metadata !3, i64 128, metadata !3, i64 136, metadata !3, i64 144, metadata !10, i64 152, metadata !3, i64 160}
!10 = metadata !{metadata !"long long", metadata !4, i64 0}
!11 = metadata !{metadata !12, metadata !3, i64 72}
!12 = metadata !{metadata !"tree_decl", metadata !2, i64 0, metadata !3, i64 24, metadata !6, i64 32, metadata !6, i64 36, metadata !3, i64 40, metadata !4, i64 48, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 51, metadata !6, i64 51, metadata !6, i64 51, metadata !6, i64 51, metadata !6, i64 51, metadata !4, i64 51, metadata !6, i64 51, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 53, metadata !6, i64 53, metadata !6, i64 53, metadata !6, i64 53, metadata !6, i64 53, metadata !4, i64 56, metadata !3, i64 64, metadata !3, i64 72, metadata !3, i64 80, metadata !3, i64 88, metadata !3, i64 96, metadata !3, i64 104, metadata !3, i64 112, metadata !3, i64 120, metadata !3, i64 128, metadata !3, i64 136, metadata !3, i64 144, metadata !3, i64 152, metadata !4, i64 160, metadata !3, i64 168, metadata !3, i64 176, metadata !3, i64 184, metadata !10, i64 192, metadata !3, i64 200}
!13 = metadata !{metadata !14, metadata !3, i64 32}
!14 = metadata !{metadata !"tree_identifier", metadata !2, i64 0, metadata !15, i64 24}
!15 = metadata !{metadata !"ht_identifier", metadata !6, i64 0, metadata !3, i64 8}
!16 = metadata !{metadata !9, metadata !3, i64 112}
!17 = metadata !{metadata !9, metadata !3, i64 96}
!18 = metadata !{metadata !19, metadata !3, i64 248}
!19 = metadata !{metadata !"gcc_target", metadata !20, i64 0, metadata !22, i64 168, metadata !3, i64 240, metadata !3, i64 248, metadata !3, i64 256, metadata !3, i64 264, metadata !3, i64 272, metadata !3, i64 280, metadata !3, i64 288, metadata !3, i64 296, metadata !3, i64 304, metadata !3, i64 312, metadata !3, i64 320, metadata !23, i64 328, metadata !23, i64 329, metadata !3, i64 336}
!20 = metadata !{metadata !"asm_out", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !21, i64 24, metadata !21, i64 56, metadata !3, i64 88, metadata !3, i64 96, metadata !3, i64 104, metadata !3, i64 112, metadata !3, i64 120, metadata !3, i64 128, metadata !3, i64 136, metadata !3, i64 144, metadata !3, i64 152, metadata !3, i64 160}
!21 = metadata !{metadata !"asm_int_op", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24}
!22 = metadata !{metadata !"sched", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !3, i64 48, metadata !3, i64 56, metadata !3, i64 64}
!23 = metadata !{metadata !"_Bool", metadata !4, i64 0}
!24 = metadata !{metadata !9, metadata !3, i64 128}
!25 = metadata !{metadata !26, metadata !3, i64 32}
!26 = metadata !{metadata !"tree_list", metadata !2, i64 0, metadata !3, i64 24, metadata !3, i64 32}
!27 = metadata !{metadata !6, metadata !6, i64 0}
!28 = metadata !{metadata !2, metadata !3, i64 0}
!29 = metadata !{metadata !19, metadata !3, i64 264}
!30 = metadata !{metadata !9, metadata !3, i64 136}
!31 = metadata !{metadata !9, metadata !3, i64 104}
!32 = metadata !{metadata !9, metadata !3, i64 40}
!33 = metadata !{metadata !12, metadata !3, i64 104}
!34 = metadata !{metadata !4, metadata !4, i64 0}
!35 = metadata !{metadata !36, metadata !6, i64 24}
!36 = metadata !{metadata !"tree_exp", metadata !2, i64 0, metadata !6, i64 24, metadata !4, i64 32}
!37 = metadata !{metadata !12, metadata !3, i64 40}
!38 = metadata !{metadata !9, metadata !3, i64 72}
!39 = metadata !{metadata !9, metadata !3, i64 160}
!40 = metadata !{metadata !41, metadata !6, i64 0}
!41 = metadata !{metadata !"lang_type", metadata !6, i64 0, metadata !4, i64 8}
!42 = metadata !{metadata !43, metadata !3, i64 56}
!43 = metadata !{metadata !"lang_identifier", metadata !44, i64 0, metadata !3, i64 56, metadata !3, i64 64, metadata !3, i64 72, metadata !3, i64 80, metadata !3, i64 88, metadata !3, i64 96}
!44 = metadata !{metadata !"c_common_identifier", metadata !2, i64 0, metadata !45, i64 24}
!45 = metadata !{metadata !"cpp_hashnode", metadata !15, i64 0, metadata !46, i64 16, metadata !4, i64 18, metadata !4, i64 19, metadata !4, i64 20, metadata !4, i64 21, metadata !4, i64 24}
!46 = metadata !{metadata !"short", metadata !4, i64 0}
!47 = metadata !{metadata !43, metadata !3, i64 88}
!48 = metadata !{metadata !43, metadata !3, i64 64}
!49 = metadata !{metadata !12, metadata !3, i64 120}
!50 = metadata !{metadata !9, metadata !3, i64 48}
!51 = metadata !{metadata !52, metadata !3, i64 32}
!52 = metadata !{metadata !"tree_complex", metadata !2, i64 0, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40}
!53 = metadata !{metadata !52, metadata !3, i64 40}
!54 = metadata !{metadata !12, metadata !3, i64 80}
!55 = metadata !{metadata !56, metadata !6, i64 32}
!56 = metadata !{metadata !"tree_string", metadata !2, i64 0, metadata !3, i64 24, metadata !6, i64 32, metadata !3, i64 40}
!57 = metadata !{metadata !9, metadata !3, i64 24}
!58 = metadata !{metadata !59, metadata !6, i64 0}
!59 = metadata !{metadata !"spelling", metadata !6, i64 0, metadata !4, i64 8}
!60 = metadata !{metadata !61, metadata !3, i64 8}
!61 = metadata !{metadata !"initializer_stack", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !3, i64 48, metadata !3, i64 56, metadata !6, i64 64, metadata !4, i64 68, metadata !4, i64 69, metadata !4, i64 70, metadata !4, i64 71}
!62 = metadata !{metadata !61, metadata !3, i64 16}
!63 = metadata !{metadata !61, metadata !4, i64 69}
!64 = metadata !{metadata !61, metadata !4, i64 70}
!65 = metadata !{metadata !61, metadata !3, i64 24}
!66 = metadata !{metadata !61, metadata !3, i64 32}
!67 = metadata !{metadata !61, metadata !3, i64 40}
!68 = metadata !{metadata !61, metadata !3, i64 48}
!69 = metadata !{metadata !61, metadata !3, i64 56}
!70 = metadata !{metadata !61, metadata !6, i64 64}
!71 = metadata !{metadata !61, metadata !4, i64 71}
!72 = metadata !{metadata !61, metadata !4, i64 68}
!73 = metadata !{metadata !61, metadata !3, i64 0}
!74 = metadata !{metadata !75, metadata !3, i64 0}
!75 = metadata !{metadata !"constructor_stack", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !3, i64 48, metadata !3, i64 56, metadata !3, i64 64, metadata !3, i64 72, metadata !6, i64 80, metadata !6, i64 84, metadata !3, i64 88, metadata !3, i64 96, metadata !4, i64 104, metadata !4, i64 105, metadata !4, i64 106, metadata !4, i64 107, metadata !4, i64 108, metadata !4, i64 109, metadata !4, i64 110}
!76 = metadata !{metadata !75, metadata !3, i64 8}
!77 = metadata !{metadata !75, metadata !3, i64 16}
!78 = metadata !{metadata !75, metadata !3, i64 24}
!79 = metadata !{metadata !75, metadata !3, i64 32}
!80 = metadata !{metadata !75, metadata !3, i64 40}
!81 = metadata !{metadata !75, metadata !3, i64 48}
!82 = metadata !{metadata !75, metadata !3, i64 56}
!83 = metadata !{metadata !75, metadata !3, i64 64}
!84 = metadata !{metadata !75, metadata !4, i64 104}
!85 = metadata !{metadata !75, metadata !4, i64 105}
!86 = metadata !{metadata !75, metadata !4, i64 107}
!87 = metadata !{metadata !75, metadata !3, i64 72}
!88 = metadata !{metadata !75, metadata !6, i64 84}
!89 = metadata !{metadata !75, metadata !4, i64 106}
!90 = metadata !{metadata !75, metadata !4, i64 108}
!91 = metadata !{metadata !75, metadata !4, i64 109}
!92 = metadata !{metadata !75, metadata !4, i64 110}
!93 = metadata !{metadata !75, metadata !3, i64 88}
!94 = metadata !{metadata !75, metadata !3, i64 96}
!95 = metadata !{metadata !10, metadata !10, i64 0}
!96 = metadata !{metadata !97, metadata !3, i64 16}
!97 = metadata !{metadata !"constructor_range_stack", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !3, i64 48}
!98 = metadata !{metadata !97, metadata !3, i64 40}
!99 = metadata !{metadata !97, metadata !3, i64 32}
!100 = metadata !{metadata !97, metadata !3, i64 8}
!101 = metadata !{metadata !97, metadata !3, i64 48}
!102 = metadata !{metadata !97, metadata !3, i64 24}
!103 = metadata !{metadata !97, metadata !3, i64 0}
!104 = metadata !{metadata !105, metadata !3, i64 32}
!105 = metadata !{metadata !"init_node", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !6, i64 24, metadata !3, i64 32, metadata !3, i64 40}
!106 = metadata !{metadata !105, metadata !3, i64 40}
!107 = metadata !{metadata !105, metadata !3, i64 0}
!108 = metadata !{metadata !105, metadata !3, i64 8}
!109 = metadata !{metadata !105, metadata !3, i64 16}
!110 = metadata !{metadata !12, metadata !3, i64 96}
!111 = metadata !{metadata !112, metadata !3, i64 0}
!112 = metadata !{metadata !"c_switch", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16}
!113 = metadata !{metadata !112, metadata !3, i64 8}
!114 = metadata !{metadata !112, metadata !3, i64 16}
!115 = metadata !{metadata !116, metadata !3, i64 0}
!116 = metadata !{metadata !"stmt_tree_s", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !6, i64 24}
!117 = metadata !{metadata !105, metadata !6, i64 24}
!118 = metadata !{metadata !14, metadata !6, i64 24}
