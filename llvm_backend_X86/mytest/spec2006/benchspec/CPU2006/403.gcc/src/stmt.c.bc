; ModuleID = 'stmt.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type { %struct.nesting*, %struct.nesting*, %struct.nesting*, %struct.nesting*, %struct.nesting*, %struct.nesting*, i32, i32, %union.tree_node*, %struct.rtx_def*, i32, i8*, i32, %struct.goto_fixup* }
%struct.nesting = type { %struct.nesting*, %struct.nesting*, i32, %struct.rtx_def*, %union.anon.3 }
%union.anon.3 = type { %struct.anon.6 }
%struct.anon.6 = type { i32, %struct.rtx_def*, %struct.rtx_def*, %struct.nesting*, %union.tree_node*, %union.tree_node*, %struct.label_chain*, i32, i32, i32, i32, %struct.rtx_def*, %union.tree_node** }
%struct.label_chain = type { %struct.label_chain*, %union.tree_node* }
%struct.goto_fixup = type { %struct.goto_fixup*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, i32, %struct.rtx_def*, %union.tree_node* }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.case_node = type { %struct.case_node*, %struct.case_node*, %struct.case_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }

@using_eh_for_cleanups_p = internal unnamed_addr global i1 false
@ggc_pending_trees = external global %struct.varray_head_tag*
@stmt_obstack = common global %struct.obstack zeroinitializer, align 8
@cfun = external global %struct.function*
@optimize = external global i32
@.str = private unnamed_addr constant [7 x i8] c"stmt.c\00", align 1
@__FUNCTION__.label_rtx = private unnamed_addr constant [10 x i8] c"label_rtx\00", align 1
@target_flags = external global i32
@mode_size = external constant [59 x i8]
@current_function_decl = external global %union.tree_node*
@global_rtl = external global [11 x %struct.rtx_def*]
@const_int_rtx = external global [129 x %struct.rtx_def*]
@.str1 = private unnamed_addr constant [36 x i8] c"output operand constraint lacks `='\00", align 1
@.str2 = private unnamed_addr constant [62 x i8] c"output constraint `%c' for operand %d is not at the beginning\00", align 1
@.str3 = private unnamed_addr constant [62 x i8] c"operand constraint contains incorrectly positioned '+' or '='\00", align 1
@.str4 = private unnamed_addr constant [39 x i8] c"`%%' constraint used with last operand\00", align 1
@.str5 = private unnamed_addr constant [48 x i8] c"matching constraint not valid in output operand\00", align 1
@_sch_istable = external constant [256 x i16]
@generating_concat_p = external global i32
@.str6 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@.str7 = private unnamed_addr constant [5 x i8] c"fpsr\00", align 1
@.str8 = private unnamed_addr constant [8 x i8] c"dirflag\00", align 1
@.str9 = private unnamed_addr constant [36 x i8] c"unknown register name `%s' in `asm'\00", align 1
@global_trees = external global [51 x %union.tree_node*]
@tree_code_type = external global [256 x i8]
@.str10 = private unnamed_addr constant [31 x i8] c"more than %d operands in `asm'\00", align 1
@__FUNCTION__.expand_asm_operands = private unnamed_addr constant [20 x i8] c"expand_asm_operands\00", align 1
@.str11 = private unnamed_addr constant [42 x i8] c"output number %d not directly addressable\00", align 1
@empty_string = external constant [0 x i8]
@.str12 = private unnamed_addr constant [50 x i8] c"asm operand %d probably doesn't match constraints\00", align 1
@.str13 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@extra_warnings = external global i32
@warn_unused_value = external global i32
@.str14 = private unnamed_addr constant [25 x i8] c"statement with no effect\00", align 1
@tree_code_length = external global [256 x i32]
@.str15 = private unnamed_addr constant [27 x i8] c"value computed is not used\00", align 1
@__FUNCTION__.expand_end_loop = private unnamed_addr constant [16 x i8] c"expand_end_loop\00", align 1
@flag_expensive_optimizations = external global i32
@n_non_fixed_regs = external global i32
@word_mode = external global i32
@const_tiny_rtx = external global [3 x [59 x %struct.rtx_def*]]
@class_narrowest_mode = external constant [9 x i32]
@mode_wider_mode = external constant [59 x i8]
@__FUNCTION__.expand_return = private unnamed_addr constant [14 x i8] c"expand_return\00", align 1
@__FUNCTION__.expand_start_bindings_and_block = private unnamed_addr constant [32 x i8] c"expand_start_bindings_and_block\00", align 1
@warn_unused_variable = external global i32
@.str16 = private unnamed_addr constant [21 x i8] c"unused variable `%s'\00", align 1
@.str17 = private unnamed_addr constant [50 x i8] c"label `%s' used before containing binding contour\00", align 1
@flag_float_store = external global i32
@flag_stack_check = external global i32
@__FUNCTION__.expand_decl = private unnamed_addr constant [12 x i8] c"expand_decl\00", align 1
@mode_bitsize = external constant [59 x i16]
@__FUNCTION__.expand_anon_union_decl = private unnamed_addr constant [23 x i8] c"expand_anon_union_decl\00", align 1
@warn_switch = external global i32
@.str18 = private unnamed_addr constant [45 x i8] c"enumeration value `%s' not handled in switch\00", align 1
@.str19 = private unnamed_addr constant [40 x i8] c"case value `%ld' not in enumerated type\00", align 1
@.str20 = private unnamed_addr constant [45 x i8] c"case value `%ld' not in enumerated type `%s'\00", align 1
@__FUNCTION__.expand_end_case_type = private unnamed_addr constant [21 x i8] c"expand_end_case_type\00", align 1
@mode_class = external constant [59 x i32]
@use_cost_table = internal unnamed_addr global i32 0, align 4
@optimize_size = external global i32
@flag_pic = external global i32
@cost_table_ = internal unnamed_addr global [129 x i16] zeroinitializer, align 16
@cost_table_initialized = internal unnamed_addr global i1 false
@.str21 = private unnamed_addr constant [36 x i8] c"unreachable code at beginning of %s\00", align 1
@.str22 = private unnamed_addr constant [38 x i8] c"missing close brace for named operand\00", align 1
@.str23 = private unnamed_addr constant [29 x i8] c"undefined named operand '%s'\00", align 1
@__FUNCTION__.resolve_operand_name_1 = private unnamed_addr constant [23 x i8] c"resolve_operand_name_1\00", align 1
@.str24 = private unnamed_addr constant [32 x i8] c"duplicate asm operand name '%s'\00", align 1
@.str25 = private unnamed_addr constant [31 x i8] c"too many alternatives in `asm'\00", align 1
@.str26 = private unnamed_addr constant [63 x i8] c"operand constraints for `asm' differ in number of alternatives\00", align 1
@.str27 = private unnamed_addr constant [39 x i8] c"input operand constraint contains `%c'\00", align 1
@.str28 = private unnamed_addr constant [54 x i8] c"matching constraint references invalid operand number\00", align 1
@.str29 = private unnamed_addr constant [39 x i8] c"invalid punctuation `%c' in constraint\00", align 1
@__FUNCTION__.expand_goto_internal = private unnamed_addr constant [21 x i8] c"expand_goto_internal\00", align 1
@.str30 = private unnamed_addr constant [50 x i8] c"jump to `%s' invalidly jumps into binding contour\00", align 1

; Function Attrs: nounwind uwtable
define void @using_eh_for_cleanups() #0 {
entry:
  store i1 true, i1* @using_eh_for_cleanups_p, align 1
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_stmt_status(%struct.function* nocapture %f) #0 {
entry:
  %stmt = getelementptr inbounds %struct.function* %f, i64 0, i32 1
  %0 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %tobool = icmp eq %struct.stmt_status* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.stmt_status* %0 to i8*
  tail call void @free(i8* %1)
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  store %struct.stmt_status* null, %struct.stmt_status** %stmt, align 8, !tbaa !1
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #1

; Function Attrs: nounwind uwtable
define void @mark_stmt_status(%struct.stmt_status* readonly %p) #0 {
entry:
  %cmp = icmp eq %struct.stmt_status* %p, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %p, i64 0, i32 0
  %0 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %tobool141.i = icmp eq %struct.nesting* %0, null
  br i1 %tobool141.i, label %mark_block_nesting.exit, label %do.body.i

do.body.i:                                        ; preds = %if.end, %do.end110.i
  %n.addr.0142.i = phi %struct.nesting* [ %31, %do.end110.i ], [ %0, %if.end ]
  %exit_label.i = getelementptr inbounds %struct.nesting* %n.addr.0142.i, i64 0, i32 3
  %1 = load %struct.rtx_def** %exit_label.i, align 8, !tbaa !11
  %cmp.i = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp.i, label %do.body2.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %do.body.i
  %2 = bitcast %struct.rtx_def* %1 to i8*
  %call.i = tail call i32 @ggc_set_mark(i8* %2) #6
  %tobool1.i = icmp eq i32 %call.i, 0
  br i1 %tobool1.i, label %if.then.i, label %do.body2.i

if.then.i:                                        ; preds = %land.lhs.true.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %1) #6
  br label %do.body2.i

do.body2.i:                                       ; preds = %if.then.i, %land.lhs.true.i, %do.body.i
  %stack_level.i = getelementptr inbounds %struct.nesting* %n.addr.0142.i, i64 0, i32 4, i32 0, i32 1
  %3 = load %struct.rtx_def** %stack_level.i, align 8, !tbaa !13
  %cmp4.i = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp4.i, label %do.body11.i, label %land.lhs.true5.i

land.lhs.true5.i:                                 ; preds = %do.body2.i
  %4 = bitcast %struct.rtx_def* %3 to i8*
  %call6.i = tail call i32 @ggc_set_mark(i8* %4) #6
  %tobool7.i = icmp eq i32 %call6.i, 0
  br i1 %tobool7.i, label %if.then8.i, label %do.body11.i

if.then8.i:                                       ; preds = %land.lhs.true5.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %3) #6
  br label %do.body11.i

do.body11.i:                                      ; preds = %if.then8.i, %land.lhs.true5.i, %do.body2.i
  %first_insn.i = getelementptr inbounds %struct.nesting* %n.addr.0142.i, i64 0, i32 4, i32 0, i32 2
  %5 = load %struct.rtx_def** %first_insn.i, align 8, !tbaa !15
  %cmp15.i = icmp eq %struct.rtx_def* %5, null
  br i1 %cmp15.i, label %do.body22.i, label %land.lhs.true16.i

land.lhs.true16.i:                                ; preds = %do.body11.i
  %6 = bitcast %struct.rtx_def* %5 to i8*
  %call17.i = tail call i32 @ggc_set_mark(i8* %6) #6
  %tobool18.i = icmp eq i32 %call17.i, 0
  br i1 %tobool18.i, label %if.then19.i, label %do.body22.i

if.then19.i:                                      ; preds = %land.lhs.true16.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %5) #6
  br label %do.body22.i

do.body22.i:                                      ; preds = %if.then19.i, %land.lhs.true16.i, %do.body11.i
  %cleanups.i = getelementptr inbounds %struct.nesting* %n.addr.0142.i, i64 0, i32 4, i32 0, i32 4
  %7 = load %union.tree_node** %cleanups.i, align 8, !tbaa !16
  %cmp25.i = icmp eq %union.tree_node* %7, null
  br i1 %cmp25.i, label %do.body41.i, label %land.lhs.true26.i

land.lhs.true26.i:                                ; preds = %do.body22.i
  %8 = bitcast %union.tree_node* %7 to i8*
  %call27.i = tail call i32 @ggc_set_mark(i8* %8) #6
  %tobool28.i = icmp eq i32 %call27.i, 0
  br i1 %tobool28.i, label %do.body30.i, label %do.body41.i

do.body30.i:                                      ; preds = %land.lhs.true26.i
  %9 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used.i = getelementptr inbounds %struct.varray_head_tag* %9, i64 0, i32 1
  %10 = load i64* %elements_used.i, align 8, !tbaa !18
  %num_elements.i = getelementptr inbounds %struct.varray_head_tag* %9, i64 0, i32 0
  %11 = load i64* %num_elements.i, align 8, !tbaa !21
  %cmp31.i = icmp ult i64 %10, %11
  br i1 %cmp31.i, label %if.end35.i, label %if.then32.i

if.then32.i:                                      ; preds = %do.body30.i
  %mul.i = shl i64 %11, 1
  %call34.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %9, i64 %mul.i) #6
  store %struct.varray_head_tag* %call34.i, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used36.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call34.i, i64 0, i32 1
  %.pre144.i = load i64* %elements_used36.phi.trans.insert.i, align 8, !tbaa !18
  br label %if.end35.i

if.end35.i:                                       ; preds = %if.then32.i, %do.body30.i
  %12 = phi i64 [ %10, %do.body30.i ], [ %.pre144.i, %if.then32.i ]
  %13 = phi %struct.varray_head_tag* [ %9, %do.body30.i ], [ %call34.i, %if.then32.i ]
  %elements_used36.i = getelementptr inbounds %struct.varray_head_tag* %13, i64 0, i32 1
  %inc.i = add i64 %12, 1
  store i64 %inc.i, i64* %elements_used36.i, align 8, !tbaa !18
  %data37.i = getelementptr inbounds %struct.varray_head_tag* %13, i64 0, i32 4
  %tree.i = bitcast %union.varray_data_tag* %data37.i to [1 x %union.tree_node*]*
  %arrayidx.i = getelementptr inbounds [1 x %union.tree_node*]* %tree.i, i64 0, i64 %12
  store %union.tree_node* %7, %union.tree_node** %arrayidx.i, align 8, !tbaa !17
  br label %do.body41.i

do.body41.i:                                      ; preds = %if.end35.i, %land.lhs.true26.i, %do.body22.i
  %outer_cleanups.i = getelementptr inbounds %struct.nesting* %n.addr.0142.i, i64 0, i32 4, i32 0, i32 5
  %14 = load %union.tree_node** %outer_cleanups.i, align 8, !tbaa !22
  %cmp45.i = icmp eq %union.tree_node* %14, null
  br i1 %cmp45.i, label %do.end66.i, label %land.lhs.true46.i

land.lhs.true46.i:                                ; preds = %do.body41.i
  %15 = bitcast %union.tree_node* %14 to i8*
  %call47.i = tail call i32 @ggc_set_mark(i8* %15) #6
  %tobool48.i = icmp eq i32 %call47.i, 0
  br i1 %tobool48.i, label %do.body50.i, label %do.end66.i

do.body50.i:                                      ; preds = %land.lhs.true46.i
  %16 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used51.i = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 1
  %17 = load i64* %elements_used51.i, align 8, !tbaa !18
  %num_elements52.i = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 0
  %18 = load i64* %num_elements52.i, align 8, !tbaa !21
  %cmp53.i = icmp ult i64 %17, %18
  br i1 %cmp53.i, label %if.end58.i, label %if.then54.i

if.then54.i:                                      ; preds = %do.body50.i
  %mul56.i = shl i64 %18, 1
  %call57.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %16, i64 %mul56.i) #6
  store %struct.varray_head_tag* %call57.i, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used59.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call57.i, i64 0, i32 1
  %.pre143.i = load i64* %elements_used59.phi.trans.insert.i, align 8, !tbaa !18
  br label %if.end58.i

if.end58.i:                                       ; preds = %if.then54.i, %do.body50.i
  %19 = phi i64 [ %17, %do.body50.i ], [ %.pre143.i, %if.then54.i ]
  %20 = phi %struct.varray_head_tag* [ %16, %do.body50.i ], [ %call57.i, %if.then54.i ]
  %elements_used59.i = getelementptr inbounds %struct.varray_head_tag* %20, i64 0, i32 1
  %inc60.i = add i64 %19, 1
  store i64 %inc60.i, i64* %elements_used59.i, align 8, !tbaa !18
  %data61.i = getelementptr inbounds %struct.varray_head_tag* %20, i64 0, i32 4
  %tree62.i = bitcast %union.varray_data_tag* %data61.i to [1 x %union.tree_node*]*
  %arrayidx63.i = getelementptr inbounds [1 x %union.tree_node*]* %tree62.i, i64 0, i64 %19
  store %union.tree_node* %14, %union.tree_node** %arrayidx63.i, align 8, !tbaa !17
  br label %do.end66.i

do.end66.i:                                       ; preds = %if.end58.i, %land.lhs.true46.i, %do.body41.i
  %label_chain.i = getelementptr inbounds %struct.nesting* %n.addr.0142.i, i64 0, i32 4, i32 0, i32 6
  %l.0138.i = load %struct.label_chain** %label_chain.i, align 8
  %cmp69139.i = icmp eq %struct.label_chain* %l.0138.i, null
  br i1 %cmp69139.i, label %do.body100.i, label %if.then72.i

if.then72.i:                                      ; preds = %do.end66.i, %for.inc.i
  %l.0140.i = phi %struct.label_chain* [ %l.0.i, %for.inc.i ], [ %l.0138.i, %do.end66.i ]
  %21 = bitcast %struct.label_chain* %l.0140.i to i8*
  %call73.i = tail call i32 @ggc_set_mark(i8* %21) #6
  %label.i = getelementptr inbounds %struct.label_chain* %l.0140.i, i64 0, i32 1
  %22 = load %union.tree_node** %label.i, align 8, !tbaa !23
  %cmp78.i = icmp eq %union.tree_node* %22, null
  br i1 %cmp78.i, label %for.inc.i, label %land.lhs.true79.i

land.lhs.true79.i:                                ; preds = %if.then72.i
  %23 = bitcast %union.tree_node* %22 to i8*
  %call80.i = tail call i32 @ggc_set_mark(i8* %23) #6
  %tobool81.i = icmp eq i32 %call80.i, 0
  br i1 %tobool81.i, label %do.body83.i, label %for.inc.i

do.body83.i:                                      ; preds = %land.lhs.true79.i
  %24 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used84.i = getelementptr inbounds %struct.varray_head_tag* %24, i64 0, i32 1
  %25 = load i64* %elements_used84.i, align 8, !tbaa !18
  %num_elements85.i = getelementptr inbounds %struct.varray_head_tag* %24, i64 0, i32 0
  %26 = load i64* %num_elements85.i, align 8, !tbaa !21
  %cmp86.i = icmp ult i64 %25, %26
  br i1 %cmp86.i, label %if.end91.i, label %if.then87.i

if.then87.i:                                      ; preds = %do.body83.i
  %mul89.i = shl i64 %26, 1
  %call90.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %24, i64 %mul89.i) #6
  store %struct.varray_head_tag* %call90.i, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used92.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call90.i, i64 0, i32 1
  %.pre.i = load i64* %elements_used92.phi.trans.insert.i, align 8, !tbaa !18
  br label %if.end91.i

if.end91.i:                                       ; preds = %if.then87.i, %do.body83.i
  %27 = phi i64 [ %25, %do.body83.i ], [ %.pre.i, %if.then87.i ]
  %28 = phi %struct.varray_head_tag* [ %24, %do.body83.i ], [ %call90.i, %if.then87.i ]
  %elements_used92.i = getelementptr inbounds %struct.varray_head_tag* %28, i64 0, i32 1
  %inc93.i = add i64 %27, 1
  store i64 %inc93.i, i64* %elements_used92.i, align 8, !tbaa !18
  %data94.i = getelementptr inbounds %struct.varray_head_tag* %28, i64 0, i32 4
  %tree95.i = bitcast %union.varray_data_tag* %data94.i to [1 x %union.tree_node*]*
  %arrayidx96.i = getelementptr inbounds [1 x %union.tree_node*]* %tree95.i, i64 0, i64 %27
  store %union.tree_node* %22, %union.tree_node** %arrayidx96.i, align 8, !tbaa !17
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.end91.i, %land.lhs.true79.i, %if.then72.i
  %next.i = getelementptr inbounds %struct.label_chain* %l.0140.i, i64 0, i32 0
  %l.0.i = load %struct.label_chain** %next.i, align 8
  %cmp69.i = icmp eq %struct.label_chain* %l.0.i, null
  br i1 %cmp69.i, label %do.body100.i, label %if.then72.i

do.body100.i:                                     ; preds = %for.inc.i, %do.end66.i
  %last_unconditional_cleanup.i = getelementptr inbounds %struct.nesting* %n.addr.0142.i, i64 0, i32 4, i32 0, i32 11
  %29 = load %struct.rtx_def** %last_unconditional_cleanup.i, align 8, !tbaa !25
  %cmp104.i = icmp eq %struct.rtx_def* %29, null
  br i1 %cmp104.i, label %do.end110.i, label %land.lhs.true105.i

land.lhs.true105.i:                               ; preds = %do.body100.i
  %30 = bitcast %struct.rtx_def* %29 to i8*
  %call106.i = tail call i32 @ggc_set_mark(i8* %30) #6
  %tobool107.i = icmp eq i32 %call106.i, 0
  br i1 %tobool107.i, label %if.then108.i, label %do.end110.i

if.then108.i:                                     ; preds = %land.lhs.true105.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %29) #6
  br label %do.end110.i

do.end110.i:                                      ; preds = %if.then108.i, %land.lhs.true105.i, %do.body100.i
  %next111.i = getelementptr inbounds %struct.nesting* %n.addr.0142.i, i64 0, i32 1
  %31 = load %struct.nesting** %next111.i, align 8, !tbaa !26
  %tobool.i = icmp eq %struct.nesting* %31, null
  br i1 %tobool.i, label %mark_block_nesting.exit, label %do.body.i

mark_block_nesting.exit:                          ; preds = %do.end110.i, %if.end
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %p, i64 0, i32 2
  %32 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %tobool32.i = icmp eq %struct.nesting* %32, null
  br i1 %tobool32.i, label %mark_cond_nesting.exit, label %do.body.i38

do.body.i38:                                      ; preds = %mark_block_nesting.exit, %do.end21.i
  %n.addr.033.i = phi %struct.nesting* [ %40, %do.end21.i ], [ %32, %mark_block_nesting.exit ]
  %exit_label.i36 = getelementptr inbounds %struct.nesting* %n.addr.033.i, i64 0, i32 3
  %33 = load %struct.rtx_def** %exit_label.i36, align 8, !tbaa !11
  %cmp.i37 = icmp eq %struct.rtx_def* %33, null
  br i1 %cmp.i37, label %do.body2.i44, label %land.lhs.true.i41

land.lhs.true.i41:                                ; preds = %do.body.i38
  %34 = bitcast %struct.rtx_def* %33 to i8*
  %call.i39 = tail call i32 @ggc_set_mark(i8* %34) #6
  %tobool1.i40 = icmp eq i32 %call.i39, 0
  br i1 %tobool1.i40, label %if.then.i42, label %do.body2.i44

if.then.i42:                                      ; preds = %land.lhs.true.i41
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %33) #6
  br label %do.body2.i44

do.body2.i44:                                     ; preds = %if.then.i42, %land.lhs.true.i41, %do.body.i38
  %data.i = getelementptr inbounds %struct.nesting* %n.addr.033.i, i64 0, i32 4
  %endif_label.i = bitcast %union.anon.3* %data.i to %struct.rtx_def**
  %35 = load %struct.rtx_def** %endif_label.i, align 8, !tbaa !28
  %cmp4.i43 = icmp eq %struct.rtx_def* %35, null
  br i1 %cmp4.i43, label %do.body11.i50, label %land.lhs.true5.i47

land.lhs.true5.i47:                               ; preds = %do.body2.i44
  %36 = bitcast %struct.rtx_def* %35 to i8*
  %call6.i45 = tail call i32 @ggc_set_mark(i8* %36) #6
  %tobool7.i46 = icmp eq i32 %call6.i45, 0
  br i1 %tobool7.i46, label %if.then8.i48, label %do.body11.i50

if.then8.i48:                                     ; preds = %land.lhs.true5.i47
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %35) #6
  br label %do.body11.i50

do.body11.i50:                                    ; preds = %if.then8.i48, %land.lhs.true5.i47, %do.body2.i44
  %37 = getelementptr inbounds %struct.nesting* %n.addr.033.i, i64 0, i32 4, i32 0, i32 1
  %38 = load %struct.rtx_def** %37, align 8, !tbaa !30
  %cmp15.i49 = icmp eq %struct.rtx_def* %38, null
  br i1 %cmp15.i49, label %do.end21.i, label %land.lhs.true16.i53

land.lhs.true16.i53:                              ; preds = %do.body11.i50
  %39 = bitcast %struct.rtx_def* %38 to i8*
  %call17.i51 = tail call i32 @ggc_set_mark(i8* %39) #6
  %tobool18.i52 = icmp eq i32 %call17.i51, 0
  br i1 %tobool18.i52, label %if.then19.i54, label %do.end21.i

if.then19.i54:                                    ; preds = %land.lhs.true16.i53
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %38) #6
  br label %do.end21.i

do.end21.i:                                       ; preds = %if.then19.i54, %land.lhs.true16.i53, %do.body11.i50
  %next.i55 = getelementptr inbounds %struct.nesting* %n.addr.033.i, i64 0, i32 1
  %40 = load %struct.nesting** %next.i55, align 8, !tbaa !26
  %tobool.i56 = icmp eq %struct.nesting* %40, null
  br i1 %tobool.i56, label %mark_cond_nesting.exit, label %do.body.i38

mark_cond_nesting.exit:                           ; preds = %do.end21.i, %mark_block_nesting.exit
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %p, i64 0, i32 3
  %41 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %tobool60.i = icmp eq %struct.nesting* %41, null
  br i1 %tobool60.i, label %mark_loop_nesting.exit, label %do.body.i59

do.body.i59:                                      ; preds = %mark_cond_nesting.exit, %do.end43.i
  %n.addr.061.i = phi %struct.nesting* [ %55, %do.end43.i ], [ %41, %mark_cond_nesting.exit ]
  %exit_label.i57 = getelementptr inbounds %struct.nesting* %n.addr.061.i, i64 0, i32 3
  %42 = load %struct.rtx_def** %exit_label.i57, align 8, !tbaa !11
  %cmp.i58 = icmp eq %struct.rtx_def* %42, null
  br i1 %cmp.i58, label %do.body2.i66, label %land.lhs.true.i62

land.lhs.true.i62:                                ; preds = %do.body.i59
  %43 = bitcast %struct.rtx_def* %42 to i8*
  %call.i60 = tail call i32 @ggc_set_mark(i8* %43) #6
  %tobool1.i61 = icmp eq i32 %call.i60, 0
  br i1 %tobool1.i61, label %if.then.i63, label %do.body2.i66

if.then.i63:                                      ; preds = %land.lhs.true.i62
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %42) #6
  br label %do.body2.i66

do.body2.i66:                                     ; preds = %if.then.i63, %land.lhs.true.i62, %do.body.i59
  %data.i64 = getelementptr inbounds %struct.nesting* %n.addr.061.i, i64 0, i32 4
  %start_label.i = bitcast %union.anon.3* %data.i64 to %struct.rtx_def**
  %44 = load %struct.rtx_def** %start_label.i, align 8, !tbaa !32
  %cmp4.i65 = icmp eq %struct.rtx_def* %44, null
  br i1 %cmp4.i65, label %do.body11.i72, label %land.lhs.true5.i69

land.lhs.true5.i69:                               ; preds = %do.body2.i66
  %45 = bitcast %struct.rtx_def* %44 to i8*
  %call6.i67 = tail call i32 @ggc_set_mark(i8* %45) #6
  %tobool7.i68 = icmp eq i32 %call6.i67, 0
  br i1 %tobool7.i68, label %if.then8.i70, label %do.body11.i72

if.then8.i70:                                     ; preds = %land.lhs.true5.i69
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %44) #6
  br label %do.body11.i72

do.body11.i72:                                    ; preds = %if.then8.i70, %land.lhs.true5.i69, %do.body2.i66
  %46 = getelementptr inbounds %struct.nesting* %n.addr.061.i, i64 0, i32 4, i32 0, i32 1
  %47 = load %struct.rtx_def** %46, align 8, !tbaa !34
  %cmp15.i71 = icmp eq %struct.rtx_def* %47, null
  br i1 %cmp15.i71, label %do.body22.i77, label %land.lhs.true16.i75

land.lhs.true16.i75:                              ; preds = %do.body11.i72
  %48 = bitcast %struct.rtx_def* %47 to i8*
  %call17.i73 = tail call i32 @ggc_set_mark(i8* %48) #6
  %tobool18.i74 = icmp eq i32 %call17.i73, 0
  br i1 %tobool18.i74, label %if.then19.i76, label %do.body22.i77

if.then19.i76:                                    ; preds = %land.lhs.true16.i75
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %47) #6
  br label %do.body22.i77

do.body22.i77:                                    ; preds = %if.then19.i76, %land.lhs.true16.i75, %do.body11.i72
  %49 = getelementptr inbounds %struct.nesting* %n.addr.061.i, i64 0, i32 4, i32 0, i32 2
  %50 = load %struct.rtx_def** %49, align 8, !tbaa !35
  %cmp26.i = icmp eq %struct.rtx_def* %50, null
  br i1 %cmp26.i, label %do.body33.i, label %land.lhs.true27.i

land.lhs.true27.i:                                ; preds = %do.body22.i77
  %51 = bitcast %struct.rtx_def* %50 to i8*
  %call28.i = tail call i32 @ggc_set_mark(i8* %51) #6
  %tobool29.i = icmp eq i32 %call28.i, 0
  br i1 %tobool29.i, label %if.then30.i, label %do.body33.i

if.then30.i:                                      ; preds = %land.lhs.true27.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %50) #6
  br label %do.body33.i

do.body33.i:                                      ; preds = %if.then30.i, %land.lhs.true27.i, %do.body22.i77
  %continue_label.i = getelementptr inbounds %struct.nesting* %n.addr.061.i, i64 0, i32 4, i32 0, i32 3
  %52 = load %struct.nesting** %continue_label.i, align 8
  %53 = bitcast %struct.nesting* %52 to %struct.rtx_def*
  %cmp37.i = icmp eq %struct.nesting* %52, null
  br i1 %cmp37.i, label %do.end43.i, label %land.lhs.true38.i

land.lhs.true38.i:                                ; preds = %do.body33.i
  %54 = bitcast %struct.nesting* %52 to i8*
  %call39.i = tail call i32 @ggc_set_mark(i8* %54) #6
  %tobool40.i = icmp eq i32 %call39.i, 0
  br i1 %tobool40.i, label %if.then41.i, label %do.end43.i

if.then41.i:                                      ; preds = %land.lhs.true38.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %53) #6
  br label %do.end43.i

do.end43.i:                                       ; preds = %if.then41.i, %land.lhs.true38.i, %do.body33.i
  %next.i78 = getelementptr inbounds %struct.nesting* %n.addr.061.i, i64 0, i32 1
  %55 = load %struct.nesting** %next.i78, align 8, !tbaa !26
  %tobool.i79 = icmp eq %struct.nesting* %55, null
  br i1 %tobool.i79, label %mark_loop_nesting.exit, label %do.body.i59

mark_loop_nesting.exit:                           ; preds = %do.end43.i, %mark_cond_nesting.exit
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %p, i64 0, i32 4
  %56 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %tobool101.i = icmp eq %struct.nesting* %56, null
  br i1 %tobool101.i, label %mark_case_nesting.exit, label %do.body.i82

do.body.i82:                                      ; preds = %mark_loop_nesting.exit, %do.end81.i
  %n.addr.0102.i = phi %struct.nesting* [ %87, %do.end81.i ], [ %56, %mark_loop_nesting.exit ]
  %exit_label.i80 = getelementptr inbounds %struct.nesting* %n.addr.0102.i, i64 0, i32 3
  %57 = load %struct.rtx_def** %exit_label.i80, align 8, !tbaa !11
  %cmp.i81 = icmp eq %struct.rtx_def* %57, null
  br i1 %cmp.i81, label %do.body2.i89, label %land.lhs.true.i85

land.lhs.true.i85:                                ; preds = %do.body.i82
  %58 = bitcast %struct.rtx_def* %57 to i8*
  %call.i83 = tail call i32 @ggc_set_mark(i8* %58) #6
  %tobool1.i84 = icmp eq i32 %call.i83, 0
  br i1 %tobool1.i84, label %if.then.i86, label %do.body2.i89

if.then.i86:                                      ; preds = %land.lhs.true.i85
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %57) #6
  br label %do.body2.i89

do.body2.i89:                                     ; preds = %if.then.i86, %land.lhs.true.i85, %do.body.i82
  %data.i87 = getelementptr inbounds %struct.nesting* %n.addr.0102.i, i64 0, i32 4
  %start.i = bitcast %union.anon.3* %data.i87 to %struct.rtx_def**
  %59 = load %struct.rtx_def** %start.i, align 8, !tbaa !37
  %cmp4.i88 = icmp eq %struct.rtx_def* %59, null
  br i1 %cmp4.i88, label %do.body11.i94, label %land.lhs.true5.i92

land.lhs.true5.i92:                               ; preds = %do.body2.i89
  %60 = bitcast %struct.rtx_def* %59 to i8*
  %call6.i90 = tail call i32 @ggc_set_mark(i8* %60) #6
  %tobool7.i91 = icmp eq i32 %call6.i90, 0
  br i1 %tobool7.i91, label %if.then8.i93, label %do.body11.i94

if.then8.i93:                                     ; preds = %land.lhs.true5.i92
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %59) #6
  br label %do.body11.i94

do.body11.i94:                                    ; preds = %if.then8.i93, %land.lhs.true5.i92, %do.body2.i89
  %default_label.i = getelementptr inbounds %struct.nesting* %n.addr.0102.i, i64 0, i32 4, i32 0, i32 2
  %61 = load %struct.rtx_def** %default_label.i, align 8
  %62 = bitcast %struct.rtx_def* %61 to %union.tree_node*
  %cmp14.i = icmp eq %struct.rtx_def* %61, null
  br i1 %cmp14.i, label %do.body30.i101, label %land.lhs.true15.i

land.lhs.true15.i:                                ; preds = %do.body11.i94
  %63 = bitcast %struct.rtx_def* %61 to i8*
  %call16.i = tail call i32 @ggc_set_mark(i8* %63) #6
  %tobool17.i = icmp eq i32 %call16.i, 0
  br i1 %tobool17.i, label %do.body19.i, label %do.body30.i101

do.body19.i:                                      ; preds = %land.lhs.true15.i
  %64 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used.i95 = getelementptr inbounds %struct.varray_head_tag* %64, i64 0, i32 1
  %65 = load i64* %elements_used.i95, align 8, !tbaa !18
  %num_elements.i96 = getelementptr inbounds %struct.varray_head_tag* %64, i64 0, i32 0
  %66 = load i64* %num_elements.i96, align 8, !tbaa !21
  %cmp20.i = icmp ult i64 %65, %66
  br i1 %cmp20.i, label %if.end24.i, label %if.then21.i

if.then21.i:                                      ; preds = %do.body19.i
  %mul.i97 = shl i64 %66, 1
  %call23.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %64, i64 %mul.i97) #6
  store %struct.varray_head_tag* %call23.i, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used25.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call23.i, i64 0, i32 1
  %.pre104.i = load i64* %elements_used25.phi.trans.insert.i, align 8, !tbaa !18
  br label %if.end24.i

if.end24.i:                                       ; preds = %if.then21.i, %do.body19.i
  %67 = phi i64 [ %65, %do.body19.i ], [ %.pre104.i, %if.then21.i ]
  %68 = phi %struct.varray_head_tag* [ %64, %do.body19.i ], [ %call23.i, %if.then21.i ]
  %elements_used25.i = getelementptr inbounds %struct.varray_head_tag* %68, i64 0, i32 1
  %inc.i98 = add i64 %67, 1
  store i64 %inc.i98, i64* %elements_used25.i, align 8, !tbaa !18
  %data26.i = getelementptr inbounds %struct.varray_head_tag* %68, i64 0, i32 4
  %tree.i99 = bitcast %union.varray_data_tag* %data26.i to [1 x %union.tree_node*]*
  %arrayidx.i100 = getelementptr inbounds [1 x %union.tree_node*]* %tree.i99, i64 0, i64 %67
  store %union.tree_node* %62, %union.tree_node** %arrayidx.i100, align 8, !tbaa !17
  br label %do.body30.i101

do.body30.i101:                                   ; preds = %if.end24.i, %land.lhs.true15.i, %do.body11.i94
  %index_expr.i = getelementptr inbounds %struct.nesting* %n.addr.0102.i, i64 0, i32 4, i32 0, i32 3
  %69 = load %struct.nesting** %index_expr.i, align 8
  %70 = bitcast %struct.nesting* %69 to %union.tree_node*
  %cmp34.i = icmp eq %struct.nesting* %69, null
  br i1 %cmp34.i, label %do.body56.i, label %land.lhs.true35.i

land.lhs.true35.i:                                ; preds = %do.body30.i101
  %71 = bitcast %struct.nesting* %69 to i8*
  %call36.i = tail call i32 @ggc_set_mark(i8* %71) #6
  %tobool37.i = icmp eq i32 %call36.i, 0
  br i1 %tobool37.i, label %do.body39.i, label %do.body56.i

do.body39.i:                                      ; preds = %land.lhs.true35.i
  %72 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used40.i = getelementptr inbounds %struct.varray_head_tag* %72, i64 0, i32 1
  %73 = load i64* %elements_used40.i, align 8, !tbaa !18
  %num_elements41.i = getelementptr inbounds %struct.varray_head_tag* %72, i64 0, i32 0
  %74 = load i64* %num_elements41.i, align 8, !tbaa !21
  %cmp42.i = icmp ult i64 %73, %74
  br i1 %cmp42.i, label %if.end47.i, label %if.then43.i

if.then43.i:                                      ; preds = %do.body39.i
  %mul45.i = shl i64 %74, 1
  %call46.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %72, i64 %mul45.i) #6
  store %struct.varray_head_tag* %call46.i, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used48.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call46.i, i64 0, i32 1
  %.pre103.i = load i64* %elements_used48.phi.trans.insert.i, align 8, !tbaa !18
  br label %if.end47.i

if.end47.i:                                       ; preds = %if.then43.i, %do.body39.i
  %75 = phi i64 [ %73, %do.body39.i ], [ %.pre103.i, %if.then43.i ]
  %76 = phi %struct.varray_head_tag* [ %72, %do.body39.i ], [ %call46.i, %if.then43.i ]
  %elements_used48.i = getelementptr inbounds %struct.varray_head_tag* %76, i64 0, i32 1
  %inc49.i = add i64 %75, 1
  store i64 %inc49.i, i64* %elements_used48.i, align 8, !tbaa !18
  %data50.i = getelementptr inbounds %struct.varray_head_tag* %76, i64 0, i32 4
  %tree51.i = bitcast %union.varray_data_tag* %data50.i to [1 x %union.tree_node*]*
  %arrayidx52.i = getelementptr inbounds [1 x %union.tree_node*]* %tree51.i, i64 0, i64 %75
  store %union.tree_node* %70, %union.tree_node** %arrayidx52.i, align 8, !tbaa !17
  br label %do.body56.i

do.body56.i:                                      ; preds = %if.end47.i, %land.lhs.true35.i, %do.body30.i101
  %77 = getelementptr inbounds %struct.nesting* %n.addr.0102.i, i64 0, i32 4, i32 0, i32 4
  %78 = load %union.tree_node** %77, align 8, !tbaa !39
  %cmp60.i = icmp eq %union.tree_node* %78, null
  br i1 %cmp60.i, label %do.end81.i, label %land.lhs.true61.i

land.lhs.true61.i:                                ; preds = %do.body56.i
  %79 = bitcast %union.tree_node* %78 to i8*
  %call62.i = tail call i32 @ggc_set_mark(i8* %79) #6
  %tobool63.i = icmp eq i32 %call62.i, 0
  br i1 %tobool63.i, label %do.body65.i, label %do.end81.i

do.body65.i:                                      ; preds = %land.lhs.true61.i
  %80 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used66.i = getelementptr inbounds %struct.varray_head_tag* %80, i64 0, i32 1
  %81 = load i64* %elements_used66.i, align 8, !tbaa !18
  %num_elements67.i = getelementptr inbounds %struct.varray_head_tag* %80, i64 0, i32 0
  %82 = load i64* %num_elements67.i, align 8, !tbaa !21
  %cmp68.i = icmp ult i64 %81, %82
  br i1 %cmp68.i, label %if.end73.i, label %if.then69.i

if.then69.i:                                      ; preds = %do.body65.i
  %mul71.i = shl i64 %82, 1
  %call72.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %80, i64 %mul71.i) #6
  store %struct.varray_head_tag* %call72.i, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used74.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call72.i, i64 0, i32 1
  %.pre.i102 = load i64* %elements_used74.phi.trans.insert.i, align 8, !tbaa !18
  br label %if.end73.i

if.end73.i:                                       ; preds = %if.then69.i, %do.body65.i
  %83 = phi i64 [ %81, %do.body65.i ], [ %.pre.i102, %if.then69.i ]
  %84 = phi %struct.varray_head_tag* [ %80, %do.body65.i ], [ %call72.i, %if.then69.i ]
  %elements_used74.i = getelementptr inbounds %struct.varray_head_tag* %84, i64 0, i32 1
  %inc75.i = add i64 %83, 1
  store i64 %inc75.i, i64* %elements_used74.i, align 8, !tbaa !18
  %data76.i = getelementptr inbounds %struct.varray_head_tag* %84, i64 0, i32 4
  %tree77.i = bitcast %union.varray_data_tag* %data76.i to [1 x %union.tree_node*]*
  %arrayidx78.i = getelementptr inbounds [1 x %union.tree_node*]* %tree77.i, i64 0, i64 %83
  store %union.tree_node* %78, %union.tree_node** %arrayidx78.i, align 8, !tbaa !17
  br label %do.end81.i

do.end81.i:                                       ; preds = %if.end73.i, %land.lhs.true61.i, %do.body56.i
  %case_list.i = getelementptr inbounds %struct.nesting* %n.addr.0102.i, i64 0, i32 4, i32 0, i32 1
  %85 = load %struct.rtx_def** %case_list.i, align 8
  %86 = bitcast %struct.rtx_def* %85 to %struct.case_node*
  tail call fastcc void @mark_case_node(%struct.case_node* %86) #6
  %next.i103 = getelementptr inbounds %struct.nesting* %n.addr.0102.i, i64 0, i32 1
  %87 = load %struct.nesting** %next.i103, align 8, !tbaa !26
  %tobool.i104 = icmp eq %struct.nesting* %87, null
  br i1 %tobool.i104, label %mark_case_nesting.exit, label %do.body.i82

mark_case_nesting.exit:                           ; preds = %do.end81.i, %mark_loop_nesting.exit
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %p, i64 0, i32 8
  %88 = load %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  %cmp1 = icmp eq %union.tree_node* %88, null
  br i1 %cmp1, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %mark_case_nesting.exit
  %89 = bitcast %union.tree_node* %88 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %89) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %do.body3, label %do.end11

do.body3:                                         ; preds = %land.lhs.true
  %90 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %90, i64 0, i32 1
  %91 = load i64* %elements_used, align 8, !tbaa !18
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %90, i64 0, i32 0
  %92 = load i64* %num_elements, align 8, !tbaa !21
  %cmp4 = icmp ult i64 %91, %92
  br i1 %cmp4, label %if.end8, label %if.then5

if.then5:                                         ; preds = %do.body3
  %mul = shl i64 %92, 1
  %call7 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %90, i64 %mul) #6
  store %struct.varray_head_tag* %call7, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used9.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call7, i64 0, i32 1
  %.pre = load i64* %elements_used9.phi.trans.insert, align 8, !tbaa !18
  br label %if.end8

if.end8:                                          ; preds = %do.body3, %if.then5
  %93 = phi i64 [ %91, %do.body3 ], [ %.pre, %if.then5 ]
  %94 = phi %struct.varray_head_tag* [ %90, %do.body3 ], [ %call7, %if.then5 ]
  %elements_used9 = getelementptr inbounds %struct.varray_head_tag* %94, i64 0, i32 1
  %inc = add i64 %93, 1
  store i64 %inc, i64* %elements_used9, align 8, !tbaa !18
  %data = getelementptr inbounds %struct.varray_head_tag* %94, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %93
  store %union.tree_node* %88, %union.tree_node** %arrayidx, align 8, !tbaa !17
  br label %do.end11

do.end11:                                         ; preds = %land.lhs.true, %if.end8
  %.pr = load %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  %tobool13 = icmp eq %union.tree_node* %.pr, null
  br i1 %tobool13, label %if.end23, label %do.body15

do.body15:                                        ; preds = %do.end11
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status* %p, i64 0, i32 9
  %95 = load %struct.rtx_def** %x_last_expr_value, align 8, !tbaa !41
  %cmp16 = icmp eq %struct.rtx_def* %95, null
  br i1 %cmp16, label %if.end23, label %land.lhs.true17

land.lhs.true17:                                  ; preds = %do.body15
  %96 = bitcast %struct.rtx_def* %95 to i8*
  %call18 = tail call i32 @ggc_set_mark(i8* %96) #6
  %tobool19 = icmp eq i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %land.lhs.true17
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %95) #6
  br label %if.end23

if.end23:                                         ; preds = %mark_case_nesting.exit, %land.lhs.true17, %do.body15, %do.end11, %if.then20
  %x_goto_fixup_chain = getelementptr inbounds %struct.stmt_status* %p, i64 0, i32 13
  %97 = load %struct.goto_fixup** %x_goto_fixup_chain, align 8, !tbaa !42
  %tobool111.i = icmp eq %struct.goto_fixup* %97, null
  br i1 %tobool111.i, label %return, label %if.then.i106

if.then.i106:                                     ; preds = %if.end23, %do.end89.i
  %g.addr.0112.i = phi %struct.goto_fixup* [ %126, %do.end89.i ], [ %97, %if.end23 ]
  %98 = bitcast %struct.goto_fixup* %g.addr.0112.i to i8*
  %call.i105 = tail call i32 @ggc_set_mark(i8* %98) #6
  %before_jump.i = getelementptr inbounds %struct.goto_fixup* %g.addr.0112.i, i64 0, i32 1
  %99 = load %struct.rtx_def** %before_jump.i, align 8, !tbaa !43
  %cmp2.i = icmp eq %struct.rtx_def* %99, null
  br i1 %cmp2.i, label %do.body8.i, label %land.lhs.true.i107

land.lhs.true.i107:                               ; preds = %if.then.i106
  %100 = bitcast %struct.rtx_def* %99 to i8*
  %call3.i = tail call i32 @ggc_set_mark(i8* %100) #6
  %tobool4.i = icmp eq i32 %call3.i, 0
  br i1 %tobool4.i, label %if.then5.i, label %do.body8.i

if.then5.i:                                       ; preds = %land.lhs.true.i107
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %99) #6
  br label %do.body8.i

do.body8.i:                                       ; preds = %if.then5.i, %land.lhs.true.i107, %if.then.i106
  %target.i = getelementptr inbounds %struct.goto_fixup* %g.addr.0112.i, i64 0, i32 2
  %101 = load %union.tree_node** %target.i, align 8, !tbaa !45
  %cmp9.i = icmp eq %union.tree_node* %101, null
  br i1 %cmp9.i, label %do.body24.i, label %land.lhs.true10.i

land.lhs.true10.i:                                ; preds = %do.body8.i
  %102 = bitcast %union.tree_node* %101 to i8*
  %call11.i = tail call i32 @ggc_set_mark(i8* %102) #6
  %tobool12.i = icmp eq i32 %call11.i, 0
  br i1 %tobool12.i, label %do.body14.i, label %do.body24.i

do.body14.i:                                      ; preds = %land.lhs.true10.i
  %103 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used.i108 = getelementptr inbounds %struct.varray_head_tag* %103, i64 0, i32 1
  %104 = load i64* %elements_used.i108, align 8, !tbaa !18
  %num_elements.i109 = getelementptr inbounds %struct.varray_head_tag* %103, i64 0, i32 0
  %105 = load i64* %num_elements.i109, align 8, !tbaa !21
  %cmp15.i110 = icmp ult i64 %104, %105
  br i1 %cmp15.i110, label %if.end19.i, label %if.then16.i

if.then16.i:                                      ; preds = %do.body14.i
  %mul.i111 = shl i64 %105, 1
  %call18.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %103, i64 %mul.i111) #6
  store %struct.varray_head_tag* %call18.i, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used20.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call18.i, i64 0, i32 1
  %.pre114.i = load i64* %elements_used20.phi.trans.insert.i, align 8, !tbaa !18
  br label %if.end19.i

if.end19.i:                                       ; preds = %if.then16.i, %do.body14.i
  %106 = phi i64 [ %104, %do.body14.i ], [ %.pre114.i, %if.then16.i ]
  %107 = phi %struct.varray_head_tag* [ %103, %do.body14.i ], [ %call18.i, %if.then16.i ]
  %elements_used20.i = getelementptr inbounds %struct.varray_head_tag* %107, i64 0, i32 1
  %inc.i112 = add i64 %106, 1
  store i64 %inc.i112, i64* %elements_used20.i, align 8, !tbaa !18
  %data.i113 = getelementptr inbounds %struct.varray_head_tag* %107, i64 0, i32 4
  %tree.i114 = bitcast %union.varray_data_tag* %data.i113 to [1 x %union.tree_node*]*
  %arrayidx.i115 = getelementptr inbounds [1 x %union.tree_node*]* %tree.i114, i64 0, i64 %106
  store %union.tree_node* %101, %union.tree_node** %arrayidx.i115, align 8, !tbaa !17
  br label %do.body24.i

do.body24.i:                                      ; preds = %if.end19.i, %land.lhs.true10.i, %do.body8.i
  %context.i = getelementptr inbounds %struct.goto_fixup* %g.addr.0112.i, i64 0, i32 3
  %108 = load %union.tree_node** %context.i, align 8, !tbaa !46
  %cmp26.i116 = icmp eq %union.tree_node* %108, null
  br i1 %cmp26.i116, label %do.body48.i, label %land.lhs.true27.i119

land.lhs.true27.i119:                             ; preds = %do.body24.i
  %109 = bitcast %union.tree_node* %108 to i8*
  %call28.i117 = tail call i32 @ggc_set_mark(i8* %109) #6
  %tobool29.i118 = icmp eq i32 %call28.i117, 0
  br i1 %tobool29.i118, label %do.body31.i, label %do.body48.i

do.body31.i:                                      ; preds = %land.lhs.true27.i119
  %110 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used32.i = getelementptr inbounds %struct.varray_head_tag* %110, i64 0, i32 1
  %111 = load i64* %elements_used32.i, align 8, !tbaa !18
  %num_elements33.i = getelementptr inbounds %struct.varray_head_tag* %110, i64 0, i32 0
  %112 = load i64* %num_elements33.i, align 8, !tbaa !21
  %cmp34.i120 = icmp ult i64 %111, %112
  br i1 %cmp34.i120, label %if.end39.i, label %if.then35.i

if.then35.i:                                      ; preds = %do.body31.i
  %mul37.i = shl i64 %112, 1
  %call38.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %110, i64 %mul37.i) #6
  store %struct.varray_head_tag* %call38.i, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used40.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call38.i, i64 0, i32 1
  %.pre113.i = load i64* %elements_used40.phi.trans.insert.i, align 8, !tbaa !18
  br label %if.end39.i

if.end39.i:                                       ; preds = %if.then35.i, %do.body31.i
  %113 = phi i64 [ %111, %do.body31.i ], [ %.pre113.i, %if.then35.i ]
  %114 = phi %struct.varray_head_tag* [ %110, %do.body31.i ], [ %call38.i, %if.then35.i ]
  %elements_used40.i121 = getelementptr inbounds %struct.varray_head_tag* %114, i64 0, i32 1
  %inc41.i = add i64 %113, 1
  store i64 %inc41.i, i64* %elements_used40.i121, align 8, !tbaa !18
  %data42.i = getelementptr inbounds %struct.varray_head_tag* %114, i64 0, i32 4
  %tree43.i = bitcast %union.varray_data_tag* %data42.i to [1 x %union.tree_node*]*
  %arrayidx44.i = getelementptr inbounds [1 x %union.tree_node*]* %tree43.i, i64 0, i64 %113
  store %union.tree_node* %108, %union.tree_node** %arrayidx44.i, align 8, !tbaa !17
  br label %do.body48.i

do.body48.i:                                      ; preds = %if.end39.i, %land.lhs.true27.i119, %do.body24.i
  %target_rtl.i = getelementptr inbounds %struct.goto_fixup* %g.addr.0112.i, i64 0, i32 4
  %115 = load %struct.rtx_def** %target_rtl.i, align 8, !tbaa !47
  %cmp50.i = icmp eq %struct.rtx_def* %115, null
  br i1 %cmp50.i, label %do.body57.i, label %land.lhs.true51.i

land.lhs.true51.i:                                ; preds = %do.body48.i
  %116 = bitcast %struct.rtx_def* %115 to i8*
  %call52.i = tail call i32 @ggc_set_mark(i8* %116) #6
  %tobool53.i = icmp eq i32 %call52.i, 0
  br i1 %tobool53.i, label %if.then54.i122, label %do.body57.i

if.then54.i122:                                   ; preds = %land.lhs.true51.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %115) #6
  br label %do.body57.i

do.body57.i:                                      ; preds = %if.then54.i122, %land.lhs.true51.i, %do.body48.i
  %stack_level.i123 = getelementptr inbounds %struct.goto_fixup* %g.addr.0112.i, i64 0, i32 6
  %117 = load %struct.rtx_def** %stack_level.i123, align 8, !tbaa !48
  %cmp59.i = icmp eq %struct.rtx_def* %117, null
  br i1 %cmp59.i, label %do.body66.i, label %land.lhs.true60.i

land.lhs.true60.i:                                ; preds = %do.body57.i
  %118 = bitcast %struct.rtx_def* %117 to i8*
  %call61.i = tail call i32 @ggc_set_mark(i8* %118) #6
  %tobool62.i = icmp eq i32 %call61.i, 0
  br i1 %tobool62.i, label %if.then63.i, label %do.body66.i

if.then63.i:                                      ; preds = %land.lhs.true60.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %117) #6
  br label %do.body66.i

do.body66.i:                                      ; preds = %if.then63.i, %land.lhs.true60.i, %do.body57.i
  %cleanup_list_list.i = getelementptr inbounds %struct.goto_fixup* %g.addr.0112.i, i64 0, i32 7
  %119 = load %union.tree_node** %cleanup_list_list.i, align 8, !tbaa !49
  %cmp68.i124 = icmp eq %union.tree_node* %119, null
  br i1 %cmp68.i124, label %do.end89.i, label %land.lhs.true69.i

land.lhs.true69.i:                                ; preds = %do.body66.i
  %120 = bitcast %union.tree_node* %119 to i8*
  %call70.i = tail call i32 @ggc_set_mark(i8* %120) #6
  %tobool71.i = icmp eq i32 %call70.i, 0
  br i1 %tobool71.i, label %do.body73.i, label %do.end89.i

do.body73.i:                                      ; preds = %land.lhs.true69.i
  %121 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used74.i125 = getelementptr inbounds %struct.varray_head_tag* %121, i64 0, i32 1
  %122 = load i64* %elements_used74.i125, align 8, !tbaa !18
  %num_elements75.i = getelementptr inbounds %struct.varray_head_tag* %121, i64 0, i32 0
  %123 = load i64* %num_elements75.i, align 8, !tbaa !21
  %cmp76.i = icmp ult i64 %122, %123
  br i1 %cmp76.i, label %if.end81.i, label %if.then77.i

if.then77.i:                                      ; preds = %do.body73.i
  %mul79.i = shl i64 %123, 1
  %call80.i126 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %121, i64 %mul79.i) #6
  store %struct.varray_head_tag* %call80.i126, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used82.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call80.i126, i64 0, i32 1
  %.pre.i127 = load i64* %elements_used82.phi.trans.insert.i, align 8, !tbaa !18
  br label %if.end81.i

if.end81.i:                                       ; preds = %if.then77.i, %do.body73.i
  %124 = phi i64 [ %122, %do.body73.i ], [ %.pre.i127, %if.then77.i ]
  %125 = phi %struct.varray_head_tag* [ %121, %do.body73.i ], [ %call80.i126, %if.then77.i ]
  %elements_used82.i = getelementptr inbounds %struct.varray_head_tag* %125, i64 0, i32 1
  %inc83.i = add i64 %124, 1
  store i64 %inc83.i, i64* %elements_used82.i, align 8, !tbaa !18
  %data84.i = getelementptr inbounds %struct.varray_head_tag* %125, i64 0, i32 4
  %tree85.i = bitcast %union.varray_data_tag* %data84.i to [1 x %union.tree_node*]*
  %arrayidx86.i = getelementptr inbounds [1 x %union.tree_node*]* %tree85.i, i64 0, i64 %124
  store %union.tree_node* %119, %union.tree_node** %arrayidx86.i, align 8, !tbaa !17
  br label %do.end89.i

do.end89.i:                                       ; preds = %if.end81.i, %land.lhs.true69.i, %do.body66.i
  %next.i128 = getelementptr inbounds %struct.goto_fixup* %g.addr.0112.i, i64 0, i32 0
  %126 = load %struct.goto_fixup** %next.i128, align 8, !tbaa !50
  %tobool.i129 = icmp eq %struct.goto_fixup* %126, null
  br i1 %tobool.i129, label %return, label %if.then.i106

return:                                           ; preds = %do.end89.i, %if.end23, %entry
  ret void
}

declare i32 @ggc_set_mark(i8*) #2

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #2

declare void @ggc_mark_rtx_children(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @init_stmt() #0 {
entry:
  tail call void @gcc_obstack_init(%struct.obstack* @stmt_obstack) #6
  ret void
}

declare void @gcc_obstack_init(%struct.obstack*) #2

; Function Attrs: nounwind uwtable
define void @init_stmt_for_function() #0 {
entry:
  %call = tail call noalias i8* @xmalloc(i64 104) #6
  %0 = bitcast i8* %call to %struct.stmt_status*
  %1 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %1, i64 0, i32 1
  store %struct.stmt_status* %0, %struct.stmt_status** %stmt, align 8, !tbaa !1
  %2 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt1 = getelementptr inbounds %struct.function* %2, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt1, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 0
  store %struct.nesting* null, %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %4 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt2 = getelementptr inbounds %struct.function* %4, i64 0, i32 1
  %5 = load %struct.stmt_status** %stmt2, align 8, !tbaa !1
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %5, i64 0, i32 1
  store %struct.nesting* null, %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %6 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt3 = getelementptr inbounds %struct.function* %6, i64 0, i32 1
  %7 = load %struct.stmt_status** %stmt3, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %7, i64 0, i32 3
  store %struct.nesting* null, %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %8 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt4 = getelementptr inbounds %struct.function* %8, i64 0, i32 1
  %9 = load %struct.stmt_status** %stmt4, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 4
  store %struct.nesting* null, %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %10 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt5 = getelementptr inbounds %struct.function* %10, i64 0, i32 1
  %11 = load %struct.stmt_status** %stmt5, align 8, !tbaa !1
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %11, i64 0, i32 2
  store %struct.nesting* null, %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %12 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt6 = getelementptr inbounds %struct.function* %12, i64 0, i32 1
  %13 = load %struct.stmt_status** %stmt6, align 8, !tbaa !1
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %13, i64 0, i32 5
  store %struct.nesting* null, %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %14 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt7 = getelementptr inbounds %struct.function* %14, i64 0, i32 1
  %15 = load %struct.stmt_status** %stmt7, align 8, !tbaa !1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %15, i64 0, i32 6
  store i32 0, i32* %x_nesting_depth, align 4, !tbaa !53
  %x_block_start_count = getelementptr inbounds %struct.stmt_status* %15, i64 0, i32 7
  store i32 0, i32* %x_block_start_count, align 4, !tbaa !54
  %x_goto_fixup_chain = getelementptr inbounds %struct.stmt_status* %15, i64 0, i32 13
  store %struct.goto_fixup* null, %struct.goto_fixup** %x_goto_fixup_chain, align 8, !tbaa !42
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt10 = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt10, align 8, !tbaa !1
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 10
  store i32 0, i32* %x_expr_stmts_for_value, align 4, !tbaa !55
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  %18 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt12 = getelementptr inbounds %struct.function* %18, i64 0, i32 1
  %19 = load %struct.stmt_status** %stmt12, align 8, !tbaa !1
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status* %19, i64 0, i32 9
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_expr_value, align 8, !tbaa !41
  ret void
}

declare noalias i8* @xmalloc(i64) #2

; Function Attrs: nounwind readonly uwtable
define i32 @in_control_zone_p() #3 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 2
  %2 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %tobool = icmp eq %struct.nesting* %2, null
  br i1 %tobool, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %entry
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 3
  %3 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %tobool2 = icmp eq %struct.nesting* %3, null
  br i1 %tobool2, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %lor.lhs.false
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 4
  %4 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %tobool4 = icmp ne %struct.nesting* %4, null
  br label %lor.end

lor.end:                                          ; preds = %lor.lhs.false, %entry, %lor.rhs
  %5 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool4, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define void @set_file_and_line_for_stmt(i8* %file, i32 %line) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %tobool = icmp eq %struct.stmt_status* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %x_emit_filename = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 11
  store i8* %file, i8** %x_emit_filename, align 8, !tbaa !56
  %2 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt2 = getelementptr inbounds %struct.function* %2, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt2, align 8, !tbaa !1
  %x_emit_lineno = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 12
  store i32 %line, i32* %x_emit_lineno, align 4, !tbaa !57
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @emit_nop() #0 {
entry:
  %call = tail call %struct.rtx_def* @get_last_insn() #6
  %0 = load i32* @optimize, align 4, !tbaa !58
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.end [
    i32 36, label %if.then
    i32 37, label %land.lhs.true4
  ]

land.lhs.true4:                                   ; preds = %land.lhs.true
  %call5 = tail call %struct.rtx_def* @prev_real_insn(%struct.rtx_def* %call) #6
  %cmp6 = icmp eq %struct.rtx_def* %call5, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %land.lhs.true4
  %call7 = tail call %struct.rtx_def* @gen_nop() #6
  %call8 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7) #6
  br label %if.end

if.end:                                           ; preds = %land.lhs.true, %entry, %if.then, %land.lhs.true4
  ret void
}

declare %struct.rtx_def* @get_last_insn() #2

declare %struct.rtx_def* @prev_real_insn(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare %struct.rtx_def* @gen_nop() #2

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @label_rtx(%union.tree_node* %label) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 31
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %rtl = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 17
  %0 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  %cmp1 = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp1, label %if.end5, label %cond.end

if.end5:                                          ; preds = %if.end
  %call = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl, align 8, !tbaa !59
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.end5
  tail call void @make_decl_rtl(%union.tree_node* %label, i8* null) #6
  %1 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  br label %cond.end

cond.end:                                         ; preds = %if.end, %if.end5, %cond.false
  %cond = phi %struct.rtx_def* [ %1, %cond.false ], [ %call, %if.end5 ], [ %0, %if.end ]
  ret %struct.rtx_def* %cond
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #4

declare %struct.rtx_def* @gen_label_rtx() #2

declare void @make_decl_rtl(%union.tree_node*, i8*) #2

; Function Attrs: nounwind uwtable
define void @emit_jump(%struct.rtx_def* %label) #0 {
entry:
  tail call void @do_pending_stack_adjust() #6
  %call = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %label) #6
  %call1 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call) #6
  %call2 = tail call %struct.rtx_def* @emit_barrier() #6
  ret void
}

declare void @do_pending_stack_adjust() #2

declare %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #2

declare %struct.rtx_def* @gen_jump(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_barrier() #2

; Function Attrs: nounwind uwtable
define void @expand_computed_goto(%union.tree_node* %exp) #0 {
entry:
  %call = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* null, i32 0, i32 0) #6
  tail call void @emit_queue() #6
  tail call void @do_pending_stack_adjust() #6
  tail call void @emit_indirect_jump(%struct.rtx_def* %call) #6
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %has_computed_jump = getelementptr inbounds %struct.function* %0, i64 0, i32 56
  %1 = bitcast i24* %has_computed_jump to i32*
  %bf.load = load i32* %1, align 8
  %bf.set = or i32 %bf.load, 2048
  store i32 %bf.set, i32* %1, align 8
  ret void
}

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #2

declare void @emit_queue() #2

declare void @emit_indirect_jump(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_label(%union.tree_node* %label) #0 {
entry:
  tail call void @do_pending_stack_adjust() #6
  %code.i = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 31
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i:                                         ; preds = %entry
  %rtl.i = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 17
  %0 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  %cmp1.i = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp1.i, label %if.end5.i, label %label_rtx.exit

if.end5.i:                                        ; preds = %if.end.i
  %call.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i, %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  %tobool.i = icmp eq %struct.rtx_def* %call.i, null
  br i1 %tobool.i, label %cond.false.i, label %label_rtx.exit

cond.false.i:                                     ; preds = %if.end5.i
  tail call void @make_decl_rtl(%union.tree_node* %label, i8* null) #6
  %1 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  br label %label_rtx.exit

label_rtx.exit:                                   ; preds = %if.end.i, %if.end5.i, %cond.false.i
  %cond.i = phi %struct.rtx_def* [ %1, %cond.false.i ], [ %call.i, %if.end5.i ], [ %0, %if.end.i ]
  %call1 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %cond.i) #6
  %name = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 8
  %2 = load %union.tree_node** %name, align 8, !tbaa !62
  %tobool = icmp eq %union.tree_node* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %label_rtx.exit
  %id = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds i8** %id, i64 1
  %4 = load i8** %3, align 8, !tbaa !63
  %5 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  %tobool5 = icmp eq %struct.rtx_def* %5, null
  br i1 %tobool5, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.then
  tail call void @make_decl_rtl(%union.tree_node* %label, i8* null) #6
  %6 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  br label %cond.end

cond.end:                                         ; preds = %if.then, %cond.false
  %cond = phi %struct.rtx_def* [ %6, %cond.false ], [ %5, %if.then ]
  %7 = getelementptr inbounds %struct.rtx_def* %cond, i64 0, i32 1, i64 6, i32 0
  %.c = ptrtoint i8* %4 to i64
  store i64 %.c, i64* %7, align 8, !tbaa !17
  br label %if.end

if.end:                                           ; preds = %label_rtx.exit, %cond.end
  %8 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %8, i64 0, i32 1
  %9 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 1
  %10 = load %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %cmp = icmp eq %struct.nesting* %10, null
  br i1 %cmp, label %if.end20, label %if.then10

if.then10:                                        ; preds = %if.end
  %call11 = tail call i8* @ggc_alloc(i64 16) #6
  %11 = bitcast i8* %call11 to %struct.label_chain*
  %12 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt12 = getelementptr inbounds %struct.function* %12, i64 0, i32 1
  %13 = load %struct.stmt_status** %stmt12, align 8, !tbaa !1
  %x_stack_block_stack13 = getelementptr inbounds %struct.stmt_status* %13, i64 0, i32 1
  %14 = load %struct.nesting** %x_stack_block_stack13, align 8, !tbaa !51
  %label_chain = getelementptr inbounds %struct.nesting* %14, i64 0, i32 4, i32 0, i32 6
  %15 = load %struct.label_chain** %label_chain, align 8, !tbaa !66
  %next = bitcast i8* %call11 to %struct.label_chain**
  store %struct.label_chain* %15, %struct.label_chain** %next, align 8, !tbaa !67
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt14 = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt14, align 8, !tbaa !1
  %x_stack_block_stack15 = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 1
  %18 = load %struct.nesting** %x_stack_block_stack15, align 8, !tbaa !51
  %label_chain18 = getelementptr inbounds %struct.nesting* %18, i64 0, i32 4, i32 0, i32 6
  store %struct.label_chain* %11, %struct.label_chain** %label_chain18, align 8, !tbaa !66
  %label19 = getelementptr inbounds i8* %call11, i64 8
  %19 = bitcast i8* %label19 to %union.tree_node**
  store %union.tree_node* %label, %union.tree_node** %19, align 8, !tbaa !23
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then10
  ret void
}

declare %struct.rtx_def* @emit_label(%struct.rtx_def*) #2

declare i8* @ggc_alloc(i64) #2

; Function Attrs: nounwind uwtable
define void @declare_nonlocal_label(%union.tree_node* %label) #0 {
entry:
  %0 = load i32* @target_flags, align 4, !tbaa !58
  %and = lshr i32 %0, 25
  %1 = and i32 %and, 1
  %2 = or i32 %1, 4
  %idxprom13 = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom13
  %3 = load i8* %arrayidx, align 1, !tbaa !68
  %conv = zext i8 %3 to i64
  %call = tail call %struct.rtx_def* @assign_stack_local(i32 %2, i64 %conv, i32 0) #6
  %4 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_labels = getelementptr inbounds %struct.function* %4, i64 0, i32 19
  %5 = load %union.tree_node** %x_nonlocal_labels, align 8, !tbaa !69
  %call4 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %label, %union.tree_node* %5) #6
  %6 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_labels5 = getelementptr inbounds %struct.function* %6, i64 0, i32 19
  store %union.tree_node* %call4, %union.tree_node** %x_nonlocal_labels5, align 8, !tbaa !69
  %code.i = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 31
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i:                                         ; preds = %entry
  %rtl.i = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 17
  %7 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  %cmp1.i = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp1.i, label %if.end5.i, label %label_rtx.exit

if.end5.i:                                        ; preds = %if.end.i
  %call.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i, %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  %tobool.i = icmp eq %struct.rtx_def* %call.i, null
  br i1 %tobool.i, label %cond.false.i, label %label_rtx.exit

cond.false.i:                                     ; preds = %if.end5.i
  tail call void @make_decl_rtl(%union.tree_node* %label, i8* null) #6
  %8 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  br label %label_rtx.exit

label_rtx.exit:                                   ; preds = %if.end.i, %if.end5.i, %cond.false.i
  %cond.i = phi %struct.rtx_def* [ %8, %cond.false.i ], [ %call.i, %if.end5.i ], [ %7, %if.end.i ]
  %9 = getelementptr inbounds %struct.rtx_def* %cond.i, i64 0, i32 0
  %bf.load = load i32* %9, align 8
  %bf.set = or i32 %bf.load, 268435456
  store i32 %bf.set, i32* %9, align 8
  %10 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function* %10, i64 0, i32 20
  %11 = load %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8, !tbaa !70
  %cmp = icmp eq %struct.rtx_def* %11, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %label_rtx.exit
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function* %10, i64 0, i32 22
  %x_tail_recursion_reentry = getelementptr inbounds %struct.function* %10, i64 0, i32 29
  %12 = load %struct.rtx_def** %x_tail_recursion_reentry, align 8, !tbaa !71
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx, align 8, !tbaa !17
  tail call void @emit_stack_save(i32 2, %struct.rtx_def** %x_nonlocal_goto_stack_level, %struct.rtx_def* %13) #6
  %.pre = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_goto_handler_slots9.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 20
  %.pre14 = load %struct.rtx_def** %x_nonlocal_goto_handler_slots9.phi.trans.insert, align 8, !tbaa !70
  br label %if.end

if.end:                                           ; preds = %if.then, %label_rtx.exit
  %14 = phi %struct.rtx_def* [ %.pre14, %if.then ], [ %11, %label_rtx.exit ]
  %call10 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call, %struct.rtx_def* %14) #6
  %15 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_goto_handler_slots11 = getelementptr inbounds %struct.function* %15, i64 0, i32 20
  store %struct.rtx_def* %call10, %struct.rtx_def** %x_nonlocal_goto_handler_slots11, align 8, !tbaa !70
  ret void
}

declare %struct.rtx_def* @assign_stack_local(i32, i64, i32) #2

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare void @emit_stack_save(i32, %struct.rtx_def**, %struct.rtx_def*) #2

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_goto(%union.tree_node* %label) #0 {
entry:
  %call = tail call %union.tree_node* @decl_function_context(%union.tree_node* %label) #6
  %cmp = icmp eq %union.tree_node* %call, null
  %0 = load %union.tree_node** @current_function_decl, align 8
  %cmp1 = icmp eq %union.tree_node* %call, %0
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %if.else55, label %if.then

if.then:                                          ; preds = %entry
  %call2 = tail call %struct.function* @find_function_data(%union.tree_node* %call) #6
  %1 = load i32* @target_flags, align 4, !tbaa !58
  %and = lshr i32 %1, 25
  %2 = and i32 %and, 1
  %3 = or i32 %2, 4
  %code.i = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 31
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i:                                         ; preds = %if.then
  %rtl.i = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 17
  %4 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  %cmp1.i = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp1.i, label %if.end5.i, label %label_rtx.exit

if.end5.i:                                        ; preds = %if.end.i
  %call.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i, %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  %tobool.i = icmp eq %struct.rtx_def* %call.i, null
  br i1 %tobool.i, label %cond.false.i, label %label_rtx.exit

cond.false.i:                                     ; preds = %if.end5.i
  tail call void @make_decl_rtl(%union.tree_node* %label, i8* null) #6
  %5 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  br label %label_rtx.exit

label_rtx.exit:                                   ; preds = %if.end.i, %if.end5.i, %cond.false.i
  %cond.i = phi %struct.rtx_def* [ %5, %cond.false.i ], [ %call.i, %if.end5.i ], [ %4, %if.end.i ]
  %call4 = tail call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %3, %struct.rtx_def* %cond.i) #6
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function* %call2, i64 0, i32 20
  %x_nonlocal_labels = getelementptr inbounds %struct.function* %call2, i64 0, i32 19
  %link.097 = load %union.tree_node** %x_nonlocal_labels, align 8
  %handler_slot.098 = load %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8
  %value99 = getelementptr inbounds %union.tree_node* %link.097, i64 0, i32 0, i32 2
  %6 = bitcast i32* %value99 to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !72
  %cmp5100 = icmp eq %union.tree_node* %7, %label
  br i1 %cmp5100, label %for.end, label %for.body

for.body:                                         ; preds = %label_rtx.exit, %for.body
  %handler_slot.0102 = phi %struct.rtx_def* [ %handler_slot.0, %for.body ], [ %handler_slot.098, %label_rtx.exit ]
  %link.0101 = phi %union.tree_node* [ %link.0, %for.body ], [ %link.097, %label_rtx.exit ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %handler_slot.0102, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %chain = getelementptr inbounds %union.tree_node* %link.0101, i64 0, i32 0, i32 0, i32 0
  %link.0 = load %union.tree_node** %chain, align 8
  %handler_slot.0 = load %struct.rtx_def** %rtx, align 8
  %value = getelementptr inbounds %union.tree_node* %link.0, i64 0, i32 0, i32 2
  %8 = bitcast i32* %value to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !72
  %cmp5 = icmp eq %union.tree_node* %9, %label
  br i1 %cmp5, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %label_rtx.exit
  %handler_slot.0.lcssa = phi %struct.rtx_def* [ %handler_slot.098, %label_rtx.exit ], [ %handler_slot.0, %for.body ]
  %fld = getelementptr inbounds %struct.rtx_def* %handler_slot.0.lcssa, i64 0, i32 1
  %rtx8 = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx8, align 8, !tbaa !17
  %has_nonlocal_label = getelementptr inbounds %struct.function* %call2, i64 0, i32 56
  %11 = bitcast i24* %has_nonlocal_label to i32*
  %bf.load = load i32* %11, align 8
  %bf.set = or i32 %bf.load, 256
  store i32 %bf.set, i32* %11, align 8
  %12 = load %struct.function** @cfun, align 8, !tbaa !17
  %has_nonlocal_goto = getelementptr inbounds %struct.function* %12, i64 0, i32 56
  %13 = bitcast i24* %has_nonlocal_goto to i32*
  %bf.load9 = load i32* %13, align 8
  %bf.set11 = or i32 %bf.load9, 512
  store i32 %bf.set11, i32* %13, align 8
  %14 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 0
  %bf.load12 = load i32* %14, align 8
  %bf.set14 = or i32 %bf.load12, 134217728
  store i32 %bf.set14, i32* %14, align 8
  %call15 = tail call %struct.rtx_def* @lookup_static_chain(%union.tree_node* %label) #6
  %call16 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call15) #6
  %call17 = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %10) #6
  %15 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !tbaa !17
  %call18 = tail call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %call17, %struct.rtx_def* %15, %struct.rtx_def* %call16) #6
  %call19 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call18) #6
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function* %call2, i64 0, i32 22
  %16 = load %struct.rtx_def** %x_nonlocal_goto_stack_level, align 8, !tbaa !74
  %tobool20 = icmp eq %struct.rtx_def* %16, null
  br i1 %tobool20, label %if.end, label %if.then21

if.then21:                                        ; preds = %for.end
  %call22 = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %16) #6
  %17 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !tbaa !17
  %call23 = tail call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %call22, %struct.rtx_def* %17, %struct.rtx_def* %call16) #6
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then21
  %save_area.0 = phi %struct.rtx_def* [ %call23, %if.then21 ], [ null, %for.end ]
  %18 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 8, !tbaa !17
  %call24 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %18, %struct.rtx_def* %call16) #6
  tail call void @emit_stack_restore(i32 2, %struct.rtx_def* %save_area.0, %struct.rtx_def* null) #6
  %19 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 8, !tbaa !17
  %call25 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %19) #6
  %call26 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call25) #6
  %20 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !17
  %call27 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %20) #6
  %call28 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call27) #6
  tail call void @emit_indirect_jump(%struct.rtx_def* %call19) #6
  %call29 = tail call %struct.rtx_def* @get_last_insn() #6
  %tobool3195 = icmp eq %struct.rtx_def* %call29, null
  br i1 %tobool3195, label %if.end57, label %for.body32

for.body32:                                       ; preds = %if.end, %for.inc50
  %insn.096 = phi %struct.rtx_def* [ %25, %for.inc50 ], [ %call29, %if.end ]
  %21 = getelementptr inbounds %struct.rtx_def* %insn.096, i64 0, i32 0
  %bf.load33 = load i32* %21, align 8
  %bf.clear34 = and i32 %bf.load33, 65535
  switch i32 %bf.clear34, label %for.inc50 [
    i32 33, label %if.then36
    i32 34, label %if.end57
  ]

if.then36:                                        ; preds = %for.body32
  %22 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %insn.096, i64 0, i32 1, i64 6
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %23 = load %struct.rtx_def** %rtx39, align 8, !tbaa !17
  %call40 = tail call %struct.rtx_def* @alloc_EXPR_LIST(i32 27, %struct.rtx_def* %22, %struct.rtx_def* %23) #6
  %24 = getelementptr inbounds %union.rtunion_def* %arrayidx38, i64 0, i32 0
  %call40.c = ptrtoint %struct.rtx_def* %call40 to i64
  store i64 %call40.c, i64* %24, align 8, !tbaa !17
  br label %if.end57

for.inc50:                                        ; preds = %for.body32
  %arrayidx52 = getelementptr inbounds %struct.rtx_def* %insn.096, i64 0, i32 1, i64 1
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %25 = load %struct.rtx_def** %rtx53, align 8, !tbaa !17
  %tobool31 = icmp eq %struct.rtx_def* %25, null
  br i1 %tobool31, label %if.end57, label %for.body32

if.else55:                                        ; preds = %entry
  %code.i80 = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 0, i32 2
  %bf.load.i81 = load i32* %code.i80, align 8
  %bf.clear.i82 = and i32 %bf.load.i81, 255
  %cmp.i83 = icmp eq i32 %bf.clear.i82, 31
  br i1 %cmp.i83, label %if.end.i87, label %if.then.i84

if.then.i84:                                      ; preds = %if.else55
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i87:                                       ; preds = %if.else55
  %rtl.i85 = getelementptr inbounds %union.tree_node* %label, i64 0, i32 0, i32 17
  %26 = load %struct.rtx_def** %rtl.i85, align 8, !tbaa !59
  %cmp1.i86 = icmp eq %struct.rtx_def* %26, null
  br i1 %cmp1.i86, label %if.end5.i90, label %label_rtx.exit93

if.end5.i90:                                      ; preds = %if.end.i87
  %call.i88 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i88, %struct.rtx_def** %rtl.i85, align 8, !tbaa !59
  %tobool.i89 = icmp eq %struct.rtx_def* %call.i88, null
  br i1 %tobool.i89, label %cond.false.i91, label %label_rtx.exit93

cond.false.i91:                                   ; preds = %if.end5.i90
  tail call void @make_decl_rtl(%union.tree_node* %label, i8* null) #6
  %27 = load %struct.rtx_def** %rtl.i85, align 8, !tbaa !59
  br label %label_rtx.exit93

label_rtx.exit93:                                 ; preds = %if.end.i87, %if.end5.i90, %cond.false.i91
  %cond.i92 = phi %struct.rtx_def* [ %27, %cond.false.i91 ], [ %call.i88, %if.end5.i90 ], [ %26, %if.end.i87 ]
  tail call fastcc void @expand_goto_internal(%union.tree_node* %label, %struct.rtx_def* %cond.i92, %struct.rtx_def* null)
  br label %if.end57

if.end57:                                         ; preds = %for.inc50, %for.body32, %if.end, %if.then36, %label_rtx.exit93
  ret void
}

declare %union.tree_node* @decl_function_context(%union.tree_node*) #2

declare %struct.function* @find_function_data(%union.tree_node*) #2

declare %struct.rtx_def* @gen_rtx_fmt_u00(i32, i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

declare %struct.rtx_def* @lookup_static_chain(%union.tree_node*) #2

declare %struct.rtx_def* @replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @emit_stack_restore(i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @alloc_EXPR_LIST(i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @expand_goto_internal(%union.tree_node* %body, %struct.rtx_def* %label, %struct.rtx_def* %last_insn) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %label, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 36
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 881, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.expand_goto_internal, i64 0, i64 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %label, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !17
  %cmp1 = icmp eq %struct.rtx_def* %1, null
  %2 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %2, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  br i1 %cmp1, label %if.else55, label %if.then2

if.then2:                                         ; preds = %if.end
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 0
  %block.085 = load %struct.nesting** %x_block_stack, align 8
  %tobool86 = icmp eq %struct.nesting* %block.085, null
  br i1 %tobool86, label %if.end45, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then2
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %label, i64 0, i32 1, i64 0
  %rtint8 = bitcast %union.rtunion_def* %arrayidx7 to i32*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %block.088 = phi %struct.nesting* [ %block.085, %for.body.lr.ph ], [ %block.0, %for.inc ]
  %stack_level.087 = phi %struct.rtx_def* [ null, %for.body.lr.ph ], [ %stack_level.0., %for.inc ]
  %first_insn = getelementptr inbounds %struct.nesting* %block.088, i64 0, i32 4, i32 0, i32 2
  %4 = load %struct.rtx_def** %first_insn, align 8, !tbaa !15
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx5 to i32*
  %5 = load i32* %rtint, align 4, !tbaa !58
  %6 = load i32* %rtint8, align 4, !tbaa !58
  %cmp9 = icmp slt i32 %5, %6
  br i1 %cmp9, label %for.end, label %if.end11

if.end11:                                         ; preds = %for.body
  %stack_level14 = getelementptr inbounds %struct.nesting* %block.088, i64 0, i32 4, i32 0, i32 1
  %7 = load %struct.rtx_def** %stack_level14, align 8, !tbaa !13
  %cmp15 = icmp eq %struct.rtx_def* %7, null
  %stack_level.0. = select i1 %cmp15, %struct.rtx_def* %stack_level.087, %struct.rtx_def* %7
  %cleanups = getelementptr inbounds %struct.nesting* %block.088, i64 0, i32 4, i32 0, i32 4
  %8 = load %union.tree_node** %cleanups, align 8, !tbaa !16
  %cmp23 = icmp eq %union.tree_node* %8, null
  br i1 %cmp23, label %for.inc, label %if.then24

if.then24:                                        ; preds = %if.end11
  tail call fastcc void @expand_cleanups(%union.tree_node* %8, i32 1, i32 1)
  tail call void @do_pending_stack_adjust() #6
  br label %for.inc

for.inc:                                          ; preds = %if.end11, %if.then24
  %next = getelementptr inbounds %struct.nesting* %block.088, i64 0, i32 1
  %block.0 = load %struct.nesting** %next, align 8
  %tobool = icmp eq %struct.nesting* %block.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %for.inc
  %stack_level.0.lcssa = phi %struct.rtx_def* [ %stack_level.0., %for.inc ], [ %stack_level.087, %for.body ]
  %tobool29 = icmp eq %struct.rtx_def* %stack_level.0.lcssa, null
  br i1 %tobool29, label %if.end45, label %if.then30

if.then30:                                        ; preds = %for.end
  tail call void @clear_pending_stack_adjust() #6
  tail call void @do_pending_stack_adjust() #6
  %9 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_return_label = getelementptr inbounds %struct.function* %9, i64 0, i32 24
  %10 = load %struct.rtx_def** %x_return_label, align 8, !tbaa !75
  %cmp31 = icmp eq %struct.rtx_def* %10, %label
  br i1 %cmp31, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then30
  %11 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %type = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 1
  %12 = load %union.tree_node** %type, align 8, !tbaa !76
  %code = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %bf.load33 = load i32* %code, align 8
  %bf.clear34 = and i32 %bf.load33, 255
  %cmp35 = icmp eq i32 %bf.clear34, 23
  br i1 %cmp35, label %land.lhs.true36, label %if.else

land.lhs.true36:                                  ; preds = %land.lhs.true
  %type39 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type* %type39, i64 0, i32 6
  %bf.load40 = load i32* %no_force_blk_flag, align 4
  %bf.clear41 = and i32 %bf.load40, 131072
  %tobool42 = icmp eq i32 %bf.clear41, 0
  br i1 %tobool42, label %if.else, label %if.end45

if.else:                                          ; preds = %land.lhs.true36, %land.lhs.true, %if.then30
  tail call void @emit_stack_restore(i32 0, %struct.rtx_def* %stack_level.0.lcssa, %struct.rtx_def* null) #6
  br label %if.end45

if.end45:                                         ; preds = %if.then2, %land.lhs.true36, %for.end, %if.else
  %cmp46 = icmp eq %union.tree_node* %body, null
  br i1 %cmp46, label %if.end65, label %land.lhs.true47

land.lhs.true47:                                  ; preds = %if.end45
  %bit_field_flag = getelementptr inbounds %union.tree_node* %body, i64 0, i32 0, i32 5
  %13 = bitcast i48* %bit_field_flag to i64*
  %bf.load48 = load i64* %13, align 8
  %bf.cast = and i64 %bf.load48, 4096
  %tobool51 = icmp eq i64 %bf.cast, 0
  br i1 %tobool51, label %if.end65, label %if.then52

if.then52:                                        ; preds = %land.lhs.true47
  %name = getelementptr inbounds %union.tree_node* %body, i64 0, i32 0, i32 8
  %14 = load %union.tree_node** %name, align 8, !tbaa !62
  %id = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds i8** %id, i64 1
  %16 = load i8** %15, align 8, !tbaa !63
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([50 x i8]* @.str30, i64 0, i64 0), i8* %16) #6
  br label %if.end65

if.else55:                                        ; preds = %if.end
  %x_cond_stack.i = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 2
  %17 = load %struct.nesting** %x_cond_stack.i, align 8, !tbaa !27
  %tobool.i = icmp eq %struct.nesting* %17, null
  br i1 %tobool.i, label %if.else.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.else55
  %data.i = getelementptr inbounds %struct.nesting* %17, i64 0, i32 4
  %endif_label.i = bitcast %union.anon.3* %data.i to %struct.rtx_def**
  %18 = load %struct.rtx_def** %endif_label.i, align 8, !tbaa !28
  %cmp.i = icmp eq %struct.rtx_def* %18, %label
  br i1 %cmp.i, label %if.then35.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true.i
  %19 = getelementptr inbounds %struct.nesting* %17, i64 0, i32 4, i32 0, i32 1
  %20 = load %struct.rtx_def** %19, align 8, !tbaa !30
  %cmp7.i = icmp eq %struct.rtx_def* %20, %label
  br i1 %cmp7.i, label %if.end33.i, label %if.else.i

if.else.i:                                        ; preds = %lor.lhs.false.i, %if.else55
  %x_loop_stack.i = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 3
  %21 = load %struct.nesting** %x_loop_stack.i, align 8, !tbaa !31
  %tobool11.i = icmp eq %struct.nesting* %21, null
  br i1 %tobool11.i, label %if.end53.i, label %land.lhs.true12.i

land.lhs.true12.i:                                ; preds = %if.else.i
  %data15.i = getelementptr inbounds %struct.nesting* %21, i64 0, i32 4
  %start_label.i = bitcast %union.anon.3* %data15.i to %struct.rtx_def**
  %22 = load %struct.rtx_def** %start_label.i, align 8, !tbaa !32
  %cmp16.i = icmp eq %struct.rtx_def* %22, %label
  br i1 %cmp16.i, label %if.then35.i, label %lor.lhs.false17.i

lor.lhs.false17.i:                                ; preds = %land.lhs.true12.i
  %23 = getelementptr inbounds %struct.nesting* %21, i64 0, i32 4, i32 0, i32 1
  %24 = load %struct.rtx_def** %23, align 8, !tbaa !34
  %cmp22.i = icmp eq %struct.rtx_def* %24, %label
  br i1 %cmp22.i, label %if.end33.i, label %lor.lhs.false23.i

lor.lhs.false23.i:                                ; preds = %lor.lhs.false17.i
  %continue_label.i = getelementptr inbounds %struct.nesting* %21, i64 0, i32 4, i32 0, i32 3
  %25 = load %struct.nesting** %continue_label.i, align 8
  %26 = bitcast %struct.nesting* %25 to %struct.rtx_def*
  %cmp28.i = icmp eq %struct.rtx_def* %26, %label
  br i1 %cmp28.i, label %if.end33.i, label %if.end53.i

if.end33.i:                                       ; preds = %lor.lhs.false23.i, %lor.lhs.false17.i, %lor.lhs.false.i
  %end_block.0.i = phi %struct.nesting* [ %17, %lor.lhs.false.i ], [ %21, %lor.lhs.false23.i ], [ %21, %lor.lhs.false17.i ]
  %tobool34.i = icmp eq %struct.nesting* %end_block.0.i, null
  br i1 %tobool34.i, label %if.end53.i, label %if.then35.i

if.then35.i:                                      ; preds = %if.end33.i, %land.lhs.true12.i, %land.lhs.true.i
  %end_block.0215.i = phi %struct.nesting* [ %end_block.0.i, %if.end33.i ], [ %17, %land.lhs.true.i ], [ %21, %land.lhs.true12.i ]
  %x_block_stack.i = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 0
  %27 = load %struct.nesting** %x_block_stack.i, align 8, !tbaa !9
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %if.then35.i
  %end_block.0.pn.i = phi %struct.nesting* [ %end_block.0215.i, %if.then35.i ], [ %next_block.0.i, %while.cond.i ]
  %next_block.0.in.i = getelementptr inbounds %struct.nesting* %end_block.0.pn.i, i64 0, i32 0
  %next_block.0.i = load %struct.nesting** %next_block.0.in.i, align 8
  %tobool37.i = icmp ne %struct.nesting* %next_block.0.i, null
  %cmp38.i = icmp ne %struct.nesting* %next_block.0.i, %27
  %cmp38..i = and i1 %tobool37.i, %cmp38.i
  br i1 %cmp38..i, label %while.cond.i, label %while.end.i

while.end.i:                                      ; preds = %while.cond.i
  br i1 %tobool37.i, label %expand_fixup.exit, label %if.end42.i

if.end42.i:                                       ; preds = %while.end.i
  %next.i = getelementptr inbounds %struct.nesting* %27, i64 0, i32 1
  %28 = load %struct.nesting** %next.i, align 8, !tbaa !26
  %cmp47201.i = icmp eq %struct.nesting* %27, %end_block.0215.i
  br i1 %cmp47201.i, label %if.end53.i, label %for.body.i

for.body.i:                                       ; preds = %if.end42.i, %for.inc.i
  %block.0203.i = phi %struct.nesting* [ %30, %for.inc.i ], [ %27, %if.end42.i ]
  %next_block.1202.i = phi %struct.nesting* [ %next_block.2.i, %for.inc.i ], [ %28, %if.end42.i ]
  %cmp48.i = icmp eq %struct.nesting* %block.0203.i, %next_block.1202.i
  br i1 %cmp48.i, label %if.then49.i, label %for.inc.i

if.then49.i:                                      ; preds = %for.body.i
  %next50.i = getelementptr inbounds %struct.nesting* %block.0203.i, i64 0, i32 1
  %29 = load %struct.nesting** %next50.i, align 8, !tbaa !26
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then49.i, %for.body.i
  %next_block.2.i = phi %struct.nesting* [ %29, %if.then49.i ], [ %next_block.1202.i, %for.body.i ]
  %all52.i = getelementptr inbounds %struct.nesting* %block.0203.i, i64 0, i32 0
  %30 = load %struct.nesting** %all52.i, align 8, !tbaa !77
  %cmp47.i = icmp eq %struct.nesting* %30, %end_block.0215.i
  br i1 %cmp47.i, label %if.end53.i, label %for.body.i

if.end53.i:                                       ; preds = %for.inc.i, %if.end42.i, %if.end33.i, %lor.lhs.false23.i, %if.else.i
  %end_block.1.i = phi %struct.nesting* [ null, %if.else.i ], [ null, %lor.lhs.false23.i ], [ null, %if.end33.i ], [ %28, %if.end42.i ], [ %next_block.2.i, %for.inc.i ]
  %x_block_stack55.i = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 0
  %block.1197.i = load %struct.nesting** %x_block_stack55.i, align 8
  %cmp57198.i = icmp eq %struct.nesting* %block.1197.i, %end_block.1.i
  br i1 %cmp57198.i, label %if.end140.i, label %for.body58.i

for.cond56.i:                                     ; preds = %lor.lhs.false62.i
  %next69.i = getelementptr inbounds %struct.nesting* %block.1199.i, i64 0, i32 1
  %block.1.i = load %struct.nesting** %next69.i, align 8
  %cmp57.i = icmp eq %struct.nesting* %block.1.i, %end_block.1.i
  br i1 %cmp57.i, label %if.end140.i, label %for.body58.i

for.body58.i:                                     ; preds = %if.end53.i, %for.cond56.i
  %block.1199.i = phi %struct.nesting* [ %block.1.i, %for.cond56.i ], [ %block.1197.i, %if.end53.i ]
  %stack_level.i = getelementptr inbounds %struct.nesting* %block.1199.i, i64 0, i32 4, i32 0, i32 1
  %31 = load %struct.rtx_def** %stack_level.i, align 8, !tbaa !13
  %cmp61.i = icmp eq %struct.rtx_def* %31, null
  br i1 %cmp61.i, label %lor.lhs.false62.i, label %if.then72.i

lor.lhs.false62.i:                                ; preds = %for.body58.i
  %cleanups.i = getelementptr inbounds %struct.nesting* %block.1199.i, i64 0, i32 4, i32 0, i32 4
  %32 = load %union.tree_node** %cleanups.i, align 8, !tbaa !16
  %cmp65.i = icmp eq %union.tree_node* %32, null
  br i1 %cmp65.i, label %for.cond56.i, label %if.then72.i

if.then72.i:                                      ; preds = %lor.lhs.false62.i, %for.body58.i
  %call.i = tail call i8* @ggc_alloc(i64 64) #6
  %33 = bitcast i8* %call.i to %struct.goto_fixup*
  %cmp73.i = icmp eq %struct.rtx_def* %last_insn, null
  br i1 %cmp73.i, label %cond.false.i, label %if.end75.i

if.end75.i:                                       ; preds = %if.then72.i
  %target.i = getelementptr inbounds i8* %call.i, i64 16
  %34 = bitcast i8* %target.i to %union.tree_node**
  store %union.tree_node* %body, %union.tree_node** %34, align 8, !tbaa !45
  %target_rtl.i = getelementptr inbounds i8* %call.i, i64 32
  %35 = bitcast i8* %target_rtl.i to %struct.rtx_def**
  store %struct.rtx_def* %label, %struct.rtx_def** %35, align 8, !tbaa !47
  br label %cond.end.i

cond.false.i:                                     ; preds = %if.then72.i
  tail call void @do_pending_stack_adjust() #6
  %target188.i = getelementptr inbounds i8* %call.i, i64 16
  %36 = bitcast i8* %target188.i to %union.tree_node**
  store %union.tree_node* %body, %union.tree_node** %36, align 8, !tbaa !45
  %target_rtl189.i = getelementptr inbounds i8* %call.i, i64 32
  %37 = bitcast i8* %target_rtl189.i to %struct.rtx_def**
  store %struct.rtx_def* %label, %struct.rtx_def** %37, align 8, !tbaa !47
  %call77.i = tail call %struct.rtx_def* @get_last_insn() #6
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %if.end75.i
  %cond78.i = phi %struct.rtx_def* [ %call77.i, %cond.false.i ], [ %last_insn, %if.end75.i ]
  %call80.i = tail call %union.tree_node* @make_node(i32 4) #6
  %used_flag.i = getelementptr inbounds %union.tree_node* %call80.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %used_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 65536
  store i32 %bf.set.i, i32* %used_flag.i, align 8
  %38 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_whole_function_mode_p.i = getelementptr inbounds %struct.function* %38, i64 0, i32 56
  %39 = bitcast i24* %x_whole_function_mode_p.i to i32*
  %bf.load81.i = load i32* %39, align 8
  %bf.clear82.i = and i32 %bf.load81.i, 262144
  %tobool83.i = icmp eq i32 %bf.clear82.i, 0
  br i1 %tobool83.i, label %if.then84.i, label %if.else85.i

if.then84.i:                                      ; preds = %cond.end.i
  tail call void @insert_block(%union.tree_node* %call80.i) #6
  br label %if.end93.i

if.else85.i:                                      ; preds = %cond.end.i
  %40 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %initial.i = getelementptr inbounds %union.tree_node* %40, i64 0, i32 0, i32 12
  %41 = load %union.tree_node** %initial.i, align 8, !tbaa !78
  %chain.i = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 0, i32 0
  %42 = load %union.tree_node** %chain.i, align 8, !tbaa !79
  %chain88.i = getelementptr inbounds %union.tree_node* %call80.i, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %42, %union.tree_node** %chain88.i, align 8, !tbaa !79
  %43 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %initial90.i = getelementptr inbounds %union.tree_node* %43, i64 0, i32 0, i32 12
  %44 = load %union.tree_node** %initial90.i, align 8, !tbaa !78
  %chain92.i = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %call80.i, %union.tree_node** %chain92.i, align 8, !tbaa !79
  br label %if.end93.i

if.end93.i:                                       ; preds = %if.else85.i, %if.then84.i
  tail call void @start_sequence() #6
  %call94.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -98) #6
  %45 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_whole_function_mode_p95.i = getelementptr inbounds %struct.function* %45, i64 0, i32 56
  %46 = bitcast i24* %x_whole_function_mode_p95.i to i32*
  %bf.load96.i = load i32* %46, align 8
  %bf.clear98.i = and i32 %bf.load96.i, 262144
  %tobool99.i = icmp eq i32 %bf.clear98.i, 0
  br i1 %tobool99.i, label %if.end101.i, label %if.then100.i

if.then100.i:                                     ; preds = %if.end93.i
  %47 = getelementptr inbounds %struct.rtx_def* %call94.i, i64 0, i32 1, i64 3, i32 0
  %call80.c186.i = ptrtoint %union.tree_node* %call80.i to i64
  store i64 %call80.c186.i, i64* %47, align 8, !tbaa !17
  br label %if.end101.i

if.end101.i:                                      ; preds = %if.then100.i, %if.end93.i
  %call102.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -99) #6
  %before_jump.i = getelementptr inbounds i8* %call.i, i64 8
  %48 = bitcast i8* %before_jump.i to %struct.rtx_def**
  store %struct.rtx_def* %call102.i, %struct.rtx_def** %48, align 8, !tbaa !43
  %call103.i = tail call %struct.rtx_def* @emit_note(i8* null, i32 -97) #6
  %49 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_whole_function_mode_p104.i = getelementptr inbounds %struct.function* %49, i64 0, i32 56
  %50 = bitcast i24* %x_whole_function_mode_p104.i to i32*
  %bf.load105.i = load i32* %50, align 8
  %bf.clear107.i = and i32 %bf.load105.i, 262144
  %tobool108.i = icmp eq i32 %bf.clear107.i, 0
  br i1 %tobool108.i, label %if.end113.i, label %if.then109.i

if.then109.i:                                     ; preds = %if.end101.i
  %51 = getelementptr inbounds %struct.rtx_def* %call103.i, i64 0, i32 1, i64 3, i32 0
  %call80.c.i = ptrtoint %union.tree_node* %call80.i to i64
  store i64 %call80.c.i, i64* %51, align 8, !tbaa !17
  br label %if.end113.i

if.end113.i:                                      ; preds = %if.then109.i, %if.end101.i
  %context.i = getelementptr inbounds i8* %call.i, i64 24
  %52 = bitcast i8* %context.i to %union.tree_node**
  store %union.tree_node* %call80.i, %union.tree_node** %52, align 8, !tbaa !46
  tail call void @end_sequence() #6
  %call114.i = tail call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %call94.i, %struct.rtx_def* %cond78.i) #6
  %53 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt115.i = getelementptr inbounds %struct.function* %53, i64 0, i32 1
  %54 = load %struct.stmt_status** %stmt115.i, align 8, !tbaa !1
  %x_block_start_count.i = getelementptr inbounds %struct.stmt_status* %54, i64 0, i32 7
  %55 = load i32* %x_block_start_count.i, align 4, !tbaa !54
  %block_start_count.i = getelementptr inbounds i8* %call.i, i64 40
  %56 = bitcast i8* %block_start_count.i to i32*
  store i32 %55, i32* %56, align 4, !tbaa !80
  %stack_level116.i = getelementptr inbounds i8* %call.i, i64 48
  %57 = bitcast i8* %stack_level116.i to %struct.rtx_def**
  store %struct.rtx_def* null, %struct.rtx_def** %57, align 8, !tbaa !48
  %outer_cleanups.i = getelementptr inbounds %struct.nesting* %block.1199.i, i64 0, i32 4, i32 0, i32 5
  %58 = load %union.tree_node** %outer_cleanups.i, align 8, !tbaa !22
  %tobool119.i = icmp eq %union.tree_node* %58, null
  %cleanups123.i = getelementptr inbounds %struct.nesting* %block.1199.i, i64 0, i32 4, i32 0, i32 4
  %59 = load %union.tree_node** %cleanups123.i, align 8, !tbaa !16
  %tobool124.i = icmp eq %union.tree_node* %59, null
  %or.cond.i = and i1 %tobool119.i, %tobool124.i
  br i1 %or.cond.i, label %cond.end134.i, label %cond.true125.i

cond.true125.i:                                   ; preds = %if.end113.i
  %call132.i = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %59, %union.tree_node* %58) #6
  br label %cond.end134.i

cond.end134.i:                                    ; preds = %cond.true125.i, %if.end113.i
  %cond135.i = phi %union.tree_node* [ %call132.i, %cond.true125.i ], [ null, %if.end113.i ]
  %cleanup_list_list.i = getelementptr inbounds i8* %call.i, i64 56
  %60 = bitcast i8* %cleanup_list_list.i to %union.tree_node**
  store %union.tree_node* %cond135.i, %union.tree_node** %60, align 8, !tbaa !49
  %61 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt136.i = getelementptr inbounds %struct.function* %61, i64 0, i32 1
  %62 = load %struct.stmt_status** %stmt136.i, align 8, !tbaa !1
  %x_goto_fixup_chain.i = getelementptr inbounds %struct.stmt_status* %62, i64 0, i32 13
  %63 = load %struct.goto_fixup** %x_goto_fixup_chain.i, align 8, !tbaa !42
  %next137.i = bitcast i8* %call.i to %struct.goto_fixup**
  store %struct.goto_fixup* %63, %struct.goto_fixup** %next137.i, align 8, !tbaa !50
  %64 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt138.i = getelementptr inbounds %struct.function* %64, i64 0, i32 1
  %65 = load %struct.stmt_status** %stmt138.i, align 8, !tbaa !1
  %x_goto_fixup_chain139.i = getelementptr inbounds %struct.stmt_status* %65, i64 0, i32 13
  store %struct.goto_fixup* %33, %struct.goto_fixup** %x_goto_fixup_chain139.i, align 8, !tbaa !42
  br label %if.end140.i

if.end140.i:                                      ; preds = %for.cond56.i, %cond.end134.i, %if.end53.i
  %block.1193.i = phi %struct.nesting* [ %block.1199.i, %cond.end134.i ], [ %end_block.1.i, %if.end53.i ], [ %end_block.1.i, %for.cond56.i ]
  %phitmp = icmp eq %struct.nesting* %block.1193.i, null
  br label %expand_fixup.exit

expand_fixup.exit:                                ; preds = %while.end.i, %if.end140.i
  %retval.0.i = phi i1 [ %phitmp, %if.end140.i ], [ true, %while.end.i ]
  %cmp58 = icmp ne %union.tree_node* %body, null
  %or.cond = and i1 %retval.0.i, %cmp58
  br i1 %or.cond, label %if.then59, label %if.end65

if.then59:                                        ; preds = %expand_fixup.exit
  %addressable_flag = getelementptr inbounds %union.tree_node* %body, i64 0, i32 0, i32 0, i32 2
  %bf.load61 = load i32* %addressable_flag, align 8
  %bf.set = or i32 %bf.load61, 1024
  store i32 %bf.set, i32* %addressable_flag, align 8
  br label %if.end65

if.end65:                                         ; preds = %land.lhs.true47, %if.end45, %expand_fixup.exit, %if.then59, %if.then52
  tail call void @do_pending_stack_adjust() #6
  %call.i83 = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %label) #6
  %call1.i = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i83) #6
  %call2.i = tail call %struct.rtx_def* @emit_barrier() #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_fixups(%struct.rtx_def* nocapture readonly %first_insn) #0 {
entry:
  tail call fastcc void @fixup_gotos(%struct.nesting* null, %struct.rtx_def* null, %union.tree_node* null, %struct.rtx_def* %first_insn, i32 0)
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @fixup_gotos(%struct.nesting* readonly %thisblock, %struct.rtx_def* %stack_level, %union.tree_node* readnone %cleanup_list, %struct.rtx_def* nocapture readonly %first_insn, i32 %dont_jump_in) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_goto_fixup_chain = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 13
  %f.0205 = load %struct.goto_fixup** %x_goto_fixup_chain, align 8
  %tobool206 = icmp eq %struct.goto_fixup* %f.0205, null
  br i1 %tobool206, label %for.end146, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %tobool7 = icmp ne i32 %dont_jump_in, 0
  %tobool8 = icmp ne %struct.rtx_def* %stack_level, null
  %or.cond = or i1 %tobool7, %tobool8
  %tobool10 = icmp ne %union.tree_node* %cleanup_list, null
  %or.cond147 = or i1 %or.cond, %tobool10
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %first_insn, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx13 to i32*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc86
  %f.0208 = phi %struct.goto_fixup* [ %f.0205, %for.body.lr.ph ], [ %f.0, %for.inc86 ]
  %prev.0207 = phi %struct.goto_fixup* [ null, %for.body.lr.ph ], [ %f.0208, %for.inc86 ]
  %before_jump = getelementptr inbounds %struct.goto_fixup* %f.0208, i64 0, i32 1
  %2 = load %struct.rtx_def** %before_jump, align 8, !tbaa !43
  %cmp = icmp eq %struct.rtx_def* %2, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %cmp1 = icmp eq %struct.goto_fixup* %prev.0207, null
  br i1 %cmp1, label %for.inc86, label %if.then2

if.then2:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.goto_fixup* %f.0208, i64 0, i32 0
  %3 = load %struct.goto_fixup** %next, align 8, !tbaa !50
  %next3 = getelementptr inbounds %struct.goto_fixup* %prev.0207, i64 0, i32 0
  store %struct.goto_fixup* %3, %struct.goto_fixup** %next3, align 8, !tbaa !50
  br label %for.inc86

if.else:                                          ; preds = %for.body
  %target_rtl = getelementptr inbounds %struct.goto_fixup* %f.0208, i64 0, i32 4
  %4 = load %struct.rtx_def** %target_rtl, align 8, !tbaa !47
  %arrayidx = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !17
  %cmp4 = icmp eq %struct.rtx_def* %5, null
  br i1 %cmp4, label %for.inc86, label %if.then5

if.then5:                                         ; preds = %if.else
  %target = getelementptr inbounds %struct.goto_fixup* %f.0208, i64 0, i32 2
  %6 = load %union.tree_node** %target, align 8, !tbaa !45
  %cmp6 = icmp eq %union.tree_node* %6, null
  %or.cond147.not = xor i1 %or.cond147, true
  %brmerge = or i1 %cmp6, %or.cond147.not
  br i1 %brmerge, label %if.end38, label %land.lhs.true11

land.lhs.true11:                                  ; preds = %if.then5
  %7 = load i32* %rtint, align 4, !tbaa !58
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtint17 = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %8 = load i32* %rtint17, align 4, !tbaa !58
  %cmp18 = icmp slt i32 %7, %8
  br i1 %cmp18, label %land.lhs.true19, label %if.end38

land.lhs.true19:                                  ; preds = %land.lhs.true11
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtint26 = bitcast %union.rtunion_def* %arrayidx25 to i32*
  %9 = load i32* %rtint26, align 4, !tbaa !58
  %cmp27 = icmp sgt i32 %7, %9
  br i1 %cmp27, label %land.lhs.true28, label %if.end38

land.lhs.true28:                                  ; preds = %land.lhs.true19
  %regdecl_flag = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 5
  %10 = bitcast i48* %regdecl_flag to i64*
  %bf.load = load i64* %10, align 8
  %bf.cast = and i64 %bf.load, 1024
  %tobool30 = icmp eq i64 %bf.cast, 0
  br i1 %tobool30, label %if.then31, label %if.end38

if.then31:                                        ; preds = %land.lhs.true28
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %6, i8* getelementptr inbounds ([50 x i8]* @.str17, i64 0, i64 0)) #6
  %11 = load %union.tree_node** %target, align 8, !tbaa !45
  %regdecl_flag35 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 5
  %12 = bitcast i48* %regdecl_flag35 to i64*
  %bf.load36 = load i64* %12, align 8
  %bf.set = or i64 %bf.load36, 1024
  store i64 %bf.set, i64* %12, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.then5, %land.lhs.true28, %if.then31, %land.lhs.true19, %land.lhs.true11
  tail call void @start_sequence() #6
  tail call void @pushlevel(i32 0) #6
  %context = getelementptr inbounds %struct.goto_fixup* %f.0208, i64 0, i32 3
  %13 = load %union.tree_node** %context, align 8, !tbaa !46
  tail call void @set_block(%union.tree_node* %13) #6
  %cleanup_list_list = getelementptr inbounds %struct.goto_fixup* %f.0208, i64 0, i32 7
  %14 = load %union.tree_node** %cleanup_list_list, align 8, !tbaa !49
  %tobool39 = icmp eq %union.tree_node* %14, null
  br i1 %tobool39, label %if.end56, label %for.body44

for.body44:                                       ; preds = %if.end38, %for.inc
  %lists.0204 = phi %union.tree_node* [ %17, %for.inc ], [ %14, %if.end38 ]
  %addressable_flag = getelementptr inbounds %union.tree_node* %lists.0204, i64 0, i32 0, i32 0, i32 2
  %bf.load45 = load i32* %addressable_flag, align 8
  %bf.clear47 = and i32 %bf.load45, 1024
  %tobool48 = icmp eq i32 %bf.clear47, 0
  br i1 %tobool48, label %for.inc, label %land.lhs.true49

land.lhs.true49:                                  ; preds = %for.body44
  %value = getelementptr inbounds %union.tree_node* %lists.0204, i64 0, i32 0, i32 2
  %15 = bitcast i32* %value to %union.tree_node**
  %16 = load %union.tree_node** %15, align 8, !tbaa !72
  %cmp50 = icmp eq %union.tree_node* %16, null
  br i1 %cmp50, label %for.inc, label %if.then51

if.then51:                                        ; preds = %land.lhs.true49
  tail call fastcc void @expand_cleanups(%union.tree_node* %16, i32 1, i32 1)
  tail call void @do_pending_stack_adjust() #6
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true49, %for.body44, %if.then51
  %chain = getelementptr inbounds %union.tree_node* %lists.0204, i64 0, i32 0, i32 0, i32 0
  %17 = load %union.tree_node** %chain, align 8, !tbaa !79
  %tobool43 = icmp eq %union.tree_node* %17, null
  br i1 %tobool43, label %if.end56, label %for.body44

if.end56:                                         ; preds = %for.inc, %if.end38
  %stack_level57 = getelementptr inbounds %struct.goto_fixup* %f.0208, i64 0, i32 6
  %18 = load %struct.rtx_def** %stack_level57, align 8, !tbaa !48
  %tobool58 = icmp eq %struct.rtx_def* %18, null
  br i1 %tobool58, label %if.end79, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.end56
  %19 = load %struct.rtx_def** %target_rtl, align 8, !tbaa !47
  %20 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_return_label = getelementptr inbounds %struct.function* %20, i64 0, i32 24
  %21 = load %struct.rtx_def** %x_return_label, align 8, !tbaa !75
  %cmp61 = icmp eq %struct.rtx_def* %19, %21
  br i1 %cmp61, label %land.lhs.true62, label %if.then76

land.lhs.true62:                                  ; preds = %land.lhs.true59
  %22 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %type = getelementptr inbounds %union.tree_node* %22, i64 0, i32 0, i32 0, i32 1
  %23 = load %union.tree_node** %type, align 8, !tbaa !76
  %code = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 2
  %bf.load65 = load i32* %code, align 8
  %bf.clear66 = and i32 %bf.load65, 255
  %cmp67 = icmp eq i32 %bf.clear66, 23
  br i1 %cmp67, label %land.lhs.true68, label %if.then76

land.lhs.true68:                                  ; preds = %land.lhs.true62
  %type71 = bitcast %union.tree_node* %23 to %struct.tree_type*
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type* %type71, i64 0, i32 6
  %bf.load72 = load i32* %no_force_blk_flag, align 4
  %bf.clear74 = and i32 %bf.load72, 131072
  %tobool75 = icmp eq i32 %bf.clear74, 0
  br i1 %tobool75, label %if.then76, label %if.end79

if.then76:                                        ; preds = %land.lhs.true68, %land.lhs.true62, %land.lhs.true59
  %24 = load %struct.rtx_def** %before_jump, align 8, !tbaa !43
  tail call void @emit_stack_restore(i32 0, %struct.rtx_def* %18, %struct.rtx_def* %24) #6
  br label %if.end79

if.end79:                                         ; preds = %land.lhs.true68, %if.end56, %if.then76
  %call = tail call %struct.rtx_def* @get_insns() #6
  %call80 = tail call %union.tree_node* @poplevel(i32 1, i32 0, i32 0) #6
  tail call void @end_sequence() #6
  %25 = load %struct.rtx_def** %before_jump, align 8, !tbaa !43
  %call82 = tail call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %call, %struct.rtx_def* %25) #6
  store %struct.rtx_def* null, %struct.rtx_def** %before_jump, align 8, !tbaa !43
  br label %for.inc86

for.inc86:                                        ; preds = %if.then, %if.else, %if.then2, %if.end79
  %next87 = getelementptr inbounds %struct.goto_fixup* %f.0208, i64 0, i32 0
  %f.0 = load %struct.goto_fixup** %next87, align 8
  %tobool = icmp eq %struct.goto_fixup* %f.0, null
  br i1 %tobool, label %for.end88, label %for.body

for.end88:                                        ; preds = %for.inc86
  %.pre = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt89.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 1
  %.pre209 = load %struct.stmt_status** %stmt89.phi.trans.insert, align 8, !tbaa !1
  %x_goto_fixup_chain90.phi.trans.insert = getelementptr inbounds %struct.stmt_status* %.pre209, i64 0, i32 13
  %f.1199.pre = load %struct.goto_fixup** %x_goto_fixup_chain90.phi.trans.insert, align 8
  %tobool92200 = icmp eq %struct.goto_fixup* %f.1199.pre, null
  br i1 %tobool92200, label %for.end146, label %for.body93.lr.ph

for.body93.lr.ph:                                 ; preds = %for.end88
  %cmp103 = icmp ne %struct.nesting* %thisblock, null
  %block_start_count = getelementptr inbounds %struct.nesting* %thisblock, i64 0, i32 4, i32 0, i32 0
  %tobool139 = icmp eq %struct.rtx_def* %stack_level, null
  %outer_cleanups = getelementptr inbounds %struct.nesting* %thisblock, i64 0, i32 4, i32 0, i32 5
  br label %for.body93

for.body93:                                       ; preds = %for.body93.lr.ph, %for.inc144
  %f.1201 = phi %struct.goto_fixup* [ %f.1199.pre, %for.body93.lr.ph ], [ %f.1, %for.inc144 ]
  %before_jump94 = getelementptr inbounds %struct.goto_fixup* %f.1201, i64 0, i32 1
  %26 = load %struct.rtx_def** %before_jump94, align 8, !tbaa !43
  %cmp95 = icmp eq %struct.rtx_def* %26, null
  br i1 %cmp95, label %for.inc144, label %land.lhs.true96

land.lhs.true96:                                  ; preds = %for.body93
  %target_rtl97 = getelementptr inbounds %struct.goto_fixup* %f.1201, i64 0, i32 4
  %27 = load %struct.rtx_def** %target_rtl97, align 8, !tbaa !47
  %arrayidx99 = getelementptr inbounds %struct.rtx_def* %27, i64 0, i32 1, i64 1
  %rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**
  %28 = load %struct.rtx_def** %rtx100, align 8, !tbaa !17
  %cmp101 = icmp eq %struct.rtx_def* %28, null
  %or.cond148 = and i1 %cmp101, %cmp103
  br i1 %or.cond148, label %land.lhs.true104, label %for.inc144

land.lhs.true104:                                 ; preds = %land.lhs.true96
  %29 = load i32* %block_start_count, align 4, !tbaa !81
  %block_start_count105 = getelementptr inbounds %struct.goto_fixup* %f.1201, i64 0, i32 5
  %30 = load i32* %block_start_count105, align 4, !tbaa !80
  %cmp106 = icmp sgt i32 %29, %30
  br i1 %cmp106, label %for.inc144, label %if.then107

if.then107:                                       ; preds = %land.lhs.true104
  %cleanup_list_list109 = getelementptr inbounds %struct.goto_fixup* %f.1201, i64 0, i32 7
  %lists108.0196 = load %union.tree_node** %cleanup_list_list109, align 8
  %tobool112197 = icmp eq %union.tree_node* %lists108.0196, null
  br i1 %tobool112197, label %for.end138, label %for.body113.lr.ph

for.body113.lr.ph:                                ; preds = %if.then107
  %context120 = getelementptr inbounds %struct.goto_fixup* %f.1201, i64 0, i32 3
  br label %for.body113

for.body113:                                      ; preds = %for.body113.lr.ph, %for.cond111.backedge
  %lists108.0198 = phi %union.tree_node* [ %lists108.0196, %for.body113.lr.ph ], [ %lists108.0, %for.cond111.backedge ]
  %chain115 = getelementptr inbounds %union.tree_node* %lists108.0198, i64 0, i32 0, i32 0, i32 0
  %31 = load %union.tree_node** %chain115, align 8, !tbaa !79
  %32 = load %union.tree_node** %outer_cleanups, align 8, !tbaa !22
  %cmp118 = icmp eq %union.tree_node* %31, %32
  br i1 %cmp118, label %if.then119, label %for.cond111.backedge

for.cond111.backedge:                             ; preds = %for.body113, %if.end130
  %lists108.0 = phi %union.tree_node* [ %31, %for.body113 ], [ %lists108.0.pre, %if.end130 ]
  %tobool112 = icmp eq %union.tree_node* %lists108.0, null
  br i1 %tobool112, label %for.end138, label %for.body113

if.then119:                                       ; preds = %for.body113
  tail call void @start_sequence() #6
  tail call void @pushlevel(i32 0) #6
  %33 = load %union.tree_node** %context120, align 8, !tbaa !46
  tail call void @set_block(%union.tree_node* %33) #6
  %value122 = getelementptr inbounds %union.tree_node* %lists108.0198, i64 0, i32 0, i32 2
  %34 = bitcast i32* %value122 to %union.tree_node**
  %35 = load %union.tree_node** %34, align 8, !tbaa !72
  tail call fastcc void @expand_cleanups(%union.tree_node* %35, i32 1, i32 1)
  tail call void @do_pending_stack_adjust() #6
  %call123 = tail call %struct.rtx_def* @get_insns() #6
  %call124 = tail call %union.tree_node* @poplevel(i32 1, i32 0, i32 0) #6
  tail call void @end_sequence() #6
  %cmp125 = icmp eq %struct.rtx_def* %call123, null
  br i1 %cmp125, label %if.end130, label %if.then126

if.then126:                                       ; preds = %if.then119
  %36 = load %struct.rtx_def** %before_jump94, align 8, !tbaa !43
  %call128 = tail call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %call123, %struct.rtx_def* %36) #6
  store %struct.rtx_def* %call128, %struct.rtx_def** %before_jump94, align 8, !tbaa !43
  br label %if.end130

if.end130:                                        ; preds = %if.then119, %if.then126
  %37 = load %union.tree_node** %chain115, align 8, !tbaa !79
  store %union.tree_node* %37, %union.tree_node** %cleanup_list_list109, align 8, !tbaa !49
  %lists108.0.pre = load %union.tree_node** %chain115, align 8
  br label %for.cond111.backedge

for.end138:                                       ; preds = %for.cond111.backedge, %if.then107
  br i1 %tobool139, label %for.inc144, label %if.then140

if.then140:                                       ; preds = %for.end138
  %stack_level141 = getelementptr inbounds %struct.goto_fixup* %f.1201, i64 0, i32 6
  store %struct.rtx_def* %stack_level, %struct.rtx_def** %stack_level141, align 8, !tbaa !48
  br label %for.inc144

for.inc144:                                       ; preds = %for.end138, %land.lhs.true104, %for.body93, %land.lhs.true96, %if.then140
  %next145 = getelementptr inbounds %struct.goto_fixup* %f.1201, i64 0, i32 0
  %f.1 = load %struct.goto_fixup** %next145, align 8
  %tobool92 = icmp eq %struct.goto_fixup* %f.1, null
  br i1 %tobool92, label %for.end146, label %for.body93

for.end146:                                       ; preds = %for.inc144, %entry, %for.end88
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_asm(%union.tree_node* nocapture readonly %body) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %body, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 121
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node* %body, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %body.addr.0 = phi %union.tree_node* [ %0, %if.then ], [ %body, %entry ]
  %pointer = getelementptr inbounds %union.tree_node* %body.addr.0, i64 0, i32 0, i32 4
  %1 = load %union.tree_node** %pointer, align 8
  %2 = bitcast %union.tree_node* %1 to i8*
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_s(i32 40, i32 0, i8* %2) #6
  %call1 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call) #6
  %3 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %3, i64 0, i32 1
  %4 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %4, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  ret void
}

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #2

; Function Attrs: nounwind uwtable
define zeroext i1 @parse_output_constraint(i8** nocapture %constraint_p, i32 %operand_num, i32 %ninputs, i32 %noutputs, i8* nocapture %allows_mem, i8* nocapture %allows_reg, i8* %is_inout) #0 {
entry:
  %0 = load i8** %constraint_p, align 8, !tbaa !17
  store i8 0, i8* %allows_mem, align 1, !tbaa !82
  store i8 0, i8* %allows_reg, align 1, !tbaa !82
  %call = call i8* @strchr(i8* %0, i32 61) #6
  %tobool = icmp eq i8* %call, null
  br i1 %tobool, label %if.end, label %if.end4

if.end:                                           ; preds = %entry
  %call1 = call i8* @strchr(i8* %0, i32 43) #6
  %tobool2 = icmp eq i8* %call1, null
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([36 x i8]* @.str1, i64 0, i64 0)) #6
  br label %return

if.end4:                                          ; preds = %entry, %if.end
  %p.0248 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %1 = load i8* %p.0248, align 1, !tbaa !68
  %cmp = icmp eq i8 %1, 43
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %is_inout, align 1, !tbaa !82
  %cmp6 = icmp ne i8* %p.0248, %0
  %tobool8 = icmp ne i8* %is_inout, null
  %or.cond = or i1 %cmp6, %tobool8
  br i1 %or.cond, label %if.then9, label %for.cond.preheader

if.then9:                                         ; preds = %if.end4
  %call10 = call i64 @strlen(i8* %0) #6
  br i1 %cmp6, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.then9
  %2 = load i8* %p.0248, align 1, !tbaa !68
  %conv14 = sext i8 %2 to i32
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([62 x i8]* @.str2, i64 0, i64 0), i32 %conv14, i32 %operand_num) #6
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.then9
  %add = add i64 %call10, 1
  %3 = alloca i8, i64 %add, align 1
  %call16 = call i8* @strcpy(i8* %3, i8* %0) #6
  %4 = load i8* %3, align 1, !tbaa !68
  %sub.ptr.lhs.cast = ptrtoint i8* %p.0248 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %arrayidx17 = getelementptr inbounds i8* %3, i64 %sub.ptr.sub
  store i8 %4, i8* %arrayidx17, align 1, !tbaa !68
  store i8 61, i8* %3, align 1, !tbaa !68
  %conv19 = trunc i64 %call10 to i32
  %call20 = call i8* @ggc_alloc_string(i8* %3, i32 %conv19) #6
  store i8* %call20, i8** %constraint_p, align 8, !tbaa !17
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end4, %if.end15
  %constraint.0.pn.ph = phi i8* [ %call20, %if.end15 ], [ %0, %if.end4 ]
  %p.1261 = getelementptr inbounds i8* %constraint.0.pn.ph, i64 1
  %5 = load i8* %p.1261, align 1, !tbaa !68
  %tobool22262 = icmp eq i8 %5, 0
  br i1 %tobool22262, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %add25 = add nsw i32 %operand_num, 1
  %add26 = add nsw i32 %noutputs, %ninputs
  %cmp27 = icmp eq i32 %add25, %add26
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %6 = phi i8 [ %5, %for.body.lr.ph ], [ %21, %for.cond.backedge ]
  %p.1263 = phi i8* [ %p.1261, %for.body.lr.ph ], [ %p.1, %for.cond.backedge ]
  %conv23 = sext i8 %6 to i32
  switch i32 %conv23, label %sw.default [
    i32 43, label %sw.bb
    i32 61, label %sw.bb
    i32 37, label %sw.bb24
    i32 86, label %sw.bb31
    i32 109, label %sw.bb31
    i32 111, label %sw.bb31
    i32 63, label %for.cond.backedge
    i32 33, label %for.cond.backedge
    i32 42, label %for.cond.backedge
    i32 38, label %for.cond.backedge
    i32 35, label %for.cond.backedge
    i32 69, label %for.cond.backedge
    i32 70, label %for.cond.backedge
    i32 71, label %for.cond.backedge
    i32 72, label %for.cond.backedge
    i32 115, label %for.cond.backedge
    i32 105, label %for.cond.backedge
    i32 110, label %for.cond.backedge
    i32 73, label %for.cond.backedge
    i32 74, label %for.cond.backedge
    i32 75, label %for.cond.backedge
    i32 76, label %for.cond.backedge
    i32 77, label %for.cond.backedge
    i32 78, label %for.cond.backedge
    i32 79, label %for.cond.backedge
    i32 80, label %for.cond.backedge
    i32 44, label %for.cond.backedge
    i32 48, label %sw.bb33
    i32 49, label %sw.bb33
    i32 50, label %sw.bb33
    i32 51, label %sw.bb33
    i32 52, label %sw.bb33
    i32 53, label %sw.bb33
    i32 54, label %sw.bb33
    i32 55, label %sw.bb33
    i32 56, label %sw.bb33
    i32 57, label %sw.bb33
    i32 91, label %sw.bb33
    i32 60, label %sw.bb34
    i32 62, label %sw.bb34
    i32 103, label %sw.bb35
    i32 88, label %sw.bb35
    i32 112, label %sw.bb36
    i32 114, label %sw.bb36
  ]

sw.bb:                                            ; preds = %for.body, %for.body
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([62 x i8]* @.str3, i64 0, i64 0)) #6
  br label %return

sw.bb24:                                          ; preds = %for.body
  br i1 %cmp27, label %if.then29, label %for.cond.backedge

if.then29:                                        ; preds = %sw.bb24
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([39 x i8]* @.str4, i64 0, i64 0)) #6
  br label %return

sw.bb31:                                          ; preds = %for.body, %for.body, %for.body
  store i8 1, i8* %allows_mem, align 1, !tbaa !82
  br label %for.cond.backedge

sw.bb33:                                          ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([48 x i8]* @.str5, i64 0, i64 0)) #6
  br label %return

sw.bb34:                                          ; preds = %for.body, %for.body
  store i8 1, i8* %allows_mem, align 1, !tbaa !82
  br label %for.cond.backedge

sw.bb35:                                          ; preds = %for.body, %for.body
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  store i8 1, i8* %allows_mem, align 1, !tbaa !82
  br label %for.cond.backedge

sw.bb36:                                          ; preds = %for.body, %for.body
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  br label %for.cond.backedge

sw.default:                                       ; preds = %for.body
  %and = and i32 %conv23, 255
  %idxprom244 = zext i32 %and to i64
  %arrayidx38 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom244
  %7 = load i16* %arrayidx38, align 2, !tbaa !84
  %and40 = and i16 %7, 136
  %tobool41 = icmp eq i16 %and40, 0
  br i1 %tobool41, label %for.cond.backedge, label %if.end43

if.end43:                                         ; preds = %sw.default
  switch i8 %6, label %cond.end188.thread256 [
    i8 114, label %cond.end188.thread
    i8 82, label %cond.end188.thread
    i8 113, label %cond.end188.thread
    i8 81, label %cond.end188.thread
    i8 102, label %cond.true67
    i8 116, label %cond.true77
    i8 117, label %cond.true89
    i8 97, label %cond.end188.thread
    i8 98, label %cond.end188.thread
    i8 99, label %cond.end188.thread
    i8 100, label %cond.end188.thread
    i8 120, label %cond.true121
    i8 89, label %cond.end188
    i8 121, label %cond.true139
    i8 65, label %cond.end188.thread
    i8 68, label %cond.end188.thread
    i8 83, label %cond.end188.thread
  ]

cond.true67:                                      ; preds = %if.end43
  %8 = load i32* @target_flags, align 4, !tbaa !58
  %9 = and i32 %8, 33
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %cond.end188.thread256, label %cond.end188.thread

cond.true77:                                      ; preds = %if.end43
  %11 = load i32* @target_flags, align 4, !tbaa !58
  %12 = and i32 %11, 33
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %cond.end188.thread256, label %cond.end188.thread

cond.true89:                                      ; preds = %if.end43
  %14 = load i32* @target_flags, align 4, !tbaa !58
  %15 = and i32 %14, 33
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %cond.end188.thread256, label %cond.end188.thread

cond.true121:                                     ; preds = %if.end43
  %17 = load i32* @target_flags, align 4, !tbaa !58
  %and122 = and i32 %17, 327680
  %cmp123 = icmp eq i32 %and122, 0
  br i1 %cmp123, label %cond.end188.thread256, label %cond.end188.thread

cond.true139:                                     ; preds = %if.end43
  %18 = load i32* @target_flags, align 4, !tbaa !58
  %and140 = and i32 %18, 16384
  %cmp141 = icmp eq i32 %and140, 0
  br i1 %cmp141, label %cond.end188.thread256, label %cond.end188.thread

cond.end188.thread:                               ; preds = %if.end43, %if.end43, %if.end43, %if.end43, %if.end43, %if.end43, %if.end43, %if.end43, %if.end43, %if.end43, %if.end43, %cond.true121, %cond.true139, %cond.true67, %cond.true77, %cond.true89
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  br label %for.cond.backedge

cond.end188.thread256:                            ; preds = %if.end43, %cond.true121, %cond.true139, %cond.true67, %cond.true77, %cond.true89
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  br label %if.else

cond.end188:                                      ; preds = %if.end43
  %19 = load i32* @target_flags, align 4, !tbaa !58
  %20 = and i32 %19, 262144
  %cmp190 = icmp eq i32 %20, 0
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  br i1 %cmp190, label %if.else, label %for.cond.backedge

for.cond.backedge:                                ; preds = %cond.end188, %sw.default, %sw.bb31, %sw.bb34, %sw.bb35, %sw.bb36, %sw.bb24, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %if.else, %cond.end188.thread
  %p.1 = getelementptr inbounds i8* %p.1263, i64 1
  %21 = load i8* %p.1, align 1, !tbaa !68
  %tobool22 = icmp eq i8 %21, 0
  br i1 %tobool22, label %return, label %for.body

if.else:                                          ; preds = %cond.end188.thread256, %cond.end188
  store i8 1, i8* %allows_mem, align 1, !tbaa !82
  br label %for.cond.backedge

return:                                           ; preds = %for.cond.backedge, %for.cond.preheader, %sw.bb33, %if.then29, %sw.bb, %if.then3
  %retval.0 = phi i1 [ false, %sw.bb33 ], [ false, %if.then29 ], [ false, %sw.bb ], [ false, %if.then3 ], [ true, %for.cond.preheader ], [ true, %for.cond.backedge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #5

declare void @error(i8*, ...) #2

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #5

declare void @warning(i8*, ...) #2

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8* nocapture readonly) #1

declare i8* @ggc_alloc_string(i8*, i32) #2

; Function Attrs: nounwind uwtable
define void @expand_asm_operands(%union.tree_node* nocapture readonly %string, %union.tree_node* %outputs, %union.tree_node* %inputs, %union.tree_node* %clobbers, i32 %vol, i8* %filename, i32 %line) #0 {
entry:
  %constraint = alloca i8*, align 8
  %is_inout = alloca i8, align 1
  %allows_reg = alloca i8, align 1
  %allows_mem = alloca i8, align 1
  %allows_reg114 = alloca i8, align 1
  %allows_mem115 = alloca i8, align 1
  %constraint116 = alloca i8*, align 8
  %is_inout154 = alloca i8, align 1
  %allows_reg155 = alloca i8, align 1
  %allows_mem156 = alloca i8, align 1
  %allows_reg345 = alloca i8, align 1
  %allows_mem346 = alloca i8, align 1
  %constraint347 = alloca i8*, align 8
  %buffer = alloca [16 x i8], align 16
  %call = call i32 @list_length(%union.tree_node* %inputs) #6
  %call1 = call i32 @list_length(%union.tree_node* %outputs) #6
  %conv = sext i32 %call1 to i64
  %0 = alloca %struct.rtx_def*, i64 %conv, align 8
  %1 = alloca i32, i64 %conv, align 1
  %2 = alloca %struct.rtx_def*, i64 %conv, align 1
  %3 = alloca i32, i64 %conv, align 1
  %add = add nsw i32 %call1, %call
  %conv8 = sext i32 %add to i64
  %4 = alloca i8*, i64 %conv8, align 8
  %5 = load i32* @generating_concat_p, align 4, !tbaa !58
  %cmp = icmp eq i32 %call1, 0
  %tobool.i = icmp ne %union.tree_node* %outputs, null
  %tobool1.i = icmp ne %union.tree_node* %inputs, null
  %or.cond.i = or i1 %tobool.i, %tobool1.i
  br i1 %or.cond.i, label %if.then.i, label %if.end13

if.then.i:                                        ; preds = %entry
  %cond.i = select i1 %tobool.i, %union.tree_node* %outputs, %union.tree_node* %inputs
  %purpose.i = getelementptr inbounds %union.tree_node* %cond.i, i64 0, i32 0, i32 1
  %6 = load i8** %purpose.i, align 8
  %value.i = getelementptr inbounds i8* %6, i64 32
  %7 = bitcast i8* %value.i to %union.tree_node**
  %8 = load %union.tree_node** %7, align 8, !tbaa !72
  %pointer.i = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 4
  %9 = load %union.tree_node** %pointer.i, align 8
  %10 = bitcast %union.tree_node* %9 to i8*
  %11 = load i8* %10, align 1, !tbaa !68
  %tobool1.i.i = icmp eq i8 %11, 0
  br i1 %tobool1.i.i, label %while.cond.preheader.i, label %while.body.i.i

while.cond.preheader.i:                           ; preds = %n_occurrences.exit.i, %if.then.i
  %n.0.lcssa.i47.ph.i = phi i32 [ 0, %if.then.i ], [ %add.i.i, %n_occurrences.exit.i ]
  %tobool748.i = icmp eq %union.tree_node* %outputs, null
  br i1 %tobool748.i, label %for.cond19.preheader.i, label %while.body.i

while.body.i.i:                                   ; preds = %if.then.i, %while.body.i.i
  %12 = phi i8 [ %13, %while.body.i.i ], [ %11, %if.then.i ]
  %n.03.i.i = phi i32 [ %add.i.i, %while.body.i.i ], [ 0, %if.then.i ]
  %s.addr.02.i.i = phi i8* [ %incdec.ptr.i.i, %while.body.i.i ], [ %10, %if.then.i ]
  %incdec.ptr.i.i = getelementptr inbounds i8* %s.addr.02.i.i, i64 1
  %cmp.i.i = icmp eq i8 %12, 44
  %conv1.i.i = zext i1 %cmp.i.i to i32
  %add.i.i = add nsw i32 %conv1.i.i, %n.03.i.i
  %13 = load i8* %incdec.ptr.i.i, align 1, !tbaa !68
  %tobool.i.i = icmp eq i8 %13, 0
  br i1 %tobool.i.i, label %n_occurrences.exit.i, label %while.body.i.i

n_occurrences.exit.i:                             ; preds = %while.body.i.i
  %cmp.i = icmp sgt i32 %add.i.i, 29
  br i1 %cmp.i, label %if.then6.i, label %while.cond.preheader.i

if.then6.i:                                       ; preds = %n_occurrences.exit.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([31 x i8]* @.str25, i64 0, i64 0)) #6
  br label %return

while.body.i:                                     ; preds = %while.cond.preheader.i, %if.end18.i
  %next.050.i = phi %union.tree_node* [ %.next.0.i, %if.end18.i ], [ %inputs, %while.cond.preheader.i ]
  %tmp.049.i = phi %union.tree_node* [ %next.0..i, %if.end18.i ], [ %outputs, %while.cond.preheader.i ]
  %purpose10.i = getelementptr inbounds %union.tree_node* %tmp.049.i, i64 0, i32 0, i32 1
  %14 = load i8** %purpose10.i, align 8
  %value12.i = getelementptr inbounds i8* %14, i64 32
  %15 = bitcast i8* %value12.i to %union.tree_node**
  %16 = load %union.tree_node** %15, align 8, !tbaa !72
  %pointer14.i = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 4
  %17 = load %union.tree_node** %pointer14.i, align 8
  %18 = bitcast %union.tree_node* %17 to i8*
  %19 = load i8* %18, align 1, !tbaa !68
  %tobool1.i35.i = icmp eq i8 %19, 0
  br i1 %tobool1.i35.i, label %n_occurrences.exit45.i, label %while.body.i43.i

while.body.i43.i:                                 ; preds = %while.body.i, %while.body.i43.i
  %20 = phi i8 [ %21, %while.body.i43.i ], [ %19, %while.body.i ]
  %n.03.i36.i = phi i32 [ %add.i41.i, %while.body.i43.i ], [ 0, %while.body.i ]
  %s.addr.02.i37.i = phi i8* [ %incdec.ptr.i38.i, %while.body.i43.i ], [ %18, %while.body.i ]
  %incdec.ptr.i38.i = getelementptr inbounds i8* %s.addr.02.i37.i, i64 1
  %cmp.i39.i = icmp eq i8 %20, 44
  %conv1.i40.i = zext i1 %cmp.i39.i to i32
  %add.i41.i = add nsw i32 %conv1.i40.i, %n.03.i36.i
  %21 = load i8* %incdec.ptr.i38.i, align 1, !tbaa !68
  %tobool.i42.i = icmp eq i8 %21, 0
  br i1 %tobool.i42.i, label %n_occurrences.exit45.i, label %while.body.i43.i

n_occurrences.exit45.i:                           ; preds = %while.body.i43.i, %while.body.i
  %n.0.lcssa.i44.i = phi i32 [ 0, %while.body.i ], [ %add.i41.i, %while.body.i43.i ]
  %cmp16.i = icmp eq i32 %n.0.lcssa.i44.i, %n.0.lcssa.i47.ph.i
  br i1 %cmp16.i, label %if.end18.i, label %if.then17.i

if.then17.i:                                      ; preds = %n_occurrences.exit45.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([63 x i8]* @.str26, i64 0, i64 0)) #6
  br label %return

if.end18.i:                                       ; preds = %n_occurrences.exit45.i
  %chain.i = getelementptr inbounds %union.tree_node* %tmp.049.i, i64 0, i32 0, i32 0, i32 0
  %22 = load %union.tree_node** %chain.i, align 8, !tbaa !79
  %tobool19.i = icmp eq %union.tree_node* %22, null
  %next.0..i = select i1 %tobool19.i, %union.tree_node* %next.050.i, %union.tree_node* %22
  %.next.0.i = select i1 %tobool19.i, %union.tree_node* null, %union.tree_node* %next.050.i
  %tobool7.i = icmp eq %union.tree_node* %next.0..i, null
  br i1 %tobool7.i, label %if.end13, label %while.body.i

if.end13:                                         ; preds = %if.end18.i, %entry
  %tobool99.i = icmp eq %union.tree_node* %outputs, null
  br i1 %tobool99.i, label %for.cond19.preheader.i, label %for.body.i

for.cond19.preheader.i:                           ; preds = %for.inc15.i, %while.cond.preheader.i, %if.end13
  %tobool99.i1029 = phi i1 [ true, %if.end13 ], [ true, %while.cond.preheader.i ], [ false, %for.inc15.i ]
  %tobool2095.i = icmp eq %union.tree_node* %inputs, null
  br i1 %tobool2095.i, label %if.end16, label %for.body21.i

for.body.i:                                       ; preds = %if.end13, %for.inc15.i
  %i.0100.i = phi %union.tree_node* [ %29, %for.inc15.i ], [ %outputs, %if.end13 ]
  %purpose.i1015 = getelementptr inbounds %union.tree_node* %i.0100.i, i64 0, i32 0, i32 1
  %23 = load i8** %purpose.i1015, align 8
  %purpose2.i = getelementptr inbounds i8* %23, i64 24
  %24 = bitcast i8* %purpose2.i to %union.tree_node**
  %25 = load %union.tree_node** %24, align 8, !tbaa !86
  %tobool3.i = icmp eq %union.tree_node* %25, null
  br i1 %tobool3.i, label %for.inc15.i, label %for.cond4.i

for.cond4.i:                                      ; preds = %for.body.i, %for.body6.i
  %i.0.pn.i = phi %union.tree_node* [ %j.0.i, %for.body6.i ], [ %i.0100.i, %for.body.i ]
  %j.0.in.i = getelementptr inbounds %union.tree_node* %i.0.pn.i, i64 0, i32 0, i32 0, i32 0
  %j.0.i = load %union.tree_node** %j.0.in.i, align 8
  %tobool5.i = icmp eq %union.tree_node* %j.0.i, null
  br i1 %tobool5.i, label %for.inc15.i, label %for.body6.i

for.body6.i:                                      ; preds = %for.cond4.i
  %purpose8.i = getelementptr inbounds %union.tree_node* %j.0.i, i64 0, i32 0, i32 1
  %26 = load i8** %purpose8.i, align 8
  %purpose10.i1016 = getelementptr inbounds i8* %26, i64 24
  %27 = bitcast i8* %purpose10.i1016 to %union.tree_node**
  %28 = load %union.tree_node** %27, align 8, !tbaa !86
  %cmp.i1017 = icmp eq %union.tree_node* %25, %28
  br i1 %cmp.i1017, label %check_unique_operand_names.exit, label %for.cond4.i

for.inc15.i:                                      ; preds = %for.cond4.i, %for.body.i
  %chain17.i = getelementptr inbounds %union.tree_node* %i.0100.i, i64 0, i32 0, i32 0, i32 0
  %29 = load %union.tree_node** %chain17.i, align 8, !tbaa !79
  %tobool.i1018 = icmp eq %union.tree_node* %29, null
  br i1 %tobool.i1018, label %for.cond19.preheader.i, label %for.body.i

for.body21.i:                                     ; preds = %for.cond19.preheader.i, %for.inc60.i
  %i.196.i = phi %union.tree_node* [ %40, %for.inc60.i ], [ %inputs, %for.cond19.preheader.i ]
  %purpose24.i = getelementptr inbounds %union.tree_node* %i.196.i, i64 0, i32 0, i32 1
  %30 = load i8** %purpose24.i, align 8
  %purpose26.i = getelementptr inbounds i8* %30, i64 24
  %31 = bitcast i8* %purpose26.i to %union.tree_node**
  %32 = load %union.tree_node** %31, align 8, !tbaa !86
  %tobool27.i = icmp eq %union.tree_node* %32, null
  br i1 %tobool27.i, label %for.inc60.i, label %for.cond32.i

for.cond32.i:                                     ; preds = %for.body21.i, %for.body34.i
  %i.1.pn.i = phi %union.tree_node* [ %j.1.i, %for.body34.i ], [ %i.196.i, %for.body21.i ]
  %j.1.in.i = getelementptr inbounds %union.tree_node* %i.1.pn.i, i64 0, i32 0, i32 0, i32 0
  %j.1.i = load %union.tree_node** %j.1.in.i, align 8
  %tobool33.i = icmp eq %union.tree_node* %j.1.i, null
  br i1 %tobool33.i, label %for.cond46.preheader.i, label %for.body34.i

for.cond46.preheader.i:                           ; preds = %for.cond32.i
  br i1 %tobool99.i1029, label %for.inc60.i, label %for.body48.i

for.body34.i:                                     ; preds = %for.cond32.i
  %purpose36.i = getelementptr inbounds %union.tree_node* %j.1.i, i64 0, i32 0, i32 1
  %33 = load i8** %purpose36.i, align 8
  %purpose38.i = getelementptr inbounds i8* %33, i64 24
  %34 = bitcast i8* %purpose38.i to %union.tree_node**
  %35 = load %union.tree_node** %34, align 8, !tbaa !86
  %cmp39.i = icmp eq %union.tree_node* %32, %35
  br i1 %cmp39.i, label %check_unique_operand_names.exit, label %for.cond32.i

for.body48.i:                                     ; preds = %for.cond46.preheader.i, %for.inc56.i
  %j.294.i = phi %union.tree_node* [ %39, %for.inc56.i ], [ %outputs, %for.cond46.preheader.i ]
  %purpose50.i = getelementptr inbounds %union.tree_node* %j.294.i, i64 0, i32 0, i32 1
  %36 = load i8** %purpose50.i, align 8
  %purpose52.i = getelementptr inbounds i8* %36, i64 24
  %37 = bitcast i8* %purpose52.i to %union.tree_node**
  %38 = load %union.tree_node** %37, align 8, !tbaa !86
  %cmp53.i = icmp eq %union.tree_node* %32, %38
  br i1 %cmp53.i, label %check_unique_operand_names.exit, label %for.inc56.i

for.inc56.i:                                      ; preds = %for.body48.i
  %chain58.i = getelementptr inbounds %union.tree_node* %j.294.i, i64 0, i32 0, i32 0, i32 0
  %39 = load %union.tree_node** %chain58.i, align 8, !tbaa !79
  %tobool47.i = icmp eq %union.tree_node* %39, null
  br i1 %tobool47.i, label %for.inc60.i, label %for.body48.i

for.inc60.i:                                      ; preds = %for.inc56.i, %for.cond46.preheader.i, %for.body21.i
  %chain62.i = getelementptr inbounds %union.tree_node* %i.196.i, i64 0, i32 0, i32 0, i32 0
  %40 = load %union.tree_node** %chain62.i, align 8, !tbaa !79
  %tobool20.i = icmp eq %union.tree_node* %40, null
  br i1 %tobool20.i, label %if.end16, label %for.body21.i

check_unique_operand_names.exit:                  ; preds = %for.body6.i, %for.body34.i, %for.body48.i
  %41 = phi %union.tree_node* [ %32, %for.body48.i ], [ %32, %for.body34.i ], [ %25, %for.body6.i ]
  %id.i = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds i8** %id.i, i64 1
  %43 = load i8** %42, align 8, !tbaa !63
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([32 x i8]* @.str24, i64 0, i64 0), i8* %43) #6
  br label %return

if.end16:                                         ; preds = %for.inc60.i, %for.cond19.preheader.i
  %string.idx = getelementptr %union.tree_node* %string, i64 0, i32 0, i32 4
  %string.idx.val = load %union.tree_node** %string.idx, align 8
  %44 = bitcast %union.tree_node* %string.idx.val to i8*
  %call.i = call noalias i8* @xstrdup(i8* %44) #6
  %call211.i = call i8* @strchr(i8* %call.i, i32 37) #6
  %cmp13.i = icmp eq i8* %call211.i, null
  br i1 %cmp13.i, label %while.end.i, label %while.body.i1020

while.body.i1020:                                 ; preds = %if.end16, %while.cond.backedge.i
  %call214.i = phi i8* [ %call2.i, %while.cond.backedge.i ], [ %call211.i, %if.end16 ]
  %arrayidx.i = getelementptr inbounds i8* %call214.i, i64 1
  %45 = load i8* %arrayidx.i, align 1, !tbaa !68
  %cmp3.i = icmp eq i8 %45, 91
  br i1 %cmp3.i, label %if.end18.i1022, label %if.else.i

if.else.i:                                        ; preds = %while.body.i1020
  %idxprom.i = zext i8 %45 to i64
  %arrayidx7.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i
  %46 = load i16* %arrayidx7.i, align 2, !tbaa !84
  %and9.i = and i16 %46, 136
  %tobool.i1021 = icmp eq i16 %and9.i, 0
  br i1 %tobool.i1021, label %while.cond.backedge.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.else.i
  %arrayidx10.i = getelementptr inbounds i8* %call214.i, i64 2
  %47 = load i8* %arrayidx10.i, align 1, !tbaa !68
  %cmp12.i = icmp eq i8 %47, 91
  br i1 %cmp12.i, label %if.end18.i1022, label %while.cond.backedge.i

if.end18.i1022:                                   ; preds = %land.lhs.true.i, %while.body.i1020
  %p.1.i = phi i8* [ %arrayidx.i, %while.body.i1020 ], [ %arrayidx10.i, %land.lhs.true.i ]
  %call19.i = call fastcc i8* @resolve_operand_name_1(i8* %p.1.i, %union.tree_node* %outputs, %union.tree_node* %inputs) #6
  br label %while.cond.backedge.i

while.cond.backedge.i:                            ; preds = %if.end18.i1022, %land.lhs.true.i, %if.else.i
  %p.0.be.i = phi i8* [ %call19.i, %if.end18.i1022 ], [ %arrayidx.i, %if.else.i ], [ %arrayidx.i, %land.lhs.true.i ]
  %call2.i = call i8* @strchr(i8* %p.0.be.i, i32 37) #6
  %cmp.i1023 = icmp eq i8* %call2.i, null
  br i1 %cmp.i1023, label %while.end.i, label %while.body.i1020

while.end.i:                                      ; preds = %while.cond.backedge.i, %if.end16
  %call20.i = call i64 @strlen(i8* %call.i) #6
  %conv21.i = trunc i64 %call20.i to i32
  %call22.i = call %union.tree_node* @build_string(i32 %conv21.i, i8* %call.i) #6
  call void @free(i8* %call.i) #6
  br i1 %tobool99.i1029, label %for.cond27.preheader.i, label %for.body.i1027

for.cond27.preheader.i:                           ; preds = %for.body.i1027, %while.end.i
  %pconstraints.addr.0.lcssa.i = phi i8** [ %4, %while.end.i ], [ %incdec.ptr.i, %for.body.i1027 ]
  br i1 %tobool2095.i, label %resolve_operand_names.exit, label %for.body29.i

for.body.i1027:                                   ; preds = %while.end.i, %for.body.i1027
  %t.010.i = phi %union.tree_node* [ %53, %for.body.i1027 ], [ %outputs, %while.end.i ]
  %pconstraints.addr.09.i = phi i8** [ %incdec.ptr.i, %for.body.i1027 ], [ %4, %while.end.i ]
  %purpose.i1024 = getelementptr inbounds %union.tree_node* %t.010.i, i64 0, i32 0, i32 1
  %48 = load i8** %purpose.i1024, align 8
  %value.i1025 = getelementptr inbounds i8* %48, i64 32
  %49 = bitcast i8* %value.i1025 to %union.tree_node**
  %50 = load %union.tree_node** %49, align 8, !tbaa !72
  %pointer26.i = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 4
  %51 = load %union.tree_node** %pointer26.i, align 8
  %52 = bitcast %union.tree_node* %51 to i8*
  store i8* %52, i8** %pconstraints.addr.09.i, align 8, !tbaa !17
  %chain.i1026 = getelementptr inbounds %union.tree_node* %t.010.i, i64 0, i32 0, i32 0, i32 0
  %53 = load %union.tree_node** %chain.i1026, align 8, !tbaa !79
  %incdec.ptr.i = getelementptr inbounds i8** %pconstraints.addr.09.i, i64 1
  %tobool23.i = icmp eq %union.tree_node* %53, null
  br i1 %tobool23.i, label %for.cond27.preheader.i, label %for.body.i1027

for.body29.i:                                     ; preds = %for.cond27.preheader.i, %for.inc51.i
  %t.17.i = phi %union.tree_node* [ %59, %for.inc51.i ], [ %inputs, %for.cond27.preheader.i ]
  %pconstraints.addr.15.i = phi i8** [ %incdec.ptr54.i, %for.inc51.i ], [ %pconstraints.addr.0.lcssa.i, %for.cond27.preheader.i ]
  %purpose31.i = getelementptr inbounds %union.tree_node* %t.17.i, i64 0, i32 0, i32 1
  %54 = load i8** %purpose31.i, align 8
  %value33.i = getelementptr inbounds i8* %54, i64 32
  %55 = bitcast i8* %value33.i to %union.tree_node**
  %56 = load %union.tree_node** %55, align 8, !tbaa !72
  %pointer35.i = getelementptr inbounds %union.tree_node* %56, i64 0, i32 0, i32 4
  %57 = load %union.tree_node** %pointer35.i, align 8
  %58 = bitcast %union.tree_node* %57 to i8*
  %call36.i = call i8* @strchr(i8* %58, i32 91) #6
  %cmp37.i = icmp eq i8* %call36.i, null
  br i1 %cmp37.i, label %if.then39.i, label %if.else40.i

if.then39.i:                                      ; preds = %for.body29.i
  store i8* %58, i8** %pconstraints.addr.15.i, align 8, !tbaa !17
  br label %for.inc51.i

if.else40.i:                                      ; preds = %for.body29.i
  %call41.i = call noalias i8* @xstrdup(i8* %58) #6
  %call431.i = call i8* @strchr(i8* %call41.i, i32 91) #6
  %cmp442.i = icmp eq i8* %call431.i, null
  br i1 %cmp442.i, label %while.end48.i, label %while.body46.i

while.body46.i:                                   ; preds = %if.else40.i, %while.body46.i
  %call433.i = phi i8* [ %call43.i, %while.body46.i ], [ %call431.i, %if.else40.i ]
  %call47.i = call fastcc i8* @resolve_operand_name_1(i8* %call433.i, %union.tree_node* %outputs, %union.tree_node* %inputs) #6
  %call43.i = call i8* @strchr(i8* %call47.i, i32 91) #6
  %cmp44.i = icmp eq i8* %call43.i, null
  br i1 %cmp44.i, label %while.end48.i, label %while.body46.i

while.end48.i:                                    ; preds = %while.body46.i, %if.else40.i
  %call49.i = call i8* @ggc_alloc_string(i8* %call41.i, i32 -1) #6
  store i8* %call49.i, i8** %pconstraints.addr.15.i, align 8, !tbaa !17
  call void @free(i8* %call41.i) #6
  br label %for.inc51.i

for.inc51.i:                                      ; preds = %while.end48.i, %if.then39.i
  %chain53.i = getelementptr inbounds %union.tree_node* %t.17.i, i64 0, i32 0, i32 0, i32 0
  %59 = load %union.tree_node** %chain53.i, align 8, !tbaa !79
  %incdec.ptr54.i = getelementptr inbounds i8** %pconstraints.addr.15.i, i64 1
  %tobool28.i = icmp eq %union.tree_node* %59, null
  br i1 %tobool28.i, label %resolve_operand_names.exit, label %for.body29.i

resolve_operand_names.exit:                       ; preds = %for.inc51.i, %for.cond27.preheader.i
  %call18 = call %union.tree_node* @build_string(i32 5, i8* getelementptr inbounds ([6 x i8]* @.str6, i64 0, i64 0)) #6
  %call19 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call18, %union.tree_node* %clobbers) #6
  %call20 = call %union.tree_node* @build_string(i32 4, i8* getelementptr inbounds ([5 x i8]* @.str7, i64 0, i64 0)) #6
  %call21 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call20, %union.tree_node* %call19) #6
  %call22 = call %union.tree_node* @build_string(i32 7, i8* getelementptr inbounds ([8 x i8]* @.str8, i64 0, i64 0)) #6
  %call23 = call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %call22, %union.tree_node* %call21) #6
  %tobool1079 = icmp eq %union.tree_node* %call23, null
  br i1 %tobool1079, label %for.end, label %for.body

for.body:                                         ; preds = %resolve_operand_names.exit, %for.inc
  %nclobbers.01081 = phi i32 [ %nclobbers.1, %for.inc ], [ 0, %resolve_operand_names.exit ]
  %tail.01080 = phi %union.tree_node* [ %64, %for.inc ], [ %call23, %resolve_operand_names.exit ]
  %value = getelementptr inbounds %union.tree_node* %tail.01080, i64 0, i32 0, i32 2
  %60 = bitcast i32* %value to %union.tree_node**
  %61 = load %union.tree_node** %60, align 8, !tbaa !72
  %pointer = getelementptr inbounds %union.tree_node* %61, i64 0, i32 0, i32 4
  %62 = load %union.tree_node** %pointer, align 8
  %63 = bitcast %union.tree_node* %62 to i8*
  %call25 = call i32 @decode_reg_name(i8* %63) #6
  %cmp26 = icmp sgt i32 %call25, -1
  %cmp28 = icmp eq i32 %call25, -4
  %or.cond = or i1 %cmp26, %cmp28
  br i1 %or.cond, label %if.then30, label %if.else

if.then30:                                        ; preds = %for.body
  %inc = add nsw i32 %nclobbers.01081, 1
  br label %for.inc

if.else:                                          ; preds = %for.body
  %cmp31 = icmp eq i32 %call25, -2
  br i1 %cmp31, label %if.then33, label %for.inc

if.then33:                                        ; preds = %if.else
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([36 x i8]* @.str9, i64 0, i64 0), %union.tree_node* %62) #6
  br label %for.inc

for.inc:                                          ; preds = %if.then30, %if.then33, %if.else
  %nclobbers.1 = phi i32 [ %inc, %if.then30 ], [ %nclobbers.01081, %if.then33 ], [ %nclobbers.01081, %if.else ]
  %chain = getelementptr inbounds %union.tree_node* %tail.01080, i64 0, i32 0, i32 0, i32 0
  %64 = load %union.tree_node** %chain, align 8, !tbaa !79
  %tobool = icmp eq %union.tree_node* %64, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %resolve_operand_names.exit
  %nclobbers.0.lcssa = phi i32 [ 0, %resolve_operand_names.exit ], [ %nclobbers.1, %for.inc ]
  %65 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %65, i64 0, i32 1
  %66 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %66, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  %tobool371074 = icmp eq %union.tree_node* %outputs, null
  br i1 %tobool371074, label %for.end104, label %for.body38

for.body38:                                       ; preds = %for.end, %if.end95
  %indvars.iv1110 = phi i64 [ %indvars.iv.next1111, %if.end95 ], [ 0, %for.end ]
  %ninout.01077 = phi i32 [ %ninout.0.inc98, %if.end95 ], [ 0, %for.end ]
  %tail.11076 = phi %union.tree_node* [ %85, %if.end95 ], [ %outputs, %for.end ]
  %value40 = getelementptr inbounds %union.tree_node* %tail.11076, i64 0, i32 0, i32 2
  %67 = bitcast i32* %value40 to %union.tree_node**
  %68 = load %union.tree_node** %67, align 8, !tbaa !72
  %type42 = getelementptr inbounds %union.tree_node* %68, i64 0, i32 0, i32 0, i32 1
  %69 = load %union.tree_node** %type42, align 8, !tbaa !76
  %70 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !17
  %cmp43 = icmp eq %union.tree_node* %69, %70
  br i1 %cmp43, label %return, label %if.end46

if.end46:                                         ; preds = %for.body38
  %arrayidx = getelementptr inbounds i8** %4, i64 %indvars.iv1110
  %71 = load i8** %arrayidx, align 8, !tbaa !17
  store i8* %71, i8** %constraint, align 8, !tbaa !17
  %72 = trunc i64 %indvars.iv1110 to i32
  %call47 = call zeroext i1 @parse_output_constraint(i8** %constraint, i32 %72, i32 %call, i32 %call1, i8* %allows_mem, i8* %allows_reg, i8* %is_inout)
  br i1 %call47, label %if.end49, label %return

if.end49:                                         ; preds = %if.end46
  %73 = load i8* %allows_reg, align 1, !tbaa !82, !range !87
  %tobool50 = icmp eq i8 %73, 0
  br i1 %tobool50, label %land.lhs.true, label %if.end95

land.lhs.true:                                    ; preds = %if.end49
  %74 = load i8* %allows_mem, align 1, !tbaa !82, !range !87
  %75 = load i8* %is_inout, align 1
  %76 = or i8 %75, %74
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %lor.lhs.false56, label %if.then93

lor.lhs.false56:                                  ; preds = %land.lhs.true
  %code = getelementptr inbounds %union.tree_node* %68, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom581006 = zext i32 %bf.clear to i64
  %arrayidx59 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom581006
  %78 = load i8* %arrayidx59, align 1, !tbaa !68
  %cmp61 = icmp eq i8 %78, 100
  br i1 %cmp61, label %land.lhs.true63, label %if.end95

land.lhs.true63:                                  ; preds = %lor.lhs.false56
  %rtl = getelementptr inbounds %union.tree_node* %68, i64 0, i32 0, i32 17
  %79 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  %tobool64 = icmp eq %struct.rtx_def* %79, null
  br i1 %tobool64, label %cond.false, label %cond.end

cond.false:                                       ; preds = %land.lhs.true63
  call void @make_decl_rtl(%union.tree_node* %68, i8* null) #6
  %80 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  br label %cond.end

cond.end:                                         ; preds = %land.lhs.true63, %cond.false
  %81 = phi %struct.rtx_def* [ %80, %cond.false ], [ %79, %land.lhs.true63 ]
  %82 = getelementptr inbounds %struct.rtx_def* %81, i64 0, i32 0
  %bf.load69 = load i32* %82, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %cmp71 = icmp eq i32 %bf.clear70, 61
  br i1 %cmp71, label %land.lhs.true73, label %if.end95

land.lhs.true73:                                  ; preds = %cond.end
  %tobool76 = icmp eq %struct.rtx_def* %81, null
  br i1 %tobool76, label %cond.false80, label %cond.end83

cond.false80:                                     ; preds = %land.lhs.true73
  call void @make_decl_rtl(%union.tree_node* %68, i8* null) #6
  %83 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  %.phi.trans.insert1115 = getelementptr inbounds %struct.rtx_def* %83, i64 0, i32 0
  %bf.load85.pre = load i32* %.phi.trans.insert1115, align 8
  br label %cond.end83

cond.end83:                                       ; preds = %land.lhs.true73, %cond.false80
  %bf.load85 = phi i32 [ %bf.load85.pre, %cond.false80 ], [ %bf.load69, %land.lhs.true73 ]
  %bf.lshr = lshr i32 %bf.load85, 16
  %bf.clear86 = and i32 %bf.lshr, 255
  %type87 = bitcast %union.tree_node* %69 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type87, i64 0, i32 6
  %bf.load88 = load i32* %mode, align 4
  %bf.lshr89 = lshr i32 %bf.load88, 9
  %bf.clear90 = and i32 %bf.lshr89, 127
  %cmp91 = icmp eq i32 %bf.clear86, %bf.clear90
  br i1 %cmp91, label %if.end95, label %if.then93

if.then93:                                        ; preds = %cond.end83, %land.lhs.true
  %call94 = call i32 @mark_addressable(%union.tree_node* %68) #6
  br label %if.end95

if.end95:                                         ; preds = %cond.end83, %if.end49, %if.then93, %cond.end, %lor.lhs.false56
  %84 = load i8* %is_inout, align 1, !tbaa !82, !range !87
  %inc98 = zext i8 %84 to i32
  %ninout.0.inc98 = add nsw i32 %inc98, %ninout.01077
  %chain102 = getelementptr inbounds %union.tree_node* %tail.11076, i64 0, i32 0, i32 0, i32 0
  %85 = load %union.tree_node** %chain102, align 8, !tbaa !79
  %indvars.iv.next1111 = add nuw nsw i64 %indvars.iv1110, 1
  %tobool37 = icmp eq %union.tree_node* %85, null
  br i1 %tobool37, label %for.end104, label %for.body38

for.end104:                                       ; preds = %if.end95, %for.end
  %ninout.0.lcssa = phi i32 [ 0, %for.end ], [ %ninout.0.inc98, %if.end95 ]
  %add105 = add i32 %ninout.0.lcssa, %call
  %add106 = add nsw i32 %add105, %call1
  %cmp107 = icmp sgt i32 %add106, 30
  br i1 %cmp107, label %if.then109, label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %for.end104
  br i1 %tobool2095.i, label %for.cond145.preheader, label %for.body113

if.then109:                                       ; preds = %for.end104
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([31 x i8]* @.str10, i64 0, i64 0), i32 30) #6
  br label %return

for.cond145.preheader:                            ; preds = %for.inc140, %for.cond111.preheader
  br i1 %tobool371074, label %for.end324, label %for.body147

for.body113:                                      ; preds = %for.cond111.preheader, %for.inc140
  %indvars.iv1107 = phi i64 [ %indvars.iv.next1108, %for.inc140 ], [ 0, %for.cond111.preheader ]
  %tail.21073 = phi %union.tree_node* [ %96, %for.inc140 ], [ %inputs, %for.cond111.preheader ]
  %value118 = getelementptr inbounds %union.tree_node* %tail.21073, i64 0, i32 0, i32 2
  %86 = bitcast i32* %value118 to %union.tree_node**
  %87 = load %union.tree_node** %86, align 8, !tbaa !72
  %type120 = getelementptr inbounds %union.tree_node* %87, i64 0, i32 0, i32 0, i32 1
  %88 = load %union.tree_node** %type120, align 8, !tbaa !76
  %89 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !17
  %cmp121 = icmp eq %union.tree_node* %88, %89
  br i1 %cmp121, label %return, label %if.end124

if.end124:                                        ; preds = %for.body113
  %90 = add nsw i64 %indvars.iv1107, %conv
  %arrayidx127 = getelementptr inbounds i8** %4, i64 %90
  %91 = load i8** %arrayidx127, align 8, !tbaa !17
  store i8* %91, i8** %constraint116, align 8, !tbaa !17
  %92 = trunc i64 %indvars.iv1107 to i32
  %call128 = call fastcc zeroext i1 @parse_input_constraint(i8** %constraint116, i32 %92, i32 %add105, i32 %call1, i32 %ninout.0.lcssa, i8** %4, i8* %allows_mem115, i8* %allows_reg114)
  br i1 %call128, label %if.end130, label %return

if.end130:                                        ; preds = %if.end124
  %93 = load i8* %allows_reg114, align 1, !tbaa !82, !range !87
  %tobool131 = icmp ne i8 %93, 0
  %94 = load i8* %allows_mem115, align 1
  %tobool133 = icmp eq i8 %94, 0
  %or.cond1008 = or i1 %tobool131, %tobool133
  br i1 %or.cond1008, label %for.inc140, label %if.then135

if.then135:                                       ; preds = %if.end130
  %95 = load %union.tree_node** %86, align 8, !tbaa !72
  %call138 = call i32 @mark_addressable(%union.tree_node* %95) #6
  br label %for.inc140

for.inc140:                                       ; preds = %if.end130, %if.then135
  %indvars.iv.next1108 = add nuw nsw i64 %indvars.iv1107, 1
  %chain143 = getelementptr inbounds %union.tree_node* %tail.21073, i64 0, i32 0, i32 0, i32 0
  %96 = load %union.tree_node** %chain143, align 8, !tbaa !79
  %tobool112 = icmp eq %union.tree_node* %96, null
  br i1 %tobool112, label %for.cond145.preheader, label %for.body113

for.body147:                                      ; preds = %for.cond145.preheader, %for.inc320
  %indvars.iv1105 = phi i64 [ %indvars.iv.next1106, %for.inc320 ], [ 0, %for.cond145.preheader ]
  %ninout.21067 = phi i32 [ %ninout.3, %for.inc320 ], [ 0, %for.cond145.preheader ]
  %tail.31066 = phi %union.tree_node* [ %118, %for.inc320 ], [ %outputs, %for.cond145.preheader ]
  %value150 = getelementptr inbounds %union.tree_node* %tail.31066, i64 0, i32 0, i32 2
  %97 = bitcast i32* %value150 to %union.tree_node**
  %98 = load %union.tree_node** %97, align 8, !tbaa !72
  %type153 = getelementptr inbounds %union.tree_node* %98, i64 0, i32 0, i32 0, i32 1
  %99 = load %union.tree_node** %type153, align 8, !tbaa !76
  %arrayidx158 = getelementptr inbounds i8** %4, i64 %indvars.iv1105
  %100 = trunc i64 %indvars.iv1105 to i32
  %call159 = call zeroext i1 @parse_output_constraint(i8** %arrayidx158, i32 %100, i32 %add105, i32 %call1, i8* %allows_mem156, i8* %allows_reg155, i8* %is_inout154)
  br i1 %call159, label %if.end161, label %if.then160

if.then160:                                       ; preds = %for.body147
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 1726, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.expand_asm_operands, i64 0, i64 0)) #7
  unreachable

if.end161:                                        ; preds = %for.body147
  store i32 0, i32* @generating_concat_p, align 4, !tbaa !58
  %arrayidx163 = getelementptr inbounds %struct.rtx_def** %2, i64 %indvars.iv1105
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx163, align 8, !tbaa !17
  %code165 = getelementptr inbounds %union.tree_node* %98, i64 0, i32 0, i32 0, i32 2
  %bf.load166 = load i32* %code165, align 8
  %bf.clear167 = and i32 %bf.load166, 255
  %cmp168 = icmp ne i32 %bf.clear167, 41
  %101 = load i8* %allows_mem156, align 1
  %tobool171 = icmp eq i8 %101, 0
  %or.cond1009 = or i1 %cmp168, %tobool171
  br i1 %or.cond1009, label %lor.lhs.false173, label %if.then245

lor.lhs.false173:                                 ; preds = %if.end161
  %idxprom1781005 = zext i32 %bf.clear167 to i64
  %arrayidx179 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom1781005
  %102 = load i8* %arrayidx179, align 1, !tbaa !68
  %cmp181 = icmp eq i8 %102, 100
  br i1 %cmp181, label %land.lhs.true183, label %lor.lhs.false240

land.lhs.true183:                                 ; preds = %lor.lhs.false173
  %rtl188 = getelementptr inbounds %union.tree_node* %98, i64 0, i32 0, i32 17
  %103 = load %struct.rtx_def** %rtl188, align 8, !tbaa !59
  br i1 %tobool171, label %lor.lhs.false186, label %land.lhs.true202

lor.lhs.false186:                                 ; preds = %land.lhs.true183
  %tobool189 = icmp eq %struct.rtx_def* %103, null
  br i1 %tobool189, label %cond.false193, label %cond.end196

cond.false193:                                    ; preds = %lor.lhs.false186
  call void @make_decl_rtl(%union.tree_node* %98, i8* null) #6
  %104 = load %struct.rtx_def** %rtl188, align 8, !tbaa !59
  br label %cond.end196

cond.end196:                                      ; preds = %lor.lhs.false186, %cond.false193
  %cond197 = phi %struct.rtx_def* [ %104, %cond.false193 ], [ %103, %lor.lhs.false186 ]
  %105 = getelementptr inbounds %struct.rtx_def* %cond197, i64 0, i32 0
  %bf.load198 = load i32* %105, align 8
  %bf.clear199 = and i32 %bf.load198, 65535
  %cmp200 = icmp eq i32 %bf.clear199, 61
  br i1 %cmp200, label %land.lhs.true202, label %lor.lhs.false240

land.lhs.true202:                                 ; preds = %land.lhs.true183, %cond.end196
  %106 = phi %struct.rtx_def* [ %cond197, %cond.end196 ], [ %103, %land.lhs.true183 ]
  %rtl204 = getelementptr inbounds %union.tree_node* %98, i64 0, i32 0, i32 17
  %tobool205 = icmp eq %struct.rtx_def* %106, null
  br i1 %tobool205, label %cond.false209, label %cond.end212

cond.false209:                                    ; preds = %land.lhs.true202
  call void @make_decl_rtl(%union.tree_node* %98, i8* null) #6
  %107 = load %struct.rtx_def** %rtl204, align 8, !tbaa !59
  br label %cond.end212

cond.end212:                                      ; preds = %land.lhs.true202, %cond.false209
  %108 = phi %struct.rtx_def* [ %107, %cond.false209 ], [ %106, %land.lhs.true202 ]
  %109 = getelementptr inbounds %struct.rtx_def* %108, i64 0, i32 0
  %bf.load214 = load i32* %109, align 8
  %bf.clear215 = and i32 %bf.load214, 65535
  %cmp216 = icmp eq i32 %bf.clear215, 61
  br i1 %cmp216, label %land.lhs.true218, label %if.then245

land.lhs.true218:                                 ; preds = %cond.end212
  %tobool221 = icmp eq %struct.rtx_def* %108, null
  br i1 %tobool221, label %cond.false225, label %cond.end228

cond.false225:                                    ; preds = %land.lhs.true218
  call void @make_decl_rtl(%union.tree_node* %98, i8* null) #6
  %110 = load %struct.rtx_def** %rtl204, align 8, !tbaa !59
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %110, i64 0, i32 0
  %bf.load230.pre = load i32* %.phi.trans.insert, align 8
  br label %cond.end228

cond.end228:                                      ; preds = %land.lhs.true218, %cond.false225
  %bf.load230 = phi i32 [ %bf.load230.pre, %cond.false225 ], [ %bf.load214, %land.lhs.true218 ]
  %bf.lshr231 = lshr i32 %bf.load230, 16
  %bf.clear232 = and i32 %bf.lshr231, 255
  %type233 = bitcast %union.tree_node* %99 to %struct.tree_type*
  %mode234 = getelementptr inbounds %struct.tree_type* %type233, i64 0, i32 6
  %bf.load235 = load i32* %mode234, align 4
  %bf.lshr236 = lshr i32 %bf.load235, 9
  %bf.clear237 = and i32 %bf.lshr236, 127
  %111 = load i8* %allows_reg155, align 1
  %notlhs = icmp ne i32 %bf.clear232, %bf.clear237
  %notrhs = icmp ne i8 %111, 0
  %or.cond1010.not = and i1 %notrhs, %notlhs
  %112 = load i8* %is_inout154, align 1
  %tobool243 = icmp eq i8 %112, 0
  %or.cond1012 = and i1 %or.cond1010.not, %tobool243
  br i1 %or.cond1012, label %if.else297, label %if.then245

lor.lhs.false240:                                 ; preds = %cond.end196, %lor.lhs.false173
  %.old = load i8* %allows_reg155, align 1, !tbaa !82, !range !87
  %tobool241.old = icmp ne i8 %.old, 0
  %.old1011 = load i8* %is_inout154, align 1
  %tobool243.old = icmp eq i8 %.old1011, 0
  %or.cond1014 = and i1 %tobool241.old, %tobool243.old
  br i1 %or.cond1014, label %if.else297, label %if.then245

if.then245:                                       ; preds = %lor.lhs.false240, %cond.end228, %if.end161, %cond.end212
  %call246 = call %struct.rtx_def* @expand_expr(%union.tree_node* %98, %struct.rtx_def* null, i32 0, i32 4) #6
  %arrayidx248 = getelementptr inbounds %struct.rtx_def** %0, i64 %indvars.iv1105
  store %struct.rtx_def* %call246, %struct.rtx_def** %arrayidx248, align 8, !tbaa !17
  %113 = load i8* %allows_reg155, align 1, !tbaa !82, !range !87
  %tobool249 = icmp eq i8 %113, 0
  br i1 %tobool249, label %land.lhs.true250, label %if.end258

land.lhs.true250:                                 ; preds = %if.then245
  %114 = getelementptr inbounds %struct.rtx_def* %call246, i64 0, i32 0
  %bf.load253 = load i32* %114, align 8
  %bf.clear254 = and i32 %bf.load253, 65535
  %cmp255 = icmp eq i32 %bf.clear254, 66
  br i1 %cmp255, label %if.end258, label %if.then257

if.then257:                                       ; preds = %land.lhs.true250
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([42 x i8]* @.str11, i64 0, i64 0), i32 %100) #6
  br label %if.end258

if.end258:                                        ; preds = %land.lhs.true250, %if.then245, %if.then257
  %115 = getelementptr inbounds %struct.rtx_def* %call246, i64 0, i32 0
  %bf.load263 = load i32* %115, align 8
  %bf.clear264 = and i32 %bf.load263, 65535
  %cmp265 = icmp eq i32 %bf.clear264, 66
  %or.cond1119 = and i1 %tobool171, %cmp265
  %bf.clear271 = and i32 %bf.load263, 65535
  %cmp272 = icmp eq i32 %bf.clear271, 65
  %or.cond1121 = or i1 %or.cond1119, %cmp272
  br i1 %or.cond1121, label %if.then274, label %if.end306

if.then274:                                       ; preds = %if.end258
  %call277 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %call246, i32 1) #6
  store %struct.rtx_def* %call277, %struct.rtx_def** %arrayidx163, align 8, !tbaa !17
  %116 = getelementptr inbounds %struct.rtx_def* %call246, i64 0, i32 0
  %bf.load282 = load i32* %116, align 8
  %bf.lshr283 = lshr i32 %bf.load282, 16
  %bf.clear284 = and i32 %bf.lshr283, 255
  %call285 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear284) #6
  store %struct.rtx_def* %call285, %struct.rtx_def** %arrayidx248, align 8, !tbaa !17
  %117 = load i8* %is_inout154, align 1, !tbaa !82, !range !87
  %tobool288 = icmp eq i8 %117, 0
  br i1 %tobool288, label %if.end306.thread, label %if.then289

if.end306.thread:                                 ; preds = %if.then274
  store i32 %5, i32* @generating_concat_p, align 4, !tbaa !58
  br label %for.inc320

if.then289:                                       ; preds = %if.then274
  %call294 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call285, %struct.rtx_def* %call277) #6
  br label %if.end306

if.else297:                                       ; preds = %lor.lhs.false240, %cond.end228
  %call298 = call %struct.rtx_def* @assign_temp(%union.tree_node* %99, i32 0, i32 0, i32 1) #6
  %arrayidx300 = getelementptr inbounds %struct.rtx_def** %0, i64 %indvars.iv1105
  store %struct.rtx_def* %call298, %struct.rtx_def** %arrayidx300, align 8, !tbaa !17
  %call303 = call %union.tree_node* @make_tree(%union.tree_node* %99, %struct.rtx_def* %call298) #6
  store %union.tree_node* %call303, %union.tree_node** %97, align 8, !tbaa !72
  br label %if.end306

if.end306:                                        ; preds = %if.end258, %if.then289, %if.else297
  %.pr = load i8* %is_inout154, align 1, !tbaa !82
  store i32 %5, i32* @generating_concat_p, align 4, !tbaa !58
  %tobool307 = icmp eq i8 %.pr, 0
  br i1 %tobool307, label %for.inc320, label %if.then308

if.then308:                                       ; preds = %if.end306
  %type309 = bitcast %union.tree_node* %99 to %struct.tree_type*
  %mode310 = getelementptr inbounds %struct.tree_type* %type309, i64 0, i32 6
  %bf.load311 = load i32* %mode310, align 4
  %bf.lshr312 = lshr i32 %bf.load311, 9
  %bf.clear313 = and i32 %bf.lshr312, 127
  %idxprom314 = sext i32 %ninout.21067 to i64
  %arrayidx315 = getelementptr inbounds i32* %3, i64 %idxprom314
  store i32 %bf.clear313, i32* %arrayidx315, align 4, !tbaa !68
  %inc316 = add nsw i32 %ninout.21067, 1
  %arrayidx318 = getelementptr inbounds i32* %1, i64 %idxprom314
  store i32 %100, i32* %arrayidx318, align 4, !tbaa !58
  br label %for.inc320

for.inc320:                                       ; preds = %if.end306.thread, %if.end306, %if.then308
  %ninout.3 = phi i32 [ %inc316, %if.then308 ], [ %ninout.21067, %if.end306 ], [ %ninout.21067, %if.end306.thread ]
  %chain322 = getelementptr inbounds %union.tree_node* %tail.31066, i64 0, i32 0, i32 0, i32 0
  %118 = load %union.tree_node** %chain322, align 8, !tbaa !79
  %indvars.iv.next1106 = add nuw nsw i64 %indvars.iv1105, 1
  %tobool146 = icmp eq %union.tree_node* %118, null
  br i1 %tobool146, label %for.end324, label %for.body147

for.end324:                                       ; preds = %for.inc320, %for.cond145.preheader
  %ninout.2.lcssa = phi i32 [ 0, %for.cond145.preheader ], [ %ninout.3, %for.inc320 ]
  %call325 = call %struct.rtvec_def* @rtvec_alloc(i32 %add105) #6
  %call326 = call %struct.rtvec_def* @rtvec_alloc(i32 %add105) #6
  br i1 %cmp, label %cond.end335, label %cond.false330

cond.false330:                                    ; preds = %for.end324
  %119 = load %struct.rtx_def** %0, align 8, !tbaa !17
  %120 = getelementptr inbounds %struct.rtx_def* %119, i64 0, i32 0
  %bf.load332 = load i32* %120, align 8
  %bf.lshr333 = lshr i32 %bf.load332, 16
  %bf.clear334 = and i32 %bf.lshr333, 255
  br label %cond.end335

cond.end335:                                      ; preds = %for.end324, %cond.false330
  %cond336 = phi i32 [ %bf.clear334, %cond.false330 ], [ 0, %for.end324 ]
  %pointer338 = getelementptr inbounds %union.tree_node* %call22.i, i64 0, i32 0, i32 4
  %121 = load %union.tree_node** %pointer338, align 8
  %122 = bitcast %union.tree_node* %121 to i8*
  %call339 = call %struct.rtx_def* @gen_rtx_fmt_ssiEEsi(i32 41, i32 %cond336, i8* %122, i8* getelementptr inbounds ([0 x i8]* @empty_string, i64 0, i64 0), i32 0, %struct.rtvec_def* %call325, %struct.rtvec_def* %call326, i8* %filename, i32 %line) #6
  %123 = getelementptr inbounds %struct.rtx_def* %call339, i64 0, i32 0
  %bf.load340 = load i32* %123, align 8
  %vol.op = shl i32 %vol, 27
  %vol.op.op = and i32 %vol.op, 134217728
  %bf.shl = select i1 %cmp, i32 134217728, i32 %vol.op.op
  %bf.clear341 = and i32 %bf.load340, -134217729
  %bf.set = or i32 %bf.clear341, %bf.shl
  store i32 %bf.set, i32* %123, align 8
  br i1 %tobool2095.i, label %for.end532, label %for.body344.lr.ph

for.body344.lr.ph:                                ; preds = %cond.end335
  %arrayidx511 = getelementptr inbounds %struct.rtx_def* %call339, i64 0, i32 1, i64 3
  %rtvec = bitcast %union.rtunion_def* %arrayidx511 to %struct.rtvec_def**
  %arrayidx524 = getelementptr inbounds %struct.rtx_def* %call339, i64 0, i32 1, i64 4
  %rtvec525 = bitcast %union.rtunion_def* %arrayidx524 to %struct.rtvec_def**
  br label %for.body344

for.body344:                                      ; preds = %for.body344.lr.ph, %if.end509
  %indvars.iv1102 = phi i64 [ 0, %for.body344.lr.ph ], [ %indvars.iv.next1103, %if.end509 ]
  %tail.41060 = phi %union.tree_node* [ %inputs, %for.body344.lr.ph ], [ %143, %if.end509 ]
  %124 = add nsw i64 %indvars.iv1102, %conv
  %arrayidx352 = getelementptr inbounds i8** %4, i64 %124
  %125 = load i8** %arrayidx352, align 8, !tbaa !17
  store i8* %125, i8** %constraint347, align 8, !tbaa !17
  %126 = trunc i64 %indvars.iv1102 to i32
  %call353 = call fastcc zeroext i1 @parse_input_constraint(i8** %constraint347, i32 %126, i32 %add105, i32 %call1, i32 %ninout.2.lcssa, i8** %4, i8* %allows_mem346, i8* %allows_reg345)
  br i1 %call353, label %if.end355, label %if.then354

if.then354:                                       ; preds = %for.body344
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 1800, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.expand_asm_operands, i64 0, i64 0)) #7
  unreachable

if.end355:                                        ; preds = %for.body344
  store i32 0, i32* @generating_concat_p, align 4, !tbaa !58
  %value357 = getelementptr inbounds %union.tree_node* %tail.41060, i64 0, i32 0, i32 2
  %127 = bitcast i32* %value357 to %union.tree_node**
  %128 = load %union.tree_node** %127, align 8, !tbaa !72
  %type359 = getelementptr inbounds %union.tree_node* %128, i64 0, i32 0, i32 0, i32 1
  %129 = load %union.tree_node** %type359, align 8, !tbaa !76
  %call360 = call %struct.rtx_def* @expand_expr(%union.tree_node* %128, %struct.rtx_def* null, i32 0, i32 0) #6
  %130 = getelementptr inbounds %struct.rtx_def* %call360, i64 0, i32 0
  %bf.load361 = load i32* %130, align 8
  %bf.clear362 = and i32 %bf.load361, 65535
  %cmp363 = icmp eq i32 %bf.clear362, 65
  br i1 %cmp363, label %if.then365, label %if.end370

if.then365:                                       ; preds = %if.end355
  %bf.lshr367 = lshr i32 %bf.load361, 16
  %bf.clear368 = and i32 %bf.lshr367, 255
  %call369 = call %struct.rtx_def* @force_reg(i32 %bf.clear368, %struct.rtx_def* %call360) #6
  br label %if.end370

if.end370:                                        ; preds = %if.then365, %if.end355
  %op.0 = phi %struct.rtx_def* [ %call369, %if.then365 ], [ %call360, %if.end355 ]
  %131 = load i8** %constraint347, align 8, !tbaa !17
  %call371 = call i32 @asm_operand_ok(%struct.rtx_def* %op.0, i8* %131) #6
  %cmp372 = icmp slt i32 %call371, 1
  br i1 %cmp372, label %if.then374, label %if.end509

if.then374:                                       ; preds = %if.end370
  %132 = load i8* %allows_reg345, align 1, !tbaa !82, !range !87
  %tobool375 = icmp eq i8 %132, 0
  br i1 %tobool375, label %if.else383, label %if.then376

if.then376:                                       ; preds = %if.then374
  %type377 = bitcast %union.tree_node* %129 to %struct.tree_type*
  %mode378 = getelementptr inbounds %struct.tree_type* %type377, i64 0, i32 6
  %bf.load379 = load i32* %mode378, align 4
  %bf.lshr380 = lshr i32 %bf.load379, 9
  %bf.clear381 = and i32 %bf.lshr380, 127
  %call382 = call %struct.rtx_def* @force_reg(i32 %bf.clear381, %struct.rtx_def* %op.0) #6
  br label %if.end509

if.else383:                                       ; preds = %if.then374
  %133 = load i8* %allows_mem346, align 1, !tbaa !82, !range !87
  %tobool384 = icmp eq i8 %133, 0
  br i1 %tobool384, label %if.then385, label %if.else387

if.then385:                                       ; preds = %if.else383
  %134 = trunc i64 %124 to i32
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([50 x i8]* @.str12, i64 0, i64 0), i32 %134) #6
  br label %if.end509

if.else387:                                       ; preds = %if.else383
  %135 = getelementptr inbounds %struct.rtx_def* %op.0, i64 0, i32 0
  %bf.load388 = load i32* %135, align 8
  %bf.clear389 = and i32 %bf.load388, 65535
  switch i32 %bf.clear389, label %if.else497 [
    i32 67, label %if.then427
    i32 68, label %if.then427
    i32 54, label %if.then427
    i32 55, label %if.then427
    i32 58, label %if.then427
    i32 134, label %if.then427
    i32 56, label %if.then427
    i32 140, label %if.then427
    i32 61, label %if.then454
    i32 63, label %if.then454
    i32 70, label %if.then454
    i32 65, label %if.then454
    i32 66, label %land.lhs.true491
  ]

if.then427:                                       ; preds = %if.else387, %if.else387, %if.else387, %if.else387, %if.else387, %if.else387, %if.else387, %if.else387
  %type428 = bitcast %union.tree_node* %129 to %struct.tree_type*
  %mode429 = getelementptr inbounds %struct.tree_type* %type428, i64 0, i32 6
  %bf.load430 = load i32* %mode429, align 4
  %bf.lshr431 = lshr i32 %bf.load430, 9
  %bf.clear432 = and i32 %bf.lshr431, 127
  %call433 = call %struct.rtx_def* @force_const_mem(i32 %bf.clear432, %struct.rtx_def* %op.0) #6
  br label %if.end509

if.then454:                                       ; preds = %if.else387, %if.else387, %if.else387, %if.else387
  %readonly_flag = getelementptr inbounds %union.tree_node* %129, i64 0, i32 0, i32 0, i32 2
  %bf.load456 = load i32* %readonly_flag, align 8
  %136 = lshr i32 %bf.load456, 10
  %mul464 = and i32 %136, 2
  %type465 = bitcast %union.tree_node* %129 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type465, i64 0, i32 6
  %bf.load466 = load i32* %restrict_flag, align 4
  %137 = lshr i32 %bf.load466, 19
  %mul469 = and i32 %137, 4
  %bf.clear474 = and i32 %bf.load456, 255
  %cmp475 = icmp eq i32 %bf.clear474, 20
  br i1 %cmp475, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then454
  %type478 = getelementptr inbounds %union.tree_node* %129, i64 0, i32 0, i32 0, i32 1
  %138 = load %union.tree_node** %type478, align 8, !tbaa !76
  %tobool479 = icmp ne %union.tree_node* %138, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then454
  %139 = phi i1 [ false, %if.then454 ], [ %tobool479, %land.rhs ]
  %land.ext = zext i1 %139 to i32
  %mul480 = shl nuw nsw i32 %land.ext, 3
  %or = or i32 %mul464, %mul469
  %or470 = or i32 %or, %mul480
  %or482 = or i32 %or470, 1
  %call483 = call %union.tree_node* @build_qualified_type(%union.tree_node* %129, i32 %or482) #6
  %call484 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call483, i32 1, i32 1, i32 1) #6
  %call485 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call484, %struct.rtx_def* %op.0) #6
  br label %if.end509

land.lhs.true491:                                 ; preds = %if.else387
  %bf.clear494 = and i32 %bf.load388, 134217728
  %tobool495 = icmp eq i32 %bf.clear494, 0
  br i1 %tobool495, label %if.else497, label %if.end509

if.else497:                                       ; preds = %if.else387, %land.lhs.true491
  %call498 = call i32 @queued_subexp_p(%struct.rtx_def* %op.0) #6
  %tobool499 = icmp eq i32 %call498, 0
  br i1 %tobool499, label %if.else501, label %if.end509

if.else501:                                       ; preds = %if.else497
  %140 = trunc i64 %124 to i32
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([50 x i8]* @.str12, i64 0, i64 0), i32 %140) #6
  br label %if.end509

if.end509:                                        ; preds = %land.lhs.true491, %if.else497, %if.then376, %if.then427, %if.else501, %land.end, %if.then385, %if.end370
  %op.1 = phi %struct.rtx_def* [ %call382, %if.then376 ], [ %call433, %if.then427 ], [ %call484, %land.end ], [ %op.0, %land.lhs.true491 ], [ %op.0, %if.else497 ], [ %op.0, %if.else501 ], [ %op.0, %if.then385 ], [ %op.0, %if.end370 ]
  store i32 %5, i32* @generating_concat_p, align 4, !tbaa !58
  %141 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !17
  %arrayidx512 = getelementptr inbounds %struct.rtvec_def* %141, i64 0, i32 1, i64 %indvars.iv1102
  store %struct.rtx_def* %op.1, %struct.rtx_def** %arrayidx512, align 8, !tbaa !17
  %type513 = bitcast %union.tree_node* %129 to %struct.tree_type*
  %mode514 = getelementptr inbounds %struct.tree_type* %type513, i64 0, i32 6
  %bf.load515 = load i32* %mode514, align 4
  %bf.lshr516 = lshr i32 %bf.load515, 9
  %bf.clear517 = and i32 %bf.lshr516, 127
  %call521 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 40, i32 %bf.clear517, i8* %125) #6
  %142 = load %struct.rtvec_def** %rtvec525, align 8, !tbaa !17
  %arrayidx527 = getelementptr inbounds %struct.rtvec_def* %142, i64 0, i32 1, i64 %indvars.iv1102
  store %struct.rtx_def* %call521, %struct.rtx_def** %arrayidx527, align 8, !tbaa !17
  %chain530 = getelementptr inbounds %union.tree_node* %tail.41060, i64 0, i32 0, i32 0, i32 0
  %143 = load %union.tree_node** %chain530, align 8, !tbaa !79
  %indvars.iv.next1103 = add nuw nsw i64 %indvars.iv1102, 1
  %tobool343 = icmp eq %union.tree_node* %143, null
  br i1 %tobool343, label %for.end532, label %for.body344

for.end532:                                       ; preds = %if.end509, %cond.end335
  store i32 0, i32* @generating_concat_p, align 4, !tbaa !58
  %sub = sub i32 %add105, %ninout.2.lcssa
  %cmp5341055 = icmp sgt i32 %sub, 0
  br i1 %cmp5341055, label %for.body536.lr.ph, label %for.cond553.preheader

for.body536.lr.ph:                                ; preds = %for.end532
  %arrayidx539 = getelementptr inbounds %struct.rtx_def* %call339, i64 0, i32 1, i64 3
  %rtvec540 = bitcast %union.rtunion_def* %arrayidx539 to %struct.rtvec_def**
  br label %for.body536

for.cond553.preheader:                            ; preds = %for.body536, %for.end532
  %cmp5541053 = icmp sgt i32 %call1, 0
  br i1 %cmp5541053, label %for.body556, label %for.cond565.preheader

for.body536:                                      ; preds = %for.body536, %for.body536.lr.ph
  %indvars.iv1098 = phi i64 [ 0, %for.body536.lr.ph ], [ %indvars.iv.next1099, %for.body536 ]
  %144 = load %struct.rtvec_def** %rtvec540, align 8, !tbaa !17
  %arrayidx542 = getelementptr inbounds %struct.rtvec_def* %144, i64 0, i32 1, i64 %indvars.iv1098
  %145 = load %struct.rtx_def** %arrayidx542, align 8, !tbaa !17
  %call543 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %145, i32 0) #6
  %146 = load %struct.rtvec_def** %rtvec540, align 8, !tbaa !17
  %arrayidx549 = getelementptr inbounds %struct.rtvec_def* %146, i64 0, i32 1, i64 %indvars.iv1098
  store %struct.rtx_def* %call543, %struct.rtx_def** %arrayidx549, align 8, !tbaa !17
  %indvars.iv.next1099 = add nuw nsw i64 %indvars.iv1098, 1
  %lftr.wideiv1100 = trunc i64 %indvars.iv.next1099 to i32
  %exitcond1101 = icmp eq i32 %lftr.wideiv1100, %sub
  br i1 %exitcond1101, label %for.cond553.preheader, label %for.body536

for.cond565.preheader:                            ; preds = %for.body556, %for.cond553.preheader
  %cmp5661051 = icmp sgt i32 %ninout.2.lcssa, 0
  br i1 %cmp5661051, label %for.body568.lr.ph, label %for.end597

for.body568.lr.ph:                                ; preds = %for.cond565.preheader
  %arrayidx577 = getelementptr inbounds %struct.rtx_def* %call339, i64 0, i32 1, i64 3
  %rtvec578 = bitcast %union.rtunion_def* %arrayidx577 to %struct.rtvec_def**
  %arraydecay = getelementptr inbounds [16 x i8]* %buffer, i64 0, i64 0
  %arrayidx591 = getelementptr inbounds %struct.rtx_def* %call339, i64 0, i32 1, i64 4
  %rtvec592 = bitcast %union.rtunion_def* %arrayidx591 to %struct.rtvec_def**
  %147 = sext i32 %sub to i64
  br label %for.body568

for.body556:                                      ; preds = %for.cond553.preheader, %for.body556
  %indvars.iv1094 = phi i64 [ %indvars.iv.next1095, %for.body556 ], [ 0, %for.cond553.preheader ]
  %arrayidx558 = getelementptr inbounds %struct.rtx_def** %0, i64 %indvars.iv1094
  %148 = load %struct.rtx_def** %arrayidx558, align 8, !tbaa !17
  %call559 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %148, i32 1) #6
  store %struct.rtx_def* %call559, %struct.rtx_def** %arrayidx558, align 8, !tbaa !17
  %indvars.iv.next1095 = add nuw nsw i64 %indvars.iv1094, 1
  %lftr.wideiv1096 = trunc i64 %indvars.iv.next1095 to i32
  %exitcond1097 = icmp eq i32 %lftr.wideiv1096, %call1
  br i1 %exitcond1097, label %for.cond565.preheader, label %for.body556

for.body568:                                      ; preds = %for.body568, %for.body568.lr.ph
  %indvars.iv1089 = phi i64 [ 0, %for.body568.lr.ph ], [ %indvars.iv.next1090, %for.body568 ]
  %arrayidx570 = getelementptr inbounds i32* %1, i64 %indvars.iv1089
  %149 = load i32* %arrayidx570, align 4, !tbaa !58
  %idxprom571 = sext i32 %149 to i64
  %arrayidx572 = getelementptr inbounds %struct.rtx_def** %0, i64 %idxprom571
  %150 = load %struct.rtx_def** %arrayidx572, align 8, !tbaa !17
  %151 = add nsw i64 %indvars.iv1089, %147
  %152 = load %struct.rtvec_def** %rtvec578, align 8, !tbaa !17
  %arrayidx580 = getelementptr inbounds %struct.rtvec_def* %152, i64 0, i32 1, i64 %151
  store %struct.rtx_def* %150, %struct.rtx_def** %arrayidx580, align 8, !tbaa !17
  %call581 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([3 x i8]* @.str13, i64 0, i64 0), i32 %149) #6
  %arrayidx583 = getelementptr inbounds i32* %3, i64 %indvars.iv1089
  %153 = load i32* %arrayidx583, align 4, !tbaa !68
  %call585 = call i8* @ggc_alloc_string(i8* %arraydecay, i32 -1) #6
  %call586 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 40, i32 %153, i8* %call585) #6
  %154 = load %struct.rtvec_def** %rtvec592, align 8, !tbaa !17
  %arrayidx594 = getelementptr inbounds %struct.rtvec_def* %154, i64 0, i32 1, i64 %151
  store %struct.rtx_def* %call586, %struct.rtx_def** %arrayidx594, align 8, !tbaa !17
  %indvars.iv.next1090 = add nuw nsw i64 %indvars.iv1089, 1
  %lftr.wideiv1092 = trunc i64 %indvars.iv.next1090 to i32
  %exitcond1093 = icmp eq i32 %lftr.wideiv1092, %ninout.2.lcssa
  br i1 %exitcond1093, label %for.end597, label %for.body568

for.end597:                                       ; preds = %for.body568, %for.cond565.preheader
  store i32 %5, i32* @generating_concat_p, align 4, !tbaa !58
  %cmp598 = icmp eq i32 %call1, 1
  %cmp601 = icmp eq i32 %nclobbers.0.lcssa, 0
  %or.cond742 = and i1 %cmp598, %cmp601
  br i1 %or.cond742, label %if.then603, label %if.else610

if.then603:                                       ; preds = %for.end597
  %155 = load i8** %4, align 8, !tbaa !17
  %156 = getelementptr inbounds %struct.rtx_def* %call339, i64 0, i32 1, i64 1, i32 0
  %.c = ptrtoint i8* %155 to i64
  store i64 %.c, i64* %156, align 8, !tbaa !17
  %157 = load %struct.rtx_def** %0, align 8, !tbaa !17
  %call608 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %157, %struct.rtx_def* %call339) #6
  %call609 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call608) #6
  br label %for.cond725.preheader

if.else610:                                       ; preds = %for.end597
  %158 = or i32 %nclobbers.0.lcssa, %call1
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %if.then616, label %if.else618

if.then616:                                       ; preds = %if.else610
  %call617 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call339) #6
  br label %for.cond725.preheader

if.else618:                                       ; preds = %if.else610
  %. = select i1 %cmp, i32 1, i32 %call1
  %add623 = add nsw i32 %nclobbers.0.lcssa, %.
  %call624 = call %struct.rtvec_def* @rtvec_alloc(i32 %add623) #6
  %call625 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call624) #6
  br i1 %tobool371074, label %if.then668, label %for.body628.lr.ph

for.body628.lr.ph:                                ; preds = %if.else618
  %arrayidx644 = getelementptr inbounds %struct.rtx_def* %call625, i64 0, i32 1, i64 0
  %rtvec645 = bitcast %union.rtunion_def* %arrayidx644 to %struct.rtvec_def**
  br label %for.body628

for.body628:                                      ; preds = %for.body628.lr.ph, %for.body628
  %indvars.iv1087 = phi i64 [ 0, %for.body628.lr.ph ], [ %indvars.iv.next1088, %for.body628 ]
  %tail.51050 = phi %union.tree_node* [ %outputs, %for.body628.lr.ph ], [ %171, %for.body628 ]
  %arrayidx630 = getelementptr inbounds %struct.rtx_def** %0, i64 %indvars.iv1087
  %160 = load %struct.rtx_def** %arrayidx630, align 8, !tbaa !17
  %161 = getelementptr inbounds %struct.rtx_def* %160, i64 0, i32 0
  %bf.load633 = load i32* %161, align 8
  %bf.lshr634 = lshr i32 %bf.load633, 16
  %bf.clear635 = and i32 %bf.lshr634, 255
  %162 = load %union.tree_node** %pointer338, align 8
  %163 = bitcast %union.tree_node* %162 to i8*
  %arrayidx639 = getelementptr inbounds i8** %4, i64 %indvars.iv1087
  %164 = load i8** %arrayidx639, align 8, !tbaa !17
  %165 = trunc i64 %indvars.iv1087 to i32
  %call640 = call %struct.rtx_def* @gen_rtx_fmt_ssiEEsi(i32 41, i32 %bf.clear635, i8* %163, i8* %164, i32 %165, %struct.rtvec_def* %call325, %struct.rtvec_def* %call326, i8* %filename, i32 %line) #6
  %call641 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %160, %struct.rtx_def* %call640) #6
  %166 = load %struct.rtvec_def** %rtvec645, align 8, !tbaa !17
  %arrayidx647 = getelementptr inbounds %struct.rtvec_def* %166, i64 0, i32 1, i64 %indvars.iv1087
  store %struct.rtx_def* %call641, %struct.rtx_def** %arrayidx647, align 8, !tbaa !17
  %167 = load %struct.rtvec_def** %rtvec645, align 8, !tbaa !17
  %arrayidx653 = getelementptr inbounds %struct.rtvec_def* %167, i64 0, i32 1, i64 %indvars.iv1087
  %168 = load %struct.rtx_def** %arrayidx653, align 8, !tbaa !17
  %arrayidx655 = getelementptr inbounds %struct.rtx_def* %168, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx655 to %struct.rtx_def**
  %169 = load %struct.rtx_def** %rtx, align 8, !tbaa !17
  %170 = getelementptr inbounds %struct.rtx_def* %169, i64 0, i32 0
  %bf.load656 = load i32* %170, align 8
  %bf.clear659 = and i32 %bf.load656, -134217729
  %bf.set660 = or i32 %bf.clear659, %bf.shl
  store i32 %bf.set660, i32* %170, align 8
  %chain663 = getelementptr inbounds %union.tree_node* %tail.51050, i64 0, i32 0, i32 0, i32 0
  %171 = load %union.tree_node** %chain663, align 8, !tbaa !79
  %indvars.iv.next1088 = add nuw nsw i64 %indvars.iv1087, 1
  %tobool627 = icmp eq %union.tree_node* %171, null
  br i1 %tobool627, label %for.end665, label %for.body628

for.end665:                                       ; preds = %for.body628
  %172 = trunc i64 %indvars.iv.next1088 to i32
  %cmp666 = icmp eq i32 %172, 0
  br i1 %cmp666, label %if.then668, label %for.cond677.preheader

if.then668:                                       ; preds = %if.else618, %for.end665
  %arrayidx672 = getelementptr inbounds %struct.rtx_def* %call625, i64 0, i32 1, i64 0
  %rtvec673 = bitcast %union.rtunion_def* %arrayidx672 to %struct.rtvec_def**
  %173 = load %struct.rtvec_def** %rtvec673, align 8, !tbaa !17
  %arrayidx675 = getelementptr inbounds %struct.rtvec_def* %173, i64 0, i32 1, i64 0
  store %struct.rtx_def* %call339, %struct.rtx_def** %arrayidx675, align 8, !tbaa !17
  br label %for.cond677.preheader

for.cond677.preheader:                            ; preds = %if.then668, %for.end665
  %i.9.ph = phi i32 [ %172, %for.end665 ], [ 1, %if.then668 ]
  br i1 %tobool1079, label %for.end721, label %for.body679.lr.ph

for.body679.lr.ph:                                ; preds = %for.cond677.preheader
  %arrayidx703 = getelementptr inbounds %struct.rtx_def* %call625, i64 0, i32 1, i64 0
  %rtvec704 = bitcast %union.rtunion_def* %arrayidx703 to %struct.rtvec_def**
  br label %for.body679

for.body679:                                      ; preds = %for.body679.lr.ph, %for.inc718
  %tail.61047 = phi %union.tree_node* [ %call23, %for.body679.lr.ph ], [ %180, %for.inc718 ]
  %i.91046 = phi i32 [ %i.9.ph, %for.body679.lr.ph ], [ %i.10, %for.inc718 ]
  %value682 = getelementptr inbounds %union.tree_node* %tail.61047, i64 0, i32 0, i32 2
  %174 = bitcast i32* %value682 to %union.tree_node**
  %175 = load %union.tree_node** %174, align 8, !tbaa !72
  %pointer684 = getelementptr inbounds %union.tree_node* %175, i64 0, i32 0, i32 4
  %176 = load %union.tree_node** %pointer684, align 8
  %177 = bitcast %union.tree_node* %176 to i8*
  %call686 = call i32 @decode_reg_name(i8* %177) #6
  %cmp687 = icmp slt i32 %call686, 0
  br i1 %cmp687, label %if.then689, label %if.end708

if.then689:                                       ; preds = %for.body679
  %cmp694 = icmp eq i32 %call686, -4
  br i1 %cmp694, label %if.then696, label %for.inc718

if.then696:                                       ; preds = %if.then689
  %call697 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0) #6
  %call698 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call697) #6
  %call699 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call698) #6
  %inc700 = add nsw i32 %i.91046, 1
  %idxprom701 = sext i32 %i.91046 to i64
  %178 = load %struct.rtvec_def** %rtvec704, align 8, !tbaa !17
  %arrayidx706 = getelementptr inbounds %struct.rtvec_def* %178, i64 0, i32 1, i64 %idxprom701
  store %struct.rtx_def* %call699, %struct.rtx_def** %arrayidx706, align 8, !tbaa !17
  br label %for.inc718

if.end708:                                        ; preds = %for.body679
  %call709 = call %struct.rtx_def* @gen_rtx_REG(i32 2, i32 %call686) #6
  %call710 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call709) #6
  %inc711 = add nsw i32 %i.91046, 1
  %idxprom712 = sext i32 %i.91046 to i64
  %179 = load %struct.rtvec_def** %rtvec704, align 8, !tbaa !17
  %arrayidx717 = getelementptr inbounds %struct.rtvec_def* %179, i64 0, i32 1, i64 %idxprom712
  store %struct.rtx_def* %call710, %struct.rtx_def** %arrayidx717, align 8, !tbaa !17
  br label %for.inc718

for.inc718:                                       ; preds = %if.then689, %if.end708, %if.then696
  %i.10 = phi i32 [ %inc700, %if.then696 ], [ %i.91046, %if.then689 ], [ %inc711, %if.end708 ]
  %chain720 = getelementptr inbounds %union.tree_node* %tail.61047, i64 0, i32 0, i32 0, i32 0
  %180 = load %union.tree_node** %chain720, align 8, !tbaa !79
  %tobool678 = icmp eq %union.tree_node* %180, null
  br i1 %tobool678, label %for.end721, label %for.body679

for.end721:                                       ; preds = %for.inc718, %for.cond677.preheader
  %call722 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call625) #6
  br label %for.cond725.preheader

for.cond725.preheader:                            ; preds = %if.then616, %for.end721, %if.then603
  br i1 %cmp5541053, label %for.body728, label %for.end741

for.body728:                                      ; preds = %for.cond725.preheader, %for.inc739
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc739 ], [ 0, %for.cond725.preheader ]
  %arrayidx730 = getelementptr inbounds %struct.rtx_def** %2, i64 %indvars.iv
  %181 = load %struct.rtx_def** %arrayidx730, align 8, !tbaa !17
  %tobool731 = icmp eq %struct.rtx_def* %181, null
  br i1 %tobool731, label %for.inc739, label %if.then732

if.then732:                                       ; preds = %for.body728
  %arrayidx736 = getelementptr inbounds %struct.rtx_def** %0, i64 %indvars.iv
  %182 = load %struct.rtx_def** %arrayidx736, align 8, !tbaa !17
  %call737 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %181, %struct.rtx_def* %182) #6
  br label %for.inc739

for.inc739:                                       ; preds = %for.body728, %if.then732
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %call1
  br i1 %exitcond, label %for.end741, label %for.body728

for.end741:                                       ; preds = %for.inc739, %for.cond725.preheader
  call void @free_temp_slots() #6
  br label %return

return:                                           ; preds = %if.end46, %for.body38, %if.end124, %for.body113, %check_unique_operand_names.exit, %if.then17.i, %if.then6.i, %for.end741, %if.then109
  ret void
}

declare i32 @list_length(%union.tree_node*) #2

declare %union.tree_node* @build_string(i32, i8*) #2

declare i32 @decode_reg_name(i8*) #2

declare i32 @mark_addressable(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i1 @parse_input_constraint(i8** nocapture %constraint_p, i32 %input_num, i32 %ninputs, i32 %noutputs, i32 %ninout, i8** nocapture readonly %constraints, i8* nocapture %allows_mem, i8* nocapture %allows_reg) #0 {
entry:
  %end = alloca i8*, align 8
  %0 = load i8** %constraint_p, align 8, !tbaa !17
  %call = tail call i64 @strlen(i8* %0) #6
  store i8 0, i8* %allows_mem, align 1, !tbaa !82
  store i8 0, i8* %allows_reg, align 1, !tbaa !82
  %cmp298 = icmp eq i64 %call, 0
  br i1 %cmp298, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %add = add nsw i32 %input_num, 1
  %sub = sub nsw i32 %ninputs, %ninout
  %conv16 = sext i32 %noutputs to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %j.0301 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %c_len.0300 = phi i64 [ %call, %for.body.lr.ph ], [ %c_len.1, %for.inc ]
  %constraint.0299 = phi i8* [ %0, %for.body.lr.ph ], [ %constraint.1, %for.inc ]
  %arrayidx = getelementptr inbounds i8* %constraint.0299, i64 %j.0301
  %1 = load i8* %arrayidx, align 1, !tbaa !68
  %conv = sext i8 %1 to i32
  switch i32 %conv, label %sw.default [
    i32 43, label %sw.bb
    i32 61, label %sw.bb
    i32 38, label %sw.bb
    i32 37, label %sw.bb5
    i32 86, label %sw.bb12
    i32 109, label %sw.bb12
    i32 111, label %sw.bb12
    i32 60, label %for.inc
    i32 62, label %for.inc
    i32 63, label %for.inc
    i32 33, label %for.inc
    i32 42, label %for.inc
    i32 35, label %for.inc
    i32 69, label %for.inc
    i32 70, label %for.inc
    i32 71, label %for.inc
    i32 72, label %for.inc
    i32 115, label %for.inc
    i32 105, label %for.inc
    i32 110, label %for.inc
    i32 73, label %for.inc
    i32 74, label %for.inc
    i32 75, label %for.inc
    i32 76, label %for.inc
    i32 77, label %for.inc
    i32 78, label %for.inc
    i32 79, label %for.inc
    i32 80, label %for.inc
    i32 44, label %for.inc
    i32 48, label %sw.bb14
    i32 49, label %sw.bb14
    i32 50, label %sw.bb14
    i32 51, label %sw.bb14
    i32 52, label %sw.bb14
    i32 53, label %sw.bb14
    i32 54, label %sw.bb14
    i32 55, label %sw.bb14
    i32 56, label %sw.bb14
    i32 57, label %sw.bb14
    i32 112, label %sw.bb38
    i32 114, label %sw.bb38
    i32 103, label %sw.bb39
    i32 88, label %sw.bb39
  ]

sw.bb:                                            ; preds = %for.body, %for.body, %for.body
  %cmp1 = icmp eq i8* %constraint.0299, %0
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %sw.bb
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([39 x i8]* @.str27, i64 0, i64 0), i32 %conv) #6
  br label %return

sw.bb5:                                           ; preds = %for.body
  %cmp6.not = icmp ne i8* %constraint.0299, %0
  %cmp8.not = icmp ne i32 %add, %sub
  %brmerge = or i1 %cmp6.not, %cmp8.not
  br i1 %brmerge, label %for.inc, label %if.then10

if.then10:                                        ; preds = %sw.bb5
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([39 x i8]* @.str4, i64 0, i64 0)) #6
  br label %return

sw.bb12:                                          ; preds = %for.body, %for.body, %for.body
  store i8 1, i8* %allows_mem, align 1, !tbaa !82
  br label %for.inc

sw.bb14:                                          ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  %call15 = call i64 @strtoul(i8* %arrayidx, i8** %end, i32 10) #6
  %cmp17 = icmp ult i64 %call15, %conv16
  br i1 %cmp17, label %if.end20, label %if.then19

if.then19:                                        ; preds = %sw.bb14
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([54 x i8]* @.str28, i64 0, i64 0)) #6
  br label %return

if.end20:                                         ; preds = %sw.bb14
  %2 = load i8** %end, align 8, !tbaa !17
  %3 = load i8* %2, align 1, !tbaa !68
  %cmp22 = icmp eq i8 %3, 0
  br i1 %cmp22, label %land.lhs.true24, label %if.else

land.lhs.true24:                                  ; preds = %if.end20
  switch i64 %j.0301, label %if.else [
    i64 0, label %if.then34
    i64 1, label %land.lhs.true29
  ]

land.lhs.true29:                                  ; preds = %land.lhs.true24
  %4 = load i8* %constraint.0299, align 1, !tbaa !68
  %cmp32 = icmp eq i8 %4, 37
  br i1 %cmp32, label %if.then34, label %if.else

if.then34:                                        ; preds = %land.lhs.true24, %land.lhs.true29
  %arrayidx35 = getelementptr inbounds i8** %constraints, i64 %call15
  %5 = load i8** %arrayidx35, align 8, !tbaa !17
  store i8* %5, i8** %constraint_p, align 8, !tbaa !17
  %call36 = tail call i64 @strlen(i8* %5) #6
  br label %for.inc

if.else:                                          ; preds = %land.lhs.true24, %land.lhs.true29, %if.end20
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %constraint.0299 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  br label %sw.bb38

sw.bb38:                                          ; preds = %for.body, %for.body, %if.else
  %j.1 = phi i64 [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %sub.ptr.sub, %if.else ]
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  br label %for.inc

sw.bb39:                                          ; preds = %for.body, %for.body
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  store i8 1, i8* %allows_mem, align 1, !tbaa !82
  br label %for.inc

sw.default:                                       ; preds = %for.body
  %and = and i32 %conv, 255
  %idxprom278 = zext i32 %and to i64
  %arrayidx42 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom278
  %6 = load i16* %arrayidx42, align 2, !tbaa !84
  %and44 = and i16 %6, 136
  %tobool = icmp eq i16 %and44, 0
  br i1 %tobool, label %if.then45, label %if.end48

if.then45:                                        ; preds = %sw.default
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([39 x i8]* @.str29, i64 0, i64 0), i32 %conv) #6
  br label %return

if.end48:                                         ; preds = %sw.default
  switch i8 %1, label %cond.end210.thread288 [
    i8 114, label %cond.end210.thread
    i8 82, label %cond.end210.thread
    i8 113, label %cond.end210.thread
    i8 81, label %cond.end210.thread
    i8 102, label %cond.true77
    i8 116, label %cond.true88
    i8 117, label %cond.true101
    i8 97, label %cond.end210.thread
    i8 98, label %cond.end210.thread
    i8 99, label %cond.end210.thread
    i8 100, label %cond.end210.thread
    i8 120, label %cond.true138
    i8 89, label %cond.end210
    i8 121, label %cond.true158
    i8 65, label %cond.end210.thread
    i8 68, label %cond.end210.thread
    i8 83, label %cond.end210.thread
  ]

cond.true77:                                      ; preds = %if.end48
  %7 = load i32* @target_flags, align 4, !tbaa !58
  %8 = and i32 %7, 33
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %cond.end210.thread288, label %cond.end210.thread

cond.true88:                                      ; preds = %if.end48
  %10 = load i32* @target_flags, align 4, !tbaa !58
  %11 = and i32 %10, 33
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %cond.end210.thread288, label %cond.end210.thread

cond.true101:                                     ; preds = %if.end48
  %13 = load i32* @target_flags, align 4, !tbaa !58
  %14 = and i32 %13, 33
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %cond.end210.thread288, label %cond.end210.thread

cond.true138:                                     ; preds = %if.end48
  %16 = load i32* @target_flags, align 4, !tbaa !58
  %and139 = and i32 %16, 327680
  %cmp140 = icmp eq i32 %and139, 0
  br i1 %cmp140, label %cond.end210.thread288, label %cond.end210.thread

cond.true158:                                     ; preds = %if.end48
  %17 = load i32* @target_flags, align 4, !tbaa !58
  %and159 = and i32 %17, 16384
  %cmp160 = icmp eq i32 %and159, 0
  br i1 %cmp160, label %cond.end210.thread288, label %cond.end210.thread

cond.end210.thread:                               ; preds = %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %if.end48, %cond.true138, %cond.true158, %cond.true77, %cond.true88, %cond.true101
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  br label %for.inc

cond.end210.thread288:                            ; preds = %if.end48, %cond.true138, %cond.true158, %cond.true77, %cond.true88, %cond.true101
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  br label %if.else215

cond.end210:                                      ; preds = %if.end48
  %18 = load i32* @target_flags, align 4, !tbaa !58
  %19 = and i32 %18, 262144
  %cmp212 = icmp eq i32 %19, 0
  store i8 1, i8* %allows_reg, align 1, !tbaa !82
  br i1 %cmp212, label %if.else215, label %for.inc

if.else215:                                       ; preds = %cond.end210.thread288, %cond.end210
  store i8 1, i8* %allows_mem, align 1, !tbaa !82
  br label %for.inc

for.inc:                                          ; preds = %sw.bb5, %cond.end210.thread, %cond.end210, %sw.bb12, %if.then34, %sw.bb38, %sw.bb39, %sw.bb, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %if.else215
  %constraint.1 = phi i8* [ %constraint.0299, %cond.end210 ], [ %constraint.0299, %if.else215 ], [ %constraint.0299, %sw.bb39 ], [ %constraint.0299, %sw.bb38 ], [ %5, %if.then34 ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %for.body ], [ %constraint.0299, %sw.bb12 ], [ %constraint.0299, %sw.bb5 ], [ %constraint.0299, %sw.bb ], [ %constraint.0299, %cond.end210.thread ]
  %c_len.1 = phi i64 [ %c_len.0300, %cond.end210 ], [ %c_len.0300, %if.else215 ], [ %c_len.0300, %sw.bb39 ], [ %c_len.0300, %sw.bb38 ], [ %call36, %if.then34 ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %for.body ], [ %c_len.0300, %sw.bb12 ], [ %c_len.0300, %sw.bb5 ], [ %c_len.0300, %sw.bb ], [ %c_len.0300, %cond.end210.thread ]
  %j.2 = phi i64 [ %j.0301, %cond.end210 ], [ %j.0301, %if.else215 ], [ %j.0301, %sw.bb39 ], [ %j.1, %sw.bb38 ], [ 0, %if.then34 ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %for.body ], [ %j.0301, %sw.bb12 ], [ %j.0301, %sw.bb5 ], [ %j.0301, %sw.bb ], [ %j.0301, %cond.end210.thread ]
  %inc = add i64 %j.2, 1
  %cmp = icmp ult i64 %inc, %c_len.1
  br i1 %cmp, label %for.body, label %return

return:                                           ; preds = %for.inc, %entry, %if.then45, %if.then19, %if.then10, %if.then
  %retval.0 = phi i1 [ false, %if.then45 ], [ false, %if.then19 ], [ false, %if.then10 ], [ false, %if.then ], [ true, %entry ], [ true, %for.inc ]
  ret i1 %retval.0
}

declare %struct.rtx_def* @protect_from_queue(%struct.rtx_def*, i32) #2

declare %struct.rtx_def* @gen_reg_rtx(i32) #2

declare %struct.rtx_def* @assign_temp(%union.tree_node*, i32, i32, i32) #2

declare %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #2

declare %struct.rtvec_def* @rtvec_alloc(i32) #2

declare %struct.rtx_def* @gen_rtx_fmt_ssiEEsi(i32, i32, i8*, i8*, i32, %struct.rtvec_def*, %struct.rtvec_def*, i8*, i32) #2

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #2

declare i32 @asm_operand_ok(%struct.rtx_def*, i8*) #2

declare %struct.rtx_def* @force_const_mem(i32, %struct.rtx_def*) #2

declare %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #2

declare i32 @queued_subexp_p(%struct.rtx_def*) #2

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #1

declare %struct.rtx_def* @gen_rtx_fmt_E(i32, i32, %struct.rtvec_def*) #2

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #2

declare %struct.rtx_def* @gen_rtx_fmt_0(i32, i32) #2

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #2

declare void @free_temp_slots() #2

; Function Attrs: nounwind uwtable
define void @expand_expr_stmt(%union.tree_node* %exp) #0 {
entry:
  tail call void @expand_expr_stmt_value(%union.tree_node* %exp, i32 -1, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_expr_stmt_value(%union.tree_node* %exp, i32 %want_value, i32 %maybe_last) #0 {
entry:
  %cmp = icmp eq i32 %want_value, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 10
  %2 = load i32* %x_expr_stmts_for_value, align 4, !tbaa !55
  %cmp1 = icmp ne i32 %2, 0
  %conv = zext i1 %cmp1 to i32
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %want_value.addr.0 = phi i32 [ %conv, %if.then ], [ %want_value, %entry ]
  %tobool = icmp ne i32 %want_value.addr.0, 0
  br i1 %tobool, label %land.lhs.true41, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %3 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt2 = getelementptr inbounds %struct.function* %3, i64 0, i32 1
  %4 = load %struct.stmt_status** %stmt2, align 8, !tbaa !1
  %x_expr_stmts_for_value3 = getelementptr inbounds %struct.stmt_status* %4, i64 0, i32 10
  %5 = load i32* %x_expr_stmts_for_value3, align 4, !tbaa !55
  %cmp4 = icmp ne i32 %5, 0
  %tobool6 = icmp ne i32 %maybe_last, 0
  %or.cond = and i1 %cmp4, %tobool6
  %6 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp8 = icmp eq %union.tree_node* %6, %exp
  %or.cond128 = or i1 %or.cond, %cmp8
  br i1 %or.cond128, label %if.end55, label %if.then10

if.then10:                                        ; preds = %land.lhs.true
  %side_effects_flag = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %side_effects_flag, align 8
  %bf.clear = and i32 %bf.load, 256
  %tobool11 = icmp eq i32 %bf.clear, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then10
  %7 = load i32* @extra_warnings, align 4, !tbaa !58
  %8 = load i32* @warn_unused_value, align 4
  %9 = or i32 %8, %7
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %if.end55, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %if.then12
  %bf.clear19 = and i32 %bf.load, 255
  %cmp20 = icmp eq i32 %bf.clear19, 114
  br i1 %cmp20, label %land.lhs.true22, label %if.then31

land.lhs.true22:                                  ; preds = %land.lhs.true16
  %type24 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type24, align 8, !tbaa !76
  %code26 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 2
  %bf.load27 = load i32* %code26, align 8
  %bf.clear28 = and i32 %bf.load27, 255
  %cmp29 = icmp eq i32 %bf.clear28, 5
  br i1 %cmp29, label %if.end55, label %if.then31

if.then31:                                        ; preds = %land.lhs.true22, %land.lhs.true16
  %x_emit_filename = getelementptr inbounds %struct.stmt_status* %4, i64 0, i32 11
  %12 = load i8** %x_emit_filename, align 8, !tbaa !56
  %x_emit_lineno = getelementptr inbounds %struct.stmt_status* %4, i64 0, i32 12
  %13 = load i32* %x_emit_lineno, align 4, !tbaa !57
  tail call void (i8*, i32, i8*, ...)* @warning_with_file_and_line(i8* %12, i32 %13, i8* getelementptr inbounds ([25 x i8]* @.str14, i64 0, i64 0)) #6
  br label %if.end55

if.else:                                          ; preds = %if.then10
  %14 = load i32* @warn_unused_value, align 4, !tbaa !58
  %tobool35 = icmp eq i32 %14, 0
  br i1 %tobool35, label %if.end55, label %if.then36

if.then36:                                        ; preds = %if.else
  %call = tail call i32 @warn_if_unused_value(%union.tree_node* %exp)
  br label %if.end55

land.lhs.true41:                                  ; preds = %if.end
  %type43 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %15 = load %union.tree_node** %type43, align 8, !tbaa !76
  %code45 = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 0, i32 2
  %bf.load46 = load i32* %code45, align 8
  %bf.clear47 = and i32 %bf.load46, 255
  %cmp48 = icmp eq i32 %bf.clear47, 23
  br i1 %cmp48, label %if.then50, label %if.end55

if.then50:                                        ; preds = %land.lhs.true41
  %call53 = tail call %union.tree_node* @build_pointer_type(%union.tree_node* %15) #6
  %call54 = tail call %union.tree_node* @build1(i32 121, %union.tree_node* %call53, %union.tree_node* %exp) #6
  br label %if.end55

if.end55:                                         ; preds = %if.then36, %land.lhs.true22, %if.then31, %if.then12, %if.else, %land.lhs.true, %if.then50, %land.lhs.true41
  %exp.addr.0 = phi %union.tree_node* [ %call54, %if.then50 ], [ %exp, %land.lhs.true41 ], [ %exp, %land.lhs.true ], [ %exp, %if.else ], [ %exp, %if.then12 ], [ %exp, %if.then31 ], [ %exp, %land.lhs.true22 ], [ %exp, %if.then36 ]
  %16 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %cond = select i1 %tobool, %struct.rtx_def* null, %struct.rtx_def* %16
  %call57 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %exp.addr.0, %struct.rtx_def* %cond, i32 0, i32 0) #6
  %type59 = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 0, i32 1
  %17 = load %union.tree_node** %type59, align 8, !tbaa !76
  %tobool60 = icmp eq %struct.rtx_def* %call57, null
  br i1 %tobool60, label %if.end97, label %land.lhs.true61

land.lhs.true61:                                  ; preds = %if.end55
  %18 = getelementptr inbounds %struct.rtx_def* %call57, i64 0, i32 0
  %bf.load62 = load i32* %18, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 66
  br i1 %cmp64, label %land.lhs.true66, label %if.end97

land.lhs.true66:                                  ; preds = %land.lhs.true61
  %volatile_flag = getelementptr inbounds %union.tree_node* %exp.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load68 = load i32* %volatile_flag, align 8
  %bf.clear70 = and i32 %bf.load68, 2048
  %tobool71 = icmp eq i32 %bf.clear70, 0
  br i1 %tobool71, label %if.end97, label %if.then72

if.then72:                                        ; preds = %land.lhs.true66
  %type73 = bitcast %union.tree_node* %17 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type73, i64 0, i32 6
  %bf.load74 = load i32* %mode, align 4
  %bf.lshr75 = lshr i32 %bf.load74, 9
  %bf.clear76 = and i32 %bf.lshr75, 127
  switch i32 %bf.clear76, label %if.then88 [
    i32 0, label %if.end97
    i32 51, label %if.else90
  ]

if.then88:                                        ; preds = %if.then72
  %call89 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call57) #6
  br label %if.end97

if.else90:                                        ; preds = %if.then72
  %call91 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %size = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 2
  %19 = bitcast i32* %size to %union.tree_node**
  %20 = load %union.tree_node** %19, align 8, !tbaa !88
  %call93 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %20, %struct.rtx_def* null, i32 0, i32 0) #6
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %call57, %struct.rtx_def* %call57, i32 103, %struct.rtx_def* %call93, i32 51, i32 0, %struct.rtx_def* %call91) #6
  %call94 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call91) #6
  br label %if.end97

if.end97:                                         ; preds = %if.then72, %land.lhs.true66, %if.end55, %if.else90, %if.then88, %land.lhs.true61
  %value.0 = phi %struct.rtx_def* [ %call57, %if.then72 ], [ %call89, %if.then88 ], [ %call57, %if.else90 ], [ %call57, %land.lhs.true66 ], [ %call57, %land.lhs.true61 ], [ null, %if.end55 ]
  tail call void @preserve_temp_slots(%struct.rtx_def* %value.0) #6
  tail call void @free_temp_slots() #6
  br i1 %tobool, label %if.then99, label %if.end102

if.then99:                                        ; preds = %if.end97
  %21 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt100 = getelementptr inbounds %struct.function* %21, i64 0, i32 1
  %22 = load %struct.stmt_status** %stmt100, align 8, !tbaa !1
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status* %22, i64 0, i32 9
  store %struct.rtx_def* %value.0, %struct.rtx_def** %x_last_expr_value, align 8, !tbaa !41
  %23 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt101 = getelementptr inbounds %struct.function* %23, i64 0, i32 1
  %24 = load %struct.stmt_status** %stmt101, align 8, !tbaa !1
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %24, i64 0, i32 8
  store %union.tree_node* %17, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  br label %if.end102

if.end102:                                        ; preds = %if.then99, %if.end97
  tail call void @emit_queue() #6
  ret void
}

declare void @warning_with_file_and_line(i8*, i32, i8*, ...) #2

; Function Attrs: nounwind uwtable
define i32 @warn_if_unused_value(%union.tree_node* nocapture readonly %exp) #0 {
entry:
  %used_flag195 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load196 = load i32* %used_flag195, align 8
  %bf.clear197 = and i32 %bf.load196, 65536
  %tobool198 = icmp eq i32 %bf.clear197, 0
  br i1 %tobool198, label %if.end, label %return

if.end:                                           ; preds = %entry, %tailrecurse.backedge
  %bf.load55 = phi i32 [ %bf.load, %tailrecurse.backedge ], [ %bf.load196, %entry ]
  %exp.tr199 = phi %union.tree_node* [ %exp.tr.be, %tailrecurse.backedge ], [ %exp, %entry ]
  %type = getelementptr inbounds %union.tree_node* %exp.tr199, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !76
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load3 = load i32* %code, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp = icmp eq i32 %bf.clear4, 5
  br i1 %cmp, label %return, label %if.end6

if.end6:                                          ; preds = %if.end
  %bf.clear10 = and i32 %bf.load55, 255
  switch i32 %bf.clear10, label %sw.default [
    i32 130, label %return
    i32 132, label %return
    i32 129, label %return
    i32 131, label %return
    i32 48, label %return
    i32 49, label %return
    i32 50, label %return
    i32 53, label %return
    i32 54, label %return
    i32 120, label %return
    i32 134, label %return
    i32 55, label %return
    i32 140, label %return
    i32 52, label %sw.bb11
    i32 118, label %sw.bb13
    i32 92, label %sw.bb18
    i32 91, label %sw.bb18
    i32 47, label %sw.bb23
    i32 115, label %sw.bb52
    i32 114, label %sw.bb52
    i32 116, label %sw.bb52
    i32 41, label %sw.bb95
  ]

sw.bb11:                                          ; preds = %if.end6
  %operands = getelementptr inbounds %union.tree_node* %exp.tr199, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %1 = bitcast i32* %arrayidx to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !17
  br label %tailrecurse.backedge

tailrecurse.backedge:                             ; preds = %sw.bb11, %sw.bb13, %sw.bb18, %if.end37, %sw.bb95
  %exp.tr.be = phi %union.tree_node* [ %2, %sw.bb11 ], [ %4, %sw.bb13 ], [ %6, %sw.bb18 ], [ %9, %if.end37 ], [ %12, %sw.bb95 ]
  %used_flag = getelementptr inbounds %union.tree_node* %exp.tr.be, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %used_flag, align 8
  %bf.clear = and i32 %bf.load, 65536
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %if.end, label %return

sw.bb13:                                          ; preds = %if.end6
  %operands15 = getelementptr inbounds %union.tree_node* %exp.tr199, i64 0, i32 0, i32 2
  %arrayidx16 = getelementptr inbounds i32* %operands15, i64 2
  %3 = bitcast i32* %arrayidx16 to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !17
  br label %tailrecurse.backedge

sw.bb18:                                          ; preds = %if.end6, %if.end6
  %operands20 = getelementptr inbounds %union.tree_node* %exp.tr199, i64 0, i32 0, i32 2
  %arrayidx21 = getelementptr inbounds i32* %operands20, i64 2
  %5 = bitcast i32* %arrayidx21 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !17
  br label %tailrecurse.backedge

sw.bb23:                                          ; preds = %if.end6
  %bf.clear27 = and i32 %bf.load55, 262144
  %tobool28 = icmp eq i32 %bf.clear27, 0
  br i1 %tobool28, label %if.end30, label %return

if.end30:                                         ; preds = %sw.bb23
  %operands32 = getelementptr inbounds %union.tree_node* %exp.tr199, i64 0, i32 0, i32 2
  %arrayidx33 = bitcast i32* %operands32 to %union.tree_node**
  %7 = load %union.tree_node** %arrayidx33, align 8, !tbaa !17
  %call34 = tail call i32 @warn_if_unused_value(%union.tree_node* %7)
  %tobool35 = icmp eq i32 %call34, 0
  br i1 %tobool35, label %if.end37, label %return

if.end37:                                         ; preds = %if.end30
  %arrayidx40 = getelementptr inbounds i32* %operands32, i64 2
  %8 = bitcast i32* %arrayidx40 to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !17
  %constant_flag = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 2
  %bf.load42 = load i32* %constant_flag, align 8
  %bf.clear44 = and i32 %bf.load42, 512
  %tobool45 = icmp eq i32 %bf.clear44, 0
  br i1 %tobool45, label %tailrecurse.backedge, label %return

sw.bb52:                                          ; preds = %if.end6, %if.end6, %if.end6
  %bf.clear57 = and i32 %bf.load55, 262144
  %tobool58 = icmp eq i32 %bf.clear57, 0
  br i1 %tobool58, label %while.cond, label %return

while.cond:                                       ; preds = %sw.bb52, %while.cond
  %exp.pn = phi %union.tree_node* [ %tem.0, %while.cond ], [ %exp.tr199, %sw.bb52 ]
  %tem.0.in.in = getelementptr inbounds %union.tree_node* %exp.pn, i64 0, i32 0, i32 2
  %tem.0.in = bitcast i32* %tem.0.in.in to %union.tree_node**
  %tem.0 = load %union.tree_node** %tem.0.in, align 8
  %code65 = getelementptr inbounds %union.tree_node* %tem.0, i64 0, i32 0, i32 0, i32 2
  %bf.load66 = load i32* %code65, align 8
  %10 = and i32 %bf.load66, 254
  %11 = icmp eq i32 %10, 114
  br i1 %11, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond
  %bf.clear67 = and i32 %bf.load66, 255
  switch i32 %bf.clear67, label %maybe_warn [
    i32 48, label %return
    i32 49, label %return
    i32 53, label %return
  ]

sw.bb95:                                          ; preds = %if.end6
  %operands97 = getelementptr inbounds %union.tree_node* %exp.tr199, i64 0, i32 0, i32 2
  %arrayidx98 = bitcast i32* %operands97 to %union.tree_node**
  %12 = load %union.tree_node** %arrayidx98, align 8, !tbaa !17
  %type100 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 1
  %13 = load %union.tree_node** %type100, align 8, !tbaa !76
  %code102 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 2
  %bf.load103 = load i32* %code102, align 8
  %bf.clear104 = and i32 %bf.load103, 255
  %cmp105 = icmp eq i32 %bf.clear104, 15
  br i1 %cmp105, label %tailrecurse.backedge, label %sw.default

sw.default:                                       ; preds = %sw.bb95, %if.end6
  %idxprom187 = zext i32 %bf.clear10 to i64
  %arrayidx116 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom187
  %14 = load i8* %arrayidx116, align 1, !tbaa !68
  switch i8 %14, label %maybe_warn [
    i8 100, label %land.lhs.true
    i8 114, label %land.lhs.true
    i8 101, label %land.lhs.true145
  ]

land.lhs.true:                                    ; preds = %sw.default, %sw.default
  %bf.clear132 = and i32 %bf.load55, 2048
  %tobool133 = icmp eq i32 %bf.clear132, 0
  br i1 %tobool133, label %if.end135, label %return

if.end135:                                        ; preds = %land.lhs.true
  %cmp143 = icmp eq i8 %14, 101
  br i1 %cmp143, label %land.lhs.true145, label %maybe_warn

land.lhs.true145:                                 ; preds = %sw.default, %if.end135
  %arrayidx151 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom187
  %15 = load i32* %arrayidx151, align 4, !tbaa !58
  %cmp152 = icmp ne i32 %15, 0
  %bf.clear159 = and i32 %bf.load55, 256
  %tobool160 = icmp eq i32 %bf.clear159, 0
  %or.cond = and i1 %cmp152, %tobool160
  br i1 %or.cond, label %if.end162, label %return

maybe_warn:                                       ; preds = %sw.default, %while.end, %if.end135
  %.old = and i32 %bf.load55, 256
  %tobool160.old = icmp eq i32 %.old, 0
  br i1 %tobool160.old, label %if.end162, label %return

if.end162:                                        ; preds = %land.lhs.true145, %maybe_warn
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_emit_filename = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 11
  %18 = load i8** %x_emit_filename, align 8, !tbaa !56
  %x_emit_lineno = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 12
  %19 = load i32* %x_emit_lineno, align 4, !tbaa !57
  tail call void (i8*, i32, i8*, ...)* @warning_with_file_and_line(i8* %18, i32 %19, i8* getelementptr inbounds ([27 x i8]* @.str15, i64 0, i64 0)) #6
  br label %return

return:                                           ; preds = %tailrecurse.backedge, %if.end, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %sw.bb23, %if.end30, %if.end37, %land.lhs.true145, %entry, %maybe_warn, %land.lhs.true, %while.end, %while.end, %while.end, %sw.bb52, %if.end162
  %retval.0 = phi i32 [ 1, %if.end162 ], [ 0, %sw.bb52 ], [ 0, %while.end ], [ 0, %while.end ], [ 0, %while.end ], [ 0, %land.lhs.true ], [ 0, %land.lhs.true145 ], [ 0, %maybe_warn ], [ 0, %entry ], [ 0, %tailrecurse.backedge ], [ 0, %if.end ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %if.end6 ], [ 0, %sw.bb23 ], [ 1, %if.end30 ], [ 0, %if.end37 ]
  ret i32 %retval.0
}

declare %union.tree_node* @build1(i32, %union.tree_node*, %union.tree_node*) #2

declare %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare void @emit_cmp_and_jump_insns(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, %struct.rtx_def*) #2

declare void @preserve_temp_slots(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @clear_last_expr() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  ret void
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @expand_start_stmt_expr(i32 %has_scope) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 120) #6
  tail call void @do_pending_stack_adjust() #6
  %tobool = icmp eq i32 %has_scope, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  tail call void @start_sequence_for_rtl_expr(%union.tree_node* %call) #6
  br label %if.end

if.else:                                          ; preds = %entry
  tail call void @start_sequence() #6
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %expr = getelementptr inbounds %struct.function* %0, i64 0, i32 2
  %1 = load %struct.expr_status** %expr, align 8, !tbaa !90
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %1, i64 0, i32 1
  %2 = load i32* %x_inhibit_defer_pop, align 4, !tbaa !91
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %x_inhibit_defer_pop, align 4, !tbaa !91
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 10
  %4 = load i32* %x_expr_stmts_for_value, align 4, !tbaa !55
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %x_expr_stmts_for_value, align 4, !tbaa !55
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 9
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_expr_value, align 8, !tbaa !41
  ret %union.tree_node* %call
}

declare %union.tree_node* @make_node(i32) #2

declare void @start_sequence_for_rtl_expr(%union.tree_node*) #2

declare void @start_sequence() #2

; Function Attrs: nounwind uwtable
define %union.tree_node* @expand_end_stmt_expr(%union.tree_node* %t) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %expr = getelementptr inbounds %struct.function* %0, i64 0, i32 2
  %1 = load %struct.expr_status** %expr, align 8, !tbaa !90
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %1, i64 0, i32 1
  %2 = load i32* %x_inhibit_defer_pop, align 4, !tbaa !91
  %sub = add nsw i32 %2, -1
  store i32 %sub, i32* %x_inhibit_defer_pop, align 4, !tbaa !91
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 9
  %4 = load %struct.rtx_def** %x_last_expr_value, align 8, !tbaa !41
  %tobool = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 8
  %5 = load %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  %tobool2 = icmp eq %union.tree_node* %5, null
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  store %struct.rtx_def* %6, %struct.rtx_def** %x_last_expr_value, align 8, !tbaa !41
  %7 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !17
  %8 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt5 = getelementptr inbounds %struct.function* %8, i64 0, i32 1
  %9 = load %struct.stmt_status** %stmt5, align 8, !tbaa !1
  %x_last_expr_type6 = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 8
  store %union.tree_node* %7, %union.tree_node** %x_last_expr_type6, align 8, !tbaa !40
  br label %if.end61

if.else:                                          ; preds = %lor.lhs.false
  %10 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load = load i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.then56 [
    i32 61, label %if.end61
    i32 67, label %if.end61
    i32 68, label %if.end61
    i32 54, label %if.end61
    i32 55, label %if.end61
    i32 58, label %if.end61
    i32 134, label %if.end61
    i32 56, label %if.end61
    i32 140, label %if.end61
  ]

if.then56:                                        ; preds = %if.else
  %call = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %4, i32 0) #6
  %11 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt59 = getelementptr inbounds %struct.function* %11, i64 0, i32 1
  %12 = load %struct.stmt_status** %stmt59, align 8, !tbaa !1
  %x_last_expr_value60 = getelementptr inbounds %struct.stmt_status* %12, i64 0, i32 9
  store %struct.rtx_def* %call, %struct.rtx_def** %x_last_expr_value60, align 8, !tbaa !41
  br label %if.end61

if.end61:                                         ; preds = %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.then56, %if.then
  tail call void @emit_queue() #6
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt62 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt62, align 8, !tbaa !1
  %x_last_expr_type63 = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 8
  %15 = load %union.tree_node** %x_last_expr_type63, align 8, !tbaa !40
  %type = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %15, %union.tree_node** %type, align 8, !tbaa !76
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt64 = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt64, align 8, !tbaa !1
  %x_last_expr_value65 = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 9
  %18 = load %struct.rtx_def** %x_last_expr_value65, align 8, !tbaa !41
  %operands = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %19 = bitcast i32* %arrayidx to %struct.rtx_def**
  store %struct.rtx_def* %18, %struct.rtx_def** %19, align 8, !tbaa !17
  %call66 = tail call %struct.rtx_def* @get_insns() #6
  %20 = bitcast i32* %operands to %struct.rtx_def**
  store %struct.rtx_def* %call66, %struct.rtx_def** %20, align 8, !tbaa !17
  %21 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_rtl_expr_chain = getelementptr inbounds %struct.function* %21, i64 0, i32 27
  %22 = load %union.tree_node** %x_rtl_expr_chain, align 8, !tbaa !93
  %call70 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %t, %union.tree_node* %22) #6
  %23 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_rtl_expr_chain71 = getelementptr inbounds %struct.function* %23, i64 0, i32 27
  store %union.tree_node* %call70, %union.tree_node** %x_rtl_expr_chain71, align 8, !tbaa !93
  tail call void @end_sequence() #6
  %side_effects_flag = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 2
  %bf.load73 = load i32* %side_effects_flag, align 8
  %bf.set = or i32 %bf.load73, 256
  store i32 %bf.set, i32* %side_effects_flag, align 8
  %24 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt75 = getelementptr inbounds %struct.function* %24, i64 0, i32 1
  %25 = load %struct.stmt_status** %stmt75, align 8, !tbaa !1
  %x_last_expr_value76 = getelementptr inbounds %struct.stmt_status* %25, i64 0, i32 9
  %26 = load %struct.rtx_def** %x_last_expr_value76, align 8, !tbaa !41
  %call77 = tail call i32 @volatile_refs_p(%struct.rtx_def* %26) #6
  %bf.load79 = load i32* %side_effects_flag, align 8
  %bf.value = shl i32 %call77, 11
  %bf.shl = and i32 %bf.value, 2048
  %bf.clear80 = and i32 %bf.load79, -2049
  %bf.set81 = or i32 %bf.clear80, %bf.shl
  store i32 %bf.set81, i32* %side_effects_flag, align 8
  %27 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt82 = getelementptr inbounds %struct.function* %27, i64 0, i32 1
  %28 = load %struct.stmt_status** %stmt82, align 8, !tbaa !1
  %x_last_expr_type83 = getelementptr inbounds %struct.stmt_status* %28, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type83, align 8, !tbaa !40
  %29 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt84 = getelementptr inbounds %struct.function* %29, i64 0, i32 1
  %30 = load %struct.stmt_status** %stmt84, align 8, !tbaa !1
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status* %30, i64 0, i32 10
  %31 = load i32* %x_expr_stmts_for_value, align 4, !tbaa !55
  %dec = add nsw i32 %31, -1
  store i32 %dec, i32* %x_expr_stmts_for_value, align 4, !tbaa !55
  ret %union.tree_node* %t
}

declare %struct.rtx_def* @get_insns() #2

declare void @end_sequence() #2

declare i32 @volatile_refs_p(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_start_cond(%union.tree_node* %cond, i32 %exitflag) #0 {
entry:
  %0 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %1 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 120
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_obstack_newchunk(%struct.obstack* @stmt_obstack, i32 120) #6
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i8* [ %.pre, %if.then ], [ %1, %entry ]
  %add.ptr = getelementptr inbounds i8* %2, i64 120
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %3 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %cmp6 = icmp eq i8* %add.ptr, %3
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %sub.ptr.lhs.cast11 = ptrtoint i8* %add.ptr to i64
  %4 = load i32* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 6), align 8, !tbaa !98
  %conv13 = sext i32 %4 to i64
  %add = add nsw i64 %conv13, %sub.ptr.lhs.cast11
  %neg = xor i32 %4, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr16, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %5 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %sub.ptr.lhs.cast19 = ptrtoint i8* %add.ptr16 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct._obstack_chunk* %5 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %6 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %sub.ptr.lhs.cast24 = ptrtoint i8* %6 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast20
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end9
  store i8* %6, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %if.end9
  %7 = phi i8* [ %6, %if.then29 ], [ %add.ptr16, %if.end9 ]
  store i8* %7, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %8 = bitcast i8* %3 to %struct.nesting*
  %9 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %9, i64 0, i32 1
  %10 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %10, i64 0, i32 2
  %11 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %next = getelementptr inbounds i8* %3, i64 8
  %12 = bitcast i8* %next to %struct.nesting**
  store %struct.nesting* %11, %struct.nesting** %12, align 8, !tbaa !26
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt36 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt36, align 8, !tbaa !1
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 5
  %15 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %all = bitcast i8* %3 to %struct.nesting**
  store %struct.nesting* %15, %struct.nesting** %all, align 8, !tbaa !77
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt37 = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt37, align 8, !tbaa !1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 6
  %18 = load i32* %x_nesting_depth, align 4, !tbaa !53
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %x_nesting_depth, align 4, !tbaa !53
  %depth = getelementptr inbounds i8* %3, i64 16
  %19 = bitcast i8* %depth to i32*
  store i32 %inc, i32* %19, align 4, !tbaa !100
  %call = tail call %struct.rtx_def* @gen_label_rtx() #6
  %data = getelementptr inbounds i8* %3, i64 32
  %next_label = getelementptr inbounds i8* %3, i64 40
  %20 = bitcast i8* %next_label to %struct.rtx_def**
  store %struct.rtx_def* %call, %struct.rtx_def** %20, align 8, !tbaa !30
  %tobool = icmp eq i32 %exitflag, 0
  br i1 %tobool, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.end32
  %call39 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %.pre81 = load %struct.rtx_def** %20, align 8, !tbaa !30
  br label %cond.end

cond.end:                                         ; preds = %if.end32, %cond.true
  %21 = phi %struct.rtx_def* [ %.pre81, %cond.true ], [ %call, %if.end32 ]
  %cond40 = phi %struct.rtx_def* [ %call39, %cond.true ], [ null, %if.end32 ]
  %exit_label = getelementptr inbounds i8* %3, i64 24
  %22 = bitcast i8* %exit_label to %struct.rtx_def**
  store %struct.rtx_def* %cond40, %struct.rtx_def** %22, align 8, !tbaa !11
  %endif_label = bitcast i8* %data to %struct.rtx_def**
  store %struct.rtx_def* %cond40, %struct.rtx_def** %endif_label, align 8, !tbaa !28
  %23 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt44 = getelementptr inbounds %struct.function* %23, i64 0, i32 1
  %24 = load %struct.stmt_status** %stmt44, align 8, !tbaa !1
  %x_cond_stack45 = getelementptr inbounds %struct.stmt_status* %24, i64 0, i32 2
  store %struct.nesting* %8, %struct.nesting** %x_cond_stack45, align 8, !tbaa !27
  %25 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt46 = getelementptr inbounds %struct.function* %25, i64 0, i32 1
  %26 = load %struct.stmt_status** %stmt46, align 8, !tbaa !1
  %x_nesting_stack47 = getelementptr inbounds %struct.stmt_status* %26, i64 0, i32 5
  store %struct.nesting* %8, %struct.nesting** %x_nesting_stack47, align 8, !tbaa !52
  tail call void @do_jump(%union.tree_node* %cond, %struct.rtx_def* %21, %struct.rtx_def* null) #6
  ret void
}

declare void @_obstack_newchunk(%struct.obstack*, i32) #2

declare void @do_jump(%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_start_elseif(%union.tree_node* %cond) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 2
  %2 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %data = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4
  %endif_label = bitcast %union.anon.3* %data to %struct.rtx_def**
  %3 = load %struct.rtx_def** %endif_label, align 8, !tbaa !28
  %cmp = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @gen_label_rtx() #6
  %4 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt2 = getelementptr inbounds %struct.function* %4, i64 0, i32 1
  %5 = load %struct.stmt_status** %stmt2, align 8, !tbaa !1
  %x_cond_stack3 = getelementptr inbounds %struct.stmt_status* %5, i64 0, i32 2
  %6 = load %struct.nesting** %x_cond_stack3, align 8, !tbaa !27
  %data4 = getelementptr inbounds %struct.nesting* %6, i64 0, i32 4
  %endif_label6 = bitcast %union.anon.3* %data4 to %struct.rtx_def**
  store %struct.rtx_def* %call, %struct.rtx_def** %endif_label6, align 8, !tbaa !28
  %.pre = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt7.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 1
  %.pre28 = load %struct.stmt_status** %stmt7.phi.trans.insert, align 8, !tbaa !1
  %x_cond_stack8.phi.trans.insert = getelementptr inbounds %struct.stmt_status* %.pre28, i64 0, i32 2
  %.pre29 = load %struct.nesting** %x_cond_stack8.phi.trans.insert, align 8, !tbaa !27
  %data9.phi.trans.insert = getelementptr inbounds %struct.nesting* %.pre29, i64 0, i32 4
  %endif_label11.phi.trans.insert = bitcast %union.anon.3* %data9.phi.trans.insert to %struct.rtx_def**
  %.pre30 = load %struct.rtx_def** %endif_label11.phi.trans.insert, align 8, !tbaa !28
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = phi %struct.rtx_def* [ %.pre30, %if.then ], [ %3, %entry ]
  tail call void @do_pending_stack_adjust() #6
  %call.i = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %7) #6
  %call1.i = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i) #6
  %call2.i = tail call %struct.rtx_def* @emit_barrier() #6
  %8 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt12 = getelementptr inbounds %struct.function* %8, i64 0, i32 1
  %9 = load %struct.stmt_status** %stmt12, align 8, !tbaa !1
  %x_cond_stack13 = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 2
  %10 = load %struct.nesting** %x_cond_stack13, align 8, !tbaa !27
  %11 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 4, i32 0, i32 1
  %12 = load %struct.rtx_def** %11, align 8, !tbaa !30
  %call16 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %12) #6
  %call17 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt18 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt18, align 8, !tbaa !1
  %x_cond_stack19 = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 2
  %15 = load %struct.nesting** %x_cond_stack19, align 8, !tbaa !27
  %16 = getelementptr inbounds %struct.nesting* %15, i64 0, i32 4, i32 0, i32 1
  store %struct.rtx_def* %call17, %struct.rtx_def** %16, align 8, !tbaa !30
  %17 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt23 = getelementptr inbounds %struct.function* %17, i64 0, i32 1
  %18 = load %struct.stmt_status** %stmt23, align 8, !tbaa !1
  %x_cond_stack24 = getelementptr inbounds %struct.stmt_status* %18, i64 0, i32 2
  %19 = load %struct.nesting** %x_cond_stack24, align 8, !tbaa !27
  %20 = getelementptr inbounds %struct.nesting* %19, i64 0, i32 4, i32 0, i32 1
  %21 = load %struct.rtx_def** %20, align 8, !tbaa !30
  tail call void @do_jump(%union.tree_node* %cond, %struct.rtx_def* %21, %struct.rtx_def* null) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_start_else() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 2
  %2 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %data = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4
  %endif_label = bitcast %union.anon.3* %data to %struct.rtx_def**
  %3 = load %struct.rtx_def** %endif_label, align 8, !tbaa !28
  %cmp = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @gen_label_rtx() #6
  %4 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt1 = getelementptr inbounds %struct.function* %4, i64 0, i32 1
  %5 = load %struct.stmt_status** %stmt1, align 8, !tbaa !1
  %x_cond_stack2 = getelementptr inbounds %struct.stmt_status* %5, i64 0, i32 2
  %6 = load %struct.nesting** %x_cond_stack2, align 8, !tbaa !27
  %data3 = getelementptr inbounds %struct.nesting* %6, i64 0, i32 4
  %endif_label5 = bitcast %union.anon.3* %data3 to %struct.rtx_def**
  store %struct.rtx_def* %call, %struct.rtx_def** %endif_label5, align 8, !tbaa !28
  %.pre = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt6.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 1
  %.pre21 = load %struct.stmt_status** %stmt6.phi.trans.insert, align 8, !tbaa !1
  %x_cond_stack7.phi.trans.insert = getelementptr inbounds %struct.stmt_status* %.pre21, i64 0, i32 2
  %.pre22 = load %struct.nesting** %x_cond_stack7.phi.trans.insert, align 8, !tbaa !27
  %data8.phi.trans.insert = getelementptr inbounds %struct.nesting* %.pre22, i64 0, i32 4
  %endif_label10.phi.trans.insert = bitcast %union.anon.3* %data8.phi.trans.insert to %struct.rtx_def**
  %.pre23 = load %struct.rtx_def** %endif_label10.phi.trans.insert, align 8, !tbaa !28
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = phi %struct.rtx_def* [ %.pre23, %if.then ], [ %3, %entry ]
  tail call void @do_pending_stack_adjust() #6
  %call.i = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %7) #6
  %call1.i = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i) #6
  %call2.i = tail call %struct.rtx_def* @emit_barrier() #6
  %8 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt11 = getelementptr inbounds %struct.function* %8, i64 0, i32 1
  %9 = load %struct.stmt_status** %stmt11, align 8, !tbaa !1
  %x_cond_stack12 = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 2
  %10 = load %struct.nesting** %x_cond_stack12, align 8, !tbaa !27
  %11 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 4, i32 0, i32 1
  %12 = load %struct.rtx_def** %11, align 8, !tbaa !30
  %call15 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %12) #6
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt16 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt16, align 8, !tbaa !1
  %x_cond_stack17 = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 2
  %15 = load %struct.nesting** %x_cond_stack17, align 8, !tbaa !27
  %16 = getelementptr inbounds %struct.nesting* %15, i64 0, i32 4, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %16, align 8, !tbaa !30
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_elseif(%union.tree_node* %cond) #0 {
entry:
  %call = tail call %struct.rtx_def* @gen_label_rtx() #6
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 2
  %2 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %3 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  store %struct.rtx_def* %call, %struct.rtx_def** %3, align 8, !tbaa !30
  %4 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt2 = getelementptr inbounds %struct.function* %4, i64 0, i32 1
  %5 = load %struct.stmt_status** %stmt2, align 8, !tbaa !1
  %x_cond_stack3 = getelementptr inbounds %struct.stmt_status* %5, i64 0, i32 2
  %6 = load %struct.nesting** %x_cond_stack3, align 8, !tbaa !27
  %7 = getelementptr inbounds %struct.nesting* %6, i64 0, i32 4, i32 0, i32 1
  %8 = load %struct.rtx_def** %7, align 8, !tbaa !30
  tail call void @do_jump(%union.tree_node* %cond, %struct.rtx_def* %8, %struct.rtx_def* null) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_cond() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 2
  %2 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  tail call void @do_pending_stack_adjust() #6
  %data = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4
  %3 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  %4 = load %struct.rtx_def** %3, align 8, !tbaa !30
  %tobool = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %4) #6
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %endif_label = bitcast %union.anon.3* %data to %struct.rtx_def**
  %5 = load %struct.rtx_def** %endif_label, align 8, !tbaa !28
  %tobool6 = icmp eq %struct.rtx_def* %5, null
  br i1 %tobool6, label %do.body, label %if.then7

if.then7:                                         ; preds = %if.end
  %call11 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %5) #6
  br label %do.body

do.body:                                          ; preds = %if.end, %if.then7
  %6 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt13 = getelementptr inbounds %struct.function* %6, i64 0, i32 1
  %7 = load %struct.stmt_status** %stmt13, align 8, !tbaa !1
  %x_cond_stack14 = getelementptr inbounds %struct.stmt_status* %7, i64 0, i32 2
  %8 = load %struct.nesting** %x_cond_stack14, align 8, !tbaa !27
  br label %do.body15

do.body15:                                        ; preds = %do.cond, %do.body
  %9 = phi %struct.stmt_status* [ %7, %do.body ], [ %34, %do.cond ]
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 5
  %10 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 3
  %11 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %cmp = icmp eq %struct.nesting* %11, %10
  br i1 %cmp, label %if.then18, label %if.end23

if.then18:                                        ; preds = %do.body15
  %next = getelementptr inbounds %struct.nesting* %10, i64 0, i32 1
  %12 = load %struct.nesting** %next, align 8, !tbaa !26
  store %struct.nesting* %12, %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %.pre92 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt24.phi.trans.insert = getelementptr inbounds %struct.function* %.pre92, i64 0, i32 1
  %.pre93 = load %struct.stmt_status** %stmt24.phi.trans.insert, align 8, !tbaa !1
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %do.body15
  %13 = phi %struct.stmt_status* [ %.pre93, %if.then18 ], [ %9, %do.body15 ]
  %x_cond_stack25 = getelementptr inbounds %struct.stmt_status* %13, i64 0, i32 2
  %14 = load %struct.nesting** %x_cond_stack25, align 8, !tbaa !27
  %cmp26 = icmp eq %struct.nesting* %14, %10
  br i1 %cmp26, label %if.then27, label %if.end33

if.then27:                                        ; preds = %if.end23
  %next30 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 1
  %15 = load %struct.nesting** %next30, align 8, !tbaa !26
  store %struct.nesting* %15, %struct.nesting** %x_cond_stack25, align 8, !tbaa !27
  %.pre94 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt34.phi.trans.insert = getelementptr inbounds %struct.function* %.pre94, i64 0, i32 1
  %.pre95 = load %struct.stmt_status** %stmt34.phi.trans.insert, align 8, !tbaa !1
  br label %if.end33

if.end33:                                         ; preds = %if.then27, %if.end23
  %16 = phi %struct.stmt_status* [ %.pre95, %if.then27 ], [ %13, %if.end23 ]
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %16, i64 0, i32 0
  %17 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %cmp35 = icmp eq %struct.nesting* %17, %10
  br i1 %cmp35, label %if.then36, label %if.end42

if.then36:                                        ; preds = %if.end33
  %next39 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 1
  %18 = load %struct.nesting** %next39, align 8, !tbaa !26
  store %struct.nesting* %18, %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %.pre96 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt43.phi.trans.insert = getelementptr inbounds %struct.function* %.pre96, i64 0, i32 1
  %.pre97 = load %struct.stmt_status** %stmt43.phi.trans.insert, align 8, !tbaa !1
  br label %if.end42

if.end42:                                         ; preds = %if.then36, %if.end33
  %19 = phi %struct.stmt_status* [ %.pre97, %if.then36 ], [ %16, %if.end33 ]
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %19, i64 0, i32 1
  %20 = load %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %cmp44 = icmp eq %struct.nesting* %20, %10
  br i1 %cmp44, label %if.then45, label %if.end51

if.then45:                                        ; preds = %if.end42
  %next48 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 1
  %21 = load %struct.nesting** %next48, align 8, !tbaa !26
  store %struct.nesting* %21, %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %.pre98 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt52.phi.trans.insert = getelementptr inbounds %struct.function* %.pre98, i64 0, i32 1
  %.pre99 = load %struct.stmt_status** %stmt52.phi.trans.insert, align 8, !tbaa !1
  br label %if.end51

if.end51:                                         ; preds = %if.then45, %if.end42
  %22 = phi %struct.stmt_status* [ %.pre99, %if.then45 ], [ %19, %if.end42 ]
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %22, i64 0, i32 4
  %23 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %cmp53 = icmp eq %struct.nesting* %23, %10
  br i1 %cmp53, label %if.then54, label %if.end60

if.then54:                                        ; preds = %if.end51
  %next57 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 1
  %24 = load %struct.nesting** %next57, align 8, !tbaa !26
  store %struct.nesting* %24, %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %.pre100 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt61.phi.trans.insert = getelementptr inbounds %struct.function* %.pre100, i64 0, i32 1
  %.pre101 = load %struct.stmt_status** %stmt61.phi.trans.insert, align 8, !tbaa !1
  br label %if.end60

if.end60:                                         ; preds = %if.then54, %if.end51
  %25 = phi %struct.stmt_status* [ %.pre101, %if.then54 ], [ %22, %if.end51 ]
  %x_nesting_stack62 = getelementptr inbounds %struct.stmt_status* %25, i64 0, i32 5
  %26 = load %struct.nesting** %x_nesting_stack62, align 8, !tbaa !52
  %depth = getelementptr inbounds %struct.nesting* %26, i64 0, i32 2
  %27 = load i32* %depth, align 4, !tbaa !100
  %sub = add nsw i32 %27, -1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %25, i64 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4, !tbaa !53
  %all = getelementptr inbounds %struct.nesting* %10, i64 0, i32 0
  %28 = load %struct.nesting** %all, align 8, !tbaa !77
  store %struct.nesting* %28, %struct.nesting** %x_nesting_stack62, align 8, !tbaa !52
  %29 = bitcast %struct.nesting* %10 to i8*
  %30 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %31 = bitcast %struct._obstack_chunk* %30 to %struct.nesting*
  %cmp66 = icmp ugt %struct.nesting* %10, %31
  %32 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8
  %cmp67 = icmp ult i8* %29, %32
  %or.cond = and i1 %cmp66, %cmp67
  br i1 %or.cond, label %if.then68, label %if.else

if.then68:                                        ; preds = %if.end60
  store i8* %29, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  store i8* %29, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %do.cond

if.else:                                          ; preds = %if.end60
  tail call void @obstack_free(%struct.obstack* @stmt_obstack, i8* %29) #6
  br label %do.cond

do.cond:                                          ; preds = %if.then68, %if.else
  %cmp70 = icmp eq %struct.nesting* %10, %8
  %33 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt73 = getelementptr inbounds %struct.function* %33, i64 0, i32 1
  %34 = load %struct.stmt_status** %stmt73, align 8, !tbaa !1
  br i1 %cmp70, label %do.end72, label %do.body15

do.end72:                                         ; preds = %do.cond
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %34, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  ret void
}

declare void @obstack_free(%struct.obstack*, i8*) #2

; Function Attrs: nounwind uwtable
define %struct.nesting* @expand_start_loop(i32 %exit_flag) #0 {
entry:
  %0 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %1 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 120
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_obstack_newchunk(%struct.obstack* @stmt_obstack, i32 120) #6
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i8* [ %.pre, %if.then ], [ %1, %entry ]
  %add.ptr = getelementptr inbounds i8* %2, i64 120
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %3 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %cmp6 = icmp eq i8* %add.ptr, %3
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %sub.ptr.lhs.cast11 = ptrtoint i8* %add.ptr to i64
  %4 = load i32* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 6), align 8, !tbaa !98
  %conv13 = sext i32 %4 to i64
  %add = add nsw i64 %conv13, %sub.ptr.lhs.cast11
  %neg = xor i32 %4, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr16, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %5 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %sub.ptr.lhs.cast19 = ptrtoint i8* %add.ptr16 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct._obstack_chunk* %5 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %6 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %sub.ptr.lhs.cast24 = ptrtoint i8* %6 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast20
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end9
  store i8* %6, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %if.end9
  %7 = phi i8* [ %6, %if.then29 ], [ %add.ptr16, %if.end9 ]
  store i8* %7, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %8 = bitcast i8* %3 to %struct.nesting*
  %9 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %9, i64 0, i32 1
  %10 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %10, i64 0, i32 3
  %11 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %next = getelementptr inbounds i8* %3, i64 8
  %12 = bitcast i8* %next to %struct.nesting**
  store %struct.nesting* %11, %struct.nesting** %12, align 8, !tbaa !26
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt36 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt36, align 8, !tbaa !1
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 5
  %15 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %all = bitcast i8* %3 to %struct.nesting**
  store %struct.nesting* %15, %struct.nesting** %all, align 8, !tbaa !77
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt37 = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt37, align 8, !tbaa !1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 6
  %18 = load i32* %x_nesting_depth, align 4, !tbaa !53
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %x_nesting_depth, align 4, !tbaa !53
  %depth = getelementptr inbounds i8* %3, i64 16
  %19 = bitcast i8* %depth to i32*
  store i32 %inc, i32* %19, align 4, !tbaa !100
  %call = tail call %struct.rtx_def* @gen_label_rtx() #6
  %data = getelementptr inbounds i8* %3, i64 32
  %start_label = bitcast i8* %data to %struct.rtx_def**
  store %struct.rtx_def* %call, %struct.rtx_def** %start_label, align 8, !tbaa !32
  %call38 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %end_label = getelementptr inbounds i8* %3, i64 40
  %20 = bitcast i8* %end_label to %struct.rtx_def**
  store %struct.rtx_def* %call38, %struct.rtx_def** %20, align 8, !tbaa !34
  %alt_end_label = getelementptr inbounds i8* %3, i64 48
  %21 = bitcast i8* %alt_end_label to %struct.rtx_def**
  store %struct.rtx_def* null, %struct.rtx_def** %21, align 8, !tbaa !35
  %22 = load %struct.rtx_def** %start_label, align 8, !tbaa !32
  %continue_label = getelementptr inbounds i8* %3, i64 56
  %23 = bitcast i8* %continue_label to %struct.rtx_def**
  store %struct.rtx_def* %22, %struct.rtx_def** %23, align 8, !tbaa !101
  %tobool = icmp eq i32 %exit_flag, 0
  %.call38 = select i1 %tobool, %struct.rtx_def* null, %struct.rtx_def* %call38
  %exit_label = getelementptr inbounds i8* %3, i64 24
  %24 = bitcast i8* %exit_label to %struct.rtx_def**
  store %struct.rtx_def* %.call38, %struct.rtx_def** %24, align 8, !tbaa !11
  %25 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt51 = getelementptr inbounds %struct.function* %25, i64 0, i32 1
  %26 = load %struct.stmt_status** %stmt51, align 8, !tbaa !1
  %x_loop_stack52 = getelementptr inbounds %struct.stmt_status* %26, i64 0, i32 3
  store %struct.nesting* %8, %struct.nesting** %x_loop_stack52, align 8, !tbaa !31
  %27 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt53 = getelementptr inbounds %struct.function* %27, i64 0, i32 1
  %28 = load %struct.stmt_status** %stmt53, align 8, !tbaa !1
  %x_nesting_stack54 = getelementptr inbounds %struct.stmt_status* %28, i64 0, i32 5
  store %struct.nesting* %8, %struct.nesting** %x_nesting_stack54, align 8, !tbaa !52
  tail call void @do_pending_stack_adjust() #6
  tail call void @emit_queue() #6
  %call55 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -96) #6
  %29 = load %struct.rtx_def** %start_label, align 8, !tbaa !32
  %call59 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %29) #6
  ret %struct.nesting* %8
}

declare %struct.rtx_def* @emit_note(i8*, i32) #2

; Function Attrs: nounwind uwtable
define %struct.nesting* @expand_start_loop_continue_elsewhere(i32 %exit_flag) #0 {
entry:
  %call = tail call %struct.nesting* @expand_start_loop(i32 %exit_flag)
  %call1 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 3
  %2 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %continue_label = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 3
  %call1.c = bitcast %struct.rtx_def* %call1 to %struct.nesting*
  store %struct.nesting* %call1.c, %struct.nesting** %continue_label, align 8, !tbaa !101
  ret %struct.nesting* %call
}

; Function Attrs: nounwind uwtable
define %struct.nesting* @expand_start_null_loop() #0 {
entry:
  %0 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %1 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 120
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_obstack_newchunk(%struct.obstack* @stmt_obstack, i32 120) #6
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i8* [ %.pre, %if.then ], [ %1, %entry ]
  %add.ptr = getelementptr inbounds i8* %2, i64 120
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %3 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %cmp6 = icmp eq i8* %add.ptr, %3
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %sub.ptr.lhs.cast11 = ptrtoint i8* %add.ptr to i64
  %4 = load i32* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 6), align 8, !tbaa !98
  %conv13 = sext i32 %4 to i64
  %add = add nsw i64 %conv13, %sub.ptr.lhs.cast11
  %neg = xor i32 %4, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr16, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %5 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %sub.ptr.lhs.cast19 = ptrtoint i8* %add.ptr16 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct._obstack_chunk* %5 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %6 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %sub.ptr.lhs.cast24 = ptrtoint i8* %6 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast20
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end9
  store i8* %6, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %if.end9
  %7 = phi i8* [ %6, %if.then29 ], [ %add.ptr16, %if.end9 ]
  store i8* %7, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %8 = bitcast i8* %3 to %struct.nesting*
  %9 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %9, i64 0, i32 1
  %10 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %10, i64 0, i32 3
  %11 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %next = getelementptr inbounds i8* %3, i64 8
  %12 = bitcast i8* %next to %struct.nesting**
  store %struct.nesting* %11, %struct.nesting** %12, align 8, !tbaa !26
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt36 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt36, align 8, !tbaa !1
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 5
  %15 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %all = bitcast i8* %3 to %struct.nesting**
  store %struct.nesting* %15, %struct.nesting** %all, align 8, !tbaa !77
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt37 = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt37, align 8, !tbaa !1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 6
  %18 = load i32* %x_nesting_depth, align 4, !tbaa !53
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %x_nesting_depth, align 4, !tbaa !53
  %depth = getelementptr inbounds i8* %3, i64 16
  %19 = bitcast i8* %depth to i32*
  store i32 %inc, i32* %19, align 4, !tbaa !100
  %call = tail call %struct.rtx_def* @emit_note(i8* null, i32 -99) #6
  %data = getelementptr inbounds i8* %3, i64 32
  %start_label = bitcast i8* %data to %struct.rtx_def**
  store %struct.rtx_def* %call, %struct.rtx_def** %start_label, align 8, !tbaa !32
  %call38 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %end_label = getelementptr inbounds i8* %3, i64 40
  %20 = bitcast i8* %end_label to %struct.rtx_def**
  store %struct.rtx_def* %call38, %struct.rtx_def** %20, align 8, !tbaa !34
  %alt_end_label = getelementptr inbounds i8* %3, i64 48
  %21 = bitcast i8* %alt_end_label to %struct.rtx_def**
  store %struct.rtx_def* null, %struct.rtx_def** %21, align 8, !tbaa !35
  %continue_label = getelementptr inbounds i8* %3, i64 56
  %22 = bitcast i8* %continue_label to %struct.rtx_def**
  store %struct.rtx_def* %call38, %struct.rtx_def** %22, align 8, !tbaa !101
  %exit_label = getelementptr inbounds i8* %3, i64 24
  %23 = bitcast i8* %exit_label to %struct.rtx_def**
  store %struct.rtx_def* %call38, %struct.rtx_def** %23, align 8, !tbaa !11
  %24 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt51 = getelementptr inbounds %struct.function* %24, i64 0, i32 1
  %25 = load %struct.stmt_status** %stmt51, align 8, !tbaa !1
  %x_loop_stack52 = getelementptr inbounds %struct.stmt_status* %25, i64 0, i32 3
  store %struct.nesting* %8, %struct.nesting** %x_loop_stack52, align 8, !tbaa !31
  %26 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt53 = getelementptr inbounds %struct.function* %26, i64 0, i32 1
  %27 = load %struct.stmt_status** %stmt53, align 8, !tbaa !1
  %x_nesting_stack54 = getelementptr inbounds %struct.stmt_status* %27, i64 0, i32 5
  store %struct.nesting* %8, %struct.nesting** %x_nesting_stack54, align 8, !tbaa !52
  ret %struct.nesting* %8
}

; Function Attrs: nounwind uwtable
define void @expand_loop_continue_here() #0 {
entry:
  tail call void @do_pending_stack_adjust() #6
  %call = tail call %struct.rtx_def* @emit_note(i8* null, i32 -94) #6
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 3
  %2 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %continue_label = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 3
  %3 = load %struct.nesting** %continue_label, align 8
  %4 = bitcast %struct.nesting* %3 to %struct.rtx_def*
  %call1 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %4) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_loop() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 3
  %2 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %data = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4
  %start_label1 = bitcast %union.anon.3* %data to %struct.rtx_def**
  %3 = load %struct.rtx_def** %start_label1, align 8, !tbaa !32
  %continue_label = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 3
  %4 = load %struct.nesting** %continue_label, align 8
  %5 = bitcast %struct.nesting* %4 to %struct.rtx_def*
  %cmp = icmp eq %struct.rtx_def* %3, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @emit_note_before(i32 -94, %struct.rtx_def* %3) #6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  tail call void @do_pending_stack_adjust() #6
  %tobool261 = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool261, label %if.end124, label %for.body

for.body:                                         ; preds = %if.end, %for.inc
  %etc_note.0264 = phi %struct.rtx_def* [ %8, %for.inc ], [ %3, %if.end ]
  %eh_regions.0263 = phi i32 [ %eh_regions.1, %for.inc ], [ 0, %if.end ]
  %debug_blocks.0262 = phi i32 [ %debug_blocks.1, %for.inc ], [ 0, %if.end ]
  %6 = getelementptr inbounds %struct.rtx_def* %etc_note.0264, i64 0, i32 0
  %bf.load = load i32* %6, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp6 = icmp eq i32 %bf.clear, 37
  br i1 %cmp6, label %if.then7, label %for.inc

if.then7:                                         ; preds = %for.body
  %arrayidx = getelementptr inbounds %struct.rtx_def* %etc_note.0264, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %7 = load i32* %rtint, align 4, !tbaa !58
  switch i32 %7, label %for.inc [
    i32 -92, label %for.end
    i32 -96, label %if.end124
    i32 -86, label %if.then20
    i32 -85, label %if.then26
    i32 -98, label %if.then35
    i32 -97, label %if.then42
  ]

if.then20:                                        ; preds = %if.then7
  %inc = add nsw i32 %eh_regions.0263, 1
  br label %for.inc

if.then26:                                        ; preds = %if.then7
  %dec = add nsw i32 %eh_regions.0263, -1
  %cmp27 = icmp slt i32 %eh_regions.0263, 1
  br i1 %cmp27, label %if.then28, label %for.inc

if.then28:                                        ; preds = %if.then26
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 2733, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.expand_end_loop, i64 0, i64 0)) #7
  unreachable

if.then35:                                        ; preds = %if.then7
  %inc36 = add nsw i32 %debug_blocks.0262, 1
  br label %for.inc

if.then42:                                        ; preds = %if.then7
  %dec43 = add nsw i32 %debug_blocks.0262, -1
  br label %for.inc

for.inc:                                          ; preds = %if.then7, %for.body, %if.then26, %if.then42, %if.then35, %if.then20
  %debug_blocks.1 = phi i32 [ %debug_blocks.0262, %if.then20 ], [ %debug_blocks.0262, %if.then26 ], [ %inc36, %if.then35 ], [ %dec43, %if.then42 ], [ %debug_blocks.0262, %for.body ], [ %debug_blocks.0262, %if.then7 ]
  %eh_regions.1 = phi i32 [ %inc, %if.then20 ], [ %dec, %if.then26 ], [ %eh_regions.0263, %if.then35 ], [ %eh_regions.0263, %if.then42 ], [ %eh_regions.0263, %for.body ], [ %eh_regions.0263, %if.then7 ]
  %arrayidx52 = getelementptr inbounds %struct.rtx_def* %etc_note.0264, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !17
  %tobool = icmp eq %struct.rtx_def* %8, null
  br i1 %tobool, label %if.end124, label %for.body

for.end:                                          ; preds = %if.then7
  %tobool53 = icmp ne %struct.rtx_def* %etc_note.0264, null
  %9 = load i32* @optimize, align 4
  %tobool54 = icmp ne i32 %9, 0
  %or.cond = and i1 %tobool53, %tobool54
  %cmp56 = icmp eq i32 %eh_regions.0263, 0
  %or.cond195 = and i1 %or.cond, %cmp56
  br i1 %or.cond195, label %land.lhs.true57, label %if.end124

land.lhs.true57:                                  ; preds = %for.end
  %cmp58 = icmp eq i32 %debug_blocks.0262, 0
  %cmp59 = icmp sgt i32 %9, 1
  %or.cond196 = or i1 %cmp58, %cmp59
  br i1 %or.cond196, label %land.lhs.true60, label %if.end124

land.lhs.true60:                                  ; preds = %land.lhs.true57
  %arrayidx62 = getelementptr inbounds %struct.rtx_def* %etc_note.0264, i64 0, i32 1, i64 2
  %rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx63, align 8, !tbaa !17
  %cmp64 = icmp eq %struct.rtx_def* %10, null
  br i1 %cmp64, label %if.end124, label %land.lhs.true65

land.lhs.true65:                                  ; preds = %land.lhs.true60
  %call66 = tail call %struct.rtx_def* @get_last_insn() #6
  %call67 = tail call i32 @any_condjump_p(%struct.rtx_def* %call66) #6
  %tobool68 = icmp eq i32 %call67, 0
  br i1 %tobool68, label %if.then69, label %if.end124

if.then69:                                        ; preds = %land.lhs.true65
  %call70 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %arrayidx72 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 1
  %rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx73, align 8, !tbaa !17
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load74 = load i32* %12, align 8
  %bf.clear75 = and i32 %bf.load74, 65535
  %cmp76 = icmp eq i32 %bf.clear75, 37
  br i1 %cmp76, label %land.lhs.true77, label %if.end89

land.lhs.true77:                                  ; preds = %if.then69
  %arrayidx82 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 4
  %rtint83 = bitcast %union.rtunion_def* %arrayidx82 to i32*
  %13 = load i32* %rtint83, align 4, !tbaa !58
  %cmp84 = icmp eq i32 %13, -94
  %. = select i1 %cmp84, %struct.rtx_def* %11, %struct.rtx_def* %3
  br label %if.end89

if.end89:                                         ; preds = %land.lhs.true77, %if.then69
  %start_move.0 = phi %struct.rtx_def* [ %3, %if.then69 ], [ %., %land.lhs.true77 ]
  %call90 = tail call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %call70, %struct.rtx_def* %start_move.0) #6
  br i1 %cmp58, label %if.then92, label %for.cond95.preheader

for.cond95.preheader:                             ; preds = %if.end89
  %tobool96259 = icmp eq %struct.rtx_def* %start_move.0, null
  br i1 %tobool96259, label %if.end120, label %for.body97

if.then92:                                        ; preds = %if.end89
  %call93 = tail call %struct.rtx_def* @get_last_insn() #6
  tail call void @reorder_insns(%struct.rtx_def* %start_move.0, %struct.rtx_def* %etc_note.0264, %struct.rtx_def* %call93) #6
  br label %if.end120

for.body97:                                       ; preds = %for.cond95.preheader, %for.cond95.backedge
  %insn.0260 = phi %struct.rtx_def* [ %cond, %for.cond95.backedge ], [ %start_move.0, %for.cond95.preheader ]
  %cmp98 = icmp eq %struct.rtx_def* %insn.0260, %etc_note.0264
  br i1 %cmp98, label %cond.end, label %cond.false

cond.false:                                       ; preds = %for.body97
  %arrayidx100 = getelementptr inbounds %struct.rtx_def* %insn.0260, i64 0, i32 1, i64 2
  %rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx101, align 8, !tbaa !17
  br label %cond.end

cond.end:                                         ; preds = %for.body97, %cond.false
  %cond = phi %struct.rtx_def* [ %14, %cond.false ], [ null, %for.body97 ]
  %15 = getelementptr inbounds %struct.rtx_def* %insn.0260, i64 0, i32 0
  %bf.load102 = load i32* %15, align 8
  %bf.clear103 = and i32 %bf.load102, 65535
  %cmp104 = icmp eq i32 %bf.clear103, 37
  br i1 %cmp104, label %land.lhs.true105, label %if.end116

land.lhs.true105:                                 ; preds = %cond.end
  %arrayidx107 = getelementptr inbounds %struct.rtx_def* %insn.0260, i64 0, i32 1, i64 4
  %rtint108 = bitcast %union.rtunion_def* %arrayidx107 to i32*
  %16 = load i32* %rtint108, align 4, !tbaa !58
  %17 = and i32 %16, -2
  %switch = icmp eq i32 %17, -98
  br i1 %switch, label %for.cond95.backedge, label %if.end116

if.end116:                                        ; preds = %land.lhs.true105, %cond.end
  %call117 = tail call %struct.rtx_def* @get_last_insn() #6
  tail call void @reorder_insns(%struct.rtx_def* %insn.0260, %struct.rtx_def* %insn.0260, %struct.rtx_def* %call117) #6
  br label %for.cond95.backedge

for.cond95.backedge:                              ; preds = %if.end116, %land.lhs.true105
  %tobool96 = icmp eq %struct.rtx_def* %cond, null
  br i1 %tobool96, label %if.end120, label %for.body97

if.end120:                                        ; preds = %for.cond95.backedge, %for.cond95.preheader, %if.then92
  %call121 = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %3) #6
  %call122 = tail call %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def* %call121, %struct.rtx_def* %call70) #6
  %call123 = tail call %struct.rtx_def* @emit_barrier_before(%struct.rtx_def* %call70) #6
  br label %if.end124

if.end124:                                        ; preds = %for.inc, %if.then7, %if.end, %land.lhs.true65, %land.lhs.true60, %land.lhs.true57, %if.end120, %for.end
  %start_label.0 = phi %struct.rtx_def* [ %3, %land.lhs.true65 ], [ %call70, %if.end120 ], [ %3, %land.lhs.true60 ], [ %3, %land.lhs.true57 ], [ %3, %for.end ], [ null, %if.end ], [ %3, %if.then7 ], [ %3, %for.inc ]
  tail call void @do_pending_stack_adjust() #6
  %call.i = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %start_label.0) #6
  %call1.i = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i) #6
  %call2.i = tail call %struct.rtx_def* @emit_barrier() #6
  %call125 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -95) #6
  %18 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt126 = getelementptr inbounds %struct.function* %18, i64 0, i32 1
  %19 = load %struct.stmt_status** %stmt126, align 8, !tbaa !1
  %x_loop_stack127 = getelementptr inbounds %struct.stmt_status* %19, i64 0, i32 3
  %20 = load %struct.nesting** %x_loop_stack127, align 8, !tbaa !31
  %21 = getelementptr inbounds %struct.nesting* %20, i64 0, i32 4, i32 0, i32 1
  %22 = load %struct.rtx_def** %21, align 8, !tbaa !34
  %call130 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %22) #6
  %23 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt131 = getelementptr inbounds %struct.function* %23, i64 0, i32 1
  %24 = load %struct.stmt_status** %stmt131, align 8, !tbaa !1
  %x_loop_stack132 = getelementptr inbounds %struct.stmt_status* %24, i64 0, i32 3
  %25 = load %struct.nesting** %x_loop_stack132, align 8, !tbaa !31
  br label %do.body133

do.body133:                                       ; preds = %do.cond.do.body133_crit_edge, %if.end124
  %26 = phi %struct.nesting* [ %.pre275, %do.cond.do.body133_crit_edge ], [ %25, %if.end124 ]
  %27 = phi %struct.stmt_status* [ %51, %do.cond.do.body133_crit_edge ], [ %24, %if.end124 ]
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %27, i64 0, i32 5
  %28 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %cmp137 = icmp eq %struct.nesting* %26, %28
  br i1 %cmp137, label %if.then138, label %if.end143

if.then138:                                       ; preds = %do.body133
  %x_loop_stack136 = getelementptr inbounds %struct.stmt_status* %27, i64 0, i32 3
  %next = getelementptr inbounds %struct.nesting* %26, i64 0, i32 1
  %29 = load %struct.nesting** %next, align 8, !tbaa !26
  store %struct.nesting* %29, %struct.nesting** %x_loop_stack136, align 8, !tbaa !31
  %.pre276 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt144.phi.trans.insert = getelementptr inbounds %struct.function* %.pre276, i64 0, i32 1
  %.pre277 = load %struct.stmt_status** %stmt144.phi.trans.insert, align 8, !tbaa !1
  br label %if.end143

if.end143:                                        ; preds = %if.then138, %do.body133
  %30 = phi %struct.stmt_status* [ %.pre277, %if.then138 ], [ %27, %do.body133 ]
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %30, i64 0, i32 2
  %31 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %cmp145 = icmp eq %struct.nesting* %31, %28
  br i1 %cmp145, label %if.then146, label %if.end152

if.then146:                                       ; preds = %if.end143
  %next149 = getelementptr inbounds %struct.nesting* %28, i64 0, i32 1
  %32 = load %struct.nesting** %next149, align 8, !tbaa !26
  store %struct.nesting* %32, %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %.pre278 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt153.phi.trans.insert = getelementptr inbounds %struct.function* %.pre278, i64 0, i32 1
  %.pre279 = load %struct.stmt_status** %stmt153.phi.trans.insert, align 8, !tbaa !1
  br label %if.end152

if.end152:                                        ; preds = %if.then146, %if.end143
  %33 = phi %struct.stmt_status* [ %.pre279, %if.then146 ], [ %30, %if.end143 ]
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %33, i64 0, i32 0
  %34 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %cmp154 = icmp eq %struct.nesting* %34, %28
  br i1 %cmp154, label %if.then155, label %if.end161

if.then155:                                       ; preds = %if.end152
  %next158 = getelementptr inbounds %struct.nesting* %28, i64 0, i32 1
  %35 = load %struct.nesting** %next158, align 8, !tbaa !26
  store %struct.nesting* %35, %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %.pre280 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt162.phi.trans.insert = getelementptr inbounds %struct.function* %.pre280, i64 0, i32 1
  %.pre281 = load %struct.stmt_status** %stmt162.phi.trans.insert, align 8, !tbaa !1
  br label %if.end161

if.end161:                                        ; preds = %if.then155, %if.end152
  %36 = phi %struct.stmt_status* [ %.pre281, %if.then155 ], [ %33, %if.end152 ]
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %36, i64 0, i32 1
  %37 = load %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %cmp163 = icmp eq %struct.nesting* %37, %28
  br i1 %cmp163, label %if.then164, label %if.end170

if.then164:                                       ; preds = %if.end161
  %next167 = getelementptr inbounds %struct.nesting* %28, i64 0, i32 1
  %38 = load %struct.nesting** %next167, align 8, !tbaa !26
  store %struct.nesting* %38, %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %.pre282 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt171.phi.trans.insert = getelementptr inbounds %struct.function* %.pre282, i64 0, i32 1
  %.pre283 = load %struct.stmt_status** %stmt171.phi.trans.insert, align 8, !tbaa !1
  br label %if.end170

if.end170:                                        ; preds = %if.then164, %if.end161
  %39 = phi %struct.stmt_status* [ %.pre283, %if.then164 ], [ %36, %if.end161 ]
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %39, i64 0, i32 4
  %40 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %cmp172 = icmp eq %struct.nesting* %40, %28
  br i1 %cmp172, label %if.then173, label %if.end179

if.then173:                                       ; preds = %if.end170
  %next176 = getelementptr inbounds %struct.nesting* %28, i64 0, i32 1
  %41 = load %struct.nesting** %next176, align 8, !tbaa !26
  store %struct.nesting* %41, %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %.pre284 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt180.phi.trans.insert = getelementptr inbounds %struct.function* %.pre284, i64 0, i32 1
  %.pre285 = load %struct.stmt_status** %stmt180.phi.trans.insert, align 8, !tbaa !1
  br label %if.end179

if.end179:                                        ; preds = %if.then173, %if.end170
  %42 = phi %struct.stmt_status* [ %.pre285, %if.then173 ], [ %39, %if.end170 ]
  %x_nesting_stack181 = getelementptr inbounds %struct.stmt_status* %42, i64 0, i32 5
  %43 = load %struct.nesting** %x_nesting_stack181, align 8, !tbaa !52
  %depth = getelementptr inbounds %struct.nesting* %43, i64 0, i32 2
  %44 = load i32* %depth, align 4, !tbaa !100
  %sub = add nsw i32 %44, -1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %42, i64 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4, !tbaa !53
  %all = getelementptr inbounds %struct.nesting* %28, i64 0, i32 0
  %45 = load %struct.nesting** %all, align 8, !tbaa !77
  store %struct.nesting* %45, %struct.nesting** %x_nesting_stack181, align 8, !tbaa !52
  %46 = bitcast %struct.nesting* %28 to i8*
  %47 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %48 = bitcast %struct._obstack_chunk* %47 to %struct.nesting*
  %cmp185 = icmp ugt %struct.nesting* %28, %48
  %49 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8
  %cmp187 = icmp ult i8* %46, %49
  %or.cond247 = and i1 %cmp185, %cmp187
  br i1 %or.cond247, label %if.then188, label %if.else189

if.then188:                                       ; preds = %if.end179
  store i8* %46, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  store i8* %46, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %do.cond

if.else189:                                       ; preds = %if.end179
  tail call void @obstack_free(%struct.obstack* @stmt_obstack, i8* %46) #6
  br label %do.cond

do.cond:                                          ; preds = %if.then188, %if.else189
  %cmp191 = icmp eq %struct.nesting* %28, %25
  %50 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt194 = getelementptr inbounds %struct.function* %50, i64 0, i32 1
  %51 = load %struct.stmt_status** %stmt194, align 8, !tbaa !1
  br i1 %cmp191, label %do.end193, label %do.cond.do.body133_crit_edge

do.cond.do.body133_crit_edge:                     ; preds = %do.cond
  %x_loop_stack136.phi.trans.insert = getelementptr inbounds %struct.stmt_status* %51, i64 0, i32 3
  %.pre275 = load %struct.nesting** %x_loop_stack136.phi.trans.insert, align 8, !tbaa !31
  br label %do.body133

do.end193:                                        ; preds = %do.cond
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %51, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  ret void
}

declare %struct.rtx_def* @emit_note_before(i32, %struct.rtx_def*) #2

declare i32 @any_condjump_p(%struct.rtx_def*) #2

declare %struct.rtx_def* @emit_label_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @reorder_insns(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @emit_barrier_before(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_end_null_loop() #0 {
entry:
  tail call void @do_pending_stack_adjust() #6
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 3
  %2 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %3 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  %4 = load %struct.rtx_def** %3, align 8, !tbaa !34
  %call = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %4) #6
  %5 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt1 = getelementptr inbounds %struct.function* %5, i64 0, i32 1
  %6 = load %struct.stmt_status** %stmt1, align 8, !tbaa !1
  %x_loop_stack2 = getelementptr inbounds %struct.stmt_status* %6, i64 0, i32 3
  %7 = load %struct.nesting** %x_loop_stack2, align 8, !tbaa !31
  br label %do.body3

do.body3:                                         ; preds = %do.cond.do.body3_crit_edge, %entry
  %8 = phi %struct.nesting* [ %.pre75, %do.cond.do.body3_crit_edge ], [ %7, %entry ]
  %9 = phi %struct.stmt_status* [ %33, %do.cond.do.body3_crit_edge ], [ %6, %entry ]
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 5
  %10 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %cmp = icmp eq %struct.nesting* %8, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body3
  %x_loop_stack6 = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 3
  %next = getelementptr inbounds %struct.nesting* %8, i64 0, i32 1
  %11 = load %struct.nesting** %next, align 8, !tbaa !26
  store %struct.nesting* %11, %struct.nesting** %x_loop_stack6, align 8, !tbaa !31
  %.pre76 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt11.phi.trans.insert = getelementptr inbounds %struct.function* %.pre76, i64 0, i32 1
  %.pre77 = load %struct.stmt_status** %stmt11.phi.trans.insert, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body3
  %12 = phi %struct.stmt_status* [ %.pre77, %if.then ], [ %9, %do.body3 ]
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %12, i64 0, i32 2
  %13 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %cmp12 = icmp eq %struct.nesting* %13, %10
  br i1 %cmp12, label %if.then13, label %if.end19

if.then13:                                        ; preds = %if.end
  %next16 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 1
  %14 = load %struct.nesting** %next16, align 8, !tbaa !26
  store %struct.nesting* %14, %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %.pre78 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt20.phi.trans.insert = getelementptr inbounds %struct.function* %.pre78, i64 0, i32 1
  %.pre79 = load %struct.stmt_status** %stmt20.phi.trans.insert, align 8, !tbaa !1
  br label %if.end19

if.end19:                                         ; preds = %if.then13, %if.end
  %15 = phi %struct.stmt_status* [ %.pre79, %if.then13 ], [ %12, %if.end ]
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %15, i64 0, i32 0
  %16 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %cmp21 = icmp eq %struct.nesting* %16, %10
  br i1 %cmp21, label %if.then22, label %if.end28

if.then22:                                        ; preds = %if.end19
  %next25 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 1
  %17 = load %struct.nesting** %next25, align 8, !tbaa !26
  store %struct.nesting* %17, %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %.pre80 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt29.phi.trans.insert = getelementptr inbounds %struct.function* %.pre80, i64 0, i32 1
  %.pre81 = load %struct.stmt_status** %stmt29.phi.trans.insert, align 8, !tbaa !1
  br label %if.end28

if.end28:                                         ; preds = %if.then22, %if.end19
  %18 = phi %struct.stmt_status* [ %.pre81, %if.then22 ], [ %15, %if.end19 ]
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %18, i64 0, i32 1
  %19 = load %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %cmp30 = icmp eq %struct.nesting* %19, %10
  br i1 %cmp30, label %if.then31, label %if.end37

if.then31:                                        ; preds = %if.end28
  %next34 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 1
  %20 = load %struct.nesting** %next34, align 8, !tbaa !26
  store %struct.nesting* %20, %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %.pre82 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt38.phi.trans.insert = getelementptr inbounds %struct.function* %.pre82, i64 0, i32 1
  %.pre83 = load %struct.stmt_status** %stmt38.phi.trans.insert, align 8, !tbaa !1
  br label %if.end37

if.end37:                                         ; preds = %if.then31, %if.end28
  %21 = phi %struct.stmt_status* [ %.pre83, %if.then31 ], [ %18, %if.end28 ]
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %21, i64 0, i32 4
  %22 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %cmp39 = icmp eq %struct.nesting* %22, %10
  br i1 %cmp39, label %if.then40, label %if.end46

if.then40:                                        ; preds = %if.end37
  %next43 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 1
  %23 = load %struct.nesting** %next43, align 8, !tbaa !26
  store %struct.nesting* %23, %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %.pre84 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt47.phi.trans.insert = getelementptr inbounds %struct.function* %.pre84, i64 0, i32 1
  %.pre85 = load %struct.stmt_status** %stmt47.phi.trans.insert, align 8, !tbaa !1
  br label %if.end46

if.end46:                                         ; preds = %if.then40, %if.end37
  %24 = phi %struct.stmt_status* [ %.pre85, %if.then40 ], [ %21, %if.end37 ]
  %x_nesting_stack48 = getelementptr inbounds %struct.stmt_status* %24, i64 0, i32 5
  %25 = load %struct.nesting** %x_nesting_stack48, align 8, !tbaa !52
  %depth = getelementptr inbounds %struct.nesting* %25, i64 0, i32 2
  %26 = load i32* %depth, align 4, !tbaa !100
  %sub = add nsw i32 %26, -1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %24, i64 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4, !tbaa !53
  %all = getelementptr inbounds %struct.nesting* %10, i64 0, i32 0
  %27 = load %struct.nesting** %all, align 8, !tbaa !77
  store %struct.nesting* %27, %struct.nesting** %x_nesting_stack48, align 8, !tbaa !52
  %28 = bitcast %struct.nesting* %10 to i8*
  %29 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %30 = bitcast %struct._obstack_chunk* %29 to %struct.nesting*
  %cmp52 = icmp ugt %struct.nesting* %10, %30
  %31 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8
  %cmp53 = icmp ult i8* %28, %31
  %or.cond = and i1 %cmp52, %cmp53
  br i1 %or.cond, label %if.then54, label %if.else

if.then54:                                        ; preds = %if.end46
  store i8* %28, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  store i8* %28, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %do.cond

if.else:                                          ; preds = %if.end46
  tail call void @obstack_free(%struct.obstack* @stmt_obstack, i8* %28) #6
  br label %do.cond

do.cond:                                          ; preds = %if.then54, %if.else
  %cmp56 = icmp eq %struct.nesting* %10, %7
  %32 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt59 = getelementptr inbounds %struct.function* %32, i64 0, i32 1
  %33 = load %struct.stmt_status** %stmt59, align 8, !tbaa !1
  br i1 %cmp56, label %do.end58, label %do.cond.do.body3_crit_edge

do.cond.do.body3_crit_edge:                       ; preds = %do.cond
  %x_loop_stack6.phi.trans.insert = getelementptr inbounds %struct.stmt_status* %33, i64 0, i32 3
  %.pre75 = load %struct.nesting** %x_loop_stack6.phi.trans.insert, align 8, !tbaa !31
  br label %do.body3

do.end58:                                         ; preds = %do.cond
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %33, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @expand_continue_loop(%struct.nesting* readonly %whichloop) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  %cmp = icmp eq %struct.nesting* %whichloop, null
  br i1 %cmp, label %if.end, label %if.end4

if.end:                                           ; preds = %entry
  %2 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt1 = getelementptr inbounds %struct.function* %2, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt1, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 3
  %4 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %cmp2 = icmp eq %struct.nesting* %4, null
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %entry, %if.end
  %whichloop.addr.08 = phi %struct.nesting* [ %4, %if.end ], [ %whichloop, %entry ]
  %continue_label = getelementptr inbounds %struct.nesting* %whichloop.addr.08, i64 0, i32 4, i32 0, i32 3
  %5 = load %struct.nesting** %continue_label, align 8
  %6 = bitcast %struct.nesting* %5 to %struct.rtx_def*
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %6, %struct.rtx_def* null)
  br label %return

return:                                           ; preds = %if.end, %if.end4
  %retval.0 = phi i32 [ 1, %if.end4 ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @expand_exit_loop(%struct.nesting* readonly %whichloop) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  %cmp = icmp eq %struct.nesting* %whichloop, null
  br i1 %cmp, label %if.end, label %if.end4

if.end:                                           ; preds = %entry
  %2 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt1 = getelementptr inbounds %struct.function* %2, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt1, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 3
  %4 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %cmp2 = icmp eq %struct.nesting* %4, null
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %entry, %if.end
  %whichloop.addr.08 = phi %struct.nesting* [ %4, %if.end ], [ %whichloop, %entry ]
  %5 = getelementptr inbounds %struct.nesting* %whichloop.addr.08, i64 0, i32 4, i32 0, i32 1
  %6 = load %struct.rtx_def** %5, align 8, !tbaa !34
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %6, %struct.rtx_def* null)
  br label %return

return:                                           ; preds = %if.end, %if.end4
  %retval.0 = phi i32 [ 1, %if.end4 ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @expand_exit_loop_if_false(%struct.nesting* %whichloop, %union.tree_node* %cond) #0 {
entry:
  %call = tail call %struct.rtx_def* @gen_label_rtx() #6
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  %cmp = icmp eq %struct.nesting* %whichloop, null
  br i1 %cmp, label %if.end, label %if.end4

if.end:                                           ; preds = %entry
  %2 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt1 = getelementptr inbounds %struct.function* %2, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt1, align 8, !tbaa !1
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 3
  %4 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %cmp2 = icmp eq %struct.nesting* %4, null
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %entry, %if.end
  %whichloop.addr.018 = phi %struct.nesting* [ %4, %if.end ], [ %whichloop, %entry ]
  tail call void @do_jump(%union.tree_node* %cond, %struct.rtx_def* null, %struct.rtx_def* %call) #6
  %call5 = tail call %struct.rtx_def* @get_last_insn() #6
  %5 = getelementptr inbounds %struct.rtx_def* %call5, i64 0, i32 0
  %bf.load = load i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp6 = icmp eq i32 %bf.clear, 36
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  %6 = getelementptr inbounds %struct.nesting* %whichloop.addr.018, i64 0, i32 4, i32 0, i32 2
  store %struct.rtx_def* %call5, %struct.rtx_def** %6, align 8, !tbaa !35
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end4
  %7 = getelementptr inbounds %struct.nesting* %whichloop.addr.018, i64 0, i32 4, i32 0, i32 1
  %8 = load %struct.rtx_def** %7, align 8, !tbaa !34
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %8, %struct.rtx_def* null)
  %call11 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call) #6
  br label %return

return:                                           ; preds = %if.end, %if.end8
  %retval.0 = phi i32 [ 1, %if.end8 ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @expand_exit_loop_top_cond(%struct.nesting* %whichloop, %union.tree_node* %cond) #0 {
entry:
  %call.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  %x_last_expr_type.i = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type.i, align 8, !tbaa !40
  %cmp.i = icmp eq %struct.nesting* %whichloop, null
  br i1 %cmp.i, label %if.end.i, label %if.end4.i

if.end.i:                                         ; preds = %entry
  %2 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt1.i = getelementptr inbounds %struct.function* %2, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt1.i, align 8, !tbaa !1
  %x_loop_stack.i = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 3
  %4 = load %struct.nesting** %x_loop_stack.i, align 8, !tbaa !31
  %cmp2.i = icmp eq %struct.nesting* %4, null
  br i1 %cmp2.i, label %return, label %if.end4.i

if.end4.i:                                        ; preds = %if.end.i, %entry
  %whichloop.addr.018.i = phi %struct.nesting* [ %4, %if.end.i ], [ %whichloop, %entry ]
  tail call void @do_jump(%union.tree_node* %cond, %struct.rtx_def* null, %struct.rtx_def* %call.i) #6
  %call5.i = tail call %struct.rtx_def* @get_last_insn() #6
  %5 = getelementptr inbounds %struct.rtx_def* %call5.i, i64 0, i32 0
  %bf.load.i = load i32* %5, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp6.i = icmp eq i32 %bf.clear.i, 36
  br i1 %cmp6.i, label %if.then7.i, label %if.end

if.then7.i:                                       ; preds = %if.end4.i
  %6 = getelementptr inbounds %struct.nesting* %whichloop.addr.018.i, i64 0, i32 4, i32 0, i32 2
  store %struct.rtx_def* %call5.i, %struct.rtx_def** %6, align 8, !tbaa !35
  br label %if.end

if.end:                                           ; preds = %if.then7.i, %if.end4.i
  %7 = getelementptr inbounds %struct.nesting* %whichloop.addr.018.i, i64 0, i32 4, i32 0, i32 1
  %8 = load %struct.rtx_def** %7, align 8, !tbaa !34
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %8, %struct.rtx_def* null) #6
  %call11.i = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call.i) #6
  %call1 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -92) #6
  br label %return

return:                                           ; preds = %if.end.i, %if.end
  %retval.0 = phi i32 [ 1, %if.end ], [ 0, %if.end.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @stmt_loop_nest_empty() #3 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %cmp = icmp eq %struct.stmt_status* %1, null
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 3
  %2 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %cmp2 = icmp eq %struct.nesting* %2, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define i32 @preserve_subexpressions_p() #0 {
entry:
  %0 = load i32* @flag_expensive_optimizations, align 4, !tbaa !58
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %1 = load i32* @optimize, align 4, !tbaa !58
  %cmp = icmp eq i32 %1, 0
  %2 = load %struct.function** @cfun, align 8
  %cmp1 = icmp eq %struct.function* %2, null
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %if.end
  %stmt = getelementptr inbounds %struct.function* %2, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %cmp3 = icmp eq %struct.stmt_status* %3, null
  br i1 %cmp3, label %return, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 3
  %4 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %cmp6 = icmp eq %struct.nesting* %4, null
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %lor.lhs.false4
  %call = tail call %struct.rtx_def* @get_last_insn_anywhere() #6
  %tobool9 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool9, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %5 = load i32* %rtint, align 4, !tbaa !58
  %6 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt10 = getelementptr inbounds %struct.function* %6, i64 0, i32 1
  %7 = load %struct.stmt_status** %stmt10, align 8, !tbaa !1
  %x_loop_stack11 = getelementptr inbounds %struct.stmt_status* %7, i64 0, i32 3
  %8 = load %struct.nesting** %x_loop_stack11, align 8, !tbaa !31
  %data = getelementptr inbounds %struct.nesting* %8, i64 0, i32 4
  %start_label = bitcast %union.anon.3* %data to %struct.rtx_def**
  %9 = load %struct.rtx_def** %start_label, align 8, !tbaa !32
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 0
  %rtint14 = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %10 = load i32* %rtint14, align 4, !tbaa !58
  %sub = sub nsw i32 %5, %10
  %11 = load i32* @n_non_fixed_regs, align 4, !tbaa !58
  %mul = mul nsw i32 %11, 3
  %cmp15 = icmp slt i32 %sub, %mul
  br label %land.end

land.end:                                         ; preds = %if.end8, %land.rhs
  %12 = phi i1 [ false, %if.end8 ], [ %cmp15, %land.rhs ]
  %land.ext = zext i1 %12 to i32
  br label %return

return:                                           ; preds = %if.end, %lor.lhs.false2, %lor.lhs.false4, %entry, %land.end
  %retval.0 = phi i32 [ %land.ext, %land.end ], [ 1, %entry ], [ 0, %lor.lhs.false4 ], [ 0, %lor.lhs.false2 ], [ 0, %if.end ]
  ret i32 %retval.0
}

declare %struct.rtx_def* @get_last_insn_anywhere() #2

; Function Attrs: nounwind uwtable
define i32 @expand_exit_something() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  %2 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt1 = getelementptr inbounds %struct.function* %2, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt1, align 8, !tbaa !1
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 5
  %n.05 = load %struct.nesting** %x_nesting_stack, align 8
  %tobool6 = icmp eq %struct.nesting* %n.05, null
  br i1 %tobool6, label %return, label %for.body

for.cond:                                         ; preds = %for.body
  %all = getelementptr inbounds %struct.nesting* %n.07, i64 0, i32 0
  %n.0 = load %struct.nesting** %all, align 8
  %tobool = icmp eq %struct.nesting* %n.0, null
  br i1 %tobool, label %return, label %for.body

for.body:                                         ; preds = %entry, %for.cond
  %n.07 = phi %struct.nesting* [ %n.0, %for.cond ], [ %n.05, %entry ]
  %exit_label = getelementptr inbounds %struct.nesting* %n.07, i64 0, i32 3
  %4 = load %struct.rtx_def** %exit_label, align 8, !tbaa !11
  %cmp = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp, label %for.cond, label %if.then

if.then:                                          ; preds = %for.body
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %4, %struct.rtx_def* null)
  br label %return

return:                                           ; preds = %for.cond, %entry, %if.then
  %retval.0 = phi i32 [ 1, %if.then ], [ 0, %entry ], [ 0, %for.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @expand_null_return() #0 {
entry:
  %call = tail call %struct.rtx_def* @get_last_insn() #6
  tail call void @clobber_return_register() #6
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_cleanup_label.i = getelementptr inbounds %struct.function* %0, i64 0, i32 23
  %1 = load %struct.rtx_def** %x_cleanup_label.i, align 8, !tbaa !102
  %tobool.i = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool.i, label %cond.false.i, label %cond.end.i

cond.false.i:                                     ; preds = %entry
  %x_return_label.i = getelementptr inbounds %struct.function* %0, i64 0, i32 24
  %2 = load %struct.rtx_def** %x_return_label.i, align 8, !tbaa !75
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %entry
  %cond.i = phi %struct.rtx_def* [ %2, %cond.false.i ], [ %1, %entry ]
  tail call void @clear_pending_stack_adjust() #6
  tail call void @do_pending_stack_adjust() #6
  %3 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %3, i64 0, i32 1
  %4 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  %x_last_expr_type.i = getelementptr inbounds %struct.stmt_status* %4, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type.i, align 8, !tbaa !40
  %cmp.i = icmp eq %struct.rtx_def* %cond.i, null
  br i1 %cmp.i, label %if.then.i, label %expand_null_return_1.exit

if.then.i:                                        ; preds = %cond.end.i
  %call.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  %5 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_return_label2.i = getelementptr inbounds %struct.function* %5, i64 0, i32 24
  store %struct.rtx_def* %call.i, %struct.rtx_def** %x_return_label2.i, align 8, !tbaa !75
  br label %expand_null_return_1.exit

expand_null_return_1.exit:                        ; preds = %cond.end.i, %if.then.i
  %end_label.0.i = phi %struct.rtx_def* [ %call.i, %if.then.i ], [ %cond.i, %cond.end.i ]
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %end_label.0.i, %struct.rtx_def* %call) #6
  ret void
}

declare void @clobber_return_register() #2

; Function Attrs: nounwind uwtable
define void @expand_return(%union.tree_node* %retval) #0 {
entry:
  %0 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %type = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !76
  %type2 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type2, align 8, !tbaa !76
  %code = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %retval, %struct.rtx_def* null, i32 0, i32 0) #6
  tail call void @emit_queue() #6
  %call.i = tail call %struct.rtx_def* @get_last_insn() #6
  tail call void @clobber_return_register() #6
  %3 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_cleanup_label.i.i = getelementptr inbounds %struct.function* %3, i64 0, i32 23
  %4 = load %struct.rtx_def** %x_cleanup_label.i.i, align 8, !tbaa !102
  %tobool.i.i = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool.i.i, label %cond.false.i.i, label %cond.end.i.i

cond.false.i.i:                                   ; preds = %if.then
  %x_return_label.i.i = getelementptr inbounds %struct.function* %3, i64 0, i32 24
  %5 = load %struct.rtx_def** %x_return_label.i.i, align 8, !tbaa !75
  br label %cond.end.i.i

cond.end.i.i:                                     ; preds = %cond.false.i.i, %if.then
  %cond.i.i = phi %struct.rtx_def* [ %5, %cond.false.i.i ], [ %4, %if.then ]
  tail call void @clear_pending_stack_adjust() #6
  tail call void @do_pending_stack_adjust() #6
  %6 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i.i = getelementptr inbounds %struct.function* %6, i64 0, i32 1
  %7 = load %struct.stmt_status** %stmt.i.i, align 8, !tbaa !1
  %x_last_expr_type.i.i = getelementptr inbounds %struct.stmt_status* %7, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type.i.i, align 8, !tbaa !40
  %cmp.i.i = icmp eq %struct.rtx_def* %cond.i.i, null
  br i1 %cmp.i.i, label %if.then.i.i, label %expand_null_return.exit

if.then.i.i:                                      ; preds = %cond.end.i.i
  %call.i.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  %8 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_return_label2.i.i = getelementptr inbounds %struct.function* %8, i64 0, i32 24
  store %struct.rtx_def* %call.i.i, %struct.rtx_def** %x_return_label2.i.i, align 8, !tbaa !75
  br label %expand_null_return.exit

expand_null_return.exit:                          ; preds = %cond.end.i.i, %if.then.i.i
  %end_label.0.i.i = phi %struct.rtx_def* [ %call.i.i, %if.then.i.i ], [ %cond.i.i, %cond.end.i.i ]
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %end_label.0.i.i, %struct.rtx_def* %call.i) #6
  br label %if.end353

if.end:                                           ; preds = %entry
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !17
  %cmp4 = icmp eq %union.tree_node* %9, %retval
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %call.i437 = tail call %struct.rtx_def* @get_last_insn() #6
  tail call void @clobber_return_register() #6
  %10 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_cleanup_label.i.i438 = getelementptr inbounds %struct.function* %10, i64 0, i32 23
  %11 = load %struct.rtx_def** %x_cleanup_label.i.i438, align 8, !tbaa !102
  %tobool.i.i439 = icmp eq %struct.rtx_def* %11, null
  br i1 %tobool.i.i439, label %cond.false.i.i441, label %cond.end.i.i446

cond.false.i.i441:                                ; preds = %if.then5
  %x_return_label.i.i440 = getelementptr inbounds %struct.function* %10, i64 0, i32 24
  %12 = load %struct.rtx_def** %x_return_label.i.i440, align 8, !tbaa !75
  br label %cond.end.i.i446

cond.end.i.i446:                                  ; preds = %cond.false.i.i441, %if.then5
  %cond.i.i442 = phi %struct.rtx_def* [ %12, %cond.false.i.i441 ], [ %11, %if.then5 ]
  tail call void @clear_pending_stack_adjust() #6
  tail call void @do_pending_stack_adjust() #6
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i.i443 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt.i.i443, align 8, !tbaa !1
  %x_last_expr_type.i.i444 = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type.i.i444, align 8, !tbaa !40
  %cmp.i.i445 = icmp eq %struct.rtx_def* %cond.i.i442, null
  br i1 %cmp.i.i445, label %if.then.i.i449, label %expand_null_return.exit451

if.then.i.i449:                                   ; preds = %cond.end.i.i446
  %call.i.i447 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %15 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_return_label2.i.i448 = getelementptr inbounds %struct.function* %15, i64 0, i32 24
  store %struct.rtx_def* %call.i.i447, %struct.rtx_def** %x_return_label2.i.i448, align 8, !tbaa !75
  br label %expand_null_return.exit451

expand_null_return.exit451:                       ; preds = %cond.end.i.i446, %if.then.i.i449
  %end_label.0.i.i450 = phi %struct.rtx_def* [ %call.i.i447, %if.then.i.i449 ], [ %cond.i.i442, %cond.end.i.i446 ]
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %end_label.0.i.i450, %struct.rtx_def* %call.i437) #6
  br label %if.end353

if.else:                                          ; preds = %if.end
  %code7 = getelementptr inbounds %union.tree_node* %retval, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  switch i32 %bf.clear9, label %if.else32 [
    i32 36, label %if.end45
    i32 48, label %land.lhs.true
    i32 49, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %if.else, %if.else
  %operands = getelementptr inbounds %union.tree_node* %retval, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %16 = load %union.tree_node** %arrayidx, align 8, !tbaa !17
  %code24 = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 2
  %bf.load25 = load i32* %code24, align 8
  %bf.clear26 = and i32 %bf.load25, 255
  %cmp27 = icmp eq i32 %bf.clear26, 36
  br i1 %cmp27, label %if.then28, label %if.else32

if.then28:                                        ; preds = %land.lhs.true
  %arrayidx31 = getelementptr inbounds i32* %operands, i64 2
  %17 = bitcast i32* %arrayidx31 to %union.tree_node**
  %18 = load %union.tree_node** %17, align 8, !tbaa !17
  br label %if.end45

if.else32:                                        ; preds = %if.else, %land.lhs.true
  %type34 = getelementptr inbounds %union.tree_node* %retval, i64 0, i32 0, i32 0, i32 1
  %19 = load %union.tree_node** %type34, align 8, !tbaa !76
  %code36 = getelementptr inbounds %union.tree_node* %19, i64 0, i32 0, i32 0, i32 2
  %bf.load37 = load i32* %code36, align 8
  %bf.clear38 = and i32 %bf.load37, 255
  %cmp39 = icmp eq i32 %bf.clear38, 5
  %retval. = select i1 %cmp39, %union.tree_node* %retval, %union.tree_node* null
  br label %if.end45

if.end45:                                         ; preds = %if.else32, %if.else, %if.then28
  %retval_rhs.0 = phi %union.tree_node* [ %18, %if.then28 ], [ %retval, %if.else ], [ %retval., %if.else32 ]
  %call46 = tail call %struct.rtx_def* @get_last_insn() #6
  %20 = load i32* @optimize, align 4, !tbaa !58
  %tobool = icmp ne i32 %20, 0
  %cmp48 = icmp ne %union.tree_node* %retval_rhs.0, null
  %or.cond = and i1 %tobool, %cmp48
  br i1 %or.cond, label %land.lhs.true49, label %if.end107

land.lhs.true49:                                  ; preds = %if.end45
  %21 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_frame_offset = getelementptr inbounds %struct.function* %21, i64 0, i32 32
  %22 = load i64* %x_frame_offset, align 8, !tbaa !103
  %cmp50 = icmp eq i64 %22, 0
  br i1 %cmp50, label %land.lhs.true51, label %if.end107

land.lhs.true51:                                  ; preds = %land.lhs.true49
  %code53 = getelementptr inbounds %union.tree_node* %retval_rhs.0, i64 0, i32 0, i32 0, i32 2
  %bf.load54 = load i32* %code53, align 8
  %bf.clear55 = and i32 %bf.load54, 255
  %cmp56 = icmp eq i32 %bf.clear55, 51
  br i1 %cmp56, label %land.lhs.true57, label %if.end107

land.lhs.true57:                                  ; preds = %land.lhs.true51
  %operands59 = getelementptr inbounds %union.tree_node* %retval_rhs.0, i64 0, i32 0, i32 2
  %arrayidx60 = getelementptr inbounds i32* %operands59, i64 2
  %23 = bitcast i32* %arrayidx60 to %union.tree_node**
  %24 = load %union.tree_node** %23, align 8, !tbaa !17
  %code62 = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load63 = load i32* %code62, align 8
  %bf.clear64 = and i32 %bf.load63, 255
  %cmp65 = icmp eq i32 %bf.clear64, 53
  br i1 %cmp65, label %if.then75, label %lor.lhs.false66

lor.lhs.false66:                                  ; preds = %land.lhs.true57
  %arrayidx69 = getelementptr inbounds i32* %operands59, i64 4
  %25 = bitcast i32* %arrayidx69 to %union.tree_node**
  %26 = load %union.tree_node** %25, align 8, !tbaa !17
  %code71 = getelementptr inbounds %union.tree_node* %26, i64 0, i32 0, i32 0, i32 2
  %bf.load72 = load i32* %code71, align 8
  %bf.clear73 = and i32 %bf.load72, 255
  %cmp74 = icmp eq i32 %bf.clear73, 53
  br i1 %cmp74, label %if.then75, label %if.end107

if.then75:                                        ; preds = %lor.lhs.false66, %land.lhs.true57
  %call76 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %arrayidx79 = bitcast i32* %operands59 to %union.tree_node**
  %27 = load %union.tree_node** %arrayidx79, align 8, !tbaa !17
  tail call void @do_jump(%union.tree_node* %27, %struct.rtx_def* %call76, %struct.rtx_def* null) #6
  %28 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %28, i64 0, i32 1
  %29 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  %x_block_stack.i = getelementptr inbounds %struct.stmt_status* %29, i64 0, i32 0
  %30 = load %struct.nesting** %x_block_stack.i, align 8, !tbaa !9
  %tobool.i = icmp eq %struct.nesting* %30, null
  br i1 %tobool.i, label %start_cleanup_deferral.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then75
  %conditional_code.i = getelementptr inbounds %struct.nesting* %30, i64 0, i32 4, i32 0, i32 10
  %31 = load i32* %conditional_code.i, align 4, !tbaa !104
  %inc.i = add nsw i32 %31, 1
  store i32 %inc.i, i32* %conditional_code.i, align 4, !tbaa !104
  br label %start_cleanup_deferral.exit

start_cleanup_deferral.exit:                      ; preds = %if.then75, %if.then.i
  %32 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %type81 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 0, i32 1
  %33 = load %union.tree_node** %type81, align 8, !tbaa !76
  %type83 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 0, i32 1
  %34 = load %union.tree_node** %type83, align 8, !tbaa !76
  %result = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 11
  %35 = load %union.tree_node** %result, align 8, !tbaa !105
  %36 = load %union.tree_node** %23, align 8, !tbaa !17
  %call87 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 48, %union.tree_node* %34, %union.tree_node* %35, %union.tree_node* %36) #6
  %side_effects_flag = getelementptr inbounds %union.tree_node* %call87, i64 0, i32 0, i32 0, i32 2
  %bf.load89 = load i32* %side_effects_flag, align 8
  %bf.set = or i32 %bf.load89, 256
  store i32 %bf.set, i32* %side_effects_flag, align 8
  tail call void @expand_return(%union.tree_node* %call87)
  %call91 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call76) #6
  %37 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %type93 = getelementptr inbounds %union.tree_node* %37, i64 0, i32 0, i32 0, i32 1
  %38 = load %union.tree_node** %type93, align 8, !tbaa !76
  %type95 = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 0, i32 1
  %39 = load %union.tree_node** %type95, align 8, !tbaa !76
  %result97 = getelementptr inbounds %union.tree_node* %37, i64 0, i32 0, i32 11
  %40 = load %union.tree_node** %result97, align 8, !tbaa !105
  %arrayidx100 = getelementptr inbounds i32* %operands59, i64 4
  %41 = bitcast i32* %arrayidx100 to %union.tree_node**
  %42 = load %union.tree_node** %41, align 8, !tbaa !17
  %call101 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 48, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %42) #6
  %side_effects_flag103 = getelementptr inbounds %union.tree_node* %call101, i64 0, i32 0, i32 0, i32 2
  %bf.load104 = load i32* %side_effects_flag103, align 8
  %bf.set106 = or i32 %bf.load104, 256
  store i32 %bf.set106, i32* %side_effects_flag103, align 8
  tail call void @expand_return(%union.tree_node* %call101)
  %43 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i452 = getelementptr inbounds %struct.function* %43, i64 0, i32 1
  %44 = load %struct.stmt_status** %stmt.i452, align 8, !tbaa !1
  %x_block_stack.i453 = getelementptr inbounds %struct.stmt_status* %44, i64 0, i32 0
  %45 = load %struct.nesting** %x_block_stack.i453, align 8, !tbaa !9
  %tobool.i454 = icmp eq %struct.nesting* %45, null
  br i1 %tobool.i454, label %if.end353, label %if.then.i456

if.then.i456:                                     ; preds = %start_cleanup_deferral.exit
  %conditional_code.i455 = getelementptr inbounds %struct.nesting* %45, i64 0, i32 4, i32 0, i32 10
  %46 = load i32* %conditional_code.i455, align 4, !tbaa !104
  %dec.i = add nsw i32 %46, -1
  store i32 %dec.i, i32* %conditional_code.i455, align 4, !tbaa !104
  br label %if.end353

if.end107:                                        ; preds = %lor.lhs.false66, %land.lhs.true51, %land.lhs.true49, %if.end45
  %47 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %result109 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 11
  %48 = load %union.tree_node** %result109, align 8, !tbaa !105
  %rtl = getelementptr inbounds %union.tree_node* %48, i64 0, i32 0, i32 17
  %49 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  %tobool111 = icmp eq %struct.rtx_def* %49, null
  br i1 %tobool111, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.end107
  tail call void @make_decl_rtl(%union.tree_node* %48, i8* null) #6
  %50 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %result119 = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 11
  %51 = load %union.tree_node** %result119, align 8, !tbaa !105
  %rtl121 = getelementptr inbounds %union.tree_node* %51, i64 0, i32 0, i32 17
  %52 = load %struct.rtx_def** %rtl121, align 8, !tbaa !59
  br label %cond.end

cond.end:                                         ; preds = %if.end107, %cond.false
  %53 = phi %union.tree_node* [ %51, %cond.false ], [ %48, %if.end107 ]
  %cond = phi %struct.rtx_def* [ %52, %cond.false ], [ %49, %if.end107 ]
  br i1 %cmp48, label %land.lhs.true123, label %if.else350

land.lhs.true123:                                 ; preds = %cond.end
  %type125 = getelementptr inbounds %union.tree_node* %retval_rhs.0, i64 0, i32 0, i32 0, i32 1
  %54 = load %union.tree_node** %type125, align 8, !tbaa !76
  %type126 = bitcast %union.tree_node* %54 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type126, i64 0, i32 6
  %bf.load127 = load i32* %mode, align 4
  %bf.clear128 = and i32 %bf.load127, 65024
  %cmp129 = icmp eq i32 %bf.clear128, 26112
  br i1 %cmp129, label %land.lhs.true130, label %land.lhs.true291

land.lhs.true130:                                 ; preds = %land.lhs.true123
  %55 = getelementptr inbounds %struct.rtx_def* %cond, i64 0, i32 0
  %bf.load131 = load i32* %55, align 8
  %bf.clear132 = and i32 %bf.load131, 65535
  %cmp133 = icmp eq i32 %bf.clear132, 61
  br i1 %cmp133, label %if.then134, label %land.lhs.true291

if.then134:                                       ; preds = %land.lhs.true130
  %call137 = tail call i64 @int_size_in_bytes(%union.tree_node* %54) #6
  %56 = load i32* @target_flags, align 4, !tbaa !58
  %and = and i32 %56, 33554432
  %57 = lshr exact i32 %and, 23
  %58 = add i32 %57, 4
  %conv428 = zext i32 %58 to i64
  %add = add i64 %call137, -1
  %sub = add i64 %add, %conv428
  %div = udiv i64 %sub, %conv428
  %conv144 = trunc i64 %div to i32
  %59 = load %union.tree_node** %type125, align 8, !tbaa !76
  %align = getelementptr inbounds %union.tree_node* %59, i64 0, i32 0, i32 7
  %60 = bitcast %union.tree_node** %align to i32*
  %61 = load i32* %60, align 4, !tbaa !106
  %62 = lshr exact i32 %and, 20
  %63 = add i32 %62, 32
  %cmp151 = icmp ult i32 %61, %63
  %. = select i1 %cmp151, i32 %61, i32 %63
  %sext = shl i64 %div, 32
  %mul = ashr exact i64 %sext, 29
  %64 = alloca i8, i64 %mul, align 1
  %65 = bitcast i8* %64 to %struct.rtx_def**
  %call165 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %retval_rhs.0, %struct.rtx_def* null, i32 0, i32 0) #6
  %cmp166 = icmp eq i64 %call137, 0
  br i1 %cmp166, label %if.then168, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then134
  %mul170 = shl i64 %call137, 3
  %cmp171477 = icmp eq i64 %mul170, 0
  br i1 %cmp171477, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %conv212 = zext i32 %. to i64
  br label %for.body

if.then168:                                       ; preds = %if.then134
  %call.i457 = tail call %struct.rtx_def* @get_last_insn() #6
  tail call void @clobber_return_register() #6
  %66 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_cleanup_label.i.i458 = getelementptr inbounds %struct.function* %66, i64 0, i32 23
  %67 = load %struct.rtx_def** %x_cleanup_label.i.i458, align 8, !tbaa !102
  %tobool.i.i459 = icmp eq %struct.rtx_def* %67, null
  br i1 %tobool.i.i459, label %cond.false.i.i461, label %cond.end.i.i466

cond.false.i.i461:                                ; preds = %if.then168
  %x_return_label.i.i460 = getelementptr inbounds %struct.function* %66, i64 0, i32 24
  %68 = load %struct.rtx_def** %x_return_label.i.i460, align 8, !tbaa !75
  br label %cond.end.i.i466

cond.end.i.i466:                                  ; preds = %cond.false.i.i461, %if.then168
  %cond.i.i462 = phi %struct.rtx_def* [ %68, %cond.false.i.i461 ], [ %67, %if.then168 ]
  tail call void @clear_pending_stack_adjust() #6
  tail call void @do_pending_stack_adjust() #6
  %69 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i.i463 = getelementptr inbounds %struct.function* %69, i64 0, i32 1
  %70 = load %struct.stmt_status** %stmt.i.i463, align 8, !tbaa !1
  %x_last_expr_type.i.i464 = getelementptr inbounds %struct.stmt_status* %70, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type.i.i464, align 8, !tbaa !40
  %cmp.i.i465 = icmp eq %struct.rtx_def* %cond.i.i462, null
  br i1 %cmp.i.i465, label %if.then.i.i469, label %expand_null_return.exit471

if.then.i.i469:                                   ; preds = %cond.end.i.i466
  %call.i.i467 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %71 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_return_label2.i.i468 = getelementptr inbounds %struct.function* %71, i64 0, i32 24
  store %struct.rtx_def* %call.i.i467, %struct.rtx_def** %x_return_label2.i.i468, align 8, !tbaa !75
  br label %expand_null_return.exit471

expand_null_return.exit471:                       ; preds = %cond.end.i.i466, %if.then.i.i469
  %end_label.0.i.i470 = phi %struct.rtx_def* [ %call.i.i467, %if.then.i.i469 ], [ %cond.i.i462, %cond.end.i.i466 ]
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %end_label.0.i.i470, %struct.rtx_def* %call.i457) #6
  br label %if.end353

for.body:                                         ; preds = %for.body.lr.ph, %if.end211
  %dst.0481 = phi %struct.rtx_def* [ null, %for.body.lr.ph ], [ %dst.1, %if.end211 ]
  %src.0480 = phi %struct.rtx_def* [ null, %for.body.lr.ph ], [ %src.1, %if.end211 ]
  %bitpos.0479 = phi i64 [ 0, %for.body.lr.ph ], [ %add235, %if.end211 ]
  %72 = load i32* @target_flags, align 4, !tbaa !58
  %and173 = lshr i32 %72, 20
  %73 = and i32 %and173, 32
  %74 = add i32 %73, 32
  %conv176429 = zext i32 %74 to i64
  %75 = add i64 %conv176429, -1
  %rem = and i64 %75, %bitpos.0479
  %cmp177 = icmp eq i64 %rem, 0
  %cmp180 = icmp eq i64 %bitpos.0479, 0
  %or.cond435 = or i1 %cmp177, %cmp180
  br i1 %or.cond435, label %if.then182, label %if.end195

if.then182:                                       ; preds = %for.body
  %76 = load i32* @word_mode, align 4, !tbaa !68
  %call183 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %76) #6
  %77 = load i32* @target_flags, align 4, !tbaa !58
  %and184 = lshr i32 %77, 20
  %78 = and i32 %and184, 32
  %79 = add i32 %78, 32
  %conv187433 = zext i32 %79 to i64
  %div188 = udiv i64 %bitpos.0479, %conv187433
  %arrayidx189 = getelementptr inbounds %struct.rtx_def** %65, i64 %div188
  store %struct.rtx_def* %call183, %struct.rtx_def** %arrayidx189, align 8, !tbaa !17
  %80 = getelementptr inbounds %struct.rtx_def* %call183, i64 0, i32 0
  %bf.load190 = load i32* %80, align 8
  %bf.lshr191 = lshr i32 %bf.load190, 16
  %bf.clear192 = and i32 %bf.lshr191, 255
  %idxprom434 = zext i32 %bf.clear192 to i64
  %arrayidx193 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 %idxprom434
  %81 = load %struct.rtx_def** %arrayidx193, align 8, !tbaa !17
  %call194 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call183, %struct.rtx_def* %81) #6
  %.pre = load i32* @target_flags, align 4, !tbaa !58
  br label %if.end195

if.end195:                                        ; preds = %for.body, %if.then182
  %82 = phi i32 [ %.pre, %if.then182 ], [ %72, %for.body ]
  %dst.1 = phi %struct.rtx_def* [ %call183, %if.then182 ], [ %dst.0481, %for.body ]
  %and196 = lshr i32 %82, 20
  %83 = and i32 %and196, 32
  %84 = add i32 %83, 32
  %conv199430 = zext i32 %84 to i64
  %85 = add i64 %conv199430, -1
  %rem200 = and i64 %85, %bitpos.0479
  %cmp201 = icmp eq i64 %rem200, 0
  br i1 %cmp201, label %if.then203, label %if.end211

if.then203:                                       ; preds = %if.end195
  %div208 = udiv i64 %bitpos.0479, %conv199430
  %conv209 = trunc i64 %div208 to i32
  %call210 = tail call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %call165, i32 %conv209, i32 51) #6
  %.pre484 = load i32* @target_flags, align 4, !tbaa !58
  br label %if.end211

if.end211:                                        ; preds = %if.then203, %if.end195
  %86 = phi i32 [ %.pre484, %if.then203 ], [ %82, %if.end195 ]
  %src.1 = phi %struct.rtx_def* [ %call210, %if.then203 ], [ %src.0480, %if.end195 ]
  %and213 = lshr i32 %86, 20
  %87 = and i32 %and213, 32
  %88 = add i32 %87, 32
  %conv216431 = zext i32 %88 to i64
  %89 = add i64 %conv216431, -1
  %rem217 = and i64 %89, %bitpos.0479
  %90 = load i32* @word_mode, align 4, !tbaa !68
  %call228 = tail call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %src.1, i64 %conv212, i64 %rem217, i32 1, %struct.rtx_def* null, i32 %90, i32 %90, i64 %conv216431) #6
  %91 = load i32* @target_flags, align 4, !tbaa !58
  %and229 = lshr i32 %91, 20
  %92 = and i32 %and229, 32
  %93 = add i32 %92, 32
  %conv232432 = zext i32 %93 to i64
  %call233 = tail call %struct.rtx_def* @store_bit_field(%struct.rtx_def* %dst.1, i64 %conv212, i64 %rem217, i32 %90, %struct.rtx_def* %call228, i64 %conv232432) #6
  %add235 = add i64 %bitpos.0479, %conv212
  %cmp171 = icmp ult i64 %add235, %mul170
  br i1 %cmp171, label %for.body, label %for.end

for.end:                                          ; preds = %if.end211, %for.cond.preheader
  %94 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !68
  %cond436475 = icmp eq i32 %94, 0
  br i1 %cond436475, label %if.then256, label %for.body241

for.body241:                                      ; preds = %for.end, %for.inc249
  %tmpmode.0476 = phi i32 [ %conv252, %for.inc249 ], [ %94, %for.end ]
  %idxprom242 = sext i32 %tmpmode.0476 to i64
  %arrayidx243 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom242
  %95 = load i8* %arrayidx243, align 1, !tbaa !68
  %conv244 = zext i8 %95 to i64
  %cmp245 = icmp ult i64 %conv244, %call137
  br i1 %cmp245, label %for.inc249, label %if.end257

for.inc249:                                       ; preds = %for.body241
  %arrayidx251 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom242
  %96 = load i8* %arrayidx251, align 1, !tbaa !68
  %conv252 = zext i8 %96 to i32
  %cond436 = icmp eq i8 %96, 0
  br i1 %cond436, label %if.then256, label %for.body241

if.then256:                                       ; preds = %for.inc249, %for.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 3202, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.expand_return, i64 0, i64 0)) #7
  unreachable

if.end257:                                        ; preds = %for.body241
  %bf.load258 = load i32* %55, align 8
  %bf.value = shl i32 %tmpmode.0476, 16
  %bf.shl = and i32 %bf.value, 16711680
  %bf.clear259 = and i32 %bf.load258, -16711681
  %bf.set260 = or i32 %bf.clear259, %bf.shl
  store i32 %bf.set260, i32* %55, align 8
  %97 = load i32* @word_mode, align 4, !tbaa !68
  %idxprom264 = sext i32 %97 to i64
  %arrayidx265 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom264
  %98 = load i8* %arrayidx265, align 1, !tbaa !68
  %cmp267 = icmp ult i8 %95, %98
  %.tmpmode.0 = select i1 %cmp267, i32 %97, i32 %tmpmode.0476
  %call272 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %.tmpmode.0) #6
  tail call void @emit_queue() #6
  %cmp274473 = icmp sgt i32 %conv144, 0
  br i1 %cmp274473, label %for.body276.lr.ph, label %for.end282

for.body276.lr.ph:                                ; preds = %if.end257
  %.lobit = lshr i32 %56, 23
  %99 = and i32 %.lobit, 4
  %100 = add i32 %99, 4
  %101 = zext i32 %100 to i64
  %102 = add i64 %call137, %101
  %103 = add i64 %102, -1
  %104 = udiv i64 %103, %101
  %105 = trunc i64 %104 to i32
  br label %for.body276

for.body276:                                      ; preds = %for.body276, %for.body276.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body276.lr.ph ], [ %indvars.iv.next, %for.body276 ]
  %106 = trunc i64 %indvars.iv to i32
  %call277 = tail call %struct.rtx_def* @operand_subword(%struct.rtx_def* %call272, i32 %106, i32 0, i32 %.tmpmode.0) #6
  %arrayidx279 = getelementptr inbounds %struct.rtx_def** %65, i64 %indvars.iv
  %107 = load %struct.rtx_def** %arrayidx279, align 8, !tbaa !17
  %call280 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call277, %struct.rtx_def* %107) #6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %105
  br i1 %exitcond, label %for.end282, label %for.body276

for.end282:                                       ; preds = %for.body276, %if.end257
  %cmp283 = icmp eq i32 %tmpmode.0476, %.tmpmode.0
  br i1 %cmp283, label %if.end287, label %if.then285

if.then285:                                       ; preds = %for.end282
  %call286 = tail call %struct.rtx_def* @gen_lowpart(i32 %tmpmode.0476, %struct.rtx_def* %call272) #6
  br label %if.end287

if.end287:                                        ; preds = %for.end282, %if.then285
  %result_reg.0 = phi %struct.rtx_def* [ %call286, %if.then285 ], [ %call272, %for.end282 ]
  tail call fastcc void @expand_value_return(%struct.rtx_def* %result_reg.0)
  br label %if.end353

land.lhs.true291:                                 ; preds = %land.lhs.true130, %land.lhs.true123
  %code295 = getelementptr inbounds %union.tree_node* %54, i64 0, i32 0, i32 0, i32 2
  %bf.load296 = load i32* %code295, align 8
  %bf.clear297 = and i32 %bf.load296, 255
  %cmp298 = icmp eq i32 %bf.clear297, 5
  br i1 %cmp298, label %if.else350, label %land.lhs.true300

land.lhs.true300:                                 ; preds = %land.lhs.true291
  %108 = getelementptr inbounds %struct.rtx_def* %cond, i64 0, i32 0
  %bf.load301 = load i32* %108, align 8
  %bf.clear302 = and i32 %bf.load301, 65535
  switch i32 %bf.clear302, label %if.else350 [
    i32 61, label %if.then310
    i32 39, label %if.then310
  ]

if.then310:                                       ; preds = %land.lhs.true300, %land.lhs.true300
  %type314 = getelementptr inbounds %union.tree_node* %53, i64 0, i32 0, i32 0, i32 1
  %109 = load %union.tree_node** %type314, align 8, !tbaa !76
  %readonly_flag = getelementptr inbounds %union.tree_node* %109, i64 0, i32 0, i32 0, i32 2
  %bf.load316 = load i32* %readonly_flag, align 8
  %110 = lshr i32 %bf.load316, 10
  %mul324 = and i32 %110, 2
  %type325 = bitcast %union.tree_node* %109 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type325, i64 0, i32 6
  %bf.load326 = load i32* %restrict_flag, align 4
  %111 = lshr i32 %bf.load326, 19
  %mul329 = and i32 %111, 4
  %bf.clear334 = and i32 %bf.load316, 255
  %cmp335 = icmp eq i32 %bf.clear334, 20
  br i1 %cmp335, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then310
  %type338 = getelementptr inbounds %union.tree_node* %109, i64 0, i32 0, i32 0, i32 1
  %112 = load %union.tree_node** %type338, align 8, !tbaa !76
  %tobool339 = icmp ne %union.tree_node* %112, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then310
  %113 = phi i1 [ false, %if.then310 ], [ %tobool339, %land.rhs ]
  %land.ext = zext i1 %113 to i32
  %mul340 = shl nuw nsw i32 %land.ext, 3
  %or = or i32 %mul324, %mul329
  %or330 = or i32 %or, %mul340
  %or342 = or i32 %or330, 1
  %call343 = tail call %union.tree_node* @build_qualified_type(%union.tree_node* %109, i32 %or342) #6
  %call344 = tail call %struct.rtx_def* @assign_temp(%union.tree_node* %call343, i32 0, i32 0, i32 1) #6
  %114 = getelementptr inbounds %struct.rtx_def* %call344, i64 0, i32 0
  %bf.load345 = load i32* %114, align 8
  %bf.lshr346 = lshr i32 %bf.load345, 16
  %bf.clear347 = and i32 %bf.lshr346, 255
  %call348 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %retval_rhs.0, %struct.rtx_def* %call344, i32 %bf.clear347, i32 0) #6
  %call349 = tail call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %call348) #6
  tail call void @emit_queue() #6
  tail call fastcc void @expand_value_return(%struct.rtx_def* %call349)
  br label %if.end353

if.else350:                                       ; preds = %cond.end, %land.lhs.true300, %land.lhs.true291
  %115 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call351 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %retval, %struct.rtx_def* %115, i32 0, i32 0) #6
  tail call void @emit_queue() #6
  tail call fastcc void @expand_value_return(%struct.rtx_def* %cond)
  br label %if.end353

if.end353:                                        ; preds = %if.then.i456, %start_cleanup_deferral.exit, %land.end, %if.else350, %expand_null_return.exit, %expand_null_return.exit451, %expand_null_return.exit471, %if.end287
  ret void
}

; Function Attrs: nounwind uwtable
define void @start_cleanup_deferral() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %tobool = icmp eq %struct.nesting* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %conditional_code = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 10
  %3 = load i32* %conditional_code, align 4, !tbaa !104
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %conditional_code, align 4, !tbaa !104
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

declare %union.tree_node* @build(i32, %union.tree_node*, ...) #2

; Function Attrs: nounwind uwtable
define void @end_cleanup_deferral() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %tobool = icmp eq %struct.nesting* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %conditional_code = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 10
  %3 = load i32* %conditional_code, align 4, !tbaa !104
  %dec = add nsw i32 %3, -1
  store i32 %dec, i32* %conditional_code, align 4, !tbaa !104
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

declare i64 @int_size_in_bytes(%union.tree_node*) #2

declare %struct.rtx_def* @operand_subword_force(%struct.rtx_def*, i32, i32) #2

declare %struct.rtx_def* @store_bit_field(%struct.rtx_def*, i64, i64, i32, %struct.rtx_def*, i64) #2

declare %struct.rtx_def* @extract_bit_field(%struct.rtx_def*, i64, i64, i32, %struct.rtx_def*, i32, i32, i64) #2

declare %struct.rtx_def* @operand_subword(%struct.rtx_def*, i32, i32, i32) #2

declare %struct.rtx_def* @gen_lowpart(i32, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @expand_value_return(%struct.rtx_def* %val) #0 {
entry:
  %call = tail call %struct.rtx_def* @get_last_insn() #6
  %0 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %result = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 11
  %1 = load %union.tree_node** %result, align 8, !tbaa !105
  %rtl = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 17
  %2 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  %tobool = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool, label %cond.false, label %cond.end

cond.false:                                       ; preds = %entry
  tail call void @make_decl_rtl(%union.tree_node* %1, i8* null) #6
  %3 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %result9 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 11
  %4 = load %union.tree_node** %result9, align 8, !tbaa !105
  %rtl11 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 17
  %5 = load %struct.rtx_def** %rtl11, align 8, !tbaa !59
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.false
  %6 = phi %union.tree_node* [ %4, %cond.false ], [ %1, %entry ]
  %cond = phi %struct.rtx_def* [ %5, %cond.false ], [ %2, %entry ]
  %cmp = icmp eq %struct.rtx_def* %cond, %val
  br i1 %cmp, label %if.end19, label %if.then

if.then:                                          ; preds = %cond.end
  %7 = getelementptr inbounds %struct.rtx_def* %cond, i64 0, i32 0
  %bf.load = load i32* %7, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp15 = icmp eq i32 %bf.clear, 39
  br i1 %cmp15, label %if.then16, label %if.else

if.then16:                                        ; preds = %if.then
  %type14 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type14, align 8, !tbaa !76
  %call17 = tail call i64 @int_size_in_bytes(%union.tree_node* %8) #6
  %conv = trunc i64 %call17 to i32
  tail call void @emit_group_load(%struct.rtx_def* %cond, %struct.rtx_def* %val, i32 %conv) #6
  br label %if.end19

if.else:                                          ; preds = %if.then
  %call18 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %cond, %struct.rtx_def* %val) #6
  br label %if.end19

if.end19:                                         ; preds = %cond.end, %if.then16, %if.else
  %9 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_cleanup_label.i = getelementptr inbounds %struct.function* %9, i64 0, i32 23
  %10 = load %struct.rtx_def** %x_cleanup_label.i, align 8, !tbaa !102
  %tobool.i = icmp eq %struct.rtx_def* %10, null
  br i1 %tobool.i, label %cond.false.i, label %cond.end.i

cond.false.i:                                     ; preds = %if.end19
  %x_return_label.i = getelementptr inbounds %struct.function* %9, i64 0, i32 24
  %11 = load %struct.rtx_def** %x_return_label.i, align 8, !tbaa !75
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %if.end19
  %cond.i = phi %struct.rtx_def* [ %11, %cond.false.i ], [ %10, %if.end19 ]
  tail call void @clear_pending_stack_adjust() #6
  tail call void @do_pending_stack_adjust() #6
  %12 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %12, i64 0, i32 1
  %13 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  %x_last_expr_type.i = getelementptr inbounds %struct.stmt_status* %13, i64 0, i32 8
  store %union.tree_node* null, %union.tree_node** %x_last_expr_type.i, align 8, !tbaa !40
  %cmp.i = icmp eq %struct.rtx_def* %cond.i, null
  br i1 %cmp.i, label %if.then.i, label %expand_null_return_1.exit

if.then.i:                                        ; preds = %cond.end.i
  %call.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  %14 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_return_label2.i = getelementptr inbounds %struct.function* %14, i64 0, i32 24
  store %struct.rtx_def* %call.i, %struct.rtx_def** %x_return_label2.i, align 8, !tbaa !75
  br label %expand_null_return_1.exit

expand_null_return_1.exit:                        ; preds = %cond.end.i, %if.then.i
  %end_label.0.i = phi %struct.rtx_def* [ %call.i, %if.then.i ], [ %cond.i, %cond.end.i ]
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %end_label.0.i, %struct.rtx_def* %call) #6
  ret void
}

declare %struct.rtx_def* @force_not_mem(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define i32 @drop_through_at_end_p() #0 {
entry:
  %call = tail call %struct.rtx_def* @get_last_insn() #6
  %tobool10 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool10, label %land.end6, label %land.rhs

land.rhs:                                         ; preds = %entry, %while.body
  %insn.011 = phi %struct.rtx_def* [ %1, %while.body ], [ %call, %entry ]
  %0 = getelementptr inbounds %struct.rtx_def* %insn.011, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %while.body, label %land.rhs2

while.body:                                       ; preds = %land.rhs
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.011, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !17
  %tobool = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool, label %land.end6, label %land.rhs

land.rhs2:                                        ; preds = %land.rhs
  %cmp5 = icmp ne i32 %bf.clear, 35
  br label %land.end6

land.end6:                                        ; preds = %while.body, %entry, %land.rhs2
  %2 = phi i1 [ %cmp5, %land.rhs2 ], [ false, %entry ], [ false, %while.body ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define i32 @optimize_tail_recursion(%union.tree_node* readonly %arguments, %struct.rtx_def* %last_insn) #0 {
entry:
  %0 = load %union.tree_node** @current_function_decl, align 8, !tbaa !17
  %arguments1 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 10
  %1 = load %union.tree_node** %arguments1, align 8, !tbaa !107
  %call = tail call fastcc i32 @tail_recursion_args(%union.tree_node* %arguments, %union.tree_node* %1)
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_tail_recursion_label = getelementptr inbounds %struct.function* %2, i64 0, i32 28
  %3 = load %struct.rtx_def** %x_tail_recursion_label, align 8, !tbaa !108
  %cmp = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %call3 = tail call %struct.rtx_def* @gen_label_rtx() #6
  %4 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_tail_recursion_label4 = getelementptr inbounds %struct.function* %4, i64 0, i32 28
  store %struct.rtx_def* %call3, %struct.rtx_def** %x_tail_recursion_label4, align 8, !tbaa !108
  %5 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_tail_recursion_label5 = getelementptr inbounds %struct.function* %5, i64 0, i32 28
  %6 = load %struct.rtx_def** %x_tail_recursion_label5, align 8, !tbaa !108
  %x_tail_recursion_reentry = getelementptr inbounds %struct.function* %5, i64 0, i32 29
  %7 = load %struct.rtx_def** %x_tail_recursion_reentry, align 8, !tbaa !71
  %call6 = tail call %struct.rtx_def* @emit_label_after(%struct.rtx_def* %6, %struct.rtx_def* %7) #6
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  tail call void @emit_queue() #6
  %8 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_tail_recursion_label7 = getelementptr inbounds %struct.function* %8, i64 0, i32 28
  %9 = load %struct.rtx_def** %x_tail_recursion_label7, align 8, !tbaa !108
  tail call fastcc void @expand_goto_internal(%union.tree_node* null, %struct.rtx_def* %9, %struct.rtx_def* %last_insn)
  %call8 = tail call %struct.rtx_def* @emit_barrier() #6
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i32 [ 1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @tail_recursion_args(%union.tree_node* readonly %actuals, %union.tree_node* %formals) #0 {
entry:
  %tobool218 = icmp ne %union.tree_node* %actuals, null
  %tobool1219 = icmp ne %union.tree_node* %formals, null
  %tobool1.220 = and i1 %tobool218, %tobool1219
  br i1 %tobool1.220, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.inc
  %i.0223 = phi i32 [ %inc, %for.inc ], [ 0, %entry ]
  %f.0222 = phi %union.tree_node* [ %13, %for.inc ], [ %formals, %entry ]
  %a.0221 = phi %union.tree_node* [ %12, %for.inc ], [ %actuals, %entry ]
  %value = getelementptr inbounds %union.tree_node* %a.0221, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !72
  %type = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !76
  %3 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 15
  %4 = load %union.tree_node** %3, align 8, !tbaa !109
  %type4 = getelementptr inbounds %union.tree_node* %f.0222, i64 0, i32 0, i32 0, i32 1
  %5 = load %union.tree_node** %type4, align 8, !tbaa !76
  %6 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 15
  %7 = load %union.tree_node** %6, align 8, !tbaa !109
  %cmp = icmp eq %union.tree_node* %4, %7
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %for.body
  %rtl = getelementptr inbounds %union.tree_node* %f.0222, i64 0, i32 0, i32 17
  %8 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  %tobool7 = icmp eq %struct.rtx_def* %8, null
  br i1 %tobool7, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.end
  tail call void @make_decl_rtl(%union.tree_node* %f.0222, i8* null) #6
  %9 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  br label %cond.end

cond.end:                                         ; preds = %if.end, %cond.false
  %cond = phi %struct.rtx_def* [ %9, %cond.false ], [ %8, %if.end ]
  %10 = getelementptr inbounds %struct.rtx_def* %cond, i64 0, i32 0
  %bf.load = load i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp12 = icmp eq i32 %bf.clear, 61
  br i1 %cmp12, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %cond.end
  %mode = getelementptr inbounds %union.tree_node* %f.0222, i64 0, i32 0, i32 5
  %11 = bitcast i48* %mode to i64*
  %bf.load14 = load i64* %11, align 8
  %bf.cast = and i64 %bf.load14, 255
  %cmp16 = icmp eq i64 %bf.cast, 51
  br i1 %cmp16, label %return, label %for.inc

for.inc:                                          ; preds = %lor.lhs.false
  %chain = getelementptr inbounds %union.tree_node* %a.0221, i64 0, i32 0, i32 0, i32 0
  %12 = load %union.tree_node** %chain, align 8, !tbaa !79
  %chain21 = getelementptr inbounds %union.tree_node* %f.0222, i64 0, i32 0, i32 0, i32 0
  %13 = load %union.tree_node** %chain21, align 8, !tbaa !79
  %inc = add nsw i32 %i.0223, 1
  %tobool = icmp ne %union.tree_node* %12, null
  %tobool1 = icmp ne %union.tree_node* %13, null
  %tobool1. = and i1 %tobool, %tobool1
  br i1 %tobool1., label %for.body, label %for.cond.for.end_crit_edge

for.cond.for.end_crit_edge:                       ; preds = %for.inc
  %phitmp = sext i32 %inc to i64
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  %tobool1.lcssa = phi i1 [ %tobool1, %for.cond.for.end_crit_edge ], [ %tobool1219, %entry ]
  %tobool.lcssa = phi i1 [ %tobool, %for.cond.for.end_crit_edge ], [ %tobool218, %entry ]
  %i.0.lcssa = phi i64 [ %phitmp, %for.cond.for.end_crit_edge ], [ 0, %entry ]
  %or.cond = or i1 %tobool.lcssa, %tobool1.lcssa
  br i1 %or.cond, label %return, label %if.end26

if.end26:                                         ; preds = %for.end
  %14 = alloca %struct.rtx_def*, i64 %i.0.lcssa, align 1
  %tobool28215 = icmp eq %union.tree_node* %actuals, null
  br i1 %tobool28215, label %for.cond79.preheader, label %for.body29

for.cond37.preheader:                             ; preds = %for.body29
  br i1 %tobool28215, label %for.cond79.preheader, label %for.cond40.preheader

for.body29:                                       ; preds = %if.end26, %for.body29
  %indvars.iv230 = phi i64 [ %indvars.iv.next231, %for.body29 ], [ 0, %if.end26 ]
  %a.1216 = phi %union.tree_node* [ %17, %for.body29 ], [ %actuals, %if.end26 ]
  %value31 = getelementptr inbounds %union.tree_node* %a.1216, i64 0, i32 0, i32 2
  %15 = bitcast i32* %value31 to %union.tree_node**
  %16 = load %union.tree_node** %15, align 8, !tbaa !72
  %call = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %16, %struct.rtx_def* null, i32 0, i32 0) #6
  %arrayidx = getelementptr inbounds %struct.rtx_def** %14, i64 %indvars.iv230
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx, align 8, !tbaa !17
  %chain34 = getelementptr inbounds %union.tree_node* %a.1216, i64 0, i32 0, i32 0, i32 0
  %17 = load %union.tree_node** %chain34, align 8, !tbaa !79
  %indvars.iv.next231 = add nuw nsw i64 %indvars.iv230, 1
  %tobool28 = icmp eq %union.tree_node* %17, null
  br i1 %tobool28, label %for.cond37.preheader, label %for.body29

for.cond40.preheader:                             ; preds = %for.cond37.preheader, %for.inc74
  %indvars.iv228 = phi i64 [ %indvars.iv.next229, %for.inc74 ], [ 0, %for.cond37.preheader ]
  %a.2213 = phi %union.tree_node* [ %23, %for.inc74 ], [ %actuals, %for.cond37.preheader ]
  %18 = trunc i64 %indvars.iv228 to i32
  %cmp41209 = icmp sgt i32 %18, 0
  br i1 %cmp41209, label %for.body43.lr.ph, label %for.inc74

for.body43.lr.ph:                                 ; preds = %for.cond40.preheader
  %arrayidx56 = getelementptr inbounds %struct.rtx_def** %14, i64 %indvars.iv228
  %19 = load %struct.rtx_def** %arrayidx56, align 8, !tbaa !17
  br label %for.body43

for.cond79.preheader:                             ; preds = %for.inc74, %if.end26, %for.cond37.preheader
  %tobool80205 = icmp eq %union.tree_node* %formals, null
  br i1 %tobool80205, label %for.end145, label %for.body81

for.body43:                                       ; preds = %for.body43.lr.ph, %for.inc61
  %j.0211 = phi i32 [ 0, %for.body43.lr.ph ], [ %inc64, %for.inc61 ]
  %f.1210 = phi %union.tree_node* [ %formals, %for.body43.lr.ph ], [ %22, %for.inc61 ]
  %rtl45 = getelementptr inbounds %union.tree_node* %f.1210, i64 0, i32 0, i32 17
  %20 = load %struct.rtx_def** %rtl45, align 8, !tbaa !59
  %tobool46 = icmp eq %struct.rtx_def* %20, null
  br i1 %tobool46, label %cond.false50, label %cond.end53

cond.false50:                                     ; preds = %for.body43
  tail call void @make_decl_rtl(%union.tree_node* %f.1210, i8* null) #6
  %21 = load %struct.rtx_def** %rtl45, align 8, !tbaa !59
  br label %cond.end53

cond.end53:                                       ; preds = %for.body43, %cond.false50
  %cond54 = phi %struct.rtx_def* [ %21, %cond.false50 ], [ %20, %for.body43 ]
  %call57 = tail call i32 @reg_mentioned_p(%struct.rtx_def* %cond54, %struct.rtx_def* %19) #6
  %tobool58 = icmp eq i32 %call57, 0
  br i1 %tobool58, label %for.inc61, label %if.then67

for.inc61:                                        ; preds = %cond.end53
  %chain63 = getelementptr inbounds %union.tree_node* %f.1210, i64 0, i32 0, i32 0, i32 0
  %22 = load %union.tree_node** %chain63, align 8, !tbaa !79
  %inc64 = add nsw i32 %j.0211, 1
  %cmp41 = icmp slt i32 %inc64, %18
  br i1 %cmp41, label %for.body43, label %for.inc74

if.then67:                                        ; preds = %cond.end53
  %call70 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %19) #6
  store %struct.rtx_def* %call70, %struct.rtx_def** %arrayidx56, align 8, !tbaa !17
  br label %for.inc74

for.inc74:                                        ; preds = %for.inc61, %for.cond40.preheader, %if.then67
  %chain76 = getelementptr inbounds %union.tree_node* %a.2213, i64 0, i32 0, i32 0, i32 0
  %23 = load %union.tree_node** %chain76, align 8, !tbaa !79
  %indvars.iv.next229 = add nuw nsw i64 %indvars.iv228, 1
  %tobool38 = icmp eq %union.tree_node* %23, null
  br i1 %tobool38, label %for.cond79.preheader, label %for.cond40.preheader

for.body81:                                       ; preds = %for.cond79.preheader, %for.inc139
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc139 ], [ 0, %for.cond79.preheader ]
  %f.2207 = phi %union.tree_node* [ %36, %for.inc139 ], [ %formals, %for.cond79.preheader ]
  %a.3206 = phi %union.tree_node* [ %37, %for.inc139 ], [ %actuals, %for.cond79.preheader ]
  %rtl83 = getelementptr inbounds %union.tree_node* %f.2207, i64 0, i32 0, i32 17
  %24 = load %struct.rtx_def** %rtl83, align 8, !tbaa !59
  %tobool84 = icmp eq %struct.rtx_def* %24, null
  br i1 %tobool84, label %cond.false88, label %cond.end91

cond.false88:                                     ; preds = %for.body81
  tail call void @make_decl_rtl(%union.tree_node* %f.2207, i8* null) #6
  %25 = load %struct.rtx_def** %rtl83, align 8, !tbaa !59
  br label %cond.end91

cond.end91:                                       ; preds = %for.body81, %cond.false88
  %26 = phi %struct.rtx_def* [ %25, %cond.false88 ], [ %24, %for.body81 ]
  %27 = getelementptr inbounds %struct.rtx_def* %26, i64 0, i32 0
  %bf.load93 = load i32* %27, align 8
  %arrayidx96 = getelementptr inbounds %struct.rtx_def** %14, i64 %indvars.iv
  %28 = load %struct.rtx_def** %arrayidx96, align 8, !tbaa !17
  %29 = getelementptr inbounds %struct.rtx_def* %28, i64 0, i32 0
  %bf.load97 = load i32* %29, align 8
  %bf.lshr201 = xor i32 %bf.load97, %bf.load93
  %30 = and i32 %bf.lshr201, 16711680
  %cmp100 = icmp eq i32 %30, 0
  %tobool105 = icmp ne %struct.rtx_def* %26, null
  br i1 %cmp100, label %if.then102, label %if.else

if.then102:                                       ; preds = %cond.end91
  br i1 %tobool105, label %cond.end112, label %cond.false109

cond.false109:                                    ; preds = %if.then102
  tail call void @make_decl_rtl(%union.tree_node* %f.2207, i8* null) #6
  %31 = load %struct.rtx_def** %rtl83, align 8, !tbaa !59
  br label %cond.end112

cond.end112:                                      ; preds = %if.then102, %cond.false109
  %cond113 = phi %struct.rtx_def* [ %31, %cond.false109 ], [ %26, %if.then102 ]
  %call116 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %cond113, %struct.rtx_def* %28) #6
  br label %for.inc139

if.else:                                          ; preds = %cond.end91
  br i1 %tobool105, label %cond.end126, label %cond.false123

cond.false123:                                    ; preds = %if.else
  tail call void @make_decl_rtl(%union.tree_node* %f.2207, i8* null) #6
  %32 = load %struct.rtx_def** %rtl83, align 8, !tbaa !59
  br label %cond.end126

cond.end126:                                      ; preds = %if.else, %cond.false123
  %cond127 = phi %struct.rtx_def* [ %32, %cond.false123 ], [ %26, %if.else ]
  %value131 = getelementptr inbounds %union.tree_node* %a.3206, i64 0, i32 0, i32 2
  %33 = bitcast i32* %value131 to %union.tree_node**
  %34 = load %union.tree_node** %33, align 8, !tbaa !72
  %type133 = getelementptr inbounds %union.tree_node* %34, i64 0, i32 0, i32 0, i32 1
  %35 = load %union.tree_node** %type133, align 8, !tbaa !76
  %unsigned_flag = getelementptr inbounds %union.tree_node* %35, i64 0, i32 0, i32 0, i32 2
  %bf.load135 = load i32* %unsigned_flag, align 8
  %bf.lshr136 = lshr i32 %bf.load135, 13
  %bf.clear137 = and i32 %bf.lshr136, 1
  tail call void @convert_move(%struct.rtx_def* %cond127, %struct.rtx_def* %28, i32 %bf.clear137) #6
  br label %for.inc139

for.inc139:                                       ; preds = %cond.end112, %cond.end126
  %chain141 = getelementptr inbounds %union.tree_node* %f.2207, i64 0, i32 0, i32 0, i32 0
  %36 = load %union.tree_node** %chain141, align 8, !tbaa !79
  %chain143 = getelementptr inbounds %union.tree_node* %a.3206, i64 0, i32 0, i32 0, i32 0
  %37 = load %union.tree_node** %chain143, align 8, !tbaa !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %tobool80 = icmp eq %union.tree_node* %36, null
  br i1 %tobool80, label %for.end145, label %for.body81

for.end145:                                       ; preds = %for.inc139, %for.cond79.preheader
  tail call void @free_temp_slots() #6
  br label %return

return:                                           ; preds = %lor.lhs.false, %cond.end, %for.body, %for.end, %for.end145
  %retval.0 = phi i32 [ 1, %for.end145 ], [ 0, %for.end ], [ 0, %for.body ], [ 0, %cond.end ], [ 0, %lor.lhs.false ]
  ret i32 %retval.0
}

declare %struct.rtx_def* @emit_label_after(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @expand_start_bindings_and_block(i32 %flags, %union.tree_node* %block) #0 {
entry:
  %0 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %1 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 120
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_obstack_newchunk(%struct.obstack* @stmt_obstack, i32 120) #6
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i8* [ %.pre, %if.then ], [ %1, %entry ]
  %add.ptr = getelementptr inbounds i8* %2, i64 120
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %3 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %cmp6 = icmp eq i8* %add.ptr, %3
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %sub.ptr.lhs.cast11 = ptrtoint i8* %add.ptr to i64
  %4 = load i32* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 6), align 8, !tbaa !98
  %conv13 = sext i32 %4 to i64
  %add = add nsw i64 %conv13, %sub.ptr.lhs.cast11
  %neg = xor i32 %4, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr16, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %5 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %sub.ptr.lhs.cast19 = ptrtoint i8* %add.ptr16 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct._obstack_chunk* %5 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %6 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %sub.ptr.lhs.cast24 = ptrtoint i8* %6 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast20
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end9
  store i8* %6, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %if.end9
  %7 = phi i8* [ %6, %if.then29 ], [ %add.ptr16, %if.end9 ]
  store i8* %7, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %8 = bitcast i8* %3 to %struct.nesting*
  %and38 = and i32 %flags, 1
  %cmp39 = icmp eq i32 %and38, 0
  %and42 = and i32 %flags, 2
  %tobool = icmp ne i32 %and42, 0
  %tobool45 = icmp ne %union.tree_node* %block, null
  %or.cond = and i1 %tobool, %tobool45
  br i1 %or.cond, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end32
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 3395, i8* getelementptr inbounds ([32 x i8]* @__FUNCTION__.expand_start_bindings_and_block, i64 0, i64 0)) #7
  unreachable

if.end47:                                         ; preds = %if.end32
  %cmp43 = icmp eq i32 %and42, 0
  br i1 %cmp43, label %if.then49, label %if.else

if.then49:                                        ; preds = %if.end47
  %call = tail call %struct.rtx_def* @emit_note(i8* null, i32 -98) #6
  %9 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 3, i32 0
  %block.c = ptrtoint %union.tree_node* %block to i64
  store i64 %block.c, i64* %9, align 8, !tbaa !17
  br label %if.end51

if.else:                                          ; preds = %if.end47
  %call50 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -99) #6
  br label %if.end51

if.end51:                                         ; preds = %if.else, %if.then49
  %note.0 = phi %struct.rtx_def* [ %call, %if.then49 ], [ %call50, %if.else ]
  %10 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %10, i64 0, i32 1
  %11 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %11, i64 0, i32 0
  %12 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %next = getelementptr inbounds i8* %3, i64 8
  %13 = bitcast i8* %next to %struct.nesting**
  store %struct.nesting* %12, %struct.nesting** %13, align 8, !tbaa !26
  %14 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt52 = getelementptr inbounds %struct.function* %14, i64 0, i32 1
  %15 = load %struct.stmt_status** %stmt52, align 8, !tbaa !1
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %15, i64 0, i32 5
  %16 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %all = bitcast i8* %3 to %struct.nesting**
  store %struct.nesting* %16, %struct.nesting** %all, align 8, !tbaa !77
  %17 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt53 = getelementptr inbounds %struct.function* %17, i64 0, i32 1
  %18 = load %struct.stmt_status** %stmt53, align 8, !tbaa !1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %18, i64 0, i32 6
  %19 = load i32* %x_nesting_depth, align 4, !tbaa !53
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %x_nesting_depth, align 4, !tbaa !53
  %depth = getelementptr inbounds i8* %3, i64 16
  %20 = bitcast i8* %depth to i32*
  store i32 %inc, i32* %20, align 4, !tbaa !100
  %data = getelementptr inbounds i8* %3, i64 32
  %stack_level = getelementptr inbounds i8* %3, i64 40
  %21 = bitcast i8* %stack_level to %struct.rtx_def**
  store %struct.rtx_def* null, %struct.rtx_def** %21, align 8, !tbaa !13
  %cleanups = getelementptr inbounds i8* %3, i64 64
  %22 = bitcast i8* %cleanups to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %22, align 8, !tbaa !16
  %n_function_calls = getelementptr inbounds i8* %3, i64 88
  %23 = bitcast i8* %n_function_calls to i32*
  store i32 0, i32* %23, align 4, !tbaa !110
  %exception_region = getelementptr inbounds i8* %3, i64 92
  %24 = bitcast i8* %exception_region to i32*
  store i32 0, i32* %24, align 4, !tbaa !111
  %25 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_target_temp_slot_level = getelementptr inbounds %struct.function* %25, i64 0, i32 42
  %26 = load i32* %x_target_temp_slot_level, align 4, !tbaa !112
  %block_target_temp_slot_level = getelementptr inbounds i8* %3, i64 96
  %27 = bitcast i8* %block_target_temp_slot_level to i32*
  store i32 %26, i32* %27, align 4, !tbaa !113
  %conditional_code = getelementptr inbounds i8* %3, i64 100
  %28 = bitcast i8* %conditional_code to i32*
  store i32 0, i32* %28, align 4, !tbaa !104
  %last_unconditional_cleanup = getelementptr inbounds i8* %3, i64 104
  %29 = bitcast i8* %last_unconditional_cleanup to %struct.rtx_def**
  store %struct.rtx_def* %note.0, %struct.rtx_def** %29, align 8, !tbaa !25
  %call67 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -99) #6
  %cleanup_ptr = getelementptr inbounds i8* %3, i64 112
  %30 = bitcast i8* %cleanup_ptr to %union.tree_node***
  store %union.tree_node** %22, %union.tree_node*** %30, align 8, !tbaa !114
  %31 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt73 = getelementptr inbounds %struct.function* %31, i64 0, i32 1
  %32 = load %struct.stmt_status** %stmt73, align 8, !tbaa !1
  %x_block_stack74 = getelementptr inbounds %struct.stmt_status* %32, i64 0, i32 0
  %33 = load %struct.nesting** %x_block_stack74, align 8, !tbaa !9
  %tobool75 = icmp eq %struct.nesting* %33, null
  br i1 %tobool75, label %if.else106, label %land.lhs.true76

land.lhs.true76:                                  ; preds = %if.end51
  %cleanups81 = getelementptr inbounds %struct.nesting* %33, i64 0, i32 4, i32 0, i32 4
  %34 = load %union.tree_node** %cleanups81, align 8, !tbaa !16
  %cmp82 = icmp eq %union.tree_node* %34, null
  %outer_cleanups = getelementptr inbounds %struct.nesting* %33, i64 0, i32 4, i32 0, i32 5
  %35 = load %union.tree_node** %outer_cleanups, align 8, !tbaa !22
  %cmp89 = icmp eq %union.tree_node* %35, null
  %or.cond175 = and i1 %cmp82, %cmp89
  br i1 %or.cond175, label %if.else106, label %if.then91

if.then91:                                        ; preds = %land.lhs.true76
  %call102 = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %34, %union.tree_node* %35) #6
  %outer_cleanups105 = getelementptr inbounds i8* %3, i64 72
  %36 = bitcast i8* %outer_cleanups105 to %union.tree_node**
  store %union.tree_node* %call102, %union.tree_node** %36, align 8, !tbaa !22
  br label %if.end110

if.else106:                                       ; preds = %land.lhs.true76, %if.end51
  %outer_cleanups109 = getelementptr inbounds i8* %3, i64 72
  %37 = bitcast i8* %outer_cleanups109 to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %37, align 8, !tbaa !22
  br label %if.end110

if.end110:                                        ; preds = %if.else106, %if.then91
  %label_chain = getelementptr inbounds i8* %3, i64 80
  %38 = bitcast i8* %label_chain to %struct.label_chain**
  store %struct.label_chain* null, %struct.label_chain** %38, align 8, !tbaa !66
  %39 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt113 = getelementptr inbounds %struct.function* %39, i64 0, i32 1
  %40 = load %struct.stmt_status** %stmt113, align 8, !tbaa !1
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %40, i64 0, i32 1
  %41 = load %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %innermost_stack_block = getelementptr inbounds i8* %3, i64 56
  %42 = bitcast i8* %innermost_stack_block to %struct.nesting**
  store %struct.nesting* %41, %struct.nesting** %42, align 8, !tbaa !115
  %first_insn = getelementptr inbounds i8* %3, i64 48
  %43 = bitcast i8* %first_insn to %struct.rtx_def**
  store %struct.rtx_def* %note.0, %struct.rtx_def** %43, align 8, !tbaa !15
  %44 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt118 = getelementptr inbounds %struct.function* %44, i64 0, i32 1
  %45 = load %struct.stmt_status** %stmt118, align 8, !tbaa !1
  %x_block_start_count = getelementptr inbounds %struct.stmt_status* %45, i64 0, i32 7
  %46 = load i32* %x_block_start_count, align 4, !tbaa !54
  %inc119 = add nsw i32 %46, 1
  store i32 %inc119, i32* %x_block_start_count, align 4, !tbaa !54
  %block_start_count = bitcast i8* %data to i32*
  store i32 %inc119, i32* %block_start_count, align 4, !tbaa !81
  br i1 %cmp39, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.end110
  %call123 = tail call %struct.rtx_def* @gen_label_rtx() #6
  br label %cond.end

cond.end:                                         ; preds = %if.end110, %cond.true
  %cond = phi %struct.rtx_def* [ %call123, %cond.true ], [ null, %if.end110 ]
  %exit_label = getelementptr inbounds i8* %3, i64 24
  %47 = bitcast i8* %exit_label to %struct.rtx_def**
  store %struct.rtx_def* %cond, %struct.rtx_def** %47, align 8, !tbaa !11
  %48 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt124 = getelementptr inbounds %struct.function* %48, i64 0, i32 1
  %49 = load %struct.stmt_status** %stmt124, align 8, !tbaa !1
  %x_block_stack125 = getelementptr inbounds %struct.stmt_status* %49, i64 0, i32 0
  store %struct.nesting* %8, %struct.nesting** %x_block_stack125, align 8, !tbaa !9
  %50 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt126 = getelementptr inbounds %struct.function* %50, i64 0, i32 1
  %51 = load %struct.stmt_status** %stmt126, align 8, !tbaa !1
  %x_nesting_stack127 = getelementptr inbounds %struct.stmt_status* %51, i64 0, i32 5
  store %struct.nesting* %8, %struct.nesting** %x_nesting_stack127, align 8, !tbaa !52
  tail call void @push_temp_slots() #6
  ret void
}

declare void @push_temp_slots() #2

; Function Attrs: nounwind uwtable
define void @expand_start_target_temps() #0 {
entry:
  tail call void @push_temp_slots() #6
  tail call void @expand_start_bindings_and_block(i32 2, %union.tree_node* null)
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_temp_slot_level = getelementptr inbounds %struct.function* %0, i64 0, i32 40
  %1 = load i32* %x_temp_slot_level, align 4, !tbaa !116
  %x_target_temp_slot_level = getelementptr inbounds %struct.function* %0, i64 0, i32 42
  store i32 %1, i32* %x_target_temp_slot_level, align 4, !tbaa !112
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_target_temps() #0 {
entry:
  tail call void @expand_end_bindings(%union.tree_node* null, i32 0, i32 0)
  tail call void @pop_temp_slots() #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_bindings(%union.tree_node* %vars, i32 %mark_ends, i32 %dont_jump_in) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %3 = load i32* @warn_unused_variable, align 4, !tbaa !58
  %tobool.i = icmp eq i32 %3, 0
  %tobool133.i = icmp eq %union.tree_node* %vars, null
  %or.cond.i = or i1 %tobool.i, %tobool133.i
  br i1 %or.cond.i, label %warn_about_unused_variables.exit, label %for.body.i

for.body.i:                                       ; preds = %entry, %for.inc.i
  %decl.034.i = phi %union.tree_node* [ %8, %for.inc.i ], [ %vars, %entry ]
  %code.i = getelementptr inbounds %union.tree_node* %decl.034.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %4 = and i32 %bf.load.i, 65791
  %5 = icmp eq i32 %4, 34
  br i1 %5, label %land.lhs.true6.i, label %for.inc.i

land.lhs.true6.i:                                 ; preds = %for.body.i
  %in_system_header_flag.i = getelementptr inbounds %union.tree_node* %decl.034.i, i64 0, i32 0, i32 5
  %6 = bitcast i48* %in_system_header_flag.i to i64*
  %bf.load8.i = load i64* %6, align 8
  %bf.cast.i = and i64 %bf.load8.i, 65536
  %tobool11.i = icmp eq i64 %bf.cast.i, 0
  br i1 %tobool11.i, label %land.lhs.true12.i, label %for.inc.i

land.lhs.true12.i:                                ; preds = %land.lhs.true6.i
  %name.i = getelementptr inbounds %union.tree_node* %decl.034.i, i64 0, i32 0, i32 8
  %7 = load %union.tree_node** %name.i, align 8, !tbaa !62
  %tobool14.i = icmp ne %union.tree_node* %7, null
  %bf.cast20.i = and i64 %bf.load8.i, 4194304
  %tobool21.i = icmp eq i64 %bf.cast20.i, 0
  %or.cond32.i = and i1 %tobool14.i, %tobool21.i
  br i1 %or.cond32.i, label %if.then22.i, label %for.inc.i

if.then22.i:                                      ; preds = %land.lhs.true12.i
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %decl.034.i, i8* getelementptr inbounds ([21 x i8]* @.str16, i64 0, i64 0)) #6
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then22.i, %land.lhs.true12.i, %land.lhs.true6.i, %for.body.i
  %chain.i = getelementptr inbounds %union.tree_node* %decl.034.i, i64 0, i32 0, i32 0, i32 0
  %8 = load %union.tree_node** %chain.i, align 8, !tbaa !79
  %tobool1.i = icmp eq %union.tree_node* %8, null
  br i1 %tobool1.i, label %warn_about_unused_variables.exit, label %for.body.i

warn_about_unused_variables.exit:                 ; preds = %for.inc.i, %entry
  %exit_label = getelementptr inbounds %struct.nesting* %2, i64 0, i32 3
  %9 = load %struct.rtx_def** %exit_label, align 8, !tbaa !11
  %tobool = icmp eq %struct.rtx_def* %9, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %warn_about_unused_variables.exit
  tail call void @do_pending_stack_adjust() #6
  %10 = load %struct.rtx_def** %exit_label, align 8, !tbaa !11
  %call = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %10) #6
  br label %if.end

if.end:                                           ; preds = %warn_about_unused_variables.exit, %if.then
  %11 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_function_call_count = getelementptr inbounds %struct.function* %11, i64 0, i32 18
  %12 = load i32* %x_function_call_count, align 4, !tbaa !117
  %n_function_calls = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 7
  %13 = load i32* %n_function_calls, align 4, !tbaa !110
  %cmp = icmp eq i32 %12, %13
  br i1 %cmp, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %x_nonlocal_labels = getelementptr inbounds %struct.function* %11, i64 0, i32 19
  %14 = load %union.tree_node** %x_nonlocal_labels, align 8, !tbaa !69
  %tobool2 = icmp eq %union.tree_node* %14, null
  br i1 %tobool2, label %if.end13, label %land.lhs.true3

land.lhs.true3:                                   ; preds = %land.lhs.true
  %next = getelementptr inbounds %struct.nesting* %2, i64 0, i32 1
  %15 = load %struct.nesting** %next, align 8, !tbaa !26
  %cmp4 = icmp eq %struct.nesting* %15, null
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true3
  %has_nonlocal_label = getelementptr inbounds %struct.function* %11, i64 0, i32 56
  %16 = bitcast i24* %has_nonlocal_label to i32*
  %bf.load = load i32* %16, align 8
  %bf.clear = and i32 %bf.load, 256
  %tobool5 = icmp eq i32 %bf.clear, 0
  br i1 %tobool5, label %if.end13, label %if.then12

cond.false:                                       ; preds = %land.lhs.true3
  %cleanups = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %17 = load %union.tree_node** %cleanups, align 8, !tbaa !16
  %cmp8 = icmp eq %union.tree_node* %17, null
  br i1 %cmp8, label %lor.lhs.false, label %if.then12

lor.lhs.false:                                    ; preds = %cond.false
  %stack_level = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  %18 = load %struct.rtx_def** %stack_level, align 8, !tbaa !13
  %cmp11 = icmp eq %struct.rtx_def* %18, null
  br i1 %cmp11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %cond.true, %lor.lhs.false, %cond.false
  %call.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  %19 = load %struct.nesting** %next, align 8, !tbaa !26
  %cmp.i = icmp eq %struct.nesting* %19, null
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then12
  %20 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_goto_handler_slots.i = getelementptr inbounds %struct.function* %20, i64 0, i32 20
  %slot.0126.i = load %struct.rtx_def** %x_nonlocal_goto_handler_slots.i, align 8
  %tobool127.i = icmp eq %struct.rtx_def* %slot.0126.i, null
  br i1 %tobool127.i, label %if.end.i, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %if.then.i
  %first_insn.i = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 2
  br label %for.body.i231

for.body.i231:                                    ; preds = %for.body.i231, %for.body.lr.ph.i
  %slot.0128.i = phi %struct.rtx_def* [ %slot.0126.i, %for.body.lr.ph.i ], [ %slot.0.i, %for.body.i231 ]
  %21 = load i32* @target_flags, align 4, !tbaa !58
  %and.i = lshr i32 %21, 25
  %22 = and i32 %and.i, 1
  %23 = or i32 %22, 4
  %call2.i = tail call %struct.rtx_def* @gen_reg_rtx(i32 %23) #6
  %fld.i = getelementptr inbounds %struct.rtx_def* %slot.0128.i, i64 0, i32 1
  %rtx.i = bitcast [1 x %union.rtunion_def]* %fld.i to %struct.rtx_def**
  %24 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !17
  %call3.i = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %24, %struct.rtx_def* %call2.i) #6
  tail call void @start_sequence() #6
  %25 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !17
  %call7.i = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call2.i, %struct.rtx_def* %25) #6
  %call8.i = tail call %struct.rtx_def* @get_insns() #6
  tail call void @end_sequence() #6
  %26 = load %struct.rtx_def** %first_insn.i, align 8, !tbaa !15
  %call9.i = tail call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %call8.i, %struct.rtx_def* %26) #6
  %arrayidx11.i = getelementptr inbounds %struct.rtx_def* %slot.0128.i, i64 0, i32 1, i64 1
  %rtx12.i = bitcast %union.rtunion_def* %arrayidx11.i to %struct.rtx_def**
  %slot.0.i = load %struct.rtx_def** %rtx12.i, align 8
  %tobool.i230 = icmp eq %struct.rtx_def* %slot.0.i, null
  br i1 %tobool.i230, label %if.end.i, label %for.body.i231

if.end.i:                                         ; preds = %for.body.i231, %if.then.i, %if.then12
  tail call void @do_pending_stack_adjust() #6
  %call.i.i = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %call.i) #6
  %call1.i.i = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i.i) #6
  %call2.i.i = tail call %struct.rtx_def* @emit_barrier() #6
  %27 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_labels.i = getelementptr inbounds %struct.function* %27, i64 0, i32 19
  %link.0119.i = load %union.tree_node** %x_nonlocal_labels.i, align 8
  %tobool15121.i = icmp eq %union.tree_node* %link.0119.i, null
  br i1 %tobool15121.i, label %expand_nl_goto_receivers.exit, label %for.body16.lr.ph.i

for.body16.lr.ph.i:                               ; preds = %if.end.i
  %x_nonlocal_goto_handler_slots13.i = getelementptr inbounds %struct.function* %27, i64 0, i32 20
  %first_insn24.i = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 2
  br label %for.body16.i

for.body16.i:                                     ; preds = %for.inc30.i, %for.body16.lr.ph.i
  %slot.1124.in.i = phi %struct.rtx_def** [ %x_nonlocal_goto_handler_slots13.i, %for.body16.lr.ph.i ], [ %rtx33.i, %for.inc30.i ]
  %link.0123.i = phi %union.tree_node* [ %link.0119.i, %for.body16.lr.ph.i ], [ %link.0.i, %for.inc30.i ]
  %label_list.0122.i = phi %struct.rtx_def* [ null, %for.body16.lr.ph.i ], [ %label_list.1.i, %for.inc30.i ]
  %slot.1124.i = load %struct.rtx_def** %slot.1124.in.i, align 8
  %value.i = getelementptr inbounds %union.tree_node* %link.0123.i, i64 0, i32 0, i32 2
  %28 = bitcast i32* %value.i to %union.tree_node**
  %29 = load %union.tree_node** %28, align 8, !tbaa !72
  %bit_field_flag.i = getelementptr inbounds %union.tree_node* %29, i64 0, i32 0, i32 5
  %30 = bitcast i48* %bit_field_flag.i to i64*
  %bf.load.i232 = load i64* %30, align 8
  %bf.cast.i233 = and i64 %bf.load.i232, 4096
  %tobool17.i = icmp eq i64 %bf.cast.i233, 0
  br i1 %tobool17.i, label %if.then18.i, label %for.inc30.i

if.then18.i:                                      ; preds = %for.body16.i
  %arrayidx20.i = getelementptr inbounds %struct.rtx_def* %slot.1124.i, i64 0, i32 1, i64 0
  %rtx21.i = bitcast %union.rtunion_def* %arrayidx20.i to %struct.rtx_def**
  %31 = load %struct.rtx_def** %rtx21.i, align 8, !tbaa !17
  %32 = load %struct.rtx_def** %first_insn24.i, align 8, !tbaa !15
  %call.i91.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  %33 = getelementptr inbounds %struct.rtx_def* %call.i91.i, i64 0, i32 0
  %bf.load.i.i = load i32* %33, align 8
  %bf.set.i.i = or i32 %bf.load.i.i, 268435456
  store i32 %bf.set.i.i, i32* %33, align 8
  tail call void @start_sequence() #6
  %34 = load i32* @target_flags, align 4, !tbaa !58
  %and.i.i = lshr i32 %34, 25
  %35 = and i32 %and.i.i, 1
  %36 = or i32 %35, 4
  %call1.i92.i = tail call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %36, %struct.rtx_def* %call.i91.i) #6
  %call2.i93.i = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %31, %struct.rtx_def* %call1.i92.i) #6
  %call3.i.i = tail call %struct.rtx_def* @get_insns() #6
  tail call void @end_sequence() #6
  %call4.i.i = tail call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %call3.i.i, %struct.rtx_def* %32) #6
  %call5.i.i = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call.i91.i) #6
  %call26.i = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call.i91.i, %struct.rtx_def* %label_list.0122.i) #6
  %37 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !tbaa !17
  %38 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 8, !tbaa !17
  %call.i94.i = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %37, %struct.rtx_def* %38) #6
  %39 = load %union.tree_node** %28, align 8, !tbaa !72
  tail call void @expand_goto(%union.tree_node* %39) #6
  br label %for.inc30.i

for.inc30.i:                                      ; preds = %if.then18.i, %for.body16.i
  %label_list.1.i = phi %struct.rtx_def* [ %label_list.0122.i, %for.body16.i ], [ %call26.i, %if.then18.i ]
  %chain.i234 = getelementptr inbounds %union.tree_node* %link.0123.i, i64 0, i32 0, i32 0, i32 0
  %arrayidx32.i = getelementptr inbounds %struct.rtx_def* %slot.1124.i, i64 0, i32 1, i64 1
  %rtx33.i = bitcast %union.rtunion_def* %arrayidx32.i to %struct.rtx_def**
  %link.0.i = load %union.tree_node** %chain.i234, align 8
  %tobool15.i = icmp eq %union.tree_node* %link.0.i, null
  br i1 %tobool15.i, label %for.end34.i, label %for.body16.i

for.end34.i:                                      ; preds = %for.inc30.i
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_labels35.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 19
  %link.1111.pre.i = load %union.tree_node** %x_nonlocal_labels35.phi.trans.insert.i, align 8
  %tobool38113.i = icmp eq %union.tree_node* %link.1111.pre.i, null
  br i1 %tobool38113.i, label %expand_nl_goto_receivers.exit, label %for.body39.lr.ph.i

for.body39.lr.ph.i:                               ; preds = %for.end34.i
  %x_nonlocal_goto_handler_slots36.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 20
  br label %for.body39.i

for.body39.i:                                     ; preds = %for.inc60.i, %for.body39.lr.ph.i
  %slot.2117.in.i = phi %struct.rtx_def** [ %x_nonlocal_goto_handler_slots36.i, %for.body39.lr.ph.i ], [ %rtx65.i, %for.inc60.i ]
  %link.1116.i = phi %union.tree_node* [ %link.1111.pre.i, %for.body39.lr.ph.i ], [ %link.1.i, %for.inc60.i ]
  %label_list.2115.i = phi %struct.rtx_def* [ %label_list.1.i, %for.body39.lr.ph.i ], [ %label_list.3.i, %for.inc60.i ]
  %any_invalid.0114.i = phi i32 [ 0, %for.body39.lr.ph.i ], [ %any_invalid.1.i, %for.inc60.i ]
  %slot.2117.i = load %struct.rtx_def** %slot.2117.in.i, align 8
  %value41.i = getelementptr inbounds %union.tree_node* %link.1116.i, i64 0, i32 0, i32 2
  %40 = bitcast i32* %value41.i to %union.tree_node**
  %41 = load %union.tree_node** %40, align 8, !tbaa !72
  %bit_field_flag43.i = getelementptr inbounds %union.tree_node* %41, i64 0, i32 0, i32 5
  %42 = bitcast i48* %bit_field_flag43.i to i64*
  %bf.load44.i = load i64* %42, align 8
  %bf.cast47.i = and i64 %bf.load44.i, 4096
  %tobool48.i = icmp eq i64 %bf.cast47.i, 0
  br i1 %tobool48.i, label %for.inc60.i, label %if.then49.i

if.then49.i:                                      ; preds = %for.body39.i
  %arrayidx52.i = getelementptr inbounds %struct.rtx_def* %slot.2117.i, i64 0, i32 1, i64 0
  %rtx53.i = bitcast %union.rtunion_def* %arrayidx52.i to %struct.rtx_def**
  %43 = load %struct.rtx_def** %rtx53.i, align 8, !tbaa !17
  %44 = load %struct.rtx_def** %first_insn24.i, align 8, !tbaa !15
  %call.i95.i = tail call %struct.rtx_def* @gen_label_rtx() #6
  %45 = getelementptr inbounds %struct.rtx_def* %call.i95.i, i64 0, i32 0
  %bf.load.i96.i = load i32* %45, align 8
  %bf.set.i97.i = or i32 %bf.load.i96.i, 268435456
  store i32 %bf.set.i97.i, i32* %45, align 8
  tail call void @start_sequence() #6
  %46 = load i32* @target_flags, align 4, !tbaa !58
  %and.i98.i = lshr i32 %46, 25
  %47 = and i32 %and.i98.i, 1
  %48 = or i32 %47, 4
  %call1.i99.i = tail call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %48, %struct.rtx_def* %call.i95.i) #6
  %call2.i100.i = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %43, %struct.rtx_def* %call1.i99.i) #6
  %call3.i101.i = tail call %struct.rtx_def* @get_insns() #6
  tail call void @end_sequence() #6
  %call4.i102.i = tail call %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %call3.i101.i, %struct.rtx_def* %44) #6
  %call5.i103.i = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call.i95.i) #6
  %call58.i = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call.i95.i, %struct.rtx_def* %label_list.2115.i) #6
  br label %for.inc60.i

for.inc60.i:                                      ; preds = %if.then49.i, %for.body39.i
  %any_invalid.1.i = phi i32 [ 1, %if.then49.i ], [ %any_invalid.0114.i, %for.body39.i ]
  %label_list.3.i = phi %struct.rtx_def* [ %call58.i, %if.then49.i ], [ %label_list.2115.i, %for.body39.i ]
  %chain62.i = getelementptr inbounds %union.tree_node* %link.1116.i, i64 0, i32 0, i32 0, i32 0
  %arrayidx64.i = getelementptr inbounds %struct.rtx_def* %slot.2117.i, i64 0, i32 1, i64 1
  %rtx65.i = bitcast %union.rtunion_def* %arrayidx64.i to %struct.rtx_def**
  %link.1.i = load %union.tree_node** %chain62.i, align 8
  %tobool38.i = icmp eq %union.tree_node* %link.1.i, null
  br i1 %tobool38.i, label %for.end66.i, label %for.body39.i

for.end66.i:                                      ; preds = %for.inc60.i
  %tobool67.i = icmp eq i32 %any_invalid.1.i, 0
  br i1 %tobool67.i, label %expand_nl_goto_receivers.exit, label %if.then68.i

if.then68.i:                                      ; preds = %for.end66.i
  %49 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !tbaa !17
  %50 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 8, !tbaa !17
  %call.i104.i = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %49, %struct.rtx_def* %50) #6
  tail call void @expand_builtin_trap() #6
  br label %expand_nl_goto_receivers.exit

expand_nl_goto_receivers.exit:                    ; preds = %if.end.i, %for.end34.i, %for.end66.i, %if.then68.i
  %label_list.2.lcssa132.i = phi %struct.rtx_def* [ %label_list.3.i, %for.end66.i ], [ %label_list.3.i, %if.then68.i ], [ %label_list.1.i, %for.end34.i ], [ null, %if.end.i ]
  %51 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_goto_handler_labels.i = getelementptr inbounds %struct.function* %51, i64 0, i32 21
  store %struct.rtx_def* %label_list.2.lcssa132.i, %struct.rtx_def** %x_nonlocal_goto_handler_labels.i, align 8, !tbaa !118
  %call70.i = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %call.i) #6
  br label %if.end13

if.end13:                                         ; preds = %cond.true, %lor.lhs.false, %land.lhs.true, %if.end, %expand_nl_goto_receivers.exit
  %tobool14 = icmp eq i32 %dont_jump_in, 0
  br i1 %tobool14, label %lor.lhs.false15, label %if.then20

lor.lhs.false15:                                  ; preds = %if.end13
  %stack_level18 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  %52 = load %struct.rtx_def** %stack_level18, align 8, !tbaa !13
  %cmp19 = icmp eq %struct.rtx_def* %52, null
  br i1 %cmp19, label %if.end35.thread, label %if.then20

if.end35.thread:                                  ; preds = %lor.lhs.false15
  %stack_level38250 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  br label %lor.lhs.false40

if.then20:                                        ; preds = %lor.lhs.false15, %if.end13
  %label_chain = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 6
  %chain.0235 = load %struct.label_chain** %label_chain, align 8
  %tobool23236 = icmp eq %struct.label_chain* %chain.0235, null
  br i1 %tobool23236, label %if.end35, label %for.body

for.body:                                         ; preds = %if.then20, %for.inc
  %chain.0237 = phi %struct.label_chain* [ %chain.0, %for.inc ], [ %chain.0235, %if.then20 ]
  %label = getelementptr inbounds %struct.label_chain* %chain.0237, i64 0, i32 1
  %53 = load %union.tree_node** %label, align 8, !tbaa !23
  %bit_field_flag = getelementptr inbounds %union.tree_node* %53, i64 0, i32 0, i32 5
  %54 = bitcast i48* %bit_field_flag to i64*
  %bf.load24 = load i64* %54, align 8
  %bf.set = or i64 %bf.load24, 4096
  store i64 %bf.set, i64* %54, align 8
  %55 = load %union.tree_node** %label, align 8, !tbaa !23
  %addressable_flag = getelementptr inbounds %union.tree_node* %55, i64 0, i32 0, i32 0, i32 2
  %bf.load27 = load i32* %addressable_flag, align 8
  %bf.clear29 = and i32 %bf.load27, 1024
  %tobool30 = icmp eq i32 %bf.clear29, 0
  br i1 %tobool30, label %for.inc, label %if.then31

if.then31:                                        ; preds = %for.body
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %55, i8* getelementptr inbounds ([50 x i8]* @.str17, i64 0, i64 0)) #6
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then31
  %next34 = getelementptr inbounds %struct.label_chain* %chain.0237, i64 0, i32 0
  %chain.0 = load %struct.label_chain** %next34, align 8
  %tobool23 = icmp eq %struct.label_chain* %chain.0, null
  br i1 %tobool23, label %if.end35, label %for.body

if.end35:                                         ; preds = %for.inc, %if.then20
  %stack_level38.phi.trans.insert = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  %.pre = load %struct.rtx_def** %stack_level38.phi.trans.insert, align 8, !tbaa !13
  %phitmp = icmp eq %struct.rtx_def* %.pre, null
  %stack_level38 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  br i1 %phitmp, label %lor.lhs.false40, label %if.then45

lor.lhs.false40:                                  ; preds = %if.end35.thread, %if.end35
  %stack_level38252 = phi %struct.rtx_def** [ %stack_level38250, %if.end35.thread ], [ %stack_level38, %if.end35 ]
  %cleanups43 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %56 = load %union.tree_node** %cleanups43, align 8, !tbaa !16
  %cmp44 = icmp eq %union.tree_node* %56, null
  br i1 %cmp44, label %if.end98, label %if.then45

if.then45:                                        ; preds = %lor.lhs.false40, %if.end35
  %stack_level38251 = phi %struct.rtx_def** [ %stack_level38252, %lor.lhs.false40 ], [ %stack_level38, %if.end35 ]
  %57 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt46 = getelementptr inbounds %struct.function* %57, i64 0, i32 1
  %58 = load %struct.stmt_status** %stmt46, align 8, !tbaa !1
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status* %58, i64 0, i32 10
  %59 = load i32* %x_expr_stmts_for_value, align 4, !tbaa !55
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status* %58, i64 0, i32 9
  %60 = load %struct.rtx_def** %x_last_expr_value, align 8, !tbaa !41
  %x_last_expr_type = getelementptr inbounds %struct.stmt_status* %58, i64 0, i32 8
  %61 = load %union.tree_node** %x_last_expr_type, align 8, !tbaa !40
  store i32 0, i32* %x_expr_stmts_for_value, align 4, !tbaa !55
  %call51 = tail call %struct.rtx_def* @get_last_insn() #6
  %62 = getelementptr inbounds %struct.rtx_def* %call51, i64 0, i32 0
  %bf.load52 = load i32* %62, align 8
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp54 = icmp eq i32 %bf.clear53, 37
  br i1 %cmp54, label %if.then55, label %if.end57

if.then55:                                        ; preds = %if.then45
  %call56 = tail call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %call51) #6
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %if.then45
  %insn.0 = phi %struct.rtx_def* [ %call56, %if.then55 ], [ %call51, %if.then45 ]
  %tobool58 = icmp eq %struct.rtx_def* %insn.0, null
  br i1 %tobool58, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end57
  %63 = getelementptr inbounds %struct.rtx_def* %insn.0, i64 0, i32 0
  %bf.load59 = load i32* %63, align 8
  %bf.clear60 = and i32 %bf.load59, 65535
  %cmp61 = icmp ne i32 %bf.clear60, 35
  br label %lor.end

lor.end:                                          ; preds = %if.end57, %lor.rhs
  %64 = phi i1 [ true, %if.end57 ], [ %cmp61, %lor.rhs ]
  %lor.ext = zext i1 %64 to i32
  %cleanups64 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %65 = load %union.tree_node** %cleanups64, align 8, !tbaa !16
  tail call fastcc void @expand_cleanups(%union.tree_node* %65, i32 0, i32 %lor.ext)
  br i1 %64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %lor.end
  tail call void @do_pending_stack_adjust() #6
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %lor.end
  %66 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt68 = getelementptr inbounds %struct.function* %66, i64 0, i32 1
  %67 = load %struct.stmt_status** %stmt68, align 8, !tbaa !1
  %x_expr_stmts_for_value69 = getelementptr inbounds %struct.stmt_status* %67, i64 0, i32 10
  store i32 %59, i32* %x_expr_stmts_for_value69, align 4, !tbaa !55
  %x_last_expr_value71 = getelementptr inbounds %struct.stmt_status* %67, i64 0, i32 9
  store %struct.rtx_def* %60, %struct.rtx_def** %x_last_expr_value71, align 8, !tbaa !41
  %68 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt72 = getelementptr inbounds %struct.function* %68, i64 0, i32 1
  %69 = load %struct.stmt_status** %stmt72, align 8, !tbaa !1
  %x_last_expr_type73 = getelementptr inbounds %struct.stmt_status* %69, i64 0, i32 8
  store %union.tree_node* %61, %union.tree_node** %x_last_expr_type73, align 8, !tbaa !40
  br i1 %64, label %land.lhs.true75, label %if.end89

land.lhs.true75:                                  ; preds = %if.end67
  %70 = load %struct.rtx_def** %stack_level38251, align 8, !tbaa !13
  %cmp79 = icmp eq %struct.rtx_def* %70, null
  br i1 %cmp79, label %if.end89, label %if.then80

if.then80:                                        ; preds = %land.lhs.true75
  %next81 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 1
  %71 = load %struct.nesting** %next81, align 8, !tbaa !26
  %not.tobool82 = icmp eq %struct.nesting* %71, null
  %cond = zext i1 %not.tobool82 to i32
  tail call void @emit_stack_restore(i32 %cond, %struct.rtx_def* %70, %struct.rtx_def* null) #6
  %72 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_nonlocal_goto_handler_slots = getelementptr inbounds %struct.function* %72, i64 0, i32 20
  %73 = load %struct.rtx_def** %x_nonlocal_goto_handler_slots, align 8, !tbaa !70
  %cmp86 = icmp eq %struct.rtx_def* %73, null
  br i1 %cmp86, label %if.end89, label %if.then87

if.then87:                                        ; preds = %if.then80
  %x_nonlocal_goto_stack_level = getelementptr inbounds %struct.function* %72, i64 0, i32 22
  tail call void @emit_stack_save(i32 2, %struct.rtx_def** %x_nonlocal_goto_stack_level, %struct.rtx_def* null) #6
  br label %if.end89

if.end89:                                         ; preds = %if.then80, %land.lhs.true75, %if.then87, %if.end67
  %74 = load %struct.rtx_def** %stack_level38251, align 8, !tbaa !13
  %75 = load %union.tree_node** %cleanups64, align 8, !tbaa !16
  %first_insn = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 2
  %76 = load %struct.rtx_def** %first_insn, align 8, !tbaa !15
  tail call fastcc void @fixup_gotos(%struct.nesting* %2, %struct.rtx_def* %74, %union.tree_node* %75, %struct.rtx_def* %76, i32 %dont_jump_in)
  br label %if.end98

if.end98:                                         ; preds = %lor.lhs.false40, %if.end89
  %tobool99 = icmp eq i32 %mark_ends, 0
  br i1 %tobool99, label %if.else, label %if.then100

if.then100:                                       ; preds = %if.end98
  %call101 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -97) #6
  %first_insn104 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 2
  %77 = load %struct.rtx_def** %first_insn104, align 8, !tbaa !15
  %arrayidx = getelementptr inbounds %struct.rtx_def* %77, i64 0, i32 1, i64 3
  %rttree = bitcast %union.rtunion_def* %arrayidx to %union.tree_node**
  %78 = load %union.tree_node** %rttree, align 8, !tbaa !17
  %79 = getelementptr inbounds %struct.rtx_def* %call101, i64 0, i32 1, i64 3, i32 0
  %.c = ptrtoint %union.tree_node* %78 to i64
  store i64 %.c, i64* %79, align 8, !tbaa !17
  br label %if.end113

if.else:                                          ; preds = %if.end98
  %first_insn110 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 2
  %80 = load %struct.rtx_def** %first_insn110, align 8, !tbaa !15
  %arrayidx112 = getelementptr inbounds %struct.rtx_def* %80, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx112 to i32*
  store i32 -99, i32* %rtint, align 4, !tbaa !58
  br label %if.end113

if.end113:                                        ; preds = %if.else, %if.then100
  %block_target_temp_slot_level = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 9
  %81 = load i32* %block_target_temp_slot_level, align 4, !tbaa !113
  %82 = load %struct.function** @cfun, align 8, !tbaa !17
  %x_target_temp_slot_level = getelementptr inbounds %struct.function* %82, i64 0, i32 42
  store i32 %81, i32* %x_target_temp_slot_level, align 4, !tbaa !112
  %innermost_stack_block = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 3
  %83 = load %struct.nesting** %innermost_stack_block, align 8, !tbaa !115
  %stmt118 = getelementptr inbounds %struct.function* %82, i64 0, i32 1
  %84 = load %struct.stmt_status** %stmt118, align 8, !tbaa !1
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %84, i64 0, i32 1
  store %struct.nesting* %83, %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %85 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt119 = getelementptr inbounds %struct.function* %85, i64 0, i32 1
  %86 = load %struct.stmt_status** %stmt119, align 8, !tbaa !1
  %x_block_stack120 = getelementptr inbounds %struct.stmt_status* %86, i64 0, i32 0
  %87 = load %struct.nesting** %x_block_stack120, align 8, !tbaa !9
  br label %do.body121

do.body121:                                       ; preds = %do.cond.do.body121_crit_edge, %if.end113
  %88 = phi %struct.stmt_status* [ %.pre239, %do.cond.do.body121_crit_edge ], [ %86, %if.end113 ]
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %88, i64 0, i32 5
  %89 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %88, i64 0, i32 3
  %90 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %cmp124 = icmp eq %struct.nesting* %90, %89
  br i1 %cmp124, label %if.then125, label %if.end131

if.then125:                                       ; preds = %do.body121
  %next128 = getelementptr inbounds %struct.nesting* %89, i64 0, i32 1
  %91 = load %struct.nesting** %next128, align 8, !tbaa !26
  store %struct.nesting* %91, %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %.pre240 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt132.phi.trans.insert = getelementptr inbounds %struct.function* %.pre240, i64 0, i32 1
  %.pre241 = load %struct.stmt_status** %stmt132.phi.trans.insert, align 8, !tbaa !1
  br label %if.end131

if.end131:                                        ; preds = %if.then125, %do.body121
  %92 = phi %struct.stmt_status* [ %.pre241, %if.then125 ], [ %88, %do.body121 ]
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %92, i64 0, i32 2
  %93 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %cmp133 = icmp eq %struct.nesting* %93, %89
  br i1 %cmp133, label %if.then134, label %if.end140

if.then134:                                       ; preds = %if.end131
  %next137 = getelementptr inbounds %struct.nesting* %89, i64 0, i32 1
  %94 = load %struct.nesting** %next137, align 8, !tbaa !26
  store %struct.nesting* %94, %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %.pre242 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt141.phi.trans.insert = getelementptr inbounds %struct.function* %.pre242, i64 0, i32 1
  %.pre243 = load %struct.stmt_status** %stmt141.phi.trans.insert, align 8, !tbaa !1
  br label %if.end140

if.end140:                                        ; preds = %if.then134, %if.end131
  %95 = phi %struct.stmt_status* [ %.pre243, %if.then134 ], [ %92, %if.end131 ]
  %x_block_stack142 = getelementptr inbounds %struct.stmt_status* %95, i64 0, i32 0
  %96 = load %struct.nesting** %x_block_stack142, align 8, !tbaa !9
  %cmp143 = icmp eq %struct.nesting* %96, %89
  br i1 %cmp143, label %if.then144, label %if.end150

if.then144:                                       ; preds = %if.end140
  %next147 = getelementptr inbounds %struct.nesting* %89, i64 0, i32 1
  %97 = load %struct.nesting** %next147, align 8, !tbaa !26
  store %struct.nesting* %97, %struct.nesting** %x_block_stack142, align 8, !tbaa !9
  %.pre244 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt151.phi.trans.insert = getelementptr inbounds %struct.function* %.pre244, i64 0, i32 1
  %.pre245 = load %struct.stmt_status** %stmt151.phi.trans.insert, align 8, !tbaa !1
  br label %if.end150

if.end150:                                        ; preds = %if.then144, %if.end140
  %98 = phi %struct.stmt_status* [ %.pre245, %if.then144 ], [ %95, %if.end140 ]
  %x_stack_block_stack152 = getelementptr inbounds %struct.stmt_status* %98, i64 0, i32 1
  %99 = load %struct.nesting** %x_stack_block_stack152, align 8, !tbaa !51
  %cmp153 = icmp eq %struct.nesting* %99, %89
  br i1 %cmp153, label %if.then154, label %if.end160

if.then154:                                       ; preds = %if.end150
  %next157 = getelementptr inbounds %struct.nesting* %89, i64 0, i32 1
  %100 = load %struct.nesting** %next157, align 8, !tbaa !26
  store %struct.nesting* %100, %struct.nesting** %x_stack_block_stack152, align 8, !tbaa !51
  %.pre246 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt161.phi.trans.insert = getelementptr inbounds %struct.function* %.pre246, i64 0, i32 1
  %.pre247 = load %struct.stmt_status** %stmt161.phi.trans.insert, align 8, !tbaa !1
  br label %if.end160

if.end160:                                        ; preds = %if.then154, %if.end150
  %101 = phi %struct.stmt_status* [ %.pre247, %if.then154 ], [ %98, %if.end150 ]
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %101, i64 0, i32 4
  %102 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %cmp162 = icmp eq %struct.nesting* %102, %89
  br i1 %cmp162, label %if.then163, label %if.end169

if.then163:                                       ; preds = %if.end160
  %next166 = getelementptr inbounds %struct.nesting* %89, i64 0, i32 1
  %103 = load %struct.nesting** %next166, align 8, !tbaa !26
  store %struct.nesting* %103, %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %.pre248 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt170.phi.trans.insert = getelementptr inbounds %struct.function* %.pre248, i64 0, i32 1
  %.pre249 = load %struct.stmt_status** %stmt170.phi.trans.insert, align 8, !tbaa !1
  br label %if.end169

if.end169:                                        ; preds = %if.then163, %if.end160
  %104 = phi %struct.stmt_status* [ %.pre249, %if.then163 ], [ %101, %if.end160 ]
  %x_nesting_stack171 = getelementptr inbounds %struct.stmt_status* %104, i64 0, i32 5
  %105 = load %struct.nesting** %x_nesting_stack171, align 8, !tbaa !52
  %depth = getelementptr inbounds %struct.nesting* %105, i64 0, i32 2
  %106 = load i32* %depth, align 4, !tbaa !100
  %sub = add nsw i32 %106, -1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %104, i64 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4, !tbaa !53
  %all = getelementptr inbounds %struct.nesting* %89, i64 0, i32 0
  %107 = load %struct.nesting** %all, align 8, !tbaa !77
  store %struct.nesting* %107, %struct.nesting** %x_nesting_stack171, align 8, !tbaa !52
  %108 = bitcast %struct.nesting* %89 to i8*
  %109 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %110 = bitcast %struct._obstack_chunk* %109 to %struct.nesting*
  %cmp175 = icmp ugt %struct.nesting* %89, %110
  %111 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8
  %cmp177 = icmp ult i8* %108, %111
  %or.cond = and i1 %cmp175, %cmp177
  br i1 %or.cond, label %if.then178, label %if.else179

if.then178:                                       ; preds = %if.end169
  store i8* %108, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  store i8* %108, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %do.cond

if.else179:                                       ; preds = %if.end169
  tail call void @obstack_free(%struct.obstack* @stmt_obstack, i8* %108) #6
  br label %do.cond

do.cond:                                          ; preds = %if.then178, %if.else179
  %cmp181 = icmp eq %struct.nesting* %89, %87
  br i1 %cmp181, label %do.end183, label %do.cond.do.body121_crit_edge

do.cond.do.body121_crit_edge:                     ; preds = %do.cond
  %.pre238 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt122.phi.trans.insert = getelementptr inbounds %struct.function* %.pre238, i64 0, i32 1
  %.pre239 = load %struct.stmt_status** %stmt122.phi.trans.insert, align 8, !tbaa !1
  br label %do.body121

do.end183:                                        ; preds = %do.cond
  tail call void @pop_temp_slots() #6
  ret void
}

declare void @pop_temp_slots() #2

; Function Attrs: nounwind readonly uwtable
define i32 @is_body_block(%union.tree_node* nocapture readonly %stmt) #3 {
entry:
  %code = getelementptr inbounds %union.tree_node* %stmt, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 4
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %supercontext = getelementptr inbounds %union.tree_node* %stmt, i64 0, i32 0, i32 5
  %0 = bitcast i48* %supercontext to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !119
  %tobool = icmp eq %union.tree_node* %1, null
  br i1 %tobool, label %if.end18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %code2 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load3 = load i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %cmp5 = icmp eq i32 %bf.clear4, 4
  br i1 %cmp5, label %if.then6, label %if.end18

if.then6:                                         ; preds = %land.lhs.true
  %supercontext8 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 5
  %2 = bitcast i48* %supercontext8 to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !119
  %tobool9 = icmp eq %union.tree_node* %3, null
  br i1 %tobool9, label %if.end18, label %land.lhs.true10

land.lhs.true10:                                  ; preds = %if.then6
  %code12 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load13 = load i32* %code12, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 30
  br i1 %cmp15, label %return, label %if.end18

if.end18:                                         ; preds = %if.then6, %if.then, %land.lhs.true, %land.lhs.true10, %entry
  br label %return

return:                                           ; preds = %land.lhs.true10, %if.end18
  %retval.0 = phi i32 [ 0, %if.end18 ], [ 1, %land.lhs.true10 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @conditional_context() #3 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %tobool = icmp eq %struct.nesting* %2, null
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %conditional_code = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 10
  %3 = load i32* %conditional_code, align 4, !tbaa !104
  %tobool3 = icmp ne i32 %3, 0
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %4 = phi i1 [ false, %entry ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind readonly uwtable
define %struct.nesting* @current_nesting_level() #3 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %tobool = icmp eq %struct.function* %0, null
  br i1 %tobool, label %cond.end, label %cond.true

cond.true:                                        ; preds = %entry
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.nesting* [ %2, %cond.true ], [ null, %entry ]
  ret %struct.nesting* %cond
}

; Function Attrs: nounwind uwtable
define void @warn_about_unused_variables(%union.tree_node* %vars) #0 {
entry:
  %0 = load i32* @warn_unused_variable, align 4, !tbaa !58
  %tobool = icmp eq i32 %0, 0
  %tobool133 = icmp eq %union.tree_node* %vars, null
  %or.cond = or i1 %tobool, %tobool133
  br i1 %or.cond, label %if.end24, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %decl.034 = phi %union.tree_node* [ %5, %for.inc ], [ %vars, %entry ]
  %code = getelementptr inbounds %union.tree_node* %decl.034, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %1 = and i32 %bf.load, 65791
  %2 = icmp eq i32 %1, 34
  br i1 %2, label %land.lhs.true6, label %for.inc

land.lhs.true6:                                   ; preds = %for.body
  %in_system_header_flag = getelementptr inbounds %union.tree_node* %decl.034, i64 0, i32 0, i32 5
  %3 = bitcast i48* %in_system_header_flag to i64*
  %bf.load8 = load i64* %3, align 8
  %bf.cast = and i64 %bf.load8, 65536
  %tobool11 = icmp eq i64 %bf.cast, 0
  br i1 %tobool11, label %land.lhs.true12, label %for.inc

land.lhs.true12:                                  ; preds = %land.lhs.true6
  %name = getelementptr inbounds %union.tree_node* %decl.034, i64 0, i32 0, i32 8
  %4 = load %union.tree_node** %name, align 8, !tbaa !62
  %tobool14 = icmp ne %union.tree_node* %4, null
  %bf.cast20 = and i64 %bf.load8, 4194304
  %tobool21 = icmp eq i64 %bf.cast20, 0
  %or.cond32 = and i1 %tobool14, %tobool21
  br i1 %or.cond32, label %if.then22, label %for.inc

if.then22:                                        ; preds = %land.lhs.true12
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %decl.034, i8* getelementptr inbounds ([21 x i8]* @.str16, i64 0, i64 0)) #6
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true12, %land.lhs.true6, %for.body, %if.then22
  %chain = getelementptr inbounds %union.tree_node* %decl.034, i64 0, i32 0, i32 0, i32 0
  %5 = load %union.tree_node** %chain, align 8, !tbaa !79
  %tobool1 = icmp eq %union.tree_node* %5, null
  br i1 %tobool1, label %if.end24, label %for.body

if.end24:                                         ; preds = %for.inc, %entry
  ret void
}

declare void @warning_with_decl(%union.tree_node*, i8*, ...) #2

declare void @error_with_decl(%union.tree_node*, i8*, ...) #2

declare %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @expand_cleanups(%union.tree_node* readonly %list, i32 %in_fixup, i32 %reachable) #0 {
entry:
  %tobool1 = icmp eq %union.tree_node* %list, null
  br i1 %tobool1, label %for.end, label %if.then.lr.ph

if.then.lr.ph:                                    ; preds = %entry
  %tobool8 = icmp eq i32 %in_fixup, 0
  %tobool13 = icmp eq i32 %reachable, 0
  br i1 %tobool8, label %if.then.us, label %if.then.lr.ph.if.then.lr.ph.split_crit_edge

if.then.lr.ph.if.then.lr.ph.split_crit_edge:      ; preds = %if.then.lr.ph
  br i1 %tobool13, label %if.then.us4, label %if.then

if.then.us:                                       ; preds = %if.then.lr.ph, %for.inc.us
  %tail.02.us = phi %union.tree_node* [ %4, %for.inc.us ], [ %list, %if.then.lr.ph ]
  %value.us = getelementptr inbounds %union.tree_node* %tail.02.us, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value.us to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !72
  %code.us = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load.us = load i32* %code.us, align 8
  %bf.clear.us = and i32 %bf.load.us, 255
  %cmp4.us = icmp eq i32 %bf.clear.us, 2
  br i1 %cmp4.us, label %if.then5.us, label %if.else.us

if.else.us:                                       ; preds = %if.then.us
  %.b52.us = load i1* @using_eh_for_cleanups_p, align 1
  br i1 %.b52.us, label %if.then10.us, label %if.end.us

if.then10.us:                                     ; preds = %if.else.us
  tail call void @expand_eh_region_end_cleanup(%union.tree_node* %1) #6
  br label %if.end.us

if.end.us:                                        ; preds = %if.then10.us, %if.else.us
  br i1 %tobool13, label %for.inc.us, label %land.lhs.true14.us

land.lhs.true14.us:                               ; preds = %if.end.us
  %static_flag.us = getelementptr inbounds %union.tree_node* %tail.02.us, i64 0, i32 0, i32 0, i32 2
  %bf.load16.us = load i32* %static_flag.us, align 8
  %bf.clear17.us = and i32 %bf.load16.us, 262144
  %tobool18.us = icmp eq i32 %bf.clear17.us, 0
  br i1 %tobool18.us, label %if.end32.us, label %for.inc.us

if.end32.us:                                      ; preds = %land.lhs.true14.us
  %2 = load %union.tree_node** %0, align 8, !tbaa !72
  %3 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call31.us = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %2, %struct.rtx_def* %3, i32 0, i32 0) #6
  tail call void @free_temp_slots() #6
  br label %for.inc.us

if.then5.us:                                      ; preds = %if.then.us
  tail call fastcc void @expand_cleanups(%union.tree_node* %1, i32 0, i32 %reachable)
  br label %for.inc.us

for.inc.us:                                       ; preds = %if.then5.us, %if.end32.us, %land.lhs.true14.us, %if.end.us
  %chain.us = getelementptr inbounds %union.tree_node* %tail.02.us, i64 0, i32 0, i32 0, i32 0
  %4 = load %union.tree_node** %chain.us, align 8, !tbaa !79
  %tobool.us = icmp eq %union.tree_node* %4, null
  br i1 %tobool.us, label %for.end, label %if.then.us

if.then.us4:                                      ; preds = %if.then.lr.ph.if.then.lr.ph.split_crit_edge, %for.inc.us28
  %tail.02.us5 = phi %union.tree_node* [ %7, %for.inc.us28 ], [ %list, %if.then.lr.ph.if.then.lr.ph.split_crit_edge ]
  %value.us6 = getelementptr inbounds %union.tree_node* %tail.02.us5, i64 0, i32 0, i32 2
  %5 = bitcast i32* %value.us6 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !72
  %code.us7 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load.us8 = load i32* %code.us7, align 8
  %bf.clear.us9 = and i32 %bf.load.us8, 255
  %cmp4.us10 = icmp eq i32 %bf.clear.us9, 2
  br i1 %cmp4.us10, label %if.then5.us27, label %for.inc.us28

if.then5.us27:                                    ; preds = %if.then.us4
  tail call fastcc void @expand_cleanups(%union.tree_node* %6, i32 %in_fixup, i32 0)
  br label %for.inc.us28

for.inc.us28:                                     ; preds = %if.then.us4, %if.then5.us27
  %chain.us30 = getelementptr inbounds %union.tree_node* %tail.02.us5, i64 0, i32 0, i32 0, i32 0
  %7 = load %union.tree_node** %chain.us30, align 8, !tbaa !79
  %tobool.us31 = icmp eq %union.tree_node* %7, null
  br i1 %tobool.us31, label %for.end, label %if.then.us4

if.then:                                          ; preds = %if.then.lr.ph.if.then.lr.ph.split_crit_edge, %for.inc
  %tail.02 = phi %union.tree_node* [ %14, %for.inc ], [ %list, %if.then.lr.ph.if.then.lr.ph.split_crit_edge ]
  %value = getelementptr inbounds %union.tree_node* %tail.02, i64 0, i32 0, i32 2
  %8 = bitcast i32* %value to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !72
  %code = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp4 = icmp eq i32 %bf.clear, 2
  br i1 %cmp4, label %if.then5, label %land.lhs.true14

if.then5:                                         ; preds = %if.then
  tail call fastcc void @expand_cleanups(%union.tree_node* %9, i32 %in_fixup, i32 %reachable)
  br label %for.inc

land.lhs.true14:                                  ; preds = %if.then
  %static_flag = getelementptr inbounds %union.tree_node* %tail.02, i64 0, i32 0, i32 0, i32 2
  %bf.load16 = load i32* %static_flag, align 8
  %bf.clear17 = and i32 %bf.load16, 262144
  %tobool18 = icmp eq i32 %bf.clear17, 0
  br i1 %tobool18, label %if.then19, label %for.inc

if.then19:                                        ; preds = %land.lhs.true14
  %.b = load i1* @using_eh_for_cleanups_p, align 1
  br i1 %.b, label %if.then23, label %if.else28

if.then23:                                        ; preds = %if.then19
  tail call void @expand_eh_region_start() #6
  %10 = load %union.tree_node** %8, align 8, !tbaa !72
  %11 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %10, %struct.rtx_def* %11, i32 0, i32 0) #6
  %12 = load %union.tree_node** %8, align 8, !tbaa !72
  tail call void @expand_eh_region_end_fixup(%union.tree_node* %12) #6
  br label %if.end32

if.else28:                                        ; preds = %if.then19
  %13 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call31 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %9, %struct.rtx_def* %13, i32 0, i32 0) #6
  br label %if.end32

if.end32:                                         ; preds = %if.else28, %if.then23
  tail call void @free_temp_slots() #6
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true14, %if.end32, %if.then5
  %chain = getelementptr inbounds %union.tree_node* %tail.02, i64 0, i32 0, i32 0, i32 0
  %14 = load %union.tree_node** %chain, align 8, !tbaa !79
  %tobool = icmp eq %union.tree_node* %14, null
  br i1 %tobool, label %for.end, label %if.then

for.end:                                          ; preds = %for.inc, %for.inc.us28, %for.inc.us, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @save_stack_pointer() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %stack_level = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  %3 = load %struct.rtx_def** %stack_level, align 8, !tbaa !13
  %cmp = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %next = getelementptr inbounds %struct.nesting* %2, i64 0, i32 1
  %4 = load %struct.nesting** %next, align 8, !tbaa !26
  %not.tobool = icmp eq %struct.nesting* %4, null
  %cond = zext i1 %not.tobool to i32
  %first_insn = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 2
  %5 = load %struct.rtx_def** %first_insn, align 8, !tbaa !15
  tail call void @emit_stack_save(i32 %cond, %struct.rtx_def** %stack_level, %struct.rtx_def* %5) #6
  %6 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt6 = getelementptr inbounds %struct.function* %6, i64 0, i32 1
  %7 = load %struct.stmt_status** %stmt6, align 8, !tbaa !1
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %7, i64 0, i32 1
  store %struct.nesting* %2, %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_decl(%union.tree_node* %decl) #0 {
entry:
  %unsignedp = alloca i32, align 4
  %type1 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !76
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.end426 [
    i32 32, label %if.then
    i32 34, label %if.end28
  ]

if.then:                                          ; preds = %entry
  %type3 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type3, i64 0, i32 6
  %bf.load4 = load i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load4, 9
  %mode7 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %1 = bitcast i48* %mode7 to i64*
  %2 = zext i32 %bf.lshr to i64
  %bf.load8 = load i64* %1, align 8
  %bf.value = and i64 %2, 127
  %bf.clear9 = and i64 %bf.load8, -256
  %bf.set = or i64 %bf.value, %bf.clear9
  store i64 %bf.set, i64* %1, align 8
  %align = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %3 = bitcast %union.tree_node** %align to i32*
  %4 = load i32* %3, align 4, !tbaa !106
  %u1 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %5 = bitcast %union.anon* %u1 to i32*
  %bf.load12 = load i32* %5, align 4
  %bf.value13 = and i32 %4, 16777215
  %bf.clear14 = and i32 %bf.load12, -16777216
  %bf.set15 = or i32 %bf.clear14, %bf.value13
  store i32 %bf.set15, i32* %5, align 4
  %size = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 2
  %6 = bitcast i32* %size to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !88
  %size18 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 4
  store %union.tree_node* %7, %union.tree_node** %size18, align 8, !tbaa !121
  %8 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 4
  %9 = load %union.tree_node** %8, align 8, !tbaa !122
  %size_unit21 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 7
  store %union.tree_node* %9, %union.tree_node** %size_unit21, align 8, !tbaa !123
  br label %if.end426

if.end28:                                         ; preds = %entry
  %bf.clear32 = and i32 %bf.load, 262144
  %tobool = icmp eq i32 %bf.clear32, 0
  br i1 %tobool, label %lor.lhs.false, label %if.end426

lor.lhs.false:                                    ; preds = %if.end28
  %external_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %10 = bitcast i48* %external_flag to i64*
  %bf.load34 = load i64* %10, align 8
  %bf.cast = and i64 %bf.load34, 256
  %tobool37 = icmp eq i64 %bf.cast, 0
  br i1 %tobool37, label %if.end39, label %if.end426

if.end39:                                         ; preds = %lor.lhs.false
  %11 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !17
  %cmp40 = icmp eq %union.tree_node* %0, %11
  br i1 %cmp40, label %if.then41, label %if.else

if.then41:                                        ; preds = %if.end39
  %12 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %12) #6
  %rtl = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl, align 8, !tbaa !59
  br label %if.end426

if.else:                                          ; preds = %if.end39
  %size44 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 4
  %13 = load %union.tree_node** %size44, align 8, !tbaa !121
  %cmp45 = icmp eq %union.tree_node* %13, null
  br i1 %cmp45, label %if.then46, label %if.else58

if.then46:                                        ; preds = %if.else
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %14 = load %union.tree_node** %initial, align 8, !tbaa !78
  %cmp48 = icmp eq %union.tree_node* %14, null
  br i1 %cmp48, label %if.then49, label %if.else51

if.then49:                                        ; preds = %if.then46
  %15 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call50 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %15) #6
  br label %if.end55

if.else51:                                        ; preds = %if.then46
  %16 = load i32* @target_flags, align 4, !tbaa !58
  %and = lshr i32 %16, 25
  %17 = and i32 %and, 1
  %18 = or i32 %17, 4
  %call53 = call %struct.rtx_def* @gen_reg_rtx(i32 %18) #6
  %call54 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call53) #6
  br label %if.end55

if.end55:                                         ; preds = %if.else51, %if.then49
  %x.0 = phi %struct.rtx_def* [ %call50, %if.then49 ], [ %call54, %if.else51 ]
  call void @set_mem_attributes(%struct.rtx_def* %x.0, %union.tree_node* %decl, i32 1) #6
  %rtl57 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  store %struct.rtx_def* %x.0, %struct.rtx_def** %rtl57, align 8, !tbaa !59
  br label %if.end426

if.else58:                                        ; preds = %if.else
  %bf.cast63 = and i64 %bf.load34, 255
  %cmp64 = icmp eq i64 %bf.cast63, 51
  br i1 %cmp64, label %if.else243, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else58
  %19 = load i32* @flag_float_store, align 4, !tbaa !58
  %tobool65 = icmp eq i32 %19, 0
  br i1 %tobool65, label %land.lhs.true72, label %land.lhs.true66

land.lhs.true66:                                  ; preds = %land.lhs.true
  %code68 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load69 = load i32* %code68, align 8
  %bf.clear70 = and i32 %bf.load69, 255
  %cmp71 = icmp ne i32 %bf.clear70, 7
  %bf.clear76 = and i32 %bf.load, 2048
  %tobool77 = icmp eq i32 %bf.clear76, 0
  %or.cond525 = and i1 %cmp71, %tobool77
  br i1 %or.cond525, label %land.lhs.true78, label %if.else243

land.lhs.true72:                                  ; preds = %land.lhs.true
  %.old = and i32 %bf.load, 2048
  %tobool77.old = icmp eq i32 %.old, 0
  br i1 %tobool77.old, label %land.lhs.true78, label %if.else243

land.lhs.true78:                                  ; preds = %land.lhs.true66, %land.lhs.true72
  %bf.cast83 = and i64 %bf.load34, 1024
  %tobool84 = icmp ne i64 %bf.cast83, 0
  %20 = load i32* @optimize, align 4
  %tobool86 = icmp ne i32 %20, 0
  %or.cond = or i1 %tobool84, %tobool86
  br i1 %or.cond, label %if.then87, label %if.else243

if.then87:                                        ; preds = %land.lhs.true78
  %unsigned_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load89 = load i32* %unsigned_flag, align 8
  %bf.lshr90 = lshr i32 %bf.load89, 13
  %bf.clear91 = and i32 %bf.lshr90, 1
  store i32 %bf.clear91, i32* %unsignedp, align 4, !tbaa !58
  %bf.load94.tr = trunc i64 %bf.load34 to i32
  %bf.cast96 = and i32 %bf.load94.tr, 255
  %call97 = call i32 @promote_mode(%union.tree_node* %0, i32 %bf.cast96, i32* %unsignedp, i32 0) #6
  %call98 = call %struct.rtx_def* @gen_reg_rtx(i32 %call97) #6
  %rtl100 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  store %struct.rtx_def* %call98, %struct.rtx_def** %rtl100, align 8, !tbaa !59
  %tobool103 = icmp eq %struct.rtx_def* %call98, null
  br i1 %tobool103, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.then87
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %21 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  br label %cond.end

cond.end:                                         ; preds = %if.then87, %cond.false
  %22 = phi %struct.rtx_def* [ %call98, %if.then87 ], [ %21, %cond.false ]
  %23 = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 0
  %bf.load109 = load i32* %23, align 8
  %bf.clear110 = and i32 %bf.load109, 65535
  %cmp111 = icmp eq i32 %bf.clear110, 61
  %tobool115 = icmp eq %struct.rtx_def* %22, null
  br i1 %cmp111, label %if.then112, label %if.else125

if.then112:                                       ; preds = %cond.end
  br i1 %tobool115, label %cond.false119, label %cond.end122

cond.false119:                                    ; preds = %if.then112
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %24 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  br label %cond.end122

cond.end122:                                      ; preds = %if.then112, %cond.false119
  %cond123 = phi %struct.rtx_def* [ %24, %cond.false119 ], [ %22, %if.then112 ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %cond123, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %25 = load i32* %rtuint, align 4, !tbaa !58
  %idxprom = zext i32 %25 to i64
  %26 = load %struct.function** @cfun, align 8, !tbaa !17
  %emit = getelementptr inbounds %struct.function* %26, i64 0, i32 3
  %27 = load %struct.emit_status** %emit, align 8, !tbaa !124
  %regno_decl = getelementptr inbounds %struct.emit_status* %27, i64 0, i32 11
  %28 = load %union.tree_node*** %regno_decl, align 8, !tbaa !125
  %arrayidx124 = getelementptr inbounds %union.tree_node** %28, i64 %idxprom
  store %union.tree_node* %decl, %union.tree_node** %arrayidx124, align 8, !tbaa !17
  br label %if.end183

if.else125:                                       ; preds = %cond.end
  br i1 %tobool115, label %cond.false132, label %cond.end135

cond.false132:                                    ; preds = %if.else125
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %29 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %29, i64 0, i32 0
  %bf.load137.pre = load i32* %.phi.trans.insert, align 8
  br label %cond.end135

cond.end135:                                      ; preds = %if.else125, %cond.false132
  %bf.load137 = phi i32 [ %bf.load137.pre, %cond.false132 ], [ %bf.load109, %if.else125 ]
  %30 = phi %struct.rtx_def* [ %29, %cond.false132 ], [ %22, %if.else125 ]
  %bf.clear138 = and i32 %bf.load137, 65535
  %cmp139 = icmp eq i32 %bf.clear138, 65
  br i1 %cmp139, label %if.then140, label %if.end183

if.then140:                                       ; preds = %cond.end135
  %tobool143 = icmp eq %struct.rtx_def* %30, null
  br i1 %tobool143, label %cond.false147, label %cond.end150

cond.false147:                                    ; preds = %if.then140
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %31 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  br label %cond.end150

cond.end150:                                      ; preds = %if.then140, %cond.false147
  %cond151 = phi %struct.rtx_def* [ %31, %cond.false147 ], [ %30, %if.then140 ]
  %arrayidx153 = getelementptr inbounds %struct.rtx_def* %cond151, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx153 to %struct.rtx_def**
  %32 = load %struct.rtx_def** %rtx, align 8, !tbaa !17
  %arrayidx155 = getelementptr inbounds %struct.rtx_def* %32, i64 0, i32 1, i64 0
  %rtuint156 = bitcast %union.rtunion_def* %arrayidx155 to i32*
  %33 = load i32* %rtuint156, align 4, !tbaa !58
  %idxprom157 = zext i32 %33 to i64
  %34 = load %struct.function** @cfun, align 8, !tbaa !17
  %emit158 = getelementptr inbounds %struct.function* %34, i64 0, i32 3
  %35 = load %struct.emit_status** %emit158, align 8, !tbaa !124
  %regno_decl159 = getelementptr inbounds %struct.emit_status* %35, i64 0, i32 11
  %36 = load %union.tree_node*** %regno_decl159, align 8, !tbaa !125
  %arrayidx160 = getelementptr inbounds %union.tree_node** %36, i64 %idxprom157
  store %union.tree_node* %decl, %union.tree_node** %arrayidx160, align 8, !tbaa !17
  %37 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  %tobool163 = icmp eq %struct.rtx_def* %37, null
  br i1 %tobool163, label %cond.false167, label %cond.end170

cond.false167:                                    ; preds = %cond.end150
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %38 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  br label %cond.end170

cond.end170:                                      ; preds = %cond.end150, %cond.false167
  %cond171 = phi %struct.rtx_def* [ %38, %cond.false167 ], [ %37, %cond.end150 ]
  %arrayidx173 = getelementptr inbounds %struct.rtx_def* %cond171, i64 0, i32 1, i64 1
  %rtx174 = bitcast %union.rtunion_def* %arrayidx173 to %struct.rtx_def**
  %39 = load %struct.rtx_def** %rtx174, align 8, !tbaa !17
  %arrayidx176 = getelementptr inbounds %struct.rtx_def* %39, i64 0, i32 1, i64 0
  %rtuint177 = bitcast %union.rtunion_def* %arrayidx176 to i32*
  %40 = load i32* %rtuint177, align 4, !tbaa !58
  %idxprom178 = zext i32 %40 to i64
  %41 = load %struct.function** @cfun, align 8, !tbaa !17
  %emit179 = getelementptr inbounds %struct.function* %41, i64 0, i32 3
  %42 = load %struct.emit_status** %emit179, align 8, !tbaa !124
  %regno_decl180 = getelementptr inbounds %struct.emit_status* %42, i64 0, i32 11
  %43 = load %union.tree_node*** %regno_decl180, align 8, !tbaa !125
  %arrayidx181 = getelementptr inbounds %union.tree_node** %43, i64 %idxprom178
  store %union.tree_node* %decl, %union.tree_node** %arrayidx181, align 8, !tbaa !17
  br label %if.end183

if.end183:                                        ; preds = %cond.end135, %cond.end170, %cond.end122
  %44 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  %tobool186 = icmp eq %struct.rtx_def* %44, null
  br i1 %tobool186, label %cond.false190, label %cond.end193

cond.false190:                                    ; preds = %if.end183
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %45 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  br label %cond.end193

cond.end193:                                      ; preds = %if.end183, %cond.false190
  %cond194 = phi %struct.rtx_def* [ %45, %cond.false190 ], [ %44, %if.end183 ]
  call void @mark_user_reg(%struct.rtx_def* %cond194) #6
  %bf.load197 = load i32* %unsigned_flag, align 8
  %bf.clear198 = and i32 %bf.load197, 255
  switch i32 %bf.clear198, label %if.end224 [
    i32 13, label %if.then206
    i32 15, label %if.then206
  ]

if.then206:                                       ; preds = %cond.end193, %cond.end193
  %46 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  %tobool209 = icmp eq %struct.rtx_def* %46, null
  br i1 %tobool209, label %cond.false213, label %cond.end216

cond.false213:                                    ; preds = %if.then206
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %47 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  br label %cond.end216

cond.end216:                                      ; preds = %if.then206, %cond.false213
  %cond217 = phi %struct.rtx_def* [ %47, %cond.false213 ], [ %46, %if.then206 ]
  %48 = load %union.tree_node** %type1, align 8, !tbaa !76
  %type221 = getelementptr inbounds %union.tree_node* %48, i64 0, i32 0, i32 0, i32 1
  %49 = load %union.tree_node** %type221, align 8, !tbaa !76
  %align223 = getelementptr inbounds %union.tree_node* %49, i64 0, i32 0, i32 7
  %50 = bitcast %union.tree_node** %align223 to i32*
  %51 = load i32* %50, align 4, !tbaa !106
  call void @mark_reg_pointer(%struct.rtx_def* %cond217, i32 %51) #6
  br label %if.end224

if.end224:                                        ; preds = %cond.end193, %cond.end216
  %52 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  %tobool227 = icmp eq %struct.rtx_def* %52, null
  br i1 %tobool227, label %cond.false231, label %cond.end234

cond.false231:                                    ; preds = %if.end224
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %53 = load %struct.rtx_def** %rtl100, align 8, !tbaa !59
  br label %cond.end234

cond.end234:                                      ; preds = %if.end224, %cond.false231
  %cond235 = phi %struct.rtx_def* [ %53, %cond.false231 ], [ %52, %if.end224 ]
  call void @maybe_set_unchanging(%struct.rtx_def* %cond235, %union.tree_node* %decl) #6
  %bf.load237 = load i32* %code, align 8
  %bf.clear239 = and i32 %bf.load237, 1024
  %tobool240 = icmp eq i32 %bf.clear239, 0
  br i1 %tobool240, label %if.end426, label %if.then241

if.then241:                                       ; preds = %cond.end234
  call void @put_var_into_stack(%union.tree_node* %decl) #6
  br label %if.end426

if.else243:                                       ; preds = %land.lhs.true66, %land.lhs.true72, %if.else58, %land.lhs.true78
  %size_unit245 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 7
  %54 = load %union.tree_node** %size_unit245, align 8, !tbaa !123
  %code247 = getelementptr inbounds %union.tree_node* %54, i64 0, i32 0, i32 0, i32 2
  %bf.load248 = load i32* %code247, align 8
  %bf.clear249 = and i32 %bf.load248, 255
  %cmp250 = icmp eq i32 %bf.clear249, 25
  br i1 %cmp250, label %land.lhs.true251, label %if.else375

land.lhs.true251:                                 ; preds = %if.else243
  %55 = load i32* @flag_stack_check, align 4, !tbaa !58
  %tobool252 = icmp eq i32 %55, 0
  br i1 %tobool252, label %if.then262, label %land.lhs.true253

land.lhs.true253:                                 ; preds = %land.lhs.true251
  %56 = load i32* @target_flags, align 4, !tbaa !58
  %and256 = lshr i32 %56, 23
  %57 = and i32 %and256, 4
  %sub = sub i32 4092, %57
  %div = udiv i32 %sub, 100
  %conv523 = zext i32 %div to i64
  %call259 = call i32 @compare_tree_int(%union.tree_node* %54, i64 %conv523) #6
  %cmp260 = icmp sgt i32 %call259, 0
  br i1 %cmp260, label %if.else375, label %if.then262

if.then262:                                       ; preds = %land.lhs.true251, %land.lhs.true253
  %rtl265 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  %58 = load %struct.rtx_def** %rtl265, align 8, !tbaa !59
  %cmp266 = icmp eq %struct.rtx_def* %58, null
  br i1 %cmp266, label %if.end319, label %cond.end278

cond.end278:                                      ; preds = %if.then262
  %59 = getelementptr inbounds %struct.rtx_def* %58, i64 0, i32 0
  %bf.load280 = load i32* %59, align 8
  %bf.clear281 = and i32 %bf.load280, 65535
  %cmp282 = icmp eq i32 %bf.clear281, 66
  br i1 %cmp282, label %cond.end294, label %if.then303

cond.end294:                                      ; preds = %cond.end278
  %arrayidx297 = getelementptr inbounds %struct.rtx_def* %58, i64 0, i32 1, i64 0
  %rtx298 = bitcast %union.rtunion_def* %arrayidx297 to %struct.rtx_def**
  %60 = load %struct.rtx_def** %rtx298, align 8, !tbaa !17
  %61 = getelementptr inbounds %struct.rtx_def* %60, i64 0, i32 0
  %bf.load299 = load i32* %61, align 8
  %bf.clear300 = and i32 %bf.load299, 65535
  %cmp301 = icmp eq i32 %bf.clear300, 61
  br i1 %cmp301, label %if.end319, label %if.then303

if.then303:                                       ; preds = %cond.end294, %cond.end278
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 3969, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.expand_decl, i64 0, i64 0)) #7
  unreachable

if.end319:                                        ; preds = %cond.end294, %if.then262
  %oldaddr.0 = phi %struct.rtx_def* [ null, %if.then262 ], [ %60, %cond.end294 ]
  %bf.load322 = load i64* %10, align 8
  %bf.load322.tr = trunc i64 %bf.load322 to i32
  %bf.cast324 = and i32 %bf.load322.tr, 255
  %cmp325 = icmp eq i32 %bf.cast324, 51
  br i1 %cmp325, label %cond.end337, label %cond.false328

cond.false328:                                    ; preds = %if.end319
  %idxprom334522 = zext i32 %bf.cast324 to i64
  %arrayidx335 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom334522
  %62 = load i16* %arrayidx335, align 2, !tbaa !84
  %conv336 = zext i16 %62 to i32
  br label %cond.end337

cond.end337:                                      ; preds = %if.end319, %cond.false328
  %cond338 = phi i32 [ %conv336, %cond.false328 ], [ 128, %if.end319 ]
  %u1340 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %63 = bitcast %union.anon* %u1340 to i32*
  %bf.load342 = load i32* %63, align 4
  %bf.clear344 = and i32 %bf.load342, -16777216
  %bf.set345 = or i32 %bf.clear344, %cond338
  store i32 %bf.set345, i32* %63, align 4
  %bf.clear348 = and i64 %bf.load322, -34359738369
  store i64 %bf.clear348, i64* %10, align 8
  %call349 = call %struct.rtx_def* @assign_temp(%union.tree_node* %decl, i32 1, i32 1, i32 1) #6
  call void @set_mem_attributes(%struct.rtx_def* %call349, %union.tree_node* %decl, i32 1) #6
  store %struct.rtx_def* %call349, %struct.rtx_def** %rtl265, align 8, !tbaa !59
  %tobool352 = icmp eq %struct.rtx_def* %oldaddr.0, null
  br i1 %tobool352, label %if.end426, label %if.then353

if.then353:                                       ; preds = %cond.end337
  %tobool356 = icmp eq %struct.rtx_def* %call349, null
  br i1 %tobool356, label %cond.false360, label %cond.end363

cond.false360:                                    ; preds = %if.then353
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %64 = load %struct.rtx_def** %rtl265, align 8, !tbaa !59
  br label %cond.end363

cond.end363:                                      ; preds = %if.then353, %cond.false360
  %cond364 = phi %struct.rtx_def* [ %64, %cond.false360 ], [ %call349, %if.then353 ]
  %arrayidx366 = getelementptr inbounds %struct.rtx_def* %cond364, i64 0, i32 1, i64 0
  %rtx367 = bitcast %union.rtunion_def* %arrayidx366 to %struct.rtx_def**
  %65 = load %struct.rtx_def** %rtx367, align 8, !tbaa !17
  %call368 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %65, %struct.rtx_def* %oldaddr.0) #6
  %cmp369 = icmp eq %struct.rtx_def* %call368, %oldaddr.0
  br i1 %cmp369, label %if.end426, label %if.then371

if.then371:                                       ; preds = %cond.end363
  %call372 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %oldaddr.0, %struct.rtx_def* %call368) #6
  br label %if.end426

if.else375:                                       ; preds = %land.lhs.true253, %if.else243
  call void @do_pending_stack_adjust() #6
  %66 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %66, i64 0, i32 1
  %67 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  %x_block_stack.i = getelementptr inbounds %struct.stmt_status* %67, i64 0, i32 0
  %68 = load %struct.nesting** %x_block_stack.i, align 8, !tbaa !9
  %stack_level.i = getelementptr inbounds %struct.nesting* %68, i64 0, i32 4, i32 0, i32 1
  %69 = load %struct.rtx_def** %stack_level.i, align 8, !tbaa !13
  %cmp.i = icmp eq %struct.rtx_def* %69, null
  br i1 %cmp.i, label %if.then.i, label %save_stack_pointer.exit

if.then.i:                                        ; preds = %if.else375
  %next.i = getelementptr inbounds %struct.nesting* %68, i64 0, i32 1
  %70 = load %struct.nesting** %next.i, align 8, !tbaa !26
  %not.tobool.i = icmp eq %struct.nesting* %70, null
  %cond.i = zext i1 %not.tobool.i to i32
  %first_insn.i = getelementptr inbounds %struct.nesting* %68, i64 0, i32 4, i32 0, i32 2
  %71 = load %struct.rtx_def** %first_insn.i, align 8, !tbaa !15
  call void @emit_stack_save(i32 %cond.i, %struct.rtx_def** %stack_level.i, %struct.rtx_def* %71) #6
  %72 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt6.i = getelementptr inbounds %struct.function* %72, i64 0, i32 1
  %73 = load %struct.stmt_status** %stmt6.i, align 8, !tbaa !1
  %x_stack_block_stack.i = getelementptr inbounds %struct.stmt_status* %73, i64 0, i32 1
  store %struct.nesting* %68, %struct.nesting** %x_stack_block_stack.i, align 8, !tbaa !51
  br label %save_stack_pointer.exit

save_stack_pointer.exit:                          ; preds = %if.else375, %if.then.i
  %code379 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load380 = load i32* %code379, align 8
  %bf.clear381 = and i32 %bf.load380, 255
  %cmp382 = icmp eq i32 %bf.clear381, 18
  br i1 %cmp382, label %land.lhs.true384, label %if.end392

land.lhs.true384:                                 ; preds = %save_stack_pointer.exit
  %values = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 1
  %74 = load i8** %values, align 8
  %tobool386 = icmp eq i8* %74, null
  br i1 %tobool386, label %if.end392, label %if.then387

if.then387:                                       ; preds = %land.lhs.true384
  %maxval = getelementptr inbounds i8* %74, i64 112
  %75 = bitcast i8* %maxval to %union.tree_node**
  %76 = load %union.tree_node** %75, align 8, !tbaa !127
  %77 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call391 = call %struct.rtx_def* @expand_expr(%union.tree_node* %76, %struct.rtx_def* %77, i32 0, i32 0) #6
  br label %if.end392

if.end392:                                        ; preds = %land.lhs.true384, %if.then387, %save_stack_pointer.exit
  %78 = load %union.tree_node** %size_unit245, align 8, !tbaa !123
  %call395 = call %struct.rtx_def* @expand_expr(%union.tree_node* %78, %struct.rtx_def* null, i32 0, i32 0) #6
  call void @free_temp_slots() #6
  %79 = load %union.tree_node** %type1, align 8, !tbaa !76
  %align399 = getelementptr inbounds %union.tree_node* %79, i64 0, i32 0, i32 7
  %80 = bitcast %union.tree_node** %align399 to i32*
  %81 = load i32* %80, align 4, !tbaa !106
  %call400 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %call395, %struct.rtx_def* null, i32 %81) #6
  %bf.load403 = load i64* %10, align 8
  %bf.load403.tr = trunc i64 %bf.load403 to i32
  %bf.cast405 = and i32 %bf.load403.tr, 255
  %call406 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast405, %struct.rtx_def* %call400) #6
  call void @set_mem_attributes(%struct.rtx_def* %call406, %union.tree_node* %decl, i32 1) #6
  %rtl408 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  store %struct.rtx_def* %call406, %struct.rtx_def** %rtl408, align 8, !tbaa !59
  %82 = load i32* @target_flags, align 4, !tbaa !58
  %and409 = lshr i32 %82, 20
  %83 = and i32 %and409, 32
  %84 = add i32 %83, 32
  %u1413 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %85 = bitcast %union.anon* %u1413 to i32*
  %bf.load415 = load i32* %85, align 4
  %bf.clear417 = and i32 %bf.load415, -16777216
  %bf.set418 = or i32 %84, %bf.clear417
  store i32 %bf.set418, i32* %85, align 4
  %bf.load421 = load i64* %10, align 8
  %bf.clear422 = and i64 %bf.load421, -34359738369
  store i64 %bf.clear422, i64* %10, align 8
  br label %if.end426

if.end426:                                        ; preds = %entry, %cond.end234, %cond.end363, %cond.end337, %lor.lhs.false, %if.end28, %if.end55, %if.end392, %if.then371, %if.then241, %if.then, %if.then41
  ret void
}

declare void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #2

declare i32 @promote_mode(%union.tree_node*, i32, i32*, i32) #2

declare void @mark_user_reg(%struct.rtx_def*) #2

declare void @mark_reg_pointer(%struct.rtx_def*, i32) #2

declare void @maybe_set_unchanging(%struct.rtx_def*, %union.tree_node*) #2

declare void @put_var_into_stack(%union.tree_node*) #2

declare i32 @compare_tree_int(%union.tree_node*, i64) #2

declare %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def*, %struct.rtx_def*, i32) #2

; Function Attrs: nounwind uwtable
define void @expand_decl_init(%union.tree_node* %decl) #0 {
entry:
  %used_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %used_flag, align 8
  %bf.clear = and i32 %bf.load, 65536
  %bf.clear3 = and i32 %bf.load, 255
  %cmp = icmp ne i32 %bf.clear3, 32
  %bf.clear7 = and i32 %bf.load, 262144
  %tobool = icmp eq i32 %bf.clear7, 0
  %or.cond = and i1 %cmp, %tobool
  br i1 %or.cond, label %if.end, label %return

if.end:                                           ; preds = %entry
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %0 = load %union.tree_node** %initial, align 8, !tbaa !78
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !17
  %cmp9 = icmp eq %union.tree_node* %0, %1
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.end
  %type = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !76
  %code14 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load15 = load i32* %code14, align 8
  %bf.clear16 = and i32 %bf.load15, 255
  %3 = and i32 %bf.load15, 254
  %4 = icmp eq i32 %3, 6
  %cmp21 = icmp eq i32 %bf.clear16, 10
  %or.cond54 = or i1 %4, %cmp21
  %cmp23 = icmp eq i32 %bf.clear16, 13
  %or.cond55 = or i1 %or.cond54, %cmp23
  %cmp25 = icmp eq i32 %bf.clear16, 15
  %or.cond56 = or i1 %or.cond55, %cmp25
  br i1 %or.cond56, label %if.then26, label %if.end30

if.then26:                                        ; preds = %if.then10
  %5 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !17
  %call = tail call %union.tree_node* @convert(%union.tree_node* %2, %union.tree_node* %5) #6
  %call29 = tail call %struct.rtx_def* @expand_assignment(%union.tree_node* %decl, %union.tree_node* %call, i32 0, i32 0) #6
  br label %if.end30

if.end30:                                         ; preds = %if.then10, %if.then26
  tail call void @emit_queue() #6
  br label %if.end49

if.else:                                          ; preds = %if.end
  %tobool33 = icmp eq %union.tree_node* %0, null
  br i1 %tobool33, label %if.end49, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %code37 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load38 = load i32* %code37, align 8
  %bf.clear39 = and i32 %bf.load38, 255
  %cmp40 = icmp eq i32 %bf.clear39, 2
  br i1 %cmp40, label %if.end49, label %if.then41

if.then41:                                        ; preds = %land.lhs.true
  %filename = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 1
  %6 = load i8** %filename, align 8, !tbaa !128
  %linenum = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 2
  %7 = load i32* %linenum, align 4, !tbaa !129
  %call44 = tail call %struct.rtx_def* @emit_line_note(i8* %6, i32 %7) #6
  %8 = load %union.tree_node** %initial, align 8, !tbaa !78
  %call47 = tail call %struct.rtx_def* @expand_assignment(%union.tree_node* %decl, %union.tree_node* %8, i32 0, i32 0) #6
  tail call void @emit_queue() #6
  br label %if.end49

if.end49:                                         ; preds = %land.lhs.true, %if.else, %if.then41, %if.end30
  %bf.load52 = load i32* %used_flag, align 8
  %bf.clear53 = and i32 %bf.load52, -65537
  %bf.set = or i32 %bf.clear53, %bf.clear
  store i32 %bf.set, i32* %used_flag, align 8
  tail call void @preserve_temp_slots(%struct.rtx_def* null) #6
  tail call void @free_temp_slots() #6
  br label %return

return:                                           ; preds = %entry, %if.end49
  ret void
}

declare %struct.rtx_def* @expand_assignment(%union.tree_node*, %union.tree_node*, i32, i32) #2

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #2

declare %struct.rtx_def* @emit_line_note(i8*, i32) #2

; Function Attrs: nounwind uwtable
define i32 @expand_decl_cleanup(%union.tree_node* %decl, %union.tree_node* %cleanup) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %cmp = icmp eq %struct.function* %0, null
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %cmp1 = icmp eq %struct.nesting* %2, null
  br i1 %cmp1, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %cmp4 = icmp eq %union.tree_node* %cleanup, null
  br i1 %cmp4, label %return, label %conditional_context.exit

conditional_context.exit:                         ; preds = %if.end
  %cleanups6 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %conditional_code.i = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 10
  %3 = load i32* %conditional_code.i, align 4, !tbaa !104
  %tobool3.i = icmp ne i32 %3, 0
  br i1 %tobool3.i, label %if.then7, label %if.end26

if.then7:                                         ; preds = %conditional_context.exit
  %4 = load i32* @word_mode, align 4, !tbaa !68
  %call8 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %4) #6
  tail call void @start_sequence() #6
  %5 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call9 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call8, %struct.rtx_def* %5) #6
  %call10 = tail call %struct.rtx_def* @get_insns() #6
  tail call void @end_sequence() #6
  %last_unconditional_cleanup = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 11
  %6 = load %struct.rtx_def** %last_unconditional_cleanup, align 8, !tbaa !25
  %call13 = tail call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %call10, %struct.rtx_def* %6) #6
  store %struct.rtx_def* %call13, %struct.rtx_def** %last_unconditional_cleanup, align 8, !tbaa !25
  %7 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !tbaa !17
  %call17 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call8, %struct.rtx_def* %7) #6
  %8 = load i32* @word_mode, align 4, !tbaa !68
  %call18 = tail call %union.tree_node* @type_for_mode(i32 %8, i32 1) #6
  %call19 = tail call %union.tree_node* @build_decl(i32 34, %union.tree_node* null, %union.tree_node* %call18) #6
  %rtl = getelementptr inbounds %union.tree_node* %call19, i64 0, i32 0, i32 17
  store %struct.rtx_def* %call8, %struct.rtx_def** %rtl, align 8, !tbaa !59
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !17
  %call21 = tail call %union.tree_node* @truthvalue_conversion(%union.tree_node* %call19) #6
  %10 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !17
  %call22 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 51, %union.tree_node* %9, %union.tree_node* %call21, %union.tree_node* %cleanup, %union.tree_node* %10) #6
  %call23 = tail call %union.tree_node* @fold(%union.tree_node* %call22) #6
  %cleanup_ptr = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 12
  %11 = load %union.tree_node*** %cleanup_ptr, align 8, !tbaa !114
  br label %if.end26

if.end26:                                         ; preds = %if.then7, %conditional_context.exit
  %cleanups.0 = phi %union.tree_node** [ %11, %if.then7 ], [ %cleanups6, %conditional_context.exit ]
  %cleanup.addr.0 = phi %union.tree_node* [ %call23, %if.then7 ], [ %cleanup, %conditional_context.exit ]
  %call27 = tail call %union.tree_node* @unsave_expr(%union.tree_node* %cleanup.addr.0) #6
  %12 = load %union.tree_node** %cleanups.0, align 8, !tbaa !17
  %call28 = tail call %union.tree_node* @tree_cons(%union.tree_node* %decl, %union.tree_node* %call27, %union.tree_node* %12) #6
  store %union.tree_node* %call28, %union.tree_node** %cleanups.0, align 8, !tbaa !17
  br i1 %tobool3.i, label %if.then34, label %if.then30

if.then30:                                        ; preds = %if.end26
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt31 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt31, align 8, !tbaa !1
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 1
  store %struct.nesting* %2, %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  br label %if.end35

if.then34:                                        ; preds = %if.end26
  tail call void @start_sequence() #6
  br label %if.end35

if.end35:                                         ; preds = %if.then30, %if.then34
  %.b = load i1* @using_eh_for_cleanups_p, align 1
  br i1 %.b, label %if.else, label %if.then37

if.then37:                                        ; preds = %if.end35
  %addressable_flag = getelementptr inbounds %union.tree_node* %call28, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %addressable_flag, align 8
  %bf.set = or i32 %bf.load, 1024
  store i32 %bf.set, i32* %addressable_flag, align 8
  br label %if.end38

if.else:                                          ; preds = %if.end35
  tail call void @expand_eh_region_start() #6
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.then37
  br i1 %tobool3.i, label %if.then40, label %if.else52

if.then40:                                        ; preds = %if.end38
  %call41 = tail call %struct.rtx_def* @get_insns() #6
  tail call void @end_sequence() #6
  %tobool42 = icmp eq %struct.rtx_def* %call41, null
  br i1 %tobool42, label %return, label %if.then43

if.then43:                                        ; preds = %if.then40
  %last_unconditional_cleanup46 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 11
  %15 = load %struct.rtx_def** %last_unconditional_cleanup46, align 8, !tbaa !25
  %call47 = tail call %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %call41, %struct.rtx_def* %15) #6
  store %struct.rtx_def* %call47, %struct.rtx_def** %last_unconditional_cleanup46, align 8, !tbaa !25
  br label %return

if.else52:                                        ; preds = %if.end38
  %call53 = tail call %struct.rtx_def* @get_last_insn() #6
  %last_unconditional_cleanup56 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 11
  store %struct.rtx_def* %call53, %struct.rtx_def** %last_unconditional_cleanup56, align 8, !tbaa !25
  %call57 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -99) #6
  %cleanup_ptr63 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 12
  store %union.tree_node** %cleanups6, %union.tree_node*** %cleanup_ptr63, align 8, !tbaa !114
  br label %return

return:                                           ; preds = %if.then43, %if.else52, %if.end, %if.then40, %entry, %lor.lhs.false
  %retval.0 = phi i32 [ 0, %lor.lhs.false ], [ 0, %entry ], [ 1, %if.then40 ], [ 1, %if.end ], [ 1, %if.else52 ], [ 1, %if.then43 ]
  ret i32 %retval.0
}

declare %struct.rtx_def* @emit_insns_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare %union.tree_node* @build_decl(i32, %union.tree_node*, %union.tree_node*) #2

declare %union.tree_node* @type_for_mode(i32, i32) #2

declare %union.tree_node* @truthvalue_conversion(%union.tree_node*) #2

declare %union.tree_node* @fold(%union.tree_node*) #2

declare %union.tree_node* @unsave_expr(%union.tree_node*) #2

declare void @expand_eh_region_start() #2

; Function Attrs: nounwind uwtable
define i32 @expand_decl_cleanup_eh(%union.tree_node* %decl, %union.tree_node* %cleanup, i32 %eh_only) #0 {
entry:
  %call = tail call i32 @expand_decl_cleanup(%union.tree_node* %decl, %union.tree_node* %cleanup)
  %tobool = icmp ne %union.tree_node* %cleanup, null
  %tobool1 = icmp ne i32 %call, 0
  %or.cond = and i1 %tobool, %tobool1
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %cleanups = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %3 = load %union.tree_node** %cleanups, align 8, !tbaa !16
  %static_flag = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %static_flag, align 8
  %bf.value = shl i32 %eh_only, 18
  %bf.shl = and i32 %bf.value, 262144
  %bf.clear = and i32 %bf.load, -262145
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %static_flag, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define void @expand_anon_union_decl(%union.tree_node* %decl, %union.tree_node* %cleanup, %union.tree_node* readonly %decl_elts) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %cmp = icmp eq %struct.function* %0, null
  br i1 %cmp, label %cond.end, label %cond.false

cond.false:                                       ; preds = %entry
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.false
  %cond = phi %struct.nesting* [ %2, %cond.false ], [ null, %entry ]
  %tobool164 = icmp eq %union.tree_node* %decl_elts, null
  br i1 %tobool164, label %for.end, label %for.body

for.body:                                         ; preds = %cond.end, %for.inc
  %t.0165 = phi %union.tree_node* [ %5, %for.inc ], [ %decl_elts, %cond.end ]
  %value = getelementptr inbounds %union.tree_node* %t.0165, i64 0, i32 0, i32 2
  %3 = bitcast i32* %value to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !72
  %addressable_flag = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %addressable_flag, align 8
  %bf.clear = and i32 %bf.load, 1024
  %tobool1 = icmp eq i32 %bf.clear, 0
  br i1 %tobool1, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %addressable_flag3 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load4 = load i32* %addressable_flag3, align 8
  %bf.set = or i32 %bf.load4, 1024
  store i32 %bf.set, i32* %addressable_flag3, align 8
  br label %for.end

for.inc:                                          ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node* %t.0165, i64 0, i32 0, i32 0, i32 0
  %5 = load %union.tree_node** %chain, align 8, !tbaa !79
  %tobool = icmp eq %union.tree_node* %5, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %cond.end, %if.then
  tail call void @expand_decl(%union.tree_node* %decl)
  %call = tail call i32 @expand_decl_cleanup(%union.tree_node* %decl, %union.tree_node* %cleanup)
  %rtl = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  %6 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  %tobool8 = icmp eq %struct.rtx_def* %6, null
  br i1 %tobool8, label %cond.false12, label %cond.end15

cond.false12:                                     ; preds = %for.end
  tail call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %7 = load %struct.rtx_def** %rtl, align 8, !tbaa !59
  br label %cond.end15

cond.end15:                                       ; preds = %for.end, %cond.false12
  %cond16 = phi %struct.rtx_def* [ %7, %cond.false12 ], [ %6, %for.end ]
  br i1 %tobool164, label %for.end123, label %for.body19.lr.ph

for.body19.lr.ph:                                 ; preds = %cond.end15
  %u1 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %8 = bitcast %union.anon* %u1 to i32*
  %user_align = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %9 = bitcast i48* %user_align to i64*
  %10 = getelementptr inbounds %struct.rtx_def* %cond16, i64 0, i32 0
  %cmp113 = icmp eq %union.tree_node* %cleanup, null
  %cleanups = getelementptr inbounds %struct.nesting* %cond, i64 0, i32 4, i32 0, i32 4
  %used_flag36 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  br label %for.body19

for.body19:                                       ; preds = %for.body19.lr.ph, %for.inc120
  %t.1163 = phi %union.tree_node* [ %decl_elts, %for.body19.lr.ph ], [ %21, %for.inc120 ]
  %value21 = getelementptr inbounds %union.tree_node* %t.1163, i64 0, i32 0, i32 2
  %11 = bitcast i32* %value21 to %union.tree_node**
  %12 = load %union.tree_node** %11, align 8, !tbaa !72
  %purpose = getelementptr inbounds %union.tree_node* %t.1163, i64 0, i32 0, i32 1
  %13 = load i8** %purpose, align 8
  %14 = bitcast i8* %13 to %union.tree_node*
  %type = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 1
  %15 = load %union.tree_node** %type, align 8, !tbaa !76
  %type24 = bitcast %union.tree_node* %15 to %struct.tree_type*
  %mode25 = getelementptr inbounds %struct.tree_type* %type24, i64 0, i32 6
  %bf.load26 = load i32* %mode25, align 4
  %bf.lshr27 = lshr i32 %bf.load26, 9
  %bf.clear28 = and i32 %bf.lshr27, 127
  %used_flag = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %bf.load30 = load i32* %used_flag, align 8
  %bf.clear32 = and i32 %bf.load30, 65536
  %tobool33 = icmp eq i32 %bf.clear32, 0
  br i1 %tobool33, label %if.end40, label %if.then34

if.then34:                                        ; preds = %for.body19
  %bf.load37 = load i32* %used_flag36, align 8
  %bf.set39 = or i32 %bf.load37, 65536
  store i32 %bf.set39, i32* %used_flag36, align 8
  br label %if.end40

if.end40:                                         ; preds = %for.body19, %if.then34
  %bf.load42 = load i32* %8, align 4
  %bf.clear43 = and i32 %bf.load42, 16777215
  %u145 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 6
  %16 = bitcast %union.anon* %u145 to i32*
  %bf.load47 = load i32* %16, align 4
  %bf.clear48 = and i32 %bf.load47, -16777216
  %bf.set49 = or i32 %bf.clear48, %bf.clear43
  store i32 %bf.set49, i32* %16, align 4
  %bf.load51 = load i64* %9, align 8
  %user_align55 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 5
  %17 = bitcast i48* %user_align55 to i64*
  %bf.load56 = load i64* %17, align 8
  %bf.shl = and i64 %bf.load51, 34359738368
  %bf.clear58 = and i64 %bf.load56, -34359738369
  %bf.set59 = or i64 %bf.clear58, %bf.shl
  store i64 %bf.set59, i64* %17, align 8
  %cmp60 = icmp eq i32 %bf.clear28, 51
  br i1 %cmp60, label %land.lhs.true, label %if.end77

land.lhs.true:                                    ; preds = %if.end40
  %bf.load63 = load i64* %9, align 8
  %bf.cast65 = and i64 %bf.load63, 255
  %cmp66 = icmp eq i64 %bf.cast65, 51
  br i1 %cmp66, label %if.end77, label %if.then67

if.then67:                                        ; preds = %land.lhs.true
  %size = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 4
  %18 = load %union.tree_node** %size, align 8, !tbaa !121
  %call69 = tail call i32 @mode_for_size_tree(%union.tree_node* %18, i32 1, i32 1) #6
  %19 = zext i32 %call69 to i64
  %bf.load72 = load i64* %17, align 8
  %bf.value73 = and i64 %19, 255
  %bf.clear74 = and i64 %bf.load72, -256
  %bf.set75 = or i64 %bf.clear74, %bf.value73
  store i64 %bf.set75, i64* %17, align 8
  br label %if.end77

if.end77:                                         ; preds = %land.lhs.true, %if.then67, %if.end40
  %mode.0 = phi i32 [ %call69, %if.then67 ], [ 51, %land.lhs.true ], [ %bf.clear28, %if.end40 ]
  %bf.load78 = load i32* %10, align 8
  %bf.clear79 = and i32 %bf.load78, 65535
  switch i32 %bf.clear79, label %if.else110 [
    i32 66, label %if.then81
    i32 61, label %if.then97
  ]

if.then81:                                        ; preds = %if.end77
  %bf.lshr83 = lshr i32 %bf.load78, 16
  %bf.clear84 = and i32 %bf.lshr83, 255
  %cmp85 = icmp eq i32 %mode.0, %bf.clear84
  br i1 %cmp85, label %if.then86, label %if.else

if.then86:                                        ; preds = %if.then81
  %rtl88 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 17
  store %struct.rtx_def* %cond16, %struct.rtx_def** %rtl88, align 8, !tbaa !59
  br label %if.end112

if.else:                                          ; preds = %if.then81
  %call89 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %cond16, i32 %mode.0, i64 0, i32 0, i32 1) #6
  %rtl91 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 17
  store %struct.rtx_def* %call89, %struct.rtx_def** %rtl91, align 8, !tbaa !59
  br label %if.end112

if.then97:                                        ; preds = %if.end77
  %bf.lshr99 = lshr i32 %bf.load78, 16
  %bf.clear100 = and i32 %bf.lshr99, 255
  %cmp101 = icmp eq i32 %mode.0, %bf.clear100
  br i1 %cmp101, label %if.then102, label %if.else105

if.then102:                                       ; preds = %if.then97
  %rtl104 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 17
  store %struct.rtx_def* %cond16, %struct.rtx_def** %rtl104, align 8, !tbaa !59
  br label %if.end112

if.else105:                                       ; preds = %if.then97
  %call106 = tail call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %mode.0, %struct.rtx_def* %cond16) #6
  %rtl108 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 17
  store %struct.rtx_def* %call106, %struct.rtx_def** %rtl108, align 8, !tbaa !59
  br label %if.end112

if.else110:                                       ; preds = %if.end77
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 4259, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.expand_anon_union_decl, i64 0, i64 0)) #7
  unreachable

if.end112:                                        ; preds = %if.else105, %if.then102, %if.then86, %if.else
  br i1 %cmp113, label %for.inc120, label %if.then114

if.then114:                                       ; preds = %if.end112
  %20 = load %union.tree_node** %cleanups, align 8, !tbaa !16
  %call115 = tail call %union.tree_node* @tree_cons(%union.tree_node* %12, %union.tree_node* %14, %union.tree_node* %20) #6
  store %union.tree_node* %call115, %union.tree_node** %cleanups, align 8, !tbaa !16
  br label %for.inc120

for.inc120:                                       ; preds = %if.end112, %if.then114
  %chain122 = getelementptr inbounds %union.tree_node* %t.1163, i64 0, i32 0, i32 0, i32 0
  %21 = load %union.tree_node** %chain122, align 8, !tbaa !79
  %tobool18 = icmp eq %union.tree_node* %21, null
  br i1 %tobool18, label %for.end123, label %for.body19

for.end123:                                       ; preds = %for.inc120, %cond.end15
  ret void
}

declare i32 @mode_for_size_tree(%union.tree_node*, i32, i32) #2

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #2

declare %struct.rtx_def* @gen_lowpart_SUBREG(i32, %struct.rtx_def*) #2

; Function Attrs: nounwind uwtable
define void @move_cleanups_up() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %next = getelementptr inbounds %struct.nesting* %2, i64 0, i32 1
  %3 = load %struct.nesting** %next, align 8, !tbaa !26
  %cleanups = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %4 = load %union.tree_node** %cleanups, align 8, !tbaa !16
  %cleanups4 = getelementptr inbounds %struct.nesting* %3, i64 0, i32 4, i32 0, i32 4
  %5 = load %union.tree_node** %cleanups4, align 8, !tbaa !16
  %call = tail call %union.tree_node* @chainon(%union.tree_node* %4, %union.tree_node* %5) #6
  store %union.tree_node* %call, %union.tree_node** %cleanups4, align 8, !tbaa !16
  store %union.tree_node* null, %union.tree_node** %cleanups, align 8, !tbaa !16
  ret void
}

declare %union.tree_node* @chainon(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @last_cleanup_this_contour() #3 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %cmp = icmp eq %struct.nesting* %2, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cleanups = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %3 = load %union.tree_node** %cleanups, align 8, !tbaa !16
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %3, %if.end ], [ null, %entry ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @any_pending_cleanups(i32 %this_contour) #3 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %cmp = icmp eq %struct.function* %0, null
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %cmp1 = icmp eq %struct.stmt_status* %1, null
  br i1 %cmp1, label %return, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %cmp4 = icmp eq %struct.nesting* %2, null
  br i1 %cmp4, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false2
  %tobool = icmp eq i32 %this_contour, 0
  %cleanups15.phi.trans.insert = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %.pre = load %union.tree_node** %cleanups15.phi.trans.insert, align 8, !tbaa !16
  %phitmp = icmp eq %union.tree_node* %.pre, null
  br i1 %tobool, label %if.end10, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  br i1 %phitmp, label %land.lhs.true17, label %return

if.end10:                                         ; preds = %if.end
  br i1 %phitmp, label %land.lhs.true17, label %for.cond

land.lhs.true17:                                  ; preds = %land.lhs.true, %if.end10
  %outer_cleanups = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 5
  %3 = load %union.tree_node** %outer_cleanups, align 8, !tbaa !22
  %cmp22 = icmp eq %union.tree_node* %3, null
  br i1 %cmp22, label %return, label %for.cond

for.cond:                                         ; preds = %if.end10, %land.lhs.true17, %for.body
  %.pn = phi %struct.nesting* [ %block.0, %for.body ], [ %2, %land.lhs.true17 ], [ %2, %if.end10 ]
  %block.0.in = getelementptr inbounds %struct.nesting* %.pn, i64 0, i32 1
  %block.0 = load %struct.nesting** %block.0.in, align 8
  %tobool27 = icmp eq %struct.nesting* %block.0, null
  br i1 %tobool27, label %return, label %for.body

for.body:                                         ; preds = %for.cond
  %cleanups30 = getelementptr inbounds %struct.nesting* %block.0, i64 0, i32 4, i32 0, i32 4
  %4 = load %union.tree_node** %cleanups30, align 8, !tbaa !16
  %cmp31 = icmp eq %union.tree_node* %4, null
  br i1 %cmp31, label %for.cond, label %return

return:                                           ; preds = %for.cond, %for.body, %land.lhs.true17, %land.lhs.true, %entry, %lor.lhs.false, %lor.lhs.false2
  %retval.0 = phi i32 [ 0, %lor.lhs.false2 ], [ 0, %lor.lhs.false ], [ 0, %entry ], [ 1, %land.lhs.true ], [ 0, %land.lhs.true17 ], [ 0, %for.cond ], [ 1, %for.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @expand_start_case(i32 %exit_flag, %union.tree_node* %expr, %union.tree_node* %type, i8* %printname) #0 {
entry:
  %0 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %1 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 120
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_obstack_newchunk(%struct.obstack* @stmt_obstack, i32 120) #6
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i8* [ %.pre, %if.then ], [ %1, %entry ]
  %add.ptr = getelementptr inbounds i8* %2, i64 120
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %3 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %cmp6 = icmp eq i8* %add.ptr, %3
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %sub.ptr.lhs.cast11 = ptrtoint i8* %add.ptr to i64
  %4 = load i32* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 6), align 8, !tbaa !98
  %conv13 = sext i32 %4 to i64
  %add = add nsw i64 %conv13, %sub.ptr.lhs.cast11
  %neg = xor i32 %4, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr16, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %5 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %sub.ptr.lhs.cast19 = ptrtoint i8* %add.ptr16 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct._obstack_chunk* %5 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %6 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %sub.ptr.lhs.cast24 = ptrtoint i8* %6 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast20
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end9
  store i8* %6, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %if.end9
  %7 = phi i8* [ %6, %if.then29 ], [ %add.ptr16, %if.end9 ]
  store i8* %7, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %8 = bitcast i8* %3 to %struct.nesting*
  %9 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %9, i64 0, i32 1
  %10 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %10, i64 0, i32 4
  %11 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %next = getelementptr inbounds i8* %3, i64 8
  %12 = bitcast i8* %next to %struct.nesting**
  store %struct.nesting* %11, %struct.nesting** %12, align 8, !tbaa !26
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt36 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt36, align 8, !tbaa !1
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 5
  %15 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %all = bitcast i8* %3 to %struct.nesting**
  store %struct.nesting* %15, %struct.nesting** %all, align 8, !tbaa !77
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt37 = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt37, align 8, !tbaa !1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 6
  %18 = load i32* %x_nesting_depth, align 4, !tbaa !53
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %x_nesting_depth, align 4, !tbaa !53
  %depth = getelementptr inbounds i8* %3, i64 16
  %19 = bitcast i8* %depth to i32*
  store i32 %inc, i32* %19, align 4, !tbaa !100
  %tobool = icmp eq i32 %exit_flag, 0
  br i1 %tobool, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.end32
  %call = tail call %struct.rtx_def* @gen_label_rtx() #6
  br label %cond.end

cond.end:                                         ; preds = %if.end32, %cond.true
  %cond = phi %struct.rtx_def* [ %call, %cond.true ], [ null, %if.end32 ]
  %exit_label = getelementptr inbounds i8* %3, i64 24
  %20 = bitcast i8* %exit_label to %struct.rtx_def**
  store %struct.rtx_def* %cond, %struct.rtx_def** %20, align 8, !tbaa !11
  %data = getelementptr inbounds i8* %3, i64 32
  %case_list = getelementptr inbounds i8* %3, i64 40
  %21 = bitcast i8* %case_list to %struct.case_node**
  store %struct.case_node* null, %struct.case_node** %21, align 8, !tbaa !130
  %index_expr = getelementptr inbounds i8* %3, i64 56
  %22 = bitcast i8* %index_expr to %union.tree_node**
  store %union.tree_node* %expr, %union.tree_node** %22, align 8, !tbaa !131
  %nominal_type = getelementptr inbounds i8* %3, i64 64
  %23 = bitcast i8* %nominal_type to %union.tree_node**
  store %union.tree_node* %type, %union.tree_node** %23, align 8, !tbaa !39
  %default_label = getelementptr inbounds i8* %3, i64 48
  %24 = bitcast i8* %default_label to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %24, align 8, !tbaa !132
  %printname46 = getelementptr inbounds i8* %3, i64 72
  %25 = bitcast i8* %printname46 to i8**
  store i8* %printname, i8** %25, align 8, !tbaa !133
  %call47 = tail call i32 @force_line_numbers() #6
  %line_number_status = getelementptr inbounds i8* %3, i64 80
  %26 = bitcast i8* %line_number_status to i32*
  store i32 %call47, i32* %26, align 4, !tbaa !134
  %27 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt50 = getelementptr inbounds %struct.function* %27, i64 0, i32 1
  %28 = load %struct.stmt_status** %stmt50, align 8, !tbaa !1
  %x_case_stack51 = getelementptr inbounds %struct.stmt_status* %28, i64 0, i32 4
  store %struct.nesting* %8, %struct.nesting** %x_case_stack51, align 8, !tbaa !36
  %29 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt52 = getelementptr inbounds %struct.function* %29, i64 0, i32 1
  %30 = load %struct.stmt_status** %stmt52, align 8, !tbaa !1
  %x_nesting_stack53 = getelementptr inbounds %struct.stmt_status* %30, i64 0, i32 5
  store %struct.nesting* %8, %struct.nesting** %x_nesting_stack53, align 8, !tbaa !52
  tail call void @do_pending_stack_adjust() #6
  %call54 = tail call %struct.rtx_def* @get_last_insn() #6
  %31 = getelementptr inbounds %struct.rtx_def* %call54, i64 0, i32 0
  %bf.load55 = load i32* %31, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 37
  br i1 %cmp57, label %if.end61, label %if.then59

if.then59:                                        ; preds = %cond.end
  %call60 = tail call %struct.rtx_def* @emit_note(i8* null, i32 -99) #6
  br label %if.end61

if.end61:                                         ; preds = %cond.end, %if.then59
  %call62 = tail call %struct.rtx_def* @get_last_insn() #6
  %start = bitcast i8* %data to %struct.rtx_def**
  store %struct.rtx_def* %call62, %struct.rtx_def** %start, align 8, !tbaa !37
  %32 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %32, i64 0, i32 1
  %33 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  %x_block_stack.i = getelementptr inbounds %struct.stmt_status* %33, i64 0, i32 0
  %34 = load %struct.nesting** %x_block_stack.i, align 8, !tbaa !9
  %tobool.i = icmp eq %struct.nesting* %34, null
  br i1 %tobool.i, label %start_cleanup_deferral.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end61
  %conditional_code.i = getelementptr inbounds %struct.nesting* %34, i64 0, i32 4, i32 0, i32 10
  %35 = load i32* %conditional_code.i, align 4, !tbaa !104
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, i32* %conditional_code.i, align 4, !tbaa !104
  br label %start_cleanup_deferral.exit

start_cleanup_deferral.exit:                      ; preds = %if.end61, %if.then.i
  ret void
}

declare i32 @force_line_numbers() #2

; Function Attrs: nounwind uwtable
define void @expand_start_case_dummy() #0 {
entry:
  %0 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %1 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 120
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_obstack_newchunk(%struct.obstack* @stmt_obstack, i32 120) #6
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i8* [ %.pre, %if.then ], [ %1, %entry ]
  %add.ptr = getelementptr inbounds i8* %2, i64 120
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %3 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %cmp6 = icmp eq i8* %add.ptr, %3
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 10), align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %sub.ptr.lhs.cast11 = ptrtoint i8* %add.ptr to i64
  %4 = load i32* getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 6), align 8, !tbaa !98
  %conv13 = sext i32 %4 to i64
  %add = add nsw i64 %conv13, %sub.ptr.lhs.cast11
  %neg = xor i32 %4, -1
  %conv15 = sext i32 %neg to i64
  %and = and i64 %add, %conv15
  %add.ptr16 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr16, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  %5 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %sub.ptr.lhs.cast19 = ptrtoint i8* %add.ptr16 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct._obstack_chunk* %5 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %6 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8, !tbaa !94
  %sub.ptr.lhs.cast24 = ptrtoint i8* %6 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast20
  %cmp27 = icmp sgt i64 %sub.ptr.sub21, %sub.ptr.sub26
  br i1 %cmp27, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end9
  store i8* %6, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %if.end9
  %7 = phi i8* [ %6, %if.then29 ], [ %add.ptr16, %if.end9 ]
  store i8* %7, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  %8 = bitcast i8* %3 to %struct.nesting*
  %9 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %9, i64 0, i32 1
  %10 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %10, i64 0, i32 4
  %11 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %next = getelementptr inbounds i8* %3, i64 8
  %12 = bitcast i8* %next to %struct.nesting**
  store %struct.nesting* %11, %struct.nesting** %12, align 8, !tbaa !26
  %13 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt36 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt36, align 8, !tbaa !1
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 5
  %15 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %all = bitcast i8* %3 to %struct.nesting**
  store %struct.nesting* %15, %struct.nesting** %all, align 8, !tbaa !77
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt37 = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt37, align 8, !tbaa !1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 6
  %18 = load i32* %x_nesting_depth, align 4, !tbaa !53
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %x_nesting_depth, align 4, !tbaa !53
  %depth = getelementptr inbounds i8* %3, i64 16
  %19 = bitcast i8* %depth to i32*
  store i32 %inc, i32* %19, align 4, !tbaa !100
  %exit_label = getelementptr inbounds i8* %3, i64 24
  %nominal_type = getelementptr inbounds i8* %3, i64 64
  %20 = bitcast i8* %nominal_type to %union.tree_node**
  store %union.tree_node* null, %union.tree_node** %20, align 8, !tbaa !39
  call void @llvm.memset.p0i8.i64(i8* %exit_label, i8 0, i64 32, i32 8, i1 false)
  %21 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt44 = getelementptr inbounds %struct.function* %21, i64 0, i32 1
  %22 = load %struct.stmt_status** %stmt44, align 8, !tbaa !1
  %x_case_stack45 = getelementptr inbounds %struct.stmt_status* %22, i64 0, i32 4
  store %struct.nesting* %8, %struct.nesting** %x_case_stack45, align 8, !tbaa !36
  %23 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt46 = getelementptr inbounds %struct.function* %23, i64 0, i32 1
  %24 = load %struct.stmt_status** %stmt46, align 8, !tbaa !1
  %x_nesting_stack47 = getelementptr inbounds %struct.stmt_status* %24, i64 0, i32 5
  store %struct.nesting* %8, %struct.nesting** %x_nesting_stack47, align 8, !tbaa !52
  %25 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %25, i64 0, i32 1
  %26 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  %x_block_stack.i = getelementptr inbounds %struct.stmt_status* %26, i64 0, i32 0
  %27 = load %struct.nesting** %x_block_stack.i, align 8, !tbaa !9
  %tobool.i = icmp eq %struct.nesting* %27, null
  br i1 %tobool.i, label %start_cleanup_deferral.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end32
  %conditional_code.i = getelementptr inbounds %struct.nesting* %27, i64 0, i32 4, i32 0, i32 10
  %28 = load i32* %conditional_code.i, align 4, !tbaa !104
  %inc.i = add nsw i32 %28, 1
  store i32 %inc.i, i32* %conditional_code.i, align 4, !tbaa !104
  br label %start_cleanup_deferral.exit

start_cleanup_deferral.exit:                      ; preds = %if.end32, %if.then.i
  ret void
}

; Function Attrs: nounwind uwtable
define void @expand_end_case_dummy() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  %x_block_stack.i = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 0
  %2 = load %struct.nesting** %x_block_stack.i, align 8, !tbaa !9
  %tobool.i = icmp eq %struct.nesting* %2, null
  br i1 %tobool.i, label %end_cleanup_deferral.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %conditional_code.i = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 10
  %3 = load i32* %conditional_code.i, align 4, !tbaa !104
  %dec.i = add nsw i32 %3, -1
  store i32 %dec.i, i32* %conditional_code.i, align 4, !tbaa !104
  br label %end_cleanup_deferral.exit

end_cleanup_deferral.exit:                        ; preds = %entry, %if.then.i
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 4
  %4 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  br label %do.body1

do.body1:                                         ; preds = %do.cond.do.body1_crit_edge, %end_cleanup_deferral.exit
  %5 = phi %struct.stmt_status* [ %.pre71, %do.cond.do.body1_crit_edge ], [ %1, %end_cleanup_deferral.exit ]
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %5, i64 0, i32 5
  %6 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %5, i64 0, i32 3
  %7 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %cmp = icmp eq %struct.nesting* %7, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body1
  %next = getelementptr inbounds %struct.nesting* %6, i64 0, i32 1
  %8 = load %struct.nesting** %next, align 8, !tbaa !26
  store %struct.nesting* %8, %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %.pre72 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt8.phi.trans.insert = getelementptr inbounds %struct.function* %.pre72, i64 0, i32 1
  %.pre73 = load %struct.stmt_status** %stmt8.phi.trans.insert, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body1
  %9 = phi %struct.stmt_status* [ %.pre73, %if.then ], [ %5, %do.body1 ]
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 2
  %10 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %cmp9 = icmp eq %struct.nesting* %10, %6
  br i1 %cmp9, label %if.then10, label %if.end16

if.then10:                                        ; preds = %if.end
  %next13 = getelementptr inbounds %struct.nesting* %6, i64 0, i32 1
  %11 = load %struct.nesting** %next13, align 8, !tbaa !26
  store %struct.nesting* %11, %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %.pre74 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt17.phi.trans.insert = getelementptr inbounds %struct.function* %.pre74, i64 0, i32 1
  %.pre75 = load %struct.stmt_status** %stmt17.phi.trans.insert, align 8, !tbaa !1
  br label %if.end16

if.end16:                                         ; preds = %if.then10, %if.end
  %12 = phi %struct.stmt_status* [ %.pre75, %if.then10 ], [ %9, %if.end ]
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %12, i64 0, i32 0
  %13 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %cmp18 = icmp eq %struct.nesting* %13, %6
  br i1 %cmp18, label %if.then19, label %if.end25

if.then19:                                        ; preds = %if.end16
  %next22 = getelementptr inbounds %struct.nesting* %6, i64 0, i32 1
  %14 = load %struct.nesting** %next22, align 8, !tbaa !26
  store %struct.nesting* %14, %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %.pre76 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt26.phi.trans.insert = getelementptr inbounds %struct.function* %.pre76, i64 0, i32 1
  %.pre77 = load %struct.stmt_status** %stmt26.phi.trans.insert, align 8, !tbaa !1
  br label %if.end25

if.end25:                                         ; preds = %if.then19, %if.end16
  %15 = phi %struct.stmt_status* [ %.pre77, %if.then19 ], [ %12, %if.end16 ]
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %15, i64 0, i32 1
  %16 = load %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %cmp27 = icmp eq %struct.nesting* %16, %6
  br i1 %cmp27, label %if.then28, label %if.end34

if.then28:                                        ; preds = %if.end25
  %next31 = getelementptr inbounds %struct.nesting* %6, i64 0, i32 1
  %17 = load %struct.nesting** %next31, align 8, !tbaa !26
  store %struct.nesting* %17, %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %.pre78 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt35.phi.trans.insert = getelementptr inbounds %struct.function* %.pre78, i64 0, i32 1
  %.pre79 = load %struct.stmt_status** %stmt35.phi.trans.insert, align 8, !tbaa !1
  br label %if.end34

if.end34:                                         ; preds = %if.then28, %if.end25
  %18 = phi %struct.stmt_status* [ %.pre79, %if.then28 ], [ %15, %if.end25 ]
  %x_case_stack36 = getelementptr inbounds %struct.stmt_status* %18, i64 0, i32 4
  %19 = load %struct.nesting** %x_case_stack36, align 8, !tbaa !36
  %cmp37 = icmp eq %struct.nesting* %19, %6
  br i1 %cmp37, label %if.then38, label %if.end44

if.then38:                                        ; preds = %if.end34
  %next41 = getelementptr inbounds %struct.nesting* %6, i64 0, i32 1
  %20 = load %struct.nesting** %next41, align 8, !tbaa !26
  store %struct.nesting* %20, %struct.nesting** %x_case_stack36, align 8, !tbaa !36
  %.pre80 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt45.phi.trans.insert = getelementptr inbounds %struct.function* %.pre80, i64 0, i32 1
  %.pre81 = load %struct.stmt_status** %stmt45.phi.trans.insert, align 8, !tbaa !1
  br label %if.end44

if.end44:                                         ; preds = %if.then38, %if.end34
  %21 = phi %struct.stmt_status* [ %.pre81, %if.then38 ], [ %18, %if.end34 ]
  %x_nesting_stack46 = getelementptr inbounds %struct.stmt_status* %21, i64 0, i32 5
  %22 = load %struct.nesting** %x_nesting_stack46, align 8, !tbaa !52
  %depth = getelementptr inbounds %struct.nesting* %22, i64 0, i32 2
  %23 = load i32* %depth, align 4, !tbaa !100
  %sub = add nsw i32 %23, -1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %21, i64 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4, !tbaa !53
  %all = getelementptr inbounds %struct.nesting* %6, i64 0, i32 0
  %24 = load %struct.nesting** %all, align 8, !tbaa !77
  store %struct.nesting* %24, %struct.nesting** %x_nesting_stack46, align 8, !tbaa !52
  %25 = bitcast %struct.nesting* %6 to i8*
  %26 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %27 = bitcast %struct._obstack_chunk* %26 to %struct.nesting*
  %cmp50 = icmp ugt %struct.nesting* %6, %27
  %28 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8
  %cmp51 = icmp ult i8* %25, %28
  %or.cond = and i1 %cmp50, %cmp51
  br i1 %or.cond, label %if.then52, label %if.else

if.then52:                                        ; preds = %if.end44
  store i8* %25, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  store i8* %25, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %do.cond

if.else:                                          ; preds = %if.end44
  tail call void @obstack_free(%struct.obstack* @stmt_obstack, i8* %25) #6
  br label %do.cond

do.cond:                                          ; preds = %if.then52, %if.else
  %cmp54 = icmp eq %struct.nesting* %6, %4
  br i1 %cmp54, label %do.end56, label %do.cond.do.body1_crit_edge

do.cond.do.body1_crit_edge:                       ; preds = %do.cond
  %.pre = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt2.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 1
  %.pre71 = load %struct.stmt_status** %stmt2.phi.trans.insert, align 8, !tbaa !1
  br label %do.body1

do.end56:                                         ; preds = %do.cond
  ret void
}

; Function Attrs: nounwind readonly uwtable
define %union.tree_node* @case_index_expr_type() #3 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 4
  %2 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %tobool = icmp eq %struct.nesting* %2, null
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %entry
  %index_expr = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 3
  %3 = load %struct.nesting** %index_expr, align 8
  %type = getelementptr inbounds %struct.nesting* %3, i64 0, i32 1
  %4 = load %struct.nesting** %type, align 8
  %5 = bitcast %struct.nesting* %4 to %union.tree_node*
  br label %return

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %5, %if.then ], [ null, %entry ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @pushcase(%union.tree_node* %value, %union.tree_node* (%union.tree_node*, %union.tree_node*)* nocapture %converter, %union.tree_node* %label, %union.tree_node** nocapture %duplicate) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 4
  %2 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %tobool = icmp eq %struct.nesting* %2, null
  br i1 %tobool, label %return, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %data = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4
  %start = bitcast %union.anon.3* %data to %struct.rtx_def**
  %3 = load %struct.rtx_def** %start, align 8, !tbaa !37
  %tobool3 = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool3, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 1
  %4 = load %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %tobool5 = icmp eq %struct.nesting* %4, null
  br i1 %tobool5, label %if.end13, label %land.lhs.true6

land.lhs.true6:                                   ; preds = %if.end
  %depth = getelementptr inbounds %struct.nesting* %4, i64 0, i32 2
  %5 = load i32* %depth, align 4, !tbaa !100
  %depth11 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 2
  %6 = load i32* %depth11, align 4, !tbaa !100
  %cmp = icmp sgt i32 %5, %6
  br i1 %cmp, label %return, label %if.end13

if.end13:                                         ; preds = %if.end, %land.lhs.true6
  %index_expr = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 3
  %7 = load %struct.nesting** %index_expr, align 8
  %type = getelementptr inbounds %struct.nesting* %7, i64 0, i32 1
  %8 = load %struct.nesting** %type, align 8
  %9 = bitcast %struct.nesting* %8 to %union.tree_node*
  %10 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %11 = load %union.tree_node** %10, align 8, !tbaa !39
  %12 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !17
  %cmp23 = icmp eq %union.tree_node* %9, %12
  br i1 %cmp23, label %return, label %if.end25

if.end25:                                         ; preds = %if.end13
  %cmp26 = icmp eq %union.tree_node* %value, null
  br i1 %cmp26, label %if.end28.thread, label %if.end28

if.end28.thread:                                  ; preds = %if.end25
  tail call fastcc void @check_seenlabel()
  br label %if.end36

if.end28:                                         ; preds = %if.end25
  %call = tail call %union.tree_node* %converter(%union.tree_node* %11, %union.tree_node* %value) #6
  tail call fastcc void @check_seenlabel()
  %cmp29 = icmp eq %union.tree_node* %call, null
  br i1 %cmp29, label %if.end36, label %land.lhs.true30

land.lhs.true30:                                  ; preds = %if.end28
  %static_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %static_flag, align 8
  %bf.clear = and i32 %bf.load, 262144
  %tobool32 = icmp eq i32 %bf.clear, 0
  br i1 %tobool32, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true30
  %call33 = tail call i32 @int_fits_type_p(%union.tree_node* %call, %union.tree_node* %9) #6
  %tobool34 = icmp eq i32 %call33, 0
  br i1 %tobool34, label %return, label %if.end36

if.end36:                                         ; preds = %if.end28.thread, %lor.lhs.false, %if.end28
  %value.addr.046 = phi %union.tree_node* [ null, %if.end28.thread ], [ %call, %lor.lhs.false ], [ null, %if.end28 ]
  %call37 = tail call i32 @add_case_node(%union.tree_node* %value.addr.046, %union.tree_node* %value.addr.046, %union.tree_node* %label, %union.tree_node** %duplicate)
  br label %return

return:                                           ; preds = %land.lhs.true30, %lor.lhs.false, %if.end13, %land.lhs.true6, %entry, %land.lhs.true, %if.end36
  %retval.0 = phi i32 [ %call37, %if.end36 ], [ 1, %land.lhs.true ], [ 1, %entry ], [ 5, %land.lhs.true6 ], [ 0, %if.end13 ], [ 3, %lor.lhs.false ], [ 3, %land.lhs.true30 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @check_seenlabel() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 4
  %2 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %line_number_status = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 6
  %3 = bitcast %struct.label_chain** %line_number_status to i32*
  %4 = load i32* %3, align 4, !tbaa !134
  %cmp = icmp sgt i32 %4, -1
  br i1 %cmp, label %if.then, label %if.end53

if.then:                                          ; preds = %entry
  tail call void @restore_line_number_status(i32 %4) #6
  %5 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt6 = getelementptr inbounds %struct.function* %5, i64 0, i32 1
  %6 = load %struct.stmt_status** %stmt6, align 8, !tbaa !1
  %x_case_stack7 = getelementptr inbounds %struct.stmt_status* %6, i64 0, i32 4
  %7 = load %struct.nesting** %x_case_stack7, align 8, !tbaa !36
  %line_number_status10 = getelementptr inbounds %struct.nesting* %7, i64 0, i32 4, i32 0, i32 6
  %8 = bitcast %struct.label_chain** %line_number_status10 to i32*
  store i32 -1, i32* %8, align 4, !tbaa !134
  %data13 = getelementptr inbounds %struct.nesting* %7, i64 0, i32 4
  %start = bitcast %union.anon.3* %data13 to %struct.rtx_def**
  %insn.074 = load %struct.rtx_def** %start, align 8
  %tobool75 = icmp eq %struct.rtx_def* %insn.074, null
  br i1 %tobool75, label %if.end53, label %for.body

for.body:                                         ; preds = %if.then, %for.inc
  %insn.076 = phi %struct.rtx_def* [ %insn.0, %for.inc ], [ %insn.074, %if.then ]
  %9 = getelementptr inbounds %struct.rtx_def* %insn.076, i64 0, i32 0
  %bf.load = load i32* %9, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %do.body.preheader [
    i32 36, label %if.end53
    i32 37, label %for.inc
    i32 32, label %lor.lhs.false
  ]

lor.lhs.false:                                    ; preds = %for.body
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.076, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx, align 8, !tbaa !17
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load23 = load i32* %11, align 8
  %bf.clear24 = and i32 %bf.load23, 65535
  %cmp25 = icmp eq i32 %bf.clear24, 48
  br i1 %cmp25, label %for.inc, label %do.body.preheader

do.body.preheader:                                ; preds = %lor.lhs.false, %for.body
  %arrayidx2870 = getelementptr inbounds %struct.rtx_def* %insn.076, i64 0, i32 1, i64 1
  %rtx2971 = bitcast %union.rtunion_def* %arrayidx2870 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx2971, align 8, !tbaa !17
  %tobool3072 = icmp eq %struct.rtx_def* %12, null
  br i1 %tobool3072, label %if.end53, label %land.rhs

land.rhs:                                         ; preds = %do.body.preheader, %do.body.backedge
  %13 = phi %struct.rtx_def* [ %16, %do.body.backedge ], [ %12, %do.body.preheader ]
  %14 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 0
  %bf.load31 = load i32* %14, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  %cmp33 = icmp eq i32 %bf.clear32, 37
  br i1 %cmp33, label %lor.rhs, label %do.body.backedge

lor.rhs:                                          ; preds = %land.rhs
  %arrayidx35 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx35 to i32*
  %15 = load i32* %rtint, align 4, !tbaa !58
  %cmp36 = icmp slt i32 %15, 0
  br i1 %cmp36, label %do.body.backedge, label %if.then38

do.body.backedge:                                 ; preds = %lor.rhs, %land.rhs
  %arrayidx28 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 1
  %rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**
  %16 = load %struct.rtx_def** %rtx29, align 8, !tbaa !17
  %tobool30 = icmp eq %struct.rtx_def* %16, null
  br i1 %tobool30, label %if.end53, label %land.rhs

if.then38:                                        ; preds = %lor.rhs
  %arrayidx40 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 3
  %rtstr = bitcast %union.rtunion_def* %arrayidx40 to i8**
  %17 = load i8** %rtstr, align 8, !tbaa !17
  %printname = getelementptr inbounds %struct.nesting* %7, i64 0, i32 4, i32 0, i32 5
  %18 = load %union.tree_node** %printname, align 8
  tail call void (i8*, i32, i8*, ...)* @warning_with_file_and_line(i8* %17, i32 %15, i8* getelementptr inbounds ([36 x i8]* @.str21, i64 0, i64 0), %union.tree_node* %18) #6
  br label %if.end53

for.inc:                                          ; preds = %for.body, %lor.lhs.false
  %arrayidx51 = getelementptr inbounds %struct.rtx_def* %insn.076, i64 0, i32 1, i64 2
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %insn.0 = load %struct.rtx_def** %rtx52, align 8
  %tobool = icmp eq %struct.rtx_def* %insn.0, null
  br i1 %tobool, label %if.end53, label %for.body

if.end53:                                         ; preds = %for.inc, %for.body, %do.body.backedge, %if.then, %do.body.preheader, %if.then38, %entry
  ret void
}

declare i32 @int_fits_type_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define i32 @add_case_node(%union.tree_node* %low, %union.tree_node* %high, %union.tree_node* %label, %union.tree_node** nocapture %duplicate) #0 {
entry:
  %tobool = icmp eq %union.tree_node* %high, null
  %low.high = select i1 %tobool, %union.tree_node* %low, %union.tree_node* %high
  %tobool1 = icmp ne %union.tree_node* %low.high, null
  %tobool2 = icmp ne %union.tree_node* %low, null
  %or.cond = or i1 %tobool1, %tobool2
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt17 = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt17, align 8, !tbaa !1
  %x_case_stack18 = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 4
  %2 = load %struct.nesting** %x_case_stack18, align 8, !tbaa !36
  br i1 %or.cond, label %if.end16, label %if.then3

if.then3:                                         ; preds = %entry
  %default_label = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 2
  %3 = load %struct.rtx_def** %default_label, align 8
  %cmp = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp, label %if.end10, label %if.then4

if.then4:                                         ; preds = %if.then3
  %4 = bitcast %struct.rtx_def* %3 to %union.tree_node*
  store %union.tree_node* %4, %union.tree_node** %duplicate, align 8, !tbaa !17
  br label %return

if.end10:                                         ; preds = %if.then3
  %label.c = bitcast %union.tree_node* %label to %struct.rtx_def*
  store %struct.rtx_def* %label.c, %struct.rtx_def** %default_label, align 8, !tbaa !132
  tail call void @expand_label(%union.tree_node* %label)
  br label %return

if.end16:                                         ; preds = %entry
  %case_list = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  %5 = bitcast %struct.rtx_def** %case_list to %struct.case_node**
  %6 = load %struct.rtx_def** %case_list, align 8
  %7 = bitcast %struct.rtx_def* %6 to %struct.case_node*
  %tobool21386 = icmp eq %struct.rtx_def* %6, null
  br i1 %tobool21386, label %while.end, label %while.body

while.body:                                       ; preds = %if.end16, %while.cond.backedge
  %8 = phi %struct.case_node* [ %11, %while.cond.backedge ], [ %7, %if.end16 ]
  %low22 = getelementptr inbounds %struct.case_node* %8, i64 0, i32 3
  %9 = load %union.tree_node** %low22, align 8, !tbaa !135
  %call = tail call i32 @tree_int_cst_lt(%union.tree_node* %low.high, %union.tree_node* %9) #6
  %tobool23 = icmp eq i32 %call, 0
  br i1 %tobool23, label %if.else, label %if.then24

if.then24:                                        ; preds = %while.body
  %left = getelementptr inbounds %struct.case_node* %8, i64 0, i32 0
  br label %while.cond.backedge

if.else:                                          ; preds = %while.body
  %high25 = getelementptr inbounds %struct.case_node* %8, i64 0, i32 4
  %10 = load %union.tree_node** %high25, align 8, !tbaa !137
  %call26 = tail call i32 @tree_int_cst_lt(%union.tree_node* %10, %union.tree_node* %low) #6
  %tobool27 = icmp eq i32 %call26, 0
  br i1 %tobool27, label %if.else29, label %if.then28

if.then28:                                        ; preds = %if.else
  %right = getelementptr inbounds %struct.case_node* %8, i64 0, i32 1
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then28, %if.then24
  %q.0.be = phi %struct.case_node** [ %left, %if.then24 ], [ %right, %if.then28 ]
  %11 = load %struct.case_node** %q.0.be, align 8, !tbaa !17
  %tobool21 = icmp eq %struct.case_node* %11, null
  br i1 %tobool21, label %while.end, label %while.body

if.else29:                                        ; preds = %if.else
  %code_label = getelementptr inbounds %struct.case_node* %8, i64 0, i32 5
  %12 = load %union.tree_node** %code_label, align 8, !tbaa !138
  store %union.tree_node* %12, %union.tree_node** %duplicate, align 8, !tbaa !17
  br label %return

while.end:                                        ; preds = %while.cond.backedge, %if.end16
  %p.0.lcssa = phi %struct.case_node* [ %7, %if.end16 ], [ %8, %while.cond.backedge ]
  %q.0.lcssa = phi %struct.case_node** [ %5, %if.end16 ], [ %q.0.be, %while.cond.backedge ]
  %call32 = tail call noalias i8* @xmalloc(i64 56) #6
  %13 = bitcast i8* %call32 to %struct.case_node*
  %low33 = getelementptr inbounds i8* %call32, i64 24
  %14 = bitcast i8* %low33 to %union.tree_node**
  store %union.tree_node* %low, %union.tree_node** %14, align 8, !tbaa !135
  %call34 = tail call i32 @tree_int_cst_equal(%union.tree_node* %low, %union.tree_node* %low.high) #6
  %tobool35 = icmp eq i32 %call34, 0
  br i1 %tobool35, label %if.else39, label %if.then36

if.then36:                                        ; preds = %while.end
  %15 = load %union.tree_node** %14, align 8, !tbaa !135
  %high38 = getelementptr inbounds i8* %call32, i64 32
  %16 = bitcast i8* %high38 to %union.tree_node**
  store %union.tree_node* %15, %union.tree_node** %16, align 8, !tbaa !137
  br label %if.end41

if.else39:                                        ; preds = %while.end
  %high40 = getelementptr inbounds i8* %call32, i64 32
  %17 = bitcast i8* %high40 to %union.tree_node**
  store %union.tree_node* %low.high, %union.tree_node** %17, align 8, !tbaa !137
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.then36
  %code_label42 = getelementptr inbounds i8* %call32, i64 40
  %18 = bitcast i8* %code_label42 to %union.tree_node**
  store %union.tree_node* %label, %union.tree_node** %18, align 8, !tbaa !138
  tail call void @expand_label(%union.tree_node* %label)
  store %struct.case_node* %13, %struct.case_node** %q.0.lcssa, align 8, !tbaa !17
  %parent = getelementptr inbounds i8* %call32, i64 16
  %19 = bitcast i8* %parent to %struct.case_node**
  store %struct.case_node* %p.0.lcssa, %struct.case_node** %19, align 8, !tbaa !139
  %balance = getelementptr inbounds i8* %call32, i64 48
  %20 = bitcast i8* %balance to i32*
  store i32 0, i32* %20, align 4, !tbaa !140
  %tobool46383 = icmp eq %struct.case_node* %p.0.lcssa, null
  call void @llvm.memset.p0i8.i64(i8* %call32, i8 0, i64 16, i32 8, i1 false)
  br i1 %tobool46383, label %return, label %while.body47

while.body47:                                     ; preds = %if.end41, %if.end230
  %p.1385 = phi %struct.case_node* [ %53, %if.end230 ], [ %p.0.lcssa, %if.end41 ]
  %r.0384 = phi %struct.case_node* [ %p.1385, %if.end230 ], [ %13, %if.end41 ]
  %left48 = getelementptr inbounds %struct.case_node* %p.1385, i64 0, i32 0
  %21 = load %struct.case_node** %left48, align 8, !tbaa !141
  %cmp49 = icmp eq %struct.case_node* %r.0384, %21
  %balance51 = getelementptr inbounds %struct.case_node* %p.1385, i64 0, i32 6
  %22 = load i32* %balance51, align 4, !tbaa !140
  %tobool52 = icmp eq i32 %22, 0
  br i1 %cmp49, label %if.then50, label %if.else136

if.then50:                                        ; preds = %while.body47
  br i1 %tobool52, label %if.end230, label %if.else55

if.else55:                                        ; preds = %if.then50
  %cmp56 = icmp slt i32 %22, 0
  br i1 %cmp56, label %if.then57, label %if.else133

if.then57:                                        ; preds = %if.else55
  %balance58 = getelementptr inbounds %struct.case_node* %r.0384, i64 0, i32 6
  %23 = load i32* %balance58, align 4, !tbaa !140
  %cmp59 = icmp slt i32 %23, 0
  %right61 = getelementptr inbounds %struct.case_node* %r.0384, i64 0, i32 1
  %24 = load %struct.case_node** %right61, align 8, !tbaa !142
  br i1 %cmp59, label %if.then60, label %if.else89

if.then60:                                        ; preds = %if.then57
  store %struct.case_node* %24, %struct.case_node** %left48, align 8, !tbaa !141
  %tobool63 = icmp eq %struct.case_node* %24, null
  br i1 %tobool63, label %if.end66, label %if.then64

if.then64:                                        ; preds = %if.then60
  %parent65 = getelementptr inbounds %struct.case_node* %24, i64 0, i32 2
  store %struct.case_node* %p.1385, %struct.case_node** %parent65, align 8, !tbaa !139
  br label %if.end66

if.end66:                                         ; preds = %if.then60, %if.then64
  store %struct.case_node* %p.1385, %struct.case_node** %right61, align 8, !tbaa !142
  store i32 0, i32* %balance51, align 4, !tbaa !140
  store i32 0, i32* %balance58, align 4, !tbaa !140
  %parent70 = getelementptr inbounds %struct.case_node* %p.1385, i64 0, i32 2
  %25 = load %struct.case_node** %parent70, align 8, !tbaa !139
  store %struct.case_node* %r.0384, %struct.case_node** %parent70, align 8, !tbaa !139
  %parent72 = getelementptr inbounds %struct.case_node* %r.0384, i64 0, i32 2
  store %struct.case_node* %25, %struct.case_node** %parent72, align 8, !tbaa !139
  %tobool73 = icmp eq %struct.case_node* %25, null
  br i1 %tobool73, label %if.else82, label %if.then74

if.then74:                                        ; preds = %if.end66
  %left75 = getelementptr inbounds %struct.case_node* %25, i64 0, i32 0
  %26 = load %struct.case_node** %left75, align 8, !tbaa !141
  %cmp76 = icmp eq %struct.case_node* %26, %p.1385
  br i1 %cmp76, label %if.then77, label %if.else79

if.then77:                                        ; preds = %if.then74
  store %struct.case_node* %r.0384, %struct.case_node** %left75, align 8, !tbaa !141
  br label %return

if.else79:                                        ; preds = %if.then74
  %right80 = getelementptr inbounds %struct.case_node* %25, i64 0, i32 1
  store %struct.case_node* %r.0384, %struct.case_node** %right80, align 8, !tbaa !142
  br label %return

if.else82:                                        ; preds = %if.end66
  %27 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt83 = getelementptr inbounds %struct.function* %27, i64 0, i32 1
  %28 = load %struct.stmt_status** %stmt83, align 8, !tbaa !1
  %x_case_stack84 = getelementptr inbounds %struct.stmt_status* %28, i64 0, i32 4
  %29 = load %struct.nesting** %x_case_stack84, align 8, !tbaa !36
  %case_list87 = getelementptr inbounds %struct.nesting* %29, i64 0, i32 4, i32 0, i32 1
  %r.0.c371 = bitcast %struct.case_node* %r.0384 to %struct.rtx_def*
  store %struct.rtx_def* %r.0.c371, %struct.rtx_def** %case_list87, align 8, !tbaa !130
  br label %return

if.else89:                                        ; preds = %if.then57
  %right91 = getelementptr inbounds %struct.case_node* %24, i64 0, i32 1
  %30 = load %struct.case_node** %right91, align 8, !tbaa !142
  store %struct.case_node* %30, %struct.case_node** %left48, align 8, !tbaa !141
  %tobool93 = icmp eq %struct.case_node* %30, null
  br i1 %tobool93, label %if.end96, label %if.then94

if.then94:                                        ; preds = %if.else89
  %parent95 = getelementptr inbounds %struct.case_node* %30, i64 0, i32 2
  store %struct.case_node* %p.1385, %struct.case_node** %parent95, align 8, !tbaa !139
  br label %if.end96

if.end96:                                         ; preds = %if.else89, %if.then94
  store %struct.case_node* %p.1385, %struct.case_node** %right91, align 8, !tbaa !142
  %left98 = getelementptr inbounds %struct.case_node* %24, i64 0, i32 0
  %31 = load %struct.case_node** %left98, align 8, !tbaa !141
  store %struct.case_node* %31, %struct.case_node** %right61, align 8, !tbaa !142
  %tobool100 = icmp eq %struct.case_node* %31, null
  br i1 %tobool100, label %if.end103, label %if.then101

if.then101:                                       ; preds = %if.end96
  %parent102 = getelementptr inbounds %struct.case_node* %31, i64 0, i32 2
  store %struct.case_node* %r.0384, %struct.case_node** %parent102, align 8, !tbaa !139
  br label %if.end103

if.end103:                                        ; preds = %if.end96, %if.then101
  store %struct.case_node* %r.0384, %struct.case_node** %left98, align 8, !tbaa !141
  %balance105 = getelementptr inbounds %struct.case_node* %24, i64 0, i32 6
  %32 = load i32* %balance105, align 4, !tbaa !140
  %.lobit369 = lshr i32 %32, 31
  store i32 %.lobit369, i32* %balance51, align 4, !tbaa !140
  %sub = ashr i32 %32, 31
  %sub108 = sub nsw i32 %sub, %32
  store i32 %sub108, i32* %balance58, align 4, !tbaa !140
  store i32 0, i32* %balance105, align 4, !tbaa !140
  %parent111 = getelementptr inbounds %struct.case_node* %p.1385, i64 0, i32 2
  %33 = load %struct.case_node** %parent111, align 8, !tbaa !139
  store %struct.case_node* %24, %struct.case_node** %parent111, align 8, !tbaa !139
  %parent113 = getelementptr inbounds %struct.case_node* %r.0384, i64 0, i32 2
  store %struct.case_node* %24, %struct.case_node** %parent113, align 8, !tbaa !139
  %parent114 = getelementptr inbounds %struct.case_node* %24, i64 0, i32 2
  store %struct.case_node* %33, %struct.case_node** %parent114, align 8, !tbaa !139
  %tobool115 = icmp eq %struct.case_node* %33, null
  br i1 %tobool115, label %if.else125, label %if.then116

if.then116:                                       ; preds = %if.end103
  %left117 = getelementptr inbounds %struct.case_node* %33, i64 0, i32 0
  %34 = load %struct.case_node** %left117, align 8, !tbaa !141
  %cmp118 = icmp eq %struct.case_node* %34, %p.1385
  br i1 %cmp118, label %if.then120, label %if.else122

if.then120:                                       ; preds = %if.then116
  store %struct.case_node* %24, %struct.case_node** %left117, align 8, !tbaa !141
  br label %return

if.else122:                                       ; preds = %if.then116
  %right123 = getelementptr inbounds %struct.case_node* %33, i64 0, i32 1
  store %struct.case_node* %24, %struct.case_node** %right123, align 8, !tbaa !142
  br label %return

if.else125:                                       ; preds = %if.end103
  %35 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt126 = getelementptr inbounds %struct.function* %35, i64 0, i32 1
  %36 = load %struct.stmt_status** %stmt126, align 8, !tbaa !1
  %x_case_stack127 = getelementptr inbounds %struct.stmt_status* %36, i64 0, i32 4
  %37 = load %struct.nesting** %x_case_stack127, align 8, !tbaa !36
  %case_list130 = getelementptr inbounds %struct.nesting* %37, i64 0, i32 4, i32 0, i32 1
  %.c370 = bitcast %struct.case_node* %24 to %struct.rtx_def*
  store %struct.rtx_def* %.c370, %struct.rtx_def** %case_list130, align 8, !tbaa !130
  br label %return

if.else133:                                       ; preds = %if.else55
  store i32 0, i32* %balance51, align 4, !tbaa !140
  br label %return

if.else136:                                       ; preds = %while.body47
  br i1 %tobool52, label %if.end230, label %if.else142

if.else142:                                       ; preds = %if.else136
  %cmp143 = icmp sgt i32 %22, 0
  br i1 %cmp143, label %if.then145, label %if.else227

if.then145:                                       ; preds = %if.else142
  %balance146 = getelementptr inbounds %struct.case_node* %r.0384, i64 0, i32 6
  %38 = load i32* %balance146, align 4, !tbaa !140
  %cmp147 = icmp sgt i32 %38, 0
  %left150 = getelementptr inbounds %struct.case_node* %r.0384, i64 0, i32 0
  %39 = load %struct.case_node** %left150, align 8, !tbaa !141
  br i1 %cmp147, label %if.then149, label %if.else179

if.then149:                                       ; preds = %if.then145
  %right151 = getelementptr inbounds %struct.case_node* %p.1385, i64 0, i32 1
  store %struct.case_node* %39, %struct.case_node** %right151, align 8, !tbaa !142
  %tobool152 = icmp eq %struct.case_node* %39, null
  br i1 %tobool152, label %if.end155, label %if.then153

if.then153:                                       ; preds = %if.then149
  %parent154 = getelementptr inbounds %struct.case_node* %39, i64 0, i32 2
  store %struct.case_node* %p.1385, %struct.case_node** %parent154, align 8, !tbaa !139
  br label %if.end155

if.end155:                                        ; preds = %if.then149, %if.then153
  store %struct.case_node* %p.1385, %struct.case_node** %left150, align 8, !tbaa !141
  store i32 0, i32* %balance51, align 4, !tbaa !140
  store i32 0, i32* %balance146, align 4, !tbaa !140
  %parent159 = getelementptr inbounds %struct.case_node* %p.1385, i64 0, i32 2
  %40 = load %struct.case_node** %parent159, align 8, !tbaa !139
  store %struct.case_node* %r.0384, %struct.case_node** %parent159, align 8, !tbaa !139
  %parent161 = getelementptr inbounds %struct.case_node* %r.0384, i64 0, i32 2
  store %struct.case_node* %40, %struct.case_node** %parent161, align 8, !tbaa !139
  %tobool162 = icmp eq %struct.case_node* %40, null
  br i1 %tobool162, label %if.else172, label %if.then163

if.then163:                                       ; preds = %if.end155
  %left164 = getelementptr inbounds %struct.case_node* %40, i64 0, i32 0
  %41 = load %struct.case_node** %left164, align 8, !tbaa !141
  %cmp165 = icmp eq %struct.case_node* %41, %p.1385
  br i1 %cmp165, label %if.then167, label %if.else169

if.then167:                                       ; preds = %if.then163
  store %struct.case_node* %r.0384, %struct.case_node** %left164, align 8, !tbaa !141
  br label %return

if.else169:                                       ; preds = %if.then163
  %right170 = getelementptr inbounds %struct.case_node* %40, i64 0, i32 1
  store %struct.case_node* %r.0384, %struct.case_node** %right170, align 8, !tbaa !142
  br label %return

if.else172:                                       ; preds = %if.end155
  %42 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt173 = getelementptr inbounds %struct.function* %42, i64 0, i32 1
  %43 = load %struct.stmt_status** %stmt173, align 8, !tbaa !1
  %x_case_stack174 = getelementptr inbounds %struct.stmt_status* %43, i64 0, i32 4
  %44 = load %struct.nesting** %x_case_stack174, align 8, !tbaa !36
  %case_list177 = getelementptr inbounds %struct.nesting* %44, i64 0, i32 4, i32 0, i32 1
  %r.0.c = bitcast %struct.case_node* %r.0384 to %struct.rtx_def*
  store %struct.rtx_def* %r.0.c, %struct.rtx_def** %case_list177, align 8, !tbaa !130
  br label %return

if.else179:                                       ; preds = %if.then145
  %left183 = getelementptr inbounds %struct.case_node* %39, i64 0, i32 0
  %45 = load %struct.case_node** %left183, align 8, !tbaa !141
  %right184 = getelementptr inbounds %struct.case_node* %p.1385, i64 0, i32 1
  store %struct.case_node* %45, %struct.case_node** %right184, align 8, !tbaa !142
  %tobool185 = icmp eq %struct.case_node* %45, null
  br i1 %tobool185, label %if.end188, label %if.then186

if.then186:                                       ; preds = %if.else179
  %parent187 = getelementptr inbounds %struct.case_node* %45, i64 0, i32 2
  store %struct.case_node* %p.1385, %struct.case_node** %parent187, align 8, !tbaa !139
  br label %if.end188

if.end188:                                        ; preds = %if.else179, %if.then186
  store %struct.case_node* %p.1385, %struct.case_node** %left183, align 8, !tbaa !141
  %right190 = getelementptr inbounds %struct.case_node* %39, i64 0, i32 1
  %46 = load %struct.case_node** %right190, align 8, !tbaa !142
  store %struct.case_node* %46, %struct.case_node** %left150, align 8, !tbaa !141
  %tobool192 = icmp eq %struct.case_node* %46, null
  br i1 %tobool192, label %if.end195, label %if.then193

if.then193:                                       ; preds = %if.end188
  %parent194 = getelementptr inbounds %struct.case_node* %46, i64 0, i32 2
  store %struct.case_node* %r.0384, %struct.case_node** %parent194, align 8, !tbaa !139
  br label %if.end195

if.end195:                                        ; preds = %if.end188, %if.then193
  store %struct.case_node* %r.0384, %struct.case_node** %right190, align 8, !tbaa !142
  %balance197 = getelementptr inbounds %struct.case_node* %39, i64 0, i32 6
  %47 = load i32* %balance197, align 4, !tbaa !140
  %.lobit = lshr i32 %47, 31
  store i32 %.lobit, i32* %balance146, align 4, !tbaa !140
  %sub201 = ashr i32 %47, 31
  %sub202 = sub nsw i32 %sub201, %47
  store i32 %sub202, i32* %balance51, align 4, !tbaa !140
  store i32 0, i32* %balance197, align 4, !tbaa !140
  %parent205 = getelementptr inbounds %struct.case_node* %p.1385, i64 0, i32 2
  %48 = load %struct.case_node** %parent205, align 8, !tbaa !139
  store %struct.case_node* %39, %struct.case_node** %parent205, align 8, !tbaa !139
  %parent207 = getelementptr inbounds %struct.case_node* %r.0384, i64 0, i32 2
  store %struct.case_node* %39, %struct.case_node** %parent207, align 8, !tbaa !139
  %parent208 = getelementptr inbounds %struct.case_node* %39, i64 0, i32 2
  store %struct.case_node* %48, %struct.case_node** %parent208, align 8, !tbaa !139
  %tobool209 = icmp eq %struct.case_node* %48, null
  br i1 %tobool209, label %if.else219, label %if.then210

if.then210:                                       ; preds = %if.end195
  %left211 = getelementptr inbounds %struct.case_node* %48, i64 0, i32 0
  %49 = load %struct.case_node** %left211, align 8, !tbaa !141
  %cmp212 = icmp eq %struct.case_node* %49, %p.1385
  br i1 %cmp212, label %if.then214, label %if.else216

if.then214:                                       ; preds = %if.then210
  store %struct.case_node* %39, %struct.case_node** %left211, align 8, !tbaa !141
  br label %return

if.else216:                                       ; preds = %if.then210
  %right217 = getelementptr inbounds %struct.case_node* %48, i64 0, i32 1
  store %struct.case_node* %39, %struct.case_node** %right217, align 8, !tbaa !142
  br label %return

if.else219:                                       ; preds = %if.end195
  %50 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt220 = getelementptr inbounds %struct.function* %50, i64 0, i32 1
  %51 = load %struct.stmt_status** %stmt220, align 8, !tbaa !1
  %x_case_stack221 = getelementptr inbounds %struct.stmt_status* %51, i64 0, i32 4
  %52 = load %struct.nesting** %x_case_stack221, align 8, !tbaa !36
  %case_list224 = getelementptr inbounds %struct.nesting* %52, i64 0, i32 4, i32 0, i32 1
  %.c = bitcast %struct.case_node* %39 to %struct.rtx_def*
  store %struct.rtx_def* %.c, %struct.rtx_def** %case_list224, align 8, !tbaa !130
  br label %return

if.else227:                                       ; preds = %if.else142
  store i32 0, i32* %balance51, align 4, !tbaa !140
  br label %return

if.end230:                                        ; preds = %if.else136, %if.then50
  %storemerge = phi i32 [ -1, %if.then50 ], [ 1, %if.else136 ]
  store i32 %storemerge, i32* %balance51, align 4, !tbaa !140
  %parent231 = getelementptr inbounds %struct.case_node* %p.1385, i64 0, i32 2
  %53 = load %struct.case_node** %parent231, align 8, !tbaa !139
  %tobool46 = icmp eq %struct.case_node* %53, null
  br i1 %tobool46, label %return, label %while.body47

return:                                           ; preds = %if.end230, %if.end41, %if.else133, %if.else227, %if.else125, %if.else122, %if.then120, %if.else82, %if.else79, %if.then77, %if.else219, %if.else216, %if.then214, %if.else172, %if.else169, %if.then167, %if.else29, %if.end10, %if.then4
  %retval.0 = phi i32 [ 2, %if.else29 ], [ 2, %if.then4 ], [ 0, %if.end10 ], [ 0, %if.then167 ], [ 0, %if.else169 ], [ 0, %if.else172 ], [ 0, %if.then214 ], [ 0, %if.else216 ], [ 0, %if.else219 ], [ 0, %if.then77 ], [ 0, %if.else79 ], [ 0, %if.else82 ], [ 0, %if.then120 ], [ 0, %if.else122 ], [ 0, %if.else125 ], [ 0, %if.else227 ], [ 0, %if.else133 ], [ 0, %if.end41 ], [ 0, %if.end230 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @pushcase_range(%union.tree_node* %value1, %union.tree_node* %value2, %union.tree_node* (%union.tree_node*, %union.tree_node*)* nocapture %converter, %union.tree_node* %label, %union.tree_node** nocapture %duplicate) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 4
  %2 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %tobool = icmp eq %struct.nesting* %2, null
  br i1 %tobool, label %return, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %data = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4
  %start = bitcast %union.anon.3* %data to %struct.rtx_def**
  %3 = load %struct.rtx_def** %start, align 8, !tbaa !37
  %tobool3 = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool3, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 1
  %4 = load %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %tobool5 = icmp eq %struct.nesting* %4, null
  br i1 %tobool5, label %if.end13, label %land.lhs.true6

land.lhs.true6:                                   ; preds = %if.end
  %depth = getelementptr inbounds %struct.nesting* %4, i64 0, i32 2
  %5 = load i32* %depth, align 4, !tbaa !100
  %depth11 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 2
  %6 = load i32* %depth11, align 4, !tbaa !100
  %cmp = icmp sgt i32 %5, %6
  br i1 %cmp, label %return, label %if.end13

if.end13:                                         ; preds = %if.end, %land.lhs.true6
  %index_expr = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 3
  %7 = load %struct.nesting** %index_expr, align 8
  %type = getelementptr inbounds %struct.nesting* %7, i64 0, i32 1
  %8 = load %struct.nesting** %type, align 8
  %9 = bitcast %struct.nesting* %8 to %union.tree_node*
  %10 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %11 = load %union.tree_node** %10, align 8, !tbaa !39
  %12 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !17
  %cmp23 = icmp eq %union.tree_node* %9, %12
  br i1 %cmp23, label %return, label %if.end25

if.end25:                                         ; preds = %if.end13
  tail call fastcc void @check_seenlabel()
  %cmp26 = icmp eq %union.tree_node* %value1, null
  br i1 %cmp26, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end25
  %minval = getelementptr inbounds %struct.nesting* %8, i64 0, i32 4, i32 0, i32 11
  %13 = load %struct.rtx_def** %minval, align 8
  %14 = bitcast %struct.rtx_def* %13 to %union.tree_node*
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end25
  %value1.addr.0 = phi %union.tree_node* [ %14, %if.then27 ], [ %value1, %if.end25 ]
  %cmp30 = icmp eq %union.tree_node* %value2, null
  br i1 %cmp30, label %if.end33, label %land.lhs.true35

if.end33:                                         ; preds = %if.end29
  %maxval = getelementptr inbounds %struct.nesting* %8, i64 0, i32 4, i32 0, i32 12
  %15 = load %union.tree_node*** %maxval, align 8
  %16 = bitcast %union.tree_node** %15 to %union.tree_node*
  %cond = icmp eq %union.tree_node** %15, null
  br i1 %cond, label %if.then40, label %land.lhs.true35

land.lhs.true35:                                  ; preds = %if.end29, %if.end33
  %value2.addr.084 = phi %union.tree_node* [ %16, %if.end33 ], [ %value2, %if.end29 ]
  %call = tail call i32 @tree_int_cst_lt(%union.tree_node* %value2.addr.084, %union.tree_node* %value1.addr.0) #6
  %tobool36 = icmp eq i32 %call, 0
  br i1 %tobool36, label %if.end43, label %return

if.then40:                                        ; preds = %if.end33
  %17 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 13
  %18 = load %union.tree_node** %17, align 8, !tbaa !127
  br label %if.end43

if.end43:                                         ; preds = %land.lhs.true35, %if.then40
  %value2.addr.1 = phi %union.tree_node* [ %18, %if.then40 ], [ %value2.addr.084, %land.lhs.true35 ]
  %call44 = tail call %union.tree_node* %converter(%union.tree_node* %11, %union.tree_node* %value1.addr.0) #6
  %call45 = tail call %union.tree_node* %converter(%union.tree_node* %11, %union.tree_node* %value2.addr.1) #6
  %static_flag = getelementptr inbounds %union.tree_node* %call44, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %static_flag, align 8
  %bf.clear = and i32 %bf.load, 262144
  %tobool47 = icmp eq i32 %bf.clear, 0
  br i1 %tobool47, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %if.end43
  %call48 = tail call i32 @int_fits_type_p(%union.tree_node* %call44, %union.tree_node* %9) #6
  %tobool49 = icmp eq i32 %call48, 0
  br i1 %tobool49, label %return, label %if.end51

if.end51:                                         ; preds = %lor.lhs.false
  %static_flag53 = getelementptr inbounds %union.tree_node* %call45, i64 0, i32 0, i32 0, i32 2
  %bf.load54 = load i32* %static_flag53, align 8
  %bf.clear56 = and i32 %bf.load54, 262144
  %tobool57 = icmp eq i32 %bf.clear56, 0
  br i1 %tobool57, label %lor.lhs.false58, label %return

lor.lhs.false58:                                  ; preds = %if.end51
  %call59 = tail call i32 @int_fits_type_p(%union.tree_node* %call45, %union.tree_node* %9) #6
  %tobool60 = icmp eq i32 %call59, 0
  br i1 %tobool60, label %return, label %if.end62

if.end62:                                         ; preds = %lor.lhs.false58
  %call63 = tail call i32 @add_case_node(%union.tree_node* %call44, %union.tree_node* %call45, %union.tree_node* %label, %union.tree_node** %duplicate)
  br label %return

return:                                           ; preds = %if.end51, %lor.lhs.false58, %if.end43, %lor.lhs.false, %land.lhs.true35, %if.end13, %land.lhs.true6, %entry, %land.lhs.true, %if.end62
  %retval.0 = phi i32 [ %call63, %if.end62 ], [ 1, %land.lhs.true ], [ 1, %entry ], [ 5, %land.lhs.true6 ], [ 0, %if.end13 ], [ 4, %land.lhs.true35 ], [ 3, %lor.lhs.false ], [ 3, %if.end43 ], [ 3, %lor.lhs.false58 ], [ 3, %if.end51 ]
  ret i32 %retval.0
}

declare i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #2

declare i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind uwtable
define i64 @all_cases_count(%union.tree_node* %type, i32* nocapture %sparseness) #0 {
entry:
  store i32 0, i32* %sparseness, align 4, !tbaa !58
  %code = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.bb2 [
    i32 11, label %return
    i32 12, label %sw.bb1
    i32 10, label %sw.bb18
  ]

sw.bb1:                                           ; preds = %entry
  br label %return

sw.bb2:                                           ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 13
  %1 = load %union.tree_node** %0, align 8, !tbaa !127
  %cmp = icmp eq %union.tree_node* %1, null
  br i1 %cmp, label %return, label %land.lhs.true

land.lhs.true:                                    ; preds = %sw.bb2
  %2 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 12
  %3 = load %union.tree_node** %2, align 8, !tbaa !143
  %call = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %type, %union.tree_node* %1, %union.tree_node* %3) #6
  %call8 = tail call %union.tree_node* @fold(%union.tree_node* %call) #6
  %cmp9 = icmp eq %union.tree_node* %call8, null
  br i1 %cmp9, label %return, label %land.lhs.true10

land.lhs.true10:                                  ; preds = %land.lhs.true
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !17
  %call11 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %4) #6
  %call12 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 59, %union.tree_node* %type, %union.tree_node* %call8, %union.tree_node* %call11) #6
  %call13 = tail call %union.tree_node* @fold(%union.tree_node* %call12) #6
  %cmp14 = icmp eq %union.tree_node* %call13, null
  br i1 %cmp14, label %return, label %land.lhs.true15

land.lhs.true15:                                  ; preds = %land.lhs.true10
  %call16 = tail call i32 @host_integerp(%union.tree_node* %call13, i32 1) #6
  %tobool = icmp eq i32 %call16, 0
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %land.lhs.true15
  %call17 = tail call i64 @tree_low_cst(%union.tree_node* %call13, i32 1) #6
  br label %return

sw.bb18:                                          ; preds = %entry
  %5 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 12
  %6 = load %union.tree_node** %5, align 8, !tbaa !143
  %call21 = tail call i32 @host_integerp(%union.tree_node* %6, i32 0) #6
  %tobool22 = icmp eq i32 %call21, 0
  br i1 %tobool22, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb18
  %7 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 13
  %8 = load %union.tree_node** %7, align 8, !tbaa !127
  %cmp25 = icmp eq %union.tree_node* %8, null
  br i1 %cmp25, label %return, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %call29 = tail call i32 @host_integerp(%union.tree_node* %8, i32 0) #6
  %tobool30 = icmp eq i32 %call29, 0
  br i1 %tobool30, label %return, label %if.end32

if.end32:                                         ; preds = %lor.lhs.false26
  %9 = load %union.tree_node** %5, align 8, !tbaa !143
  %call35 = tail call i64 @tree_low_cst(%union.tree_node* %9, i32 0) #6
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %10 = load i8** %values, align 8
  %cmp3772 = icmp eq i8* %10, null
  br i1 %cmp3772, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end32
  %11 = bitcast i8* %10 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %if.end47
  %lastval.075 = phi i64 [ %call35, %for.body.lr.ph ], [ %call38, %if.end47 ]
  %t.074 = phi %union.tree_node* [ %11, %for.body.lr.ph ], [ %15, %if.end47 ]
  %count.073 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %if.end47 ]
  %value = getelementptr inbounds %union.tree_node* %t.074, i64 0, i32 0, i32 2
  %12 = bitcast i32* %value to %union.tree_node**
  %13 = load %union.tree_node** %12, align 8, !tbaa !72
  %call38 = tail call i64 @tree_low_cst(%union.tree_node* %13, i32 0) #6
  %14 = load i32* %sparseness, align 4, !tbaa !58
  %cmp39 = icmp ne i32 %14, 2
  %cmp41 = icmp sgt i64 %call38, %lastval.075
  %or.cond = and i1 %cmp39, %cmp41
  br i1 %or.cond, label %if.else43, label %if.then42

if.then42:                                        ; preds = %for.body
  store i32 2, i32* %sparseness, align 4, !tbaa !58
  br label %if.end47

if.else43:                                        ; preds = %for.body
  %add = add nsw i64 %count.073, %call35
  %cmp44 = icmp eq i64 %call38, %add
  br i1 %cmp44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.else43
  store i32 1, i32* %sparseness, align 4, !tbaa !58
  br label %if.end47

if.end47:                                         ; preds = %if.else43, %if.then45, %if.then42
  %inc = add nsw i64 %count.073, 1
  %chain = getelementptr inbounds %union.tree_node* %t.074, i64 0, i32 0, i32 0, i32 0
  %15 = load %union.tree_node** %chain, align 8, !tbaa !79
  %cmp37 = icmp eq %union.tree_node* %15, null
  br i1 %cmp37, label %return, label %for.body

return:                                           ; preds = %if.end47, %if.end32, %sw.bb1, %if.then, %entry, %lor.lhs.false, %sw.bb18, %lor.lhs.false26, %sw.bb2, %land.lhs.true, %land.lhs.true10, %land.lhs.true15
  %retval.0 = phi i64 [ -1, %land.lhs.true15 ], [ -1, %land.lhs.true10 ], [ -1, %land.lhs.true ], [ -1, %sw.bb2 ], [ -1, %lor.lhs.false26 ], [ -1, %sw.bb18 ], [ -1, %lor.lhs.false ], [ %call17, %if.then ], [ 256, %sw.bb1 ], [ 2, %entry ], [ 0, %if.end32 ], [ %inc, %if.end47 ]
  ret i64 %retval.0
}

declare i32 @host_integerp(%union.tree_node*, i32) #2

declare i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: nounwind uwtable
define void @mark_seen_cases(%union.tree_node* %type, i8* nocapture %cases_seen, i64 %count, i32 %sparseness) #0 {
entry:
  %xlo68 = alloca i64, align 8
  %xhi = alloca i64, align 8
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 4
  %2 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %case_list = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  %3 = load %struct.rtx_def** %case_list, align 8
  %4 = bitcast %struct.rtx_def* %3 to %struct.case_node*
  %call = call %union.tree_node* @make_node(i32 25) #6
  %type1 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type1, align 8, !tbaa !76
  %tobool = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool, label %if.end154, label %if.else

if.else:                                          ; preds = %entry
  %cmp = icmp eq i32 %sparseness, 2
  br i1 %cmp, label %if.then2, label %if.else37

if.then2:                                         ; preds = %if.else
  %low = getelementptr inbounds %struct.rtx_def* %3, i64 1, i32 1
  %5 = bitcast [1 x %union.rtunion_def]* %low to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !135
  %type4 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type4, align 8, !tbaa !76
  store %union.tree_node* %7, %union.tree_node** %type1, align 8, !tbaa !76
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %8 = load i8** %values, align 8
  %cmp8203 = icmp eq i8* %8, null
  br i1 %cmp8203, label %if.end154, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then2
  %9 = bitcast i8* %8 to %union.tree_node*
  %int_cst12 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %xlo.0205 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %t.0204 = phi %union.tree_node* [ %9, %for.body.lr.ph ], [ %18, %for.inc ]
  %value = getelementptr inbounds %union.tree_node* %t.0204, i64 0, i32 0, i32 2
  %10 = bitcast i32* %value to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !72
  %int_cst9 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 2
  %12 = bitcast i32* %int_cst9 to <2 x i64>*
  %13 = load <2 x i64>* %12, align 8, !tbaa !144
  %14 = bitcast i32* %int_cst12 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 8, !tbaa !144
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.body
  %n.0 = phi %struct.case_node* [ %4, %for.body ], [ %n.1, %do.cond ]
  %low21 = getelementptr inbounds %struct.case_node* %n.0, i64 0, i32 3
  %15 = load %union.tree_node** %low21, align 8, !tbaa !135
  %call22 = call i32 @tree_int_cst_lt(%union.tree_node* %call, %union.tree_node* %15) #6
  %tobool23 = icmp eq i32 %call22, 0
  br i1 %tobool23, label %if.else25, label %if.then24

if.then24:                                        ; preds = %do.body
  %left = getelementptr inbounds %struct.case_node* %n.0, i64 0, i32 0
  br label %do.cond

if.else25:                                        ; preds = %do.body
  %high26 = getelementptr inbounds %struct.case_node* %n.0, i64 0, i32 4
  %16 = load %union.tree_node** %high26, align 8, !tbaa !137
  %call27 = call i32 @tree_int_cst_lt(%union.tree_node* %16, %union.tree_node* %call) #6
  %tobool28 = icmp eq i32 %call27, 0
  br i1 %tobool28, label %if.else30, label %if.then29

if.then29:                                        ; preds = %if.else25
  %right = getelementptr inbounds %struct.case_node* %n.0, i64 0, i32 1
  br label %do.cond

if.else30:                                        ; preds = %if.else25
  %conv = trunc i64 %xlo.0205 to i32
  %rem = and i32 %conv, 7
  %shl = shl i32 1, %rem
  %div = lshr i64 %xlo.0205, 3
  %idxprom = and i64 %div, 536870911
  %arrayidx = getelementptr inbounds i8* %cases_seen, i64 %idxprom
  %17 = load i8* %arrayidx, align 1, !tbaa !68
  %conv32 = zext i8 %17 to i32
  %or = or i32 %conv32, %shl
  %conv33 = trunc i32 %or to i8
  store i8 %conv33, i8* %arrayidx, align 1, !tbaa !68
  br label %for.inc

do.cond:                                          ; preds = %if.then24, %if.then29
  %n.1.in = phi %struct.case_node** [ %left, %if.then24 ], [ %right, %if.then29 ]
  %n.1 = load %struct.case_node** %n.1.in, align 8
  %tobool35 = icmp eq %struct.case_node* %n.1, null
  br i1 %tobool35, label %for.inc, label %do.body

for.inc:                                          ; preds = %do.cond, %if.else30
  %chain = getelementptr inbounds %union.tree_node* %t.0204, i64 0, i32 0, i32 0, i32 0
  %18 = load %union.tree_node** %chain, align 8, !tbaa !79
  %inc = add i64 %xlo.0205, 1
  %cmp8 = icmp eq %union.tree_node* %18, null
  br i1 %cmp8, label %if.end154, label %for.body

if.else37:                                        ; preds = %if.else
  %left38 = bitcast %struct.rtx_def* %3 to %struct.case_node**
  %19 = load %struct.case_node** %left38, align 8, !tbaa !141
  %tobool39 = icmp eq %struct.case_node* %19, null
  br i1 %tobool39, label %for.cond48.preheader, label %if.then40

if.then40:                                        ; preds = %if.else37
  %call41 = call fastcc %struct.case_node* @case_tree2list(%struct.case_node* %4, %struct.case_node* null)
  %20 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt42 = getelementptr inbounds %struct.function* %20, i64 0, i32 1
  %21 = load %struct.stmt_status** %stmt42, align 8, !tbaa !1
  %x_case_stack43 = getelementptr inbounds %struct.stmt_status* %21, i64 0, i32 4
  %22 = load %struct.nesting** %x_case_stack43, align 8, !tbaa !36
  %case_list46 = getelementptr inbounds %struct.nesting* %22, i64 0, i32 4, i32 0, i32 1
  %call41.c = bitcast %struct.case_node* %call41 to %struct.rtx_def*
  store %struct.rtx_def* %call41.c, %struct.rtx_def** %case_list46, align 8, !tbaa !130
  br label %for.cond48.preheader

for.cond48.preheader:                             ; preds = %if.else37, %if.then40
  %n.2.ph = phi %struct.case_node* [ %call41, %if.then40 ], [ %4, %if.else37 ]
  %tobool49212 = icmp eq %struct.case_node* %n.2.ph, null
  br i1 %tobool49212, label %if.end154, label %for.body50.lr.ph

for.body50.lr.ph:                                 ; preds = %for.cond48.preheader
  %int_cst56 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %low57 = bitcast i32* %int_cst56 to i64*
  %high64 = getelementptr inbounds i32* %int_cst56, i64 2
  %23 = bitcast i32* %high64 to i64*
  %tobool70 = icmp eq i32 %sparseness, 0
  %24 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 12
  %values72 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  br label %for.body50

for.body50:                                       ; preds = %for.body50.lr.ph, %for.inc150
  %next_node_to_try.0215 = phi %union.tree_node* [ null, %for.body50.lr.ph ], [ %next_node_to_try.1.lcssa, %for.inc150 ]
  %n.2214 = phi %struct.case_node* [ %n.2.ph, %for.body50.lr.ph ], [ %53, %for.inc150 ]
  %next_node_offset.0213 = phi i64 [ 0, %for.body50.lr.ph ], [ %next_node_offset.1.lcssa, %for.inc150 ]
  %low51 = getelementptr inbounds %struct.case_node* %n.2214, i64 0, i32 3
  %25 = load %union.tree_node** %low51, align 8, !tbaa !135
  %int_cst53 = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 2
  %26 = bitcast i32* %int_cst53 to <2 x i64>*
  %27 = load <2 x i64>* %26, align 8, !tbaa !144
  %28 = bitcast i32* %int_cst56 to <2 x i64>*
  store <2 x i64> %27, <2 x i64>* %28, align 8, !tbaa !144
  %high65 = getelementptr inbounds %struct.case_node* %n.2214, i64 0, i32 4
  %29 = load %union.tree_node** %high65, align 8, !tbaa !137
  %call66207 = call i32 @tree_int_cst_lt(%union.tree_node* %29, %union.tree_node* %call) #6
  %lnot208 = icmp eq i32 %call66207, 0
  br i1 %lnot208, label %while.body, label %for.inc150

while.body:                                       ; preds = %for.body50, %if.end136
  %next_node_to_try.1210 = phi %union.tree_node* [ %next_node_to_try.2, %if.end136 ], [ %next_node_to_try.0215, %for.body50 ]
  %next_node_offset.1209 = phi i64 [ %next_node_offset.2, %if.end136 ], [ %next_node_offset.0213, %for.body50 ]
  br i1 %tobool70, label %if.else99, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %30 = load i8** %values72, align 8
  %cmp73 = icmp eq i8* %30, null
  br i1 %cmp73, label %if.else99, label %if.then75

if.then75:                                        ; preds = %land.lhs.true
  store i64 %next_node_offset.1209, i64* %xlo68, align 8, !tbaa !144
  store i64 0, i64* %xhi, align 8, !tbaa !144
  br label %for.cond76

for.cond76:                                       ; preds = %if.end90, %if.then75
  %t69.0 = phi %union.tree_node* [ %next_node_to_try.1210, %if.then75 ], [ %38, %if.end90 ]
  %cmp77 = icmp eq %union.tree_node* %t69.0, null
  br i1 %cmp77, label %if.then79, label %if.end82

if.then79:                                        ; preds = %for.cond76
  %31 = load i8** %values72, align 8
  %32 = bitcast i8* %31 to %union.tree_node*
  store i64 0, i64* %xlo68, align 8, !tbaa !144
  br label %if.end82

if.end82:                                         ; preds = %if.then79, %for.cond76
  %t69.1 = phi %union.tree_node* [ %32, %if.then79 ], [ %t69.0, %for.cond76 ]
  %value84 = getelementptr inbounds %union.tree_node* %t69.1, i64 0, i32 0, i32 2
  %33 = bitcast i32* %value84 to %union.tree_node**
  %34 = load %union.tree_node** %33, align 8, !tbaa !72
  %call85 = call i32 @tree_int_cst_equal(%union.tree_node* %call, %union.tree_node* %34) #6
  %tobool86 = icmp eq i32 %call85, 0
  br i1 %tobool86, label %if.end90, label %if.then87

if.then87:                                        ; preds = %if.end82
  %chain89 = getelementptr inbounds %union.tree_node* %t69.1, i64 0, i32 0, i32 0, i32 0
  %35 = load %union.tree_node** %chain89, align 8, !tbaa !79
  %36 = load i64* %xlo68, align 8, !tbaa !144
  %add = add i64 %36, 1
  br label %if.end119

if.end90:                                         ; preds = %if.end82
  %37 = load i64* %xlo68, align 8, !tbaa !144
  %inc91 = add i64 %37, 1
  store i64 %inc91, i64* %xlo68, align 8, !tbaa !144
  %chain93 = getelementptr inbounds %union.tree_node* %t69.1, i64 0, i32 0, i32 0, i32 0
  %38 = load %union.tree_node** %chain93, align 8, !tbaa !79
  %cmp94 = icmp eq %union.tree_node* %38, %next_node_to_try.1210
  br i1 %cmp94, label %if.then96, label %for.cond76

if.then96:                                        ; preds = %if.end90
  store i64 -1, i64* %xlo68, align 8, !tbaa !144
  br label %if.end119

if.else99:                                        ; preds = %land.lhs.true, %while.body
  %39 = load %union.tree_node** %24, align 8, !tbaa !143
  %tobool101 = icmp eq %union.tree_node* %39, null
  br i1 %tobool101, label %if.else110, label %if.then102

if.then102:                                       ; preds = %if.else99
  %int_cst104 = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 2
  %low105 = bitcast i32* %int_cst104 to i64*
  %40 = load i64* %low105, align 8, !tbaa !145
  %high108 = getelementptr inbounds i32* %int_cst104, i64 2
  %41 = bitcast i32* %high108 to i64*
  %42 = load i64* %41, align 8, !tbaa !148
  %call109 = call i32 @neg_double(i64 %40, i64 %42, i64* %xlo68, i64* %xhi) #6
  %.pre = load i64* %xlo68, align 8, !tbaa !144
  %.pre217 = load i64* %xhi, align 8, !tbaa !144
  br label %if.end111

if.else110:                                       ; preds = %if.else99
  store i64 0, i64* %xhi, align 8, !tbaa !144
  store i64 0, i64* %xlo68, align 8, !tbaa !144
  br label %if.end111

if.end111:                                        ; preds = %if.else110, %if.then102
  %43 = phi i64 [ 0, %if.else110 ], [ %.pre217, %if.then102 ]
  %44 = phi i64 [ 0, %if.else110 ], [ %.pre, %if.then102 ]
  %45 = load i64* %low57, align 8, !tbaa !145
  %46 = load i64* %23, align 8, !tbaa !148
  %call118 = call i32 @add_double(i64 %44, i64 %43, i64 %45, i64 %46, i64* %xlo68, i64* %xhi) #6
  br label %if.end119

if.end119:                                        ; preds = %if.then87, %if.then96, %if.end111
  %next_node_offset.2 = phi i64 [ %add, %if.then87 ], [ %next_node_offset.1209, %if.then96 ], [ %next_node_offset.1209, %if.end111 ]
  %next_node_to_try.2 = phi %union.tree_node* [ %35, %if.then87 ], [ %next_node_to_try.1210, %if.then96 ], [ %next_node_to_try.1210, %if.end111 ]
  %47 = load i64* %xhi, align 8, !tbaa !144
  %cmp120 = icmp eq i64 %47, 0
  br i1 %cmp120, label %land.lhs.true122, label %if.end136

land.lhs.true122:                                 ; preds = %if.end119
  %48 = load i64* %xlo68, align 8, !tbaa !144
  %cmp123 = icmp ult i64 %48, %count
  br i1 %cmp123, label %if.then125, label %if.end136

if.then125:                                       ; preds = %land.lhs.true122
  %conv126 = trunc i64 %48 to i32
  %rem127 = and i32 %conv126, 7
  %shl128 = shl i32 1, %rem127
  %div130 = lshr i64 %48, 3
  %idxprom131 = and i64 %div130, 536870911
  %arrayidx132 = getelementptr inbounds i8* %cases_seen, i64 %idxprom131
  %49 = load i8* %arrayidx132, align 1, !tbaa !68
  %conv133 = zext i8 %49 to i32
  %or134 = or i32 %conv133, %shl128
  %conv135 = trunc i32 %or134 to i8
  store i8 %conv135, i8* %arrayidx132, align 1, !tbaa !68
  br label %if.end136

if.end136:                                        ; preds = %if.then125, %land.lhs.true122, %if.end119
  %50 = load i64* %low57, align 8, !tbaa !145
  %51 = load i64* %23, align 8, !tbaa !148
  %call149 = call i32 @add_double(i64 %50, i64 %51, i64 1, i64 0, i64* %low57, i64* %23) #6
  %52 = load %union.tree_node** %high65, align 8, !tbaa !137
  %call66 = call i32 @tree_int_cst_lt(%union.tree_node* %52, %union.tree_node* %call) #6
  %lnot = icmp eq i32 %call66, 0
  br i1 %lnot, label %while.body, label %for.inc150

for.inc150:                                       ; preds = %if.end136, %for.body50
  %next_node_to_try.1.lcssa = phi %union.tree_node* [ %next_node_to_try.0215, %for.body50 ], [ %next_node_to_try.2, %if.end136 ]
  %next_node_offset.1.lcssa = phi i64 [ %next_node_offset.0213, %for.body50 ], [ %next_node_offset.2, %if.end136 ]
  %right151 = getelementptr inbounds %struct.case_node* %n.2214, i64 0, i32 1
  %53 = load %struct.case_node** %right151, align 8, !tbaa !142
  %tobool49 = icmp eq %struct.case_node* %53, null
  br i1 %tobool49, label %if.end154, label %for.body50

if.end154:                                        ; preds = %for.inc150, %for.inc, %for.cond48.preheader, %if.then2, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.case_node* @case_tree2list(%struct.case_node* %node, %struct.case_node* %right) #0 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %if.then6, %entry
  %node.tr = phi %struct.case_node* [ %node, %entry ], [ %1, %if.then6 ]
  %right.tr = phi %struct.case_node* [ %right, %entry ], [ %node.tr, %if.then6 ]
  %right1 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 1
  %0 = load %struct.case_node** %right1, align 8, !tbaa !142
  %tobool = icmp eq %struct.case_node* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %tailrecurse
  %call = tail call fastcc %struct.case_node* @case_tree2list(%struct.case_node* %0, %struct.case_node* %right.tr)
  br label %if.end

if.end:                                           ; preds = %tailrecurse, %if.then
  %right.addr.0 = phi %struct.case_node* [ %call, %if.then ], [ %right.tr, %tailrecurse ]
  store %struct.case_node* %right.addr.0, %struct.case_node** %right1, align 8, !tbaa !142
  %left4 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 0
  %1 = load %struct.case_node** %left4, align 8, !tbaa !141
  %tobool5 = icmp eq %struct.case_node* %1, null
  br i1 %tobool5, label %return, label %if.then6

if.then6:                                         ; preds = %if.end
  store %struct.case_node* null, %struct.case_node** %left4, align 8, !tbaa !141
  br label %tailrecurse

return:                                           ; preds = %if.end
  ret %struct.case_node* %node.tr
}

declare i32 @neg_double(i64, i64, i64*, i64*) #2

declare i32 @add_double(i64, i64, i64, i64, i64*, i64*) #2

; Function Attrs: nounwind uwtable
define void @check_for_full_enumeration_handling(%union.tree_node* %type) #0 {
entry:
  %sparseness = alloca i32, align 4
  store i32 0, i32* %sparseness, align 4, !tbaa !58
  %0 = load i32* @warn_switch, align 4, !tbaa !58
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end154, label %if.end

if.end:                                           ; preds = %entry
  %call = call i64 @all_cases_count(%union.tree_node* %type, i32* %sparseness)
  %call.off = add i64 %call, -1
  %1 = icmp ult i64 %call.off, 599999
  br i1 %1, label %land.lhs.true2, label %if.end17

land.lhs.true2:                                   ; preds = %if.end
  %add = add nsw i64 %call, 8
  %div = sdiv i64 %add, 8
  %call3 = tail call i8* @calloc(i64 %div, i64 1) #6
  %cmp4 = icmp eq i8* %call3, null
  br i1 %cmp4, label %if.end17, label %if.then5

if.then5:                                         ; preds = %land.lhs.true2
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %2 = load i8** %values, align 8
  %3 = load i32* %sparseness, align 4, !tbaa !58
  tail call void @mark_seen_cases(%union.tree_node* %type, i8* %call3, i64 %call, i32 %3)
  %cmp7197 = icmp eq i8* %2, null
  br i1 %cmp7197, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then5
  %4 = bitcast i8* %2 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %v.0201 = phi %union.tree_node* [ %4, %for.body.lr.ph ], [ %9, %for.inc ]
  %i.0200 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %conv = trunc i64 %i.0200 to i32
  %div9 = lshr i64 %i.0200, 3
  %idxprom = and i64 %div9, 536870911
  %arrayidx = getelementptr inbounds i8* %call3, i64 %idxprom
  %5 = load i8* %arrayidx, align 1, !tbaa !68
  %conv10 = zext i8 %5 to i32
  %rem = and i32 %conv, 7
  %shl = shl i32 1, %rem
  %and = and i32 %conv10, %shl
  %cmp12 = icmp eq i32 %and, 0
  br i1 %cmp12, label %if.then14, label %for.inc

if.then14:                                        ; preds = %for.body
  %purpose = getelementptr inbounds %union.tree_node* %v.0201, i64 0, i32 0, i32 1
  %6 = load i8** %purpose, align 8
  %str = getelementptr inbounds i8* %6, i64 32
  %7 = bitcast i8* %str to i8**
  %8 = load i8** %7, align 8, !tbaa !63
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([45 x i8]* @.str18, i64 0, i64 0), i8* %8) #6
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then14
  %inc = add nsw i64 %i.0200, 1
  %chain16 = getelementptr inbounds %union.tree_node* %v.0201, i64 0, i32 0, i32 0, i32 0
  %9 = load %union.tree_node** %chain16, align 8, !tbaa !79
  %cmp7 = icmp ne %union.tree_node* %9, null
  %cmp8 = icmp slt i64 %inc, %call
  %or.cond = and i1 %cmp7, %cmp8
  br i1 %or.cond, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %if.then5
  tail call void @free(i8* %call3)
  br label %if.end17

if.end17:                                         ; preds = %land.lhs.true2, %for.end, %if.end
  %10 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %10, i64 0, i32 1
  %11 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %11, i64 0, i32 4
  %12 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %case_list = getelementptr inbounds %struct.nesting* %12, i64 0, i32 4, i32 0, i32 1
  %13 = load %struct.rtx_def** %case_list, align 8
  %14 = bitcast %struct.rtx_def* %13 to %struct.case_node*
  %tobool18 = icmp eq %struct.rtx_def* %13, null
  br i1 %tobool18, label %if.end38, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %if.end17
  %left = bitcast %struct.rtx_def* %13 to %struct.case_node**
  %15 = load %struct.case_node** %left, align 8, !tbaa !141
  %tobool25 = icmp eq %struct.case_node* %15, null
  br i1 %tobool25, label %if.end38, label %if.then26

if.then26:                                        ; preds = %land.lhs.true19
  %call32 = tail call fastcc %struct.case_node* @case_tree2list(%struct.case_node* %14, %struct.case_node* null)
  %16 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt33 = getelementptr inbounds %struct.function* %16, i64 0, i32 1
  %17 = load %struct.stmt_status** %stmt33, align 8, !tbaa !1
  %x_case_stack34 = getelementptr inbounds %struct.stmt_status* %17, i64 0, i32 4
  %18 = load %struct.nesting** %x_case_stack34, align 8, !tbaa !36
  %case_list37 = getelementptr inbounds %struct.nesting* %18, i64 0, i32 4, i32 0, i32 1
  %call32.c = bitcast %struct.case_node* %call32 to %struct.rtx_def*
  store %struct.rtx_def* %call32.c, %struct.rtx_def** %case_list37, align 8, !tbaa !130
  br label %if.end38

if.end38:                                         ; preds = %land.lhs.true19, %if.end17, %if.then26
  %19 = load i32* @warn_switch, align 4, !tbaa !58
  %tobool39 = icmp eq i32 %19, 0
  br i1 %tobool39, label %if.end154, label %if.then40

if.then40:                                        ; preds = %if.end38
  %20 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt41 = getelementptr inbounds %struct.function* %20, i64 0, i32 1
  %21 = load %struct.stmt_status** %stmt41, align 8, !tbaa !1
  %x_case_stack42 = getelementptr inbounds %struct.stmt_status* %21, i64 0, i32 4
  %22 = load %struct.nesting** %x_case_stack42, align 8, !tbaa !36
  %case_list45 = getelementptr inbounds %struct.nesting* %22, i64 0, i32 4, i32 0, i32 1
  %23 = load %struct.rtx_def** %case_list45, align 8
  %tobool47194 = icmp eq %struct.rtx_def* %23, null
  br i1 %tobool47194, label %if.end154, label %for.body48.lr.ph

for.body48.lr.ph:                                 ; preds = %if.then40
  %24 = bitcast %struct.rtx_def* %23 to %struct.case_node*
  %values50 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %25 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 11
  br label %for.body48

for.body48:                                       ; preds = %for.body48.lr.ph, %for.inc152
  %n.0195 = phi %struct.case_node* [ %24, %for.body48.lr.ph ], [ %52, %for.inc152 ]
  %26 = load i8** %values50, align 8
  %tobool52190 = icmp eq i8* %26, null
  br i1 %tobool52190, label %for.body48.if.then64_crit_edge, label %land.rhs53.lr.ph

for.body48.if.then64_crit_edge:                   ; preds = %for.body48
  %low69.pre = getelementptr inbounds %struct.case_node* %n.0195, i64 0, i32 3
  br label %if.then64

land.rhs53.lr.ph:                                 ; preds = %for.body48
  %27 = bitcast i8* %26 to %union.tree_node*
  %low = getelementptr inbounds %struct.case_node* %n.0195, i64 0, i32 3
  br label %land.rhs53

land.rhs53:                                       ; preds = %land.rhs53.lr.ph, %for.inc59
  %chain.0191 = phi %union.tree_node* [ %27, %land.rhs53.lr.ph ], [ %31, %for.inc59 ]
  %28 = load %union.tree_node** %low, align 8, !tbaa !135
  %value = getelementptr inbounds %union.tree_node* %chain.0191, i64 0, i32 0, i32 2
  %29 = bitcast i32* %value to %union.tree_node**
  %30 = load %union.tree_node** %29, align 8, !tbaa !72
  %call55 = tail call i32 @tree_int_cst_equal(%union.tree_node* %28, %union.tree_node* %30) #6
  %lnot = icmp eq i32 %call55, 0
  br i1 %lnot, label %for.inc59, label %if.end90

for.inc59:                                        ; preds = %land.rhs53
  %chain61 = getelementptr inbounds %union.tree_node* %chain.0191, i64 0, i32 0, i32 0, i32 0
  %31 = load %union.tree_node** %chain61, align 8, !tbaa !79
  %tobool52 = icmp eq %union.tree_node* %31, null
  br i1 %tobool52, label %if.then64, label %land.rhs53

if.then64:                                        ; preds = %for.inc59, %for.body48.if.then64_crit_edge
  %low69.pre-phi = phi %union.tree_node** [ %low69.pre, %for.body48.if.then64_crit_edge ], [ %low, %for.inc59 ]
  %32 = load %union.tree_node** %25, align 8, !tbaa !149
  %cmp66 = icmp eq %union.tree_node* %32, null
  %33 = load %union.tree_node** %low69.pre-phi, align 8, !tbaa !135
  %int_cst70 = getelementptr inbounds %union.tree_node* %33, i64 0, i32 0, i32 2
  %low71 = bitcast i32* %int_cst70 to i64*
  %34 = load i64* %low71, align 8, !tbaa !145
  br i1 %cmp66, label %if.then68, label %if.else

if.then68:                                        ; preds = %if.then64
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([40 x i8]* @.str19, i64 0, i64 0), i64 %34) #6
  br label %if.end90

if.else:                                          ; preds = %if.then64
  %code = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp79 = icmp eq i32 %bf.clear, 1
  br i1 %cmp79, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.else
  %name85 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 8
  %35 = load %union.tree_node** %name85, align 8, !tbaa !62
  br label %cond.end

cond.end:                                         ; preds = %if.else, %cond.false
  %cond = phi %union.tree_node* [ %35, %cond.false ], [ %32, %if.else ]
  %id87 = getelementptr inbounds %union.tree_node* %cond, i64 0, i32 0, i32 1
  %36 = getelementptr inbounds i8** %id87, i64 1
  %37 = load i8** %36, align 8, !tbaa !63
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([45 x i8]* @.str20, i64 0, i64 0), i64 %34, i8* %37) #6
  br label %if.end90

if.end90:                                         ; preds = %land.rhs53, %if.then68, %cond.end
  %low91 = getelementptr inbounds %struct.case_node* %n.0195, i64 0, i32 3
  %38 = load %union.tree_node** %low91, align 8, !tbaa !135
  %high = getelementptr inbounds %struct.case_node* %n.0195, i64 0, i32 4
  %39 = load %union.tree_node** %high, align 8, !tbaa !137
  %call92 = tail call i32 @tree_int_cst_equal(%union.tree_node* %38, %union.tree_node* %39) #6
  %tobool93 = icmp eq i32 %call92, 0
  br i1 %tobool93, label %if.then94, label %for.inc152

if.then94:                                        ; preds = %if.end90
  %40 = load i8** %values50, align 8
  %tobool98192 = icmp eq i8* %40, null
  br i1 %tobool98192, label %if.then113, label %land.rhs99.lr.ph

land.rhs99.lr.ph:                                 ; preds = %if.then94
  %41 = bitcast i8* %40 to %union.tree_node*
  br label %land.rhs99

land.rhs99:                                       ; preds = %land.rhs99.lr.ph, %for.inc108
  %chain.1193 = phi %union.tree_node* [ %41, %land.rhs99.lr.ph ], [ %45, %for.inc108 ]
  %42 = load %union.tree_node** %high, align 8, !tbaa !137
  %value102 = getelementptr inbounds %union.tree_node* %chain.1193, i64 0, i32 0, i32 2
  %43 = bitcast i32* %value102 to %union.tree_node**
  %44 = load %union.tree_node** %43, align 8, !tbaa !72
  %call103 = tail call i32 @tree_int_cst_equal(%union.tree_node* %42, %union.tree_node* %44) #6
  %lnot105 = icmp eq i32 %call103, 0
  br i1 %lnot105, label %for.inc108, label %for.inc152

for.inc108:                                       ; preds = %land.rhs99
  %chain110 = getelementptr inbounds %union.tree_node* %chain.1193, i64 0, i32 0, i32 0, i32 0
  %45 = load %union.tree_node** %chain110, align 8, !tbaa !79
  %tobool98 = icmp eq %union.tree_node* %45, null
  br i1 %tobool98, label %if.then113, label %land.rhs99

if.then113:                                       ; preds = %for.inc108, %if.then94
  %46 = load %union.tree_node** %25, align 8, !tbaa !149
  %cmp116 = icmp eq %union.tree_node* %46, null
  %47 = load %union.tree_node** %high, align 8, !tbaa !137
  %int_cst121 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 2
  %low122 = bitcast i32* %int_cst121 to i64*
  %48 = load i64* %low122, align 8, !tbaa !145
  br i1 %cmp116, label %if.then118, label %if.else123

if.then118:                                       ; preds = %if.then113
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([40 x i8]* @.str19, i64 0, i64 0), i64 %48) #6
  br label %for.inc152

if.else123:                                       ; preds = %if.then113
  %code131 = getelementptr inbounds %union.tree_node* %46, i64 0, i32 0, i32 0, i32 2
  %bf.load132 = load i32* %code131, align 8
  %bf.clear133 = and i32 %bf.load132, 255
  %cmp134 = icmp eq i32 %bf.clear133, 1
  br i1 %cmp134, label %cond.end144, label %cond.false139

cond.false139:                                    ; preds = %if.else123
  %name143 = getelementptr inbounds %union.tree_node* %46, i64 0, i32 0, i32 8
  %49 = load %union.tree_node** %name143, align 8, !tbaa !62
  br label %cond.end144

cond.end144:                                      ; preds = %if.else123, %cond.false139
  %cond145 = phi %union.tree_node* [ %49, %cond.false139 ], [ %46, %if.else123 ]
  %id147 = getelementptr inbounds %union.tree_node* %cond145, i64 0, i32 0, i32 1
  %50 = getelementptr inbounds i8** %id147, i64 1
  %51 = load i8** %50, align 8, !tbaa !63
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([45 x i8]* @.str20, i64 0, i64 0), i64 %48, i8* %51) #6
  br label %for.inc152

for.inc152:                                       ; preds = %land.rhs99, %if.end90, %if.then118, %cond.end144
  %right = getelementptr inbounds %struct.case_node* %n.0195, i64 0, i32 1
  %52 = load %struct.case_node** %right, align 8, !tbaa !142
  %tobool47 = icmp eq %struct.case_node* %52, null
  br i1 %tobool47, label %if.end154, label %for.body48

if.end154:                                        ; preds = %for.inc152, %if.then40, %if.end38, %entry
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @expand_end_case_type(%union.tree_node* nocapture readonly %orig_index, %union.tree_node* %orig_type) #0 {
entry:
  %before_case = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %0 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !1
  %x_case_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 4
  %2 = load %struct.nesting** %x_case_stack, align 8, !tbaa !36
  %cmp = icmp eq %struct.nesting* %2, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = call %struct.rtx_def* @gen_label_rtx() #6
  %data = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4
  %index_expr1 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 3
  %3 = load %struct.nesting** %index_expr1, align 8
  %4 = bitcast %struct.nesting* %3 to %union.tree_node*
  %type = getelementptr inbounds %struct.nesting* %3, i64 0, i32 1
  %5 = load %struct.nesting** %type, align 8
  %6 = bitcast %struct.nesting* %5 to %union.tree_node*
  %7 = getelementptr inbounds %struct.nesting* %5, i64 0, i32 2
  %bf.load = load i32* %7, align 8
  %bf.lshr = lshr i32 %bf.load, 13
  %bf.clear = and i32 %bf.lshr, 1
  %cmp3 = icmp eq %union.tree_node* %orig_type, null
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %if.end
  %type6 = getelementptr inbounds %union.tree_node* %orig_index, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type6, align 8, !tbaa !76
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %if.end
  %orig_type.addr.0 = phi %union.tree_node* [ %8, %if.then4 ], [ %orig_type, %if.end ]
  call void @do_pending_stack_adjust() #6
  call fastcc void @check_seenlabel()
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !17
  %cmp8 = icmp eq %union.tree_node* %6, %9
  br i1 %cmp8, label %if.else424, label %if.then9

if.then9:                                         ; preds = %if.end7
  %default_label12 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 2
  %10 = load %struct.rtx_def** %default_label12, align 8
  %tobool = icmp eq %struct.rtx_def* %10, null
  br i1 %tobool, label %land.lhs.true, label %if.end37

land.lhs.true:                                    ; preds = %if.then9
  %code = getelementptr inbounds %union.tree_node* %orig_type.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load14 = load i32* %code, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  %cmp16 = icmp eq i32 %bf.clear15, 10
  br i1 %cmp16, label %land.lhs.true17, label %if.then29

land.lhs.true17:                                  ; preds = %land.lhs.true
  %11 = getelementptr inbounds %struct.nesting* %3, i64 0, i32 2
  %bf.load20 = load i32* %11, align 8
  %bf.clear21 = and i32 %bf.load20, 255
  %cmp22 = icmp eq i32 %bf.clear21, 25
  br i1 %cmp22, label %if.then29, label %if.end24

if.end24:                                         ; preds = %land.lhs.true17
  call void @check_for_full_enumeration_handling(%union.tree_node* %orig_type.addr.0)
  %.pr.pre = load %struct.rtx_def** %default_label12, align 8
  %cmp28 = icmp eq %struct.rtx_def* %.pr.pre, null
  br i1 %cmp28, label %if.then29, label %if.end37

if.then29:                                        ; preds = %land.lhs.true, %land.lhs.true17, %if.end24
  %call30 = call %union.tree_node* @build_decl(i32 31, %union.tree_node* null, %union.tree_node* null) #6
  %call30.c = bitcast %union.tree_node* %call30 to %struct.rtx_def*
  store %struct.rtx_def* %call30.c, %struct.rtx_def** %default_label12, align 8, !tbaa !132
  call void @expand_label(%union.tree_node* %call30)
  %.pre784 = load %struct.rtx_def** %default_label12, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.then9, %if.then29, %if.end24
  %12 = phi %struct.rtx_def* [ %10, %if.then9 ], [ %.pre784, %if.then29 ], [ %.pr.pre, %if.end24 ]
  %13 = bitcast %struct.rtx_def* %12 to %union.tree_node*
  %14 = getelementptr inbounds %struct.rtx_def* %12, i64 1, i32 0
  %bf.load.i = load i32* %14, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 31
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.end37
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i:                                         ; preds = %if.end37
  %rtl.i = getelementptr inbounds %struct.rtx_def* %12, i64 9
  %15 = bitcast %struct.rtx_def* %rtl.i to %struct.rtx_def**
  %16 = load %struct.rtx_def** %15, align 8, !tbaa !59
  %cmp1.i = icmp eq %struct.rtx_def* %16, null
  br i1 %cmp1.i, label %if.end5.i, label %label_rtx.exit

if.end5.i:                                        ; preds = %if.end.i
  %call.i = call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i, %struct.rtx_def** %15, align 8, !tbaa !59
  %tobool.i = icmp eq %struct.rtx_def* %call.i, null
  br i1 %tobool.i, label %cond.false.i, label %label_rtx.exit

cond.false.i:                                     ; preds = %if.end5.i
  call void @make_decl_rtl(%union.tree_node* %13, i8* null) #6
  %17 = load %struct.rtx_def** %15, align 8, !tbaa !59
  br label %label_rtx.exit

label_rtx.exit:                                   ; preds = %if.end.i, %if.end5.i, %cond.false.i
  %cond.i = phi %struct.rtx_def* [ %17, %cond.false.i ], [ %call.i, %if.end5.i ], [ %16, %if.end.i ]
  %call42 = call %struct.rtx_def* @get_last_insn() #6
  store %struct.rtx_def* %call42, %struct.rtx_def** %before_case, align 8, !tbaa !17
  %case_list = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 1
  %18 = bitcast %struct.rtx_def** %case_list to %struct.case_node**
  %19 = load %struct.rtx_def** %case_list, align 8
  %20 = bitcast %struct.rtx_def* %19 to %struct.case_node*
  %tobool45 = icmp eq %struct.rtx_def* %19, null
  br i1 %tobool45, label %if.end159, label %land.lhs.true46

land.lhs.true46:                                  ; preds = %label_rtx.exit
  %left = bitcast %struct.rtx_def* %19 to %struct.case_node**
  %21 = load %struct.case_node** %left, align 8, !tbaa !141
  %tobool50 = icmp eq %struct.case_node* %21, null
  br i1 %tobool50, label %while.body.i.preheader, label %if.end59

if.end59:                                         ; preds = %land.lhs.true46
  %call55 = call fastcc %struct.case_node* @case_tree2list(%struct.case_node* %20, %struct.case_node* null)
  %call55.c = bitcast %struct.case_node* %call55 to %struct.rtx_def*
  store %struct.rtx_def* %call55.c, %struct.rtx_def** %case_list, align 8, !tbaa !130
  %tobool94.i = icmp eq %struct.case_node* %call55, null
  br i1 %tobool94.i, label %if.end159, label %while.body.i.preheader

while.body.i.preheader:                           ; preds = %land.lhs.true46, %if.end59
  %22 = phi %struct.rtx_def* [ %call55.c, %if.end59 ], [ %19, %land.lhs.true46 ]
  %23 = bitcast %struct.rtx_def* %22 to %struct.case_node*
  br label %while.body.i

while.body.i:                                     ; preds = %while.body.i.preheader, %while.end.i
  %node.095.i = phi %struct.case_node* [ %28, %while.end.i ], [ %23, %while.body.i.preheader ]
  %code_label.i = getelementptr inbounds %struct.case_node* %node.095.i, i64 0, i32 5
  %24 = load %union.tree_node** %code_label.i, align 8, !tbaa !138
  %code.i.i = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %code.i.i, align 8
  %bf.clear.i.i = and i32 %bf.load.i.i, 255
  %cmp.i.i = icmp eq i32 %bf.clear.i.i, 31
  br i1 %cmp.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %while.body.i
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i.i:                                       ; preds = %while.body.i
  %rtl.i.i = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 17
  %25 = load %struct.rtx_def** %rtl.i.i, align 8, !tbaa !59
  %cmp1.i.i = icmp eq %struct.rtx_def* %25, null
  br i1 %cmp1.i.i, label %if.end5.i.i, label %label_rtx.exit.i

if.end5.i.i:                                      ; preds = %if.end.i.i
  %call.i.i = call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i.i, %struct.rtx_def** %rtl.i.i, align 8, !tbaa !59
  %tobool.i.i = icmp eq %struct.rtx_def* %call.i.i, null
  br i1 %tobool.i.i, label %cond.false.i.i, label %label_rtx.exit.i

cond.false.i.i:                                   ; preds = %if.end5.i.i
  call void @make_decl_rtl(%union.tree_node* %24, i8* null) #6
  %26 = load %struct.rtx_def** %rtl.i.i, align 8, !tbaa !59
  br label %label_rtx.exit.i

label_rtx.exit.i:                                 ; preds = %cond.false.i.i, %if.end5.i.i, %if.end.i.i
  %cond.i.i = phi %struct.rtx_def* [ %26, %cond.false.i.i ], [ %call.i.i, %if.end5.i.i ], [ %25, %if.end.i.i ]
  %call1.i = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %cond.i.i) #6
  %right86.i = getelementptr inbounds %struct.case_node* %node.095.i, i64 0, i32 1
  %27 = load %struct.case_node** %right86.i, align 8, !tbaa !142
  %cmp87.i = icmp eq %struct.case_node* %27, null
  br i1 %cmp87.i, label %while.end.thread.i, label %land.lhs.true.lr.ph.i

land.lhs.true.lr.ph.i:                            ; preds = %label_rtx.exit.i
  %high.i = getelementptr inbounds %struct.case_node* %node.095.i, i64 0, i32 4
  %cmp7.i = icmp ne %struct.rtx_def* %call1.i, null
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call1.i, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  br label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %while.body43.i, %land.lhs.true.lr.ph.i
  %28 = phi %struct.case_node* [ %27, %land.lhs.true.lr.ph.i ], [ %44, %while.body43.i ]
  %code_label3.i = getelementptr inbounds %struct.case_node* %28, i64 0, i32 5
  %29 = load %union.tree_node** %code_label3.i, align 8, !tbaa !138
  %code.i71.i = getelementptr inbounds %union.tree_node* %29, i64 0, i32 0, i32 0, i32 2
  %bf.load.i72.i = load i32* %code.i71.i, align 8
  %bf.clear.i73.i = and i32 %bf.load.i72.i, 255
  %cmp.i74.i = icmp eq i32 %bf.clear.i73.i, 31
  br i1 %cmp.i74.i, label %if.end.i78.i, label %if.then.i75.i

if.then.i75.i:                                    ; preds = %land.lhs.true.i
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i78.i:                                     ; preds = %land.lhs.true.i
  %rtl.i76.i = getelementptr inbounds %union.tree_node* %29, i64 0, i32 0, i32 17
  %30 = load %struct.rtx_def** %rtl.i76.i, align 8, !tbaa !59
  %cmp1.i77.i = icmp eq %struct.rtx_def* %30, null
  br i1 %cmp1.i77.i, label %if.end5.i81.i, label %label_rtx.exit84.i

if.end5.i81.i:                                    ; preds = %if.end.i78.i
  %call.i79.i = call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i79.i, %struct.rtx_def** %rtl.i76.i, align 8, !tbaa !59
  %tobool.i80.i = icmp eq %struct.rtx_def* %call.i79.i, null
  br i1 %tobool.i80.i, label %cond.false.i82.i, label %label_rtx.exit84.i

cond.false.i82.i:                                 ; preds = %if.end5.i81.i
  call void @make_decl_rtl(%union.tree_node* %29, i8* null) #6
  %31 = load %struct.rtx_def** %rtl.i76.i, align 8, !tbaa !59
  br label %label_rtx.exit84.i

label_rtx.exit84.i:                               ; preds = %cond.false.i82.i, %if.end5.i81.i, %if.end.i78.i
  %cond.i83.i = phi %struct.rtx_def* [ %31, %cond.false.i82.i ], [ %call.i79.i, %if.end5.i81.i ], [ %30, %if.end.i78.i ]
  %call5.i = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %cond.i83.i) #6
  %cmp6.i = icmp eq %struct.rtx_def* %call5.i, %call1.i
  br i1 %cmp6.i, label %land.lhs.true28.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %label_rtx.exit84.i
  %cmp9.i = icmp ne %struct.rtx_def* %call5.i, null
  %or.cond.i = and i1 %cmp7.i, %cmp9.i
  br i1 %or.cond.i, label %land.lhs.true10.i, label %while.end.i

land.lhs.true10.i:                                ; preds = %lor.lhs.false.i
  %call11.i = call i32 @simplejump_p(%struct.rtx_def* %call1.i) #6
  %tobool12.i = icmp eq i32 %call11.i, 0
  br i1 %tobool12.i, label %while.end.i, label %land.lhs.true13.i

land.lhs.true13.i:                                ; preds = %land.lhs.true10.i
  %call14.i = call i32 @simplejump_p(%struct.rtx_def* %call5.i) #6
  %tobool15.i = icmp eq i32 %call14.i, 0
  br i1 %tobool15.i, label %while.end.i, label %land.lhs.true16.i

land.lhs.true16.i:                                ; preds = %land.lhs.true13.i
  %32 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !17
  %arrayidx18.i = getelementptr inbounds %struct.rtx_def* %32, i64 0, i32 1, i64 1
  %rtx19.i = bitcast %union.rtunion_def* %arrayidx18.i to %struct.rtx_def**
  %33 = load %struct.rtx_def** %rtx19.i, align 8, !tbaa !17
  %arrayidx21.i = getelementptr inbounds %struct.rtx_def* %call5.i, i64 0, i32 1, i64 3
  %rtx22.i = bitcast %union.rtunion_def* %arrayidx21.i to %struct.rtx_def**
  %34 = load %struct.rtx_def** %rtx22.i, align 8, !tbaa !17
  %arrayidx24.i = getelementptr inbounds %struct.rtx_def* %34, i64 0, i32 1, i64 1
  %rtx25.i = bitcast %union.rtunion_def* %arrayidx24.i to %struct.rtx_def**
  %35 = load %struct.rtx_def** %rtx25.i, align 8, !tbaa !17
  %call26.i = call i32 @rtx_equal_p(%struct.rtx_def* %33, %struct.rtx_def* %35) #6
  %tobool27.i = icmp eq i32 %call26.i, 0
  br i1 %tobool27.i, label %while.end.i, label %land.lhs.true28.i

land.lhs.true28.i:                                ; preds = %land.lhs.true16.i, %label_rtx.exit84.i
  %low.i = getelementptr inbounds %struct.case_node* %28, i64 0, i32 3
  %36 = load %union.tree_node** %low.i, align 8, !tbaa !135
  %37 = load %union.tree_node** %high.i, align 8, !tbaa !137
  %type.i = getelementptr inbounds %union.tree_node* %37, i64 0, i32 0, i32 0, i32 1
  %38 = load %union.tree_node** %type.i, align 8, !tbaa !76
  %39 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !17
  %call30.i = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 59, %union.tree_node* %38, %union.tree_node* %37, %union.tree_node* %39) #6
  %call31.i = call %union.tree_node* @fold(%union.tree_node* %call30.i) #6
  %call32.i = call i32 @tree_int_cst_equal(%union.tree_node* %36, %union.tree_node* %call31.i) #6
  %tobool33.i = icmp eq i32 %call32.i, 0
  br i1 %tobool33.i, label %while.end.i, label %land.rhs.i

land.rhs.i:                                       ; preds = %land.lhs.true28.i
  %40 = load %union.tree_node** %high.i, align 8, !tbaa !137
  %type37.i = getelementptr inbounds %union.tree_node* %40, i64 0, i32 0, i32 0, i32 1
  %41 = load %union.tree_node** %type37.i, align 8, !tbaa !76
  %42 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !17
  %call39.i = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 59, %union.tree_node* %41, %union.tree_node* %40, %union.tree_node* %42) #6
  %call40.i = call %union.tree_node* @fold(%union.tree_node* %call39.i) #6
  %call41.i = call i32 @tree_int_cst_lt(%union.tree_node* %40, %union.tree_node* %call40.i) #6
  %tobool42.i = icmp eq i32 %call41.i, 0
  br i1 %tobool42.i, label %while.end.i, label %while.body43.i

while.body43.i:                                   ; preds = %land.rhs.i
  %high44.i = getelementptr inbounds %struct.case_node* %28, i64 0, i32 4
  %43 = load %union.tree_node** %high44.i, align 8, !tbaa !137
  store %union.tree_node* %43, %union.tree_node** %high.i, align 8, !tbaa !137
  %right.i = getelementptr inbounds %struct.case_node* %28, i64 0, i32 1
  %44 = load %struct.case_node** %right.i, align 8, !tbaa !142
  %cmp.i659 = icmp eq %struct.case_node* %44, null
  br i1 %cmp.i659, label %while.end.thread.i, label %land.lhs.true.i

while.end.thread.i:                               ; preds = %label_rtx.exit.i, %while.body43.i
  store %struct.case_node* null, %struct.case_node** %right86.i, align 8, !tbaa !142
  br label %group_case_nodes.exit

while.end.i:                                      ; preds = %land.rhs.i, %land.lhs.true28.i, %land.lhs.true16.i, %land.lhs.true13.i, %land.lhs.true10.i, %lor.lhs.false.i
  store %struct.case_node* %28, %struct.case_node** %right86.i, align 8, !tbaa !142
  %tobool.i660 = icmp eq %struct.case_node* %28, null
  br i1 %tobool.i660, label %group_case_nodes.exit, label %while.body.i

group_case_nodes.exit:                            ; preds = %while.end.i, %while.end.thread.i
  %.pr.pr = load %struct.rtx_def** %case_list, align 8
  %tobool66756 = icmp eq %struct.rtx_def* %.pr.pr, null
  br i1 %tobool66756, label %if.end159, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %group_case_nodes.exit
  %45 = bitcast %struct.rtx_def* %.pr.pr to %struct.case_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %if.end147
  %minval.0760 = phi %union.tree_node* [ null, %for.body.lr.ph ], [ %minval.2, %if.end147 ]
  %maxval.0759 = phi %union.tree_node* [ null, %for.body.lr.ph ], [ %maxval.1, %if.end147 ]
  %n.0758 = phi %struct.case_node* [ %45, %for.body.lr.ph ], [ %62, %if.end147 ]
  %count.0757 = phi i32 [ 0, %for.body.lr.ph ], [ %inc153.inc, %if.end147 ]
  %low = getelementptr inbounds %struct.case_node* %n.0758, i64 0, i32 3
  %46 = load %union.tree_node** %low, align 8, !tbaa !135
  %code68 = getelementptr inbounds %union.tree_node* %46, i64 0, i32 0, i32 0, i32 2
  %bf.load69 = load i32* %code68, align 8
  %bf.clear70 = and i32 %bf.load69, 255
  %cmp71 = icmp eq i32 %bf.clear70, 25
  br i1 %cmp71, label %if.end73, label %if.then72

if.then72:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 5336, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.expand_end_case_type, i64 0, i64 0)) #7
  unreachable

if.end73:                                         ; preds = %for.body
  %high = getelementptr inbounds %struct.case_node* %n.0758, i64 0, i32 4
  %47 = load %union.tree_node** %high, align 8, !tbaa !137
  %code75 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 0, i32 2
  %bf.load76 = load i32* %code75, align 8
  %bf.clear77 = and i32 %bf.load76, 255
  %cmp78 = icmp eq i32 %bf.clear77, 25
  br i1 %cmp78, label %if.end80, label %if.then79

if.then79:                                        ; preds = %if.end73
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 5338, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.expand_end_case_type, i64 0, i64 0)) #7
  unreachable

if.end80:                                         ; preds = %if.end73
  %call82 = call %union.tree_node* @convert(%union.tree_node* %6, %union.tree_node* %46) #6
  store %union.tree_node* %call82, %union.tree_node** %low, align 8, !tbaa !135
  %48 = load %union.tree_node** %high, align 8, !tbaa !137
  %call85 = call %union.tree_node* @convert(%union.tree_node* %6, %union.tree_node* %48) #6
  store %union.tree_node* %call85, %union.tree_node** %high, align 8, !tbaa !137
  %cmp87 = icmp eq i32 %count.0757, 0
  %49 = load %union.tree_node** %low, align 8, !tbaa !135
  br i1 %cmp87, label %if.end147, label %if.else

if.else:                                          ; preds = %if.end80
  %int_cst92 = getelementptr inbounds %union.tree_node* %49, i64 0, i32 0, i32 2
  %high93 = getelementptr inbounds i32* %int_cst92, i64 2
  %50 = bitcast i32* %high93 to i64*
  %51 = load i64* %50, align 8, !tbaa !148
  %int_cst95 = getelementptr inbounds %union.tree_node* %minval.0760, i64 0, i32 0, i32 2
  %high96 = getelementptr inbounds i32* %int_cst95, i64 2
  %52 = bitcast i32* %high96 to i64*
  %53 = load i64* %52, align 8, !tbaa !148
  %cmp97 = icmp slt i64 %51, %53
  br i1 %cmp97, label %if.then115, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %cmp105 = icmp eq i64 %51, %53
  br i1 %cmp105, label %land.lhs.true106, label %if.end117

land.lhs.true106:                                 ; preds = %lor.lhs.false
  %low110 = bitcast i32* %int_cst92 to i64*
  %54 = load i64* %low110, align 8, !tbaa !145
  %low113 = bitcast i32* %int_cst95 to i64*
  %55 = load i64* %low113, align 8, !tbaa !145
  %cmp114 = icmp ult i64 %54, %55
  br i1 %cmp114, label %if.then115, label %if.end117

if.then115:                                       ; preds = %land.lhs.true106, %if.else
  br label %if.end117

if.end117:                                        ; preds = %if.then115, %land.lhs.true106, %lor.lhs.false
  %minval.1 = phi %union.tree_node* [ %49, %if.then115 ], [ %minval.0760, %land.lhs.true106 ], [ %minval.0760, %lor.lhs.false ]
  %int_cst119 = getelementptr inbounds %union.tree_node* %maxval.0759, i64 0, i32 0, i32 2
  %high120 = getelementptr inbounds i32* %int_cst119, i64 2
  %56 = bitcast i32* %high120 to i64*
  %57 = load i64* %56, align 8, !tbaa !148
  %int_cst123 = getelementptr inbounds %union.tree_node* %call85, i64 0, i32 0, i32 2
  %high124 = getelementptr inbounds i32* %int_cst123, i64 2
  %58 = bitcast i32* %high124 to i64*
  %59 = load i64* %58, align 8, !tbaa !148
  %cmp125 = icmp slt i64 %57, %59
  br i1 %cmp125, label %if.then144, label %lor.lhs.false126

lor.lhs.false126:                                 ; preds = %if.end117
  %cmp134 = icmp eq i64 %57, %59
  br i1 %cmp134, label %land.lhs.true135, label %if.end147

land.lhs.true135:                                 ; preds = %lor.lhs.false126
  %low138 = bitcast i32* %int_cst119 to i64*
  %60 = load i64* %low138, align 8, !tbaa !145
  %low142 = bitcast i32* %int_cst123 to i64*
  %61 = load i64* %low142, align 8, !tbaa !145
  %cmp143 = icmp ult i64 %60, %61
  br i1 %cmp143, label %if.then144, label %if.end147

if.then144:                                       ; preds = %land.lhs.true135, %if.end117
  br label %if.end147

if.end147:                                        ; preds = %if.end80, %lor.lhs.false126, %land.lhs.true135, %if.then144
  %maxval.1 = phi %union.tree_node* [ %call85, %if.then144 ], [ %maxval.0759, %land.lhs.true135 ], [ %maxval.0759, %lor.lhs.false126 ], [ %call85, %if.end80 ]
  %minval.2 = phi %union.tree_node* [ %minval.1, %if.then144 ], [ %minval.1, %land.lhs.true135 ], [ %minval.1, %lor.lhs.false126 ], [ %49, %if.end80 ]
  %call150 = call i32 @tree_int_cst_equal(%union.tree_node* %49, %union.tree_node* %call85) #6
  %tobool151 = icmp eq i32 %call150, 0
  %inc153.inc.v = select i1 %tobool151, i32 2, i32 1
  %inc153.inc = add i32 %inc153.inc.v, %count.0757
  %right = getelementptr inbounds %struct.case_node* %n.0758, i64 0, i32 1
  %62 = load %struct.case_node** %right, align 8, !tbaa !142
  %tobool66 = icmp eq %struct.case_node* %62, null
  br i1 %tobool66, label %for.end, label %for.body

for.end:                                          ; preds = %if.end147
  %cmp155 = icmp eq i32 %inc153.inc, 0
  br i1 %cmp155, label %if.end159, label %if.then156

if.then156:                                       ; preds = %for.end
  %call157 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %6, %union.tree_node* %maxval.1, %union.tree_node* %minval.2) #6
  %call158 = call %union.tree_node* @fold(%union.tree_node* %call157) #6
  br label %if.end159

if.end159:                                        ; preds = %label_rtx.exit, %if.end59, %group_case_nodes.exit, %for.end, %if.then156
  %cmp155797 = phi i1 [ false, %if.then156 ], [ true, %for.end ], [ true, %group_case_nodes.exit ], [ true, %if.end59 ], [ true, %label_rtx.exit ]
  %count.0.lcssa796 = phi i32 [ %inc153.inc, %if.then156 ], [ 0, %for.end ], [ 0, %group_case_nodes.exit ], [ 0, %if.end59 ], [ 0, %label_rtx.exit ]
  %maxval.0.lcssa795 = phi %union.tree_node* [ %maxval.1, %if.then156 ], [ %maxval.1, %for.end ], [ null, %group_case_nodes.exit ], [ null, %if.end59 ], [ null, %label_rtx.exit ]
  %minval.0.lcssa794 = phi %union.tree_node* [ %minval.2, %if.then156 ], [ %minval.2, %for.end ], [ null, %group_case_nodes.exit ], [ null, %if.end59 ], [ null, %label_rtx.exit ]
  %range.0 = phi %union.tree_node* [ %call158, %if.then156 ], [ null, %for.end ], [ null, %group_case_nodes.exit ], [ null, %if.end59 ], [ null, %label_rtx.exit ]
  %63 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i = getelementptr inbounds %struct.function* %63, i64 0, i32 1
  %64 = load %struct.stmt_status** %stmt.i, align 8, !tbaa !1
  %x_block_stack.i = getelementptr inbounds %struct.stmt_status* %64, i64 0, i32 0
  %65 = load %struct.nesting** %x_block_stack.i, align 8, !tbaa !9
  %tobool.i661 = icmp eq %struct.nesting* %65, null
  br i1 %tobool.i661, label %end_cleanup_deferral.exit, label %if.then.i662

if.then.i662:                                     ; preds = %if.end159
  %conditional_code.i = getelementptr inbounds %struct.nesting* %65, i64 0, i32 4, i32 0, i32 10
  %66 = load i32* %conditional_code.i, align 4, !tbaa !104
  %dec.i = add nsw i32 %66, -1
  store i32 %dec.i, i32* %conditional_code.i, align 4, !tbaa !104
  br label %end_cleanup_deferral.exit

end_cleanup_deferral.exit:                        ; preds = %if.end159, %if.then.i662
  br i1 %cmp155797, label %if.then161, label %if.else163

if.then161:                                       ; preds = %end_cleanup_deferral.exit
  %67 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call162 = call %struct.rtx_def* @expand_expr(%union.tree_node* %4, %struct.rtx_def* %67, i32 0, i32 0) #6
  call void @emit_queue() #6
  call void @do_pending_stack_adjust() #6
  %call.i664 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %cond.i) #6
  %call1.i665 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i664) #6
  %call2.i = call %struct.rtx_def* @emit_barrier() #6
  br label %if.end415

if.else163:                                       ; preds = %end_cleanup_deferral.exit
  %call164 = call i32 @case_values_threshold() #6
  %cmp165 = icmp ult i32 %count.0.lcssa796, %call164
  br i1 %cmp165, label %if.then195, label %lor.lhs.false166

lor.lhs.false166:                                 ; preds = %if.else163
  %mul = mul i32 %count.0.lcssa796, 10
  %conv = zext i32 %mul to i64
  %call167 = call i32 @compare_tree_int(%union.tree_node* %range.0, i64 %conv) #6
  %cmp168 = icmp sgt i32 %call167, 0
  br i1 %cmp168, label %if.then195, label %lor.lhs.false170

lor.lhs.false170:                                 ; preds = %lor.lhs.false166
  %call171 = call i32 @compare_tree_int(%union.tree_node* %range.0, i64 0) #6
  %cmp172 = icmp slt i32 %call171, 0
  br i1 %cmp172, label %if.then195, label %lor.lhs.false174

lor.lhs.false174:                                 ; preds = %lor.lhs.false170
  %68 = getelementptr inbounds %struct.nesting* %3, i64 0, i32 2
  %bf.load177 = load i32* %68, align 8
  %bf.clear178 = and i32 %bf.load177, 255
  switch i32 %bf.clear178, label %if.else308 [
    i32 25, label %if.then195
    i32 47, label %land.lhs.true188
  ]

land.lhs.true188:                                 ; preds = %lor.lhs.false174
  %arrayidx = getelementptr inbounds %struct.nesting* %3, i64 0, i32 4, i32 0, i32 1
  %69 = load %struct.rtx_def** %arrayidx, align 8
  %70 = getelementptr inbounds %struct.rtx_def* %69, i64 1, i32 0
  %bf.load191 = load i32* %70, align 8
  %bf.clear192 = and i32 %bf.load191, 255
  %cmp193 = icmp eq i32 %bf.clear192, 25
  br i1 %cmp193, label %if.then195, label %if.else308

if.then195:                                       ; preds = %lor.lhs.false174, %land.lhs.true188, %lor.lhs.false170, %lor.lhs.false166, %if.else163
  %call196 = call %struct.rtx_def* @expand_expr(%union.tree_node* %4, %struct.rtx_def* null, i32 0, i32 0) #6
  %71 = getelementptr inbounds %struct.rtx_def* %call196, i64 0, i32 0
  %bf.load197 = load i32* %71, align 8
  %bf.lshr198 = lshr i32 %bf.load197, 16
  %bf.clear199 = and i32 %bf.lshr198, 255
  %idxprom656 = zext i32 %bf.clear199 to i64
  %arrayidx200 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom656
  %72 = load i32* %arrayidx200, align 4, !tbaa !68
  %cmp201 = icmp eq i32 %72, 1
  br i1 %cmp201, label %land.lhs.true203, label %if.end227

land.lhs.true203:                                 ; preds = %if.then195
  %call207 = call i32 @have_insn_for(i32 74, i32 %bf.clear199) #6
  %tobool208 = icmp eq i32 %call207, 0
  br i1 %tobool208, label %if.then209, label %if.end227

if.then209:                                       ; preds = %land.lhs.true203
  %bf.load210 = load i32* %71, align 8
  %bf.lshr211 = lshr i32 %bf.load210, 16
  %bf.clear212 = and i32 %bf.lshr211, 255
  %cmp214748 = icmp eq i32 %bf.clear212, 0
  br i1 %cmp214748, label %if.end227, label %for.body216

for.body216:                                      ; preds = %if.then209, %for.inc222
  %wider_mode.0749 = phi i32 [ %conv225, %for.inc222 ], [ %bf.clear212, %if.then209 ]
  %call217 = call i32 @have_insn_for(i32 74, i32 %wider_mode.0749) #6
  %tobool218 = icmp eq i32 %call217, 0
  br i1 %tobool218, label %for.inc222, label %if.then219

if.then219:                                       ; preds = %for.body216
  %call220 = call %struct.rtx_def* @convert_to_mode(i32 %wider_mode.0749, %struct.rtx_def* %call196, i32 %bf.clear) #6
  br label %if.end227

for.inc222:                                       ; preds = %for.body216
  %idxprom223658 = zext i32 %wider_mode.0749 to i64
  %arrayidx224 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom223658
  %73 = load i8* %arrayidx224, align 1, !tbaa !68
  %conv225 = zext i8 %73 to i32
  %cmp214 = icmp eq i8 %73, 0
  br i1 %cmp214, label %if.end227, label %for.body216

if.end227:                                        ; preds = %for.inc222, %if.then209, %land.lhs.true203, %if.then219, %if.then195
  %index.0 = phi %struct.rtx_def* [ %call196, %land.lhs.true203 ], [ %call220, %if.then219 ], [ %call196, %if.then195 ], [ %call196, %if.then209 ], [ %call196, %for.inc222 ]
  call void @emit_queue() #6
  call void @do_pending_stack_adjust() #6
  %call228 = call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %index.0, i32 0) #6
  %74 = getelementptr inbounds %struct.rtx_def* %call228, i64 0, i32 0
  %bf.load229 = load i32* %74, align 8
  %bf.clear230 = and i32 %bf.load229, 65535
  %cmp231 = icmp eq i32 %bf.clear230, 66
  br i1 %cmp231, label %if.then233, label %if.end235

if.then233:                                       ; preds = %if.end227
  %call234 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call228) #6
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %call234, i64 0, i32 0
  %bf.load236.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end235

if.end235:                                        ; preds = %if.then233, %if.end227
  %bf.load236 = phi i32 [ %bf.load236.pre, %if.then233 ], [ %bf.load229, %if.end227 ]
  %index.1 = phi %struct.rtx_def* [ %call234, %if.then233 ], [ %call228, %if.end227 ]
  %bf.clear237 = and i32 %bf.load236, 65535
  %cmp238 = icmp eq i32 %bf.clear237, 54
  %.phi.trans.insert786 = getelementptr inbounds %struct.nesting* %3, i64 0, i32 2
  %bf.load250.pre = load i32* %.phi.trans.insert786, align 8
  %bf.clear244 = and i32 %bf.load250.pre, 255
  %cmp245 = icmp eq i32 %bf.clear244, 25
  %or.cond799 = or i1 %cmp238, %cmp245
  br i1 %or.cond799, label %if.then247, label %if.else289

if.then247:                                       ; preds = %if.end235
  %bf.clear251 = and i32 %bf.load250.pre, 255
  %cmp252 = icmp eq i32 %bf.clear251, 25
  br i1 %cmp252, label %if.end265, label %if.then254

if.then254:                                       ; preds = %if.then247
  %rtwint = getelementptr inbounds %struct.rtx_def* %index.1, i64 0, i32 1, i64 0, i32 0
  %75 = load i64* %rtwint, align 8, !tbaa !144
  %tobool256 = icmp eq i32 %bf.clear, 0
  %phitmp657 = icmp slt i64 %75, 0
  %phitmp657. = and i1 %tobool256, %phitmp657
  %conv262 = sext i1 %phitmp657. to i64
  %call263 = call %union.tree_node* @build_int_2_wide(i64 %75, i64 %conv262) #6
  %call264 = call %union.tree_node* @convert(%union.tree_node* %6, %union.tree_node* %call263) #6
  br label %if.end265

if.end265:                                        ; preds = %if.then247, %if.then254
  %index_expr.0 = phi %union.tree_node* [ %call264, %if.then254 ], [ %4, %if.then247 ]
  %76 = load %struct.rtx_def** %case_list, align 8
  %tobool270745 = icmp eq %struct.rtx_def* %76, null
  br i1 %tobool270745, label %if.else287, label %for.body271.lr.ph

for.body271.lr.ph:                                ; preds = %if.end265
  %77 = bitcast %struct.rtx_def* %76 to %struct.case_node*
  br label %for.body271

for.body271:                                      ; preds = %for.inc281, %for.body271.lr.ph
  %n.1746 = phi %struct.case_node* [ %77, %for.body271.lr.ph ], [ %80, %for.inc281 ]
  %low272 = getelementptr inbounds %struct.case_node* %n.1746, i64 0, i32 3
  %78 = load %union.tree_node** %low272, align 8, !tbaa !135
  %call273 = call i32 @tree_int_cst_lt(%union.tree_node* %index_expr.0, %union.tree_node* %78) #6
  %tobool274 = icmp eq i32 %call273, 0
  br i1 %tobool274, label %land.lhs.true275, label %for.inc281

land.lhs.true275:                                 ; preds = %for.body271
  %high276 = getelementptr inbounds %struct.case_node* %n.1746, i64 0, i32 4
  %79 = load %union.tree_node** %high276, align 8, !tbaa !137
  %call277 = call i32 @tree_int_cst_lt(%union.tree_node* %79, %union.tree_node* %index_expr.0) #6
  %tobool278 = icmp eq i32 %call277, 0
  br i1 %tobool278, label %if.then285, label %for.inc281

for.inc281:                                       ; preds = %land.lhs.true275, %for.body271
  %right282 = getelementptr inbounds %struct.case_node* %n.1746, i64 0, i32 1
  %80 = load %struct.case_node** %right282, align 8, !tbaa !142
  %tobool270 = icmp eq %struct.case_node* %80, null
  br i1 %tobool270, label %if.else287, label %for.body271

if.then285:                                       ; preds = %land.lhs.true275
  %code_label = getelementptr inbounds %struct.case_node* %n.1746, i64 0, i32 5
  %81 = load %union.tree_node** %code_label, align 8, !tbaa !138
  %code.i666 = getelementptr inbounds %union.tree_node* %81, i64 0, i32 0, i32 0, i32 2
  %bf.load.i667 = load i32* %code.i666, align 8
  %bf.clear.i668 = and i32 %bf.load.i667, 255
  %cmp.i669 = icmp eq i32 %bf.clear.i668, 31
  br i1 %cmp.i669, label %if.end.i673, label %if.then.i670

if.then.i670:                                     ; preds = %if.then285
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i673:                                      ; preds = %if.then285
  %rtl.i671 = getelementptr inbounds %union.tree_node* %81, i64 0, i32 0, i32 17
  %82 = load %struct.rtx_def** %rtl.i671, align 8, !tbaa !59
  %cmp1.i672 = icmp eq %struct.rtx_def* %82, null
  br i1 %cmp1.i672, label %if.end5.i676, label %label_rtx.exit679

if.end5.i676:                                     ; preds = %if.end.i673
  %call.i674 = call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i674, %struct.rtx_def** %rtl.i671, align 8, !tbaa !59
  %tobool.i675 = icmp eq %struct.rtx_def* %call.i674, null
  br i1 %tobool.i675, label %cond.false.i677, label %label_rtx.exit679

cond.false.i677:                                  ; preds = %if.end5.i676
  call void @make_decl_rtl(%union.tree_node* %81, i8* null) #6
  %83 = load %struct.rtx_def** %rtl.i671, align 8, !tbaa !59
  br label %label_rtx.exit679

label_rtx.exit679:                                ; preds = %if.end.i673, %if.end5.i676, %cond.false.i677
  %cond.i678 = phi %struct.rtx_def* [ %83, %cond.false.i677 ], [ %call.i674, %if.end5.i676 ], [ %82, %if.end.i673 ]
  call void @do_pending_stack_adjust() #6
  %call.i680 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %cond.i678) #6
  %call1.i681 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i680) #6
  %call2.i682 = call %struct.rtx_def* @emit_barrier() #6
  br label %if.end415

if.else287:                                       ; preds = %for.inc281, %if.end265
  call void @do_pending_stack_adjust() #6
  %call.i683 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %cond.i) #6
  %call1.i684 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i683) #6
  %call2.i685 = call %struct.rtx_def* @emit_barrier() #6
  br label %if.end415

if.else289:                                       ; preds = %if.end235
  %code291 = getelementptr inbounds %union.tree_node* %orig_type.addr.0, i64 0, i32 0, i32 0, i32 2
  %bf.load292 = load i32* %code291, align 8
  %bf.clear293 = and i32 %bf.load292, 255
  %cmp294 = icmp eq i32 %bf.clear293, 10
  br i1 %cmp294, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.else289
  %84 = load %struct.rtx_def** %case_list, align 8
  %85 = bitcast %struct.rtx_def* %84 to %struct.case_node*
  %86 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !tbaa !17
  %high.i686 = getelementptr inbounds %struct.rtx_def* %84, i64 2
  %87 = bitcast %struct.rtx_def* %high.i686 to %union.tree_node**
  %88 = load %union.tree_node** %87, align 8, !tbaa !137
  %type.i687 = getelementptr inbounds %union.tree_node* %88, i64 0, i32 0, i32 0, i32 1
  %89 = load %union.tree_node** %type.i687, align 8, !tbaa !76
  %call.i688 = call %union.tree_node* @build_int_2_wide(i64 127, i64 0) #6
  %call1.i689 = call %union.tree_node* @convert(%union.tree_node* %89, %union.tree_node* %call.i688) #6
  %.b.i = load i1* @cost_table_initialized, align 1
  br i1 %.b.i, label %for.body33.lr.ph.i, label %if.then.i690

if.then.i690:                                     ; preds = %land.rhs
  store i1 true, i1* @cost_table_initialized, align 1
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %if.then.i690
  %indvars.iv149.i = phi i64 [ 0, %if.then.i690 ], [ %indvars.iv.next150.pre-phi.i, %for.inc.i ]
  %idxprom140.i = and i64 %indvars.iv149.i, 4294967295
  %arrayidx.i691 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom140.i
  %90 = load i16* %arrayidx.i691, align 2, !tbaa !84
  %conv.i = zext i16 %90 to i32
  %and2.i = and i32 %conv.i, 140
  %tobool3.i = icmp eq i32 %and2.i, 0
  br i1 %tobool3.i, label %if.else.i, label %if.then4.i

if.then4.i:                                       ; preds = %for.body.i
  %91 = add nsw i64 %indvars.iv149.i, 1
  %arrayidx6.i = getelementptr inbounds [129 x i16]* @cost_table_, i64 0, i64 %91
  store i16 16, i16* %arrayidx6.i, align 2, !tbaa !84
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body.i
  %and11.i = and i32 %conv.i, 32
  %tobool12.i692 = icmp eq i32 %and11.i, 0
  br i1 %tobool12.i692, label %if.else17.i, label %if.then13.i

if.then13.i:                                      ; preds = %if.else.i
  %92 = add nsw i64 %indvars.iv149.i, 1
  %arrayidx16.i = getelementptr inbounds [129 x i16]* @cost_table_, i64 0, i64 %92
  store i16 8, i16* %arrayidx16.i, align 2, !tbaa !84
  br label %for.inc.i

if.else17.i:                                      ; preds = %if.else.i
  %and22.i = and i32 %conv.i, 2
  %tobool23.i = icmp eq i32 %and22.i, 0
  %indvars.iv.next150.pre.i = add nsw i64 %indvars.iv149.i, 1
  br i1 %tobool23.i, label %for.inc.i, label %if.then24.i

if.then24.i:                                      ; preds = %if.else17.i
  %arrayidx27.i = getelementptr inbounds [129 x i16]* @cost_table_, i64 0, i64 %indvars.iv.next150.pre.i
  store i16 -1, i16* %arrayidx27.i, align 2, !tbaa !84
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then24.i, %if.else17.i, %if.then13.i, %if.then4.i
  %indvars.iv.next150.pre-phi.i = phi i64 [ %91, %if.then4.i ], [ %indvars.iv.next150.pre.i, %if.then24.i ], [ %92, %if.then13.i ], [ %indvars.iv.next150.pre.i, %if.else17.i ]
  %exitcond.i = icmp eq i64 %indvars.iv.next150.pre-phi.i, 128
  br i1 %exitcond.i, label %for.cond31.preheader.i, label %for.body.i

for.cond31.preheader.i:                           ; preds = %for.inc.i
  store i16 8, i16* getelementptr inbounds ([129 x i16]* @cost_table_, i64 0, i64 33), align 2, !tbaa !84
  store i16 4, i16* getelementptr inbounds ([129 x i16]* @cost_table_, i64 0, i64 10), align 4, !tbaa !84
  store i16 4, i16* getelementptr inbounds ([129 x i16]* @cost_table_, i64 0, i64 1), align 2, !tbaa !84
  store i16 2, i16* getelementptr inbounds ([129 x i16]* @cost_table_, i64 0, i64 11), align 2, !tbaa !84
  store i16 1, i16* getelementptr inbounds ([129 x i16]* @cost_table_, i64 0, i64 13), align 2, !tbaa !84
  store i16 1, i16* getelementptr inbounds ([129 x i16]* @cost_table_, i64 0, i64 12), align 8, !tbaa !84
  store i16 1, i16* getelementptr inbounds ([129 x i16]* @cost_table_, i64 0, i64 9), align 2, !tbaa !84
  %tobool32142.i = icmp eq %struct.rtx_def* %84, null
  br i1 %tobool32142.i, label %land.end, label %for.body33.lr.ph.i

for.body33.lr.ph.i:                               ; preds = %for.cond31.preheader.i, %land.rhs
  %int_cst37.i = getelementptr inbounds %union.tree_node* %86, i64 0, i32 0, i32 2
  %high38.i = getelementptr inbounds i32* %int_cst37.i, i64 2
  %93 = bitcast i32* %high38.i to i64*
  %94 = load i64* %93, align 8, !tbaa !148
  %low56.i = bitcast i32* %int_cst37.i to i64*
  %int_cst61.i = getelementptr inbounds %union.tree_node* %call1.i689, i64 0, i32 0, i32 2
  %high62.i = getelementptr inbounds i32* %int_cst61.i, i64 2
  %95 = bitcast i32* %high62.i to i64*
  %low82.i = bitcast i32* %int_cst61.i to i64*
  br label %for.body33.i

for.body33.i:                                     ; preds = %for.inc116.i, %for.body33.lr.ph.i
  %n.0143.i = phi %struct.case_node* [ %85, %for.body33.lr.ph.i ], [ %111, %for.inc116.i ]
  %low.i693 = getelementptr inbounds %struct.case_node* %n.0143.i, i64 0, i32 3
  %96 = load %union.tree_node** %low.i693, align 8, !tbaa !135
  %int_cst34.i = getelementptr inbounds %union.tree_node* %96, i64 0, i32 0, i32 2
  %high35.i = getelementptr inbounds i32* %int_cst34.i, i64 2
  %97 = bitcast i32* %high35.i to i64*
  %98 = load i64* %97, align 8, !tbaa !148
  %cmp39.i = icmp slt i64 %98, %94
  br i1 %cmp39.i, label %land.end, label %lor.lhs.false.i694

lor.lhs.false.i694:                               ; preds = %for.body33.i
  %cmp48.i = icmp eq i64 %98, %94
  br i1 %cmp48.i, label %land.lhs.true.i695, label %lor.lhs.false59.i

land.lhs.true.i695:                               ; preds = %lor.lhs.false.i694
  %low53.i = bitcast i32* %int_cst34.i to i64*
  %99 = load i64* %low53.i, align 8, !tbaa !145
  %100 = load i64* %low56.i, align 8, !tbaa !145
  %cmp57.i = icmp ult i64 %99, %100
  br i1 %cmp57.i, label %land.end, label %lor.lhs.false59.i

lor.lhs.false59.i:                                ; preds = %land.lhs.true.i695, %lor.lhs.false.i694
  %101 = load i64* %95, align 8, !tbaa !148
  %high63.i = getelementptr inbounds %struct.case_node* %n.0143.i, i64 0, i32 4
  %102 = load %union.tree_node** %high63.i, align 8, !tbaa !137
  %int_cst65.i = getelementptr inbounds %union.tree_node* %102, i64 0, i32 0, i32 2
  %high66.i = getelementptr inbounds i32* %int_cst65.i, i64 2
  %103 = bitcast i32* %high66.i to i64*
  %104 = load i64* %103, align 8, !tbaa !148
  %cmp67.i = icmp slt i64 %101, %104
  br i1 %cmp67.i, label %land.end, label %lor.lhs.false69.i

lor.lhs.false69.i:                                ; preds = %lor.lhs.false59.i
  %cmp77.i = icmp eq i64 %101, %104
  br i1 %cmp77.i, label %land.lhs.true79.i, label %lor.lhs.false69.if.end90_crit_edge.i

lor.lhs.false69.if.end90_crit_edge.i:             ; preds = %lor.lhs.false69.i
  %low101.phi.trans.insert.i = bitcast i32* %int_cst65.i to i64*
  %.pre.i = load i64* %low101.phi.trans.insert.i, align 8, !tbaa !145
  br label %if.end90.i

land.lhs.true79.i:                                ; preds = %lor.lhs.false69.i
  %105 = load i64* %low82.i, align 8, !tbaa !145
  %low86.i = bitcast i32* %int_cst65.i to i64*
  %106 = load i64* %low86.i, align 8, !tbaa !145
  %cmp87.i696 = icmp ult i64 %105, %106
  br i1 %cmp87.i696, label %land.end, label %if.end90.i

if.end90.i:                                       ; preds = %land.lhs.true79.i, %lor.lhs.false69.if.end90_crit_edge.i
  %107 = phi i64 [ %.pre.i, %lor.lhs.false69.if.end90_crit_edge.i ], [ %106, %land.lhs.true79.i ]
  %low94.i = bitcast i32* %int_cst34.i to i64*
  %108 = load i64* %low94.i, align 8, !tbaa !145
  %sext.i = shl i64 %108, 32
  %109 = ashr exact i64 %sext.i, 32
  br label %for.cond96.i

for.cond96.i:                                     ; preds = %for.body104.i, %if.end90.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body104.i ], [ %109, %if.end90.i ]
  %cmp102.i = icmp sgt i64 %indvars.iv.i, %107
  br i1 %cmp102.i, label %for.inc116.i, label %for.body104.i

for.body104.i:                                    ; preds = %for.cond96.i
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, 1
  %arrayidx107.i = getelementptr inbounds [129 x i16]* @cost_table_, i64 0, i64 %indvars.iv.next.i
  %110 = load i16* %arrayidx107.i, align 2, !tbaa !84
  %cmp109.i = icmp slt i16 %110, 0
  br i1 %cmp109.i, label %land.end, label %for.cond96.i

for.inc116.i:                                     ; preds = %for.cond96.i
  %right.i697 = getelementptr inbounds %struct.case_node* %n.0143.i, i64 0, i32 1
  %111 = load %struct.case_node** %right.i697, align 8, !tbaa !142
  %tobool32.i = icmp eq %struct.case_node* %111, null
  br i1 %tobool32.i, label %land.end, label %for.body33.i

land.end:                                         ; preds = %for.inc116.i, %land.lhs.true79.i, %lor.lhs.false59.i, %land.lhs.true.i695, %for.body33.i, %for.body104.i, %for.cond31.preheader.i, %if.else289
  %112 = phi i32 [ 0, %if.else289 ], [ 1, %for.cond31.preheader.i ], [ 0, %for.body104.i ], [ 1, %for.inc116.i ], [ 0, %land.lhs.true79.i ], [ 0, %lor.lhs.false59.i ], [ 0, %land.lhs.true.i695 ], [ 0, %for.body33.i ]
  store i32 %112, i32* @use_cost_table, align 4, !tbaa !58
  call fastcc void @balance_case_nodes(%struct.case_node** %18, %struct.case_node* null)
  %113 = load %struct.rtx_def** %case_list, align 8
  %114 = bitcast %struct.rtx_def* %113 to %struct.case_node*
  call fastcc void @emit_case_nodes(%struct.rtx_def* %index.1, %struct.case_node* %114, %struct.rtx_def* %cond.i, %union.tree_node* %6)
  %call.i698 = call %struct.rtx_def* @get_last_insn() #6
  %115 = getelementptr inbounds %struct.rtx_def* %call.i698, i64 0, i32 0
  %bf.load.i699 = load i32* %115, align 8
  %bf.clear.i700 = and i32 %bf.load.i699, 65535
  %cmp.i701 = icmp eq i32 %bf.clear.i700, 35
  br i1 %cmp.i701, label %if.end415, label %if.then.i703

if.then.i703:                                     ; preds = %land.end
  call void @do_pending_stack_adjust() #6
  %call.i.i702 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %cond.i) #6
  %call1.i.i = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i.i702) #6
  %call2.i.i = call %struct.rtx_def* @emit_barrier() #6
  br label %if.end415

if.else308:                                       ; preds = %lor.lhs.false174, %land.lhs.true188
  %call309 = call i32 @try_casesi(%union.tree_node* %6, %union.tree_node* %4, %union.tree_node* %minval.0.lcssa794, %union.tree_node* %range.0, %struct.rtx_def* %call, %struct.rtx_def* %cond.i) #6
  %tobool310 = icmp eq i32 %call309, 0
  br i1 %tobool310, label %if.then311, label %if.end329

if.then311:                                       ; preds = %if.else308
  %116 = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4, i32 0, i32 4
  %117 = load %union.tree_node** %116, align 8, !tbaa !39
  %118 = load i32* @optimize_size, align 4, !tbaa !58
  %tobool314 = icmp eq i32 %118, 0
  br i1 %tobool314, label %land.lhs.true315, label %if.end324

land.lhs.true315:                                 ; preds = %if.then311
  %call316 = call i32 @compare_tree_int(%union.tree_node* %minval.0.lcssa794, i64 0) #6
  %cmp317 = icmp sgt i32 %call316, 0
  br i1 %cmp317, label %land.lhs.true319, label %if.end324

land.lhs.true319:                                 ; preds = %land.lhs.true315
  %call320 = call i32 @compare_tree_int(%union.tree_node* %minval.0.lcssa794, i64 3) #6
  %cmp321 = icmp slt i32 %call320, 0
  %119 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !17
  %maxval.0.range.0 = select i1 %cmp321, %union.tree_node* %maxval.0.lcssa795, %union.tree_node* %range.0
  %.minval.0 = select i1 %cmp321, %union.tree_node* %119, %union.tree_node* %minval.0.lcssa794
  br label %if.end324

if.end324:                                        ; preds = %land.lhs.true319, %if.then311, %land.lhs.true315
  %range.1 = phi %union.tree_node* [ %range.0, %if.then311 ], [ %range.0, %land.lhs.true315 ], [ %maxval.0.range.0, %land.lhs.true319 ]
  %minval.3 = phi %union.tree_node* [ %minval.0.lcssa794, %if.then311 ], [ %minval.0.lcssa794, %land.lhs.true315 ], [ %.minval.0, %land.lhs.true319 ]
  %call325 = call i32 @try_tablejump(%union.tree_node* %117, %union.tree_node* %4, %union.tree_node* %minval.3, %union.tree_node* %range.1, %struct.rtx_def* %call, %struct.rtx_def* %cond.i) #6
  %tobool326 = icmp eq i32 %call325, 0
  br i1 %tobool326, label %if.then327, label %if.end329

if.then327:                                       ; preds = %if.end324
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 5490, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.expand_end_case_type, i64 0, i64 0)) #7
  unreachable

if.end329:                                        ; preds = %if.end324, %if.else308
  %index_type.0 = phi %union.tree_node* [ %6, %if.else308 ], [ %117, %if.end324 ]
  %range.2 = phi %union.tree_node* [ %range.0, %if.else308 ], [ %range.1, %if.end324 ]
  %minval.4 = phi %union.tree_node* [ %minval.0.lcssa794, %if.else308 ], [ %minval.3, %if.end324 ]
  %call330 = call i64 @tree_low_cst(%union.tree_node* %range.2, i32 0) #6
  %add = add nsw i64 %call330, 1
  %conv331 = trunc i64 %add to i32
  %sext = shl i64 %add, 32
  %mul333 = ashr exact i64 %sext, 29
  %120 = alloca i8, i64 %mul333, align 1
  %121 = bitcast i8* %120 to %struct.rtx_def**
  call void @llvm.memset.p0i8.i64(i8* %120, i8 0, i64 %mul333, i32 1, i1 false)
  %122 = load %struct.rtx_def** %case_list, align 8
  %tobool340754 = icmp eq %struct.rtx_def* %122, null
  br i1 %tobool340754, label %for.cond367.preheader, label %for.body341.lr.ph

for.body341.lr.ph:                                ; preds = %if.end329
  %123 = bitcast %struct.rtx_def* %122 to %struct.case_node*
  br label %for.body341

for.cond367.preheader:                            ; preds = %for.inc364, %if.end329
  %cmp368750 = icmp sgt i32 %conv331, 0
  br i1 %cmp368750, label %for.body370.lr.ph, label %for.end385

for.body370.lr.ph:                                ; preds = %for.cond367.preheader
  %124 = trunc i64 %call330 to i32
  %125 = add i32 %124, 1
  br label %for.body370

for.body341:                                      ; preds = %for.body341.lr.ph, %for.inc364
  %n.2755 = phi %struct.case_node* [ %123, %for.body341.lr.ph ], [ %134, %for.inc364 ]
  %low342 = getelementptr inbounds %struct.case_node* %n.2755, i64 0, i32 3
  %126 = load %union.tree_node** %low342, align 8, !tbaa !135
  %call343 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %index_type.0, %union.tree_node* %126, %union.tree_node* %minval.4) #6
  %call344 = call %union.tree_node* @fold(%union.tree_node* %call343) #6
  %call345 = call i64 @tree_low_cst(%union.tree_node* %call344, i32 1) #6
  %high346 = getelementptr inbounds %struct.case_node* %n.2755, i64 0, i32 4
  %127 = load %union.tree_node** %high346, align 8, !tbaa !137
  %call347 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %index_type.0, %union.tree_node* %127, %union.tree_node* %minval.4) #6
  %call348 = call %union.tree_node* @fold(%union.tree_node* %call347) #6
  %call349 = call i64 @tree_low_cst(%union.tree_node* %call348, i32 1) #6
  %cmp352752 = icmp sgt i64 %call345, %call349
  br i1 %cmp352752, label %for.inc364, label %for.body354.lr.ph

for.body354.lr.ph:                                ; preds = %for.body341
  %code_label357 = getelementptr inbounds %struct.case_node* %n.2755, i64 0, i32 5
  br label %for.body354

for.body354:                                      ; preds = %label_rtx.exit718, %for.body354.lr.ph
  %i350.0753 = phi i64 [ %call345, %for.body354.lr.ph ], [ %inc362, %label_rtx.exit718 ]
  %128 = load i32* @target_flags, align 4, !tbaa !58
  %and = lshr i32 %128, 25
  %129 = and i32 %and, 1
  %130 = or i32 %129, 4
  %131 = load %union.tree_node** %code_label357, align 8, !tbaa !138
  %code.i705 = getelementptr inbounds %union.tree_node* %131, i64 0, i32 0, i32 0, i32 2
  %bf.load.i706 = load i32* %code.i705, align 8
  %bf.clear.i707 = and i32 %bf.load.i706, 255
  %cmp.i708 = icmp eq i32 %bf.clear.i707, 31
  br i1 %cmp.i708, label %if.end.i712, label %if.then.i709

if.then.i709:                                     ; preds = %for.body354
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i712:                                      ; preds = %for.body354
  %rtl.i710 = getelementptr inbounds %union.tree_node* %131, i64 0, i32 0, i32 17
  %132 = load %struct.rtx_def** %rtl.i710, align 8, !tbaa !59
  %cmp1.i711 = icmp eq %struct.rtx_def* %132, null
  br i1 %cmp1.i711, label %if.end5.i715, label %label_rtx.exit718

if.end5.i715:                                     ; preds = %if.end.i712
  %call.i713 = call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i713, %struct.rtx_def** %rtl.i710, align 8, !tbaa !59
  %tobool.i714 = icmp eq %struct.rtx_def* %call.i713, null
  br i1 %tobool.i714, label %cond.false.i716, label %label_rtx.exit718

cond.false.i716:                                  ; preds = %if.end5.i715
  call void @make_decl_rtl(%union.tree_node* %131, i8* null) #6
  %133 = load %struct.rtx_def** %rtl.i710, align 8, !tbaa !59
  br label %label_rtx.exit718

label_rtx.exit718:                                ; preds = %if.end.i712, %if.end5.i715, %cond.false.i716
  %cond.i717 = phi %struct.rtx_def* [ %133, %cond.false.i716 ], [ %call.i713, %if.end5.i715 ], [ %132, %if.end.i712 ]
  %call359 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %130, %struct.rtx_def* %cond.i717) #6
  %arrayidx360 = getelementptr inbounds %struct.rtx_def** %121, i64 %i350.0753
  store %struct.rtx_def* %call359, %struct.rtx_def** %arrayidx360, align 8, !tbaa !17
  %inc362 = add nsw i64 %i350.0753, 1
  %cmp352 = icmp slt i64 %i350.0753, %call349
  br i1 %cmp352, label %for.body354, label %for.inc364

for.inc364:                                       ; preds = %label_rtx.exit718, %for.body341
  %right365 = getelementptr inbounds %struct.case_node* %n.2755, i64 0, i32 1
  %134 = load %struct.case_node** %right365, align 8, !tbaa !142
  %tobool340 = icmp eq %struct.case_node* %134, null
  br i1 %tobool340, label %for.cond367.preheader, label %for.body341

for.body370:                                      ; preds = %for.inc383, %for.body370.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body370.lr.ph ], [ %indvars.iv.next, %for.inc383 ]
  %arrayidx372 = getelementptr inbounds %struct.rtx_def** %121, i64 %indvars.iv
  %135 = load %struct.rtx_def** %arrayidx372, align 8, !tbaa !17
  %cmp373 = icmp eq %struct.rtx_def* %135, null
  br i1 %cmp373, label %if.then375, label %for.inc383

if.then375:                                       ; preds = %for.body370
  %136 = load i32* @target_flags, align 4, !tbaa !58
  %and376 = lshr i32 %136, 25
  %137 = and i32 %and376, 1
  %138 = or i32 %137, 4
  %call379 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %138, %struct.rtx_def* %cond.i) #6
  store %struct.rtx_def* %call379, %struct.rtx_def** %arrayidx372, align 8, !tbaa !17
  br label %for.inc383

for.inc383:                                       ; preds = %for.body370, %if.then375
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %125
  br i1 %exitcond, label %for.end385, label %for.body370

for.end385:                                       ; preds = %for.inc383, %for.cond367.preheader
  %call386 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %call) #6
  %139 = load i32* @flag_pic, align 4, !tbaa !58
  %tobool387 = icmp eq i32 %139, 0
  %140 = load i32* @target_flags, align 4, !tbaa !58
  %and389 = lshr i32 %140, 25
  %141 = and i32 %and389, 1
  %142 = or i32 %141, 4
  br i1 %tobool387, label %if.else402, label %lor.end393

lor.end393:                                       ; preds = %for.end385
  %call398 = call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %142, %struct.rtx_def* %call) #6
  %call399 = call %struct.rtvec_def* @gen_rtvec_v(i32 %conv331, %struct.rtx_def** %121) #6
  %143 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !17
  %call400 = call %struct.rtx_def* @gen_rtx_fmt_eEee0(i32 45, i32 4, %struct.rtx_def* %call398, %struct.rtvec_def* %call399, %struct.rtx_def* %143, %struct.rtx_def* %143) #6
  %call401 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call400) #6
  br label %if.end412

if.else402:                                       ; preds = %for.end385
  %call409 = call %struct.rtvec_def* @gen_rtvec_v(i32 %conv331, %struct.rtx_def** %121) #6
  %call410 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 44, i32 %142, %struct.rtvec_def* %call409) #6
  %call411 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call410) #6
  br label %if.end412

if.end412:                                        ; preds = %if.else402, %lor.end393
  %call413 = call %struct.rtx_def* @emit_barrier() #6
  br label %if.end415

if.end415:                                        ; preds = %if.then.i703, %land.end, %if.end412, %label_rtx.exit679, %if.else287, %if.then161
  %144 = load %struct.rtx_def** %before_case, align 8, !tbaa !17
  %arrayidx417 = getelementptr inbounds %struct.rtx_def* %144, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx417 to %struct.rtx_def**
  %145 = load %struct.rtx_def** %rtx, align 8, !tbaa !17
  store %struct.rtx_def* %145, %struct.rtx_def** %before_case, align 8, !tbaa !17
  %call418 = call %struct.rtx_def* @get_last_insn() #6
  store %struct.rtx_def* %call418, %struct.rtx_def** %end, align 8, !tbaa !17
  %call419 = call zeroext i1 @squeeze_notes(%struct.rtx_def** %before_case, %struct.rtx_def** %end) #6
  br i1 %call419, label %if.then420, label %if.end421

if.then420:                                       ; preds = %if.end415
  call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 5547, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.expand_end_case_type, i64 0, i64 0)) #7
  unreachable

if.end421:                                        ; preds = %if.end415
  %146 = load %struct.rtx_def** %before_case, align 8, !tbaa !17
  %147 = load %struct.rtx_def** %end, align 8, !tbaa !17
  %start = bitcast %union.anon.3* %data to %struct.rtx_def**
  %148 = load %struct.rtx_def** %start, align 8, !tbaa !37
  call void @reorder_insns(%struct.rtx_def* %146, %struct.rtx_def* %147, %struct.rtx_def* %148) #6
  br label %if.end425

if.else424:                                       ; preds = %if.end7
  %149 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt.i719 = getelementptr inbounds %struct.function* %149, i64 0, i32 1
  %150 = load %struct.stmt_status** %stmt.i719, align 8, !tbaa !1
  %x_block_stack.i720 = getelementptr inbounds %struct.stmt_status* %150, i64 0, i32 0
  %151 = load %struct.nesting** %x_block_stack.i720, align 8, !tbaa !9
  %tobool.i721 = icmp eq %struct.nesting* %151, null
  br i1 %tobool.i721, label %if.end425, label %if.then.i724

if.then.i724:                                     ; preds = %if.else424
  %conditional_code.i722 = getelementptr inbounds %struct.nesting* %151, i64 0, i32 4, i32 0, i32 10
  %152 = load i32* %conditional_code.i722, align 4, !tbaa !104
  %dec.i723 = add nsw i32 %152, -1
  store i32 %dec.i723, i32* %conditional_code.i722, align 4, !tbaa !104
  br label %if.end425

if.end425:                                        ; preds = %if.then.i724, %if.else424, %if.end421
  %exit_label = getelementptr inbounds %struct.nesting* %2, i64 0, i32 3
  %153 = load %struct.rtx_def** %exit_label, align 8, !tbaa !11
  %tobool426 = icmp eq %struct.rtx_def* %153, null
  br i1 %tobool426, label %if.end430, label %if.then427

if.then427:                                       ; preds = %if.end425
  %call429 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %153) #6
  br label %if.end430

if.end430:                                        ; preds = %if.end425, %if.then427
  %154 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt431 = getelementptr inbounds %struct.function* %154, i64 0, i32 1
  %155 = load %struct.stmt_status** %stmt431, align 8, !tbaa !1
  %x_case_stack432 = getelementptr inbounds %struct.stmt_status* %155, i64 0, i32 4
  %156 = load %struct.nesting** %x_case_stack432, align 8, !tbaa !36
  %case_list435 = getelementptr inbounds %struct.nesting* %156, i64 0, i32 4, i32 0, i32 1
  %157 = load %struct.rtx_def** %case_list435, align 8
  %158 = bitcast %struct.rtx_def* %157 to %struct.case_node*
  call fastcc void @free_case_nodes(%struct.case_node* %158)
  %159 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt436 = getelementptr inbounds %struct.function* %159, i64 0, i32 1
  %160 = load %struct.stmt_status** %stmt436, align 8, !tbaa !1
  %x_case_stack437 = getelementptr inbounds %struct.stmt_status* %160, i64 0, i32 4
  %161 = load %struct.nesting** %x_case_stack437, align 8, !tbaa !36
  br label %do.body438

do.body438:                                       ; preds = %do.cond.do.body438_crit_edge, %if.end430
  %162 = phi %struct.stmt_status* [ %.pre772, %do.cond.do.body438_crit_edge ], [ %160, %if.end430 ]
  %x_nesting_stack = getelementptr inbounds %struct.stmt_status* %162, i64 0, i32 5
  %163 = load %struct.nesting** %x_nesting_stack, align 8, !tbaa !52
  %x_loop_stack = getelementptr inbounds %struct.stmt_status* %162, i64 0, i32 3
  %164 = load %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %cmp441 = icmp eq %struct.nesting* %164, %163
  br i1 %cmp441, label %if.then443, label %if.end448

if.then443:                                       ; preds = %do.body438
  %next = getelementptr inbounds %struct.nesting* %163, i64 0, i32 1
  %165 = load %struct.nesting** %next, align 8, !tbaa !26
  store %struct.nesting* %165, %struct.nesting** %x_loop_stack, align 8, !tbaa !31
  %.pre773 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt449.phi.trans.insert = getelementptr inbounds %struct.function* %.pre773, i64 0, i32 1
  %.pre774 = load %struct.stmt_status** %stmt449.phi.trans.insert, align 8, !tbaa !1
  br label %if.end448

if.end448:                                        ; preds = %if.then443, %do.body438
  %166 = phi %struct.stmt_status* [ %.pre774, %if.then443 ], [ %162, %do.body438 ]
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %166, i64 0, i32 2
  %167 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %cmp450 = icmp eq %struct.nesting* %167, %163
  br i1 %cmp450, label %if.then452, label %if.end458

if.then452:                                       ; preds = %if.end448
  %next455 = getelementptr inbounds %struct.nesting* %163, i64 0, i32 1
  %168 = load %struct.nesting** %next455, align 8, !tbaa !26
  store %struct.nesting* %168, %struct.nesting** %x_cond_stack, align 8, !tbaa !27
  %.pre775 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt459.phi.trans.insert = getelementptr inbounds %struct.function* %.pre775, i64 0, i32 1
  %.pre776 = load %struct.stmt_status** %stmt459.phi.trans.insert, align 8, !tbaa !1
  br label %if.end458

if.end458:                                        ; preds = %if.then452, %if.end448
  %169 = phi %struct.stmt_status* [ %.pre776, %if.then452 ], [ %166, %if.end448 ]
  %x_block_stack = getelementptr inbounds %struct.stmt_status* %169, i64 0, i32 0
  %170 = load %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %cmp460 = icmp eq %struct.nesting* %170, %163
  br i1 %cmp460, label %if.then462, label %if.end468

if.then462:                                       ; preds = %if.end458
  %next465 = getelementptr inbounds %struct.nesting* %163, i64 0, i32 1
  %171 = load %struct.nesting** %next465, align 8, !tbaa !26
  store %struct.nesting* %171, %struct.nesting** %x_block_stack, align 8, !tbaa !9
  %.pre777 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt469.phi.trans.insert = getelementptr inbounds %struct.function* %.pre777, i64 0, i32 1
  %.pre778 = load %struct.stmt_status** %stmt469.phi.trans.insert, align 8, !tbaa !1
  br label %if.end468

if.end468:                                        ; preds = %if.then462, %if.end458
  %172 = phi %struct.stmt_status* [ %.pre778, %if.then462 ], [ %169, %if.end458 ]
  %x_stack_block_stack = getelementptr inbounds %struct.stmt_status* %172, i64 0, i32 1
  %173 = load %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %cmp470 = icmp eq %struct.nesting* %173, %163
  br i1 %cmp470, label %if.then472, label %if.end478

if.then472:                                       ; preds = %if.end468
  %next475 = getelementptr inbounds %struct.nesting* %163, i64 0, i32 1
  %174 = load %struct.nesting** %next475, align 8, !tbaa !26
  store %struct.nesting* %174, %struct.nesting** %x_stack_block_stack, align 8, !tbaa !51
  %.pre779 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt479.phi.trans.insert = getelementptr inbounds %struct.function* %.pre779, i64 0, i32 1
  %.pre780 = load %struct.stmt_status** %stmt479.phi.trans.insert, align 8, !tbaa !1
  br label %if.end478

if.end478:                                        ; preds = %if.then472, %if.end468
  %175 = phi %struct.stmt_status* [ %.pre780, %if.then472 ], [ %172, %if.end468 ]
  %x_case_stack480 = getelementptr inbounds %struct.stmt_status* %175, i64 0, i32 4
  %176 = load %struct.nesting** %x_case_stack480, align 8, !tbaa !36
  %cmp481 = icmp eq %struct.nesting* %176, %163
  br i1 %cmp481, label %if.then483, label %if.end489

if.then483:                                       ; preds = %if.end478
  %next486 = getelementptr inbounds %struct.nesting* %163, i64 0, i32 1
  %177 = load %struct.nesting** %next486, align 8, !tbaa !26
  store %struct.nesting* %177, %struct.nesting** %x_case_stack480, align 8, !tbaa !36
  %.pre781 = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt490.phi.trans.insert = getelementptr inbounds %struct.function* %.pre781, i64 0, i32 1
  %.pre782 = load %struct.stmt_status** %stmt490.phi.trans.insert, align 8, !tbaa !1
  br label %if.end489

if.end489:                                        ; preds = %if.then483, %if.end478
  %178 = phi %struct.stmt_status* [ %.pre782, %if.then483 ], [ %175, %if.end478 ]
  %x_nesting_stack491 = getelementptr inbounds %struct.stmt_status* %178, i64 0, i32 5
  %179 = load %struct.nesting** %x_nesting_stack491, align 8, !tbaa !52
  %depth = getelementptr inbounds %struct.nesting* %179, i64 0, i32 2
  %180 = load i32* %depth, align 4, !tbaa !100
  %sub = add nsw i32 %180, -1
  %x_nesting_depth = getelementptr inbounds %struct.stmt_status* %178, i64 0, i32 6
  store i32 %sub, i32* %x_nesting_depth, align 4, !tbaa !53
  %all = getelementptr inbounds %struct.nesting* %163, i64 0, i32 0
  %181 = load %struct.nesting** %all, align 8, !tbaa !77
  store %struct.nesting* %181, %struct.nesting** %x_nesting_stack491, align 8, !tbaa !52
  %182 = bitcast %struct.nesting* %163 to i8*
  %183 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 1), align 8, !tbaa !99
  %184 = bitcast %struct._obstack_chunk* %183 to %struct.nesting*
  %cmp495 = icmp ugt %struct.nesting* %163, %184
  %185 = load i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 4), align 8
  %cmp498 = icmp ult i8* %182, %185
  %or.cond = and i1 %cmp495, %cmp498
  br i1 %or.cond, label %if.then500, label %if.else501

if.then500:                                       ; preds = %if.end489
  store i8* %182, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 2), align 8, !tbaa !97
  store i8* %182, i8** getelementptr inbounds (%struct.obstack* @stmt_obstack, i64 0, i32 3), align 8, !tbaa !96
  br label %do.cond

if.else501:                                       ; preds = %if.end489
  call void @obstack_free(%struct.obstack* @stmt_obstack, i8* %182) #6
  br label %do.cond

do.cond:                                          ; preds = %if.then500, %if.else501
  %cmp503 = icmp eq %struct.nesting* %163, %161
  br i1 %cmp503, label %do.end506, label %do.cond.do.body438_crit_edge

do.cond.do.body438_crit_edge:                     ; preds = %do.cond
  %.pre = load %struct.function** @cfun, align 8, !tbaa !17
  %stmt439.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 1
  %.pre772 = load %struct.stmt_status** %stmt439.phi.trans.insert, align 8, !tbaa !1
  br label %do.body438

do.end506:                                        ; preds = %do.cond
  call void @free_temp_slots() #6
  br label %return

return:                                           ; preds = %entry, %do.end506
  ret void
}

declare i32 @case_values_threshold() #2

declare i32 @have_insn_for(i32, i32) #2

declare %struct.rtx_def* @convert_to_mode(i32, %struct.rtx_def*, i32) #2

declare %union.tree_node* @build_int_2_wide(i64, i64) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @balance_case_nodes(%struct.case_node** nocapture %head, %struct.case_node* %parent) #0 {
entry:
  %0 = load %struct.case_node** %head, align 8, !tbaa !17
  %tobool198 = icmp eq %struct.case_node* %0, null
  br i1 %tobool198, label %if.end110, label %while.cond.preheader

while.cond.preheader:                             ; preds = %entry, %if.end93
  %1 = phi %struct.case_node* [ %34, %if.end93 ], [ %0, %entry ]
  %parent.tr201 = phi %struct.case_node* [ %33, %if.end93 ], [ %parent, %entry ]
  %head.tr199 = phi %struct.case_node** [ %right97, %if.end93 ], [ %head, %entry ]
  %tobool1181 = icmp eq %struct.case_node* %1, null
  br i1 %tobool1181, label %if.else98, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %if.end21
  %np.0185 = phi %struct.case_node* [ %11, %if.end21 ], [ %1, %while.cond.preheader ]
  %ranges.0184 = phi i32 [ %ranges.1165, %if.end21 ], [ 0, %while.cond.preheader ]
  %i.0183 = phi i32 [ %inc22, %if.end21 ], [ 0, %while.cond.preheader ]
  %cost.0182 = phi i32 [ %cost.2, %if.end21 ], [ 0, %while.cond.preheader ]
  %low = getelementptr inbounds %struct.case_node* %np.0185, i64 0, i32 3
  %2 = load %union.tree_node** %low, align 8, !tbaa !135
  %high = getelementptr inbounds %struct.case_node* %np.0185, i64 0, i32 4
  %3 = load %union.tree_node** %high, align 8, !tbaa !137
  %call = tail call i32 @tree_int_cst_equal(%union.tree_node* %2, %union.tree_node* %3) #6
  %tobool2 = icmp eq i32 %call, 0
  br i1 %tobool2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %while.body
  %inc = add nsw i32 %ranges.0184, 1
  %4 = load i32* @use_cost_table, align 4, !tbaa !58
  %tobool4 = icmp eq i32 %4, 0
  br i1 %tobool4, label %if.end21, label %if.end10.thread

if.end10.thread:                                  ; preds = %if.then3
  %5 = load %union.tree_node** %high, align 8, !tbaa !137
  %int_cst7 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 2
  %low8 = bitcast i32* %int_cst7 to i64*
  %6 = load i64* %low8, align 8, !tbaa !145
  %add = add i64 %6, 1
  %arrayidx = getelementptr inbounds [129 x i16]* @cost_table_, i64 0, i64 %add
  %7 = load i16* %arrayidx, align 2, !tbaa !84
  %conv = sext i16 %7 to i32
  %add9 = add nsw i32 %conv, %cost.0182
  br label %if.then12

if.end10:                                         ; preds = %while.body
  %.pr.pre = load i32* @use_cost_table, align 4, !tbaa !58
  %tobool11 = icmp eq i32 %.pr.pre, 0
  br i1 %tobool11, label %if.end21, label %if.then12

if.then12:                                        ; preds = %if.end10.thread, %if.end10
  %ranges.1.ph214 = phi i32 [ %inc, %if.end10.thread ], [ %ranges.0184, %if.end10 ]
  %cost.1.ph213 = phi i32 [ %add9, %if.end10.thread ], [ %cost.0182, %if.end10 ]
  %8 = load %union.tree_node** %low, align 8, !tbaa !135
  %int_cst15 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 2
  %low16 = bitcast i32* %int_cst15 to i64*
  %9 = load i64* %low16, align 8, !tbaa !145
  %add17 = add i64 %9, 1
  %arrayidx18 = getelementptr inbounds [129 x i16]* @cost_table_, i64 0, i64 %add17
  %10 = load i16* %arrayidx18, align 2, !tbaa !84
  %conv19 = sext i16 %10 to i32
  %add20 = add nsw i32 %conv19, %cost.1.ph213
  br label %if.end21

if.end21:                                         ; preds = %if.then3, %if.end10, %if.then12
  %ranges.1165 = phi i32 [ %ranges.1.ph214, %if.then12 ], [ %ranges.0184, %if.end10 ], [ %inc, %if.then3 ]
  %cost.2 = phi i32 [ %add20, %if.then12 ], [ %cost.0182, %if.end10 ], [ %cost.0182, %if.then3 ]
  %inc22 = add nsw i32 %i.0183, 1
  %right = getelementptr inbounds %struct.case_node* %np.0185, i64 0, i32 1
  %11 = load %struct.case_node** %right, align 8, !tbaa !142
  %tobool1 = icmp eq %struct.case_node* %11, null
  br i1 %tobool1, label %while.end, label %while.body

while.end:                                        ; preds = %if.end21
  %.pre = load %struct.case_node** %head.tr199, align 8, !tbaa !17
  %cmp = icmp sgt i32 %i.0183, 1
  br i1 %cmp, label %if.then24, label %if.else98

if.then24:                                        ; preds = %while.end
  %12 = load i32* @use_cost_table, align 4, !tbaa !58
  %tobool25 = icmp eq i32 %12, 0
  br i1 %tobool25, label %if.else, label %if.then26

if.then26:                                        ; preds = %if.then24
  %add27 = add nsw i32 %cost.2, 1
  %div = sdiv i32 %add27, 2
  br label %while.body29

while.body29:                                     ; preds = %if.then26, %if.end54
  %13 = phi %struct.case_node* [ %.pre, %if.then26 ], [ %.pre209, %if.end54 ]
  %i.1 = phi i32 [ %div, %if.then26 ], [ %sub50, %if.end54 ]
  %npp.0 = phi %struct.case_node** [ %head.tr199, %if.then26 ], [ %right55, %if.end54 ]
  %n_moved.0 = phi i32 [ 0, %if.then26 ], [ %add56, %if.end54 ]
  %low30 = getelementptr inbounds %struct.case_node* %13, i64 0, i32 3
  %14 = load %union.tree_node** %low30, align 8, !tbaa !135
  %high31 = getelementptr inbounds %struct.case_node* %13, i64 0, i32 4
  %15 = load %union.tree_node** %high31, align 8, !tbaa !137
  %call32 = tail call i32 @tree_int_cst_equal(%union.tree_node* %14, %union.tree_node* %15) #6
  %tobool33 = icmp eq i32 %call32, 0
  %16 = load %struct.case_node** %npp.0, align 8, !tbaa !17
  br i1 %tobool33, label %if.then34, label %if.end42

if.then34:                                        ; preds = %while.body29
  %high35 = getelementptr inbounds %struct.case_node* %16, i64 0, i32 4
  %17 = load %union.tree_node** %high35, align 8, !tbaa !137
  %int_cst37 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 2
  %low38 = bitcast i32* %int_cst37 to i64*
  %18 = load i64* %low38, align 8, !tbaa !145
  %add39 = add i64 %18, 1
  %arrayidx40 = getelementptr inbounds [129 x i16]* @cost_table_, i64 0, i64 %add39
  %19 = load i16* %arrayidx40, align 2, !tbaa !84
  %conv41 = sext i16 %19 to i32
  %sub = sub nsw i32 %i.1, %conv41
  br label %if.end42

if.end42:                                         ; preds = %while.body29, %if.then34
  %i.2 = phi i32 [ %sub, %if.then34 ], [ %i.1, %while.body29 ]
  %low43 = getelementptr inbounds %struct.case_node* %16, i64 0, i32 3
  %20 = load %union.tree_node** %low43, align 8, !tbaa !135
  %int_cst45 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 2
  %low46 = bitcast i32* %int_cst45 to i64*
  %21 = load i64* %low46, align 8, !tbaa !145
  %add47 = add i64 %21, 1
  %arrayidx48 = getelementptr inbounds [129 x i16]* @cost_table_, i64 0, i64 %add47
  %22 = load i16* %arrayidx48, align 2, !tbaa !84
  %conv49 = sext i16 %22 to i32
  %sub50 = sub nsw i32 %i.2, %conv49
  %cmp51 = icmp slt i32 %sub50, 1
  br i1 %cmp51, label %while.end57, label %if.end54

if.end54:                                         ; preds = %if.end42
  %right55 = getelementptr inbounds %struct.case_node* %16, i64 0, i32 1
  %add56 = add nsw i32 %n_moved.0, 1
  %.pre209 = load %struct.case_node** %right55, align 8, !tbaa !17
  br label %while.body29

while.end57:                                      ; preds = %if.end42
  %cmp58 = icmp eq i32 %n_moved.0, 0
  br i1 %cmp58, label %if.then60, label %if.end93

if.then60:                                        ; preds = %while.end57
  %23 = load %struct.case_node** %head.tr199, align 8, !tbaa !17
  %parent61 = getelementptr inbounds %struct.case_node* %23, i64 0, i32 2
  store %struct.case_node* %parent.tr201, %struct.case_node** %parent61, align 8, !tbaa !139
  %left62 = getelementptr inbounds %struct.case_node* %23, i64 0, i32 0
  tail call fastcc void @balance_case_nodes(%struct.case_node** %left62, %struct.case_node* %23)
  %right63173 = getelementptr inbounds %struct.case_node* %23, i64 0, i32 1
  %24 = load %struct.case_node** %right63173, align 8, !tbaa !142
  %tobool64174 = icmp eq %struct.case_node* %24, null
  br i1 %tobool64174, label %if.end110, label %for.body

for.body:                                         ; preds = %if.then60, %for.body
  %25 = phi %struct.case_node* [ %26, %for.body ], [ %24, %if.then60 ]
  %np.1175 = phi %struct.case_node* [ %25, %for.body ], [ %23, %if.then60 ]
  %parent66 = getelementptr inbounds %struct.case_node* %25, i64 0, i32 2
  store %struct.case_node* %np.1175, %struct.case_node** %parent66, align 8, !tbaa !139
  %right63 = getelementptr inbounds %struct.case_node* %25, i64 0, i32 1
  %26 = load %struct.case_node** %right63, align 8, !tbaa !142
  %tobool64 = icmp eq %struct.case_node* %26, null
  br i1 %tobool64, label %if.end110, label %for.body

if.else:                                          ; preds = %if.then24
  %cmp69 = icmp eq i32 %inc22, 3
  br i1 %cmp69, label %if.then71, label %if.else73

if.then71:                                        ; preds = %if.else
  %right72 = getelementptr inbounds %struct.case_node* %.pre, i64 0, i32 1
  br label %if.end93

if.else73:                                        ; preds = %if.else
  %add74 = add i32 %i.0183, 2
  %add75 = add i32 %add74, %ranges.1165
  %div76 = sdiv i32 %add75, 2
  %low79188 = getelementptr inbounds %struct.case_node* %.pre, i64 0, i32 3
  %27 = load %union.tree_node** %low79188, align 8, !tbaa !135
  %high80189 = getelementptr inbounds %struct.case_node* %.pre, i64 0, i32 4
  %28 = load %union.tree_node** %high80189, align 8, !tbaa !137
  %call81190 = tail call i32 @tree_int_cst_equal(%union.tree_node* %27, %union.tree_node* %28) #6
  %tobool82191 = icmp eq i32 %call81190, 0
  %dec192 = sext i1 %tobool82191 to i32
  %dec.i.3193 = add nsw i32 %dec192, %div76
  %cmp86194 = icmp slt i32 %dec.i.3193, 2
  br i1 %cmp86194, label %if.end93, label %if.end89

if.end89:                                         ; preds = %if.else73, %if.end89
  %dec.i.3196 = phi i32 [ %dec.i.3, %if.end89 ], [ %dec.i.3193, %if.else73 ]
  %npp.1195 = phi %struct.case_node** [ %right90, %if.end89 ], [ %head.tr199, %if.else73 ]
  %dec85 = add nsw i32 %dec.i.3196, -1
  %29 = load %struct.case_node** %npp.1195, align 8, !tbaa !17
  %right90 = getelementptr inbounds %struct.case_node* %29, i64 0, i32 1
  %30 = load %struct.case_node** %right90, align 8, !tbaa !17
  %low79 = getelementptr inbounds %struct.case_node* %30, i64 0, i32 3
  %31 = load %union.tree_node** %low79, align 8, !tbaa !135
  %high80 = getelementptr inbounds %struct.case_node* %30, i64 0, i32 4
  %32 = load %union.tree_node** %high80, align 8, !tbaa !137
  %call81 = tail call i32 @tree_int_cst_equal(%union.tree_node* %31, %union.tree_node* %32) #6
  %tobool82 = icmp eq i32 %call81, 0
  %dec = sext i1 %tobool82 to i32
  %dec.i.3 = add nsw i32 %dec, %dec85
  %cmp86 = icmp slt i32 %dec.i.3, 2
  br i1 %cmp86, label %if.end93, label %if.end89

if.end93:                                         ; preds = %if.end89, %if.else73, %if.then71, %while.end57
  %npp.2 = phi %struct.case_node** [ %npp.0, %while.end57 ], [ %right72, %if.then71 ], [ %head.tr199, %if.else73 ], [ %right90, %if.end89 ]
  %33 = load %struct.case_node** %npp.2, align 8, !tbaa !17
  store %struct.case_node* %33, %struct.case_node** %head.tr199, align 8, !tbaa !17
  store %struct.case_node* null, %struct.case_node** %npp.2, align 8, !tbaa !17
  %parent94 = getelementptr inbounds %struct.case_node* %33, i64 0, i32 2
  store %struct.case_node* %parent.tr201, %struct.case_node** %parent94, align 8, !tbaa !139
  %left95 = getelementptr inbounds %struct.case_node* %33, i64 0, i32 0
  store %struct.case_node* %.pre, %struct.case_node** %left95, align 8, !tbaa !141
  tail call fastcc void @balance_case_nodes(%struct.case_node** %left95, %struct.case_node* %33)
  %right97 = getelementptr inbounds %struct.case_node* %33, i64 0, i32 1
  %34 = load %struct.case_node** %right97, align 8, !tbaa !17
  %tobool = icmp eq %struct.case_node* %34, null
  br i1 %tobool, label %if.end110, label %while.cond.preheader

if.else98:                                        ; preds = %while.cond.preheader, %while.end
  %35 = phi %struct.case_node* [ %.pre, %while.end ], [ null, %while.cond.preheader ]
  %parent99 = getelementptr inbounds %struct.case_node* %35, i64 0, i32 2
  store %struct.case_node* %parent.tr201, %struct.case_node** %parent99, align 8, !tbaa !139
  %right101177 = getelementptr inbounds %struct.case_node* %35, i64 0, i32 1
  %36 = load %struct.case_node** %right101177, align 8, !tbaa !142
  %tobool102178 = icmp eq %struct.case_node* %36, null
  br i1 %tobool102178, label %if.end110, label %for.body103

for.body103:                                      ; preds = %if.else98, %for.body103
  %37 = phi %struct.case_node* [ %38, %for.body103 ], [ %36, %if.else98 ]
  %np.2179 = phi %struct.case_node* [ %37, %for.body103 ], [ %35, %if.else98 ]
  %parent105 = getelementptr inbounds %struct.case_node* %37, i64 0, i32 2
  store %struct.case_node* %np.2179, %struct.case_node** %parent105, align 8, !tbaa !139
  %right101 = getelementptr inbounds %struct.case_node* %37, i64 0, i32 1
  %38 = load %struct.case_node** %right101, align 8, !tbaa !142
  %tobool102 = icmp eq %struct.case_node* %38, null
  br i1 %tobool102, label %if.end110, label %for.body103

if.end110:                                        ; preds = %if.end93, %for.body, %for.body103, %entry, %if.else98, %if.then60
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @emit_case_nodes(%struct.rtx_def* %index, %struct.case_node* %node, %struct.rtx_def* %default_label, %union.tree_node* %index_type) #0 {
entry:
  %unsigned_flag = getelementptr inbounds %union.tree_node* %index_type, i64 0, i32 0, i32 0, i32 2
  %0 = getelementptr inbounds %struct.rtx_def* %index, i64 0, i32 0
  %type = bitcast %union.tree_node* %index_type to %struct.tree_type*
  %mode4 = getelementptr inbounds %struct.tree_type* %type, i64 0, i32 6
  %index_type.idx.i = getelementptr %union.tree_node* %index_type, i64 0, i32 0, i32 12
  %index_type.idx490 = getelementptr %union.tree_node* %index_type, i64 0, i32 0, i32 13
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %index, i64 0, i32 1, i64 0, i32 0
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.backedge, %entry
  %node.tr = phi %struct.case_node* [ %node, %entry ], [ %node.tr.be, %tailrecurse.backedge ]
  %bf.load = load i32* %unsigned_flag, align 8
  %bf.lshr = lshr i32 %bf.load, 13
  %bf.clear = and i32 %bf.lshr, 1
  %bf.load1 = load i32* %0, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  %bf.load5 = load i32* %mode4, align 4
  %bf.lshr6 = lshr i32 %bf.load5, 9
  %bf.clear7 = and i32 %bf.lshr6, 127
  %index_type.idx.val.i = load %union.tree_node** %index_type.idx.i, align 8, !tbaa !143
  %call.i = tail call fastcc i32 @node_has_low_bound(%struct.case_node* %node.tr, %union.tree_node* %index_type.idx.val.i) #6
  %tobool.i = icmp eq i32 %call.i, 0
  br i1 %tobool.i, label %if.else, label %land.rhs.i

land.rhs.i:                                       ; preds = %tailrecurse
  %index_type.idx5.val.i = load %union.tree_node** %index_type.idx490, align 8, !tbaa !127
  %call1.i = tail call fastcc i32 @node_has_high_bound(%struct.case_node* %node.tr, %union.tree_node* %index_type.idx5.val.i) #6
  %tobool2.i = icmp eq i32 %call1.i, 0
  br i1 %tobool2.i, label %if.else, label %if.then

if.then:                                          ; preds = %land.rhs.i
  %code_label = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 5
  %1 = load %union.tree_node** %code_label, align 8, !tbaa !138
  %code.i = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i = icmp eq i32 %bf.clear.i, 31
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i:                                         ; preds = %if.then
  %rtl.i = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 17
  %2 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  %cmp1.i = icmp eq %struct.rtx_def* %2, null
  br i1 %cmp1.i, label %if.end5.i, label %label_rtx.exit

if.end5.i:                                        ; preds = %if.end.i
  %call.i492 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i492, %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  %tobool.i493 = icmp eq %struct.rtx_def* %call.i492, null
  br i1 %tobool.i493, label %cond.false.i, label %label_rtx.exit

cond.false.i:                                     ; preds = %if.end5.i
  tail call void @make_decl_rtl(%union.tree_node* %1, i8* null) #6
  %3 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !59
  br label %label_rtx.exit

label_rtx.exit:                                   ; preds = %if.end.i, %if.end5.i, %cond.false.i
  %cond.i = phi %struct.rtx_def* [ %3, %cond.false.i ], [ %call.i492, %if.end5.i ], [ %2, %if.end.i ]
  tail call void @do_pending_stack_adjust() #6
  %call.i494 = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %cond.i) #6
  %call1.i495 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i494) #6
  %call2.i = tail call %struct.rtx_def* @emit_barrier() #6
  br label %if.end251

if.else:                                          ; preds = %land.rhs.i, %tailrecurse
  %low = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 3
  %4 = load %union.tree_node** %low, align 8, !tbaa !135
  %high = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 4
  %5 = load %union.tree_node** %high, align 8, !tbaa !137
  %call9 = tail call i32 @tree_int_cst_equal(%union.tree_node* %4, %union.tree_node* %5) #6
  %tobool10 = icmp eq i32 %call9, 0
  br i1 %tobool10, label %if.else131, label %if.then11

if.then11:                                        ; preds = %if.else
  %6 = load %union.tree_node** %low, align 8, !tbaa !135
  %call13 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %6, %struct.rtx_def* null, i32 0, i32 0) #6
  %call14 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call13, i32 %bf.clear) #6
  %code_label15 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 5
  %7 = load %union.tree_node** %code_label15, align 8, !tbaa !138
  %code.i496 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load.i497 = load i32* %code.i496, align 8
  %bf.clear.i498 = and i32 %bf.load.i497, 255
  %cmp.i499 = icmp eq i32 %bf.clear.i498, 31
  br i1 %cmp.i499, label %if.end.i503, label %if.then.i500

if.then.i500:                                     ; preds = %if.then11
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i503:                                      ; preds = %if.then11
  %rtl.i501 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 17
  %8 = load %struct.rtx_def** %rtl.i501, align 8, !tbaa !59
  %cmp1.i502 = icmp eq %struct.rtx_def* %8, null
  br i1 %cmp1.i502, label %if.end5.i506, label %label_rtx.exit509

if.end5.i506:                                     ; preds = %if.end.i503
  %call.i504 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i504, %struct.rtx_def** %rtl.i501, align 8, !tbaa !59
  %tobool.i505 = icmp eq %struct.rtx_def* %call.i504, null
  br i1 %tobool.i505, label %cond.false.i507, label %label_rtx.exit509

cond.false.i507:                                  ; preds = %if.end5.i506
  tail call void @make_decl_rtl(%union.tree_node* %7, i8* null) #6
  %9 = load %struct.rtx_def** %rtl.i501, align 8, !tbaa !59
  br label %label_rtx.exit509

label_rtx.exit509:                                ; preds = %if.end.i503, %if.end5.i506, %cond.false.i507
  %cond.i508 = phi %struct.rtx_def* [ %9, %cond.false.i507 ], [ %call.i504, %if.end5.i506 ], [ %8, %if.end.i503 ]
  %bf.load.i510 = load i32* %0, align 8
  %bf.clear.i511 = and i32 %bf.load.i510, 65535
  %cmp.i512 = icmp eq i32 %bf.clear.i511, 54
  br i1 %cmp.i512, label %land.lhs.true.i, label %if.else.i

land.lhs.true.i:                                  ; preds = %label_rtx.exit509
  %10 = getelementptr inbounds %struct.rtx_def* %call14, i64 0, i32 0
  %bf.load1.i = load i32* %10, align 8
  %bf.clear2.i = and i32 %bf.load1.i, 65535
  %cmp3.i = icmp eq i32 %bf.clear2.i, 54
  br i1 %cmp3.i, label %if.then.i513, label %if.else.i

if.then.i513:                                     ; preds = %land.lhs.true.i
  %11 = load i64* %rtwint.i, align 8, !tbaa !144
  %rtwint6.i = getelementptr inbounds %struct.rtx_def* %call14, i64 0, i32 1, i64 0, i32 0
  %12 = load i64* %rtwint6.i, align 8, !tbaa !144
  %cmp7.i = icmp eq i64 %11, %12
  br i1 %cmp7.i, label %if.then8.i, label %do_jump_if_equal.exit

if.then8.i:                                       ; preds = %if.then.i513
  tail call void @do_pending_stack_adjust() #6
  %call.i.i = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %cond.i508) #6
  %call1.i.i = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i.i) #6
  %call2.i.i = tail call %struct.rtx_def* @emit_barrier() #6
  br label %do_jump_if_equal.exit

if.else.i:                                        ; preds = %land.lhs.true.i, %label_rtx.exit509
  %bf.clear10.i = and i32 %bf.load.i510, 16711680
  %cmp11.i = icmp eq i32 %bf.clear10.i, 0
  br i1 %cmp11.i, label %cond.true.i, label %cond.end.i

cond.true.i:                                      ; preds = %if.else.i
  %13 = getelementptr inbounds %struct.rtx_def* %call14, i64 0, i32 0
  %bf.load12.i = load i32* %13, align 8
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %if.else.i
  %bf.load12.sink.i = phi i32 [ %bf.load12.i, %cond.true.i ], [ %bf.load.i510, %if.else.i ]
  %bf.lshr13.i = lshr i32 %bf.load12.sink.i, 16
  %bf.clear14.i = and i32 %bf.lshr13.i, 255
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call14, i32 103, %struct.rtx_def* null, i32 %bf.clear14.i, i32 %bf.clear, %struct.rtx_def* %cond.i508) #6
  br label %do_jump_if_equal.exit

do_jump_if_equal.exit:                            ; preds = %if.then.i513, %if.then8.i, %cond.end.i
  %right = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 1
  %14 = load %struct.case_node** %right, align 8, !tbaa !142
  %cmp = icmp eq %struct.case_node* %14, null
  %left93.phi.trans.insert = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 0
  %.pre979 = load %struct.case_node** %left93.phi.trans.insert, align 8, !tbaa !141
  br i1 %cmp, label %land.lhs.true92, label %land.lhs.true

land.lhs.true:                                    ; preds = %do_jump_if_equal.exit
  %cmp17 = icmp eq %struct.case_node* %.pre979, null
  br i1 %cmp17, label %if.then57, label %if.then18

if.then18:                                        ; preds = %land.lhs.true
  %index_type.idx.val.i515 = load %union.tree_node** %index_type.idx.i, align 8, !tbaa !143
  %call.i516 = tail call fastcc i32 @node_has_low_bound(%struct.case_node* %14, %union.tree_node* %index_type.idx.val.i515) #6
  %tobool.i517 = icmp eq i32 %call.i516, 0
  br i1 %tobool.i517, label %if.else30, label %land.rhs.i522

land.rhs.i522:                                    ; preds = %if.then18
  %index_type.idx5.val.i519 = load %union.tree_node** %index_type.idx490, align 8, !tbaa !127
  %call1.i520 = tail call fastcc i32 @node_has_high_bound(%struct.case_node* %14, %union.tree_node* %index_type.idx5.val.i519) #6
  %tobool2.i521 = icmp eq i32 %call1.i520, 0
  br i1 %tobool2.i521, label %if.else30, label %if.then22

if.then22:                                        ; preds = %land.rhs.i522
  %15 = load %union.tree_node** %high, align 8, !tbaa !137
  %call24 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %15, %struct.rtx_def* null, i32 0, i32 0) #6
  %call25 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call24, i32 %bf.clear) #6
  %16 = load %struct.case_node** %right, align 8, !tbaa !142
  %code_label27 = getelementptr inbounds %struct.case_node* %16, i64 0, i32 5
  %17 = load %union.tree_node** %code_label27, align 8, !tbaa !138
  %code.i525 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 2
  %bf.load.i526 = load i32* %code.i525, align 8
  %bf.clear.i527 = and i32 %bf.load.i526, 255
  %cmp.i528 = icmp eq i32 %bf.clear.i527, 31
  br i1 %cmp.i528, label %if.end.i532, label %if.then.i529

if.then.i529:                                     ; preds = %if.then22
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i532:                                      ; preds = %if.then22
  %rtl.i530 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 17
  %18 = load %struct.rtx_def** %rtl.i530, align 8, !tbaa !59
  %cmp1.i531 = icmp eq %struct.rtx_def* %18, null
  br i1 %cmp1.i531, label %if.end5.i535, label %label_rtx.exit539

if.end5.i535:                                     ; preds = %if.end.i532
  %call.i533 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i533, %struct.rtx_def** %rtl.i530, align 8, !tbaa !59
  %tobool.i534 = icmp eq %struct.rtx_def* %call.i533, null
  br i1 %tobool.i534, label %cond.false.i536, label %label_rtx.exit539

cond.false.i536:                                  ; preds = %if.end5.i535
  tail call void @make_decl_rtl(%union.tree_node* %17, i8* null) #6
  %19 = load %struct.rtx_def** %rtl.i530, align 8, !tbaa !59
  br label %label_rtx.exit539

label_rtx.exit539:                                ; preds = %if.end.i532, %if.end5.i535, %cond.false.i536
  %cond.i537 = phi %struct.rtx_def* [ %19, %cond.false.i536 ], [ %call.i533, %if.end5.i535 ], [ %18, %if.end.i532 ]
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call25, i32 105, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %cond.i537) #6
  br label %tailrecurse.backedge

if.else30:                                        ; preds = %land.rhs.i522, %if.then18
  %20 = load %struct.case_node** %left93.phi.trans.insert, align 8, !tbaa !141
  %index_type.idx.val.i544 = load %union.tree_node** %index_type.idx.i, align 8, !tbaa !143
  %call.i545 = tail call fastcc i32 @node_has_low_bound(%struct.case_node* %20, %union.tree_node* %index_type.idx.val.i544) #6
  %tobool.i546 = icmp eq i32 %call.i545, 0
  br i1 %tobool.i546, label %if.else42, label %land.rhs.i551

land.rhs.i551:                                    ; preds = %if.else30
  %index_type.idx5.val.i548 = load %union.tree_node** %index_type.idx490, align 8, !tbaa !127
  %call1.i549 = tail call fastcc i32 @node_has_high_bound(%struct.case_node* %20, %union.tree_node* %index_type.idx5.val.i548) #6
  %tobool2.i550 = icmp eq i32 %call1.i549, 0
  br i1 %tobool2.i550, label %if.else42, label %if.then34

if.then34:                                        ; preds = %land.rhs.i551
  %21 = load %union.tree_node** %high, align 8, !tbaa !137
  %call36 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %21, %struct.rtx_def* null, i32 0, i32 0) #6
  %call37 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call36, i32 %bf.clear) #6
  %22 = load %struct.case_node** %left93.phi.trans.insert, align 8, !tbaa !141
  %code_label39 = getelementptr inbounds %struct.case_node* %22, i64 0, i32 5
  %23 = load %union.tree_node** %code_label39, align 8, !tbaa !138
  %code.i554 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 2
  %bf.load.i555 = load i32* %code.i554, align 8
  %bf.clear.i556 = and i32 %bf.load.i555, 255
  %cmp.i557 = icmp eq i32 %bf.clear.i556, 31
  br i1 %cmp.i557, label %if.end.i561, label %if.then.i558

if.then.i558:                                     ; preds = %if.then34
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i561:                                      ; preds = %if.then34
  %rtl.i559 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 17
  %24 = load %struct.rtx_def** %rtl.i559, align 8, !tbaa !59
  %cmp1.i560 = icmp eq %struct.rtx_def* %24, null
  br i1 %cmp1.i560, label %if.end5.i564, label %label_rtx.exit568

if.end5.i564:                                     ; preds = %if.end.i561
  %call.i562 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i562, %struct.rtx_def** %rtl.i559, align 8, !tbaa !59
  %tobool.i563 = icmp eq %struct.rtx_def* %call.i562, null
  br i1 %tobool.i563, label %cond.false.i565, label %label_rtx.exit568

cond.false.i565:                                  ; preds = %if.end5.i564
  tail call void @make_decl_rtl(%union.tree_node* %23, i8* null) #6
  %25 = load %struct.rtx_def** %rtl.i559, align 8, !tbaa !59
  br label %label_rtx.exit568

label_rtx.exit568:                                ; preds = %if.end.i561, %if.end5.i564, %cond.false.i565
  %cond.i566 = phi %struct.rtx_def* [ %25, %cond.false.i565 ], [ %call.i562, %if.end5.i564 ], [ %24, %if.end.i561 ]
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call37, i32 107, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %cond.i566) #6
  br label %tailrecurse.backedge

if.else42:                                        ; preds = %land.rhs.i551, %if.else30
  %call43 = tail call %union.tree_node* @build_decl(i32 31, %union.tree_node* null, %union.tree_node* null) #6
  %26 = load %union.tree_node** %high, align 8, !tbaa !137
  %call45 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %26, %struct.rtx_def* null, i32 0, i32 0) #6
  %call46 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call45, i32 %bf.clear) #6
  %code.i584 = getelementptr inbounds %union.tree_node* %call43, i64 0, i32 0, i32 0, i32 2
  %bf.load.i585 = load i32* %code.i584, align 8
  %bf.clear.i586 = and i32 %bf.load.i585, 255
  %cmp.i587 = icmp eq i32 %bf.clear.i586, 31
  br i1 %cmp.i587, label %if.end.i591, label %if.then.i588

if.then.i588:                                     ; preds = %if.else42
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i591:                                      ; preds = %if.else42
  %rtl.i589 = getelementptr inbounds %union.tree_node* %call43, i64 0, i32 0, i32 17
  %27 = load %struct.rtx_def** %rtl.i589, align 8, !tbaa !59
  %cmp1.i590 = icmp eq %struct.rtx_def* %27, null
  br i1 %cmp1.i590, label %if.end5.i594, label %label_rtx.exit598

if.end5.i594:                                     ; preds = %if.end.i591
  %call.i592 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i592, %struct.rtx_def** %rtl.i589, align 8, !tbaa !59
  %tobool.i593 = icmp eq %struct.rtx_def* %call.i592, null
  br i1 %tobool.i593, label %cond.false.i595, label %label_rtx.exit598

cond.false.i595:                                  ; preds = %if.end5.i594
  tail call void @make_decl_rtl(%union.tree_node* %call43, i8* null) #6
  %28 = load %struct.rtx_def** %rtl.i589, align 8, !tbaa !59
  br label %label_rtx.exit598

label_rtx.exit598:                                ; preds = %if.end.i591, %if.end5.i594, %cond.false.i595
  %cond.i596 = phi %struct.rtx_def* [ %28, %cond.false.i595 ], [ %call.i592, %if.end5.i594 ], [ %27, %if.end.i591 ]
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call46, i32 105, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %cond.i596) #6
  %29 = load %struct.case_node** %left93.phi.trans.insert, align 8, !tbaa !141
  tail call fastcc void @emit_case_nodes(%struct.rtx_def* %index, %struct.case_node* %29, %struct.rtx_def* %default_label, %union.tree_node* %index_type)
  %call.i599 = tail call %struct.rtx_def* @get_last_insn() #6
  %30 = getelementptr inbounds %struct.rtx_def* %call.i599, i64 0, i32 0
  %bf.load.i600 = load i32* %30, align 8
  %bf.clear.i601 = and i32 %bf.load.i600, 65535
  %cmp.i602 = icmp eq i32 %bf.clear.i601, 35
  br i1 %cmp.i602, label %emit_jump_if_reachable.exit, label %if.then.i606

if.then.i606:                                     ; preds = %label_rtx.exit598
  tail call void @do_pending_stack_adjust() #6
  %call.i.i603 = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %default_label) #6
  %call1.i.i604 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i.i603) #6
  %call2.i.i605 = tail call %struct.rtx_def* @emit_barrier() #6
  br label %emit_jump_if_reachable.exit

emit_jump_if_reachable.exit:                      ; preds = %label_rtx.exit598, %if.then.i606
  tail call void @expand_label(%union.tree_node* %call43)
  br label %tailrecurse.backedge

if.then57:                                        ; preds = %land.lhs.true
  %right59 = getelementptr inbounds %struct.case_node* %14, i64 0, i32 1
  %31 = load %struct.case_node** %right59, align 8, !tbaa !142
  %tobool60 = icmp eq %struct.case_node* %31, null
  br i1 %tobool60, label %lor.lhs.false, label %if.then71

lor.lhs.false:                                    ; preds = %if.then57
  %left62 = getelementptr inbounds %struct.case_node* %14, i64 0, i32 0
  %32 = load %struct.case_node** %left62, align 8, !tbaa !141
  %tobool63 = icmp eq %struct.case_node* %32, null
  br i1 %tobool63, label %lor.lhs.false64, label %if.then71

lor.lhs.false64:                                  ; preds = %lor.lhs.false
  %low66 = getelementptr inbounds %struct.case_node* %14, i64 0, i32 3
  %33 = load %union.tree_node** %low66, align 8, !tbaa !135
  %high68 = getelementptr inbounds %struct.case_node* %14, i64 0, i32 4
  %34 = load %union.tree_node** %high68, align 8, !tbaa !137
  %call69 = tail call i32 @tree_int_cst_equal(%union.tree_node* %33, %union.tree_node* %34) #6
  %tobool70 = icmp eq i32 %call69, 0
  br i1 %tobool70, label %if.then71, label %if.else80

if.then71:                                        ; preds = %lor.lhs.false64, %lor.lhs.false, %if.then57
  %index_type.idx488.val = load %union.tree_node** %index_type.idx.i, align 8, !tbaa !143
  %call72 = tail call fastcc i32 @node_has_low_bound(%struct.case_node* %node.tr, %union.tree_node* %index_type.idx488.val)
  %tobool73 = icmp eq i32 %call72, 0
  br i1 %tobool73, label %if.then74, label %tailrecurse.backedge

if.then74:                                        ; preds = %if.then71
  %35 = load %union.tree_node** %high, align 8, !tbaa !137
  %call76 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %35, %struct.rtx_def* null, i32 0, i32 0) #6
  %call77 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call76, i32 %bf.clear) #6
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call77, i32 107, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %default_label) #6
  br label %tailrecurse.backedge

if.else80:                                        ; preds = %lor.lhs.false64
  %36 = load %struct.case_node** %right, align 8, !tbaa !142
  %low82 = getelementptr inbounds %struct.case_node* %36, i64 0, i32 3
  %37 = load %union.tree_node** %low82, align 8, !tbaa !135
  %call83 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %37, %struct.rtx_def* null, i32 0, i32 0) #6
  %call84 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call83, i32 %bf.clear) #6
  %38 = load %struct.case_node** %right, align 8, !tbaa !142
  %code_label86 = getelementptr inbounds %struct.case_node* %38, i64 0, i32 5
  %39 = load %union.tree_node** %code_label86, align 8, !tbaa !138
  %code.i623 = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 0, i32 2
  %bf.load.i624 = load i32* %code.i623, align 8
  %bf.clear.i625 = and i32 %bf.load.i624, 255
  %cmp.i626 = icmp eq i32 %bf.clear.i625, 31
  br i1 %cmp.i626, label %if.end.i630, label %if.then.i627

if.then.i627:                                     ; preds = %if.else80
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i630:                                      ; preds = %if.else80
  %rtl.i628 = getelementptr inbounds %union.tree_node* %39, i64 0, i32 0, i32 17
  %40 = load %struct.rtx_def** %rtl.i628, align 8, !tbaa !59
  %cmp1.i629 = icmp eq %struct.rtx_def* %40, null
  br i1 %cmp1.i629, label %if.end5.i633, label %label_rtx.exit637

if.end5.i633:                                     ; preds = %if.end.i630
  %call.i631 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i631, %struct.rtx_def** %rtl.i628, align 8, !tbaa !59
  %tobool.i632 = icmp eq %struct.rtx_def* %call.i631, null
  br i1 %tobool.i632, label %cond.false.i634, label %label_rtx.exit637

cond.false.i634:                                  ; preds = %if.end5.i633
  tail call void @make_decl_rtl(%union.tree_node* %39, i8* null) #6
  %41 = load %struct.rtx_def** %rtl.i628, align 8, !tbaa !59
  br label %label_rtx.exit637

label_rtx.exit637:                                ; preds = %if.end.i630, %if.end5.i633, %cond.false.i634
  %cond.i635 = phi %struct.rtx_def* [ %41, %cond.false.i634 ], [ %call.i631, %if.end5.i633 ], [ %40, %if.end.i630 ]
  %bf.load.i638 = load i32* %0, align 8
  %bf.clear.i639 = and i32 %bf.load.i638, 65535
  %cmp.i640 = icmp eq i32 %bf.clear.i639, 54
  br i1 %cmp.i640, label %land.lhs.true.i644, label %if.else.i655

land.lhs.true.i644:                               ; preds = %label_rtx.exit637
  %42 = getelementptr inbounds %struct.rtx_def* %call84, i64 0, i32 0
  %bf.load1.i641 = load i32* %42, align 8
  %bf.clear2.i642 = and i32 %bf.load1.i641, 65535
  %cmp3.i643 = icmp eq i32 %bf.clear2.i642, 54
  br i1 %cmp3.i643, label %if.then.i648, label %if.else.i655

if.then.i648:                                     ; preds = %land.lhs.true.i644
  %43 = load i64* %rtwint.i, align 8, !tbaa !144
  %rtwint6.i646 = getelementptr inbounds %struct.rtx_def* %call84, i64 0, i32 1, i64 0, i32 0
  %44 = load i64* %rtwint6.i646, align 8, !tbaa !144
  %cmp7.i647 = icmp eq i64 %43, %44
  br i1 %cmp7.i647, label %if.then8.i652, label %if.end251

if.then8.i652:                                    ; preds = %if.then.i648
  tail call void @do_pending_stack_adjust() #6
  %call.i.i649 = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %cond.i635) #6
  %call1.i.i650 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i.i649) #6
  %call2.i.i651 = tail call %struct.rtx_def* @emit_barrier() #6
  br label %if.end251

if.else.i655:                                     ; preds = %land.lhs.true.i644, %label_rtx.exit637
  %bf.clear10.i653 = and i32 %bf.load.i638, 16711680
  %cmp11.i654 = icmp eq i32 %bf.clear10.i653, 0
  br i1 %cmp11.i654, label %cond.true.i657, label %cond.end.i661

cond.true.i657:                                   ; preds = %if.else.i655
  %45 = getelementptr inbounds %struct.rtx_def* %call84, i64 0, i32 0
  %bf.load12.i656 = load i32* %45, align 8
  br label %cond.end.i661

cond.end.i661:                                    ; preds = %cond.true.i657, %if.else.i655
  %bf.load12.sink.i658 = phi i32 [ %bf.load12.i656, %cond.true.i657 ], [ %bf.load.i638, %if.else.i655 ]
  %bf.lshr13.i659 = lshr i32 %bf.load12.sink.i658, 16
  %bf.clear14.i660 = and i32 %bf.lshr13.i659, 255
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call84, i32 103, %struct.rtx_def* null, i32 %bf.clear14.i660, i32 %bf.clear, %struct.rtx_def* %cond.i635) #6
  br label %if.end251

land.lhs.true92:                                  ; preds = %do_jump_if_equal.exit
  %left93 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 0
  %cmp94 = icmp eq %struct.case_node* %.pre979, null
  br i1 %cmp94, label %if.end251, label %if.then95

if.then95:                                        ; preds = %land.lhs.true92
  %left97 = getelementptr inbounds %struct.case_node* %.pre979, i64 0, i32 0
  %46 = load %struct.case_node** %left97, align 8, !tbaa !141
  %tobool98 = icmp eq %struct.case_node* %46, null
  br i1 %tobool98, label %lor.lhs.false99, label %if.then110

lor.lhs.false99:                                  ; preds = %if.then95
  %right101 = getelementptr inbounds %struct.case_node* %.pre979, i64 0, i32 1
  %47 = load %struct.case_node** %right101, align 8, !tbaa !142
  %tobool102 = icmp eq %struct.case_node* %47, null
  br i1 %tobool102, label %lor.lhs.false103, label %if.then110

lor.lhs.false103:                                 ; preds = %lor.lhs.false99
  %low105 = getelementptr inbounds %struct.case_node* %.pre979, i64 0, i32 3
  %48 = load %union.tree_node** %low105, align 8, !tbaa !135
  %high107 = getelementptr inbounds %struct.case_node* %.pre979, i64 0, i32 4
  %49 = load %union.tree_node** %high107, align 8, !tbaa !137
  %call108 = tail call i32 @tree_int_cst_equal(%union.tree_node* %48, %union.tree_node* %49) #6
  %tobool109 = icmp eq i32 %call108, 0
  br i1 %tobool109, label %if.then110, label %if.else119

if.then110:                                       ; preds = %lor.lhs.false103, %lor.lhs.false99, %if.then95
  %index_type.idx491.val = load %union.tree_node** %index_type.idx490, align 8, !tbaa !127
  %call111 = tail call fastcc i32 @node_has_high_bound(%struct.case_node* %node.tr, %union.tree_node* %index_type.idx491.val)
  %tobool112 = icmp eq i32 %call111, 0
  br i1 %tobool112, label %if.then113, label %tailrecurse.backedge

if.then113:                                       ; preds = %if.then110
  %50 = load %union.tree_node** %high, align 8, !tbaa !137
  %call115 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %50, %struct.rtx_def* null, i32 0, i32 0) #6
  %call116 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call115, i32 %bf.clear) #6
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call116, i32 105, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %default_label) #6
  br label %tailrecurse.backedge

if.else119:                                       ; preds = %lor.lhs.false103
  %51 = load %struct.case_node** %left93, align 8, !tbaa !141
  %low121 = getelementptr inbounds %struct.case_node* %51, i64 0, i32 3
  %52 = load %union.tree_node** %low121, align 8, !tbaa !135
  %call122 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %52, %struct.rtx_def* null, i32 0, i32 0) #6
  %call123 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call122, i32 %bf.clear) #6
  %53 = load %struct.case_node** %left93, align 8, !tbaa !141
  %code_label125 = getelementptr inbounds %struct.case_node* %53, i64 0, i32 5
  %54 = load %union.tree_node** %code_label125, align 8, !tbaa !138
  %code.i663 = getelementptr inbounds %union.tree_node* %54, i64 0, i32 0, i32 0, i32 2
  %bf.load.i664 = load i32* %code.i663, align 8
  %bf.clear.i665 = and i32 %bf.load.i664, 255
  %cmp.i666 = icmp eq i32 %bf.clear.i665, 31
  br i1 %cmp.i666, label %if.end.i670, label %if.then.i667

if.then.i667:                                     ; preds = %if.else119
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i670:                                      ; preds = %if.else119
  %rtl.i668 = getelementptr inbounds %union.tree_node* %54, i64 0, i32 0, i32 17
  %55 = load %struct.rtx_def** %rtl.i668, align 8, !tbaa !59
  %cmp1.i669 = icmp eq %struct.rtx_def* %55, null
  br i1 %cmp1.i669, label %if.end5.i673, label %label_rtx.exit677

if.end5.i673:                                     ; preds = %if.end.i670
  %call.i671 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i671, %struct.rtx_def** %rtl.i668, align 8, !tbaa !59
  %tobool.i672 = icmp eq %struct.rtx_def* %call.i671, null
  br i1 %tobool.i672, label %cond.false.i674, label %label_rtx.exit677

cond.false.i674:                                  ; preds = %if.end5.i673
  tail call void @make_decl_rtl(%union.tree_node* %54, i8* null) #6
  %56 = load %struct.rtx_def** %rtl.i668, align 8, !tbaa !59
  br label %label_rtx.exit677

label_rtx.exit677:                                ; preds = %if.end.i670, %if.end5.i673, %cond.false.i674
  %cond.i675 = phi %struct.rtx_def* [ %56, %cond.false.i674 ], [ %call.i671, %if.end5.i673 ], [ %55, %if.end.i670 ]
  %bf.load.i678 = load i32* %0, align 8
  %bf.clear.i679 = and i32 %bf.load.i678, 65535
  %cmp.i680 = icmp eq i32 %bf.clear.i679, 54
  br i1 %cmp.i680, label %land.lhs.true.i684, label %if.else.i695

land.lhs.true.i684:                               ; preds = %label_rtx.exit677
  %57 = getelementptr inbounds %struct.rtx_def* %call123, i64 0, i32 0
  %bf.load1.i681 = load i32* %57, align 8
  %bf.clear2.i682 = and i32 %bf.load1.i681, 65535
  %cmp3.i683 = icmp eq i32 %bf.clear2.i682, 54
  br i1 %cmp3.i683, label %if.then.i688, label %if.else.i695

if.then.i688:                                     ; preds = %land.lhs.true.i684
  %58 = load i64* %rtwint.i, align 8, !tbaa !144
  %rtwint6.i686 = getelementptr inbounds %struct.rtx_def* %call123, i64 0, i32 1, i64 0, i32 0
  %59 = load i64* %rtwint6.i686, align 8, !tbaa !144
  %cmp7.i687 = icmp eq i64 %58, %59
  br i1 %cmp7.i687, label %if.then8.i692, label %if.end251

if.then8.i692:                                    ; preds = %if.then.i688
  tail call void @do_pending_stack_adjust() #6
  %call.i.i689 = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %cond.i675) #6
  %call1.i.i690 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i.i689) #6
  %call2.i.i691 = tail call %struct.rtx_def* @emit_barrier() #6
  br label %if.end251

if.else.i695:                                     ; preds = %land.lhs.true.i684, %label_rtx.exit677
  %bf.clear10.i693 = and i32 %bf.load.i678, 16711680
  %cmp11.i694 = icmp eq i32 %bf.clear10.i693, 0
  br i1 %cmp11.i694, label %cond.true.i697, label %cond.end.i701

cond.true.i697:                                   ; preds = %if.else.i695
  %60 = getelementptr inbounds %struct.rtx_def* %call123, i64 0, i32 0
  %bf.load12.i696 = load i32* %60, align 8
  br label %cond.end.i701

cond.end.i701:                                    ; preds = %cond.true.i697, %if.else.i695
  %bf.load12.sink.i698 = phi i32 [ %bf.load12.i696, %cond.true.i697 ], [ %bf.load.i678, %if.else.i695 ]
  %bf.lshr13.i699 = lshr i32 %bf.load12.sink.i698, 16
  %bf.clear14.i700 = and i32 %bf.lshr13.i699, 255
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call123, i32 103, %struct.rtx_def* null, i32 %bf.clear14.i700, i32 %bf.clear, %struct.rtx_def* %cond.i675) #6
  br label %if.end251

if.else131:                                       ; preds = %if.else
  %right132 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 1
  %61 = load %struct.case_node** %right132, align 8, !tbaa !142
  %cmp133 = icmp eq %struct.case_node* %61, null
  %left190.phi.trans.insert = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 0
  %.pre = load %struct.case_node** %left190.phi.trans.insert, align 8, !tbaa !141
  %phitmp = icmp eq %struct.case_node* %.pre, null
  br i1 %cmp133, label %land.lhs.true189, label %land.lhs.true134

land.lhs.true134:                                 ; preds = %if.else131
  %index_type.idx487.val = load %union.tree_node** %index_type.idx.i, align 8, !tbaa !143
  br i1 %phitmp, label %if.then172, label %if.then137

if.then137:                                       ; preds = %land.lhs.true134
  %call.i705 = tail call fastcc i32 @node_has_low_bound(%struct.case_node* %61, %union.tree_node* %index_type.idx487.val) #6
  %tobool.i706 = icmp eq i32 %call.i705, 0
  br i1 %tobool.i706, label %if.else149, label %land.rhs.i711

land.rhs.i711:                                    ; preds = %if.then137
  %index_type.idx5.val.i708 = load %union.tree_node** %index_type.idx490, align 8, !tbaa !127
  %call1.i709 = tail call fastcc i32 @node_has_high_bound(%struct.case_node* %61, %union.tree_node* %index_type.idx5.val.i708) #6
  %tobool2.i710 = icmp eq i32 %call1.i709, 0
  br i1 %tobool2.i710, label %if.else149, label %if.then142

if.then142:                                       ; preds = %land.rhs.i711
  %62 = load %union.tree_node** %high, align 8, !tbaa !137
  %call144 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %62, %struct.rtx_def* null, i32 0, i32 0) #6
  %call145 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call144, i32 %bf.clear) #6
  %63 = load %struct.case_node** %right132, align 8, !tbaa !142
  %code_label147 = getelementptr inbounds %struct.case_node* %63, i64 0, i32 5
  %64 = load %union.tree_node** %code_label147, align 8, !tbaa !138
  %code.i714 = getelementptr inbounds %union.tree_node* %64, i64 0, i32 0, i32 0, i32 2
  %bf.load.i715 = load i32* %code.i714, align 8
  %bf.clear.i716 = and i32 %bf.load.i715, 255
  %cmp.i717 = icmp eq i32 %bf.clear.i716, 31
  br i1 %cmp.i717, label %if.end.i721, label %if.then.i718

if.then.i718:                                     ; preds = %if.then142
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i721:                                      ; preds = %if.then142
  %rtl.i719 = getelementptr inbounds %union.tree_node* %64, i64 0, i32 0, i32 17
  %65 = load %struct.rtx_def** %rtl.i719, align 8, !tbaa !59
  %cmp1.i720 = icmp eq %struct.rtx_def* %65, null
  br i1 %cmp1.i720, label %if.end5.i724, label %label_rtx.exit728

if.end5.i724:                                     ; preds = %if.end.i721
  %call.i722 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i722, %struct.rtx_def** %rtl.i719, align 8, !tbaa !59
  %tobool.i723 = icmp eq %struct.rtx_def* %call.i722, null
  br i1 %tobool.i723, label %cond.false.i725, label %label_rtx.exit728

cond.false.i725:                                  ; preds = %if.end5.i724
  tail call void @make_decl_rtl(%union.tree_node* %64, i8* null) #6
  %66 = load %struct.rtx_def** %rtl.i719, align 8, !tbaa !59
  br label %label_rtx.exit728

label_rtx.exit728:                                ; preds = %if.end.i721, %if.end5.i724, %cond.false.i725
  %cond.i726 = phi %struct.rtx_def* [ %66, %cond.false.i725 ], [ %call.i722, %if.end5.i724 ], [ %65, %if.end.i721 ]
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call145, i32 105, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %cond.i726) #6
  br label %if.end155

if.else149:                                       ; preds = %land.rhs.i711, %if.then137
  %call150 = tail call %union.tree_node* @build_decl(i32 31, %union.tree_node* null, %union.tree_node* null) #6
  %67 = load %union.tree_node** %high, align 8, !tbaa !137
  %call152 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %67, %struct.rtx_def* null, i32 0, i32 0) #6
  %call153 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call152, i32 %bf.clear) #6
  %code.i729 = getelementptr inbounds %union.tree_node* %call150, i64 0, i32 0, i32 0, i32 2
  %bf.load.i730 = load i32* %code.i729, align 8
  %bf.clear.i731 = and i32 %bf.load.i730, 255
  %cmp.i732 = icmp eq i32 %bf.clear.i731, 31
  br i1 %cmp.i732, label %if.end.i736, label %if.then.i733

if.then.i733:                                     ; preds = %if.else149
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i736:                                      ; preds = %if.else149
  %rtl.i734 = getelementptr inbounds %union.tree_node* %call150, i64 0, i32 0, i32 17
  %68 = load %struct.rtx_def** %rtl.i734, align 8, !tbaa !59
  %cmp1.i735 = icmp eq %struct.rtx_def* %68, null
  br i1 %cmp1.i735, label %if.end5.i739, label %label_rtx.exit743

if.end5.i739:                                     ; preds = %if.end.i736
  %call.i737 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i737, %struct.rtx_def** %rtl.i734, align 8, !tbaa !59
  %tobool.i738 = icmp eq %struct.rtx_def* %call.i737, null
  br i1 %tobool.i738, label %cond.false.i740, label %label_rtx.exit743

cond.false.i740:                                  ; preds = %if.end5.i739
  tail call void @make_decl_rtl(%union.tree_node* %call150, i8* null) #6
  %69 = load %struct.rtx_def** %rtl.i734, align 8, !tbaa !59
  br label %label_rtx.exit743

label_rtx.exit743:                                ; preds = %if.end.i736, %if.end5.i739, %cond.false.i740
  %cond.i741 = phi %struct.rtx_def* [ %69, %cond.false.i740 ], [ %call.i737, %if.end5.i739 ], [ %68, %if.end.i736 ]
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call153, i32 105, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %cond.i741) #6
  br label %if.end155

if.end155:                                        ; preds = %label_rtx.exit743, %label_rtx.exit728
  %test_label138.0 = phi %union.tree_node* [ null, %label_rtx.exit728 ], [ %call150, %label_rtx.exit743 ]
  %70 = load %union.tree_node** %low, align 8, !tbaa !135
  %call157 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %70, %struct.rtx_def* null, i32 0, i32 0) #6
  %call158 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call157, i32 %bf.clear) #6
  %code_label159 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 5
  %71 = load %union.tree_node** %code_label159, align 8, !tbaa !138
  %code.i744 = getelementptr inbounds %union.tree_node* %71, i64 0, i32 0, i32 0, i32 2
  %bf.load.i745 = load i32* %code.i744, align 8
  %bf.clear.i746 = and i32 %bf.load.i745, 255
  %cmp.i747 = icmp eq i32 %bf.clear.i746, 31
  br i1 %cmp.i747, label %if.end.i751, label %if.then.i748

if.then.i748:                                     ; preds = %if.end155
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i751:                                      ; preds = %if.end155
  %rtl.i749 = getelementptr inbounds %union.tree_node* %71, i64 0, i32 0, i32 17
  %72 = load %struct.rtx_def** %rtl.i749, align 8, !tbaa !59
  %cmp1.i750 = icmp eq %struct.rtx_def* %72, null
  br i1 %cmp1.i750, label %if.end5.i754, label %label_rtx.exit758

if.end5.i754:                                     ; preds = %if.end.i751
  %call.i752 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i752, %struct.rtx_def** %rtl.i749, align 8, !tbaa !59
  %tobool.i753 = icmp eq %struct.rtx_def* %call.i752, null
  br i1 %tobool.i753, label %cond.false.i755, label %label_rtx.exit758

cond.false.i755:                                  ; preds = %if.end5.i754
  tail call void @make_decl_rtl(%union.tree_node* %71, i8* null) #6
  %73 = load %struct.rtx_def** %rtl.i749, align 8, !tbaa !59
  br label %label_rtx.exit758

label_rtx.exit758:                                ; preds = %if.end.i751, %if.end5.i754, %cond.false.i755
  %cond.i756 = phi %struct.rtx_def* [ %73, %cond.false.i755 ], [ %call.i752, %if.end5.i754 ], [ %72, %if.end.i751 ]
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call158, i32 104, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %cond.i756) #6
  %74 = load %struct.case_node** %left190.phi.trans.insert, align 8, !tbaa !141
  tail call fastcc void @emit_case_nodes(%struct.rtx_def* %index, %struct.case_node* %74, %struct.rtx_def* %default_label, %union.tree_node* %index_type)
  %tobool162 = icmp eq %union.tree_node* %test_label138.0, null
  br i1 %tobool162, label %if.end251, label %if.then163

if.then163:                                       ; preds = %label_rtx.exit758
  %call.i774 = tail call %struct.rtx_def* @get_last_insn() #6
  %75 = getelementptr inbounds %struct.rtx_def* %call.i774, i64 0, i32 0
  %bf.load.i775 = load i32* %75, align 8
  %bf.clear.i776 = and i32 %bf.load.i775, 65535
  %cmp.i777 = icmp eq i32 %bf.clear.i776, 35
  br i1 %cmp.i777, label %emit_jump_if_reachable.exit783, label %if.then.i781

if.then.i781:                                     ; preds = %if.then163
  tail call void @do_pending_stack_adjust() #6
  %call.i.i778 = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %default_label) #6
  %call1.i.i779 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i.i778) #6
  %call2.i.i780 = tail call %struct.rtx_def* @emit_barrier() #6
  br label %emit_jump_if_reachable.exit783

emit_jump_if_reachable.exit783:                   ; preds = %if.then163, %if.then.i781
  tail call void @expand_label(%union.tree_node* %test_label138.0)
  br label %tailrecurse.backedge

tailrecurse.backedge:                             ; preds = %if.then113, %if.then110, %if.then74, %if.then71, %emit_jump_if_reachable.exit783, %label_rtx.exit622, %label_rtx.exit773, %label_rtx.exit568, %emit_jump_if_reachable.exit, %label_rtx.exit539
  %node.tr.be.in = phi %struct.case_node** [ %right132, %emit_jump_if_reachable.exit783 ], [ %left190, %label_rtx.exit622 ], [ %right132, %label_rtx.exit773 ], [ %right, %label_rtx.exit568 ], [ %right, %emit_jump_if_reachable.exit ], [ %left93.phi.trans.insert, %label_rtx.exit539 ], [ %right, %if.then71 ], [ %right, %if.then74 ], [ %left93, %if.then110 ], [ %left93, %if.then113 ]
  %node.tr.be = load %struct.case_node** %node.tr.be.in, align 8
  br label %tailrecurse

if.then172:                                       ; preds = %land.lhs.true134
  %call173 = tail call fastcc i32 @node_has_low_bound(%struct.case_node* %node.tr, %union.tree_node* %index_type.idx487.val)
  %tobool174 = icmp eq i32 %call173, 0
  br i1 %tobool174, label %if.then175, label %if.end179

if.then175:                                       ; preds = %if.then172
  %76 = load %union.tree_node** %low, align 8, !tbaa !135
  %call177 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %76, %struct.rtx_def* null, i32 0, i32 0) #6
  %call178 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call177, i32 %bf.clear) #6
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call178, i32 107, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %default_label) #6
  br label %if.end179

if.end179:                                        ; preds = %if.then172, %if.then175
  %77 = load %union.tree_node** %high, align 8, !tbaa !137
  %call181 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %77, %struct.rtx_def* null, i32 0, i32 0) #6
  %call182 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call181, i32 %bf.clear) #6
  %code_label183 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 5
  %78 = load %union.tree_node** %code_label183, align 8, !tbaa !138
  %code.i759 = getelementptr inbounds %union.tree_node* %78, i64 0, i32 0, i32 0, i32 2
  %bf.load.i760 = load i32* %code.i759, align 8
  %bf.clear.i761 = and i32 %bf.load.i760, 255
  %cmp.i762 = icmp eq i32 %bf.clear.i761, 31
  br i1 %cmp.i762, label %if.end.i766, label %if.then.i763

if.then.i763:                                     ; preds = %if.end179
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i766:                                      ; preds = %if.end179
  %rtl.i764 = getelementptr inbounds %union.tree_node* %78, i64 0, i32 0, i32 17
  %79 = load %struct.rtx_def** %rtl.i764, align 8, !tbaa !59
  %cmp1.i765 = icmp eq %struct.rtx_def* %79, null
  br i1 %cmp1.i765, label %if.end5.i769, label %label_rtx.exit773

if.end5.i769:                                     ; preds = %if.end.i766
  %call.i767 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i767, %struct.rtx_def** %rtl.i764, align 8, !tbaa !59
  %tobool.i768 = icmp eq %struct.rtx_def* %call.i767, null
  br i1 %tobool.i768, label %cond.false.i770, label %label_rtx.exit773

cond.false.i770:                                  ; preds = %if.end5.i769
  tail call void @make_decl_rtl(%union.tree_node* %78, i8* null) #6
  %80 = load %struct.rtx_def** %rtl.i764, align 8, !tbaa !59
  br label %label_rtx.exit773

label_rtx.exit773:                                ; preds = %if.end.i766, %if.end5.i769, %cond.false.i770
  %cond.i771 = phi %struct.rtx_def* [ %80, %cond.false.i770 ], [ %call.i767, %if.end5.i769 ], [ %79, %if.end.i766 ]
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call182, i32 106, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %cond.i771) #6
  br label %tailrecurse.backedge

land.lhs.true189:                                 ; preds = %if.else131
  %left190 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 0
  %index_type.idx489.val = load %union.tree_node** %index_type.idx490, align 8, !tbaa !127
  %call207 = tail call fastcc i32 @node_has_high_bound(%struct.case_node* %node.tr, %union.tree_node* %index_type.idx489.val)
  br i1 %phitmp, label %if.else206, label %if.then192

if.then192:                                       ; preds = %land.lhs.true189
  %tobool194 = icmp eq i32 %call207, 0
  br i1 %tobool194, label %if.then195, label %if.end199

if.then195:                                       ; preds = %if.then192
  %81 = load %union.tree_node** %high, align 8, !tbaa !137
  %call197 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %81, %struct.rtx_def* null, i32 0, i32 0) #6
  %call198 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call197, i32 %bf.clear) #6
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call198, i32 105, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %default_label) #6
  br label %if.end199

if.end199:                                        ; preds = %if.then192, %if.then195
  %82 = load %union.tree_node** %low, align 8, !tbaa !135
  %call201 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %82, %struct.rtx_def* null, i32 0, i32 0) #6
  %call202 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call201, i32 %bf.clear) #6
  %code_label203 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 5
  %83 = load %union.tree_node** %code_label203, align 8, !tbaa !138
  %code.i608 = getelementptr inbounds %union.tree_node* %83, i64 0, i32 0, i32 0, i32 2
  %bf.load.i609 = load i32* %code.i608, align 8
  %bf.clear.i610 = and i32 %bf.load.i609, 255
  %cmp.i611 = icmp eq i32 %bf.clear.i610, 31
  br i1 %cmp.i611, label %if.end.i615, label %if.then.i612

if.then.i612:                                     ; preds = %if.end199
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i615:                                      ; preds = %if.end199
  %rtl.i613 = getelementptr inbounds %union.tree_node* %83, i64 0, i32 0, i32 17
  %84 = load %struct.rtx_def** %rtl.i613, align 8, !tbaa !59
  %cmp1.i614 = icmp eq %struct.rtx_def* %84, null
  br i1 %cmp1.i614, label %if.end5.i618, label %label_rtx.exit622

if.end5.i618:                                     ; preds = %if.end.i615
  %call.i616 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i616, %struct.rtx_def** %rtl.i613, align 8, !tbaa !59
  %tobool.i617 = icmp eq %struct.rtx_def* %call.i616, null
  br i1 %tobool.i617, label %cond.false.i619, label %label_rtx.exit622

cond.false.i619:                                  ; preds = %if.end5.i618
  tail call void @make_decl_rtl(%union.tree_node* %83, i8* null) #6
  %85 = load %struct.rtx_def** %rtl.i613, align 8, !tbaa !59
  br label %label_rtx.exit622

label_rtx.exit622:                                ; preds = %if.end.i615, %if.end5.i618, %cond.false.i619
  %cond.i620 = phi %struct.rtx_def* [ %85, %cond.false.i619 ], [ %call.i616, %if.end5.i618 ], [ %84, %if.end.i615 ]
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call202, i32 104, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %cond.i620) #6
  br label %tailrecurse.backedge

if.else206:                                       ; preds = %land.lhs.true189
  %index_type.idx.val = load %union.tree_node** %index_type.idx.i, align 8, !tbaa !143
  %call208 = tail call fastcc i32 @node_has_low_bound(%struct.case_node* %node.tr, %union.tree_node* %index_type.idx.val)
  %tobool209 = icmp eq i32 %call207, 0
  %tobool211 = icmp ne i32 %call208, 0
  %or.cond = and i1 %tobool209, %tobool211
  br i1 %or.cond, label %if.then212, label %if.else216

if.then212:                                       ; preds = %if.else206
  %86 = load %union.tree_node** %high, align 8, !tbaa !137
  %call214 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %86, %struct.rtx_def* null, i32 0, i32 0) #6
  %call215 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call214, i32 %bf.clear) #6
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call215, i32 105, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %default_label) #6
  br label %if.end244

if.else216:                                       ; preds = %if.else206
  %tobool217 = icmp eq i32 %call208, 0
  %tobool219 = icmp ne i32 %call207, 0
  %or.cond252 = and i1 %tobool217, %tobool219
  br i1 %or.cond252, label %if.then220, label %if.else224

if.then220:                                       ; preds = %if.else216
  %87 = load %union.tree_node** %low, align 8, !tbaa !135
  %call222 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %87, %struct.rtx_def* null, i32 0, i32 0) #6
  %call223 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear3, i32 %bf.clear7, %struct.rtx_def* %call222, i32 %bf.clear) #6
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %index, %struct.rtx_def* %call223, i32 107, %struct.rtx_def* null, i32 %bf.clear3, i32 %bf.clear, %struct.rtx_def* %default_label) #6
  br label %if.end244

if.else224:                                       ; preds = %if.else216
  %88 = or i32 %call208, %call207
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %if.then228, label %if.end244

if.then228:                                       ; preds = %if.else224
  %call230 = tail call %union.tree_node* @type_for_mode(i32 %bf.clear3, i32 %bf.clear) #6
  %90 = load %union.tree_node** %low, align 8, !tbaa !135
  %call233 = tail call %union.tree_node* @build1(i32 114, %union.tree_node* %call230, %union.tree_node* %90) #6
  %91 = load %union.tree_node** %high, align 8, !tbaa !137
  %call236 = tail call %union.tree_node* @build1(i32 114, %union.tree_node* %call230, %union.tree_node* %91) #6
  %call237 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call233, %struct.rtx_def* null, i32 %bf.clear3, i32 0) #6
  %call238 = tail call %struct.rtx_def* @expand_simple_binop(i32 %bf.clear3, i32 76, %struct.rtx_def* %index, %struct.rtx_def* %call237, %struct.rtx_def* null, i32 %bf.clear, i32 2) #6
  %call239 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %call230, %union.tree_node* %call236, %union.tree_node* %call233) #6
  %call240 = tail call %union.tree_node* @fold(%union.tree_node* %call239) #6
  %call241 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call240, %struct.rtx_def* null, i32 %bf.clear3, i32 0) #6
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %call238, %struct.rtx_def* %call241, i32 105, %struct.rtx_def* null, i32 %bf.clear3, i32 1, %struct.rtx_def* %default_label) #6
  br label %if.end244

if.end244:                                        ; preds = %if.else224, %if.then220, %if.then228, %if.then212
  %code_label245 = getelementptr inbounds %struct.case_node* %node.tr, i64 0, i32 5
  %92 = load %union.tree_node** %code_label245, align 8, !tbaa !138
  %code.i569 = getelementptr inbounds %union.tree_node* %92, i64 0, i32 0, i32 0, i32 2
  %bf.load.i570 = load i32* %code.i569, align 8
  %bf.clear.i571 = and i32 %bf.load.i570, 255
  %cmp.i572 = icmp eq i32 %bf.clear.i571, 31
  br i1 %cmp.i572, label %if.end.i576, label %if.then.i573

if.then.i573:                                     ; preds = %if.end244
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.label_rtx, i64 0, i64 0)) #7
  unreachable

if.end.i576:                                      ; preds = %if.end244
  %rtl.i574 = getelementptr inbounds %union.tree_node* %92, i64 0, i32 0, i32 17
  %93 = load %struct.rtx_def** %rtl.i574, align 8, !tbaa !59
  %cmp1.i575 = icmp eq %struct.rtx_def* %93, null
  br i1 %cmp1.i575, label %if.end5.i579, label %label_rtx.exit583

if.end5.i579:                                     ; preds = %if.end.i576
  %call.i577 = tail call %struct.rtx_def* @gen_label_rtx() #6
  store %struct.rtx_def* %call.i577, %struct.rtx_def** %rtl.i574, align 8, !tbaa !59
  %tobool.i578 = icmp eq %struct.rtx_def* %call.i577, null
  br i1 %tobool.i578, label %cond.false.i580, label %label_rtx.exit583

cond.false.i580:                                  ; preds = %if.end5.i579
  tail call void @make_decl_rtl(%union.tree_node* %92, i8* null) #6
  %94 = load %struct.rtx_def** %rtl.i574, align 8, !tbaa !59
  br label %label_rtx.exit583

label_rtx.exit583:                                ; preds = %if.end.i576, %if.end5.i579, %cond.false.i580
  %cond.i581 = phi %struct.rtx_def* [ %94, %cond.false.i580 ], [ %call.i577, %if.end5.i579 ], [ %93, %if.end.i576 ]
  tail call void @do_pending_stack_adjust() #6
  %call.i540 = tail call %struct.rtx_def* @gen_jump(%struct.rtx_def* %cond.i581) #6
  %call1.i541 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call.i540) #6
  %call2.i542 = tail call %struct.rtx_def* @emit_barrier() #6
  br label %if.end251

if.end251:                                        ; preds = %land.lhs.true92, %label_rtx.exit758, %cond.end.i701, %if.then8.i692, %if.then.i688, %cond.end.i661, %if.then8.i652, %if.then.i648, %label_rtx.exit583, %label_rtx.exit
  ret void
}

declare i32 @try_casesi(%union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*) #2

declare i32 @try_tablejump(%union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #6

declare %struct.rtx_def* @gen_rtx_fmt_eEee0(i32, i32, %struct.rtx_def*, %struct.rtvec_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare %struct.rtvec_def* @gen_rtvec_v(i32, %struct.rtx_def**) #2

declare zeroext i1 @squeeze_notes(%struct.rtx_def**, %struct.rtx_def**) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @free_case_nodes(%struct.case_node* %cn) #0 {
entry:
  %tobool = icmp eq %struct.case_node* %cn, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %left = getelementptr inbounds %struct.case_node* %cn, i64 0, i32 0
  %0 = load %struct.case_node** %left, align 8, !tbaa !141
  tail call fastcc void @free_case_nodes(%struct.case_node* %0)
  %right = getelementptr inbounds %struct.case_node* %cn, i64 0, i32 1
  %1 = load %struct.case_node** %right, align 8, !tbaa !142
  tail call fastcc void @free_case_nodes(%struct.case_node* %1)
  %2 = bitcast %struct.case_node* %cn to i8*
  tail call void @free(i8* %2)
  ret void

if.end:                                           ; preds = %entry
  ret void
}

declare %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #2

; Function Attrs: nounwind uwtable
define internal fastcc i32 @node_has_low_bound(%struct.case_node* nocapture readonly %node, %union.tree_node* %index_type.0.0.12.val) #0 {
entry:
  %low = getelementptr inbounds %struct.case_node* %node, i64 0, i32 3
  %0 = load %union.tree_node** %low, align 8, !tbaa !135
  %call = tail call i32 @tree_int_cst_equal(%union.tree_node* %0, %union.tree_node* %index_type.0.0.12.val) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %left = getelementptr inbounds %struct.case_node* %node, i64 0, i32 0
  %1 = load %struct.case_node** %left, align 8, !tbaa !141
  %tobool1 = icmp eq %struct.case_node* %1, null
  br i1 %tobool1, label %if.end3, label %return

if.end3:                                          ; preds = %if.end
  %2 = load %union.tree_node** %low, align 8, !tbaa !135
  %type5 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type5, align 8, !tbaa !76
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !17
  %call7 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %3, %union.tree_node* %2, %union.tree_node* %4) #6
  %call8 = tail call %union.tree_node* @fold(%union.tree_node* %call7) #6
  %5 = load %union.tree_node** %low, align 8, !tbaa !135
  %call10 = tail call i32 @tree_int_cst_lt(%union.tree_node* %call8, %union.tree_node* %5) #6
  %tobool11 = icmp eq i32 %call10, 0
  br i1 %tobool11, label %return, label %for.cond

for.cond:                                         ; preds = %if.end3, %for.body
  %node.pn = phi %struct.case_node* [ %pnode.0, %for.body ], [ %node, %if.end3 ]
  %pnode.0.in = getelementptr inbounds %struct.case_node* %node.pn, i64 0, i32 2
  %pnode.0 = load %struct.case_node** %pnode.0.in, align 8
  %tobool14 = icmp eq %struct.case_node* %pnode.0, null
  br i1 %tobool14, label %return, label %for.body

for.body:                                         ; preds = %for.cond
  %high = getelementptr inbounds %struct.case_node* %pnode.0, i64 0, i32 4
  %6 = load %union.tree_node** %high, align 8, !tbaa !137
  %call15 = tail call i32 @tree_int_cst_equal(%union.tree_node* %call8, %union.tree_node* %6) #6
  %tobool16 = icmp eq i32 %call15, 0
  br i1 %tobool16, label %for.cond, label %return

return:                                           ; preds = %for.cond, %for.body, %if.end3, %if.end, %entry
  %retval.0 = phi i32 [ 1, %entry ], [ 0, %if.end ], [ 0, %if.end3 ], [ 0, %for.cond ], [ 1, %for.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @node_has_high_bound(%struct.case_node* nocapture readonly %node, %union.tree_node* %index_type.0.0.13.val) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %index_type.0.0.13.val, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %high = getelementptr inbounds %struct.case_node* %node, i64 0, i32 4
  %0 = load %union.tree_node** %high, align 8, !tbaa !137
  %call = tail call i32 @tree_int_cst_equal(%union.tree_node* %0, %union.tree_node* %index_type.0.0.13.val) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end4, label %return

if.end4:                                          ; preds = %if.end
  %right = getelementptr inbounds %struct.case_node* %node, i64 0, i32 1
  %1 = load %struct.case_node** %right, align 8, !tbaa !142
  %tobool5 = icmp eq %struct.case_node* %1, null
  br i1 %tobool5, label %if.end7, label %return

if.end7:                                          ; preds = %if.end4
  %2 = load %union.tree_node** %high, align 8, !tbaa !137
  %type9 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type9, align 8, !tbaa !76
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !17
  %call11 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 59, %union.tree_node* %3, %union.tree_node* %2, %union.tree_node* %4) #6
  %call12 = tail call %union.tree_node* @fold(%union.tree_node* %call11) #6
  %5 = load %union.tree_node** %high, align 8, !tbaa !137
  %call14 = tail call i32 @tree_int_cst_lt(%union.tree_node* %5, %union.tree_node* %call12) #6
  %tobool15 = icmp eq i32 %call14, 0
  br i1 %tobool15, label %return, label %for.cond

for.cond:                                         ; preds = %if.end7, %for.body
  %node.pn = phi %struct.case_node* [ %pnode.0, %for.body ], [ %node, %if.end7 ]
  %pnode.0.in = getelementptr inbounds %struct.case_node* %node.pn, i64 0, i32 2
  %pnode.0 = load %struct.case_node** %pnode.0.in, align 8
  %tobool18 = icmp eq %struct.case_node* %pnode.0, null
  br i1 %tobool18, label %return, label %for.body

for.body:                                         ; preds = %for.cond
  %low = getelementptr inbounds %struct.case_node* %pnode.0, i64 0, i32 3
  %6 = load %union.tree_node** %low, align 8, !tbaa !135
  %call19 = tail call i32 @tree_int_cst_equal(%union.tree_node* %call12, %union.tree_node* %6) #6
  %tobool20 = icmp eq i32 %call19, 0
  br i1 %tobool20, label %for.cond, label %return

return:                                           ; preds = %for.cond, %for.body, %if.end7, %if.end4, %if.end, %entry
  %retval.0 = phi i32 [ 1, %entry ], [ 1, %if.end ], [ 0, %if.end4 ], [ 0, %if.end7 ], [ 0, %for.cond ], [ 1, %for.body ]
  ret i32 %retval.0
}

declare %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare %struct.rtx_def* @next_real_insn(%struct.rtx_def*) #2

declare i32 @simplejump_p(%struct.rtx_def*) #2

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @restore_line_number_status(i32) #2

declare void @expand_eh_region_end_cleanup(%union.tree_node*) #2

declare void @expand_eh_region_end_fixup(%union.tree_node*) #2

declare %struct.rtx_def* @emit_insns_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @expand_builtin_trap() #2

declare i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare void @convert_move(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare void @emit_group_load(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare void @clear_pending_stack_adjust() #2

declare noalias i8* @xstrdup(i8*) #2

; Function Attrs: nounwind uwtable
define internal fastcc i8* @resolve_operand_name_1(i8* %p, %union.tree_node* readonly %outputs, %union.tree_node* readonly %inputs) #0 {
entry:
  %call = tail call i8* @strchr(i8* %p, i32 93) #6
  %tobool = icmp eq i8* %call, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([38 x i8]* @.str22, i64 0, i64 0)) #6
  %strlen = tail call i64 @strlen(i8* %p) #6
  %strchr = getelementptr i8* %p, i64 %strlen
  br label %return

if.end:                                           ; preds = %entry
  %sub.ptr.lhs.cast = ptrtoint i8* %call to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %p to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = add nsw i64 %sub.ptr.sub, -1
  %tobool292 = icmp eq %union.tree_node* %outputs, null
  br i1 %tobool292, label %for.cond14.preheader, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %add.ptr = getelementptr inbounds i8* %p, i64 1
  br label %for.body

for.cond14.preheader:                             ; preds = %for.inc, %if.end
  %op.0.lcssa = phi i32 [ 0, %if.end ], [ %inc, %for.inc ]
  %tobool1589 = icmp eq %union.tree_node* %inputs, null
  %add.ptr45.pre = getelementptr inbounds i8* %p, i64 1
  br i1 %tobool1589, label %for.end44, label %for.body16

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %op.094 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %t.093 = phi %union.tree_node* [ %outputs, %for.body.lr.ph ], [ %6, %for.inc ]
  %purpose = getelementptr inbounds %union.tree_node* %t.093, i64 0, i32 0, i32 1
  %0 = load i8** %purpose, align 8
  %purpose4 = getelementptr inbounds i8* %0, i64 24
  %1 = bitcast i8* %purpose4 to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !86
  %tobool5 = icmp eq %union.tree_node* %2, null
  br i1 %tobool5, label %for.inc, label %if.then6

if.then6:                                         ; preds = %for.body
  %id7 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds i8** %id7, i64 1
  %4 = load i8** %3, align 8, !tbaa !63
  %call8 = tail call i32 @strncmp(i8* %4, i8* %add.ptr, i64 %sub) #6
  %cmp = icmp eq i32 %call8, 0
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %if.then6
  %arrayidx = getelementptr inbounds i8* %4, i64 %sub
  %5 = load i8* %arrayidx, align 1, !tbaa !68
  %cmp9 = icmp eq i8 %5, 0
  br i1 %cmp9, label %found, label %for.inc

for.inc:                                          ; preds = %for.body, %land.lhs.true, %if.then6
  %chain = getelementptr inbounds %union.tree_node* %t.093, i64 0, i32 0, i32 0, i32 0
  %6 = load %union.tree_node** %chain, align 8, !tbaa !79
  %inc = add nsw i32 %op.094, 1
  %tobool2 = icmp eq %union.tree_node* %6, null
  br i1 %tobool2, label %for.cond14.preheader, label %for.body

for.body16:                                       ; preds = %for.cond14.preheader, %for.inc40
  %op.191 = phi i32 [ %inc43, %for.inc40 ], [ %op.0.lcssa, %for.cond14.preheader ]
  %t.190 = phi %union.tree_node* [ %13, %for.inc40 ], [ %inputs, %for.cond14.preheader ]
  %purpose19 = getelementptr inbounds %union.tree_node* %t.190, i64 0, i32 0, i32 1
  %7 = load i8** %purpose19, align 8
  %purpose21 = getelementptr inbounds i8* %7, i64 24
  %8 = bitcast i8* %purpose21 to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !86
  %tobool22 = icmp eq %union.tree_node* %9, null
  br i1 %tobool22, label %for.inc40, label %if.then23

if.then23:                                        ; preds = %for.body16
  %id26 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds i8** %id26, i64 1
  %11 = load i8** %10, align 8, !tbaa !63
  %call29 = tail call i32 @strncmp(i8* %11, i8* %add.ptr45.pre, i64 %sub) #6
  %cmp30 = icmp eq i32 %call29, 0
  br i1 %cmp30, label %land.lhs.true32, label %for.inc40

land.lhs.true32:                                  ; preds = %if.then23
  %arrayidx33 = getelementptr inbounds i8* %11, i64 %sub
  %12 = load i8* %arrayidx33, align 1, !tbaa !68
  %cmp35 = icmp eq i8 %12, 0
  br i1 %cmp35, label %found, label %for.inc40

for.inc40:                                        ; preds = %for.body16, %land.lhs.true32, %if.then23
  %chain42 = getelementptr inbounds %union.tree_node* %t.190, i64 0, i32 0, i32 0, i32 0
  %13 = load %union.tree_node** %chain42, align 8, !tbaa !79
  %inc43 = add nsw i32 %op.191, 1
  %tobool15 = icmp eq %union.tree_node* %13, null
  br i1 %tobool15, label %for.end44, label %for.body16

for.end44:                                        ; preds = %for.inc40, %for.cond14.preheader
  store i8 0, i8* %call, align 1, !tbaa !68
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([29 x i8]* @.str23, i64 0, i64 0), i8* %add.ptr45.pre) #6
  br label %found

found:                                            ; preds = %land.lhs.true, %land.lhs.true32, %for.end44
  %op.2 = phi i32 [ 0, %for.end44 ], [ %op.191, %land.lhs.true32 ], [ %op.094, %land.lhs.true ]
  %call46 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %p, i8* getelementptr inbounds ([3 x i8]* @.str13, i64 0, i64 0), i32 %op.2) #6
  %strlen84 = tail call i64 @strlen(i8* %p) #6
  %strchr85 = getelementptr i8* %p, i64 %strlen84
  %cmp48 = icmp ugt i8* %strchr85, %call
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %found
  tail call void @fancy_abort(i8* getelementptr inbounds ([7 x i8]* @.str, i64 0, i64 0), i32 2184, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.resolve_operand_name_1, i64 0, i64 0)) #7
  unreachable

if.end51:                                         ; preds = %found
  %add.ptr52 = getelementptr inbounds i8* %call, i64 1
  %call54 = tail call i64 @strlen(i8* %add.ptr52) #6
  %add = add i64 %call54, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %strchr85, i8* %add.ptr52, i64 %add, i32 1, i1 false)
  br label %return

return:                                           ; preds = %if.end51, %if.then
  %retval.0 = phi i8* [ %strchr85, %if.end51 ], [ %strchr, %if.then ]
  ret i8* %retval.0
}

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) #5

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) #1

declare void @pushlevel(i32) #2

declare void @set_block(%union.tree_node*) #2

declare %union.tree_node* @poplevel(i32, i32, i32) #2

declare void @insert_block(%union.tree_node*) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @mark_case_node(%struct.case_node* readonly %c) #0 {
entry:
  %cmp71 = icmp eq %struct.case_node* %c, null
  br i1 %cmp71, label %if.end59, label %do.body

do.body:                                          ; preds = %entry, %do.end58
  %c.tr72 = phi %struct.case_node* [ %22, %do.end58 ], [ %c, %entry ]
  %low = getelementptr inbounds %struct.case_node* %c.tr72, i64 0, i32 3
  %0 = load %union.tree_node** %low, align 8, !tbaa !135
  %cmp1 = icmp eq %union.tree_node* %0, null
  br i1 %cmp1, label %do.body11, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.body
  %1 = bitcast %union.tree_node* %0 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %1) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %do.body3, label %do.body11

do.body3:                                         ; preds = %land.lhs.true
  %2 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %2, i64 0, i32 1
  %3 = load i64* %elements_used, align 8, !tbaa !18
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %2, i64 0, i32 0
  %4 = load i64* %num_elements, align 8, !tbaa !21
  %cmp4 = icmp ult i64 %3, %4
  br i1 %cmp4, label %if.end, label %if.then5

if.then5:                                         ; preds = %do.body3
  %mul = shl i64 %4, 1
  %call7 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %2, i64 %mul) #6
  store %struct.varray_head_tag* %call7, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used8.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call7, i64 0, i32 1
  %.pre74 = load i64* %elements_used8.phi.trans.insert, align 8, !tbaa !18
  br label %if.end

if.end:                                           ; preds = %do.body3, %if.then5
  %5 = phi i64 [ %3, %do.body3 ], [ %.pre74, %if.then5 ]
  %6 = phi %struct.varray_head_tag* [ %2, %do.body3 ], [ %call7, %if.then5 ]
  %elements_used8 = getelementptr inbounds %struct.varray_head_tag* %6, i64 0, i32 1
  %inc = add i64 %5, 1
  store i64 %inc, i64* %elements_used8, align 8, !tbaa !18
  %data = getelementptr inbounds %struct.varray_head_tag* %6, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %5
  store %union.tree_node* %0, %union.tree_node** %arrayidx, align 8, !tbaa !17
  br label %do.body11

do.body11:                                        ; preds = %land.lhs.true, %do.body, %if.end
  %high = getelementptr inbounds %struct.case_node* %c.tr72, i64 0, i32 4
  %7 = load %union.tree_node** %high, align 8, !tbaa !137
  %cmp13 = icmp eq %union.tree_node* %7, null
  br i1 %cmp13, label %do.body35, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %do.body11
  %8 = bitcast %union.tree_node* %7 to i8*
  %call15 = tail call i32 @ggc_set_mark(i8* %8) #6
  %tobool16 = icmp eq i32 %call15, 0
  br i1 %tobool16, label %do.body18, label %do.body35

do.body18:                                        ; preds = %land.lhs.true14
  %9 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used19 = getelementptr inbounds %struct.varray_head_tag* %9, i64 0, i32 1
  %10 = load i64* %elements_used19, align 8, !tbaa !18
  %num_elements20 = getelementptr inbounds %struct.varray_head_tag* %9, i64 0, i32 0
  %11 = load i64* %num_elements20, align 8, !tbaa !21
  %cmp21 = icmp ult i64 %10, %11
  br i1 %cmp21, label %if.end26, label %if.then22

if.then22:                                        ; preds = %do.body18
  %mul24 = shl i64 %11, 1
  %call25 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %9, i64 %mul24) #6
  store %struct.varray_head_tag* %call25, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used27.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call25, i64 0, i32 1
  %.pre73 = load i64* %elements_used27.phi.trans.insert, align 8, !tbaa !18
  br label %if.end26

if.end26:                                         ; preds = %do.body18, %if.then22
  %12 = phi i64 [ %10, %do.body18 ], [ %.pre73, %if.then22 ]
  %13 = phi %struct.varray_head_tag* [ %9, %do.body18 ], [ %call25, %if.then22 ]
  %elements_used27 = getelementptr inbounds %struct.varray_head_tag* %13, i64 0, i32 1
  %inc28 = add i64 %12, 1
  store i64 %inc28, i64* %elements_used27, align 8, !tbaa !18
  %data29 = getelementptr inbounds %struct.varray_head_tag* %13, i64 0, i32 4
  %tree30 = bitcast %union.varray_data_tag* %data29 to [1 x %union.tree_node*]*
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*]* %tree30, i64 0, i64 %12
  store %union.tree_node* %7, %union.tree_node** %arrayidx31, align 8, !tbaa !17
  br label %do.body35

do.body35:                                        ; preds = %land.lhs.true14, %do.body11, %if.end26
  %code_label = getelementptr inbounds %struct.case_node* %c.tr72, i64 0, i32 5
  %14 = load %union.tree_node** %code_label, align 8, !tbaa !138
  %cmp37 = icmp eq %union.tree_node* %14, null
  br i1 %cmp37, label %do.end58, label %land.lhs.true38

land.lhs.true38:                                  ; preds = %do.body35
  %15 = bitcast %union.tree_node* %14 to i8*
  %call39 = tail call i32 @ggc_set_mark(i8* %15) #6
  %tobool40 = icmp eq i32 %call39, 0
  br i1 %tobool40, label %do.body42, label %do.end58

do.body42:                                        ; preds = %land.lhs.true38
  %16 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used43 = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 1
  %17 = load i64* %elements_used43, align 8, !tbaa !18
  %num_elements44 = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 0
  %18 = load i64* %num_elements44, align 8, !tbaa !21
  %cmp45 = icmp ult i64 %17, %18
  br i1 %cmp45, label %if.end50, label %if.then46

if.then46:                                        ; preds = %do.body42
  %mul48 = shl i64 %18, 1
  %call49 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %16, i64 %mul48) #6
  store %struct.varray_head_tag* %call49, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !17
  %elements_used51.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call49, i64 0, i32 1
  %.pre = load i64* %elements_used51.phi.trans.insert, align 8, !tbaa !18
  br label %if.end50

if.end50:                                         ; preds = %do.body42, %if.then46
  %19 = phi i64 [ %17, %do.body42 ], [ %.pre, %if.then46 ]
  %20 = phi %struct.varray_head_tag* [ %16, %do.body42 ], [ %call49, %if.then46 ]
  %elements_used51 = getelementptr inbounds %struct.varray_head_tag* %20, i64 0, i32 1
  %inc52 = add i64 %19, 1
  store i64 %inc52, i64* %elements_used51, align 8, !tbaa !18
  %data53 = getelementptr inbounds %struct.varray_head_tag* %20, i64 0, i32 4
  %tree54 = bitcast %union.varray_data_tag* %data53 to [1 x %union.tree_node*]*
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*]* %tree54, i64 0, i64 %19
  store %union.tree_node* %14, %union.tree_node** %arrayidx55, align 8, !tbaa !17
  br label %do.end58

do.end58:                                         ; preds = %land.lhs.true38, %do.body35, %if.end50
  %right = getelementptr inbounds %struct.case_node* %c.tr72, i64 0, i32 1
  %21 = load %struct.case_node** %right, align 8, !tbaa !142
  tail call fastcc void @mark_case_node(%struct.case_node* %21)
  %left = getelementptr inbounds %struct.case_node* %c.tr72, i64 0, i32 0
  %22 = load %struct.case_node** %left, align 8, !tbaa !141
  %cmp = icmp eq %struct.case_node* %22, null
  br i1 %cmp, label %if.end59, label %do.body

if.end59:                                         ; preds = %do.end58, %entry
  ret void
}

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !3, i64 8}
!2 = metadata !{metadata !"function", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !3, i64 48, metadata !3, i64 56, metadata !6, i64 64, metadata !6, i64 68, metadata !6, i64 72, metadata !6, i64 76, metadata !3, i64 80, metadata !7, i64 88, metadata !3, i64 120, metadata !3, i64 128, metadata !3, i64 136, metadata !3, i64 144, metadata !6, i64 152, metadata !3, i64 160, metadata !3, i64 168, metadata !3, i64 176, metadata !3, i64 184, metadata !3, i64 192, metadata !3, i64 200, metadata !3, i64 208, metadata !3, i64 216, metadata !3, i64 224, metadata !3, i64 232, metadata !3, i64 240, metadata !3, i64 248, metadata !3, i64 256, metadata !8, i64 264, metadata !3, i64 272, metadata !3, i64 280, metadata !3, i64 288, metadata !3, i64 296, metadata !6, i64 304, metadata !3, i64 312, metadata !3, i64 320, metadata !6, i64 328, metadata !6, i64 332, metadata !6, i64 336, metadata !3, i64 344, metadata !6, i64 352, metadata !6, i64 356, metadata !3, i64 360, metadata !3, i64 368, metadata !3, i64 376, metadata !6, i64 384, metadata !6, i64 388, metadata !3, i64 392, metadata !6, i64 400, metadata !6, i64 404, metadata !3, i64 408, metadata !3, i64 416, metadata !6, i64 424, metadata !6, i64 424, metadata !6, i64 424, metadata !6, i64 424, metadata !6, i64 424, metadata !6, i64 424, metadata !6, i64 424, metadata !6, i64 424, metadata !6, i64 425, metadata !6, i64 425, metadata !6, i64 425, metadata !6, i64 425, metadata !6, i64 425, metadata !6, i64 425, metadata !6, i64 425, metadata !6, i64 425, metadata !6, i64 426, metadata !6, i64 426, metadata !6, i64 426, metadata !6, i64 426, metadata !6, i64 426, metadata !6, i64 426, metadata !6, i64 426, metadata !6, i64 426}
!3 = metadata !{metadata !"any pointer", metadata !4, i64 0}
!4 = metadata !{metadata !"omnipotent char", metadata !5, i64 0}
!5 = metadata !{metadata !"Simple C/C++ TBAA"}
!6 = metadata !{metadata !"int", metadata !4, i64 0}
!7 = metadata !{metadata !"ix86_args", metadata !6, i64 0, metadata !6, i64 4, metadata !6, i64 8, metadata !6, i64 12, metadata !6, i64 16, metadata !6, i64 20, metadata !6, i64 24}
!8 = metadata !{metadata !"long long", metadata !4, i64 0}
!9 = metadata !{metadata !10, metadata !3, i64 0}
!10 = metadata !{metadata !"stmt_status", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !6, i64 48, metadata !6, i64 52, metadata !3, i64 56, metadata !3, i64 64, metadata !6, i64 72, metadata !3, i64 80, metadata !6, i64 88, metadata !3, i64 96}
!11 = metadata !{metadata !12, metadata !3, i64 24}
!12 = metadata !{metadata !"nesting", metadata !3, i64 0, metadata !3, i64 8, metadata !6, i64 16, metadata !3, i64 24, metadata !4, i64 32}
!13 = metadata !{metadata !14, metadata !3, i64 8}
!14 = metadata !{metadata !"", metadata !6, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !3, i64 48, metadata !6, i64 56, metadata !6, i64 60, metadata !6, i64 64, metadata !6, i64 68, metadata !3, i64 72, metadata !3, i64 80}
!15 = metadata !{metadata !14, metadata !3, i64 16}
!16 = metadata !{metadata !14, metadata !3, i64 32}
!17 = metadata !{metadata !3, metadata !3, i64 0}
!18 = metadata !{metadata !19, metadata !20, i64 8}
!19 = metadata !{metadata !"varray_head_tag", metadata !20, i64 0, metadata !20, i64 8, metadata !20, i64 16, metadata !3, i64 24, metadata !4, i64 32}
!20 = metadata !{metadata !"long", metadata !4, i64 0}
!21 = metadata !{metadata !19, metadata !20, i64 0}
!22 = metadata !{metadata !14, metadata !3, i64 40}
!23 = metadata !{metadata !24, metadata !3, i64 8}
!24 = metadata !{metadata !"label_chain", metadata !3, i64 0, metadata !3, i64 8}
!25 = metadata !{metadata !14, metadata !3, i64 72}
!26 = metadata !{metadata !12, metadata !3, i64 8}
!27 = metadata !{metadata !10, metadata !3, i64 16}
!28 = metadata !{metadata !29, metadata !3, i64 0}
!29 = metadata !{metadata !"", metadata !3, i64 0, metadata !3, i64 8}
!30 = metadata !{metadata !29, metadata !3, i64 8}
!31 = metadata !{metadata !10, metadata !3, i64 24}
!32 = metadata !{metadata !33, metadata !3, i64 0}
!33 = metadata !{metadata !"", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24}
!34 = metadata !{metadata !33, metadata !3, i64 8}
!35 = metadata !{metadata !33, metadata !3, i64 16}
!36 = metadata !{metadata !10, metadata !3, i64 32}
!37 = metadata !{metadata !38, metadata !3, i64 0}
!38 = metadata !{metadata !"", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !6, i64 48}
!39 = metadata !{metadata !38, metadata !3, i64 32}
!40 = metadata !{metadata !10, metadata !3, i64 56}
!41 = metadata !{metadata !10, metadata !3, i64 64}
!42 = metadata !{metadata !10, metadata !3, i64 96}
!43 = metadata !{metadata !44, metadata !3, i64 8}
!44 = metadata !{metadata !"goto_fixup", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !6, i64 40, metadata !3, i64 48, metadata !3, i64 56}
!45 = metadata !{metadata !44, metadata !3, i64 16}
!46 = metadata !{metadata !44, metadata !3, i64 24}
!47 = metadata !{metadata !44, metadata !3, i64 32}
!48 = metadata !{metadata !44, metadata !3, i64 48}
!49 = metadata !{metadata !44, metadata !3, i64 56}
!50 = metadata !{metadata !44, metadata !3, i64 0}
!51 = metadata !{metadata !10, metadata !3, i64 8}
!52 = metadata !{metadata !10, metadata !3, i64 40}
!53 = metadata !{metadata !10, metadata !6, i64 48}
!54 = metadata !{metadata !10, metadata !6, i64 52}
!55 = metadata !{metadata !10, metadata !6, i64 72}
!56 = metadata !{metadata !10, metadata !3, i64 80}
!57 = metadata !{metadata !10, metadata !6, i64 88}
!58 = metadata !{metadata !6, metadata !6, i64 0}
!59 = metadata !{metadata !60, metadata !3, i64 144}
!60 = metadata !{metadata !"tree_decl", metadata !61, i64 0, metadata !3, i64 24, metadata !6, i64 32, metadata !6, i64 36, metadata !3, i64 40, metadata !4, i64 48, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 49, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 50, metadata !6, i64 51, metadata !6, i64 51, metadata !6, i64 51, metadata !6, i64 51, metadata !6, i64 51, metadata !4, i64 51, metadata !6, i64 51, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 52, metadata !6, i64 53, metadata !6, i64 53, metadata !6, i64 53, metadata !6, i64 53, metadata !6, i64 53, metadata !4, i64 56, metadata !3, i64 64, metadata !3, i64 72, metadata !3, i64 80, metadata !3, i64 88, metadata !3, i64 96, metadata !3, i64 104, metadata !3, i64 112, metadata !3, i64 120, metadata !3, i64 128, metadata !3, i64 136, metadata !3, i64 144, metadata !3, i64 152, metadata !4, i64 160, metadata !3, i64 168, metadata !3, i64 176, metadata !3, i64 184, metadata !8, i64 192, metadata !3, i64 200}
!61 = metadata !{metadata !"tree_common", metadata !3, i64 0, metadata !3, i64 8, metadata !4, i64 16, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 17, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 18, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19, metadata !6, i64 19}
!62 = metadata !{metadata !60, metadata !3, i64 72}
!63 = metadata !{metadata !64, metadata !3, i64 32}
!64 = metadata !{metadata !"tree_identifier", metadata !61, i64 0, metadata !65, i64 24}
!65 = metadata !{metadata !"ht_identifier", metadata !6, i64 0, metadata !3, i64 8}
!66 = metadata !{metadata !14, metadata !3, i64 48}
!67 = metadata !{metadata !24, metadata !3, i64 0}
!68 = metadata !{metadata !4, metadata !4, i64 0}
!69 = metadata !{metadata !2, metadata !3, i64 160}
!70 = metadata !{metadata !2, metadata !3, i64 168}
!71 = metadata !{metadata !2, metadata !3, i64 240}
!72 = metadata !{metadata !73, metadata !3, i64 32}
!73 = metadata !{metadata !"tree_list", metadata !61, i64 0, metadata !3, i64 24, metadata !3, i64 32}
!74 = metadata !{metadata !2, metadata !3, i64 184}
!75 = metadata !{metadata !2, metadata !3, i64 200}
!76 = metadata !{metadata !61, metadata !3, i64 8}
!77 = metadata !{metadata !12, metadata !3, i64 0}
!78 = metadata !{metadata !60, metadata !3, i64 104}
!79 = metadata !{metadata !61, metadata !3, i64 0}
!80 = metadata !{metadata !44, metadata !6, i64 40}
!81 = metadata !{metadata !14, metadata !6, i64 0}
!82 = metadata !{metadata !83, metadata !83, i64 0}
!83 = metadata !{metadata !"_Bool", metadata !4, i64 0}
!84 = metadata !{metadata !85, metadata !85, i64 0}
!85 = metadata !{metadata !"short", metadata !4, i64 0}
!86 = metadata !{metadata !73, metadata !3, i64 24}
!87 = metadata !{i8 0, i8 2}
!88 = metadata !{metadata !89, metadata !3, i64 32}
!89 = metadata !{metadata !"tree_type", metadata !61, i64 0, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !3, i64 48, metadata !6, i64 56, metadata !6, i64 60, metadata !4, i64 61, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 62, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 63, metadata !6, i64 64, metadata !3, i64 72, metadata !3, i64 80, metadata !4, i64 88, metadata !3, i64 96, metadata !3, i64 104, metadata !3, i64 112, metadata !3, i64 120, metadata !3, i64 128, metadata !3, i64 136, metadata !3, i64 144, metadata !8, i64 152, metadata !3, i64 160}
!90 = metadata !{metadata !2, metadata !3, i64 16}
!91 = metadata !{metadata !92, metadata !6, i64 4}
!92 = metadata !{metadata !"expr_status", metadata !6, i64 0, metadata !6, i64 4, metadata !6, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40}
!93 = metadata !{metadata !2, metadata !3, i64 224}
!94 = metadata !{metadata !95, metadata !3, i64 32}
!95 = metadata !{metadata !"obstack", metadata !20, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !20, i64 40, metadata !6, i64 48, metadata !3, i64 56, metadata !3, i64 64, metadata !3, i64 72, metadata !6, i64 80, metadata !6, i64 80, metadata !6, i64 80}
!96 = metadata !{metadata !95, metadata !3, i64 24}
!97 = metadata !{metadata !95, metadata !3, i64 16}
!98 = metadata !{metadata !95, metadata !6, i64 48}
!99 = metadata !{metadata !95, metadata !3, i64 8}
!100 = metadata !{metadata !12, metadata !6, i64 16}
!101 = metadata !{metadata !33, metadata !3, i64 24}
!102 = metadata !{metadata !2, metadata !3, i64 192}
!103 = metadata !{metadata !2, metadata !8, i64 264}
!104 = metadata !{metadata !14, metadata !6, i64 68}
!105 = metadata !{metadata !60, metadata !3, i64 96}
!106 = metadata !{metadata !89, metadata !6, i64 64}
!107 = metadata !{metadata !60, metadata !3, i64 88}
!108 = metadata !{metadata !2, metadata !3, i64 232}
!109 = metadata !{metadata !89, metadata !3, i64 128}
!110 = metadata !{metadata !14, metadata !6, i64 56}
!111 = metadata !{metadata !14, metadata !6, i64 60}
!112 = metadata !{metadata !2, metadata !6, i64 336}
!113 = metadata !{metadata !14, metadata !6, i64 64}
!114 = metadata !{metadata !14, metadata !3, i64 80}
!115 = metadata !{metadata !14, metadata !3, i64 24}
!116 = metadata !{metadata !2, metadata !6, i64 328}
!117 = metadata !{metadata !2, metadata !6, i64 152}
!118 = metadata !{metadata !2, metadata !3, i64 176}
!119 = metadata !{metadata !120, metadata !3, i64 48}
!120 = metadata !{metadata !"tree_block", metadata !61, i64 0, metadata !6, i64 24, metadata !6, i64 24, metadata !6, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !3, i64 48, metadata !3, i64 56, metadata !3, i64 64, metadata !3, i64 72}
!121 = metadata !{metadata !60, metadata !3, i64 40}
!122 = metadata !{metadata !89, metadata !3, i64 40}
!123 = metadata !{metadata !60, metadata !3, i64 64}
!124 = metadata !{metadata !2, metadata !3, i64 24}
!125 = metadata !{metadata !126, metadata !3, i64 72}
!126 = metadata !{metadata !"emit_status", metadata !6, i64 0, metadata !6, i64 4, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !6, i64 40, metadata !6, i64 44, metadata !3, i64 48, metadata !6, i64 56, metadata !3, i64 64, metadata !3, i64 72, metadata !3, i64 80}
!127 = metadata !{metadata !89, metadata !3, i64 112}
!128 = metadata !{metadata !60, metadata !3, i64 24}
!129 = metadata !{metadata !60, metadata !6, i64 32}
!130 = metadata !{metadata !38, metadata !3, i64 8}
!131 = metadata !{metadata !38, metadata !3, i64 24}
!132 = metadata !{metadata !38, metadata !3, i64 16}
!133 = metadata !{metadata !38, metadata !3, i64 40}
!134 = metadata !{metadata !38, metadata !6, i64 48}
!135 = metadata !{metadata !136, metadata !3, i64 24}
!136 = metadata !{metadata !"case_node", metadata !3, i64 0, metadata !3, i64 8, metadata !3, i64 16, metadata !3, i64 24, metadata !3, i64 32, metadata !3, i64 40, metadata !6, i64 48}
!137 = metadata !{metadata !136, metadata !3, i64 32}
!138 = metadata !{metadata !136, metadata !3, i64 40}
!139 = metadata !{metadata !136, metadata !3, i64 16}
!140 = metadata !{metadata !136, metadata !6, i64 48}
!141 = metadata !{metadata !136, metadata !3, i64 0}
!142 = metadata !{metadata !136, metadata !3, i64 8}
!143 = metadata !{metadata !89, metadata !3, i64 104}
!144 = metadata !{metadata !8, metadata !8, i64 0}
!145 = metadata !{metadata !146, metadata !8, i64 32}
!146 = metadata !{metadata !"tree_int_cst", metadata !61, i64 0, metadata !3, i64 24, metadata !147, i64 32}
!147 = metadata !{metadata !"", metadata !8, i64 0, metadata !8, i64 8}
!148 = metadata !{metadata !146, metadata !8, i64 40}
!149 = metadata !{metadata !89, metadata !3, i64 96}
