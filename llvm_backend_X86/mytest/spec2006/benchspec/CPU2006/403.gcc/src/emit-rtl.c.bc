; ModuleID = 'emit-rtl.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.lang_decl = type opaque
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.lang_hooks = type { i8*, i64, void ()*, i32 (i32, i8**)*, void ()*, i8* (i8*)*, void ()*, void ()*, i64 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (%struct.rtx_def*, %union.tree_node*)*, i32 (%union.tree_node*)*, i8, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (i32)*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_tree_dump }
%struct._IO_FILE = type opaque
%struct.lang_hooks_for_tree_inlining = type { %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, i8*)*, i32 (%union.tree_node**)*, i32 (%union.tree_node*)*, %union.tree_node* (i8*, %union.tree_node*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8*, i32*, i8*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_tree_dump = type { i32 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i1 (%union.tree_node*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void ()*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)* }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.realvaluetype = type { [3 x i64] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.mem_attrs = type { i64, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }

@split_branch_probability = global i32 -1, align 4
@const_int_rtx = common global [129 x %struct.rtx_def*] zeroinitializer, align 16
@const_int_htab = internal unnamed_addr global %struct.htab* null, align 8
@rtx_length = external constant [153 x i8]
@target_flags = external global i32
@reload_in_progress = external global i32
@global_rtl = common global [11 x %struct.rtx_def*] zeroinitializer, align 16
@flag_pic = external global i32
@fixed_regs = external global [53 x i8]
@pic_offset_table_rtx = common global %struct.rtx_def* null, align 8
@mode_size = external constant [59 x i8]
@.str = private unnamed_addr constant [11 x i8] c"emit-rtl.c\00", align 1
@__FUNCTION__.gen_rtx_SUBREG = private unnamed_addr constant [15 x i8] c"gen_rtx_SUBREG\00", align 1
@rtx_format = external constant [153 x i8*]
@__FUNCTION__.gen_rtx = private unnamed_addr constant [8 x i8] c"gen_rtx\00", align 1
@cfun = external global %struct.function*
@no_new_pseudos = external global i32
@__FUNCTION__.gen_reg_rtx = private unnamed_addr constant [12 x i8] c"gen_reg_rtx\00", align 1
@generating_concat_p = external global i32
@mode_class = external constant [59 x i32]
@mode_unit_size = external constant [59 x i8]
@__FUNCTION__.mark_user_reg = private unnamed_addr constant [14 x i8] c"mark_user_reg\00", align 1
@last_label_num = internal unnamed_addr global i32 0, align 4
@label_num = internal unnamed_addr global i32 1, align 4
@base_label_num = internal unnamed_addr global i32 0, align 4
@__FUNCTION__.subreg_hard_regno = private unnamed_addr constant [18 x i8] c"subreg_hard_regno\00", align 1
@mode_bitsize = external constant [59 x i16]
@__FUNCTION__.gen_lowpart_common = private unnamed_addr constant [19 x i8] c"gen_lowpart_common\00", align 1
@.str1 = private unnamed_addr constant [62 x i8] c"can't access imaginary part of complex value in hard register\00", align 1
@__FUNCTION__.subreg_realpart_p = private unnamed_addr constant [18 x i8] c"subreg_realpart_p\00", align 1
@__FUNCTION__.gen_lowpart = private unnamed_addr constant [12 x i8] c"gen_lowpart\00", align 1
@__FUNCTION__.gen_highpart = private unnamed_addr constant [13 x i8] c"gen_highpart\00", align 1
@__FUNCTION__.gen_highpart_mode = private unnamed_addr constant [18 x i8] c"gen_highpart_mode\00", align 1
@__FUNCTION__.subreg_highpart_offset = private unnamed_addr constant [23 x i8] c"subreg_highpart_offset\00", align 1
@__FUNCTION__.constant_subword = private unnamed_addr constant [17 x i8] c"constant_subword\00", align 1
@word_mode = common global i32 0, align 4
@__FUNCTION__.operand_subword = private unnamed_addr constant [16 x i8] c"operand_subword\00", align 1
@reload_completed = external global i32
@__FUNCTION__.operand_subword_force = private unnamed_addr constant [22 x i8] c"operand_subword_force\00", align 1
@const_tiny_rtx = common global [3 x [59 x %struct.rtx_def*]] zeroinitializer, align 16
@tree_code_type = external global [256 x i8]
@__FUNCTION__.set_mem_attributes = private unnamed_addr constant [19 x i8] c"set_mem_attributes\00", align 1
@lang_hooks = external constant %struct.lang_hooks
@global_trees = external global [51 x %union.tree_node*]
@sizetype_tab = external global [6 x %union.tree_node*]
@rtx_class = external constant [153 x i8]
@__FUNCTION__.copy_most_rtx = private unnamed_addr constant [14 x i8] c"copy_most_rtx\00", align 1
@__FUNCTION__.set_last_insn = private unnamed_addr constant [14 x i8] c"set_last_insn\00", align 1
@flag_renumber_insns = external global i32
@.str2 = private unnamed_addr constant [27 x i8] c"Renumbering insn %d to %d\0A\00", align 1
@__FUNCTION__.try_split = private unnamed_addr constant [10 x i8] c"try_split\00", align 1
@flag_non_call_exceptions = external global i32
@optimize = external global i32
@__FUNCTION__.add_insn_after = private unnamed_addr constant [15 x i8] c"add_insn_after\00", align 1
@basic_block_for_insn = external global %struct.varray_head_tag*
@__FUNCTION__.add_insn_before = private unnamed_addr constant [16 x i8] c"add_insn_before\00", align 1
@__FUNCTION__.remove_insn = private unnamed_addr constant [12 x i8] c"remove_insn\00", align 1
@__FUNCTION__.remove_unnecessary_notes = private unnamed_addr constant [25 x i8] c"remove_unnecessary_notes\00", align 1
@debug_hooks = external global %struct.gcc_debug_hooks*
@no_line_numbers = internal unnamed_addr global i32 0, align 4
@__FUNCTION__.emit_insns_after = private unnamed_addr constant [17 x i8] c"emit_insns_after\00", align 1
@__FUNCTION__.set_unique_reg_note = private unnamed_addr constant [20 x i8] c"set_unique_reg_note\00", align 1
@__FUNCTION__.push_to_full_sequence = private unnamed_addr constant [22 x i8] c"push_to_full_sequence\00", align 1
@sequence_result = internal unnamed_addr global [5 x %struct.rtx_def*] zeroinitializer, align 16
@copy_insn_n_scratches = internal unnamed_addr global i32 0, align 4
@copy_insn_scratch_in = internal unnamed_addr global [30 x %struct.rtx_def*] zeroinitializer, align 16
@copy_insn_scratch_out = internal unnamed_addr global [30 x %struct.rtx_def*] zeroinitializer, align 16
@orig_asm_constraints_vector = internal unnamed_addr global %struct.rtvec_def* null, align 8
@copy_asm_constraints_vector = internal unnamed_addr global %struct.rtvec_def* null, align 8
@orig_asm_operands_vector = internal unnamed_addr global %struct.rtvec_def* null, align 8
@copy_asm_operands_vector = internal unnamed_addr global %struct.rtvec_def* null, align 8
@__FUNCTION__.copy_insn_1 = private unnamed_addr constant [12 x i8] c"copy_insn_1\00", align 1
@ggc_pending_trees = external global %struct.varray_head_tag*
@mem_attrs_htab = internal unnamed_addr global %struct.htab* null, align 8
@byte_mode = common global i32 0, align 4
@class_narrowest_mode = external constant [9 x i32]
@mode_wider_mode = external constant [59 x i8]
@ptr_mode = common global i32 0, align 4
@const_true_rtx = common global %struct.rtx_def* null, align 8
@dconst0 = common global %struct.realvaluetype zeroinitializer, align 8
@.str3 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@dconst1 = common global %struct.realvaluetype zeroinitializer, align 8
@.str4 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@dconst2 = common global %struct.realvaluetype zeroinitializer, align 8
@.str5 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@dconstm1 = common global %struct.realvaluetype zeroinitializer, align 8
@.str6 = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@struct_value_rtx = common global %struct.rtx_def* null, align 8
@struct_value_incoming_rtx = common global %struct.rtx_def* null, align 8
@static_chain_rtx = common global %struct.rtx_def* null, align 8
@static_chain_incoming_rtx = common global %struct.rtx_def* null, align 8
@return_address_pointer_rtx = common global %struct.rtx_def* null, align 8
@double_mode = common global i32 0, align 4
@inner_mode_array = external constant [59 x i32]
@__FUNCTION__.gen_const_vector_0 = private unnamed_addr constant [19 x i8] c"gen_const_vector_0\00", align 1
@__FUNCTION__.change_address_1 = private unnamed_addr constant [17 x i8] c"change_address_1\00", align 1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_raw_REG(i32 %mode, i32 %regno) #0 {
entry:
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %mode, i32 %regno) #4
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  store i32 %regno, i32* %rtuint, align 4, !tbaa !1
  ret %struct.rtx_def* %call
}

declare %struct.rtx_def* @gen_rtx_fmt_i0(i32, i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rtx_CONST_INT(i32 %mode, i64 %arg) #0 {
entry:
  %arg.addr = alloca i64, align 8
  store i64 %arg, i64* %arg.addr, align 8, !tbaa !5
  %arg.off = add i64 %arg, 64
  %0 = icmp ult i64 %arg.off, 129
  br i1 %0, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off
  %1 = load %struct.rtx_def** %arrayidx, align 8, !tbaa !7
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %3 = bitcast i64* %arg.addr to i8*
  %conv = trunc i64 %arg to i32
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %2, i8* %3, i32 %conv, i32 1) #4
  %4 = load i8** %call, align 8, !tbaa !7
  %cmp2 = icmp eq i8* %4, null
  br i1 %cmp2, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %5 = load i64* %arg.addr, align 8, !tbaa !5
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %5) #4
  %6 = bitcast %struct.rtx_def* %call5 to i8*
  store i8* %6, i8** %call, align 8, !tbaa !7
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %7 = phi i8* [ %6, %if.then4 ], [ %4, %if.end ]
  %8 = bitcast i8* %7 to %struct.rtx_def*
  br label %return

return:                                           ; preds = %if.end6, %if.then
  %retval.0 = phi %struct.rtx_def* [ %1, %if.then ], [ %8, %if.end6 ]
  ret %struct.rtx_def* %retval.0
}

declare i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_w(i32, i32, i64) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_int_mode(i64 %c, i32 %mode) #0 {
entry:
  %arg.addr.i = alloca i64, align 8
  %call = call i64 @trunc_int_for_mode(i64 %c, i32 %mode) #4
  %0 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #4
  store i64 %call, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %call, 64
  %1 = icmp ult i64 %arg.off.i, 129
  br i1 %1, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %2 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %gen_rtx_CONST_INT.exit

if.end.i:                                         ; preds = %entry
  %3 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = trunc i64 %call to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %3, i8* %0, i32 %conv.i, i32 1) #4
  %4 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %4, null
  br i1 %cmp2.i, label %if.then4.i, label %if.end6.i

if.then4.i:                                       ; preds = %if.end.i
  %5 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %5) #4
  %6 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %6, i8** %call.i, align 8, !tbaa !7
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then4.i, %if.end.i
  %7 = phi i8* [ %6, %if.then4.i ], [ %4, %if.end.i ]
  %8 = bitcast i8* %7 to %struct.rtx_def*
  br label %gen_rtx_CONST_INT.exit

gen_rtx_CONST_INT.exit:                           ; preds = %if.then.i, %if.end6.i
  %retval.0.i = phi %struct.rtx_def* [ %2, %if.then.i ], [ %8, %if.end6.i ]
  call void @llvm.lifetime.end(i64 8, i8* %0) #4
  ret %struct.rtx_def* %retval.0.i
}

declare i64 @trunc_int_for_mode(i64, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rtx_CONST_DOUBLE(i32 %mode, i64 %arg0, i64 %arg1) #0 {
entry:
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 55) #4
  %0 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.value = shl i32 %mode, 16
  %bf.shl = and i32 %bf.value, 16711680
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %0, align 8
  %1 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0, i32 0
  store i64 0, i64* %1, align 8, !tbaa !7
  %rtwint = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1, i32 0
  store i64 %arg0, i64* %rtwint, align 8, !tbaa !5
  %rtwint5 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 2, i32 0
  store i64 %arg1, i64* %rtwint5, align 8, !tbaa !5
  %2 = load i8* getelementptr inbounds ([153 x i8]* @rtx_length, i64 0, i64 55), align 1, !tbaa !9
  %conv = zext i8 %2 to i32
  %i.017 = add nsw i32 %conv, -1
  %cmp18 = icmp sgt i32 %i.017, 2
  br i1 %cmp18, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %3 = zext i8 %2 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv.in = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv, %for.body ]
  %i.019 = phi i32 [ %i.017, %for.body.lr.ph ], [ %i.0, %for.body ]
  %indvars.iv = add i64 %indvars.iv.in, -1
  %rtwint9 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 %indvars.iv, i32 0
  store i64 0, i64* %rtwint9, align 8, !tbaa !5
  %i.0 = add nsw i32 %i.019, -1
  %cmp = icmp sgt i32 %i.0, 2
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret %struct.rtx_def* %call
}

declare %struct.rtx_def* @rtx_alloc(i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rtx_REG(i32 %mode, i32 %regno) #0 {
entry:
  %0 = load i32* @target_flags, align 4, !tbaa !1
  %and = and i32 %0, 33554432
  %tobool = icmp eq i32 %and, 0
  %1 = lshr exact i32 %and, 25
  %2 = or i32 %1, 4
  %cmp = icmp ne i32 %2, %mode
  %3 = load i32* @reload_in_progress, align 4
  %tobool1 = icmp ne i32 %3, 0
  %or.cond = or i1 %cmp, %tobool1
  br i1 %or.cond, label %if.end30, label %if.then

if.then:                                          ; preds = %entry
  switch i32 %regno, label %if.end9 [
    i32 20, label %if.then3
    i32 6, label %if.then5
    i32 16, label %if.then8
  ]

if.then3:                                         ; preds = %if.then
  %4 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !tbaa !7
  br label %return

if.then5:                                         ; preds = %if.then
  %5 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !tbaa !7
  br label %return

if.then8:                                         ; preds = %if.then
  %6 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !tbaa !7
  br label %return

if.end9:                                          ; preds = %if.then
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end9
  %7 = load i32* @flag_pic, align 4, !tbaa !1
  %lnot = icmp eq i32 %7, 0
  %phitmp = select i1 %lnot, i32 -1, i32 3
  br label %lor.end

lor.end:                                          ; preds = %if.end9, %lor.rhs
  %8 = phi i32 [ -1, %if.end9 ], [ %phitmp, %lor.rhs ]
  %cmp14 = icmp eq i32 %8, %regno
  br i1 %cmp14, label %land.lhs.true15, label %if.end25

land.lhs.true15:                                  ; preds = %lor.end
  br i1 %tobool, label %lor.rhs18, label %lor.end21

lor.rhs18:                                        ; preds = %land.lhs.true15
  %9 = load i32* @flag_pic, align 4, !tbaa !1
  %lnot20 = icmp eq i32 %9, 0
  %phitmp38 = select i1 %lnot20, i64 4294967295, i64 3
  br label %lor.end21

lor.end21:                                        ; preds = %land.lhs.true15, %lor.rhs18
  %10 = phi i64 [ 4294967295, %land.lhs.true15 ], [ %phitmp38, %lor.rhs18 ]
  %arrayidx = getelementptr inbounds [53 x i8]* @fixed_regs, i64 0, i64 %10
  %11 = load i8* %arrayidx, align 1, !tbaa !9
  %tobool23 = icmp eq i8 %11, 0
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %lor.end21
  %12 = load %struct.rtx_def** @pic_offset_table_rtx, align 8, !tbaa !7
  br label %return

if.end25:                                         ; preds = %lor.end21, %lor.end
  %cmp26 = icmp eq i32 %regno, 7
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %if.end25
  %13 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !tbaa !7
  br label %return

if.end30:                                         ; preds = %if.end25, %entry
  %call.i = tail call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %mode, i32 %regno) #4
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 1
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %regno, i32* %rtuint.i, align 4, !tbaa !1
  br label %return

return:                                           ; preds = %if.end30, %if.then28, %if.then24, %if.then8, %if.then5, %if.then3
  %retval.0 = phi %struct.rtx_def* [ %call.i, %if.end30 ], [ %4, %if.then3 ], [ %5, %if.then5 ], [ %6, %if.then8 ], [ %12, %if.then24 ], [ %13, %if.then28 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rtx_MEM(i32 %mode, %struct.rtx_def* %addr) #0 {
entry:
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_e0(i32 66, i32 %mode, %struct.rtx_def* %addr) #4
  %0 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1, i32 0
  store i64 0, i64* %0, align 8, !tbaa !7
  ret %struct.rtx_def* %call
}

declare %struct.rtx_def* @gen_rtx_fmt_e0(i32, i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rtx_SUBREG(i32 %mode, %struct.rtx_def* %reg, i32 %offset) #0 {
entry:
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %0 = load i8* %arrayidx, align 1, !tbaa !9
  %conv = zext i8 %0 to i32
  %rem = srem i32 %offset, %conv
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 456, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.gen_rtx_SUBREG, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_ei(i32 63, i32 %mode, %struct.rtx_def* %reg, i32 %offset) #4
  ret %struct.rtx_def* %call
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #2

declare %struct.rtx_def* @gen_rtx_fmt_ei(i32, i32, %struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lowpart_SUBREG(i32 %mode, %struct.rtx_def* %reg) #0 {
entry:
  %call.i = tail call %struct.rtx_def* @gen_rtx_fmt_ei(i32 63, i32 %mode, %struct.rtx_def* %reg, i32 0) #4
  ret %struct.rtx_def* %call.i
}

; Function Attrs: nounwind readnone uwtable
define i32 @subreg_lowpart_offset(i32 %outermode, i32 %innermode) #3 {
entry:
  ret i32 0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_rtx(i32 %code, i32 %mode, ...) #0 {
entry:
  %arg.addr.i = alloca i64, align 8
  %p = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %p to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  switch i32 %code, label %sw.default [
    i32 54, label %sw.bb
    i32 55, label %sw.bb3
    i32 61, label %sw.bb29
    i32 66, label %sw.bb43
  ]

sw.bb:                                            ; preds = %entry
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %gp_offset = load i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %sw.bb
  %0 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %reg_save_area = load i8** %0, align 16
  %1 = sext i32 %gp_offset to i64
  %2 = getelementptr i8* %reg_save_area, i64 %1
  %3 = add i32 %gp_offset, 8
  store i32 %3, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %2, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to i64*
  %4 = load i64* %vaarg.addr, align 8
  %5 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #4
  store i64 %4, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %4, 64
  %6 = icmp ult i64 %arg.off.i, 129
  br i1 %6, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %vaarg.end
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %7 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %sw.epilog174

if.end.i:                                         ; preds = %vaarg.end
  %8 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = trunc i64 %4 to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %8, i8* %5, i32 %conv.i, i32 1) #4
  %9 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %9, null
  br i1 %cmp2.i, label %if.then4.i, label %if.end6.i

if.then4.i:                                       ; preds = %if.end.i
  %10 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %10) #4
  %11 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %11, i8** %call.i, align 8, !tbaa !7
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then4.i, %if.end.i
  %12 = phi i8* [ %11, %if.then4.i ], [ %9, %if.end.i ]
  %13 = bitcast i8* %12 to %struct.rtx_def*
  br label %sw.epilog174

sw.bb3:                                           ; preds = %entry
  %gp_offset_p5 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %gp_offset6 = load i32* %gp_offset_p5, align 16
  %fits_in_gp7 = icmp ult i32 %gp_offset6, 41
  br i1 %fits_in_gp7, label %vaarg.end14, label %vaarg.end14.thread

vaarg.end14.thread:                               ; preds = %sw.bb3
  %overflow_arg_area_p11 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  %overflow_arg_area12 = load i8** %overflow_arg_area_p11, align 8
  %overflow_arg_area.next13 = getelementptr i8* %overflow_arg_area12, i64 8
  store i8* %overflow_arg_area.next13, i8** %overflow_arg_area_p11, align 8
  %vaarg.addr15217 = bitcast i8* %overflow_arg_area12 to i64*
  %14 = load i64* %vaarg.addr15217, align 8
  br label %vaarg.in_mem22

vaarg.end14:                                      ; preds = %sw.bb3
  %15 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %reg_save_area9 = load i8** %15, align 16
  %16 = sext i32 %gp_offset6 to i64
  %17 = getelementptr i8* %reg_save_area9, i64 %16
  %18 = add i32 %gp_offset6, 8
  store i32 %18, i32* %gp_offset_p5, align 16
  %vaarg.addr15 = bitcast i8* %17 to i64*
  %19 = load i64* %vaarg.addr15, align 8
  %fits_in_gp19 = icmp ult i32 %18, 41
  br i1 %fits_in_gp19, label %vaarg.in_reg20, label %vaarg.in_mem22

vaarg.in_reg20:                                   ; preds = %vaarg.end14
  %20 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %reg_save_area21 = load i8** %20, align 16
  %21 = sext i32 %18 to i64
  %22 = getelementptr i8* %reg_save_area21, i64 %21
  %23 = add i32 %gp_offset6, 16
  store i32 %23, i32* %gp_offset_p5, align 16
  br label %vaarg.end26

vaarg.in_mem22:                                   ; preds = %vaarg.end14.thread, %vaarg.end14
  %24 = phi i64 [ %14, %vaarg.end14.thread ], [ %19, %vaarg.end14 ]
  %overflow_arg_area_p23 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  %overflow_arg_area24 = load i8** %overflow_arg_area_p23, align 8
  %overflow_arg_area.next25 = getelementptr i8* %overflow_arg_area24, i64 8
  store i8* %overflow_arg_area.next25, i8** %overflow_arg_area_p23, align 8
  br label %vaarg.end26

vaarg.end26:                                      ; preds = %vaarg.in_mem22, %vaarg.in_reg20
  %25 = phi i64 [ %19, %vaarg.in_reg20 ], [ %24, %vaarg.in_mem22 ]
  %vaarg.addr27.in = phi i8* [ %22, %vaarg.in_reg20 ], [ %overflow_arg_area24, %vaarg.in_mem22 ]
  %vaarg.addr27 = bitcast i8* %vaarg.addr27.in to i64*
  %26 = load i64* %vaarg.addr27, align 8
  %call.i204 = call %struct.rtx_def* @rtx_alloc(i32 55) #4
  %27 = getelementptr inbounds %struct.rtx_def* %call.i204, i64 0, i32 0
  %bf.load.i = load i32* %27, align 8
  %bf.value.i = shl i32 %mode, 16
  %bf.shl.i = and i32 %bf.value.i, 16711680
  %bf.clear.i = and i32 %bf.load.i, -16711681
  %bf.set.i = or i32 %bf.clear.i, %bf.shl.i
  store i32 %bf.set.i, i32* %27, align 8
  %28 = getelementptr inbounds %struct.rtx_def* %call.i204, i64 0, i32 1, i64 0, i32 0
  store i64 0, i64* %28, align 8, !tbaa !7
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %call.i204, i64 0, i32 1, i64 1, i32 0
  store i64 %25, i64* %rtwint.i, align 8, !tbaa !5
  %rtwint5.i = getelementptr inbounds %struct.rtx_def* %call.i204, i64 0, i32 1, i64 2, i32 0
  store i64 %26, i64* %rtwint5.i, align 8, !tbaa !5
  %29 = load i8* getelementptr inbounds ([153 x i8]* @rtx_length, i64 0, i64 55), align 1, !tbaa !9
  %conv.i205 = zext i8 %29 to i32
  %i.017.i = add nsw i32 %conv.i205, -1
  %cmp18.i = icmp sgt i32 %i.017.i, 2
  br i1 %cmp18.i, label %for.body.lr.ph.i, label %sw.epilog174

for.body.lr.ph.i:                                 ; preds = %vaarg.end26
  %30 = zext i8 %29 to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %indvars.iv.in.i = phi i64 [ %30, %for.body.lr.ph.i ], [ %indvars.iv.i, %for.body.i ]
  %i.019.i = phi i32 [ %i.017.i, %for.body.lr.ph.i ], [ %i.0.i, %for.body.i ]
  %indvars.iv.i = add i64 %indvars.iv.in.i, -1
  %rtwint9.i = getelementptr inbounds %struct.rtx_def* %call.i204, i64 0, i32 1, i64 %indvars.iv.i, i32 0
  store i64 0, i64* %rtwint9.i, align 8, !tbaa !5
  %i.0.i = add nsw i32 %i.019.i, -1
  %cmp.i = icmp sgt i32 %i.0.i, 2
  br i1 %cmp.i, label %for.body.i, label %sw.epilog174

sw.bb29:                                          ; preds = %entry
  %gp_offset_p31 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %gp_offset32 = load i32* %gp_offset_p31, align 16
  %fits_in_gp33 = icmp ult i32 %gp_offset32, 41
  br i1 %fits_in_gp33, label %vaarg.in_reg34, label %vaarg.in_mem36

vaarg.in_reg34:                                   ; preds = %sw.bb29
  %31 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %reg_save_area35 = load i8** %31, align 16
  %32 = sext i32 %gp_offset32 to i64
  %33 = getelementptr i8* %reg_save_area35, i64 %32
  %34 = add i32 %gp_offset32, 8
  store i32 %34, i32* %gp_offset_p31, align 16
  br label %vaarg.end40

vaarg.in_mem36:                                   ; preds = %sw.bb29
  %overflow_arg_area_p37 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  %overflow_arg_area38 = load i8** %overflow_arg_area_p37, align 8
  %overflow_arg_area.next39 = getelementptr i8* %overflow_arg_area38, i64 8
  store i8* %overflow_arg_area.next39, i8** %overflow_arg_area_p37, align 8
  br label %vaarg.end40

vaarg.end40:                                      ; preds = %vaarg.in_mem36, %vaarg.in_reg34
  %vaarg.addr41.in = phi i8* [ %33, %vaarg.in_reg34 ], [ %overflow_arg_area38, %vaarg.in_mem36 ]
  %vaarg.addr41 = bitcast i8* %vaarg.addr41.in to i32*
  %35 = load i32* %vaarg.addr41, align 4
  %36 = load i32* @target_flags, align 4, !tbaa !1
  %and.i = and i32 %36, 33554432
  %tobool.i = icmp eq i32 %and.i, 0
  %37 = lshr exact i32 %and.i, 25
  %38 = or i32 %37, 4
  %cmp.i206 = icmp ne i32 %38, %mode
  %39 = load i32* @reload_in_progress, align 4
  %tobool1.i = icmp ne i32 %39, 0
  %or.cond.i = or i1 %cmp.i206, %tobool1.i
  br i1 %or.cond.i, label %if.end30.i, label %if.then.i207

if.then.i207:                                     ; preds = %vaarg.end40
  switch i32 %35, label %if.end9.i [
    i32 20, label %if.then3.i
    i32 6, label %if.then5.i
    i32 16, label %if.then8.i
  ]

if.then3.i:                                       ; preds = %if.then.i207
  %40 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !tbaa !7
  br label %sw.epilog174

if.then5.i:                                       ; preds = %if.then.i207
  %41 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !tbaa !7
  br label %sw.epilog174

if.then8.i:                                       ; preds = %if.then.i207
  %42 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !tbaa !7
  br label %sw.epilog174

if.end9.i:                                        ; preds = %if.then.i207
  br i1 %tobool.i, label %lor.rhs.i, label %lor.end.i

lor.rhs.i:                                        ; preds = %if.end9.i
  %43 = load i32* @flag_pic, align 4, !tbaa !1
  %lnot.i = icmp eq i32 %43, 0
  %phitmp.i = select i1 %lnot.i, i32 -1, i32 3
  br label %lor.end.i

lor.end.i:                                        ; preds = %lor.rhs.i, %if.end9.i
  %44 = phi i32 [ -1, %if.end9.i ], [ %phitmp.i, %lor.rhs.i ]
  %cmp14.i = icmp eq i32 %44, %35
  br i1 %cmp14.i, label %land.lhs.true15.i, label %if.end25.i

land.lhs.true15.i:                                ; preds = %lor.end.i
  br i1 %tobool.i, label %lor.rhs18.i, label %lor.end21.i

lor.rhs18.i:                                      ; preds = %land.lhs.true15.i
  %45 = load i32* @flag_pic, align 4, !tbaa !1
  %lnot20.i = icmp eq i32 %45, 0
  %phitmp38.i = select i1 %lnot20.i, i64 4294967295, i64 3
  br label %lor.end21.i

lor.end21.i:                                      ; preds = %lor.rhs18.i, %land.lhs.true15.i
  %46 = phi i64 [ 4294967295, %land.lhs.true15.i ], [ %phitmp38.i, %lor.rhs18.i ]
  %arrayidx.i208 = getelementptr inbounds [53 x i8]* @fixed_regs, i64 0, i64 %46
  %47 = load i8* %arrayidx.i208, align 1, !tbaa !9
  %tobool23.i = icmp eq i8 %47, 0
  br i1 %tobool23.i, label %if.end25.i, label %if.then24.i

if.then24.i:                                      ; preds = %lor.end21.i
  %48 = load %struct.rtx_def** @pic_offset_table_rtx, align 8, !tbaa !7
  br label %sw.epilog174

if.end25.i:                                       ; preds = %lor.end21.i, %lor.end.i
  %cmp26.i = icmp eq i32 %35, 7
  br i1 %cmp26.i, label %if.then28.i, label %if.end30.i

if.then28.i:                                      ; preds = %if.end25.i
  %49 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !tbaa !7
  br label %sw.epilog174

if.end30.i:                                       ; preds = %if.end25.i, %vaarg.end40
  %call.i.i = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %mode, i32 %35) #4
  %arrayidx.i.i = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 1
  %rtuint.i.i = bitcast %union.rtunion_def* %arrayidx.i.i to i32*
  store i32 %35, i32* %rtuint.i.i, align 4, !tbaa !1
  br label %sw.epilog174

sw.bb43:                                          ; preds = %entry
  %gp_offset_p45 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %gp_offset46 = load i32* %gp_offset_p45, align 16
  %fits_in_gp47 = icmp ult i32 %gp_offset46, 41
  br i1 %fits_in_gp47, label %vaarg.in_reg48, label %vaarg.in_mem50

vaarg.in_reg48:                                   ; preds = %sw.bb43
  %50 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %reg_save_area49 = load i8** %50, align 16
  %51 = sext i32 %gp_offset46 to i64
  %52 = getelementptr i8* %reg_save_area49, i64 %51
  %53 = add i32 %gp_offset46, 8
  store i32 %53, i32* %gp_offset_p45, align 16
  br label %vaarg.end54

vaarg.in_mem50:                                   ; preds = %sw.bb43
  %overflow_arg_area_p51 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  %overflow_arg_area52 = load i8** %overflow_arg_area_p51, align 8
  %overflow_arg_area.next53 = getelementptr i8* %overflow_arg_area52, i64 8
  store i8* %overflow_arg_area.next53, i8** %overflow_arg_area_p51, align 8
  br label %vaarg.end54

vaarg.end54:                                      ; preds = %vaarg.in_mem50, %vaarg.in_reg48
  %vaarg.addr55.in = phi i8* [ %52, %vaarg.in_reg48 ], [ %overflow_arg_area52, %vaarg.in_mem50 ]
  %vaarg.addr55 = bitcast i8* %vaarg.addr55.in to %struct.rtx_def**
  %54 = load %struct.rtx_def** %vaarg.addr55, align 8
  %call.i210 = call %struct.rtx_def* @gen_rtx_fmt_e0(i32 66, i32 %mode, %struct.rtx_def* %54) #4
  %55 = getelementptr inbounds %struct.rtx_def* %call.i210, i64 0, i32 1, i64 1, i32 0
  store i64 0, i64* %55, align 8, !tbaa !7
  br label %sw.epilog174

sw.default:                                       ; preds = %entry
  %call57 = call %struct.rtx_def* @rtx_alloc(i32 %code) #4
  %56 = getelementptr inbounds %struct.rtx_def* %call57, i64 0, i32 0
  %bf.load = load i32* %56, align 8
  %bf.value = shl i32 %mode, 16
  %bf.shl = and i32 %bf.value, 16711680
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %56, align 8
  %idxprom = sext i32 %code to i64
  %arrayidx59 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom
  %57 = load i8* %arrayidx59, align 1, !tbaa !9
  %cmp213 = icmp eq i8 %57, 0
  br i1 %cmp213, label %sw.epilog174, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.default
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom
  %58 = load i8** %arrayidx, align 8, !tbaa !7
  %gp_offset_p64 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %59 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %overflow_arg_area_p70 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %fmt.0214 = phi i8* [ %58, %for.body.lr.ph ], [ %incdec.ptr, %for.inc ]
  %incdec.ptr = getelementptr inbounds i8* %fmt.0214, i64 1
  %60 = load i8* %fmt.0214, align 1, !tbaa !9
  %conv61 = sext i8 %60 to i32
  switch i32 %conv61, label %sw.default173 [
    i32 48, label %for.inc
    i32 105, label %sw.bb62
    i32 119, label %sw.bb77
    i32 115, label %sw.bb93
    i32 101, label %sw.bb109
    i32 117, label %sw.bb109
    i32 69, label %sw.bb125
    i32 98, label %sw.bb141
    i32 116, label %sw.bb157
  ]

sw.bb62:                                          ; preds = %for.body
  %gp_offset65 = load i32* %gp_offset_p64, align 16
  %fits_in_gp66 = icmp ult i32 %gp_offset65, 41
  br i1 %fits_in_gp66, label %vaarg.in_reg67, label %vaarg.in_mem69

vaarg.in_reg67:                                   ; preds = %sw.bb62
  %reg_save_area68 = load i8** %59, align 16
  %61 = sext i32 %gp_offset65 to i64
  %62 = getelementptr i8* %reg_save_area68, i64 %61
  %63 = add i32 %gp_offset65, 8
  store i32 %63, i32* %gp_offset_p64, align 16
  br label %vaarg.end73

vaarg.in_mem69:                                   ; preds = %sw.bb62
  %overflow_arg_area71 = load i8** %overflow_arg_area_p70, align 8
  %overflow_arg_area.next72 = getelementptr i8* %overflow_arg_area71, i64 8
  store i8* %overflow_arg_area.next72, i8** %overflow_arg_area_p70, align 8
  br label %vaarg.end73

vaarg.end73:                                      ; preds = %vaarg.in_mem69, %vaarg.in_reg67
  %vaarg.addr74.in = phi i8* [ %62, %vaarg.in_reg67 ], [ %overflow_arg_area71, %vaarg.in_mem69 ]
  %vaarg.addr74 = bitcast i8* %vaarg.addr74.in to i32*
  %64 = load i32* %vaarg.addr74, align 4
  %arrayidx76 = getelementptr inbounds %struct.rtx_def* %call57, i64 0, i32 1, i64 %indvars.iv
  %rtint = bitcast %union.rtunion_def* %arrayidx76 to i32*
  store i32 %64, i32* %rtint, align 4, !tbaa !1
  br label %for.inc

sw.bb77:                                          ; preds = %for.body
  %gp_offset80 = load i32* %gp_offset_p64, align 16
  %fits_in_gp81 = icmp ult i32 %gp_offset80, 41
  br i1 %fits_in_gp81, label %vaarg.in_reg82, label %vaarg.in_mem84

vaarg.in_reg82:                                   ; preds = %sw.bb77
  %reg_save_area83 = load i8** %59, align 16
  %65 = sext i32 %gp_offset80 to i64
  %66 = getelementptr i8* %reg_save_area83, i64 %65
  %67 = add i32 %gp_offset80, 8
  store i32 %67, i32* %gp_offset_p64, align 16
  br label %vaarg.end88

vaarg.in_mem84:                                   ; preds = %sw.bb77
  %overflow_arg_area86 = load i8** %overflow_arg_area_p70, align 8
  %overflow_arg_area.next87 = getelementptr i8* %overflow_arg_area86, i64 8
  store i8* %overflow_arg_area.next87, i8** %overflow_arg_area_p70, align 8
  br label %vaarg.end88

vaarg.end88:                                      ; preds = %vaarg.in_mem84, %vaarg.in_reg82
  %vaarg.addr89.in = phi i8* [ %66, %vaarg.in_reg82 ], [ %overflow_arg_area86, %vaarg.in_mem84 ]
  %vaarg.addr89 = bitcast i8* %vaarg.addr89.in to i64*
  %68 = load i64* %vaarg.addr89, align 8
  %rtwint = getelementptr inbounds %struct.rtx_def* %call57, i64 0, i32 1, i64 %indvars.iv, i32 0
  store i64 %68, i64* %rtwint, align 8, !tbaa !5
  br label %for.inc

sw.bb93:                                          ; preds = %for.body
  %gp_offset96 = load i32* %gp_offset_p64, align 16
  %fits_in_gp97 = icmp ult i32 %gp_offset96, 41
  br i1 %fits_in_gp97, label %vaarg.in_reg98, label %vaarg.in_mem100

vaarg.in_reg98:                                   ; preds = %sw.bb93
  %reg_save_area99 = load i8** %59, align 16
  %69 = sext i32 %gp_offset96 to i64
  %70 = getelementptr i8* %reg_save_area99, i64 %69
  %71 = add i32 %gp_offset96, 8
  store i32 %71, i32* %gp_offset_p64, align 16
  br label %vaarg.end104

vaarg.in_mem100:                                  ; preds = %sw.bb93
  %overflow_arg_area102 = load i8** %overflow_arg_area_p70, align 8
  %overflow_arg_area.next103 = getelementptr i8* %overflow_arg_area102, i64 8
  store i8* %overflow_arg_area.next103, i8** %overflow_arg_area_p70, align 8
  br label %vaarg.end104

vaarg.end104:                                     ; preds = %vaarg.in_mem100, %vaarg.in_reg98
  %vaarg.addr105.in = phi i8* [ %70, %vaarg.in_reg98 ], [ %overflow_arg_area102, %vaarg.in_mem100 ]
  %vaarg.addr105 = bitcast i8* %vaarg.addr105.in to i8**
  %72 = load i8** %vaarg.addr105, align 8
  %73 = getelementptr inbounds %struct.rtx_def* %call57, i64 0, i32 1, i64 %indvars.iv, i32 0
  %.c203 = ptrtoint i8* %72 to i64
  store i64 %.c203, i64* %73, align 8, !tbaa !7
  br label %for.inc

sw.bb109:                                         ; preds = %for.body, %for.body
  %gp_offset112 = load i32* %gp_offset_p64, align 16
  %fits_in_gp113 = icmp ult i32 %gp_offset112, 41
  br i1 %fits_in_gp113, label %vaarg.in_reg114, label %vaarg.in_mem116

vaarg.in_reg114:                                  ; preds = %sw.bb109
  %reg_save_area115 = load i8** %59, align 16
  %74 = sext i32 %gp_offset112 to i64
  %75 = getelementptr i8* %reg_save_area115, i64 %74
  %76 = add i32 %gp_offset112, 8
  store i32 %76, i32* %gp_offset_p64, align 16
  br label %vaarg.end120

vaarg.in_mem116:                                  ; preds = %sw.bb109
  %overflow_arg_area118 = load i8** %overflow_arg_area_p70, align 8
  %overflow_arg_area.next119 = getelementptr i8* %overflow_arg_area118, i64 8
  store i8* %overflow_arg_area.next119, i8** %overflow_arg_area_p70, align 8
  br label %vaarg.end120

vaarg.end120:                                     ; preds = %vaarg.in_mem116, %vaarg.in_reg114
  %vaarg.addr121.in = phi i8* [ %75, %vaarg.in_reg114 ], [ %overflow_arg_area118, %vaarg.in_mem116 ]
  %vaarg.addr121 = bitcast i8* %vaarg.addr121.in to %struct.rtx_def**
  %77 = load %struct.rtx_def** %vaarg.addr121, align 8
  %78 = getelementptr inbounds %struct.rtx_def* %call57, i64 0, i32 1, i64 %indvars.iv, i32 0
  %.c202 = ptrtoint %struct.rtx_def* %77 to i64
  store i64 %.c202, i64* %78, align 8, !tbaa !7
  br label %for.inc

sw.bb125:                                         ; preds = %for.body
  %gp_offset128 = load i32* %gp_offset_p64, align 16
  %fits_in_gp129 = icmp ult i32 %gp_offset128, 41
  br i1 %fits_in_gp129, label %vaarg.in_reg130, label %vaarg.in_mem132

vaarg.in_reg130:                                  ; preds = %sw.bb125
  %reg_save_area131 = load i8** %59, align 16
  %79 = sext i32 %gp_offset128 to i64
  %80 = getelementptr i8* %reg_save_area131, i64 %79
  %81 = add i32 %gp_offset128, 8
  store i32 %81, i32* %gp_offset_p64, align 16
  br label %vaarg.end136

vaarg.in_mem132:                                  ; preds = %sw.bb125
  %overflow_arg_area134 = load i8** %overflow_arg_area_p70, align 8
  %overflow_arg_area.next135 = getelementptr i8* %overflow_arg_area134, i64 8
  store i8* %overflow_arg_area.next135, i8** %overflow_arg_area_p70, align 8
  br label %vaarg.end136

vaarg.end136:                                     ; preds = %vaarg.in_mem132, %vaarg.in_reg130
  %vaarg.addr137.in = phi i8* [ %80, %vaarg.in_reg130 ], [ %overflow_arg_area134, %vaarg.in_mem132 ]
  %vaarg.addr137 = bitcast i8* %vaarg.addr137.in to %struct.rtvec_def**
  %82 = load %struct.rtvec_def** %vaarg.addr137, align 8
  %83 = getelementptr inbounds %struct.rtx_def* %call57, i64 0, i32 1, i64 %indvars.iv, i32 0
  %.c201 = ptrtoint %struct.rtvec_def* %82 to i64
  store i64 %.c201, i64* %83, align 8, !tbaa !7
  br label %for.inc

sw.bb141:                                         ; preds = %for.body
  %gp_offset144 = load i32* %gp_offset_p64, align 16
  %fits_in_gp145 = icmp ult i32 %gp_offset144, 41
  br i1 %fits_in_gp145, label %vaarg.in_reg146, label %vaarg.in_mem148

vaarg.in_reg146:                                  ; preds = %sw.bb141
  %reg_save_area147 = load i8** %59, align 16
  %84 = sext i32 %gp_offset144 to i64
  %85 = getelementptr i8* %reg_save_area147, i64 %84
  %86 = add i32 %gp_offset144, 8
  store i32 %86, i32* %gp_offset_p64, align 16
  br label %vaarg.end152

vaarg.in_mem148:                                  ; preds = %sw.bb141
  %overflow_arg_area150 = load i8** %overflow_arg_area_p70, align 8
  %overflow_arg_area.next151 = getelementptr i8* %overflow_arg_area150, i64 8
  store i8* %overflow_arg_area.next151, i8** %overflow_arg_area_p70, align 8
  br label %vaarg.end152

vaarg.end152:                                     ; preds = %vaarg.in_mem148, %vaarg.in_reg146
  %vaarg.addr153.in = phi i8* [ %85, %vaarg.in_reg146 ], [ %overflow_arg_area150, %vaarg.in_mem148 ]
  %vaarg.addr153 = bitcast i8* %vaarg.addr153.in to %struct.bitmap_head_def**
  %87 = load %struct.bitmap_head_def** %vaarg.addr153, align 8
  %88 = getelementptr inbounds %struct.rtx_def* %call57, i64 0, i32 1, i64 %indvars.iv, i32 0
  %.c200 = ptrtoint %struct.bitmap_head_def* %87 to i64
  store i64 %.c200, i64* %88, align 8, !tbaa !7
  br label %for.inc

sw.bb157:                                         ; preds = %for.body
  %gp_offset160 = load i32* %gp_offset_p64, align 16
  %fits_in_gp161 = icmp ult i32 %gp_offset160, 41
  br i1 %fits_in_gp161, label %vaarg.in_reg162, label %vaarg.in_mem164

vaarg.in_reg162:                                  ; preds = %sw.bb157
  %reg_save_area163 = load i8** %59, align 16
  %89 = sext i32 %gp_offset160 to i64
  %90 = getelementptr i8* %reg_save_area163, i64 %89
  %91 = add i32 %gp_offset160, 8
  store i32 %91, i32* %gp_offset_p64, align 16
  br label %vaarg.end168

vaarg.in_mem164:                                  ; preds = %sw.bb157
  %overflow_arg_area166 = load i8** %overflow_arg_area_p70, align 8
  %overflow_arg_area.next167 = getelementptr i8* %overflow_arg_area166, i64 8
  store i8* %overflow_arg_area.next167, i8** %overflow_arg_area_p70, align 8
  br label %vaarg.end168

vaarg.end168:                                     ; preds = %vaarg.in_mem164, %vaarg.in_reg162
  %vaarg.addr169.in = phi i8* [ %90, %vaarg.in_reg162 ], [ %overflow_arg_area166, %vaarg.in_mem164 ]
  %vaarg.addr169 = bitcast i8* %vaarg.addr169.in to %union.tree_node**
  %92 = load %union.tree_node** %vaarg.addr169, align 8
  %93 = getelementptr inbounds %struct.rtx_def* %call57, i64 0, i32 1, i64 %indvars.iv, i32 0
  %.c = ptrtoint %union.tree_node* %92 to i64
  store i64 %.c, i64* %93, align 8, !tbaa !7
  br label %for.inc

sw.default173:                                    ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 589, i8* getelementptr inbounds ([8 x i8]* @__FUNCTION__.gen_rtx, i64 0, i64 0)) #8
  unreachable

for.inc:                                          ; preds = %for.body, %vaarg.end73, %vaarg.end88, %vaarg.end104, %vaarg.end120, %vaarg.end136, %vaarg.end152, %vaarg.end168
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %conv = zext i8 %57 to i32
  %94 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %94, %conv
  br i1 %cmp, label %for.body, label %sw.epilog174

sw.epilog174:                                     ; preds = %for.body.i, %for.inc, %sw.default, %if.end6.i, %if.then.i, %if.end30.i, %if.then28.i, %if.then24.i, %if.then8.i, %if.then5.i, %if.then3.i, %vaarg.end26, %vaarg.end54
  %rt_val.0 = phi %struct.rtx_def* [ %call.i210, %vaarg.end54 ], [ %call.i204, %vaarg.end26 ], [ %call.i.i, %if.end30.i ], [ %40, %if.then3.i ], [ %41, %if.then5.i ], [ %42, %if.then8.i ], [ %48, %if.then24.i ], [ %49, %if.then28.i ], [ %7, %if.then.i ], [ %13, %if.end6.i ], [ %call57, %sw.default ], [ %call57, %for.inc ], [ %call.i204, %for.body.i ]
  call void @llvm.va_end(i8* %arraydecay1)
  ret %struct.rtx_def* %rt_val.0
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

; Function Attrs: nounwind uwtable
define %struct.rtvec_def* @gen_rtvec(i32 %n, ...) #0 {
entry:
  %p = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %p to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %n to i64
  %0 = alloca %struct.rtx_def*, i64 %conv, align 1
  %cmp213 = icmp sgt i32 %n, 0
  br i1 %cmp213, label %for.body.lr.ph, label %if.end.i.thread

if.end.i.thread:                                  ; preds = %if.end
  call void @llvm.va_end(i8* %arraydecay1)
  %call.i20 = call %struct.rtvec_def* @rtvec_alloc(i32 %n) #4
  br label %return

for.body.lr.ph:                                   ; preds = %if.end
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  %gp_offset.pre = load i32* %gp_offset_p, align 16
  br label %for.body

for.body:                                         ; preds = %vaarg.end, %for.body.lr.ph
  %gp_offset = phi i32 [ %gp_offset.pre, %for.body.lr.ph ], [ %gp_offset18, %vaarg.end ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %vaarg.end ]
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %for.body
  %reg_save_area = load i8** %1, align 16
  %2 = sext i32 %gp_offset to i64
  %3 = getelementptr i8* %reg_save_area, i64 %2
  %4 = add i32 %gp_offset, 8
  store i32 %4, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %gp_offset18 = phi i32 [ %4, %vaarg.in_reg ], [ %gp_offset, %vaarg.in_mem ]
  %vaarg.addr.in = phi i8* [ %3, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to %struct.rtx_def**
  %5 = load %struct.rtx_def** %vaarg.addr, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def** %0, i64 %indvars.iv
  store %struct.rtx_def* %5, %struct.rtx_def** %arrayidx, align 8, !tbaa !7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv16 = trunc i64 %indvars.iv.next to i32
  %exitcond17 = icmp eq i32 %lftr.wideiv16, %n
  br i1 %exitcond17, label %if.end.i, label %for.body

if.end.i:                                         ; preds = %vaarg.end
  call void @llvm.va_end(i8* %arraydecay1)
  %call.i = call %struct.rtvec_def* @rtvec_alloc(i32 %n) #4
  br i1 %cmp213, label %for.body.i, label %return

for.body.i:                                       ; preds = %if.end.i, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %if.end.i ]
  %argp.addr.08.i = phi %struct.rtx_def** [ %incdec.ptr.i, %for.body.i ], [ %0, %if.end.i ]
  %incdec.ptr.i = getelementptr inbounds %struct.rtx_def** %argp.addr.08.i, i64 1
  %6 = load %struct.rtx_def** %argp.addr.08.i, align 8, !tbaa !7
  %arrayidx.i = getelementptr inbounds %struct.rtvec_def* %call.i, i64 0, i32 1, i64 %indvars.iv.i
  store %struct.rtx_def* %6, %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %n
  br i1 %exitcond, label %return, label %for.body.i

return:                                           ; preds = %for.body.i, %if.end.i.thread, %if.end.i, %entry
  %retval.0 = phi %struct.rtvec_def* [ null, %entry ], [ %call.i, %if.end.i ], [ %call.i20, %if.end.i.thread ], [ %call.i, %for.body.i ]
  ret %struct.rtvec_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtvec_def* @gen_rtvec_v(i32 %n, %struct.rtx_def** nocapture readonly %argp) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = tail call %struct.rtvec_def* @rtvec_alloc(i32 %n) #4
  %cmp17 = icmp sgt i32 %n, 0
  br i1 %cmp17, label %for.body, label %return

for.body:                                         ; preds = %if.end, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.end ]
  %argp.addr.08 = phi %struct.rtx_def** [ %incdec.ptr, %for.body ], [ %argp, %if.end ]
  %incdec.ptr = getelementptr inbounds %struct.rtx_def** %argp.addr.08, i64 1
  %0 = load %struct.rtx_def** %argp.addr.08, align 8, !tbaa !7
  %arrayidx = getelementptr inbounds %struct.rtvec_def* %call, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8, !tbaa !7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %n
  br i1 %exitcond, label %return, label %for.body

return:                                           ; preds = %for.body, %if.end, %entry
  %retval.0 = phi %struct.rtvec_def* [ null, %entry ], [ %call, %if.end ], [ %call, %for.body ]
  ret %struct.rtvec_def* %retval.0
}

declare %struct.rtvec_def* @rtvec_alloc(i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_reg_rtx(i32 %mode) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %1 = load i32* @no_new_pseudos, align 4, !tbaa !1
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 662, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.gen_reg_rtx, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i32* @generating_concat_p, align 4, !tbaa !1
  %tobool1 = icmp eq i32 %2, 0
  br i1 %tobool1, label %if.end15, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %3 = load i32* %arrayidx, align 4, !tbaa !9
  %.off = add i32 %3, -5
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %if.then5, label %if.end15

if.then5:                                         ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom
  %4 = load i8* %arrayidx7, align 1, !tbaa !9
  %conv = zext i8 %4 to i32
  %mul = shl nuw nsw i32 %conv, 3
  %cmp10 = icmp eq i32 %3, 6
  %cond = select i1 %cmp10, i32 2, i32 1
  %call = tail call i32 @mode_for_size(i32 %mul, i32 %cond, i32 0) #4
  %call12 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %call)
  %call13 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %call)
  %call14 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 65, i32 %mode, %struct.rtx_def* %call12, %struct.rtx_def* %call13) #4
  ret %struct.rtx_def* %call14

if.end15:                                         ; preds = %land.lhs.true, %if.end
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %5 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_reg_rtx_no = getelementptr inbounds %struct.emit_status* %5, i64 0, i32 0
  %6 = load i32* %x_reg_rtx_no, align 4, !tbaa !13
  %regno_pointer_align_length = getelementptr inbounds %struct.emit_status* %5, i64 0, i32 9
  %7 = load i32* %regno_pointer_align_length, align 4, !tbaa !15
  %cmp17 = icmp eq i32 %6, %7
  br i1 %cmp17, label %if.then19, label %if.end54

if.then19:                                        ; preds = %if.end15
  %regno_pointer_align = getelementptr inbounds %struct.emit_status* %5, i64 0, i32 10
  %8 = load i8** %regno_pointer_align, align 8, !tbaa !16
  %mul23 = shl nsw i32 %6, 1
  %conv24 = sext i32 %mul23 to i64
  %call25 = tail call i8* @xrealloc(i8* %8, i64 %conv24) #4
  %idx.ext = sext i32 %6 to i64
  %add.ptr = getelementptr inbounds i8* %call25, i64 %idx.ext
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr, i8 0, i64 %idx.ext, i32 1, i1 false)
  %9 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_pointer_align28 = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 10
  store i8* %call25, i8** %regno_pointer_align28, align 8, !tbaa !16
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 12
  %10 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !tbaa !17
  %11 = bitcast %struct.rtx_def** %10 to i8*
  %mul32 = shl nsw i64 %conv24, 3
  %call33 = tail call i8* @xrealloc(i8* %11, i64 %mul32) #4
  %12 = bitcast i8* %call33 to %struct.rtx_def**
  %add.ptr35 = getelementptr inbounds %struct.rtx_def** %12, i64 %idx.ext
  %13 = bitcast %struct.rtx_def** %add.ptr35 to i8*
  %mul37 = shl nsw i64 %idx.ext, 3
  tail call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 %mul37, i32 8, i1 false)
  %14 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit38 = getelementptr inbounds %struct.function* %14, i64 0, i32 3
  %15 = load %struct.emit_status** %emit38, align 8, !tbaa !10
  %x_regno_reg_rtx39 = getelementptr inbounds %struct.emit_status* %15, i64 0, i32 12
  store %struct.rtx_def** %12, %struct.rtx_def*** %x_regno_reg_rtx39, align 8, !tbaa !17
  %16 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_decl = getelementptr inbounds %struct.emit_status* %16, i64 0, i32 11
  %17 = load %union.tree_node*** %regno_decl, align 8, !tbaa !18
  %18 = bitcast %union.tree_node** %17 to i8*
  %call44 = tail call i8* @xrealloc(i8* %18, i64 %mul32) #4
  %19 = bitcast i8* %call44 to %union.tree_node**
  %add.ptr46 = getelementptr inbounds %union.tree_node** %19, i64 %idx.ext
  %20 = bitcast %union.tree_node** %add.ptr46 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %20, i8 0, i64 %mul37, i32 8, i1 false)
  %21 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_decl50 = getelementptr inbounds %struct.emit_status* %21, i64 0, i32 11
  store %union.tree_node** %19, %union.tree_node*** %regno_decl50, align 8, !tbaa !18
  %regno_pointer_align_length53 = getelementptr inbounds %struct.emit_status* %21, i64 0, i32 9
  store i32 %mul23, i32* %regno_pointer_align_length53, align 4, !tbaa !15
  %.pre = load %struct.function** @cfun, align 8, !tbaa !7
  %emit55.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 3
  %.pre90 = load %struct.emit_status** %emit55.phi.trans.insert, align 8, !tbaa !10
  %x_reg_rtx_no56.phi.trans.insert = getelementptr inbounds %struct.emit_status* %.pre90, i64 0, i32 0
  %.pre91 = load i32* %x_reg_rtx_no56.phi.trans.insert, align 4, !tbaa !13
  br label %if.end54

if.end54:                                         ; preds = %if.then19, %if.end15
  %22 = phi i32 [ %.pre91, %if.then19 ], [ %6, %if.end15 ]
  %call.i = tail call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %mode, i32 %22) #4
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 1
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 %22, i32* %rtuint.i, align 4, !tbaa !1
  %23 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit58 = getelementptr inbounds %struct.function* %23, i64 0, i32 3
  %24 = load %struct.emit_status** %emit58, align 8, !tbaa !10
  %x_reg_rtx_no59 = getelementptr inbounds %struct.emit_status* %24, i64 0, i32 0
  %25 = load i32* %x_reg_rtx_no59, align 4, !tbaa !13
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %x_reg_rtx_no59, align 4, !tbaa !13
  %idxprom60 = sext i32 %25 to i64
  %x_regno_reg_rtx62 = getelementptr inbounds %struct.emit_status* %24, i64 0, i32 12
  %26 = load %struct.rtx_def*** %x_regno_reg_rtx62, align 8, !tbaa !17
  %arrayidx63 = getelementptr inbounds %struct.rtx_def** %26, i64 %idxprom60
  store %struct.rtx_def* %call.i, %struct.rtx_def** %arrayidx63, align 8, !tbaa !7
  ret %struct.rtx_def* %call.i
}

declare i32 @mode_for_size(i32, i32, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_ee(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define void @mark_user_reg(%struct.rtx_def* nocapture %reg) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.else16 [
    i32 65, label %if.then
    i32 61, label %if.then12
  ]

if.then:                                          ; preds = %entry
  %fld = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load1 = load i32* %2, align 8
  %bf.set = or i32 %bf.load1, 134217728
  store i32 %bf.set, i32* %2, align 8
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 1
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx5, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load6 = load i32* %4, align 8
  %bf.set8 = or i32 %bf.load6, 134217728
  store i32 %bf.set8, i32* %4, align 8
  br label %if.end17

if.then12:                                        ; preds = %entry
  %bf.set15 = or i32 %bf.load, 134217728
  store i32 %bf.set15, i32* %0, align 8
  br label %if.end17

if.else16:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 732, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.mark_user_reg, i64 0, i64 0)) #8
  unreachable

if.end17:                                         ; preds = %if.then12, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @mark_reg_pointer(%struct.rtx_def* nocapture %reg, i32 %align) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %tobool = icmp slt i32 %bf.load, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %bf.set = or i32 %bf.load, -2147483648
  store i32 %bf.set, i32* %0, align 8
  %tobool2 = icmp eq i32 %align, 0
  br i1 %tobool2, label %if.end25, label %if.then3

if.then3:                                         ; preds = %if.then
  %conv = trunc i32 %align to i8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !1
  %idxprom = zext i32 %1 to i64
  %2 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %2, i64 0, i32 3
  %3 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_pointer_align = getelementptr inbounds %struct.emit_status* %3, i64 0, i32 10
  %4 = load i8** %regno_pointer_align, align 8, !tbaa !16
  %arrayidx4 = getelementptr inbounds i8* %4, i64 %idxprom
  store i8 %conv, i8* %arrayidx4, align 1, !tbaa !9
  br label %if.end25

if.else:                                          ; preds = %entry
  %tobool5 = icmp eq i32 %align, 0
  br i1 %tobool5, label %if.end25, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtuint8 = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %5 = load i32* %rtuint8, align 4, !tbaa !1
  %idxprom9 = zext i32 %5 to i64
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit10 = getelementptr inbounds %struct.function* %6, i64 0, i32 3
  %7 = load %struct.emit_status** %emit10, align 8, !tbaa !10
  %regno_pointer_align11 = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 10
  %8 = load i8** %regno_pointer_align11, align 8, !tbaa !16
  %arrayidx12 = getelementptr inbounds i8* %8, i64 %idxprom9
  %9 = load i8* %arrayidx12, align 1, !tbaa !9
  %conv13 = zext i8 %9 to i32
  %cmp = icmp sgt i32 %conv13, %align
  br i1 %cmp, label %if.then15, label %if.end25

if.then15:                                        ; preds = %land.lhs.true
  %conv16 = trunc i32 %align to i8
  store i8 %conv16, i8* %arrayidx12, align 1, !tbaa !9
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then, %land.lhs.true, %if.then15, %if.then3
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i32 @max_reg_num() #5 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_reg_rtx_no = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 0
  %2 = load i32* %x_reg_rtx_no, align 4, !tbaa !13
  ret i32 %2
}

; Function Attrs: nounwind readonly uwtable
define i32 @max_label_num() #5 {
entry:
  %0 = load i32* @last_label_num, align 4, !tbaa !1
  %tobool = icmp ne i32 %0, 0
  %.pre = load i32* @label_num, align 4, !tbaa !1
  %1 = load i32* @base_label_num, align 4
  %cmp = icmp eq i32 %.pre, %1
  %or.cond = and i1 %tobool, %cmp
  %retval.0 = select i1 %or.cond, i32 %0, i32 %.pre
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @get_first_label_num() #5 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_label_num = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 1
  %2 = load i32* %x_first_label_num, align 4, !tbaa !19
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define i32 @subreg_hard_regno(%struct.rtx_def* %x, i32 %check_mode) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %fld = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %bf.clear2 = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear2, 63
  br i1 %cmp, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load3 = load i32* %2, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 61
  br i1 %cmp5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 796, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.subreg_hard_regno, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %3 = load i32* %rtuint, align 4, !tbaa !1
  %cmp8 = icmp ugt i32 %3, 52
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 799, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.subreg_hard_regno, i64 0, i64 0)) #8
  unreachable

if.end10:                                         ; preds = %if.end
  %tobool = icmp eq i32 %check_mode, 0
  br i1 %tobool, label %if.end16, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end10
  %bf.lshr12 = lshr i32 %bf.load3, 16
  %bf.clear13 = and i32 %bf.lshr12, 255
  %call = tail call i32 @ix86_hard_regno_mode_ok(i32 %3, i32 %bf.clear13) #4
  %tobool14 = icmp eq i32 %call, 0
  br i1 %tobool14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 801, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.subreg_hard_regno, i64 0, i64 0)) #8
  unreachable

if.end16:                                         ; preds = %land.lhs.true, %if.end10
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtuint19 = bitcast %union.rtunion_def* %arrayidx18 to i32*
  %4 = load i32* %rtuint19, align 4, !tbaa !1
  %idxprom33 = zext i32 %bf.clear to i64
  %arrayidx20 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom33
  %5 = load i8* %arrayidx20, align 1, !tbaa !9
  %conv = zext i8 %5 to i32
  %rem = urem i32 %4, %conv
  %cmp21 = icmp eq i32 %rem, 0
  br i1 %cmp21, label %if.end24, label %if.then23

if.then23:                                        ; preds = %if.end16
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 806, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.subreg_hard_regno, i64 0, i64 0)) #8
  unreachable

if.end24:                                         ; preds = %if.end16
  %call25 = tail call i32 @subreg_regno(%struct.rtx_def* %x) #4
  ret i32 %call25
}

declare i32 @ix86_hard_regno_mode_ok(i32, i32) #1

declare i32 @subreg_regno(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lowpart_common(i32 %mode, %struct.rtx_def* %x) #0 {
entry:
  %arg.addr.i536 = alloca i64, align 8
  %arg.addr.i = alloca i64, align 8
  %r = alloca %struct.realvaluetype, align 8
  %r273 = alloca %struct.realvaluetype, align 8
  %i275 = alloca [2 x i64], align 16
  %r322 = alloca %struct.realvaluetype, align 8
  %i324 = alloca [4 x i64], align 16
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %0 = load i8* %arrayidx, align 1, !tbaa !9
  %conv = zext i8 %0 to i32
  %1 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom1528 = zext i32 %bf.clear to i64
  %arrayidx2 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom1528
  %2 = load i8* %arrayidx2, align 1, !tbaa !9
  %conv3 = zext i8 %2 to i32
  %cmp = icmp eq i32 %bf.clear, %mode
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp11 = icmp eq i32 %bf.clear, 0
  br i1 %cmp11, label %if.end28, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %3, 23
  %4 = and i32 %and, 4
  %5 = add i32 %4, 4
  %sub533 = or i32 %4, 3
  %add = add nsw i32 %sub533, %conv
  %div = sdiv i32 %add, %5
  %add20 = add nsw i32 %sub533, %conv3
  %div24 = sdiv i32 %add20, %5
  %cmp25 = icmp sgt i32 %div, %div24
  br i1 %cmp25, label %return, label %if.end28

if.end28:                                         ; preds = %if.end, %land.lhs.true
  %arrayidx30 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %6 = load i32* %arrayidx30, align 4, !tbaa !9
  %cmp31 = icmp eq i32 %6, 2
  br i1 %cmp31, label %land.lhs.true33, label %if.end43

land.lhs.true33:                                  ; preds = %if.end28
  %bf.clear36 = and i32 %bf.load, 16711680
  %cmp37 = icmp ne i32 %bf.clear36, 0
  %cmp40 = icmp ugt i8 %0, %2
  %or.cond = and i1 %cmp37, %cmp40
  br i1 %or.cond, label %return, label %if.end43

if.end43:                                         ; preds = %land.lhs.true33, %if.end28
  %7 = and i32 %bf.load, 65534
  %switch = icmp eq i32 %7, 120
  br i1 %switch, label %land.lhs.true55, label %if.else117

land.lhs.true55:                                  ; preds = %if.end43
  switch i32 %6, label %if.else117 [
    i32 1, label %if.then65
    i32 3, label %if.then65
  ]

if.then65:                                        ; preds = %land.lhs.true55, %land.lhs.true55
  %arrayidx66 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load67 = load i32* %9, align 8
  %bf.lshr68 = lshr i32 %bf.load67, 16
  %bf.clear69 = and i32 %bf.lshr68, 255
  %cmp70 = icmp eq i32 %bf.clear69, %mode
  br i1 %cmp70, label %return, label %if.else

if.else:                                          ; preds = %if.then65
  %idxprom85531 = zext i32 %bf.clear69 to i64
  %arrayidx86 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom85531
  %10 = load i8* %arrayidx86, align 1, !tbaa !9
  %cmp88 = icmp ult i8 %0, %10
  br i1 %cmp88, label %if.then90, label %if.else95

if.then90:                                        ; preds = %if.else
  %call94 = call %struct.rtx_def* @gen_lowpart_common(i32 %mode, %struct.rtx_def* %8)
  br label %return

if.else95:                                        ; preds = %if.else
  %cmp105 = icmp ult i8 %0, %2
  br i1 %cmp105, label %if.then107, label %return

if.then107:                                       ; preds = %if.else95
  %bf.clear109 = and i32 %bf.load, 65535
  %call113 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 %bf.clear109, i32 %mode, %struct.rtx_def* %8) #4
  br label %return

if.else117:                                       ; preds = %if.end43, %land.lhs.true55
  %bf.clear119 = and i32 %bf.load, 65535
  switch i32 %bf.clear119, label %if.else137 [
    i32 63, label %if.then132
    i32 61, label %if.then132
    i32 65, label %if.then132
  ]

if.then132:                                       ; preds = %if.else117, %if.else117, %if.else117
  %call136 = call %struct.rtx_def* @simplify_gen_subreg(i32 %mode, %struct.rtx_def* %x, i32 %bf.clear, i32 0) #4
  br label %return

if.else137:                                       ; preds = %if.else117
  switch i32 %6, label %if.else223 [
    i32 1, label %land.lhs.true147
    i32 3, label %land.lhs.true147
  ]

land.lhs.true147:                                 ; preds = %if.else137, %if.else137
  %11 = and i32 %bf.load, 16777214
  %12 = icmp eq i32 %11, 54
  br i1 %12, label %if.then163, label %if.else223

if.then163:                                       ; preds = %land.lhs.true147
  %arrayidx165 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %13 = load i16* %arrayidx165, align 2, !tbaa !20
  %cmp167 = icmp ugt i16 %13, 127
  br i1 %cmp167, label %return, label %if.else170

if.else170:                                       ; preds = %if.then163
  %cmp174 = icmp ugt i16 %13, 64
  br i1 %cmp174, label %return, label %if.else177

if.else177:                                       ; preds = %if.else170
  %cmp181 = icmp eq i16 %13, 64
  %cmp186 = icmp eq i32 %bf.clear119, 54
  br i1 %cmp181, label %if.then183, label %if.else192

if.then183:                                       ; preds = %if.else177
  br i1 %cmp186, label %return, label %cond.false

cond.false:                                       ; preds = %if.then183
  %rtwint = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1, i32 0
  %14 = load i64* %rtwint, align 8, !tbaa !5
  %15 = bitcast i64* %arg.addr.i536 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #4
  store i64 %14, i64* %arg.addr.i536, align 8, !tbaa !5
  %arg.off.i537 = add i64 %14, 64
  %16 = icmp ult i64 %arg.off.i537, 129
  br i1 %16, label %if.then.i539, label %if.end.i543

if.then.i539:                                     ; preds = %cond.false
  %arrayidx.i538 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i537
  %17 = load %struct.rtx_def** %arrayidx.i538, align 8, !tbaa !7
  br label %return

if.end.i543:                                      ; preds = %cond.false
  %18 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i540 = trunc i64 %14 to i32
  %call.i541 = call i8** @htab_find_slot_with_hash(%struct.htab* %18, i8* %15, i32 %conv.i540, i32 1) #4
  %19 = load i8** %call.i541, align 8, !tbaa !7
  %cmp2.i542 = icmp eq i8* %19, null
  br i1 %cmp2.i542, label %if.then4.i545, label %if.end6.i546

if.then4.i545:                                    ; preds = %if.end.i543
  %20 = load i64* %arg.addr.i536, align 8, !tbaa !5
  %call5.i544 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %20) #4
  %21 = bitcast %struct.rtx_def* %call5.i544 to i8*
  store i8* %21, i8** %call.i541, align 8, !tbaa !7
  br label %if.end6.i546

if.end6.i546:                                     ; preds = %if.then4.i545, %if.end.i543
  %22 = phi i8* [ %21, %if.then4.i545 ], [ %19, %if.end.i543 ]
  %23 = bitcast i8* %22 to %struct.rtx_def*
  br label %return

if.else192:                                       ; preds = %if.else177
  %rtwint200 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0, i32 0
  %rtwint204 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1, i32 0
  %cond206.in = select i1 %cmp186, i64* %rtwint200, i64* %rtwint204
  %cond206 = load i64* %cond206.in, align 8
  %call207 = call i64 @trunc_int_for_mode(i64 %cond206, i32 %mode) #4
  %bf.load208 = load i32* %1, align 8
  %bf.clear209 = and i32 %bf.load208, 65535
  %cmp210 = icmp eq i32 %bf.clear209, 54
  br i1 %cmp210, label %land.lhs.true212, label %cond.false219

land.lhs.true212:                                 ; preds = %if.else192
  %24 = load i64* %rtwint200, align 8, !tbaa !5
  %cmp216 = icmp eq i64 %24, %call207
  br i1 %cmp216, label %return, label %cond.false219

cond.false219:                                    ; preds = %land.lhs.true212, %if.else192
  %25 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #4
  store i64 %call207, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %call207, 64
  %26 = icmp ult i64 %arg.off.i, 129
  br i1 %26, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.false219
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %27 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %return

if.end.i:                                         ; preds = %cond.false219
  %28 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = trunc i64 %call207 to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %28, i8* %25, i32 %conv.i, i32 1) #4
  %29 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %29, null
  br i1 %cmp2.i, label %if.then4.i, label %if.end6.i

if.then4.i:                                       ; preds = %if.end.i
  %30 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %30) #4
  %31 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %31, i8** %call.i, align 8, !tbaa !7
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then4.i, %if.end.i
  %32 = phi i8* [ %31, %if.then4.i ], [ %29, %if.end.i ]
  %33 = bitcast i8* %32 to %struct.rtx_def*
  br label %return

if.else223:                                       ; preds = %land.lhs.true147, %if.else137
  br i1 %cmp31, label %land.lhs.true228, label %if.else297

land.lhs.true228:                                 ; preds = %if.else223
  %arrayidx230 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %34 = load i16* %arrayidx230, align 2, !tbaa !20
  %cmp232 = icmp eq i16 %34, 32
  br i1 %cmp232, label %land.lhs.true234, label %land.lhs.true249

land.lhs.true234:                                 ; preds = %land.lhs.true228
  %cmp237 = icmp eq i32 %bf.clear119, 54
  br i1 %cmp237, label %if.then239, label %if.else244

if.then239:                                       ; preds = %land.lhs.true234
  %rtwint242 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0, i32 0
  %35 = load i64* %rtwint242, align 8, !tbaa !5
  call void @ereal_from_float(%struct.realvaluetype* sret %r, i64 %35) #4
  %call243 = call %struct.rtx_def* @immed_real_const_1(%struct.realvaluetype* byval align 8 %r, i32 %mode) #4
  br label %return

if.else244:                                       ; preds = %land.lhs.true234
  br i1 %cmp31, label %land.lhs.true249, label %if.else297

land.lhs.true249:                                 ; preds = %land.lhs.true228, %if.else244
  %arrayidx251 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %36 = load i16* %arrayidx251, align 2, !tbaa !20
  %cmp253 = icmp eq i16 %36, 64
  %37 = and i32 %bf.load, 16777214
  %38 = icmp eq i32 %37, 54
  %or.cond557 = and i1 %cmp253, %38
  br i1 %or.cond557, label %if.then271, label %if.else297

if.then271:                                       ; preds = %land.lhs.true249
  %cmp280 = icmp eq i32 %bf.clear119, 54
  %rtwint285 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0, i32 0
  %rtwint289 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1, i32 0
  %low.0.in = select i1 %cmp280, i64* %rtwint285, i64* %rtwint289
  %low.0 = load i64* %low.0.in, align 8
  %arrayidx294 = getelementptr inbounds [2 x i64]* %i275, i64 0, i64 0
  store i64 %low.0, i64* %arrayidx294, align 16, !tbaa !5
  call void @ereal_from_double(%struct.realvaluetype* sret %r273, i64* %arrayidx294) #4
  %call296 = call %struct.rtx_def* @immed_real_const_1(%struct.realvaluetype* byval align 8 %r273, i32 %mode) #4
  br label %return

if.else297:                                       ; preds = %if.else223, %land.lhs.true249, %if.else244
  switch i32 %6, label %return [
    i32 1, label %land.lhs.true307
    i32 3, label %land.lhs.true307
  ]

land.lhs.true307:                                 ; preds = %if.else297, %if.else297
  %cmp310 = icmp eq i32 %bf.clear119, 55
  br i1 %cmp310, label %land.lhs.true312, label %return

land.lhs.true312:                                 ; preds = %land.lhs.true307
  %arrayidx317 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom1528
  %39 = load i32* %arrayidx317, align 4, !tbaa !9
  %cmp318 = icmp eq i32 %39, 2
  br i1 %cmp318, label %if.then320, label %return

if.then320:                                       ; preds = %land.lhs.true312
  %rtwint329 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1, i32 0
  %u.sroa.0.0..sroa_cast = bitcast i64* %rtwint329 to i8*
  %r322552553 = bitcast %struct.realvaluetype* %r322 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %r322552553, i8* %u.sroa.0.0..sroa_cast, i64 24, i32 8, i1 false)
  %arrayidx334 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom1528
  %40 = load i16* %arrayidx334, align 2, !tbaa !20
  %conv335 = zext i16 %40 to i32
  switch i32 %conv335, label %sw.default [
    i32 32, label %sw.bb
    i32 64, label %sw.bb345
    i32 96, label %sw.bb356
    i32 128, label %sw.bb394
  ]

sw.bb:                                            ; preds = %if.then320
  %call336 = call i64 @etarsingle(%struct.realvaluetype* byval align 8 %r322) #4
  %arrayidx338 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 0
  store i64 %call336, i64* %arrayidx338, align 16, !tbaa !22
  %arrayidx339 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 1
  %41 = bitcast i64* %arrayidx339 to i8*
  call void @llvm.memset.p0i8.i64(i8* %41, i8 0, i64 24, i32 8, i1 false)
  br label %sw.epilog

sw.bb345:                                         ; preds = %if.then320
  %arraydecay346 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 0
  call void @etardouble(%struct.realvaluetype* byval align 8 %r322, i64* %arraydecay346) #4
  %arrayidx351 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 2
  %42 = bitcast i64* %arrayidx351 to i8*
  call void @llvm.memset.p0i8.i64(i8* %42, i8 0, i64 16, i32 16, i1 false)
  br label %sw.epilog

sw.bb356:                                         ; preds = %if.then320
  %43 = load i32* @target_flags, align 4, !tbaa !1
  %and357 = and i32 %43, 16777216
  %cmp370 = icmp eq i32 %and357, 0
  %arraydecay373 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 0
  br i1 %cmp370, label %cond.true372, label %cond.true382

cond.true372:                                     ; preds = %sw.bb356
  call void @etarldouble(%struct.realvaluetype* byval align 8 %r322, i64* %arraydecay373) #4
  br label %cond.end389

cond.true382:                                     ; preds = %sw.bb356
  call void @etartdouble(%struct.realvaluetype* byval align 8 %r322, i64* %arraydecay373) #4
  br label %cond.end389

cond.end389:                                      ; preds = %cond.true372, %cond.true382
  %arrayidx393 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 3
  store i64 0, i64* %arrayidx393, align 8, !tbaa !22
  br label %sw.epilog

sw.bb394:                                         ; preds = %if.then320
  %44 = load i32* @target_flags, align 4, !tbaa !1
  %and395 = and i32 %44, 16777216
  %cmp406 = icmp eq i32 %and395, 0
  %arraydecay409 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 0
  br i1 %cmp406, label %cond.true408, label %cond.true416

cond.true408:                                     ; preds = %sw.bb394
  call void @etarldouble(%struct.realvaluetype* byval align 8 %r322, i64* %arraydecay409) #4
  br label %sw.epilog

cond.true416:                                     ; preds = %sw.bb394
  call void @etartdouble(%struct.realvaluetype* byval align 8 %r322, i64* %arraydecay409) #4
  br label %sw.epilog

sw.default:                                       ; preds = %if.then320
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1075, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.gen_lowpart_common, i64 0, i64 0)) #8
  unreachable

sw.epilog:                                        ; preds = %cond.true416, %cond.true408, %cond.end389, %sw.bb345, %sw.bb
  %arrayidx424 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 0
  %45 = load i64* %arrayidx424, align 16, !tbaa !22
  %arrayidx427 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 1
  %46 = load i64* %arrayidx427, align 8, !tbaa !22
  %shl = shl i64 %46, 32
  %or = or i64 %shl, %45
  %arrayidx430 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 2
  %47 = load i64* %arrayidx430, align 16, !tbaa !22
  %arrayidx434 = getelementptr inbounds [4 x i64]* %i324, i64 0, i64 3
  %48 = load i64* %arrayidx434, align 8, !tbaa !22
  %shl435 = shl i64 %48, 32
  %or436 = or i64 %shl435, %47
  %call437 = call %struct.rtx_def* @immed_double_const(i64 %or, i64 %or436, i32 %mode) #4
  br label %return

return:                                           ; preds = %if.end6.i, %if.then.i, %if.end6.i546, %if.then.i539, %if.else95, %land.lhs.true312, %land.lhs.true307, %if.else297, %land.lhs.true212, %if.then183, %if.else170, %if.then163, %if.then65, %land.lhs.true33, %land.lhs.true, %entry, %sw.epilog, %if.then271, %if.then239, %if.then132, %if.then107, %if.then90
  %retval.0 = phi %struct.rtx_def* [ %call94, %if.then90 ], [ %call113, %if.then107 ], [ %call136, %if.then132 ], [ %call243, %if.then239 ], [ %call296, %if.then271 ], [ %call437, %sw.epilog ], [ %x, %entry ], [ null, %land.lhs.true ], [ null, %land.lhs.true33 ], [ %8, %if.then65 ], [ %x, %if.then163 ], [ null, %if.else170 ], [ %x, %if.then183 ], [ %x, %land.lhs.true212 ], [ null, %if.else297 ], [ null, %land.lhs.true307 ], [ null, %land.lhs.true312 ], [ null, %if.else95 ], [ %17, %if.then.i539 ], [ %23, %if.end6.i546 ], [ %27, %if.then.i ], [ %33, %if.end6.i ]
  ret %struct.rtx_def* %retval.0
}

declare %struct.rtx_def* @gen_rtx_fmt_e(i32, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @simplify_gen_subreg(i32, %struct.rtx_def*, i32, i32) #1

declare void @ereal_from_float(%struct.realvaluetype* sret, i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

declare %struct.rtx_def* @immed_real_const_1(%struct.realvaluetype* byval align 8, i32) #1

declare void @ereal_from_double(%struct.realvaluetype* sret, i64*) #1

declare i64 @etarsingle(%struct.realvaluetype* byval align 8) #1

declare void @etardouble(%struct.realvaluetype* byval align 8, i64*) #1

declare void @etarldouble(%struct.realvaluetype* byval align 8, i64*) #1

declare void @etartdouble(%struct.realvaluetype* byval align 8, i64*) #1

declare %struct.rtx_def* @immed_double_const(i64, i64, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_realpart(i32 %mode, %struct.rtx_def* %x) #0 {
entry:
  %call = tail call %struct.rtx_def* @gen_lowpart(i32 %mode, %struct.rtx_def* %x)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_lowpart(i32 %mode, %struct.rtx_def* %x) #0 {
entry:
  %call42 = tail call %struct.rtx_def* @gen_lowpart_common(i32 %mode, %struct.rtx_def* %x)
  %tobool43 = icmp eq %struct.rtx_def* %call42, null
  br i1 %tobool43, label %if.else, label %return

if.else:                                          ; preds = %entry, %if.then17
  %x.tr44 = phi %struct.rtx_def* [ %call20, %if.then17 ], [ %x, %entry ]
  %0 = getelementptr inbounds %struct.rtx_def* %x.tr44, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.else22 [
    i32 61, label %if.then1
    i32 66, label %if.then10
    i32 70, label %if.then17
  ]

if.then1:                                         ; preds = %if.else
  %call2 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %x.tr44) #4
  %call3 = tail call %struct.rtx_def* @gen_lowpart_common(i32 %mode, %struct.rtx_def* %call2)
  %cmp4 = icmp eq %struct.rtx_def* %call3, null
  br i1 %cmp4, label %if.then5, label %return

if.then5:                                         ; preds = %if.then1
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1175, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.gen_lowpart, i64 0, i64 0)) #8
  unreachable

if.then10:                                        ; preds = %if.else
  %call11 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %x.tr44, i32 %mode, i64 0, i32 1, i32 1)
  br label %return

if.then17:                                        ; preds = %if.else
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear19 = and i32 %bf.lshr, 255
  %call20 = tail call %struct.rtx_def* @force_reg(i32 %bf.clear19, %struct.rtx_def* %x.tr44) #4
  %call = tail call %struct.rtx_def* @gen_lowpart_common(i32 %mode, %struct.rtx_def* %call20)
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %if.else, label %return

if.else22:                                        ; preds = %if.else
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1197, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.gen_lowpart, i64 0, i64 0)) #8
  unreachable

return:                                           ; preds = %if.then17, %entry, %if.then1, %if.then10
  %retval.0 = phi %struct.rtx_def* [ %call11, %if.then10 ], [ %call3, %if.then1 ], [ %call42, %entry ], [ %call, %if.then17 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_imagpart(i32 %mode, %struct.rtx_def* %x) #0 {
entry:
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %0 = load i16* %arrayidx, align 2, !tbaa !20
  %conv = zext i16 %0 to i32
  %1 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %1, 20
  %2 = and i32 %and, 32
  %3 = add i32 %2, 32
  %cmp = icmp ult i32 %conv, %3
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %4 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 61
  br i1 %cmp2, label %land.lhs.true4, label %if.else

land.lhs.true4:                                   ; preds = %land.lhs.true
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx5 to i32*
  %5 = load i32* %rtuint, align 4, !tbaa !1
  %cmp6 = icmp ult i32 %5, 53
  br i1 %cmp6, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true4
  tail call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([62 x i8]* @.str1, i64 0, i64 0)) #8
  unreachable

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %call = tail call %struct.rtx_def* @gen_highpart(i32 %mode, %struct.rtx_def* %x)
  ret %struct.rtx_def* %call
}

; Function Attrs: noreturn
declare void @internal_error(i8*, ...) #2

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_highpart(i32 %mode, %struct.rtx_def* %x) #0 {
entry:
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %0 = load i8* %arrayidx, align 1, !tbaa !9
  %conv = zext i8 %0 to i32
  %1 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %1, 23
  %2 = and i32 %and, 4
  %3 = add i32 %2, 4
  %cmp = icmp ugt i32 %conv, %3
  %4 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom237 = zext i32 %bf.clear to i64
  %arrayidx3 = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom237
  %5 = load i8* %arrayidx3, align 1, !tbaa !9
  %cmp5 = icmp eq i8 %0, %5
  br i1 %cmp5, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1215, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.gen_highpart, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry, %land.lhs.true
  %bf.lshr8 = lshr i32 %bf.load, 16
  %bf.clear9 = and i32 %bf.lshr8, 255
  %idxprom.i42 = zext i32 %bf.clear9 to i64
  %arrayidx.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i42
  %6 = load i8* %arrayidx.i, align 1, !tbaa !9
  %conv.i = zext i8 %6 to i32
  %sub.i = sub nsw i32 %conv.i, %conv
  %cmp.i = icmp ult i8 %6, %0
  br i1 %cmp.i, label %if.then.i, label %subreg_highpart_offset.exit

if.then.i:                                        ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1278, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.subreg_highpart_offset, i64 0, i64 0)) #8
  unreachable

subreg_highpart_offset.exit:                      ; preds = %if.end
  %cmp11.i = icmp sgt i32 %sub.i, 0
  %sub..i = select i1 %cmp11.i, i32 %sub.i, i32 0
  %call13 = tail call %struct.rtx_def* @simplify_gen_subreg(i32 %mode, %struct.rtx_def* %x, i32 %bf.clear9, i32 %sub..i) #4
  %cmp14 = icmp eq %struct.rtx_def* %call13, null
  br i1 %cmp14, label %if.then25, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %subreg_highpart_offset.exit
  %7 = getelementptr inbounds %struct.rtx_def* %call13, i64 0, i32 0
  %bf.load17 = load i32* %7, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 66
  br i1 %cmp19, label %if.end23, label %if.end26

if.end23:                                         ; preds = %land.lhs.true16
  %call22 = tail call %struct.rtx_def* @validize_mem(%struct.rtx_def* %call13) #4
  %tobool24 = icmp eq %struct.rtx_def* %call22, null
  br i1 %tobool24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %subreg_highpart_offset.exit, %if.end23
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1227, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.gen_highpart, i64 0, i64 0)) #8
  unreachable

if.end26:                                         ; preds = %land.lhs.true16, %if.end23
  %result.041 = phi %struct.rtx_def* [ %call22, %if.end23 ], [ %call13, %land.lhs.true16 ]
  ret %struct.rtx_def* %result.041
}

; Function Attrs: nounwind uwtable
define i32 @subreg_realpart_p(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 63
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1148, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.subreg_realpart_p, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !1
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load3 = load i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load3, 16
  %bf.clear4 = and i32 %bf.lshr, 255
  %idxprom10 = zext i32 %bf.clear4 to i64
  %arrayidx5 = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom10
  %4 = load i8* %arrayidx5, align 1, !tbaa !9
  %conv = zext i8 %4 to i32
  %cmp6 = icmp ult i32 %1, %conv
  %conv7 = zext i1 %cmp6 to i32
  ret i32 %conv7
}

declare %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @adjust_address_1(%struct.rtx_def* readonly %memref, i32 %mode, i64 %offset, i32 %validate, i32 %adjust) #0 {
entry:
  %attrs.i = alloca %struct.mem_attrs, align 8
  %arg.addr.i242 = alloca i64, align 8
  %arg.addr.i229 = alloca i64, align 8
  %arg.addr.i216 = alloca i64, align 8
  %arg.addr.i = alloca i64, align 8
  %fld = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx2 to %struct.mem_attrs**
  %1 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp = icmp eq %struct.mem_attrs* %1, null
  br i1 %cmp, label %cond.end16, label %cond.true11

cond.true11:                                      ; preds = %entry
  %offset6 = getelementptr inbounds %struct.mem_attrs* %1, i64 0, i32 2
  %2 = load %struct.rtx_def** %offset6, align 8, !tbaa !24
  %align = getelementptr inbounds %struct.mem_attrs* %1, i64 0, i32 4
  %3 = load i32* %align, align 4, !tbaa !26
  br label %cond.end16

cond.end16:                                       ; preds = %entry, %cond.true11
  %cond261 = phi %struct.rtx_def* [ %2, %cond.true11 ], [ null, %entry ]
  %cond17 = phi i32 [ %3, %cond.true11 ], [ 8, %entry ]
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %0) #4
  %tobool = icmp eq i32 %adjust, 0
  br i1 %tobool, label %if.end43, label %if.then

if.then:                                          ; preds = %cond.end16
  %4 = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp18 = icmp eq i32 %bf.clear, 51
  br i1 %cmp18, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %5 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 0
  %bf.load19 = load i32* %5, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 135
  %cmp23 = icmp sgt i64 %offset, -1
  %or.cond = and i1 %cmp21, %cmp23
  br i1 %or.cond, label %land.lhs.true24, label %if.else

land.lhs.true24:                                  ; preds = %land.lhs.true
  %call28 = call i32 @get_mode_alignment(i32 %bf.clear) #4
  %div = lshr i32 %call28, 3
  %conv = zext i32 %div to i64
  %cmp29 = icmp ugt i64 %conv, %offset
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %land.lhs.true24
  %6 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %6, 25
  %7 = and i32 %and, 1
  %8 = or i32 %7, 4
  %fld34 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1
  %rtx36 = bitcast [1 x %union.rtunion_def]* %fld34 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx36, align 8, !tbaa !7
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx39, align 8, !tbaa !7
  %call40 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %10, i64 %offset) #4
  %call41 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 135, i32 %8, %struct.rtx_def* %9, %struct.rtx_def* %call40) #4
  br label %if.end43

if.else:                                          ; preds = %if.then, %land.lhs.true24, %land.lhs.true
  %call42 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %call, i64 %offset) #4
  br label %if.end43

if.end43:                                         ; preds = %cond.end16, %if.then31, %if.else
  %addr.0 = phi %struct.rtx_def* [ %call41, %if.then31 ], [ %call42, %if.else ], [ %call, %cond.end16 ]
  %call44 = call fastcc %struct.rtx_def* @change_address_1(%struct.rtx_def* %memref, i32 %mode, %struct.rtx_def* %addr.0, i32 %validate)
  %tobool45 = icmp eq %struct.rtx_def* %cond261, null
  br i1 %tobool45, label %if.end50, label %if.then46

if.then46:                                        ; preds = %if.end43
  %rtwint = getelementptr inbounds %struct.rtx_def* %cond261, i64 0, i32 1, i64 0, i32 0
  %11 = load i64* %rtwint, align 8, !tbaa !5
  %add = add nsw i64 %11, %offset
  %12 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #4
  store i64 %add, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %add, 64
  %13 = icmp ult i64 %arg.off.i, 129
  br i1 %13, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then46
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %14 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %if.end50

if.end.i:                                         ; preds = %if.then46
  %15 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = trunc i64 %add to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %15, i8* %12, i32 %conv.i, i32 1) #4
  %16 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %16, null
  br i1 %cmp2.i, label %if.then4.i, label %if.end6.i

if.then4.i:                                       ; preds = %if.end.i
  %17 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %17) #4
  %18 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %18, i8** %call.i, align 8, !tbaa !7
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then4.i, %if.end.i
  %19 = phi i8* [ %18, %if.then4.i ], [ %16, %if.end.i ]
  %20 = bitcast i8* %19 to %struct.rtx_def*
  br label %if.end50

if.end50:                                         ; preds = %if.end6.i, %if.then.i, %if.end43
  %memoffset.0 = phi %struct.rtx_def* [ null, %if.end43 ], [ %14, %if.then.i ], [ %20, %if.end6.i ]
  %cmp51 = icmp eq i64 %offset, 0
  br i1 %cmp51, label %if.end67, label %if.then53

if.then53:                                        ; preds = %if.end50
  %conv54 = zext i32 %cond17 to i64
  %sub = sub nsw i64 0, %offset
  %and55 = and i64 %offset, %sub
  %mul = shl i64 %and55, 3
  %cmp56 = icmp ult i64 %conv54, %mul
  %conv54.mul = select i1 %cmp56, i64 %conv54, i64 %mul
  %conv66 = trunc i64 %conv54.mul to i32
  br label %if.end67

if.end67:                                         ; preds = %if.end50, %if.then53
  %memalign.0 = phi i32 [ %conv66, %if.then53 ], [ %cond17, %if.end50 ]
  %21 = getelementptr inbounds %struct.rtx_def* %call44, i64 0, i32 0
  %bf.load68 = load i32* %21, align 8
  %bf.lshr69 = lshr i32 %bf.load68, 16
  %bf.clear70 = and i32 %bf.lshr69, 255
  %cmp71 = icmp eq i32 %bf.clear70, 51
  br i1 %cmp71, label %if.else80, label %if.then73

if.then73:                                        ; preds = %if.end67
  %idxprom215 = zext i32 %bf.clear70 to i64
  %arrayidx77 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom215
  %22 = load i8* %arrayidx77, align 1, !tbaa !9
  %conv78 = zext i8 %22 to i64
  %23 = bitcast i64* %arg.addr.i216 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #4
  store i64 %conv78, i64* %arg.addr.i216, align 8, !tbaa !5
  %arg.off.i217 = add i64 %conv78, 64
  %24 = icmp ult i64 %arg.off.i217, 129
  br i1 %24, label %if.then.i219, label %if.end.i223

if.then.i219:                                     ; preds = %if.then73
  %arrayidx.i218 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i217
  %25 = load %struct.rtx_def** %arrayidx.i218, align 8, !tbaa !7
  br label %if.end141

if.end.i223:                                      ; preds = %if.then73
  %26 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i220 = zext i8 %22 to i32
  %call.i221 = call i8** @htab_find_slot_with_hash(%struct.htab* %26, i8* %23, i32 %conv.i220, i32 1) #4
  %27 = load i8** %call.i221, align 8, !tbaa !7
  %cmp2.i222 = icmp eq i8* %27, null
  br i1 %cmp2.i222, label %if.then4.i225, label %if.end6.i226

if.then4.i225:                                    ; preds = %if.end.i223
  %28 = load i64* %arg.addr.i216, align 8, !tbaa !5
  %call5.i224 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %28) #4
  %29 = bitcast %struct.rtx_def* %call5.i224 to i8*
  store i8* %29, i8** %call.i221, align 8, !tbaa !7
  br label %if.end6.i226

if.end6.i226:                                     ; preds = %if.then4.i225, %if.end.i223
  %30 = phi i8* [ %29, %if.then4.i225 ], [ %27, %if.end.i223 ]
  %31 = bitcast i8* %30 to %struct.rtx_def*
  br label %if.end141

if.else80:                                        ; preds = %if.end67
  %32 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp84 = icmp eq %struct.mem_attrs* %32, null
  br i1 %cmp84, label %cond.false92, label %cond.true86

cond.true86:                                      ; preds = %if.else80
  %size90 = getelementptr inbounds %struct.mem_attrs* %32, i64 0, i32 3
  %33 = load %struct.rtx_def** %size90, align 8, !tbaa !27
  %tobool91 = icmp eq %struct.rtx_def* %33, null
  br i1 %tobool91, label %if.end141, label %cond.true114

cond.false92:                                     ; preds = %if.else80
  %34 = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 0
  %bf.load93 = load i32* %34, align 8
  %bf.lshr94 = lshr i32 %bf.load93, 16
  %bf.clear95 = and i32 %bf.lshr94, 255
  %cmp96 = icmp eq i32 %bf.clear95, 51
  br i1 %cmp96, label %if.end141, label %cond.true98

cond.true98:                                      ; preds = %cond.false92
  %idxprom102213 = zext i32 %bf.clear95 to i64
  %arrayidx103 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom102213
  %35 = load i8* %arrayidx103, align 1, !tbaa !9
  %conv104 = zext i8 %35 to i64
  %36 = bitcast i64* %arg.addr.i229 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %36) #4
  store i64 %conv104, i64* %arg.addr.i229, align 8, !tbaa !5
  %arg.off.i230 = add i64 %conv104, 64
  %37 = icmp ult i64 %arg.off.i230, 129
  br i1 %37, label %if.then.i232, label %if.end.i236

if.then.i232:                                     ; preds = %cond.true98
  %arrayidx.i231 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i230
  %38 = load %struct.rtx_def** %arrayidx.i231, align 8, !tbaa !7
  br label %gen_rtx_CONST_INT.exit241

if.end.i236:                                      ; preds = %cond.true98
  %39 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i233 = zext i8 %35 to i32
  %call.i234 = call i8** @htab_find_slot_with_hash(%struct.htab* %39, i8* %36, i32 %conv.i233, i32 1) #4
  %40 = load i8** %call.i234, align 8, !tbaa !7
  %cmp2.i235 = icmp eq i8* %40, null
  br i1 %cmp2.i235, label %if.then4.i238, label %if.end6.i239

if.then4.i238:                                    ; preds = %if.end.i236
  %41 = load i64* %arg.addr.i229, align 8, !tbaa !5
  %call5.i237 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %41) #4
  %42 = bitcast %struct.rtx_def* %call5.i237 to i8*
  store i8* %42, i8** %call.i234, align 8, !tbaa !7
  br label %if.end6.i239

if.end6.i239:                                     ; preds = %if.then4.i238, %if.end.i236
  %43 = phi i8* [ %42, %if.then4.i238 ], [ %40, %if.end.i236 ]
  %44 = bitcast i8* %43 to %struct.rtx_def*
  br label %gen_rtx_CONST_INT.exit241

gen_rtx_CONST_INT.exit241:                        ; preds = %if.then.i232, %if.end6.i239
  %retval.0.i240 = phi %struct.rtx_def* [ %38, %if.then.i232 ], [ %44, %if.end6.i239 ]
  call void @llvm.lifetime.end(i64 8, i8* %36) #4
  %tobool106 = icmp eq %struct.rtx_def* %retval.0.i240, null
  br i1 %tobool106, label %if.end141, label %if.then108

if.then108:                                       ; preds = %gen_rtx_CONST_INT.exit241
  %.pre = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp112 = icmp eq %struct.mem_attrs* %.pre, null
  br i1 %cmp112, label %cond.false119, label %cond.true114

cond.true114:                                     ; preds = %cond.true86, %if.then108
  %45 = phi %struct.mem_attrs* [ %.pre, %if.then108 ], [ %32, %cond.true86 ]
  %size118 = getelementptr inbounds %struct.mem_attrs* %45, i64 0, i32 3
  %46 = load %struct.rtx_def** %size118, align 8, !tbaa !27
  br label %cond.end136

cond.false119:                                    ; preds = %if.then108
  %47 = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 0
  %bf.load120 = load i32* %47, align 8
  %bf.lshr121 = lshr i32 %bf.load120, 16
  %bf.clear122 = and i32 %bf.lshr121, 255
  %cmp123 = icmp eq i32 %bf.clear122, 51
  br i1 %cmp123, label %cond.end136, label %cond.true125

cond.true125:                                     ; preds = %cond.false119
  %idxprom129214 = zext i32 %bf.clear122 to i64
  %arrayidx130 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom129214
  %48 = load i8* %arrayidx130, align 1, !tbaa !9
  %conv131 = zext i8 %48 to i64
  %49 = bitcast i64* %arg.addr.i242 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %49) #4
  store i64 %conv131, i64* %arg.addr.i242, align 8, !tbaa !5
  %arg.off.i243 = add i64 %conv131, 64
  %50 = icmp ult i64 %arg.off.i243, 129
  br i1 %50, label %if.then.i245, label %if.end.i249

if.then.i245:                                     ; preds = %cond.true125
  %arrayidx.i244 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i243
  %51 = load %struct.rtx_def** %arrayidx.i244, align 8, !tbaa !7
  br label %cond.end136

if.end.i249:                                      ; preds = %cond.true125
  %52 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i246 = zext i8 %48 to i32
  %call.i247 = call i8** @htab_find_slot_with_hash(%struct.htab* %52, i8* %49, i32 %conv.i246, i32 1) #4
  %53 = load i8** %call.i247, align 8, !tbaa !7
  %cmp2.i248 = icmp eq i8* %53, null
  br i1 %cmp2.i248, label %if.then4.i251, label %if.end6.i252

if.then4.i251:                                    ; preds = %if.end.i249
  %54 = load i64* %arg.addr.i242, align 8, !tbaa !5
  %call5.i250 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %54) #4
  %55 = bitcast %struct.rtx_def* %call5.i250 to i8*
  store i8* %55, i8** %call.i247, align 8, !tbaa !7
  br label %if.end6.i252

if.end6.i252:                                     ; preds = %if.then4.i251, %if.end.i249
  %56 = phi i8* [ %55, %if.then4.i251 ], [ %53, %if.end.i249 ]
  %57 = bitcast i8* %56 to %struct.rtx_def*
  br label %cond.end136

cond.end136:                                      ; preds = %if.end6.i252, %if.then.i245, %cond.false119, %cond.true114
  %cond137 = phi %struct.rtx_def* [ %46, %cond.true114 ], [ null, %cond.false119 ], [ %51, %if.then.i245 ], [ %57, %if.end6.i252 ]
  %sub138 = sub nsw i64 0, %offset
  %call139 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %cond137, i64 %sub138) #4
  br label %if.end141

if.end141:                                        ; preds = %if.end6.i226, %if.then.i219, %cond.true86, %gen_rtx_CONST_INT.exit241, %cond.false92, %cond.end136
  %size.0 = phi %struct.rtx_def* [ %call139, %cond.end136 ], [ null, %cond.true86 ], [ null, %gen_rtx_CONST_INT.exit241 ], [ null, %cond.false92 ], [ %25, %if.then.i219 ], [ %31, %if.end6.i226 ]
  %58 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp145 = icmp eq %struct.mem_attrs* %58, null
  br i1 %cmp145, label %cond.end164, label %cond.false160

cond.false160:                                    ; preds = %if.end141
  %alias = getelementptr inbounds %struct.mem_attrs* %58, i64 0, i32 0
  %59 = load i64* %alias, align 8, !tbaa !28
  %expr = getelementptr inbounds %struct.mem_attrs* %58, i64 0, i32 1
  %60 = load %union.tree_node** %expr, align 8, !tbaa !29
  br label %cond.end164

cond.end164:                                      ; preds = %if.end141, %cond.false160
  %cond153264 = phi i64 [ %59, %cond.false160 ], [ 0, %if.end141 ]
  %cond165 = phi %union.tree_node* [ %60, %cond.false160 ], [ null, %if.end141 ]
  %bf.load166 = load i32* %21, align 8
  %bf.lshr167 = lshr i32 %bf.load166, 16
  %bf.clear168 = and i32 %bf.lshr167, 255
  %61 = bitcast %struct.mem_attrs* %attrs.i to i8*
  call void @llvm.lifetime.start(i64 40, i8* %61) #4
  %cmp.i = icmp eq i64 %cond153264, 0
  %cmp1.i = icmp eq %union.tree_node* %cond165, null
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  %cmp3.i = icmp eq %struct.rtx_def* %memoffset.0, null
  %or.cond24.i = and i1 %or.cond.i, %cmp3.i
  br i1 %or.cond24.i, label %land.lhs.true4.i, label %if.end.i258

land.lhs.true4.i:                                 ; preds = %cond.end164
  %cmp5.i = icmp eq %struct.rtx_def* %size.0, null
  br i1 %cmp5.i, label %land.lhs.true11.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true4.i
  %cmp6.i = icmp eq i32 %bf.clear168, 51
  br i1 %cmp6.i, label %if.end.i258, label %land.lhs.true7.i

land.lhs.true7.i:                                 ; preds = %lor.lhs.false.i
  %idxprom.i265 = zext i32 %bf.clear168 to i64
  %arrayidx.i255 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i265
  %62 = load i8* %arrayidx.i255, align 1, !tbaa !9
  %conv.i256 = zext i8 %62 to i64
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %size.0, i64 0, i32 1, i64 0, i32 0
  %63 = load i64* %rtwint.i, align 8, !tbaa !5
  %cmp9.i = icmp eq i64 %conv.i256, %63
  %cmp12.i = icmp eq i32 %memalign.0, 8
  %or.cond25.i = and i1 %cmp9.i, %cmp12.i
  br i1 %or.cond25.i, label %get_mem_attrs.exit, label %if.end.i258

land.lhs.true11.i:                                ; preds = %land.lhs.true4.i
  %cmp12.old.i = icmp eq i32 %memalign.0, 8
  br i1 %cmp12.old.i, label %get_mem_attrs.exit, label %if.end.i258

if.end.i258:                                      ; preds = %land.lhs.true11.i, %land.lhs.true7.i, %lor.lhs.false.i, %cond.end164
  %alias14.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 0
  store i64 %cond153264, i64* %alias14.i, align 8, !tbaa !28
  %expr15.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 1
  store %union.tree_node* %cond165, %union.tree_node** %expr15.i, align 8, !tbaa !29
  %offset16.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 2
  store %struct.rtx_def* %memoffset.0, %struct.rtx_def** %offset16.i, align 8, !tbaa !24
  %size17.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 3
  store %struct.rtx_def* %size.0, %struct.rtx_def** %size17.i, align 8, !tbaa !27
  %align18.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 4
  store i32 %memalign.0, i32* %align18.i, align 8, !tbaa !26
  %64 = load %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %call.i257 = call i8** @htab_find_slot(%struct.htab* %64, i8* %61, i32 1) #4
  %65 = load i8** %call.i257, align 8, !tbaa !7
  %cmp19.i = icmp eq i8* %65, null
  br i1 %cmp19.i, label %if.then21.i, label %if.end23.i

if.then21.i:                                      ; preds = %if.end.i258
  %call22.i = call i8* @ggc_alloc(i64 40) #4
  store i8* %call22.i, i8** %call.i257, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call22.i, i8* %61, i64 40, i32 1, i1 false) #4
  %.pre.i = load i8** %call.i257, align 8, !tbaa !7
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then21.i, %if.end.i258
  %66 = phi i8* [ %.pre.i, %if.then21.i ], [ %65, %if.end.i258 ]
  %phitmp = ptrtoint i8* %66 to i64
  br label %get_mem_attrs.exit

get_mem_attrs.exit:                               ; preds = %land.lhs.true7.i, %land.lhs.true11.i, %if.end23.i
  %retval.0.i259 = phi i64 [ %phitmp, %if.end23.i ], [ 0, %land.lhs.true7.i ], [ 0, %land.lhs.true11.i ]
  call void @llvm.lifetime.end(i64 40, i8* %61) #4
  %67 = getelementptr inbounds %struct.rtx_def* %call44, i64 0, i32 1, i64 1, i32 0
  store i64 %retval.0.i259, i64* %67, align 8, !tbaa !7
  ret %struct.rtx_def* %call44
}

declare %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define i32 @subreg_highpart_offset(i32 %outermode, i32 %innermode) #0 {
entry:
  %idxprom = sext i32 %innermode to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %0 = load i8* %arrayidx, align 1, !tbaa !9
  %conv = zext i8 %0 to i32
  %idxprom1 = sext i32 %outermode to i64
  %arrayidx2 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom1
  %1 = load i8* %arrayidx2, align 1, !tbaa !9
  %conv3 = zext i8 %1 to i32
  %sub = sub nsw i32 %conv, %conv3
  %cmp = icmp ult i8 %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1278, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.subreg_highpart_offset, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %cmp11 = icmp sgt i32 %sub, 0
  %sub. = select i1 %cmp11, i32 %sub, i32 0
  ret i32 %sub.
}

declare %struct.rtx_def* @validize_mem(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_highpart_mode(i32 %outermode, i32 %innermode, %struct.rtx_def* %exp) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %exp, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.end6, label %if.then

if.then:                                          ; preds = %entry
  %cmp4 = icmp eq i32 %bf.clear, %innermode
  br i1 %cmp4, label %if.end, label %if.then5

if.then5:                                         ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1241, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.gen_highpart_mode, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  %call = tail call %struct.rtx_def* @gen_highpart(i32 %outermode, %struct.rtx_def* %exp)
  br label %return

if.end6:                                          ; preds = %entry
  %idxprom.i = sext i32 %innermode to i64
  %arrayidx.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i
  %1 = load i8* %arrayidx.i, align 1, !tbaa !9
  %conv.i = zext i8 %1 to i32
  %idxprom1.i = sext i32 %outermode to i64
  %arrayidx2.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom1.i
  %2 = load i8* %arrayidx2.i, align 1, !tbaa !9
  %conv3.i = zext i8 %2 to i32
  %sub.i = sub nsw i32 %conv.i, %conv3.i
  %cmp.i = icmp ult i8 %1, %2
  br i1 %cmp.i, label %if.then.i, label %subreg_highpart_offset.exit

if.then.i:                                        ; preds = %if.end6
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1278, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.subreg_highpart_offset, i64 0, i64 0)) #8
  unreachable

subreg_highpart_offset.exit:                      ; preds = %if.end6
  %cmp11.i = icmp sgt i32 %sub.i, 0
  %sub..i = select i1 %cmp11.i, i32 %sub.i, i32 0
  %call8 = tail call %struct.rtx_def* @simplify_gen_subreg(i32 %outermode, %struct.rtx_def* %exp, i32 %innermode, i32 %sub..i) #4
  br label %return

return:                                           ; preds = %subreg_highpart_offset.exit, %if.end
  %retval.0 = phi %struct.rtx_def* [ %call, %if.end ], [ %call8, %subreg_highpart_offset.exit ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @subreg_lowpart_p(%struct.rtx_def* nocapture readonly %x) #5 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 63
  br i1 %cmp, label %if.else, label %return

if.else:                                          ; preds = %entry
  %fld = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load1 = load i32* %2, align 8
  %bf.clear2 = and i32 %bf.load1, 16711680
  %cmp3 = icmp eq i32 %bf.clear2, 0
  br i1 %cmp3, label %return, label %if.end5

if.end5:                                          ; preds = %if.else
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %3 = load i32* %rtuint, align 4, !tbaa !1
  %cmp17 = icmp eq i32 %3, 0
  %conv = zext i1 %cmp17 to i32
  br label %return

return:                                           ; preds = %if.else, %entry, %if.end5
  %retval.0 = phi i32 [ %conv, %if.end5 ], [ 1, %entry ], [ 0, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @constant_subword(%struct.rtx_def* readonly %op, i32 %offset, i32 %mode) #0 {
entry:
  %arg.addr.i409 = alloca i64, align 8
  %arg.addr.i396 = alloca i64, align 8
  %arg.addr.i383 = alloca i64, align 8
  %arg.addr.i370 = alloca i64, align 8
  %arg.addr.i357 = alloca i64, align 8
  %arg.addr.i = alloca i64, align 8
  %k = alloca [2 x i64], align 16
  %k97 = alloca [4 x i64], align 16
  %rv98 = alloca %struct.realvaluetype, align 8
  %0 = load i32* @target_flags, align 4, !tbaa !1
  %and = and i32 %0, 33554432
  %1 = lshr exact i32 %and, 20
  %2 = add i32 %1, 32
  %div = sdiv i32 64, %2
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %3 = load i32* %arrayidx, align 4, !tbaa !9
  %cmp = icmp eq i32 %3, 1
  br i1 %cmp, label %land.lhs.true, label %land.lhs.true13

land.lhs.true:                                    ; preds = %entry
  %arrayidx2 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %4 = load i8* %arrayidx2, align 1, !tbaa !9
  %conv = zext i8 %4 to i32
  %5 = lshr exact i32 %and, 23
  %6 = add i32 %5, 4
  %cmp6 = icmp eq i32 %conv, %6
  %7 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16
  %cmp214 = icmp eq %struct.rtx_def* %7, %op
  %or.cond = or i1 %cmp6, %cmp214
  %cmp.not = xor i1 %cmp, true
  %brmerge = or i1 %or.cond, %cmp.not
  %op.mux = select i1 %or.cond, %struct.rtx_def* %op, %struct.rtx_def* null
  br i1 %brmerge, label %return, label %lor.lhs.false

land.lhs.true13:                                  ; preds = %entry
  %cmp16 = icmp eq i32 %3, 2
  br i1 %cmp16, label %land.lhs.true18, label %if.end213

land.lhs.true18:                                  ; preds = %land.lhs.true13
  %arrayidx20 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %8 = load i16* %arrayidx20, align 2, !tbaa !20
  %cmp22 = icmp eq i16 %8, 64
  br i1 %cmp22, label %land.lhs.true24, label %land.lhs.true85

land.lhs.true24:                                  ; preds = %land.lhs.true18
  %9 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %9, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp25 = icmp eq i32 %bf.clear, 55
  br i1 %cmp25, label %do.body, label %land.lhs.true85

do.body:                                          ; preds = %land.lhs.true24
  %rtwint = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1, i32 0
  %arraydecay = getelementptr inbounds [2 x i64]* %k, i64 0, i64 0
  %tmpcast = bitcast i64* %rtwint to %struct.realvaluetype*
  call void @etardouble(%struct.realvaluetype* byval align 8 %tmpcast, i64* %arraydecay) #4
  %10 = load i32* @target_flags, align 4, !tbaa !1
  %and29 = and i32 %10, 33554432
  %cmp32 = icmp eq i32 %and29, 0
  br i1 %cmp32, label %if.then34, label %if.else

if.then34:                                        ; preds = %do.body
  %idxprom35 = sext i32 %offset to i64
  %arrayidx36 = getelementptr inbounds [2 x i64]* %k, i64 0, i64 %idxprom35
  %11 = load i64* %arrayidx36, align 8, !tbaa !22
  %sext356 = shl i64 %11, 32
  %sub = ashr exact i64 %sext356, 32
  %12 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #4
  store i64 %sub, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %sub, 64
  %13 = icmp ult i64 %arg.off.i, 129
  br i1 %13, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then34
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %14 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %return

if.end.i:                                         ; preds = %if.then34
  %15 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = trunc i64 %sub to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %15, i8* %12, i32 %conv.i, i32 1) #4
  %16 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %16, null
  br i1 %cmp2.i, label %if.then4.i, label %if.end6.i

if.then4.i:                                       ; preds = %if.end.i
  %17 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %17) #4
  %18 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %18, i8** %call.i, align 8, !tbaa !7
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then4.i, %if.end.i
  %19 = phi i8* [ %18, %if.then4.i ], [ %16, %if.end.i ]
  %20 = bitcast i8* %19 to %struct.rtx_def*
  br label %return

if.else:                                          ; preds = %do.body
  %cmp44 = icmp eq i32 %offset, 0
  br i1 %cmp44, label %if.then46, label %if.else73

if.then46:                                        ; preds = %if.else
  %arrayidx47 = getelementptr inbounds [2 x i64]* %k, i64 0, i64 1
  %21 = load i64* %arrayidx47, align 8, !tbaa !22
  %sext355 = shl i64 %21, 32
  %22 = load i64* %arraydecay, align 16, !tbaa !22
  %and52 = and i64 %22, 4294967295
  %or = or i64 %and52, %sext355
  %23 = bitcast i64* %arg.addr.i357 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #4
  store i64 %or, i64* %arg.addr.i357, align 8, !tbaa !5
  %arg.off.i358 = add i64 %or, 64
  %24 = icmp ult i64 %arg.off.i358, 129
  br i1 %24, label %if.then.i360, label %if.end.i364

if.then.i360:                                     ; preds = %if.then46
  %arrayidx.i359 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i358
  %25 = load %struct.rtx_def** %arrayidx.i359, align 8, !tbaa !7
  br label %return

if.end.i364:                                      ; preds = %if.then46
  %26 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i361 = trunc i64 %22 to i32
  %call.i362 = call i8** @htab_find_slot_with_hash(%struct.htab* %26, i8* %23, i32 %conv.i361, i32 1) #4
  %27 = load i8** %call.i362, align 8, !tbaa !7
  %cmp2.i363 = icmp eq i8* %27, null
  br i1 %cmp2.i363, label %if.then4.i366, label %if.end6.i367

if.then4.i366:                                    ; preds = %if.end.i364
  %28 = load i64* %arg.addr.i357, align 8, !tbaa !5
  %call5.i365 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %28) #4
  %29 = bitcast %struct.rtx_def* %call5.i365 to i8*
  store i8* %29, i8** %call.i362, align 8, !tbaa !7
  br label %if.end6.i367

if.end6.i367:                                     ; preds = %if.then4.i366, %if.end.i364
  %30 = phi i8* [ %29, %if.then4.i366 ], [ %27, %if.end.i364 ]
  %31 = bitcast i8* %30 to %struct.rtx_def*
  br label %return

if.else73:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1374, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.constant_subword, i64 0, i64 0)) #8
  unreachable

land.lhs.true85:                                  ; preds = %land.lhs.true18, %land.lhs.true24
  %arrayidx87 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %32 = load i16* %arrayidx87, align 2, !tbaa !20
  %cmp89 = icmp ugt i16 %32, 64
  br i1 %cmp89, label %land.lhs.true91, label %land.lhs.true172

land.lhs.true91:                                  ; preds = %land.lhs.true85
  %33 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load92 = load i32* %33, align 8
  %bf.clear93 = and i32 %bf.load92, 65535
  %cmp94 = icmp eq i32 %bf.clear93, 55
  br i1 %cmp94, label %do.body99, label %if.end213

do.body99:                                        ; preds = %land.lhs.true91
  %rtwint103 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1, i32 0
  %u100.sroa.0.0..sroa_cast = bitcast i64* %rtwint103 to i8*
  %rv98426427 = bitcast %struct.realvaluetype* %rv98 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %rv98426427, i8* %u100.sroa.0.0..sroa_cast, i64 24, i32 8, i1 false)
  %and106 = and i32 %0, 16777216
  %cmp115 = icmp eq i32 %and106, 0
  %arraydecay118 = getelementptr inbounds [4 x i64]* %k97, i64 0, i64 0
  br i1 %cmp115, label %cond.true117, label %cond.true125

cond.true117:                                     ; preds = %do.body99
  call void @etarldouble(%struct.realvaluetype* byval align 8 %rv98, i64* %arraydecay118) #4
  br label %cond.end129

cond.true125:                                     ; preds = %do.body99
  call void @etartdouble(%struct.realvaluetype* byval align 8 %rv98, i64* %arraydecay118) #4
  br label %cond.end129

cond.end129:                                      ; preds = %cond.true117, %cond.true125
  %34 = load i32* @target_flags, align 4, !tbaa !1
  %and130 = and i32 %34, 33554432
  %cmp133 = icmp eq i32 %and130, 0
  br i1 %cmp133, label %if.then135, label %if.else142

if.then135:                                       ; preds = %cond.end129
  %idxprom136 = sext i32 %offset to i64
  %arrayidx137 = getelementptr inbounds [4 x i64]* %k97, i64 0, i64 %idxprom136
  %35 = load i64* %arrayidx137, align 8, !tbaa !22
  %sext354 = shl i64 %35, 32
  %sub140 = ashr exact i64 %sext354, 32
  %36 = bitcast i64* %arg.addr.i370 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %36) #4
  store i64 %sub140, i64* %arg.addr.i370, align 8, !tbaa !5
  %arg.off.i371 = add i64 %sub140, 64
  %37 = icmp ult i64 %arg.off.i371, 129
  br i1 %37, label %if.then.i373, label %if.end.i377

if.then.i373:                                     ; preds = %if.then135
  %arrayidx.i372 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i371
  %38 = load %struct.rtx_def** %arrayidx.i372, align 8, !tbaa !7
  br label %return

if.end.i377:                                      ; preds = %if.then135
  %39 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i374 = trunc i64 %sub140 to i32
  %call.i375 = call i8** @htab_find_slot_with_hash(%struct.htab* %39, i8* %36, i32 %conv.i374, i32 1) #4
  %40 = load i8** %call.i375, align 8, !tbaa !7
  %cmp2.i376 = icmp eq i8* %40, null
  br i1 %cmp2.i376, label %if.then4.i379, label %if.end6.i380

if.then4.i379:                                    ; preds = %if.end.i377
  %41 = load i64* %arg.addr.i370, align 8, !tbaa !5
  %call5.i378 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %41) #4
  %42 = bitcast %struct.rtx_def* %call5.i378 to i8*
  store i8* %42, i8** %call.i375, align 8, !tbaa !7
  br label %if.end6.i380

if.end6.i380:                                     ; preds = %if.then4.i379, %if.end.i377
  %43 = phi i8* [ %42, %if.then4.i379 ], [ %40, %if.end.i377 ]
  %44 = bitcast i8* %43 to %struct.rtx_def*
  br label %return

if.else142:                                       ; preds = %cond.end129
  %cmp149 = icmp slt i32 %offset, 2
  br i1 %cmp149, label %if.then151, label %if.else165

if.then151:                                       ; preds = %if.else142
  %mul = shl nsw i32 %offset, 1
  %add352 = or i32 %mul, 1
  %idxprom152 = sext i32 %add352 to i64
  %arrayidx153 = getelementptr inbounds [4 x i64]* %k97, i64 0, i64 %idxprom152
  %45 = load i64* %arrayidx153, align 8, !tbaa !22
  %sext353 = shl i64 %45, 32
  %idxprom160 = sext i32 %mul to i64
  %arrayidx161 = getelementptr inbounds [4 x i64]* %k97, i64 0, i64 %idxprom160
  %46 = load i64* %arrayidx161, align 16, !tbaa !22
  %and162 = and i64 %46, 4294967295
  %or163 = or i64 %and162, %sext353
  %47 = bitcast i64* %arg.addr.i383 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %47) #4
  store i64 %or163, i64* %arg.addr.i383, align 8, !tbaa !5
  %arg.off.i384 = add i64 %or163, 64
  %48 = icmp ult i64 %arg.off.i384, 129
  br i1 %48, label %if.then.i386, label %if.end.i390

if.then.i386:                                     ; preds = %if.then151
  %arrayidx.i385 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i384
  %49 = load %struct.rtx_def** %arrayidx.i385, align 8, !tbaa !7
  br label %return

if.end.i390:                                      ; preds = %if.then151
  %50 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i387 = trunc i64 %46 to i32
  %call.i388 = call i8** @htab_find_slot_with_hash(%struct.htab* %50, i8* %47, i32 %conv.i387, i32 1) #4
  %51 = load i8** %call.i388, align 8, !tbaa !7
  %cmp2.i389 = icmp eq i8* %51, null
  br i1 %cmp2.i389, label %if.then4.i392, label %if.end6.i393

if.then4.i392:                                    ; preds = %if.end.i390
  %52 = load i64* %arg.addr.i383, align 8, !tbaa !5
  %call5.i391 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %52) #4
  %53 = bitcast %struct.rtx_def* %call5.i391 to i8*
  store i8* %53, i8** %call.i388, align 8, !tbaa !7
  br label %if.end6.i393

if.end6.i393:                                     ; preds = %if.then4.i392, %if.end.i390
  %54 = phi i8* [ %53, %if.then4.i392 ], [ %51, %if.end.i390 ]
  %55 = bitcast i8* %54 to %struct.rtx_def*
  br label %return

if.else165:                                       ; preds = %if.else142
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1403, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.constant_subword, i64 0, i64 0)) #8
  unreachable

land.lhs.true172:                                 ; preds = %land.lhs.true85
  %cmp176 = icmp eq i16 %32, 32
  br i1 %cmp176, label %land.lhs.true178, label %if.end213

land.lhs.true178:                                 ; preds = %land.lhs.true172
  %56 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load179 = load i32* %56, align 8
  %bf.clear180 = and i32 %bf.load179, 65535
  %cmp181 = icmp eq i32 %bf.clear180, 55
  br i1 %cmp181, label %do.body185, label %if.end213

do.body185:                                       ; preds = %land.lhs.true178
  %rtwint189 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1, i32 0
  %tmpcast430 = bitcast i64* %rtwint189 to %struct.realvaluetype*
  %call192 = call i64 @etarsingle(%struct.realvaluetype* byval align 8 %tmpcast430) #4
  %sext = shl i64 %call192, 32
  %sub195 = ashr exact i64 %sext, 32
  %57 = bitcast i64* %arg.addr.i396 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %57) #4
  store i64 %sub195, i64* %arg.addr.i396, align 8, !tbaa !5
  %arg.off.i397 = add i64 %sub195, 64
  %58 = icmp ult i64 %arg.off.i397, 129
  br i1 %58, label %if.then.i399, label %if.end.i403

if.then.i399:                                     ; preds = %do.body185
  %arrayidx.i398 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i397
  %59 = load %struct.rtx_def** %arrayidx.i398, align 8, !tbaa !7
  br label %return

if.end.i403:                                      ; preds = %do.body185
  %60 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i400 = trunc i64 %sub195 to i32
  %call.i401 = call i8** @htab_find_slot_with_hash(%struct.htab* %60, i8* %57, i32 %conv.i400, i32 1) #4
  %61 = load i8** %call.i401, align 8, !tbaa !7
  %cmp2.i402 = icmp eq i8* %61, null
  br i1 %cmp2.i402, label %if.then4.i405, label %if.end6.i406

if.then4.i405:                                    ; preds = %if.end.i403
  %62 = load i64* %arg.addr.i396, align 8, !tbaa !5
  %call5.i404 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %62) #4
  %63 = bitcast %struct.rtx_def* %call5.i404 to i8*
  store i8* %63, i8** %call.i401, align 8, !tbaa !7
  br label %if.end6.i406

if.end6.i406:                                     ; preds = %if.then4.i405, %if.end.i403
  %64 = phi i8* [ %63, %if.then4.i405 ], [ %61, %if.end.i403 ]
  %65 = bitcast i8* %64 to %struct.rtx_def*
  br label %return

if.end213:                                        ; preds = %land.lhs.true91, %land.lhs.true13, %land.lhs.true178, %land.lhs.true172
  %.old = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !tbaa !7
  %cmp214.old = icmp eq %struct.rtx_def* %.old, %op
  %cmp.not435 = xor i1 %cmp, true
  %brmerge436 = or i1 %cmp214.old, %cmp.not435
  %op.mux437 = select i1 %cmp214.old, %struct.rtx_def* %op, %struct.rtx_def* null
  br i1 %brmerge436, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end213, %land.lhs.true
  %66 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load222 = load i32* %66, align 8
  %67 = and i32 %bf.load222, 65534
  %switch = icmp eq i32 %67, 54
  br i1 %switch, label %if.end238, label %return

if.end238:                                        ; preds = %lor.lhs.false
  %bf.clear223 = and i32 %bf.load222, 65535
  %div239 = sdiv i32 %offset, %div
  %cmp240 = icmp eq i32 %div239, 0
  %cmp245 = icmp eq i32 %bf.clear223, 54
  %fld248 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1
  br i1 %cmp240, label %cond.true242, label %cond.false257

cond.true242:                                     ; preds = %if.end238
  br i1 %cmp245, label %cond.true247, label %cond.false251

cond.true247:                                     ; preds = %cond.true242
  %rtwint250 = getelementptr inbounds [1 x %union.rtunion_def]* %fld248, i64 0, i64 0, i32 0
  %68 = load i64* %rtwint250, align 8, !tbaa !5
  br label %cond.end276

cond.false251:                                    ; preds = %cond.true242
  %rtwint254 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1, i32 0
  %69 = load i64* %rtwint254, align 8, !tbaa !5
  br label %cond.end276

cond.false257:                                    ; preds = %if.end238
  br i1 %cmp245, label %cond.true262, label %cond.false270

cond.true262:                                     ; preds = %cond.false257
  %rtwint265 = getelementptr inbounds [1 x %union.rtunion_def]* %fld248, i64 0, i64 0, i32 0
  %70 = load i64* %rtwint265, align 8, !tbaa !5
  %.lobit = ashr i64 %70, 63
  br label %cond.end276

cond.false270:                                    ; preds = %cond.false257
  %rtwint273 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 2, i32 0
  %71 = load i64* %rtwint273, align 8, !tbaa !5
  br label %cond.end276

cond.end276:                                      ; preds = %cond.true262, %cond.false270, %cond.true247, %cond.false251
  %cond277 = phi i64 [ %68, %cond.true247 ], [ %69, %cond.false251 ], [ %.lobit, %cond.true262 ], [ %71, %cond.false270 ]
  %and278 = lshr i32 %0, 20
  %72 = and i32 %and278, 32
  %73 = add i32 %72, 32
  %cmp281 = icmp ult i32 %73, 64
  br i1 %cmp281, label %if.then283, label %if.end289

if.then283:                                       ; preds = %cond.end276
  %rem = srem i32 %offset, %div
  %mul287 = mul nsw i32 %rem, %73
  %sh_prom = zext i32 %mul287 to i64
  %shr288 = ashr i64 %cond277, %sh_prom
  br label %if.end289

if.end289:                                        ; preds = %if.then283, %cond.end276
  %val.3 = phi i64 [ %shr288, %if.then283 ], [ %cond277, %cond.end276 ]
  %74 = load i32* @word_mode, align 4, !tbaa !9
  %call290 = call i64 @trunc_int_for_mode(i64 %val.3, i32 %74) #4
  %75 = bitcast i64* %arg.addr.i409 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %75) #4
  store i64 %call290, i64* %arg.addr.i409, align 8, !tbaa !5
  %arg.off.i410 = add i64 %call290, 64
  %76 = icmp ult i64 %arg.off.i410, 129
  br i1 %76, label %if.then.i412, label %if.end.i416

if.then.i412:                                     ; preds = %if.end289
  %arrayidx.i411 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i410
  %77 = load %struct.rtx_def** %arrayidx.i411, align 8, !tbaa !7
  br label %return

if.end.i416:                                      ; preds = %if.end289
  %78 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i413 = trunc i64 %call290 to i32
  %call.i414 = call i8** @htab_find_slot_with_hash(%struct.htab* %78, i8* %75, i32 %conv.i413, i32 1) #4
  %79 = load i8** %call.i414, align 8, !tbaa !7
  %cmp2.i415 = icmp eq i8* %79, null
  br i1 %cmp2.i415, label %if.then4.i418, label %if.end6.i419

if.then4.i418:                                    ; preds = %if.end.i416
  %80 = load i64* %arg.addr.i409, align 8, !tbaa !5
  %call5.i417 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %80) #4
  %81 = bitcast %struct.rtx_def* %call5.i417 to i8*
  store i8* %81, i8** %call.i414, align 8, !tbaa !7
  br label %if.end6.i419

if.end6.i419:                                     ; preds = %if.then4.i418, %if.end.i416
  %82 = phi i8* [ %81, %if.then4.i418 ], [ %79, %if.end.i416 ]
  %83 = bitcast i8* %82 to %struct.rtx_def*
  br label %return

return:                                           ; preds = %if.end213, %land.lhs.true, %if.end6.i419, %if.then.i412, %if.end6.i406, %if.then.i399, %if.end6.i393, %if.then.i386, %if.end6.i380, %if.then.i373, %if.end6.i367, %if.then.i360, %if.end6.i, %if.then.i, %lor.lhs.false
  %retval.0 = phi %struct.rtx_def* [ %op.mux, %land.lhs.true ], [ %op.mux437, %if.end213 ], [ null, %lor.lhs.false ], [ %14, %if.then.i ], [ %20, %if.end6.i ], [ %25, %if.then.i360 ], [ %31, %if.end6.i367 ], [ %38, %if.then.i373 ], [ %44, %if.end6.i380 ], [ %49, %if.then.i386 ], [ %55, %if.end6.i393 ], [ %59, %if.then.i399 ], [ %65, %if.end6.i406 ], [ %77, %if.then.i412 ], [ %83, %if.end6.i419 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @operand_subword(%struct.rtx_def* %op, i32 %offset, i32 %validate_address, i32 %mode) #0 {
entry:
  %cmp = icmp eq i32 %mode, 0
  br i1 %cmp, label %if.end, label %if.end3

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp1 = icmp eq i32 %bf.clear, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1560, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.operand_subword, i64 0, i64 0)) #8
  unreachable

if.end3:                                          ; preds = %entry, %if.end
  %mode.addr.069 = phi i32 [ %bf.clear, %if.end ], [ %mode, %entry ]
  %cmp4 = icmp eq i32 %mode.addr.069, 51
  br i1 %cmp4, label %if.end21, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end3
  %idxprom = sext i32 %mode.addr.069 to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %1 = load i8* %arrayidx, align 1, !tbaa !9
  %conv = zext i8 %1 to i32
  %2 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %2, 23
  %3 = and i32 %and, 4
  %4 = add i32 %3, 4
  %cmp5 = icmp ult i32 %conv, %4
  br i1 %cmp5, label %return, label %land.lhs.true11

land.lhs.true11:                                  ; preds = %land.lhs.true
  %add = add i32 %offset, 1
  %mul = mul i32 %4, %add
  %cmp18 = icmp ugt i32 %mul, %conv
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %land.lhs.true11
  %5 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !tbaa !7
  br label %return

if.end21:                                         ; preds = %if.end3, %land.lhs.true11
  %6 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load22 = load i32* %6, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 66
  br i1 %cmp24, label %if.then26, label %if.end48

if.then26:                                        ; preds = %if.end21
  %7 = load i32* @word_mode, align 4, !tbaa !9
  %8 = load i32* @target_flags, align 4, !tbaa !1
  %and27 = lshr i32 %8, 23
  %9 = and i32 %and27, 4
  %10 = add i32 %9, 4
  %mul30 = mul i32 %10, %offset
  %conv31 = zext i32 %mul30 to i64
  %call = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %op, i32 %7, i64 %conv31, i32 0, i32 1)
  %tobool32 = icmp eq i32 %validate_address, 0
  br i1 %tobool32, label %return, label %if.else

if.else:                                          ; preds = %if.then26
  %11 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool34 = icmp eq i32 %11, 0
  br i1 %tobool34, label %if.else41, label %if.then35

if.then35:                                        ; preds = %if.else
  %12 = load i32* @word_mode, align 4, !tbaa !9
  %arrayidx36 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %call37 = tail call i32 @strict_memory_address_p(i32 %12, %struct.rtx_def* %13) #4
  %tobool38 = icmp eq i32 %call37, 0
  br i1 %tobool38, label %return, label %if.end48

if.else41:                                        ; preds = %if.else
  %arrayidx43 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx44, align 8, !tbaa !7
  tail call void @update_temp_slot_address(%struct.rtx_def* %14, %struct.rtx_def* %14) #4
  %call.i = tail call fastcc %struct.rtx_def* @change_address_1(%struct.rtx_def* %call, i32 0, %struct.rtx_def* %14, i32 1) #4
  br label %return

if.end48:                                         ; preds = %if.then35, %if.end21
  %15 = load i32* @word_mode, align 4, !tbaa !9
  %16 = load i32* @target_flags, align 4, !tbaa !1
  %and49 = lshr i32 %16, 23
  %17 = and i32 %and49, 4
  %18 = add i32 %17, 4
  %mul52 = mul i32 %18, %offset
  %call53 = tail call %struct.rtx_def* @simplify_gen_subreg(i32 %15, %struct.rtx_def* %op, i32 %mode.addr.069, i32 %mul52) #4
  br label %return

return:                                           ; preds = %if.then35, %if.then26, %land.lhs.true, %if.end48, %if.else41, %if.then20
  %retval.0 = phi %struct.rtx_def* [ %5, %if.then20 ], [ %call53, %if.end48 ], [ %call.i, %if.else41 ], [ null, %land.lhs.true ], [ %call, %if.then26 ], [ null, %if.then35 ]
  ret %struct.rtx_def* %retval.0
}

declare i32 @strict_memory_address_p(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* readonly %memref, %struct.rtx_def* %addr) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  tail call void @update_temp_slot_address(%struct.rtx_def* %0, %struct.rtx_def* %addr) #4
  %call = tail call fastcc %struct.rtx_def* @change_address_1(%struct.rtx_def* %memref, i32 0, %struct.rtx_def* %addr, i32 1)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %op, i32 %offset, i32 %mode) #0 {
entry:
  %call = tail call %struct.rtx_def* @operand_subword(%struct.rtx_def* %op, i32 %offset, i32 1, i32 %mode)
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  switch i32 %mode, label %if.then2 [
    i32 51, label %if.end8
    i32 0, label %if.end8
  ]

if.then2:                                         ; preds = %if.end
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp3 = icmp eq i32 %bf.clear, 61
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then2
  %call5 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %op) #4
  br label %if.end8

if.else:                                          ; preds = %if.then2
  %call6 = tail call %struct.rtx_def* @force_reg(i32 %mode, %struct.rtx_def* %op) #4
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.end, %if.then4, %if.else
  %op.addr.0 = phi %struct.rtx_def* [ %call5, %if.then4 ], [ %call6, %if.else ], [ %op, %if.end ], [ %op, %if.end ]
  %call9 = tail call %struct.rtx_def* @operand_subword(%struct.rtx_def* %op.addr.0, i32 %offset, i32 1, i32 %mode)
  %cmp10 = icmp eq %struct.rtx_def* %call9, null
  br i1 %cmp10, label %if.then11, label %return

if.then11:                                        ; preds = %if.end8
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.operand_subword_force, i64 0, i64 0)) #8
  unreachable

return:                                           ; preds = %if.end8, %entry
  %retval.0 = phi %struct.rtx_def* [ %call, %entry ], [ %call9, %if.end8 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define void @reverse_comparison(%struct.rtx_def* nocapture readonly %insn) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 47
  %fld1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  br i1 %cmp, label %if.end, label %if.else

if.else:                                          ; preds = %entry
  %rtvec = bitcast [1 x %union.rtunion_def]* %fld1 to %struct.rtvec_def**
  %2 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx6 = getelementptr inbounds %struct.rtvec_def* %2, i64 0, i32 1, i64 0
  %3 = load %struct.rtx_def** %arrayidx6, align 8, !tbaa !7
  br label %if.end

if.end:                                           ; preds = %entry, %if.else
  %.pn = phi %struct.rtx_def* [ %3, %if.else ], [ %0, %entry ]
  %comp.0.in.in = getelementptr inbounds %struct.rtx_def* %.pn, i64 0, i32 1, i64 1
  %comp.0.in = bitcast %union.rtunion_def* %comp.0.in.in to %struct.rtx_def**
  %comp.0 = load %struct.rtx_def** %comp.0.in, align 8
  %4 = getelementptr inbounds %struct.rtx_def* %comp.0, i64 0, i32 0
  %bf.load10 = load i32* %4, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 74
  br i1 %cmp12, label %if.then13, label %if.else26

if.then13:                                        ; preds = %if.end
  %fld14 = getelementptr inbounds %struct.rtx_def* %comp.0, i64 0, i32 1
  %rtx16 = bitcast [1 x %union.rtunion_def]* %fld14 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx16, align 8, !tbaa !7
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %comp.0, i64 0, i32 1, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx19, align 8, !tbaa !7
  %7 = getelementptr inbounds [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, i32 0
  %.c = ptrtoint %struct.rtx_def* %6 to i64
  store i64 %.c, i64* %7, align 8, !tbaa !7
  %8 = getelementptr inbounds %union.rtunion_def* %arrayidx18, i64 0, i32 0
  %.c58 = ptrtoint %struct.rtx_def* %5 to i64
  store i64 %.c58, i64* %8, align 8, !tbaa !7
  br label %if.end47

if.else26:                                        ; preds = %if.end
  %bf.lshr = lshr i32 %bf.load10, 16
  %bf.clear28 = and i32 %bf.lshr, 255
  %idxprom56 = zext i32 %bf.clear28 to i64
  %arrayidx29 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 %idxprom56
  %9 = load %struct.rtx_def** %arrayidx29, align 8, !tbaa !7
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 74, i32 0, %struct.rtx_def* %9, %struct.rtx_def* %comp.0) #4
  %bf.load30 = load i32* %1, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 47
  br i1 %cmp32, label %if.then33, label %if.else37

if.then33:                                        ; preds = %if.else26
  %10 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1, i32 0
  %call.c57 = ptrtoint %struct.rtx_def* %call to i64
  store i64 %call.c57, i64* %10, align 8, !tbaa !7
  br label %if.end47

if.else37:                                        ; preds = %if.else26
  %rtvec40 = bitcast [1 x %union.rtunion_def]* %fld1 to %struct.rtvec_def**
  %11 = load %struct.rtvec_def** %rtvec40, align 8, !tbaa !7
  %arrayidx42 = getelementptr inbounds %struct.rtvec_def* %11, i64 0, i32 1, i64 0
  %12 = load %struct.rtx_def** %arrayidx42, align 8, !tbaa !7
  %13 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 1, i64 1, i32 0
  %call.c = ptrtoint %struct.rtx_def* %call to i64
  store i64 %call.c, i64* %13, align 8, !tbaa !7
  br label %if.end47

if.end47:                                         ; preds = %if.then33, %if.else37, %if.then13
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_mem_attributes(%struct.rtx_def* %ref, %union.tree_node* %t, i32 %objectp) #0 {
entry:
  %attrs.i = alloca %struct.mem_attrs, align 8
  %arg.addr.i630 = alloca i64, align 8
  %arg.addr.i617 = alloca i64, align 8
  %arg.addr.i604 = alloca i64, align 8
  %arg.addr.i = alloca i64, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %ref, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %0 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp8 = icmp eq %struct.mem_attrs* %0, null
  br i1 %cmp8, label %cond.false38, label %cond.end48.thread679

cond.end48.thread679:                             ; preds = %entry
  %expr14 = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 1
  %1 = load %union.tree_node** %expr14, align 8, !tbaa !29
  %offset26 = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 2
  %2 = load %struct.rtx_def** %offset26, align 8, !tbaa !24
  %size37 = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 3
  %3 = load %struct.rtx_def** %size37, align 8, !tbaa !27
  br label %cond.true55

cond.false38:                                     ; preds = %entry
  %4 = getelementptr inbounds %struct.rtx_def* %ref, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp39 = icmp eq i32 %bf.clear, 51
  br i1 %cmp39, label %cond.end61, label %cond.true40

cond.true40:                                      ; preds = %cond.false38
  %idxprom600 = zext i32 %bf.clear to i64
  %arrayidx44 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom600
  %5 = load i8* %arrayidx44, align 1, !tbaa !9
  %conv = zext i8 %5 to i64
  %6 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #4
  store i64 %conv, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %conv, 64
  %7 = icmp ult i64 %arg.off.i, 129
  br i1 %7, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.true40
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %8 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %cond.end61

if.end.i:                                         ; preds = %cond.true40
  %9 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = zext i8 %5 to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %9, i8* %6, i32 %conv.i, i32 1) #4
  %10 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %10, null
  br i1 %cmp2.i, label %if.then4.i, label %cond.end48

if.then4.i:                                       ; preds = %if.end.i
  %11 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %11) #4
  %12 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %12, i8** %call.i, align 8, !tbaa !7
  br label %cond.end48

cond.end48:                                       ; preds = %if.end.i, %if.then4.i
  %13 = phi i8* [ %12, %if.then4.i ], [ %10, %if.end.i ]
  %14 = bitcast i8* %13 to %struct.rtx_def*
  %.pre = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp53 = icmp eq %struct.mem_attrs* %.pre, null
  br i1 %cmp53, label %cond.end61, label %cond.true55

cond.true55:                                      ; preds = %cond.end48.thread679, %cond.end48
  %cond49683 = phi %struct.rtx_def* [ %3, %cond.end48.thread679 ], [ %14, %cond.end48 ]
  %cond16649652682 = phi %union.tree_node* [ %1, %cond.end48.thread679 ], [ null, %cond.end48 ]
  %cond28654681 = phi %struct.rtx_def* [ %2, %cond.end48.thread679 ], [ null, %cond.end48 ]
  %15 = phi %struct.mem_attrs* [ %0, %cond.end48.thread679 ], [ %.pre, %cond.end48 ]
  %align59 = getelementptr inbounds %struct.mem_attrs* %15, i64 0, i32 4
  %16 = load i32* %align59, align 4, !tbaa !26
  br label %cond.end61

cond.end61:                                       ; preds = %if.then.i, %cond.false38, %cond.end48, %cond.true55
  %cond49678 = phi %struct.rtx_def* [ %cond49683, %cond.true55 ], [ %14, %cond.end48 ], [ null, %cond.false38 ], [ %8, %if.then.i ]
  %cond16649652677 = phi %union.tree_node* [ %cond16649652682, %cond.true55 ], [ null, %cond.end48 ], [ null, %cond.false38 ], [ null, %if.then.i ]
  %cond28654676 = phi %struct.rtx_def* [ %cond28654681, %cond.true55 ], [ null, %cond.end48 ], [ null, %cond.false38 ], [ null, %if.then.i ]
  %cond62 = phi i32 [ %16, %cond.true55 ], [ 8, %cond.end48 ], [ 8, %cond.false38 ], [ 8, %if.then.i ]
  %cmp63 = icmp eq %union.tree_node* %t, null
  br i1 %cmp63, label %if.end503, label %if.end

if.end:                                           ; preds = %cond.end61
  %code = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 2
  %bf.load65 = load i32* %code, align 8
  %bf.clear66 = and i32 %bf.load65, 255
  %idxprom67594 = zext i32 %bf.clear66 to i64
  %arrayidx68 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom67594
  %17 = load i8* %arrayidx68, align 1, !tbaa !9
  %cmp70 = icmp eq i8 %17, 116
  br i1 %cmp70, label %if.end106, label %cond.end76

cond.end76:                                       ; preds = %if.end
  %type75 = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1
  %18 = load %union.tree_node** %type75, align 8, !tbaa !30
  %cmp85 = icmp eq i8 %17, 100
  br i1 %cmp85, label %land.lhs.true, label %if.end106

land.lhs.true:                                    ; preds = %cond.end76
  %rtl = getelementptr inbounds %union.tree_node* %t, i64 0, i32 0, i32 17
  %19 = load %struct.rtx_def** %rtl, align 8, !tbaa !32
  %cmp103 = icmp eq %struct.rtx_def* %19, %ref
  br i1 %cmp103, label %if.then105, label %if.end106

if.then105:                                       ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1729, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.set_mem_attributes, i64 0, i64 0)) #8
  unreachable

if.end106:                                        ; preds = %if.end, %land.lhs.true, %cond.end76
  %cond77685 = phi %union.tree_node* [ %18, %land.lhs.true ], [ %18, %cond.end76 ], [ %t, %if.end ]
  %call107 = call i64 @get_alias_set(%union.tree_node* %t) #4
  %volatile_flag = getelementptr inbounds %union.tree_node* %cond77685, i64 0, i32 0, i32 0, i32 2
  %bf.load109 = load i32* %volatile_flag, align 8
  %20 = getelementptr inbounds %struct.rtx_def* %ref, i64 0, i32 0
  %bf.load112 = load i32* %20, align 8
  %21 = shl i32 %bf.load109, 16
  %bf.shl = and i32 %21, 134217728
  %bf.clear113 = and i32 %bf.load112, -134217729
  %bf.set = or i32 %bf.clear113, %bf.shl
  store i32 %bf.set, i32* %20, align 8
  %bf.load116 = load i32* %volatile_flag, align 8
  %bf.clear117 = and i32 %bf.load116, 255
  %switch.tableidx = add i32 %bf.clear117, -18
  %22 = icmp ult i32 %switch.tableidx, 5
  %lor.ext = zext i1 %22 to i32
  %bf.shl148 = shl nuw nsw i32 %lor.ext, 28
  %bf.clear149 = and i32 %bf.set, -268435457
  %bf.set150 = or i32 %bf.shl148, %bf.clear149
  store i32 %bf.set150, i32* %20, align 8
  %23 = load i8* getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 12), align 8, !tbaa !34, !range !39
  %tobool151 = icmp eq i8 %23, 0
  br i1 %tobool151, label %if.end106.lor.rhs166_crit_edge, label %land.lhs.true153

if.end106.lor.rhs166_crit_edge:                   ; preds = %if.end106
  %bf.load169.pre = load i32* %code, align 8
  br label %lor.rhs166

land.lhs.true153:                                 ; preds = %if.end106
  %bf.load155 = load i32* %volatile_flag, align 8
  %bf.clear157 = and i32 %bf.load155, 4096
  %tobool158 = icmp eq i32 %bf.clear157, 0
  br i1 %tobool158, label %lor.lhs.false159, label %lor.end181

lor.lhs.false159:                                 ; preds = %land.lhs.true153
  %bf.load162 = load i32* %code, align 8
  %bf.clear164 = and i32 %bf.load162, 4096
  %tobool165 = icmp eq i32 %bf.clear164, 0
  br i1 %tobool165, label %lor.rhs166, label %lor.end181

lor.rhs166:                                       ; preds = %if.end106.lor.rhs166_crit_edge, %lor.lhs.false159
  %bf.load169 = phi i32 [ %bf.load169.pre, %if.end106.lor.rhs166_crit_edge ], [ %bf.load162, %lor.lhs.false159 ]
  %bf.clear170 = and i32 %bf.load169, 255
  %idxprom171596 = zext i32 %bf.clear170 to i64
  %arrayidx172 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom171596
  %24 = load i8* %arrayidx172, align 1, !tbaa !9
  %cmp174 = icmp eq i8 %24, 116
  br i1 %cmp174, label %lor.end181, label %land.rhs

land.rhs:                                         ; preds = %lor.rhs166
  %bf.clear179 = and i32 %bf.load169, 512
  %tobool180 = icmp ne i32 %bf.clear179, 0
  br label %lor.end181

lor.end181:                                       ; preds = %lor.lhs.false159, %land.lhs.true153, %lor.rhs166, %land.rhs
  %25 = phi i1 [ true, %lor.lhs.false159 ], [ true, %land.lhs.true153 ], [ false, %lor.rhs166 ], [ %tobool180, %land.rhs ]
  %lor.ext182 = zext i1 %25 to i32
  %bf.value187601 = shl nuw nsw i32 %lor.ext182, 26
  %bf.set190 = or i32 %bf.value187601, %bf.set150
  store i32 %bf.set190, i32* %20, align 8
  %tobool191 = icmp ne i32 %objectp, 0
  br i1 %tobool191, label %land.lhs.true202, label %lor.lhs.false192

lor.lhs.false192:                                 ; preds = %lor.end181
  %bf.load195 = load i32* %code, align 8
  %bf.clear196 = and i32 %bf.load195, 255
  %idxprom197597 = zext i32 %bf.clear196 to i64
  %arrayidx198 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom197597
  %26 = load i8* %arrayidx198, align 1, !tbaa !9
  %cmp200 = icmp eq i8 %26, 100
  br i1 %cmp200, label %land.lhs.true202, label %lor.lhs.false243

land.lhs.true202:                                 ; preds = %lor.lhs.false192, %lor.end181
  %bf.load205 = load i32* %volatile_flag, align 8
  %bf.clear206 = and i32 %bf.load205, 255
  %bf.clear206.off = add i32 %bf.clear206, -18
  %switch = icmp ult i32 %bf.clear206.off, 5
  br i1 %switch, label %if.end241, label %if.then237

if.then237:                                       ; preds = %land.lhs.true202
  %bf.set240 = or i32 %bf.set190, -2147483648
  store i32 %bf.set240, i32* %20, align 8
  br label %if.end241

if.end241:                                        ; preds = %land.lhs.true202, %if.then237
  br i1 %tobool191, label %if.then256, label %if.end241.lor.lhs.false243_crit_edge

if.end241.lor.lhs.false243_crit_edge:             ; preds = %if.end241
  %bf.load246.pre = load i32* %code, align 8
  br label %lor.lhs.false243

lor.lhs.false243:                                 ; preds = %if.end241.lor.lhs.false243_crit_edge, %lor.lhs.false192
  %bf.load246 = phi i32 [ %bf.load246.pre, %if.end241.lor.lhs.false243_crit_edge ], [ %bf.load195, %lor.lhs.false192 ]
  %bf.clear247 = and i32 %bf.load246, 255
  %cmp248 = icmp eq i32 %bf.clear247, 41
  br i1 %cmp248, label %if.then256, label %lor.lhs.false250

lor.lhs.false250:                                 ; preds = %lor.lhs.false243
  %bf.load252 = load i32* %volatile_flag, align 8
  %bf.clear254 = and i32 %bf.load252, 131072
  %tobool255 = icmp eq i32 %bf.clear254, 0
  br i1 %tobool255, label %if.end267, label %if.then256

if.then256:                                       ; preds = %lor.lhs.false250, %lor.lhs.false243, %if.end241
  %align258 = getelementptr inbounds %union.tree_node* %cond77685, i64 0, i32 0, i32 7
  %27 = bitcast %union.tree_node** %align258 to i32*
  %28 = load i32* %27, align 4, !tbaa !40
  %cmp259 = icmp ugt i32 %cond62, %28
  %cond62. = select i1 %cmp259, i32 %cond62, i32 %28
  br label %if.end267

if.end267:                                        ; preds = %lor.lhs.false250, %if.then256
  %align.0 = phi i32 [ %cond62., %if.then256 ], [ %cond62, %lor.lhs.false250 ]
  %29 = getelementptr inbounds %union.tree_node* %cond77685, i64 0, i32 0, i32 4
  %30 = load %union.tree_node** %29, align 8, !tbaa !42
  %tobool269 = icmp eq %union.tree_node* %30, null
  br i1 %tobool269, label %if.end280, label %land.lhs.true270

land.lhs.true270:                                 ; preds = %if.end267
  %call273 = call i32 @host_integerp(%union.tree_node* %30, i32 1) #4
  %tobool274 = icmp eq i32 %call273, 0
  br i1 %tobool274, label %if.end280, label %if.then275

if.then275:                                       ; preds = %land.lhs.true270
  %31 = load %union.tree_node** %29, align 8, !tbaa !42
  %call278 = call i64 @tree_low_cst(%union.tree_node* %31, i32 1) #4
  %32 = bitcast i64* %arg.addr.i604 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %32) #4
  store i64 %call278, i64* %arg.addr.i604, align 8, !tbaa !5
  %arg.off.i605 = add i64 %call278, 64
  %33 = icmp ult i64 %arg.off.i605, 129
  br i1 %33, label %if.then.i607, label %if.end.i611

if.then.i607:                                     ; preds = %if.then275
  %arrayidx.i606 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i605
  %34 = load %struct.rtx_def** %arrayidx.i606, align 8, !tbaa !7
  br label %if.end280

if.end.i611:                                      ; preds = %if.then275
  %35 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i608 = trunc i64 %call278 to i32
  %call.i609 = call i8** @htab_find_slot_with_hash(%struct.htab* %35, i8* %32, i32 %conv.i608, i32 1) #4
  %36 = load i8** %call.i609, align 8, !tbaa !7
  %cmp2.i610 = icmp eq i8* %36, null
  br i1 %cmp2.i610, label %if.then4.i613, label %if.end6.i614

if.then4.i613:                                    ; preds = %if.end.i611
  %37 = load i64* %arg.addr.i604, align 8, !tbaa !5
  %call5.i612 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %37) #4
  %38 = bitcast %struct.rtx_def* %call5.i612 to i8*
  store i8* %38, i8** %call.i609, align 8, !tbaa !7
  br label %if.end6.i614

if.end6.i614:                                     ; preds = %if.then4.i613, %if.end.i611
  %39 = phi i8* [ %38, %if.then4.i613 ], [ %36, %if.end.i611 ]
  %40 = bitcast i8* %39 to %struct.rtx_def*
  br label %if.end280

if.end280:                                        ; preds = %if.end6.i614, %if.then.i607, %land.lhs.true270, %if.end267
  %size.0 = phi %struct.rtx_def* [ %cond49678, %land.lhs.true270 ], [ %cond49678, %if.end267 ], [ %34, %if.then.i607 ], [ %40, %if.end6.i614 ]
  %bf.load283 = load i32* %code, align 8
  %bf.clear284 = and i32 %bf.load283, 255
  %idxprom285598 = zext i32 %bf.clear284 to i64
  %arrayidx286 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom285598
  %41 = load i8* %arrayidx286, align 1, !tbaa !9
  %cmp288 = icmp eq i8 %41, 116
  br i1 %cmp288, label %if.end453, label %if.then290

if.then290:                                       ; preds = %if.end280
  call void @maybe_set_unchanging(%struct.rtx_def* %ref, %union.tree_node* %t) #4
  %bf.load293 = load i32* %code, align 8
  %bf.clear295 = and i32 %bf.load293, 2048
  %tobool296 = icmp eq i32 %bf.clear295, 0
  br i1 %tobool296, label %while.cond.preheader, label %if.then297

if.then297:                                       ; preds = %if.then290
  %bf.load298 = load i32* %20, align 8
  %bf.set300 = or i32 %bf.load298, 134217728
  store i32 %bf.set300, i32* %20, align 8
  %bf.load304661.pre = load i32* %code, align 8
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then297, %if.then290
  %bf.load304661 = phi i32 [ %bf.load304661.pre, %if.then297 ], [ %bf.load293, %if.then290 ]
  %bf.clear305662 = and i32 %bf.load304661, 255
  %bf.clear305.off663 = add i32 %bf.clear305662, -114
  %switch603664 = icmp ult i32 %bf.clear305.off663, 5
  br i1 %switch603664, label %while.body, label %lor.rhs329

lor.rhs329:                                       ; preds = %while.body, %while.cond.preheader
  %code303.lcssa = phi i32* [ %code, %while.cond.preheader ], [ %code303, %while.body ]
  %t.addr.0.lcssa = phi %union.tree_node* [ %t, %while.cond.preheader ], [ %42, %while.body ]
  %call339 = call i32 @can_address_p(%union.tree_node* %t.addr.0.lcssa) #4
  %tobool340 = icmp eq i32 %call339, 0
  br i1 %tobool340, label %if.then341, label %if.end345

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %t.addr.0665 = phi %union.tree_node* [ %42, %while.body ], [ %t, %while.cond.preheader ]
  %operands = getelementptr inbounds %union.tree_node* %t.addr.0665, i64 0, i32 0, i32 2
  %arrayidx338 = bitcast i32* %operands to %union.tree_node**
  %42 = load %union.tree_node** %arrayidx338, align 8, !tbaa !7
  %code303 = getelementptr inbounds %union.tree_node* %42, i64 0, i32 0, i32 0, i32 2
  %bf.load304 = load i32* %code303, align 8
  %bf.clear305 = and i32 %bf.load304, 255
  %bf.clear305.off = add i32 %bf.clear305, -114
  %switch603 = icmp ult i32 %bf.clear305.off, 5
  br i1 %switch603, label %while.body, label %lor.rhs329

if.then341:                                       ; preds = %lor.rhs329
  %bf.load342 = load i32* %20, align 8
  %bf.set344 = or i32 %bf.load342, 16777216
  store i32 %bf.set344, i32* %20, align 8
  br label %if.end345

if.end345:                                        ; preds = %lor.rhs329, %if.then341
  %bf.load348 = load i32* %code303.lcssa, align 8
  %bf.clear349 = and i32 %bf.load348, 255
  %idxprom350599 = zext i32 %bf.clear349 to i64
  %arrayidx351 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom350599
  %43 = load i8* %arrayidx351, align 1, !tbaa !9
  switch i8 %43, label %if.else388 [
    i8 100, label %if.then355
    i8 99, label %if.then384
  ]

if.then355:                                       ; preds = %if.end345
  %44 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !tbaa !7
  %size_unit357 = getelementptr inbounds %union.tree_node* %t.addr.0.lcssa, i64 0, i32 0, i32 7
  %45 = load %union.tree_node** %size_unit357, align 8, !tbaa !43
  %tobool358 = icmp eq %union.tree_node* %45, null
  br i1 %tobool358, label %cond.end370, label %land.lhs.true359

land.lhs.true359:                                 ; preds = %if.then355
  %call362 = call i32 @host_integerp(%union.tree_node* %45, i32 1) #4
  %tobool363 = icmp eq i32 %call362, 0
  br i1 %tobool363, label %cond.end370, label %cond.true364

cond.true364:                                     ; preds = %land.lhs.true359
  %46 = load %union.tree_node** %size_unit357, align 8, !tbaa !43
  %call367 = call i64 @tree_low_cst(%union.tree_node* %46, i32 1) #4
  %47 = bitcast i64* %arg.addr.i617 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %47) #4
  store i64 %call367, i64* %arg.addr.i617, align 8, !tbaa !5
  %arg.off.i618 = add i64 %call367, 64
  %48 = icmp ult i64 %arg.off.i618, 129
  br i1 %48, label %if.then.i620, label %if.end.i624

if.then.i620:                                     ; preds = %cond.true364
  %arrayidx.i619 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i618
  %49 = load %struct.rtx_def** %arrayidx.i619, align 8, !tbaa !7
  br label %cond.end370

if.end.i624:                                      ; preds = %cond.true364
  %50 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i621 = trunc i64 %call367 to i32
  %call.i622 = call i8** @htab_find_slot_with_hash(%struct.htab* %50, i8* %47, i32 %conv.i621, i32 1) #4
  %51 = load i8** %call.i622, align 8, !tbaa !7
  %cmp2.i623 = icmp eq i8* %51, null
  br i1 %cmp2.i623, label %if.then4.i626, label %if.end6.i627

if.then4.i626:                                    ; preds = %if.end.i624
  %52 = load i64* %arg.addr.i617, align 8, !tbaa !5
  %call5.i625 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %52) #4
  %53 = bitcast %struct.rtx_def* %call5.i625 to i8*
  store i8* %53, i8** %call.i622, align 8, !tbaa !7
  br label %if.end6.i627

if.end6.i627:                                     ; preds = %if.then4.i626, %if.end.i624
  %54 = phi i8* [ %53, %if.then4.i626 ], [ %51, %if.end.i624 ]
  %55 = bitcast i8* %54 to %struct.rtx_def*
  br label %cond.end370

cond.end370:                                      ; preds = %if.end6.i627, %if.then.i620, %land.lhs.true359, %if.then355
  %cond371 = phi %struct.rtx_def* [ null, %land.lhs.true359 ], [ null, %if.then355 ], [ %49, %if.then.i620 ], [ %55, %if.end6.i627 ]
  %u1 = getelementptr inbounds %union.tree_node* %t.addr.0.lcssa, i64 0, i32 0, i32 6
  %56 = bitcast %union.anon* %u1 to i32*
  %bf.load373 = load i32* %56, align 4
  %bf.clear374 = and i32 %bf.load373, 16777215
  br label %if.end453

if.then384:                                       ; preds = %if.end345
  %align386 = getelementptr inbounds %union.tree_node* %cond77685, i64 0, i32 0, i32 7
  %57 = bitcast %union.tree_node** %align386 to i32*
  %58 = load i32* %57, align 4, !tbaa !40
  %call387 = call i32 @ix86_constant_alignment(%union.tree_node* %t.addr.0.lcssa, i32 %58) #4
  br label %if.end453

if.else388:                                       ; preds = %if.end345
  switch i32 %bf.clear349, label %if.end453 [
    i32 39, label %land.lhs.true395
    i32 43, label %if.then413
  ]

land.lhs.true395:                                 ; preds = %if.else388
  %operands397 = getelementptr inbounds %union.tree_node* %t.addr.0.lcssa, i64 0, i32 0, i32 2
  %arrayidx398 = getelementptr inbounds i32* %operands397, i64 2
  %59 = bitcast i32* %arrayidx398 to %union.tree_node**
  %60 = load %union.tree_node** %59, align 8, !tbaa !7
  %bit_field_flag = getelementptr inbounds %union.tree_node* %60, i64 0, i32 0, i32 5
  %61 = bitcast i48* %bit_field_flag to i64*
  %bf.load400 = load i64* %61, align 8
  %bf.cast = and i64 %bf.load400, 4096
  %tobool403 = icmp eq i64 %bf.cast, 0
  br i1 %tobool403, label %if.then404, label %if.end453

if.then404:                                       ; preds = %land.lhs.true395
  %call405 = call fastcc %union.tree_node* @component_ref_for_mem_expr(%union.tree_node* %t.addr.0.lcssa)
  %62 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !tbaa !7
  br label %if.end453

if.then413:                                       ; preds = %if.else388
  %63 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 15), align 8, !tbaa !7
  br label %do.body

do.body:                                          ; preds = %do.body, %if.then413
  %t.addr.1 = phi %union.tree_node* [ %t.addr.0.lcssa, %if.then413 ], [ %70, %do.body ]
  %off_tree.0 = phi %union.tree_node* [ %63, %if.then413 ], [ %call424, %do.body ]
  %64 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !7
  %operands415 = getelementptr inbounds %union.tree_node* %t.addr.1, i64 0, i32 0, i32 2
  %arrayidx416 = getelementptr inbounds i32* %operands415, i64 2
  %65 = bitcast i32* %arrayidx416 to %union.tree_node**
  %66 = load %union.tree_node** %65, align 8, !tbaa !7
  %type418 = getelementptr inbounds %union.tree_node* %t.addr.1, i64 0, i32 0, i32 0, i32 1
  %67 = load %union.tree_node** %type418, align 8, !tbaa !30
  %68 = getelementptr inbounds %union.tree_node* %67, i64 0, i32 0, i32 4
  %69 = load %union.tree_node** %68, align 8, !tbaa !42
  %call421 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 61, %union.tree_node* %64, %union.tree_node* %66, %union.tree_node* %69) #4
  %call422 = call %union.tree_node* @fold(%union.tree_node* %call421) #4
  %call423 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 59, %union.tree_node* %64, %union.tree_node* %call422, %union.tree_node* %off_tree.0) #4
  %call424 = call %union.tree_node* @fold(%union.tree_node* %call423) #4
  %arrayidx427 = bitcast i32* %operands415 to %union.tree_node**
  %70 = load %union.tree_node** %arrayidx427, align 8, !tbaa !7
  %code429 = getelementptr inbounds %union.tree_node* %70, i64 0, i32 0, i32 0, i32 2
  %bf.load430 = load i32* %code429, align 8
  %bf.clear431 = and i32 %bf.load430, 255
  switch i32 %bf.clear431, label %if.end453 [
    i32 43, label %do.body
    i32 39, label %if.then440
  ]

if.then440:                                       ; preds = %do.body
  %call441 = call fastcc %union.tree_node* @component_ref_for_mem_expr(%union.tree_node* %70)
  %call442 = call i32 @host_integerp(%union.tree_node* %call424, i32 1) #4
  %tobool443 = icmp eq i32 %call442, 0
  br i1 %tobool443, label %if.end453, label %if.then444

if.then444:                                       ; preds = %if.then440
  %call445 = call i64 @tree_low_cst(%union.tree_node* %call424, i32 1) #4
  %71 = bitcast i64* %arg.addr.i630 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %71) #4
  store i64 %call445, i64* %arg.addr.i630, align 8, !tbaa !5
  %arg.off.i631 = add i64 %call445, 64
  %72 = icmp ult i64 %arg.off.i631, 129
  br i1 %72, label %if.then.i633, label %if.end.i637

if.then.i633:                                     ; preds = %if.then444
  %arrayidx.i632 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i631
  %73 = load %struct.rtx_def** %arrayidx.i632, align 8, !tbaa !7
  br label %if.end453

if.end.i637:                                      ; preds = %if.then444
  %74 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i634 = trunc i64 %call445 to i32
  %call.i635 = call i8** @htab_find_slot_with_hash(%struct.htab* %74, i8* %71, i32 %conv.i634, i32 1) #4
  %75 = load i8** %call.i635, align 8, !tbaa !7
  %cmp2.i636 = icmp eq i8* %75, null
  br i1 %cmp2.i636, label %if.then4.i639, label %if.end6.i640

if.then4.i639:                                    ; preds = %if.end.i637
  %76 = load i64* %arg.addr.i630, align 8, !tbaa !5
  %call5.i638 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %76) #4
  %77 = bitcast %struct.rtx_def* %call5.i638 to i8*
  store i8* %77, i8** %call.i635, align 8, !tbaa !7
  br label %if.end6.i640

if.end6.i640:                                     ; preds = %if.then4.i639, %if.end.i637
  %78 = phi i8* [ %77, %if.then4.i639 ], [ %75, %if.end.i637 ]
  %79 = bitcast i8* %78 to %struct.rtx_def*
  br label %if.end453

if.end453:                                        ; preds = %do.body, %if.else388, %land.lhs.true395, %if.end6.i640, %if.then.i633, %if.then440, %cond.end370, %if.then404, %if.then384, %if.end280
  %expr.0 = phi %union.tree_node* [ %cond16649652677, %if.end280 ], [ %t.addr.0.lcssa, %cond.end370 ], [ %cond16649652677, %if.then384 ], [ %call441, %if.then440 ], [ %call405, %if.then404 ], [ %call441, %if.then.i633 ], [ %call441, %if.end6.i640 ], [ %cond16649652677, %land.lhs.true395 ], [ %cond16649652677, %if.else388 ], [ %cond16649652677, %do.body ]
  %offset.0 = phi %struct.rtx_def* [ %cond28654676, %if.end280 ], [ %44, %cond.end370 ], [ %cond28654676, %if.then384 ], [ %cond28654676, %if.then440 ], [ %62, %if.then404 ], [ %73, %if.then.i633 ], [ %79, %if.end6.i640 ], [ %cond28654676, %land.lhs.true395 ], [ %cond28654676, %if.else388 ], [ %cond28654676, %do.body ]
  %size.1 = phi %struct.rtx_def* [ %size.0, %if.end280 ], [ %cond371, %cond.end370 ], [ %size.0, %if.then384 ], [ %size.0, %if.then440 ], [ %size.0, %if.then404 ], [ %size.0, %if.then.i633 ], [ %size.0, %if.end6.i640 ], [ %size.0, %land.lhs.true395 ], [ %size.0, %if.else388 ], [ %size.0, %do.body ]
  %align.1 = phi i32 [ %align.0, %if.end280 ], [ %bf.clear374, %cond.end370 ], [ %call387, %if.then384 ], [ %align.0, %if.then440 ], [ %align.0, %if.then404 ], [ %align.0, %if.then.i633 ], [ %align.0, %if.end6.i640 ], [ %align.0, %land.lhs.true395 ], [ %align.0, %if.else388 ], [ %align.0, %do.body ]
  %t.addr.2 = phi %union.tree_node* [ %t, %if.end280 ], [ %t.addr.0.lcssa, %cond.end370 ], [ %t.addr.0.lcssa, %if.then384 ], [ %70, %if.then440 ], [ %t.addr.0.lcssa, %if.then404 ], [ %70, %if.then.i633 ], [ %70, %if.end6.i640 ], [ %t.addr.0.lcssa, %land.lhs.true395 ], [ %t.addr.0.lcssa, %if.else388 ], [ %70, %do.body ]
  %bf.load454 = load i32* %20, align 8
  %bf.lshr455 = lshr i32 %bf.load454, 16
  %bf.clear456 = and i32 %bf.lshr455, 255
  %80 = bitcast %struct.mem_attrs* %attrs.i to i8*
  call void @llvm.lifetime.start(i64 40, i8* %80) #4
  %cmp.i = icmp eq i64 %call107, 0
  %cmp1.i = icmp eq %union.tree_node* %expr.0, null
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  %cmp3.i = icmp eq %struct.rtx_def* %offset.0, null
  %or.cond24.i = and i1 %or.cond.i, %cmp3.i
  br i1 %or.cond24.i, label %land.lhs.true4.i, label %if.end.i646

land.lhs.true4.i:                                 ; preds = %if.end453
  %cmp5.i = icmp eq %struct.rtx_def* %size.1, null
  br i1 %cmp5.i, label %land.lhs.true11.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true4.i
  %cmp6.i = icmp eq i32 %bf.clear456, 51
  br i1 %cmp6.i, label %if.end.i646, label %land.lhs.true7.i

land.lhs.true7.i:                                 ; preds = %lor.lhs.false.i
  %idxprom.i657 = zext i32 %bf.clear456 to i64
  %arrayidx.i643 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i657
  %81 = load i8* %arrayidx.i643, align 1, !tbaa !9
  %conv.i644 = zext i8 %81 to i64
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %size.1, i64 0, i32 1, i64 0, i32 0
  %82 = load i64* %rtwint.i, align 8, !tbaa !5
  %cmp9.i = icmp eq i64 %conv.i644, %82
  %cmp12.i = icmp eq i32 %align.1, 8
  %or.cond25.i = and i1 %cmp9.i, %cmp12.i
  br i1 %or.cond25.i, label %get_mem_attrs.exit, label %if.end.i646

land.lhs.true11.i:                                ; preds = %land.lhs.true4.i
  %cmp12.old.i = icmp eq i32 %align.1, 8
  br i1 %cmp12.old.i, label %get_mem_attrs.exit, label %if.end.i646

if.end.i646:                                      ; preds = %land.lhs.true11.i, %land.lhs.true7.i, %lor.lhs.false.i, %if.end453
  %alias14.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 0
  store i64 %call107, i64* %alias14.i, align 8, !tbaa !28
  %expr15.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 1
  store %union.tree_node* %expr.0, %union.tree_node** %expr15.i, align 8, !tbaa !29
  %offset16.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 2
  store %struct.rtx_def* %offset.0, %struct.rtx_def** %offset16.i, align 8, !tbaa !24
  %size17.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 3
  store %struct.rtx_def* %size.1, %struct.rtx_def** %size17.i, align 8, !tbaa !27
  %align18.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 4
  store i32 %align.1, i32* %align18.i, align 8, !tbaa !26
  %83 = load %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %call.i645 = call i8** @htab_find_slot(%struct.htab* %83, i8* %80, i32 1) #4
  %84 = load i8** %call.i645, align 8, !tbaa !7
  %cmp19.i = icmp eq i8* %84, null
  br i1 %cmp19.i, label %if.then21.i, label %if.end23.i

if.then21.i:                                      ; preds = %if.end.i646
  %call22.i = call i8* @ggc_alloc(i64 40) #4
  store i8* %call22.i, i8** %call.i645, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call22.i, i8* %80, i64 40, i32 1, i1 false) #4
  %.pre.i = load i8** %call.i645, align 8, !tbaa !7
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then21.i, %if.end.i646
  %85 = phi i8* [ %.pre.i, %if.then21.i ], [ %84, %if.end.i646 ]
  %phitmp = ptrtoint i8* %85 to i64
  %bf.load461.pre = load i32* %20, align 8
  br label %get_mem_attrs.exit

get_mem_attrs.exit:                               ; preds = %land.lhs.true7.i, %land.lhs.true11.i, %if.end23.i
  %bf.load499 = phi i32 [ %bf.load461.pre, %if.end23.i ], [ %bf.load454, %land.lhs.true7.i ], [ %bf.load454, %land.lhs.true11.i ]
  %retval.0.i647 = phi i64 [ %phitmp, %if.end23.i ], [ 0, %land.lhs.true7.i ], [ 0, %land.lhs.true11.i ]
  call void @llvm.lifetime.end(i64 40, i8* %80) #4
  %86 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  store i64 %retval.0.i647, i64* %86, align 8, !tbaa !7
  %87 = and i32 %bf.load499, -1879048192
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %if.else470, label %if.end503

if.else470:                                       ; preds = %get_mem_attrs.exit
  %code472 = getelementptr inbounds %union.tree_node* %t.addr.2, i64 0, i32 0, i32 0, i32 2
  %bf.load473 = load i32* %code472, align 8
  %bf.clear474 = and i32 %bf.load473, 255
  switch i32 %bf.clear474, label %if.end503 [
    i32 39, label %if.then498
    i32 43, label %if.then498
    i32 44, label %if.then498
    i32 40, label %if.then498
  ]

if.then498:                                       ; preds = %if.else470, %if.else470, %if.else470, %if.else470
  %bf.set501 = or i32 %bf.load499, 268435456
  store i32 %bf.set501, i32* %20, align 8
  br label %if.end503

if.end503:                                        ; preds = %get_mem_attrs.exit, %if.else470, %if.then498, %cond.end61
  ret void
}

declare void @make_decl_rtl(%union.tree_node*, i8*) #1

declare i64 @get_alias_set(%union.tree_node*) #1

declare i32 @host_integerp(%union.tree_node*, i32) #1

declare i64 @tree_low_cst(%union.tree_node*, i32) #1

declare void @maybe_set_unchanging(%struct.rtx_def*, %union.tree_node*) #1

declare i32 @can_address_p(%union.tree_node*) #1

declare i32 @ix86_constant_alignment(%union.tree_node*, i32) #1

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @component_ref_for_mem_expr(%union.tree_node* readonly %ref) #0 {
entry:
  %placeholder_ptr = alloca %union.tree_node*, align 8
  %operands = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 39
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call fastcc %union.tree_node* @component_ref_for_mem_expr(%union.tree_node* %0)
  br label %if.end54

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %placeholder_ptr, align 8, !tbaa !7
  %bf.load389 = load i32* %code, align 8
  %bf.clear490 = and i32 %bf.load389, 255
  %switch.tableidx91 = add i32 %bf.clear490, -57
  %1 = icmp ult i32 %switch.tableidx91, 62
  br i1 %1, label %lor.end, label %lor.end.thread

lor.end.thread:                                   ; preds = %while.cond.backedge, %if.else
  %bf.load3682 = phi i32 [ %bf.load389, %if.else ], [ %bf.load3, %while.cond.backedge ]
  %inner.0.lcssa = phi %union.tree_node* [ %0, %if.else ], [ %inner.0.be, %while.cond.backedge ]
  %bf.clear3783 = and i32 %bf.load3682, 255
  br label %while.end

lor.end:                                          ; preds = %if.else, %while.cond.backedge
  %bf.load36 = phi i32 [ %bf.load3, %while.cond.backedge ], [ %bf.load389, %if.else ]
  %switch.tableidx94 = phi i32 [ %switch.tableidx, %while.cond.backedge ], [ %switch.tableidx91, %if.else ]
  %inner.092 = phi %union.tree_node* [ %inner.0.be, %while.cond.backedge ], [ %0, %if.else ]
  %switch.cast = zext i32 %switch.tableidx94 to i62
  %switch.downshift = lshr i62 -144115188075855871, %switch.cast
  %2 = and i62 %switch.downshift, 1
  %switch.masked = icmp eq i62 %2, 0
  %bf.clear37 = and i32 %bf.load36, 255
  br i1 %switch.masked, label %while.end, label %while.body

while.body:                                       ; preds = %lor.end
  %cmp38 = icmp eq i32 %bf.clear37, 57
  br i1 %cmp38, label %if.then39, label %if.else41

if.then39:                                        ; preds = %while.body
  %call40 = call %union.tree_node* @find_placeholder(%union.tree_node* %inner.092, %union.tree_node** %placeholder_ptr) #4
  br label %while.cond.backedge

if.else41:                                        ; preds = %while.body
  %operands43 = getelementptr inbounds %union.tree_node* %inner.092, i64 0, i32 0, i32 2
  %arrayidx44 = bitcast i32* %operands43 to %union.tree_node**
  %3 = load %union.tree_node** %arrayidx44, align 8, !tbaa !7
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.else41, %if.then39
  %inner.0.be = phi %union.tree_node* [ %call40, %if.then39 ], [ %3, %if.else41 ]
  %code2 = getelementptr inbounds %union.tree_node* %inner.0.be, i64 0, i32 0, i32 0, i32 2
  %bf.load3 = load i32* %code2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %switch.tableidx = add i32 %bf.clear4, -57
  %4 = icmp ult i32 %switch.tableidx, 62
  br i1 %4, label %lor.end, label %lor.end.thread

while.end:                                        ; preds = %lor.end, %lor.end.thread
  %inner.086 = phi %union.tree_node* [ %inner.0.lcssa, %lor.end.thread ], [ %inner.092, %lor.end ]
  %bf.clear3784 = phi i32 [ %bf.clear3783, %lor.end.thread ], [ %bf.clear37, %lor.end ]
  %idxprom81 = zext i32 %bf.clear3784 to i64
  %arrayidx49 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom81
  %5 = load i8* %arrayidx49, align 1, !tbaa !9
  %cmp50 = icmp eq i8 %5, 100
  %inner.0. = select i1 %cmp50, %union.tree_node* %inner.086, %union.tree_node* null
  br label %if.end54

if.end54:                                         ; preds = %while.end, %if.then
  %inner.1 = phi %union.tree_node* [ %call, %if.then ], [ %inner.0., %while.end ]
  %6 = load %union.tree_node** %arrayidx, align 8, !tbaa !7
  %cmp58 = icmp eq %union.tree_node* %inner.1, %6
  br i1 %cmp58, label %return, label %if.else61

if.else61:                                        ; preds = %if.end54
  %type = getelementptr inbounds %union.tree_node* %ref, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type, align 8, !tbaa !30
  %arrayidx65 = getelementptr inbounds i32* %operands, i64 2
  %8 = bitcast i32* %arrayidx65 to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !7
  %call66 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 39, %union.tree_node* %7, %union.tree_node* %inner.1, %union.tree_node* %9) #4
  br label %return

return:                                           ; preds = %if.end54, %if.else61
  %retval.0 = phi %union.tree_node* [ %call66, %if.else61 ], [ %ref, %if.end54 ]
  ret %union.tree_node* %retval.0
}

declare %union.tree_node* @fold(%union.tree_node*) #1

declare %union.tree_node* @build(i32, %union.tree_node*, ...) #1

; Function Attrs: nounwind uwtable
define void @set_mem_alias_set(%struct.rtx_def* nocapture %mem, i64 %set) #0 {
entry:
  %attrs.i = alloca %struct.mem_attrs, align 8
  %arg.addr.i = alloca i64, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %0 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp = icmp eq %struct.mem_attrs* %0, null
  br i1 %cmp, label %cond.false23, label %cond.end33.thread84

cond.end33.thread84:                              ; preds = %entry
  %expr = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 1
  %1 = load %union.tree_node** %expr, align 8, !tbaa !29
  %offset = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 2
  %2 = load %struct.rtx_def** %offset, align 8, !tbaa !24
  %size = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 3
  %3 = load %struct.rtx_def** %size, align 8, !tbaa !27
  br label %cond.true40

cond.false23:                                     ; preds = %entry
  %4 = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp24 = icmp eq i32 %bf.clear, 51
  br i1 %cmp24, label %cond.end45, label %cond.true25

cond.true25:                                      ; preds = %cond.false23
  %idxprom64 = zext i32 %bf.clear to i64
  %arrayidx29 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom64
  %5 = load i8* %arrayidx29, align 1, !tbaa !9
  %conv = zext i8 %5 to i64
  %6 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #4
  store i64 %conv, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %conv, 64
  %7 = icmp ult i64 %arg.off.i, 129
  br i1 %7, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.true25
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %8 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %cond.end45

if.end.i:                                         ; preds = %cond.true25
  %9 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = zext i8 %5 to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %9, i8* %6, i32 %conv.i, i32 1) #4
  %10 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %10, null
  br i1 %cmp2.i, label %if.then4.i, label %cond.end33

if.then4.i:                                       ; preds = %if.end.i
  %11 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %11) #4
  %12 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %12, i8** %call.i, align 8, !tbaa !7
  br label %cond.end33

cond.end33:                                       ; preds = %if.end.i, %if.then4.i
  %13 = phi i8* [ %12, %if.then4.i ], [ %10, %if.end.i ]
  %14 = bitcast i8* %13 to %struct.rtx_def*
  %.pre = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp38 = icmp eq %struct.mem_attrs* %.pre, null
  br i1 %cmp38, label %cond.end45, label %cond.true40

cond.true40:                                      ; preds = %cond.end33.thread84, %cond.end33
  %cond3488 = phi %struct.rtx_def* [ %3, %cond.end33.thread84 ], [ %14, %cond.end33 ]
  %cond717487 = phi %union.tree_node* [ %1, %cond.end33.thread84 ], [ null, %cond.end33 ]
  %cond147686 = phi %struct.rtx_def* [ %2, %cond.end33.thread84 ], [ null, %cond.end33 ]
  %15 = phi %struct.mem_attrs* [ %0, %cond.end33.thread84 ], [ %.pre, %cond.end33 ]
  %align = getelementptr inbounds %struct.mem_attrs* %15, i64 0, i32 4
  %16 = load i32* %align, align 4, !tbaa !26
  br label %cond.end45

cond.end45:                                       ; preds = %if.then.i, %cond.false23, %cond.end33, %cond.true40
  %cond3483 = phi %struct.rtx_def* [ %cond3488, %cond.true40 ], [ %14, %cond.end33 ], [ null, %cond.false23 ], [ %8, %if.then.i ]
  %cond717482 = phi %union.tree_node* [ %cond717487, %cond.true40 ], [ null, %cond.end33 ], [ null, %cond.false23 ], [ null, %if.then.i ]
  %cond147681 = phi %struct.rtx_def* [ %cond147686, %cond.true40 ], [ null, %cond.end33 ], [ null, %cond.false23 ], [ null, %if.then.i ]
  %cond46 = phi i32 [ %16, %cond.true40 ], [ 8, %cond.end33 ], [ 8, %cond.false23 ], [ 8, %if.then.i ]
  %17 = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 0
  %bf.load47 = load i32* %17, align 8
  %bf.lshr48 = lshr i32 %bf.load47, 16
  %bf.clear49 = and i32 %bf.lshr48, 255
  %18 = bitcast %struct.mem_attrs* %attrs.i to i8*
  call void @llvm.lifetime.start(i64 40, i8* %18) #4
  %cmp.i = icmp eq i64 %set, 0
  %cmp1.i = icmp eq %union.tree_node* %cond717482, null
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  %cmp3.i = icmp eq %struct.rtx_def* %cond147681, null
  %or.cond24.i = and i1 %or.cond.i, %cmp3.i
  br i1 %or.cond24.i, label %land.lhs.true4.i, label %if.end.i68

land.lhs.true4.i:                                 ; preds = %cond.end45
  %cmp5.i = icmp eq %struct.rtx_def* %cond3483, null
  br i1 %cmp5.i, label %land.lhs.true11.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true4.i
  %cmp6.i = icmp eq i32 %bf.clear49, 51
  br i1 %cmp6.i, label %if.end.i68, label %land.lhs.true7.i

land.lhs.true7.i:                                 ; preds = %lor.lhs.false.i
  %idxprom.i79 = zext i32 %bf.clear49 to i64
  %arrayidx.i65 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i79
  %19 = load i8* %arrayidx.i65, align 1, !tbaa !9
  %conv.i66 = zext i8 %19 to i64
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %cond3483, i64 0, i32 1, i64 0, i32 0
  %20 = load i64* %rtwint.i, align 8, !tbaa !5
  %cmp9.i = icmp eq i64 %conv.i66, %20
  %cmp12.i = icmp eq i32 %cond46, 8
  %or.cond25.i = and i1 %cmp9.i, %cmp12.i
  br i1 %or.cond25.i, label %get_mem_attrs.exit, label %if.end.i68

land.lhs.true11.i:                                ; preds = %land.lhs.true4.i
  %cmp12.old.i = icmp eq i32 %cond46, 8
  br i1 %cmp12.old.i, label %get_mem_attrs.exit, label %if.end.i68

if.end.i68:                                       ; preds = %land.lhs.true11.i, %land.lhs.true7.i, %lor.lhs.false.i, %cond.end45
  %alias14.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 0
  store i64 %set, i64* %alias14.i, align 8, !tbaa !28
  %expr15.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 1
  store %union.tree_node* %cond717482, %union.tree_node** %expr15.i, align 8, !tbaa !29
  %offset16.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 2
  store %struct.rtx_def* %cond147681, %struct.rtx_def** %offset16.i, align 8, !tbaa !24
  %size17.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 3
  store %struct.rtx_def* %cond3483, %struct.rtx_def** %size17.i, align 8, !tbaa !27
  %align18.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 4
  store i32 %cond46, i32* %align18.i, align 8, !tbaa !26
  %21 = load %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %call.i67 = call i8** @htab_find_slot(%struct.htab* %21, i8* %18, i32 1) #4
  %22 = load i8** %call.i67, align 8, !tbaa !7
  %cmp19.i = icmp eq i8* %22, null
  br i1 %cmp19.i, label %if.then21.i, label %if.end23.i

if.then21.i:                                      ; preds = %if.end.i68
  %call22.i = call i8* @ggc_alloc(i64 40) #4
  store i8* %call22.i, i8** %call.i67, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call22.i, i8* %18, i64 40, i32 1, i1 false) #4
  %.pre.i = load i8** %call.i67, align 8, !tbaa !7
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then21.i, %if.end.i68
  %23 = phi i8* [ %.pre.i, %if.then21.i ], [ %22, %if.end.i68 ]
  %phitmp = ptrtoint i8* %23 to i64
  br label %get_mem_attrs.exit

get_mem_attrs.exit:                               ; preds = %land.lhs.true7.i, %land.lhs.true11.i, %if.end23.i
  %retval.0.i69 = phi i64 [ %phitmp, %if.end23.i ], [ 0, %land.lhs.true7.i ], [ 0, %land.lhs.true11.i ]
  call void @llvm.lifetime.end(i64 40, i8* %18) #4
  %24 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  store i64 %retval.0.i69, i64* %24, align 8, !tbaa !7
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_mem_align(%struct.rtx_def* nocapture %mem, i32 %align) #0 {
entry:
  %attrs.i = alloca %struct.mem_attrs, align 8
  %arg.addr.i = alloca i64, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %0 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp = icmp eq %struct.mem_attrs* %0, null
  br i1 %cmp, label %cond.false34, label %cond.true30

cond.true30:                                      ; preds = %entry
  %alias = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 0
  %1 = load i64* %alias, align 8, !tbaa !28
  %expr = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 1
  %2 = load %union.tree_node** %expr, align 8, !tbaa !29
  %offset = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 2
  %3 = load %struct.rtx_def** %offset, align 8, !tbaa !24
  %size = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 3
  %4 = load %struct.rtx_def** %size, align 8, !tbaa !27
  %.pre = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 0
  br label %cond.end44

cond.false34:                                     ; preds = %entry
  %5 = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 0
  %bf.load = load i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp35 = icmp eq i32 %bf.clear, 51
  br i1 %cmp35, label %cond.end44, label %cond.true36

cond.true36:                                      ; preds = %cond.false34
  %idxprom63 = zext i32 %bf.clear to i64
  %arrayidx40 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom63
  %6 = load i8* %arrayidx40, align 1, !tbaa !9
  %conv = zext i8 %6 to i64
  %7 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #4
  store i64 %conv, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %conv, 64
  %8 = icmp ult i64 %arg.off.i, 129
  br i1 %8, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.true36
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %9 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %cond.end44

if.end.i:                                         ; preds = %cond.true36
  %10 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = zext i8 %6 to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %10, i8* %7, i32 %conv.i, i32 1) #4
  %11 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %11, null
  br i1 %cmp2.i, label %if.then4.i, label %if.end6.i

if.then4.i:                                       ; preds = %if.end.i
  %12 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %12) #4
  %13 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %13, i8** %call.i, align 8, !tbaa !7
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then4.i, %if.end.i
  %14 = phi i8* [ %13, %if.then4.i ], [ %11, %if.end.i ]
  %15 = bitcast i8* %14 to %struct.rtx_def*
  br label %cond.end44

cond.end44:                                       ; preds = %if.end6.i, %if.then.i, %cond.false34, %cond.true30
  %.pre-phi = phi i32* [ %5, %if.end6.i ], [ %5, %if.then.i ], [ %5, %cond.false34 ], [ %.pre, %cond.true30 ]
  %cond2581 = phi %struct.rtx_def* [ null, %if.end6.i ], [ null, %if.then.i ], [ null, %cond.false34 ], [ %3, %cond.true30 ]
  %cond707379 = phi i64 [ 0, %if.end6.i ], [ 0, %if.then.i ], [ 0, %cond.false34 ], [ %1, %cond.true30 ]
  %cond147477 = phi %union.tree_node* [ null, %if.end6.i ], [ null, %if.then.i ], [ null, %cond.false34 ], [ %2, %cond.true30 ]
  %cond45 = phi %struct.rtx_def* [ %15, %if.end6.i ], [ %9, %if.then.i ], [ null, %cond.false34 ], [ %4, %cond.true30 ]
  %bf.load46 = load i32* %.pre-phi, align 8
  %bf.lshr47 = lshr i32 %bf.load46, 16
  %bf.clear48 = and i32 %bf.lshr47, 255
  %16 = bitcast %struct.mem_attrs* %attrs.i to i8*
  call void @llvm.lifetime.start(i64 40, i8* %16) #4
  %cmp.i = icmp eq i64 %cond707379, 0
  %cmp1.i = icmp eq %union.tree_node* %cond147477, null
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  %cmp3.i = icmp eq %struct.rtx_def* %cond2581, null
  %or.cond24.i = and i1 %or.cond.i, %cmp3.i
  br i1 %or.cond24.i, label %land.lhs.true4.i, label %if.end.i67

land.lhs.true4.i:                                 ; preds = %cond.end44
  %cmp5.i = icmp eq %struct.rtx_def* %cond45, null
  br i1 %cmp5.i, label %land.lhs.true11.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true4.i
  %cmp6.i = icmp eq i32 %bf.clear48, 51
  br i1 %cmp6.i, label %if.end.i67, label %land.lhs.true7.i

land.lhs.true7.i:                                 ; preds = %lor.lhs.false.i
  %idxprom.i87 = zext i32 %bf.clear48 to i64
  %arrayidx.i64 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i87
  %17 = load i8* %arrayidx.i64, align 1, !tbaa !9
  %conv.i65 = zext i8 %17 to i64
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %cond45, i64 0, i32 1, i64 0, i32 0
  %18 = load i64* %rtwint.i, align 8, !tbaa !5
  %cmp9.i = icmp eq i64 %conv.i65, %18
  %cmp12.i = icmp eq i32 %align, 8
  %or.cond25.i = and i1 %cmp9.i, %cmp12.i
  br i1 %or.cond25.i, label %get_mem_attrs.exit, label %if.end.i67

land.lhs.true11.i:                                ; preds = %land.lhs.true4.i
  %cmp12.old.i = icmp eq i32 %align, 8
  br i1 %cmp12.old.i, label %get_mem_attrs.exit, label %if.end.i67

if.end.i67:                                       ; preds = %land.lhs.true11.i, %land.lhs.true7.i, %lor.lhs.false.i, %cond.end44
  %alias14.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 0
  store i64 %cond707379, i64* %alias14.i, align 8, !tbaa !28
  %expr15.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 1
  store %union.tree_node* %cond147477, %union.tree_node** %expr15.i, align 8, !tbaa !29
  %offset16.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 2
  store %struct.rtx_def* %cond2581, %struct.rtx_def** %offset16.i, align 8, !tbaa !24
  %size17.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 3
  store %struct.rtx_def* %cond45, %struct.rtx_def** %size17.i, align 8, !tbaa !27
  %align18.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 4
  store i32 %align, i32* %align18.i, align 8, !tbaa !26
  %19 = load %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %call.i66 = call i8** @htab_find_slot(%struct.htab* %19, i8* %16, i32 1) #4
  %20 = load i8** %call.i66, align 8, !tbaa !7
  %cmp19.i = icmp eq i8* %20, null
  br i1 %cmp19.i, label %if.then21.i, label %if.end23.i

if.then21.i:                                      ; preds = %if.end.i67
  %call22.i = call i8* @ggc_alloc(i64 40) #4
  store i8* %call22.i, i8** %call.i66, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call22.i, i8* %16, i64 40, i32 1, i1 false) #4
  %.pre.i = load i8** %call.i66, align 8, !tbaa !7
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then21.i, %if.end.i67
  %21 = phi i8* [ %.pre.i, %if.then21.i ], [ %20, %if.end.i67 ]
  %phitmp = ptrtoint i8* %21 to i64
  br label %get_mem_attrs.exit

get_mem_attrs.exit:                               ; preds = %land.lhs.true7.i, %land.lhs.true11.i, %if.end23.i
  %retval.0.i68 = phi i64 [ %phitmp, %if.end23.i ], [ 0, %land.lhs.true7.i ], [ 0, %land.lhs.true11.i ]
  call void @llvm.lifetime.end(i64 40, i8* %16) #4
  %22 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  store i64 %retval.0.i68, i64* %22, align 8, !tbaa !7
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_mem_expr(%struct.rtx_def* nocapture %mem, %union.tree_node* %expr) #0 {
entry:
  %attrs.i = alloca %struct.mem_attrs, align 8
  %arg.addr.i = alloca i64, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %0 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp = icmp eq %struct.mem_attrs* %0, null
  br i1 %cmp, label %cond.false23, label %cond.end33.thread84

cond.end33.thread84:                              ; preds = %entry
  %alias = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 0
  %1 = load i64* %alias, align 8, !tbaa !28
  %offset = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 2
  %2 = load %struct.rtx_def** %offset, align 8, !tbaa !24
  %size = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 3
  %3 = load %struct.rtx_def** %size, align 8, !tbaa !27
  br label %cond.true40

cond.false23:                                     ; preds = %entry
  %4 = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp24 = icmp eq i32 %bf.clear, 51
  br i1 %cmp24, label %cond.end45, label %cond.true25

cond.true25:                                      ; preds = %cond.false23
  %idxprom64 = zext i32 %bf.clear to i64
  %arrayidx29 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom64
  %5 = load i8* %arrayidx29, align 1, !tbaa !9
  %conv = zext i8 %5 to i64
  %6 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #4
  store i64 %conv, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %conv, 64
  %7 = icmp ult i64 %arg.off.i, 129
  br i1 %7, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.true25
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %8 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %cond.end45

if.end.i:                                         ; preds = %cond.true25
  %9 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = zext i8 %5 to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %9, i8* %6, i32 %conv.i, i32 1) #4
  %10 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %10, null
  br i1 %cmp2.i, label %if.then4.i, label %cond.end33

if.then4.i:                                       ; preds = %if.end.i
  %11 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %11) #4
  %12 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %12, i8** %call.i, align 8, !tbaa !7
  br label %cond.end33

cond.end33:                                       ; preds = %if.end.i, %if.then4.i
  %13 = phi i8* [ %12, %if.then4.i ], [ %10, %if.end.i ]
  %14 = bitcast i8* %13 to %struct.rtx_def*
  %.pre = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp38 = icmp eq %struct.mem_attrs* %.pre, null
  br i1 %cmp38, label %cond.end45, label %cond.true40

cond.true40:                                      ; preds = %cond.end33.thread84, %cond.end33
  %cond3488 = phi %struct.rtx_def* [ %3, %cond.end33.thread84 ], [ %14, %cond.end33 ]
  %cond717487 = phi i64 [ %1, %cond.end33.thread84 ], [ 0, %cond.end33 ]
  %cond147686 = phi %struct.rtx_def* [ %2, %cond.end33.thread84 ], [ null, %cond.end33 ]
  %15 = phi %struct.mem_attrs* [ %0, %cond.end33.thread84 ], [ %.pre, %cond.end33 ]
  %align = getelementptr inbounds %struct.mem_attrs* %15, i64 0, i32 4
  %16 = load i32* %align, align 4, !tbaa !26
  br label %cond.end45

cond.end45:                                       ; preds = %if.then.i, %cond.false23, %cond.end33, %cond.true40
  %cond3483 = phi %struct.rtx_def* [ %cond3488, %cond.true40 ], [ %14, %cond.end33 ], [ null, %cond.false23 ], [ %8, %if.then.i ]
  %cond717482 = phi i64 [ %cond717487, %cond.true40 ], [ 0, %cond.end33 ], [ 0, %cond.false23 ], [ 0, %if.then.i ]
  %cond147681 = phi %struct.rtx_def* [ %cond147686, %cond.true40 ], [ null, %cond.end33 ], [ null, %cond.false23 ], [ null, %if.then.i ]
  %cond46 = phi i32 [ %16, %cond.true40 ], [ 8, %cond.end33 ], [ 8, %cond.false23 ], [ 8, %if.then.i ]
  %17 = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 0
  %bf.load47 = load i32* %17, align 8
  %bf.lshr48 = lshr i32 %bf.load47, 16
  %bf.clear49 = and i32 %bf.lshr48, 255
  %18 = bitcast %struct.mem_attrs* %attrs.i to i8*
  call void @llvm.lifetime.start(i64 40, i8* %18) #4
  %cmp.i = icmp eq i64 %cond717482, 0
  %cmp1.i = icmp eq %union.tree_node* %expr, null
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  %cmp3.i = icmp eq %struct.rtx_def* %cond147681, null
  %or.cond24.i = and i1 %or.cond.i, %cmp3.i
  br i1 %or.cond24.i, label %land.lhs.true4.i, label %if.end.i68

land.lhs.true4.i:                                 ; preds = %cond.end45
  %cmp5.i = icmp eq %struct.rtx_def* %cond3483, null
  br i1 %cmp5.i, label %land.lhs.true11.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true4.i
  %cmp6.i = icmp eq i32 %bf.clear49, 51
  br i1 %cmp6.i, label %if.end.i68, label %land.lhs.true7.i

land.lhs.true7.i:                                 ; preds = %lor.lhs.false.i
  %idxprom.i79 = zext i32 %bf.clear49 to i64
  %arrayidx.i65 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i79
  %19 = load i8* %arrayidx.i65, align 1, !tbaa !9
  %conv.i66 = zext i8 %19 to i64
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %cond3483, i64 0, i32 1, i64 0, i32 0
  %20 = load i64* %rtwint.i, align 8, !tbaa !5
  %cmp9.i = icmp eq i64 %conv.i66, %20
  %cmp12.i = icmp eq i32 %cond46, 8
  %or.cond25.i = and i1 %cmp9.i, %cmp12.i
  br i1 %or.cond25.i, label %get_mem_attrs.exit, label %if.end.i68

land.lhs.true11.i:                                ; preds = %land.lhs.true4.i
  %cmp12.old.i = icmp eq i32 %cond46, 8
  br i1 %cmp12.old.i, label %get_mem_attrs.exit, label %if.end.i68

if.end.i68:                                       ; preds = %land.lhs.true11.i, %land.lhs.true7.i, %lor.lhs.false.i, %cond.end45
  %alias14.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 0
  store i64 %cond717482, i64* %alias14.i, align 8, !tbaa !28
  %expr15.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 1
  store %union.tree_node* %expr, %union.tree_node** %expr15.i, align 8, !tbaa !29
  %offset16.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 2
  store %struct.rtx_def* %cond147681, %struct.rtx_def** %offset16.i, align 8, !tbaa !24
  %size17.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 3
  store %struct.rtx_def* %cond3483, %struct.rtx_def** %size17.i, align 8, !tbaa !27
  %align18.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 4
  store i32 %cond46, i32* %align18.i, align 8, !tbaa !26
  %21 = load %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %call.i67 = call i8** @htab_find_slot(%struct.htab* %21, i8* %18, i32 1) #4
  %22 = load i8** %call.i67, align 8, !tbaa !7
  %cmp19.i = icmp eq i8* %22, null
  br i1 %cmp19.i, label %if.then21.i, label %if.end23.i

if.then21.i:                                      ; preds = %if.end.i68
  %call22.i = call i8* @ggc_alloc(i64 40) #4
  store i8* %call22.i, i8** %call.i67, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call22.i, i8* %18, i64 40, i32 1, i1 false) #4
  %.pre.i = load i8** %call.i67, align 8, !tbaa !7
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then21.i, %if.end.i68
  %23 = phi i8* [ %.pre.i, %if.then21.i ], [ %22, %if.end.i68 ]
  %phitmp = ptrtoint i8* %23 to i64
  br label %get_mem_attrs.exit

get_mem_attrs.exit:                               ; preds = %land.lhs.true7.i, %land.lhs.true11.i, %if.end23.i
  %retval.0.i69 = phi i64 [ %phitmp, %if.end23.i ], [ 0, %land.lhs.true7.i ], [ 0, %land.lhs.true11.i ]
  call void @llvm.lifetime.end(i64 40, i8* %18) #4
  %24 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  store i64 %retval.0.i69, i64* %24, align 8, !tbaa !7
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_mem_offset(%struct.rtx_def* nocapture %mem, %struct.rtx_def* %offset) #0 {
entry:
  %attrs.i = alloca %struct.mem_attrs, align 8
  %arg.addr.i = alloca i64, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %0 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp = icmp eq %struct.mem_attrs* %0, null
  br i1 %cmp, label %cond.false23, label %cond.end33.thread84

cond.end33.thread84:                              ; preds = %entry
  %alias = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 0
  %1 = load i64* %alias, align 8, !tbaa !28
  %expr = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 1
  %2 = load %union.tree_node** %expr, align 8, !tbaa !29
  %size = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 3
  %3 = load %struct.rtx_def** %size, align 8, !tbaa !27
  br label %cond.true40

cond.false23:                                     ; preds = %entry
  %4 = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp24 = icmp eq i32 %bf.clear, 51
  br i1 %cmp24, label %cond.end45, label %cond.true25

cond.true25:                                      ; preds = %cond.false23
  %idxprom64 = zext i32 %bf.clear to i64
  %arrayidx29 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom64
  %5 = load i8* %arrayidx29, align 1, !tbaa !9
  %conv = zext i8 %5 to i64
  %6 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #4
  store i64 %conv, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %conv, 64
  %7 = icmp ult i64 %arg.off.i, 129
  br i1 %7, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.true25
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %8 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %cond.end45

if.end.i:                                         ; preds = %cond.true25
  %9 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = zext i8 %5 to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %9, i8* %6, i32 %conv.i, i32 1) #4
  %10 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %10, null
  br i1 %cmp2.i, label %if.then4.i, label %cond.end33

if.then4.i:                                       ; preds = %if.end.i
  %11 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %11) #4
  %12 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %12, i8** %call.i, align 8, !tbaa !7
  br label %cond.end33

cond.end33:                                       ; preds = %if.end.i, %if.then4.i
  %13 = phi i8* [ %12, %if.then4.i ], [ %10, %if.end.i ]
  %14 = bitcast i8* %13 to %struct.rtx_def*
  %.pre = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp38 = icmp eq %struct.mem_attrs* %.pre, null
  br i1 %cmp38, label %cond.end45, label %cond.true40

cond.true40:                                      ; preds = %cond.end33.thread84, %cond.end33
  %cond3488 = phi %struct.rtx_def* [ %3, %cond.end33.thread84 ], [ %14, %cond.end33 ]
  %cond717487 = phi i64 [ %1, %cond.end33.thread84 ], [ 0, %cond.end33 ]
  %cond147686 = phi %union.tree_node* [ %2, %cond.end33.thread84 ], [ null, %cond.end33 ]
  %15 = phi %struct.mem_attrs* [ %0, %cond.end33.thread84 ], [ %.pre, %cond.end33 ]
  %align = getelementptr inbounds %struct.mem_attrs* %15, i64 0, i32 4
  %16 = load i32* %align, align 4, !tbaa !26
  br label %cond.end45

cond.end45:                                       ; preds = %if.then.i, %cond.false23, %cond.end33, %cond.true40
  %cond3483 = phi %struct.rtx_def* [ %cond3488, %cond.true40 ], [ %14, %cond.end33 ], [ null, %cond.false23 ], [ %8, %if.then.i ]
  %cond717482 = phi i64 [ %cond717487, %cond.true40 ], [ 0, %cond.end33 ], [ 0, %cond.false23 ], [ 0, %if.then.i ]
  %cond147681 = phi %union.tree_node* [ %cond147686, %cond.true40 ], [ null, %cond.end33 ], [ null, %cond.false23 ], [ null, %if.then.i ]
  %cond46 = phi i32 [ %16, %cond.true40 ], [ 8, %cond.end33 ], [ 8, %cond.false23 ], [ 8, %if.then.i ]
  %17 = getelementptr inbounds %struct.rtx_def* %mem, i64 0, i32 0
  %bf.load47 = load i32* %17, align 8
  %bf.lshr48 = lshr i32 %bf.load47, 16
  %bf.clear49 = and i32 %bf.lshr48, 255
  %18 = bitcast %struct.mem_attrs* %attrs.i to i8*
  call void @llvm.lifetime.start(i64 40, i8* %18) #4
  %cmp.i = icmp eq i64 %cond717482, 0
  %cmp1.i = icmp eq %union.tree_node* %cond147681, null
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  %cmp3.i = icmp eq %struct.rtx_def* %offset, null
  %or.cond24.i = and i1 %or.cond.i, %cmp3.i
  br i1 %or.cond24.i, label %land.lhs.true4.i, label %if.end.i68

land.lhs.true4.i:                                 ; preds = %cond.end45
  %cmp5.i = icmp eq %struct.rtx_def* %cond3483, null
  br i1 %cmp5.i, label %land.lhs.true11.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true4.i
  %cmp6.i = icmp eq i32 %bf.clear49, 51
  br i1 %cmp6.i, label %if.end.i68, label %land.lhs.true7.i

land.lhs.true7.i:                                 ; preds = %lor.lhs.false.i
  %idxprom.i79 = zext i32 %bf.clear49 to i64
  %arrayidx.i65 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i79
  %19 = load i8* %arrayidx.i65, align 1, !tbaa !9
  %conv.i66 = zext i8 %19 to i64
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %cond3483, i64 0, i32 1, i64 0, i32 0
  %20 = load i64* %rtwint.i, align 8, !tbaa !5
  %cmp9.i = icmp eq i64 %conv.i66, %20
  %cmp12.i = icmp eq i32 %cond46, 8
  %or.cond25.i = and i1 %cmp9.i, %cmp12.i
  br i1 %or.cond25.i, label %get_mem_attrs.exit, label %if.end.i68

land.lhs.true11.i:                                ; preds = %land.lhs.true4.i
  %cmp12.old.i = icmp eq i32 %cond46, 8
  br i1 %cmp12.old.i, label %get_mem_attrs.exit, label %if.end.i68

if.end.i68:                                       ; preds = %land.lhs.true11.i, %land.lhs.true7.i, %lor.lhs.false.i, %cond.end45
  %alias14.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 0
  store i64 %cond717482, i64* %alias14.i, align 8, !tbaa !28
  %expr15.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 1
  store %union.tree_node* %cond147681, %union.tree_node** %expr15.i, align 8, !tbaa !29
  %offset16.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 2
  store %struct.rtx_def* %offset, %struct.rtx_def** %offset16.i, align 8, !tbaa !24
  %size17.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 3
  store %struct.rtx_def* %cond3483, %struct.rtx_def** %size17.i, align 8, !tbaa !27
  %align18.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 4
  store i32 %cond46, i32* %align18.i, align 8, !tbaa !26
  %21 = load %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %call.i67 = call i8** @htab_find_slot(%struct.htab* %21, i8* %18, i32 1) #4
  %22 = load i8** %call.i67, align 8, !tbaa !7
  %cmp19.i = icmp eq i8* %22, null
  br i1 %cmp19.i, label %if.then21.i, label %if.end23.i

if.then21.i:                                      ; preds = %if.end.i68
  %call22.i = call i8* @ggc_alloc(i64 40) #4
  store i8* %call22.i, i8** %call.i67, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call22.i, i8* %18, i64 40, i32 1, i1 false) #4
  %.pre.i = load i8** %call.i67, align 8, !tbaa !7
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then21.i, %if.end.i68
  %23 = phi i8* [ %.pre.i, %if.then21.i ], [ %22, %if.end.i68 ]
  %phitmp = ptrtoint i8* %23 to i64
  br label %get_mem_attrs.exit

get_mem_attrs.exit:                               ; preds = %land.lhs.true7.i, %land.lhs.true11.i, %if.end23.i
  %retval.0.i69 = phi i64 [ %phitmp, %if.end23.i ], [ 0, %land.lhs.true7.i ], [ 0, %land.lhs.true11.i ]
  call void @llvm.lifetime.end(i64 40, i8* %18) #4
  %24 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  store i64 %retval.0.i69, i64* %24, align 8, !tbaa !7
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @change_address(%struct.rtx_def* readonly %memref, i32 %mode, %struct.rtx_def* %addr) #0 {
entry:
  %attrs.i = alloca %struct.mem_attrs, align 8
  %arg.addr.i = alloca i64, align 8
  %call = call fastcc %struct.rtx_def* @change_address_1(%struct.rtx_def* %memref, i32 %mode, %struct.rtx_def* %addr, i32 1)
  %0 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %arrayidx = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %1 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp = icmp eq %struct.mem_attrs* %1, null
  br i1 %cmp, label %cond.end, label %cond.false

cond.false:                                       ; preds = %entry
  %alias = getelementptr inbounds %struct.mem_attrs* %1, i64 0, i32 0
  %2 = load i64* %alias, align 8, !tbaa !28
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.false
  %cond = phi i64 [ %2, %cond.false ], [ 0, %entry ]
  %cmp4 = icmp eq i32 %bf.clear, 51
  br i1 %cmp4, label %cond.end16, label %cond.false6

cond.false6:                                      ; preds = %cond.end
  %idxprom30 = zext i32 %bf.clear to i64
  %arrayidx7 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom30
  %3 = load i8* %arrayidx7, align 1, !tbaa !9
  %conv = zext i8 %3 to i64
  %4 = bitcast i64* %arg.addr.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #4
  store i64 %conv, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %conv, 64
  %5 = icmp ult i64 %arg.off.i, 129
  br i1 %5, label %cond.end9.thread37, label %if.end.i

cond.end9.thread37:                               ; preds = %cond.false6
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %6 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  call void @llvm.lifetime.end(i64 8, i8* %4) #4
  br label %cond.false14

if.end.i:                                         ; preds = %cond.false6
  %7 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = zext i8 %3 to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %7, i8* %4, i32 %conv.i, i32 1) #4
  %8 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %8, null
  br i1 %cmp2.i, label %if.then4.i, label %cond.end9

if.then4.i:                                       ; preds = %if.end.i
  %9 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %9) #4
  %10 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %10, i8** %call.i, align 8, !tbaa !7
  br label %cond.end9

cond.end9:                                        ; preds = %if.end.i, %if.then4.i
  %11 = phi i8* [ %10, %if.then4.i ], [ %8, %if.end.i ]
  %12 = bitcast i8* %11 to %struct.rtx_def*
  call void @llvm.lifetime.end(i64 8, i8* %4) #4
  br label %cond.false14

cond.false14:                                     ; preds = %cond.end9, %cond.end9.thread37
  %retval.0.i38 = phi %struct.rtx_def* [ %6, %cond.end9.thread37 ], [ %12, %cond.end9 ]
  %call15 = call i32 @get_mode_alignment(i32 %bf.clear) #4
  br label %cond.end16

cond.end16:                                       ; preds = %cond.end, %cond.false14
  %cond1036 = phi %struct.rtx_def* [ %retval.0.i38, %cond.false14 ], [ null, %cond.end ]
  %cond17 = phi i32 [ %call15, %cond.false14 ], [ 8, %cond.end ]
  %13 = bitcast %struct.mem_attrs* %attrs.i to i8*
  call void @llvm.lifetime.start(i64 40, i8* %13) #4
  %cmp.i = icmp eq i64 %cond, 0
  br i1 %cmp.i, label %land.lhs.true4.i, label %if.end.i34

land.lhs.true4.i:                                 ; preds = %cond.end16
  %cmp5.i = icmp eq %struct.rtx_def* %cond1036, null
  br i1 %cmp5.i, label %land.lhs.true11.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true4.i
  br i1 %cmp4, label %if.end.i34, label %land.lhs.true7.i

land.lhs.true7.i:                                 ; preds = %lor.lhs.false.i
  %idxprom.i39 = zext i32 %bf.clear to i64
  %arrayidx.i31 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i39
  %14 = load i8* %arrayidx.i31, align 1, !tbaa !9
  %conv.i32 = zext i8 %14 to i64
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %cond1036, i64 0, i32 1, i64 0, i32 0
  %15 = load i64* %rtwint.i, align 8, !tbaa !5
  %cmp9.i = icmp eq i64 %conv.i32, %15
  %cmp12.i = icmp eq i32 %cond17, 8
  %or.cond25.i = and i1 %cmp9.i, %cmp12.i
  br i1 %or.cond25.i, label %get_mem_attrs.exit, label %if.end.i34

land.lhs.true11.i:                                ; preds = %land.lhs.true4.i
  %cmp12.old.i = icmp eq i32 %cond17, 8
  br i1 %cmp12.old.i, label %get_mem_attrs.exit, label %if.end.i34

if.end.i34:                                       ; preds = %land.lhs.true11.i, %land.lhs.true7.i, %lor.lhs.false.i, %cond.end16
  %alias14.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 0
  store i64 %cond, i64* %alias14.i, align 8, !tbaa !28
  %expr15.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 1
  %size17.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 3
  %16 = bitcast %union.tree_node** %expr15.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 16, i32 8, i1 false)
  store %struct.rtx_def* %cond1036, %struct.rtx_def** %size17.i, align 8, !tbaa !27
  %align18.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 4
  store i32 %cond17, i32* %align18.i, align 8, !tbaa !26
  %17 = load %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %call.i33 = call i8** @htab_find_slot(%struct.htab* %17, i8* %13, i32 1) #4
  %18 = load i8** %call.i33, align 8, !tbaa !7
  %cmp19.i = icmp eq i8* %18, null
  br i1 %cmp19.i, label %if.then21.i, label %if.end23.i

if.then21.i:                                      ; preds = %if.end.i34
  %call22.i = call i8* @ggc_alloc(i64 40) #4
  store i8* %call22.i, i8** %call.i33, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call22.i, i8* %13, i64 40, i32 1, i1 false) #4
  %.pre.i = load i8** %call.i33, align 8, !tbaa !7
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then21.i, %if.end.i34
  %19 = phi i8* [ %.pre.i, %if.then21.i ], [ %18, %if.end.i34 ]
  %phitmp = ptrtoint i8* %19 to i64
  br label %get_mem_attrs.exit

get_mem_attrs.exit:                               ; preds = %land.lhs.true7.i, %land.lhs.true11.i, %if.end23.i
  %retval.0.i35 = phi i64 [ %phitmp, %if.end23.i ], [ 0, %land.lhs.true7.i ], [ 0, %land.lhs.true11.i ]
  call void @llvm.lifetime.end(i64 40, i8* %13) #4
  %20 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1, i32 0
  store i64 %retval.0.i35, i64* %20, align 8, !tbaa !7
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.rtx_def* @change_address_1(%struct.rtx_def* readonly %memref, i32 %mode, %struct.rtx_def* %addr, i32 %validate) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1923, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.change_address_1, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq i32 %mode, 0
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear4 = and i32 %bf.lshr, 255
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %mode.addr.0 = phi i32 [ %bf.clear4, %if.then2 ], [ %mode, %if.end ]
  %cmp6 = icmp eq %struct.rtx_def* %addr, null
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end5
  %arrayidx = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end5
  %addr.addr.0 = phi %struct.rtx_def* [ %1, %if.then7 ], [ %addr, %if.end5 ]
  %tobool = icmp eq i32 %validate, 0
  br i1 %tobool, label %if.end18, label %if.then9

if.then9:                                         ; preds = %if.end8
  %2 = load i32* @reload_in_progress, align 4, !tbaa !1
  %3 = load i32* @reload_completed, align 4
  %4 = or i32 %3, %2
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %if.else, label %if.then12

if.then12:                                        ; preds = %if.then9
  %call = tail call i32 @memory_address_p(i32 %mode.addr.0, %struct.rtx_def* %addr.addr.0) #4
  %tobool13 = icmp eq i32 %call, 0
  br i1 %tobool13, label %if.then14, label %if.end18

if.then14:                                        ; preds = %if.then12
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 1934, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.change_address_1, i64 0, i64 0)) #8
  unreachable

if.else:                                          ; preds = %if.then9
  %call16 = tail call %struct.rtx_def* @memory_address(i32 %mode.addr.0, %struct.rtx_def* %addr.addr.0) #4
  br label %if.end18

if.end18:                                         ; preds = %if.then12, %if.end8, %if.else
  %addr.addr.1 = phi %struct.rtx_def* [ %addr.addr.0, %if.then12 ], [ %call16, %if.else ], [ %addr.addr.0, %if.end8 ]
  %fld19 = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 1
  %rtx21 = bitcast [1 x %union.rtunion_def]* %fld19 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx21, align 8, !tbaa !7
  %call22 = tail call i32 @rtx_equal_p(%struct.rtx_def* %addr.addr.1, %struct.rtx_def* %6) #4
  %tobool23 = icmp eq i32 %call22, 0
  br i1 %tobool23, label %if.end29, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end18
  %bf.load24 = load i32* %0, align 8
  %bf.lshr25 = lshr i32 %bf.load24, 16
  %bf.clear26 = and i32 %bf.lshr25, 255
  %cmp27 = icmp eq i32 %mode.addr.0, %bf.clear26
  br i1 %cmp27, label %return, label %if.end29

if.end29:                                         ; preds = %if.end18, %land.lhs.true
  %call.i = tail call %struct.rtx_def* @gen_rtx_fmt_e0(i32 66, i32 %mode.addr.0, %struct.rtx_def* %addr.addr.1) #4
  %7 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 1, i32 0
  store i64 0, i64* %7, align 8, !tbaa !7
  %bf.load31 = load i32* %0, align 8
  %bf.clear33 = and i32 %bf.load31, 134217728
  %8 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 0
  %bf.load34 = load i32* %8, align 8
  %bf.clear35 = and i32 %bf.load34, -134217729
  %bf.set = or i32 %bf.clear35, %bf.clear33
  store i32 %bf.set, i32* %8, align 8
  %bf.load36 = load i32* %0, align 8
  %bf.clear38 = and i32 %bf.load36, 268435456
  %bf.clear42 = and i32 %bf.set, -268435457
  %bf.set43 = or i32 %bf.clear42, %bf.clear38
  store i32 %bf.set43, i32* %8, align 8
  %bf.load44 = load i32* %0, align 8
  %bf.lshr45 = and i32 %bf.load44, -2147483648
  %bf.clear49 = and i32 %bf.set43, 2147483647
  %bf.set50 = or i32 %bf.clear49, %bf.lshr45
  store i32 %bf.set50, i32* %8, align 8
  %bf.load51 = load i32* %0, align 8
  %bf.clear53 = and i32 %bf.load51, 67108864
  %bf.clear57 = and i32 %bf.set50, -67108865
  %bf.set58 = or i32 %bf.clear57, %bf.clear53
  store i32 %bf.set58, i32* %8, align 8
  %bf.load59 = load i32* %0, align 8
  %bf.clear61 = and i32 %bf.load59, 16777216
  %bf.clear65 = and i32 %bf.set58, -16777217
  %bf.set66 = or i32 %bf.clear65, %bf.clear61
  store i32 %bf.set66, i32* %8, align 8
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx68 to %struct.mem_attrs**
  %9 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %.c = ptrtoint %struct.mem_attrs* %9 to i64
  store i64 %.c, i64* %7, align 8, !tbaa !7
  br label %return

return:                                           ; preds = %land.lhs.true, %if.end29
  %retval.0 = phi %struct.rtx_def* [ %call.i, %if.end29 ], [ %memref, %land.lhs.true ]
  ret %struct.rtx_def* %retval.0
}

declare i32 @get_mode_alignment(i32) #1

declare %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #1

declare %struct.rtx_def* @plus_constant_wide(%struct.rtx_def*, i64) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @adjust_automodify_address_1(%struct.rtx_def* readonly %memref, i32 %mode, %struct.rtx_def* %addr, i64 %offset, i32 %validate) #0 {
entry:
  %call = tail call fastcc %struct.rtx_def* @change_address_1(%struct.rtx_def* %memref, i32 0, %struct.rtx_def* %addr, i32 %validate)
  %call1 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %call, i32 %mode, i64 %offset, i32 %validate, i32 0)
  ret %struct.rtx_def* %call1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @offset_address(%struct.rtx_def* readonly %memref, %struct.rtx_def* %offset, i64 %pow2) #0 {
entry:
  %attrs.i = alloca %struct.mem_attrs, align 8
  %fld = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %1 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %1, 25
  %2 = and i32 %and, 1
  %3 = or i32 %2, 4
  %call = call %struct.rtx_def* @simplify_gen_binary(i32 75, i32 %3, %struct.rtx_def* %0, %struct.rtx_def* %offset) #4
  %4 = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %call1 = call i32 @memory_address_p(i32 %bf.clear, %struct.rtx_def* %call) #4
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load3 = load i32* %5, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp = icmp eq i32 %bf.clear4, 75
  br i1 %cmp, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx8, align 8, !tbaa !7
  %7 = load %struct.rtx_def** @pic_offset_table_rtx, align 8, !tbaa !7
  %cmp9 = icmp eq %struct.rtx_def* %6, %7
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5
  %bf.lshr11 = lshr i32 %bf.load3, 16
  %bf.clear12 = and i32 %bf.lshr11, 255
  %call13 = call %struct.rtx_def* @force_reg(i32 %bf.clear12, %struct.rtx_def* %0) #4
  %8 = load i32* @target_flags, align 4, !tbaa !1
  %and14 = lshr i32 %8, 25
  %9 = and i32 %and14, 1
  %10 = or i32 %9, 4
  %call17 = call %struct.rtx_def* @simplify_gen_binary(i32 75, i32 %10, %struct.rtx_def* %call13, %struct.rtx_def* %offset) #4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then, %land.lhs.true5, %land.lhs.true
  %new.0 = phi %struct.rtx_def* [ %call, %entry ], [ %call17, %if.then ], [ %call, %land.lhs.true5 ], [ %call, %land.lhs.true ]
  %11 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  call void @update_temp_slot_address(%struct.rtx_def* %11, %struct.rtx_def* %new.0) #4
  %call21 = call fastcc %struct.rtx_def* @change_address_1(%struct.rtx_def* %memref, i32 0, %struct.rtx_def* %new.0, i32 1)
  %arrayidx23 = getelementptr inbounds %struct.rtx_def* %memref, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx23 to %struct.mem_attrs**
  %12 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp24 = icmp eq %struct.mem_attrs* %12, null
  br i1 %cmp24, label %cond.end49, label %cond.true44

cond.true44:                                      ; preds = %if.end
  %alias = getelementptr inbounds %struct.mem_attrs* %12, i64 0, i32 0
  %13 = load i64* %alias, align 8, !tbaa !28
  %expr = getelementptr inbounds %struct.mem_attrs* %12, i64 0, i32 1
  %14 = load %union.tree_node** %expr, align 8, !tbaa !29
  %align = getelementptr inbounds %struct.mem_attrs* %12, i64 0, i32 4
  %15 = load i32* %align, align 4, !tbaa !26
  %phitmp = zext i32 %15 to i64
  br label %cond.end49

cond.end49:                                       ; preds = %if.end, %cond.true44
  %16 = phi %struct.mem_attrs* [ %12, %cond.true44 ], [ null, %if.end ]
  %cond39109 = phi %union.tree_node* [ %14, %cond.true44 ], [ null, %if.end ]
  %cond28105108 = phi i64 [ %13, %cond.true44 ], [ 0, %if.end ]
  %cond50 = phi i64 [ %phitmp, %cond.true44 ], [ 8, %if.end ]
  %mul = shl i64 %pow2, 3
  %cmp51 = icmp ult i64 %cond50, %mul
  br i1 %cmp51, label %cond.true53, label %cond.end70

cond.true53:                                      ; preds = %cond.end49
  %cmp57 = icmp eq %struct.mem_attrs* %16, null
  br i1 %cmp57, label %cond.end70, label %cond.true59

cond.true59:                                      ; preds = %cond.true53
  %align63 = getelementptr inbounds %struct.mem_attrs* %16, i64 0, i32 4
  %17 = load i32* %align63, align 4, !tbaa !26
  %phitmp103 = zext i32 %17 to i64
  br label %cond.end70

cond.end70:                                       ; preds = %cond.end49, %cond.true59, %cond.true53
  %cond71 = phi i64 [ %phitmp103, %cond.true59 ], [ 8, %cond.true53 ], [ %mul, %cond.end49 ]
  %conv72 = trunc i64 %cond71 to i32
  %18 = bitcast %struct.mem_attrs* %attrs.i to i8*
  call void @llvm.lifetime.start(i64 40, i8* %18) #4
  %cmp.i = icmp eq i64 %cond28105108, 0
  %cmp1.i = icmp eq %union.tree_node* %cond39109, null
  %or.cond.i = and i1 %cmp.i, %cmp1.i
  %cmp12.old.i = icmp eq i32 %conv72, 8
  %or.cond = and i1 %or.cond.i, %cmp12.old.i
  br i1 %or.cond, label %get_mem_attrs.exit, label %if.end.i

if.end.i:                                         ; preds = %cond.end70
  %alias14.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 0
  store i64 %cond28105108, i64* %alias14.i, align 8, !tbaa !28
  %expr15.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 1
  store %union.tree_node* %cond39109, %union.tree_node** %expr15.i, align 8, !tbaa !29
  %offset16.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 2
  %align18.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 4
  %19 = bitcast %struct.rtx_def** %offset16.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 16, i32 8, i1 false)
  store i32 %conv72, i32* %align18.i, align 8, !tbaa !26
  %20 = load %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %call.i = call i8** @htab_find_slot(%struct.htab* %20, i8* %18, i32 1) #4
  %21 = load i8** %call.i, align 8, !tbaa !7
  %cmp19.i = icmp eq i8* %21, null
  br i1 %cmp19.i, label %if.then21.i, label %if.end23.i

if.then21.i:                                      ; preds = %if.end.i
  %call22.i = call i8* @ggc_alloc(i64 40) #4
  store i8* %call22.i, i8** %call.i, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call22.i, i8* %18, i64 40, i32 1, i1 false) #4
  %.pre.i = load i8** %call.i, align 8, !tbaa !7
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then21.i, %if.end.i
  %22 = phi i8* [ %.pre.i, %if.then21.i ], [ %21, %if.end.i ]
  %phitmp111 = ptrtoint i8* %22 to i64
  br label %get_mem_attrs.exit

get_mem_attrs.exit:                               ; preds = %cond.end70, %if.end23.i
  %retval.0.i = phi i64 [ %phitmp111, %if.end23.i ], [ 0, %cond.end70 ]
  call void @llvm.lifetime.end(i64 40, i8* %18) #4
  %23 = getelementptr inbounds %struct.rtx_def* %call21, i64 0, i32 1, i64 1, i32 0
  store i64 %retval.0.i, i64* %23, align 8, !tbaa !7
  ret %struct.rtx_def* %call21
}

declare %struct.rtx_def* @simplify_gen_binary(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @memory_address_p(i32, %struct.rtx_def*) #1

declare void @update_temp_slot_address(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @replace_equiv_address_nv(%struct.rtx_def* readonly %memref, %struct.rtx_def* %addr) #0 {
entry:
  %call = tail call fastcc %struct.rtx_def* @change_address_1(%struct.rtx_def* %memref, i32 0, %struct.rtx_def* %addr, i32 0)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @widen_memory_access(%struct.rtx_def* readonly %memref, i32 %mode, i64 %offset) #0 {
entry:
  %attrs.i = alloca %struct.mem_attrs, align 8
  %arg.addr.i155 = alloca i64, align 8
  %arg.addr.i = alloca i64, align 8
  %call = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %memref, i32 %mode, i64 %offset, i32 1, i32 1)
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %0 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp = icmp eq %struct.mem_attrs* %0, null
  br i1 %cmp, label %cond.end15.thread, label %cond.end15

cond.end15.thread:                                ; preds = %entry
  %idxprom175 = sext i32 %mode to i64
  %arrayidx17176 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom175
  %1 = load i8* %arrayidx17176, align 1, !tbaa !9
  br label %while.cond.preheader.while.end.loopexit_crit_edge

cond.end15:                                       ; preds = %entry
  %expr4 = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 1
  %2 = load %union.tree_node** %expr4, align 8, !tbaa !29
  %offset14 = getelementptr inbounds %struct.mem_attrs* %0, i64 0, i32 2
  %3 = load %struct.rtx_def** %offset14, align 8, !tbaa !24
  %idxprom = sext i32 %mode to i64
  %arrayidx17 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %4 = load i8* %arrayidx17, align 1, !tbaa !9
  %tobool = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool, label %while.cond.preheader.while.end.loopexit_crit_edge, label %while.cond.preheader

while.cond.preheader:                             ; preds = %cond.end15
  %tobool18184 = icmp eq %union.tree_node* %2, null
  br i1 %tobool18184, label %while.cond.preheader.while.end.loopexit_crit_edge, label %while.body.lr.ph

while.cond.preheader.while.end.loopexit_crit_edge: ; preds = %cond.end15.thread, %cond.end15, %while.cond.preheader
  %memoffset.0.ph213 = phi %struct.rtx_def* [ %3, %while.cond.preheader ], [ null, %cond.end15 ], [ null, %cond.end15.thread ]
  %arrayidx17179.ph212 = phi i8* [ %arrayidx17, %while.cond.preheader ], [ %arrayidx17, %cond.end15 ], [ %arrayidx17176, %cond.end15.thread ]
  %.ph209 = phi i8 [ %4, %while.cond.preheader ], [ %4, %cond.end15 ], [ %1, %cond.end15.thread ]
  %conv107.pre.pre = zext i8 %.ph209 to i64
  br label %while.end

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %conv36 = zext i8 %4 to i64
  %5 = bitcast i64* %arg.addr.i to i8*
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %expr.0186 = phi %union.tree_node* [ %2, %while.body.lr.ph ], [ %11, %while.cond.backedge ]
  %memoffset.0185 = phi %struct.rtx_def* [ %3, %while.body.lr.ph ], [ %memoffset.0.be, %while.cond.backedge ]
  %code = getelementptr inbounds %union.tree_node* %expr.0186, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp19 = icmp eq i32 %bf.clear, 39
  br i1 %cmp19, label %if.then21, label %if.else

if.then21:                                        ; preds = %while.body
  %operands = getelementptr inbounds %union.tree_node* %expr.0186, i64 0, i32 0, i32 2
  %arrayidx22 = getelementptr inbounds i32* %operands, i64 2
  %6 = bitcast i32* %arrayidx22 to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !7
  %size_unit = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 7
  %8 = load %union.tree_node** %size_unit, align 8, !tbaa !43
  %tobool23 = icmp eq %union.tree_node* %8, null
  br i1 %tobool23, label %while.end, label %if.end25

if.end25:                                         ; preds = %if.then21
  %code29 = getelementptr inbounds %union.tree_node* %8, i64 0, i32 0, i32 0, i32 2
  %bf.load30 = load i32* %code29, align 8
  %bf.clear31 = and i32 %bf.load30, 255
  %cmp32 = icmp eq i32 %bf.clear31, 25
  br i1 %cmp32, label %land.lhs.true, label %if.end46

land.lhs.true:                                    ; preds = %if.end25
  %call37 = call i32 @compare_tree_int(%union.tree_node* %8, i64 %conv36) #4
  %cmp38 = icmp sgt i32 %call37, -1
  br i1 %cmp38, label %land.lhs.true40, label %if.end46

land.lhs.true40:                                  ; preds = %land.lhs.true
  %rtwint = getelementptr inbounds %struct.rtx_def* %memoffset.0185, i64 0, i32 1, i64 0, i32 0
  %9 = load i64* %rtwint, align 8, !tbaa !5
  %cmp43 = icmp sgt i64 %9, -1
  br i1 %cmp43, label %while.end, label %if.end46

if.end46:                                         ; preds = %land.lhs.true40, %land.lhs.true, %if.end25
  %arguments = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 10
  %10 = load %union.tree_node** %arguments, align 8, !tbaa !44
  %call48 = call i32 @host_integerp(%union.tree_node* %10, i32 1) #4
  %tobool49 = icmp eq i32 %call48, 0
  br i1 %tobool49, label %while.end, label %if.end51

if.end51:                                         ; preds = %if.end46
  %arrayidx54 = bitcast i32* %operands to %union.tree_node**
  %11 = load %union.tree_node** %arrayidx54, align 8, !tbaa !7
  %rtwint57 = getelementptr inbounds %struct.rtx_def* %memoffset.0185, i64 0, i32 1, i64 0, i32 0
  %12 = load i64* %rtwint57, align 8, !tbaa !5
  %13 = load %union.tree_node** %arguments, align 8, !tbaa !44
  %call60 = call i64 @tree_low_cst(%union.tree_node* %13, i32 1) #4
  %add = add nsw i64 %call60, %12
  %u2 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 19
  %t = bitcast %union.anon.1* %u2 to %union.tree_node**
  %14 = load %union.tree_node** %t, align 8, !tbaa !7
  %call62 = call i64 @tree_low_cst(%union.tree_node* %14, i32 1) #4
  %div = sdiv i64 %call62, 8
  %add63 = add nsw i64 %add, %div
  call void @llvm.lifetime.start(i64 8, i8* %5) #4
  store i64 %add63, i64* %arg.addr.i, align 8, !tbaa !5
  %arg.off.i = add i64 %add63, 64
  %15 = icmp ult i64 %arg.off.i, 129
  br i1 %15, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.end51
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %16 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then.i, %if.end6.i
  %memoffset.0.be = phi %struct.rtx_def* [ %16, %if.then.i ], [ %22, %if.end6.i ]
  %tobool18 = icmp eq %union.tree_node* %11, null
  br i1 %tobool18, label %while.end, label %while.body

if.end.i:                                         ; preds = %if.end51
  %17 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i = trunc i64 %add63 to i32
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %17, i8* %5, i32 %conv.i, i32 1) #4
  %18 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %18, null
  br i1 %cmp2.i, label %if.then4.i, label %if.end6.i

if.then4.i:                                       ; preds = %if.end.i
  %19 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %19) #4
  %20 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %20, i8** %call.i, align 8, !tbaa !7
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then4.i, %if.end.i
  %21 = phi i8* [ %20, %if.then4.i ], [ %18, %if.end.i ]
  %22 = bitcast i8* %21 to %struct.rtx_def*
  br label %while.cond.backedge

if.else:                                          ; preds = %while.body
  %idxprom69154 = zext i32 %bf.clear to i64
  %arrayidx70 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom69154
  %23 = load i8* %arrayidx70, align 1, !tbaa !9
  %cmp72 = icmp eq i8 %23, 100
  br i1 %cmp72, label %land.lhs.true74, label %if.else102

land.lhs.true74:                                  ; preds = %if.else
  %size_unit76 = getelementptr inbounds %union.tree_node* %expr.0186, i64 0, i32 0, i32 7
  %24 = load %union.tree_node** %size_unit76, align 8, !tbaa !43
  %tobool77 = icmp eq %union.tree_node* %24, null
  br i1 %tobool77, label %if.else102, label %land.lhs.true78

land.lhs.true78:                                  ; preds = %land.lhs.true74
  %code82 = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load83 = load i32* %code82, align 8
  %bf.clear84 = and i32 %bf.load83, 255
  %cmp85 = icmp eq i32 %bf.clear84, 25
  br i1 %cmp85, label %land.lhs.true87, label %if.else102

land.lhs.true87:                                  ; preds = %land.lhs.true78
  %call91 = call i32 @compare_tree_int(%union.tree_node* %24, i64 %conv36) #4
  %cmp92 = icmp sgt i32 %call91, -1
  br i1 %cmp92, label %land.lhs.true94, label %if.else102

land.lhs.true94:                                  ; preds = %land.lhs.true87
  %tobool95 = icmp eq %struct.rtx_def* %memoffset.0185, null
  br i1 %tobool95, label %while.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true94
  %rtwint98 = getelementptr inbounds %struct.rtx_def* %memoffset.0185, i64 0, i32 1, i64 0, i32 0
  %25 = load i64* %rtwint98, align 8, !tbaa !5
  %cmp99 = icmp sgt i64 %25, -1
  br i1 %cmp99, label %while.end, label %if.else102

if.else102:                                       ; preds = %land.lhs.true74, %lor.lhs.false, %land.lhs.true87, %land.lhs.true78, %if.else
  br label %while.end

while.end:                                        ; preds = %land.lhs.true40, %while.cond.backedge, %if.then21, %if.end46, %while.cond.preheader.while.end.loopexit_crit_edge, %land.lhs.true94, %lor.lhs.false, %if.else102
  %arrayidx17179.ph210 = phi i8* [ %arrayidx17, %land.lhs.true94 ], [ %arrayidx17, %lor.lhs.false ], [ %arrayidx17, %if.else102 ], [ %arrayidx17179.ph212, %while.cond.preheader.while.end.loopexit_crit_edge ], [ %arrayidx17, %if.end46 ], [ %arrayidx17, %if.then21 ], [ %arrayidx17, %while.cond.backedge ], [ %arrayidx17, %land.lhs.true40 ]
  %.ph207 = phi i8 [ %4, %land.lhs.true94 ], [ %4, %lor.lhs.false ], [ %4, %if.else102 ], [ %.ph209, %while.cond.preheader.while.end.loopexit_crit_edge ], [ %4, %if.end46 ], [ %4, %if.then21 ], [ %4, %while.cond.backedge ], [ %4, %land.lhs.true40 ]
  %conv107.pre-phi = phi i64 [ %conv36, %land.lhs.true94 ], [ %conv36, %lor.lhs.false ], [ %conv36, %if.else102 ], [ %conv107.pre.pre, %while.cond.preheader.while.end.loopexit_crit_edge ], [ %conv36, %if.end46 ], [ %conv36, %if.then21 ], [ %conv36, %while.cond.backedge ], [ %conv36, %land.lhs.true40 ]
  %memoffset.0182 = phi %struct.rtx_def* [ null, %land.lhs.true94 ], [ %memoffset.0185, %lor.lhs.false ], [ %memoffset.0185, %if.else102 ], [ %memoffset.0.ph213, %while.cond.preheader.while.end.loopexit_crit_edge ], [ %memoffset.0185, %land.lhs.true40 ], [ %memoffset.0.be, %while.cond.backedge ], [ %memoffset.0185, %if.then21 ], [ %memoffset.0185, %if.end46 ]
  %expr.1 = phi %union.tree_node* [ %expr.0186, %land.lhs.true94 ], [ %expr.0186, %lor.lhs.false ], [ null, %if.else102 ], [ null, %while.cond.preheader.while.end.loopexit_crit_edge ], [ %expr.0186, %land.lhs.true40 ], [ null, %while.cond.backedge ], [ null, %if.then21 ], [ null, %if.end46 ]
  %tobool104 = icmp eq %union.tree_node* %expr.1, null
  %.memoffset.0 = select i1 %tobool104, %struct.rtx_def* null, %struct.rtx_def* %memoffset.0182
  %26 = bitcast i64* %arg.addr.i155 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %26) #4
  store i64 %conv107.pre-phi, i64* %arg.addr.i155, align 8, !tbaa !5
  %arg.off.i156 = add i64 %conv107.pre-phi, 64
  %27 = icmp ult i64 %arg.off.i156, 129
  br i1 %27, label %if.then.i158, label %if.end.i162

if.then.i158:                                     ; preds = %while.end
  %arrayidx.i157 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i156
  %28 = load %struct.rtx_def** %arrayidx.i157, align 8, !tbaa !7
  br label %gen_rtx_CONST_INT.exit167

if.end.i162:                                      ; preds = %while.end
  %29 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %conv.i159 = zext i8 %.ph207 to i32
  %call.i160 = call i8** @htab_find_slot_with_hash(%struct.htab* %29, i8* %26, i32 %conv.i159, i32 1) #4
  %30 = load i8** %call.i160, align 8, !tbaa !7
  %cmp2.i161 = icmp eq i8* %30, null
  br i1 %cmp2.i161, label %if.then4.i164, label %if.end6.i165

if.then4.i164:                                    ; preds = %if.end.i162
  %31 = load i64* %arg.addr.i155, align 8, !tbaa !5
  %call5.i163 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %31) #4
  %32 = bitcast %struct.rtx_def* %call5.i163 to i8*
  store i8* %32, i8** %call.i160, align 8, !tbaa !7
  br label %if.end6.i165

if.end6.i165:                                     ; preds = %if.then4.i164, %if.end.i162
  %33 = phi i8* [ %32, %if.then4.i164 ], [ %30, %if.end.i162 ]
  %34 = bitcast i8* %33 to %struct.rtx_def*
  br label %gen_rtx_CONST_INT.exit167

gen_rtx_CONST_INT.exit167:                        ; preds = %if.then.i158, %if.end6.i165
  %retval.0.i166 = phi %struct.rtx_def* [ %28, %if.then.i158 ], [ %34, %if.end6.i165 ]
  call void @llvm.lifetime.end(i64 8, i8* %26) #4
  %35 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !7
  %cmp112 = icmp eq %struct.mem_attrs* %35, null
  br i1 %cmp112, label %cond.end119, label %cond.true114

cond.true114:                                     ; preds = %gen_rtx_CONST_INT.exit167
  %align = getelementptr inbounds %struct.mem_attrs* %35, i64 0, i32 4
  %36 = load i32* %align, align 4, !tbaa !26
  br label %cond.end119

cond.end119:                                      ; preds = %gen_rtx_CONST_INT.exit167, %cond.true114
  %cond120 = phi i32 [ %36, %cond.true114 ], [ 8, %gen_rtx_CONST_INT.exit167 ]
  %37 = bitcast %struct.mem_attrs* %attrs.i to i8*
  call void @llvm.lifetime.start(i64 40, i8* %37) #4
  %cmp3.i = icmp eq %struct.rtx_def* %.memoffset.0, null
  %or.cond24.i = and i1 %tobool104, %cmp3.i
  br i1 %or.cond24.i, label %land.lhs.true4.i, label %if.end.i171

land.lhs.true4.i:                                 ; preds = %cond.end119
  %cmp5.i = icmp eq %struct.rtx_def* %retval.0.i166, null
  br i1 %cmp5.i, label %land.lhs.true11.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true4.i
  %cmp6.i = icmp eq i32 %mode, 51
  br i1 %cmp6.i, label %if.end.i171, label %land.lhs.true7.i

land.lhs.true7.i:                                 ; preds = %lor.lhs.false.i
  %38 = load i8* %arrayidx17179.ph210, align 1, !tbaa !9
  %conv.i169 = zext i8 %38 to i64
  %rtwint.i = getelementptr inbounds %struct.rtx_def* %retval.0.i166, i64 0, i32 1, i64 0, i32 0
  %39 = load i64* %rtwint.i, align 8, !tbaa !5
  %cmp9.i = icmp eq i64 %conv.i169, %39
  %cmp12.i = icmp eq i32 %cond120, 8
  %or.cond25.i = and i1 %cmp9.i, %cmp12.i
  br i1 %or.cond25.i, label %get_mem_attrs.exit, label %if.end.i171

land.lhs.true11.i:                                ; preds = %land.lhs.true4.i
  %cmp12.old.i = icmp eq i32 %cond120, 8
  br i1 %cmp12.old.i, label %get_mem_attrs.exit, label %if.end.i171

if.end.i171:                                      ; preds = %land.lhs.true11.i, %land.lhs.true7.i, %lor.lhs.false.i, %cond.end119
  %alias14.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 0
  store i64 0, i64* %alias14.i, align 8, !tbaa !28
  %expr15.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 1
  store %union.tree_node* %expr.1, %union.tree_node** %expr15.i, align 8, !tbaa !29
  %offset16.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 2
  store %struct.rtx_def* %.memoffset.0, %struct.rtx_def** %offset16.i, align 8, !tbaa !24
  %size17.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 3
  store %struct.rtx_def* %retval.0.i166, %struct.rtx_def** %size17.i, align 8, !tbaa !27
  %align18.i = getelementptr inbounds %struct.mem_attrs* %attrs.i, i64 0, i32 4
  store i32 %cond120, i32* %align18.i, align 8, !tbaa !26
  %40 = load %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %call.i170 = call i8** @htab_find_slot(%struct.htab* %40, i8* %37, i32 1) #4
  %41 = load i8** %call.i170, align 8, !tbaa !7
  %cmp19.i = icmp eq i8* %41, null
  br i1 %cmp19.i, label %if.then21.i, label %if.end23.i

if.then21.i:                                      ; preds = %if.end.i171
  %call22.i = call i8* @ggc_alloc(i64 40) #4
  store i8* %call22.i, i8** %call.i170, align 8, !tbaa !7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call22.i, i8* %37, i64 40, i32 1, i1 false) #4
  %.pre.i = load i8** %call.i170, align 8, !tbaa !7
  br label %if.end23.i

if.end23.i:                                       ; preds = %if.then21.i, %if.end.i171
  %42 = phi i8* [ %.pre.i, %if.then21.i ], [ %41, %if.end.i171 ]
  %phitmp = ptrtoint i8* %42 to i64
  br label %get_mem_attrs.exit

get_mem_attrs.exit:                               ; preds = %land.lhs.true7.i, %land.lhs.true11.i, %if.end23.i
  %retval.0.i172 = phi i64 [ %phitmp, %if.end23.i ], [ 0, %land.lhs.true7.i ], [ 0, %land.lhs.true11.i ]
  call void @llvm.lifetime.end(i64 40, i8* %37) #4
  %43 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  store i64 %retval.0.i172, i64* %43, align 8, !tbaa !7
  ret %struct.rtx_def* %call
}

declare i32 @compare_tree_int(%union.tree_node*, i64) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_label_rtx() #0 {
entry:
  %0 = load i32* @label_num, align 4, !tbaa !1
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @label_num, align 4, !tbaa !1
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_iuu00iss(i32 36, i32 0, i32 0, %struct.rtx_def* null, %struct.rtx_def* null, i32 %0, i8* null, i8* null) #4
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  store i32 0, i32* %rtint, align 4, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 7, i32 0
  store i64 0, i64* %1, align 8, !tbaa !7
  ret %struct.rtx_def* %call
}

declare %struct.rtx_def* @gen_rtx_fmt_iuu00iss(i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i8*, i8*) #1

; Function Attrs: nounwind uwtable
define void @set_new_first_and_last_insn(%struct.rtx_def* %first, %struct.rtx_def* %last) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 2
  store %struct.rtx_def* %first, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %2 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1 = getelementptr inbounds %struct.function* %2, i64 0, i32 3
  %3 = load %struct.emit_status** %emit1, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %3, i64 0, i32 3
  store %struct.rtx_def* %last, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %4 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit2 = getelementptr inbounds %struct.function* %4, i64 0, i32 3
  %5 = load %struct.emit_status** %emit2, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %5, i64 0, i32 6
  store i32 0, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %tobool20 = icmp eq %struct.rtx_def* %first, null
  br i1 %tobool20, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %6 = phi i32 [ %., %for.body ], [ 0, %entry ]
  %insn.023 = phi %struct.rtx_def* [ %8, %for.body ], [ %first, %entry ]
  %fld = getelementptr inbounds %struct.rtx_def* %insn.023, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  %7 = load i32* %rtint, align 4, !tbaa !1
  %cmp = icmp sgt i32 %6, %7
  %. = select i1 %cmp, i32 %6, i32 %7
  store i32 %., i32* %x_cur_insn_uid, align 4, !tbaa !47
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %insn.023, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %tobool = icmp eq %struct.rtx_def* %8, null
  br i1 %tobool, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %phitmp = add i32 %., 1
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  %.lcssa = phi i32 [ %phitmp, %for.cond.for.end_crit_edge ], [ 1, %entry ]
  store i32 %.lcssa, i32* %x_cur_insn_uid, align 4, !tbaa !47
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_new_first_and_last_label_num(i32 %first, i32 %last) #0 {
entry:
  %0 = load i32* @label_num, align 4, !tbaa !1
  store i32 %0, i32* @base_label_num, align 4, !tbaa !1
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_label_num = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 1
  store i32 %first, i32* %x_first_label_num, align 4, !tbaa !19
  store i32 %last, i32* @last_label_num, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_new_last_label_num(i32 %last) #0 {
entry:
  %0 = load i32* @label_num, align 4, !tbaa !1
  store i32 %0, i32* @base_label_num, align 4, !tbaa !1
  store i32 %last, i32* @last_label_num, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @restore_emit_status(%struct.function* nocapture readnone %p) #0 {
entry:
  store i32 0, i32* @last_label_num, align 4, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([5 x %struct.rtx_def*]* @sequence_result to i8*), i8 0, i64 40, i32 16, i1 false) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @clear_emit_caches() #0 {
entry:
  call void @llvm.memset.p0i8.i64(i8* bitcast ([5 x %struct.rtx_def*]* @sequence_result to i8*), i8 0, i64 40, i32 16, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define void @free_emit_status(%struct.function* nocapture %f) #0 {
entry:
  %emit = getelementptr inbounds %struct.function* %f, i64 0, i32 3
  %0 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %0, i64 0, i32 12
  %1 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !tbaa !17
  %2 = bitcast %struct.rtx_def** %1 to i8*
  tail call void @free(i8* %2)
  %3 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_pointer_align = getelementptr inbounds %struct.emit_status* %3, i64 0, i32 10
  %4 = load i8** %regno_pointer_align, align 8, !tbaa !16
  tail call void @free(i8* %4)
  %5 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_decl = getelementptr inbounds %struct.emit_status* %5, i64 0, i32 11
  %6 = load %union.tree_node*** %regno_decl, align 8, !tbaa !18
  %7 = bitcast %union.tree_node** %6 to i8*
  tail call void @free(i8* %7)
  %8 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %9 = bitcast %struct.emit_status* %8 to i8*
  tail call void @free(i8* %9)
  store %struct.emit_status* null, %struct.emit_status** %emit, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #6

; Function Attrs: nounwind uwtable
define void @unshare_all_rtl(%union.tree_node* nocapture readonly %fndecl, %struct.rtx_def* %insn) #0 {
entry:
  %arguments = getelementptr inbounds %union.tree_node* %fndecl, i64 0, i32 0, i32 10
  %decl.019 = load %union.tree_node** %arguments, align 8
  %tobool20 = icmp eq %union.tree_node* %decl.019, null
  br i1 %tobool20, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %cond.end
  %decl.021 = phi %union.tree_node* [ %decl.0, %cond.end ], [ %decl.019, %entry ]
  %rtl = getelementptr inbounds %union.tree_node* %decl.021, i64 0, i32 0, i32 17
  %0 = load %struct.rtx_def** %rtl, align 8, !tbaa !32
  %tobool3 = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool3, label %cond.false, label %cond.end

cond.false:                                       ; preds = %for.body
  tail call void @make_decl_rtl(%union.tree_node* %decl.021, i8* null) #4
  %1 = load %struct.rtx_def** %rtl, align 8, !tbaa !32
  br label %cond.end

cond.end:                                         ; preds = %for.body, %cond.false
  %cond = phi %struct.rtx_def* [ %1, %cond.false ], [ %0, %for.body ]
  %call = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %cond)
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl, align 8, !tbaa !32
  %chain = getelementptr inbounds %union.tree_node* %decl.021, i64 0, i32 0, i32 0, i32 0
  %decl.0 = load %union.tree_node** %chain, align 8
  %tobool = icmp eq %union.tree_node* %decl.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %cond.end, %entry
  %initial = getelementptr inbounds %union.tree_node* %fndecl, i64 0, i32 0, i32 12
  %2 = load %union.tree_node** %initial, align 8, !tbaa !48
  tail call fastcc void @unshare_all_decls(%union.tree_node* %2)
  %tobool32.i = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool32.i, label %unshare_all_rtl_1.exit, label %for.body.i

for.body.i:                                       ; preds = %for.end, %for.inc.i
  %insn.addr.033.i = phi %struct.rtx_def* [ %11, %for.inc.i ], [ %insn, %for.end ]
  %3 = getelementptr inbounds %struct.rtx_def* %insn.addr.033.i, i64 0, i32 0
  %bf.load.i = load i32* %3, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom31.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom31.i
  %4 = load i8* %arrayidx.i, align 1, !tbaa !9
  %cmp.i = icmp eq i8 %4, 105
  br i1 %cmp.i, label %if.then.i, label %for.inc.i

if.then.i:                                        ; preds = %for.body.i
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def* %insn.addr.033.i, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx2.i to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !7
  %call.i = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %5) #4
  %6 = getelementptr inbounds %union.rtunion_def* %arrayidx2.i, i64 0, i32 0
  %call.c.i = ptrtoint %struct.rtx_def* %call.i to i64
  store i64 %call.c.i, i64* %6, align 8, !tbaa !7
  %arrayidx7.i = getelementptr inbounds %struct.rtx_def* %insn.addr.033.i, i64 0, i32 1, i64 6
  %rtx8.i = bitcast %union.rtunion_def* %arrayidx7.i to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx8.i, align 8, !tbaa !7
  %call9.i = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %7) #4
  %8 = getelementptr inbounds %union.rtunion_def* %arrayidx7.i, i64 0, i32 0
  %call9.c.i = ptrtoint %struct.rtx_def* %call9.i to i64
  store i64 %call9.c.i, i64* %8, align 8, !tbaa !7
  %arrayidx14.i = getelementptr inbounds %struct.rtx_def* %insn.addr.033.i, i64 0, i32 1, i64 5
  %rtx15.i = bitcast %union.rtunion_def* %arrayidx14.i to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx15.i, align 8, !tbaa !7
  %call16.i = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %9) #4
  %10 = getelementptr inbounds %union.rtunion_def* %arrayidx14.i, i64 0, i32 0
  %call16.c.i = ptrtoint %struct.rtx_def* %call16.i to i64
  store i64 %call16.c.i, i64* %10, align 8, !tbaa !7
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %arrayidx21.i = getelementptr inbounds %struct.rtx_def* %insn.addr.033.i, i64 0, i32 1, i64 2
  %rtx22.i = bitcast %union.rtunion_def* %arrayidx21.i to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx22.i, align 8, !tbaa !7
  %tobool.i = icmp eq %struct.rtx_def* %11, null
  br i1 %tobool.i, label %unshare_all_rtl_1.exit, label %for.body.i

unshare_all_rtl_1.exit:                           ; preds = %for.inc.i, %for.end
  %12 = load %struct.function** @cfun, align 8, !tbaa !7
  %x_stack_slot_list = getelementptr inbounds %struct.function* %12, i64 0, i32 26
  %13 = load %struct.rtx_def** %x_stack_slot_list, align 8, !tbaa !49
  %call11 = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %13)
  %14 = load %struct.function** @cfun, align 8, !tbaa !7
  %x_stack_slot_list12 = getelementptr inbounds %struct.function* %14, i64 0, i32 26
  store %struct.rtx_def* %call11, %struct.rtx_def** %x_stack_slot_list12, align 8, !tbaa !49
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %orig) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %orig, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 61, label %return
    i32 71, label %return
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 68, label %return
    i32 36, label %return
    i32 59, label %return
    i32 69, label %return
    i32 62, label %return
    i32 58, label %sw.bb1
    i32 32, label %return
    i32 33, label %return
    i32 34, label %return
    i32 37, label %return
    i32 35, label %return
    i32 66, label %sw.bb27
  ]

sw.bb1:                                           ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load2 = load i32* %2, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp4 = icmp eq i32 %bf.clear3, 75
  br i1 %cmp4, label %land.lhs.true, label %sw.epilog

land.lhs.true:                                    ; preds = %sw.bb1
  %fld8 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1
  %rtx10 = bitcast [1 x %union.rtunion_def]* %fld8 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx10, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load11 = load i32* %4, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 68
  br i1 %cmp13, label %land.lhs.true14, label %sw.epilog

land.lhs.true14:                                  ; preds = %land.lhs.true
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx20, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load21 = load i32* %6, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 54
  br i1 %cmp23, label %return, label %sw.epilog

sw.bb27:                                          ; preds = %if.end
  %arrayidx29 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 0
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx30, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load31 = load i32* %8, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  switch i32 %bf.clear32, label %sw.epilog [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 58, label %return
    i32 55, label %return
  ]

sw.epilog:                                        ; preds = %sw.bb27, %if.end, %sw.bb1, %land.lhs.true, %land.lhs.true14
  %bf.clear64 = and i32 %bf.load, 536870912
  %tobool = icmp eq i32 %bf.clear64, 0
  br i1 %tobool, label %sw.epilog.if.end67_crit_edge, label %if.then65

sw.epilog.if.end67_crit_edge:                     ; preds = %sw.epilog
  %idxprom70182.phi.trans.insert = zext i32 %bf.clear to i64
  %arrayidx73.phi.trans.insert = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom70182.phi.trans.insert
  %.pre = load i8* %arrayidx73.phi.trans.insert, align 1, !tbaa !9
  br label %if.end67

if.then65:                                        ; preds = %sw.epilog
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 %bf.clear) #4
  %9 = bitcast %struct.rtx_def* %call to i8*
  %10 = bitcast %struct.rtx_def* %orig to i8*
  %idxprom183 = zext i32 %bf.clear to i64
  %arrayidx66 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom183
  %11 = load i8* %arrayidx66, align 1, !tbaa !9
  %conv = zext i8 %11 to i64
  %mul = shl nuw nsw i64 %conv, 3
  %add = add i64 %mul, 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 %add, i32 8, i1 false)
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 0
  %bf.load68.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end67

if.end67:                                         ; preds = %sw.epilog.if.end67_crit_edge, %if.then65
  %12 = phi i8 [ %11, %if.then65 ], [ %.pre, %sw.epilog.if.end67_crit_edge ]
  %bf.load68 = phi i32 [ %bf.load68.pre, %if.then65 ], [ %bf.load, %sw.epilog.if.end67_crit_edge ]
  %copied.0 = phi i32 [ 1, %if.then65 ], [ 0, %sw.epilog.if.end67_crit_edge ]
  %x.0 = phi %struct.rtx_def* [ %call, %if.then65 ], [ %orig, %sw.epilog.if.end67_crit_edge ]
  %13 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 0
  %bf.set = or i32 %bf.load68, 536870912
  store i32 %bf.set, i32* %13, align 8
  %idxprom70182 = zext i32 %bf.clear to i64
  %arrayidx71 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom70182
  %14 = load i8** %arrayidx71, align 8, !tbaa !7
  %cmp75187 = icmp eq i8 %12, 0
  br i1 %cmp75187, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end67
  %conv74 = zext i8 %12 to i32
  %tobool99 = icmp eq i32 %copied.0, 0
  br i1 %tobool99, label %for.body, label %for.body.us

for.body.us:                                      ; preds = %for.body.lr.ph, %for.inc135.us
  %indvars.iv199 = phi i64 [ %indvars.iv.next200, %for.inc135.us ], [ 0, %for.body.lr.ph ]
  %format_ptr.0189.us = phi i8* [ %incdec.ptr.us, %for.inc135.us ], [ %14, %for.body.lr.ph ]
  %incdec.ptr.us = getelementptr inbounds i8* %format_ptr.0189.us, i64 1
  %15 = load i8* %format_ptr.0189.us, align 1, !tbaa !9
  %conv77.us = sext i8 %15 to i32
  switch i32 %conv77.us, label %for.inc135.us [
    i32 101, label %sw.bb78.us
    i32 69, label %sw.bb88.us
  ]

sw.bb88.us:                                       ; preds = %for.body.us
  %arrayidx91.us = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 %indvars.iv199
  %rtvec.us = bitcast %union.rtunion_def* %arrayidx91.us to %struct.rtvec_def**
  %16 = load %struct.rtvec_def** %rtvec.us, align 8, !tbaa !7
  %cmp92.us = icmp eq %struct.rtvec_def* %16, null
  br i1 %cmp92.us, label %for.inc135.us, label %if.then94.us

if.then94.us:                                     ; preds = %sw.bb88.us
  %num_elem.us = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 0
  %17 = load i32* %num_elem.us, align 4, !tbaa !50
  %cmp101.us = icmp sgt i32 %17, 0
  br i1 %cmp101.us, label %for.body.i.preheader.us, label %for.inc135.us

for.body.i.us:                                    ; preds = %for.body.i.preheader.us, %for.body.i.us
  %indvars.iv.i.us = phi i64 [ %indvars.iv.next.i.us, %for.body.i.us ], [ 0, %for.body.i.preheader.us ]
  %argp.addr.08.i.us = phi %struct.rtx_def** [ %incdec.ptr.i.us, %for.body.i.us ], [ %arraydecay.us, %for.body.i.preheader.us ]
  %incdec.ptr.i.us = getelementptr inbounds %struct.rtx_def** %argp.addr.08.i.us, i64 1
  %18 = load %struct.rtx_def** %argp.addr.08.i.us, align 8, !tbaa !7
  %arrayidx.i.us = getelementptr inbounds %struct.rtvec_def* %call.i.us, i64 0, i32 1, i64 %indvars.iv.i.us
  store %struct.rtx_def* %18, %struct.rtx_def** %arrayidx.i.us, align 8, !tbaa !7
  %indvars.iv.next.i.us = add nuw nsw i64 %indvars.iv.i.us, 1
  %lftr.wideiv192 = trunc i64 %indvars.iv.next.i.us to i32
  %exitcond193 = icmp eq i32 %lftr.wideiv192, %17
  br i1 %exitcond193, label %for.cond114.preheader.us, label %for.body.i.us

for.body117.us:                                   ; preds = %for.cond114.preheader.us, %for.body117.us.for.body117.us_crit_edge
  %19 = phi %struct.rtvec_def* [ %.pre202, %for.body117.us.for.body117.us_crit_edge ], [ %call.i.us, %for.cond114.preheader.us ]
  %indvars.iv195 = phi i64 [ %indvars.iv.next196, %for.body117.us.for.body117.us_crit_edge ], [ 0, %for.cond114.preheader.us ]
  %arrayidx124.us = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 1, i64 %indvars.iv195
  %20 = load %struct.rtx_def** %arrayidx124.us, align 8, !tbaa !7
  %call125.us = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %20)
  %21 = load %struct.rtvec_def** %rtvec.us, align 8, !tbaa !7
  %arrayidx132.us = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 1, i64 %indvars.iv195
  store %struct.rtx_def* %call125.us, %struct.rtx_def** %arrayidx132.us, align 8, !tbaa !7
  %indvars.iv.next196 = add nuw nsw i64 %indvars.iv195, 1
  %lftr.wideiv197 = trunc i64 %indvars.iv.next196 to i32
  %exitcond198 = icmp eq i32 %lftr.wideiv197, %17
  br i1 %exitcond198, label %for.inc135.us, label %for.body117.us.for.body117.us_crit_edge

for.body117.us.for.body117.us_crit_edge:          ; preds = %for.body117.us
  %.pre202 = load %struct.rtvec_def** %rtvec.us, align 8, !tbaa !7
  br label %for.body117.us

sw.bb78.us:                                       ; preds = %for.body.us
  %arrayidx81.us = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 %indvars.iv199
  %rtx82.us = bitcast %union.rtunion_def* %arrayidx81.us to %struct.rtx_def**
  %22 = load %struct.rtx_def** %rtx82.us, align 8, !tbaa !7
  %call83.us = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %22)
  %23 = getelementptr inbounds %union.rtunion_def* %arrayidx81.us, i64 0, i32 0
  %call83.c.us = ptrtoint %struct.rtx_def* %call83.us to i64
  store i64 %call83.c.us, i64* %23, align 8, !tbaa !7
  br label %for.inc135.us

for.inc135.us:                                    ; preds = %for.body117.us, %if.then94.us, %for.cond114.preheader.us, %sw.bb78.us, %sw.bb88.us, %for.body.us
  %indvars.iv.next200 = add nuw nsw i64 %indvars.iv199, 1
  %24 = trunc i64 %indvars.iv.next200 to i32
  %cmp75.us = icmp slt i32 %24, %conv74
  br i1 %cmp75.us, label %for.body.us, label %return

for.cond114.preheader.us:                         ; preds = %for.body.i.us
  %phitmp = ptrtoint %struct.rtvec_def* %call.i.us to i64
  %25 = getelementptr inbounds %union.rtunion_def* %arrayidx91.us, i64 0, i32 0
  store i64 %phitmp, i64* %25, align 8, !tbaa !7
  br i1 %cmp101.us, label %for.body117.us, label %for.inc135.us

for.body.i.preheader.us:                          ; preds = %if.then94.us
  %call.i.us = tail call %struct.rtvec_def* @rtvec_alloc(i32 %17) #4
  %arraydecay.us = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 1, i64 0
  br label %for.body.i.us

for.body:                                         ; preds = %for.body.lr.ph, %for.inc135
  %indvars.iv190 = phi i64 [ %indvars.iv.next191, %for.inc135 ], [ 0, %for.body.lr.ph ]
  %format_ptr.0189 = phi i8* [ %incdec.ptr, %for.inc135 ], [ %14, %for.body.lr.ph ]
  %incdec.ptr = getelementptr inbounds i8* %format_ptr.0189, i64 1
  %26 = load i8* %format_ptr.0189, align 1, !tbaa !9
  %conv77 = sext i8 %26 to i32
  switch i32 %conv77, label %for.inc135 [
    i32 101, label %sw.bb78
    i32 69, label %sw.bb88
  ]

sw.bb78:                                          ; preds = %for.body
  %arrayidx81 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 %indvars.iv190
  %rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**
  %27 = load %struct.rtx_def** %rtx82, align 8, !tbaa !7
  %call83 = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %27)
  %28 = getelementptr inbounds %union.rtunion_def* %arrayidx81, i64 0, i32 0
  %call83.c = ptrtoint %struct.rtx_def* %call83 to i64
  store i64 %call83.c, i64* %28, align 8, !tbaa !7
  br label %for.inc135

sw.bb88:                                          ; preds = %for.body
  %arrayidx91 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 %indvars.iv190
  %rtvec = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtvec_def**
  %29 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %cmp92 = icmp eq %struct.rtvec_def* %29, null
  br i1 %cmp92, label %for.inc135, label %for.cond114.preheader

for.cond114.preheader:                            ; preds = %sw.bb88
  %num_elem = getelementptr inbounds %struct.rtvec_def* %29, i64 0, i32 0
  %30 = load i32* %num_elem, align 4, !tbaa !50
  %cmp101 = icmp sgt i32 %30, 0
  br i1 %cmp101, label %for.body117, label %for.inc135

for.body117:                                      ; preds = %for.cond114.preheader, %for.body117.for.body117_crit_edge
  %31 = phi %struct.rtvec_def* [ %.pre203, %for.body117.for.body117_crit_edge ], [ %29, %for.cond114.preheader ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body117.for.body117_crit_edge ], [ 0, %for.cond114.preheader ]
  %arrayidx124 = getelementptr inbounds %struct.rtvec_def* %31, i64 0, i32 1, i64 %indvars.iv
  %32 = load %struct.rtx_def** %arrayidx124, align 8, !tbaa !7
  %call125 = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %32)
  %33 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx132 = getelementptr inbounds %struct.rtvec_def* %33, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %call125, %struct.rtx_def** %arrayidx132, align 8, !tbaa !7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %30
  br i1 %exitcond, label %for.inc135, label %for.body117.for.body117_crit_edge

for.body117.for.body117_crit_edge:                ; preds = %for.body117
  %.pre203 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  br label %for.body117

for.inc135:                                       ; preds = %for.body117, %for.cond114.preheader, %sw.bb88, %sw.bb78, %for.body
  %indvars.iv.next191 = add nuw nsw i64 %indvars.iv190, 1
  %34 = trunc i64 %indvars.iv.next191 to i32
  %cmp75 = icmp slt i32 %34, %conv74
  br i1 %cmp75, label %for.body, label %return

return:                                           ; preds = %for.inc135.us, %for.inc135, %if.end67, %sw.bb27, %sw.bb27, %sw.bb27, %sw.bb27, %sw.bb27, %if.end, %if.end, %if.end, %if.end, %if.end, %land.lhs.true14, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %entry
  %retval.0 = phi %struct.rtx_def* [ null, %entry ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %land.lhs.true14 ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %sw.bb27 ], [ %orig, %sw.bb27 ], [ %orig, %sw.bb27 ], [ %orig, %sw.bb27 ], [ %orig, %sw.bb27 ], [ %x.0, %if.end67 ], [ %x.0, %for.inc135 ], [ %x.0, %for.inc135.us ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @unshare_all_decls(%union.tree_node* nocapture readonly %blk) #0 {
entry:
  %vars = getelementptr inbounds %union.tree_node* %blk, i64 0, i32 0, i32 2
  %0 = bitcast i32* %vars to %union.tree_node**
  %t.031 = load %union.tree_node** %0, align 8
  %tobool32 = icmp eq %union.tree_node* %t.031, null
  br i1 %tobool32, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %t.033 = phi %union.tree_node* [ %t.0, %for.inc ], [ %t.031, %entry ]
  %rtl = getelementptr inbounds %union.tree_node* %t.033, i64 0, i32 0, i32 17
  %1 = load %struct.rtx_def** %rtl, align 8, !tbaa !32
  %cmp = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp, label %for.inc, label %cond.end

cond.end:                                         ; preds = %for.body
  %call = tail call %struct.rtx_def* @copy_rtx_if_shared(%struct.rtx_def* %1)
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl, align 8, !tbaa !32
  br label %for.inc

for.inc:                                          ; preds = %for.body, %cond.end
  %chain = getelementptr inbounds %union.tree_node* %t.033, i64 0, i32 0, i32 0, i32 0
  %t.0 = load %union.tree_node** %chain, align 8
  %tobool = icmp eq %union.tree_node* %t.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  %2 = getelementptr inbounds %union.tree_node* %blk, i64 0, i32 0, i32 4
  %t.128 = load %union.tree_node** %2, align 8
  %tobool1229 = icmp eq %union.tree_node* %t.128, null
  br i1 %tobool1229, label %for.end17, label %for.body13

for.body13:                                       ; preds = %for.end, %for.body13
  %t.130 = phi %union.tree_node* [ %t.1, %for.body13 ], [ %t.128, %for.end ]
  tail call fastcc void @unshare_all_decls(%union.tree_node* %t.130)
  %chain16 = getelementptr inbounds %union.tree_node* %t.130, i64 0, i32 0, i32 0, i32 0
  %t.1 = load %union.tree_node** %chain16, align 8
  %tobool12 = icmp eq %union.tree_node* %t.1, null
  br i1 %tobool12, label %for.end17, label %for.body13

for.end17:                                        ; preds = %for.body13, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @unshare_all_rtl_again(%struct.rtx_def* %insn) #0 {
entry:
  %tobool42 = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool42, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.043 = phi %struct.rtx_def* [ %5, %for.inc ], [ %insn, %entry ]
  %0 = getelementptr inbounds %struct.rtx_def* %p.043, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom38 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom38
  %1 = load i8* %arrayidx, align 1, !tbaa !9
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %p.043, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  tail call void @reset_used_flags(%struct.rtx_def* %2)
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %p.043, i64 0, i32 1, i64 6
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx5, align 8, !tbaa !7
  tail call void @reset_used_flags(%struct.rtx_def* %3)
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %p.043, i64 0, i32 1, i64 5
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx8, align 8, !tbaa !7
  tail call void @reset_used_flags(%struct.rtx_def* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %p.043, i64 0, i32 1, i64 2
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx11, align 8, !tbaa !7
  %tobool = icmp eq %struct.rtx_def* %5, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %decl12 = getelementptr inbounds %struct.function* %6, i64 0, i32 6
  %7 = load %union.tree_node** %decl12, align 8, !tbaa !52
  %initial = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 12
  %8 = load %union.tree_node** %initial, align 8, !tbaa !48
  tail call fastcc void @reset_used_decls(%union.tree_node* %8)
  %9 = load %struct.function** @cfun, align 8, !tbaa !7
  %decl14 = getelementptr inbounds %struct.function* %9, i64 0, i32 6
  %10 = load %union.tree_node** %decl14, align 8, !tbaa !52
  %arguments = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 10
  %decl.039 = load %union.tree_node** %arguments, align 8
  %tobool1740 = icmp eq %union.tree_node* %decl.039, null
  br i1 %tobool1740, label %for.end26, label %for.body18

for.body18:                                       ; preds = %for.end, %cond.end
  %decl.041 = phi %union.tree_node* [ %decl.0, %cond.end ], [ %decl.039, %for.end ]
  %rtl = getelementptr inbounds %union.tree_node* %decl.041, i64 0, i32 0, i32 17
  %11 = load %struct.rtx_def** %rtl, align 8, !tbaa !32
  %tobool20 = icmp eq %struct.rtx_def* %11, null
  br i1 %tobool20, label %cond.false, label %cond.end

cond.false:                                       ; preds = %for.body18
  tail call void @make_decl_rtl(%union.tree_node* %decl.041, i8* null) #4
  %12 = load %struct.rtx_def** %rtl, align 8, !tbaa !32
  br label %cond.end

cond.end:                                         ; preds = %for.body18, %cond.false
  %cond = phi %struct.rtx_def* [ %12, %cond.false ], [ %11, %for.body18 ]
  tail call void @reset_used_flags(%struct.rtx_def* %cond)
  %chain = getelementptr inbounds %union.tree_node* %decl.041, i64 0, i32 0, i32 0, i32 0
  %decl.0 = load %union.tree_node** %chain, align 8
  %tobool17 = icmp eq %union.tree_node* %decl.0, null
  br i1 %tobool17, label %for.cond16.for.end26_crit_edge, label %for.body18

for.cond16.for.end26_crit_edge:                   ; preds = %cond.end
  %.pre = load %struct.function** @cfun, align 8, !tbaa !7
  br label %for.end26

for.end26:                                        ; preds = %for.cond16.for.end26_crit_edge, %for.end
  %13 = phi %struct.function* [ %.pre, %for.cond16.for.end26_crit_edge ], [ %9, %for.end ]
  %x_stack_slot_list = getelementptr inbounds %struct.function* %13, i64 0, i32 26
  %14 = load %struct.rtx_def** %x_stack_slot_list, align 8, !tbaa !49
  tail call void @reset_used_flags(%struct.rtx_def* %14)
  %15 = load %struct.function** @cfun, align 8, !tbaa !7
  %decl27 = getelementptr inbounds %struct.function* %15, i64 0, i32 6
  %16 = load %union.tree_node** %decl27, align 8, !tbaa !52
  tail call void @unshare_all_rtl(%union.tree_node* %16, %struct.rtx_def* %insn)
  ret void
}

; Function Attrs: nounwind uwtable
define void @reset_used_flags(%struct.rtx_def* %x) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp, label %for.end29, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 61, label %for.end29
    i32 71, label %for.end29
    i32 54, label %for.end29
    i32 55, label %for.end29
    i32 56, label %for.end29
    i32 68, label %for.end29
    i32 36, label %for.end29
    i32 59, label %for.end29
    i32 69, label %for.end29
    i32 32, label %for.end29
    i32 33, label %for.end29
    i32 34, label %for.end29
    i32 37, label %for.end29
    i32 67, label %for.end29
    i32 35, label %for.end29
  ]

sw.epilog:                                        ; preds = %if.end
  %bf.clear3 = and i32 %bf.load, -536870913
  store i32 %bf.clear3, i32* %0, align 8
  %idxprom43 = zext i32 %bf.clear to i64
  %arrayidx5 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom43
  %1 = load i8* %arrayidx5, align 1, !tbaa !9
  %cmp648 = icmp eq i8 %1, 0
  br i1 %cmp648, label %for.end29, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom43
  %2 = load i8** %arrayidx, align 8, !tbaa !7
  %conv = zext i8 %1 to i32
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc27
  %indvars.iv51 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next52, %for.inc27 ]
  %format_ptr.050 = phi i8* [ %2, %for.body.lr.ph ], [ %incdec.ptr, %for.inc27 ]
  %incdec.ptr = getelementptr inbounds i8* %format_ptr.050, i64 1
  %3 = load i8* %format_ptr.050, align 1, !tbaa !9
  %conv8 = sext i8 %3 to i32
  switch i32 %conv8, label %for.inc27 [
    i32 101, label %sw.bb9
    i32 69, label %for.cond13.preheader
  ]

for.cond13.preheader:                             ; preds = %for.body
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv51
  %rtvec = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtvec_def**
  %4 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem44 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 0
  %5 = load i32* %num_elem44, align 4, !tbaa !50
  %cmp1745 = icmp sgt i32 %5, 0
  br i1 %cmp1745, label %for.body19, label %for.inc27

sw.bb9:                                           ; preds = %for.body
  %arrayidx11 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv51
  %rtx = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  tail call void @reset_used_flags(%struct.rtx_def* %6)
  br label %for.inc27

for.body19:                                       ; preds = %for.cond13.preheader, %for.body19
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body19 ], [ 0, %for.cond13.preheader ]
  %7 = phi %struct.rtvec_def* [ %9, %for.body19 ], [ %4, %for.cond13.preheader ]
  %arrayidx25 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 %indvars.iv
  %8 = load %struct.rtx_def** %arrayidx25, align 8, !tbaa !7
  tail call void @reset_used_flags(%struct.rtx_def* %8)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %9 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 0
  %10 = load i32* %num_elem, align 4, !tbaa !50
  %11 = trunc i64 %indvars.iv.next to i32
  %cmp17 = icmp slt i32 %11, %10
  br i1 %cmp17, label %for.body19, label %for.inc27

for.inc27:                                        ; preds = %for.body19, %for.cond13.preheader, %sw.bb9, %for.body
  %indvars.iv.next52 = add nuw nsw i64 %indvars.iv51, 1
  %12 = trunc i64 %indvars.iv.next52 to i32
  %cmp6 = icmp slt i32 %12, %conv
  br i1 %cmp6, label %for.body, label %for.end29

for.end29:                                        ; preds = %for.inc27, %sw.epilog, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @reset_used_decls(%union.tree_node* nocapture readonly %blk) #0 {
entry:
  %vars = getelementptr inbounds %union.tree_node* %blk, i64 0, i32 0, i32 2
  %0 = bitcast i32* %vars to %union.tree_node**
  %t.028 = load %union.tree_node** %0, align 8
  %tobool29 = icmp eq %union.tree_node* %t.028, null
  br i1 %tobool29, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %t.030 = phi %union.tree_node* [ %t.0, %for.inc ], [ %t.028, %entry ]
  %rtl = getelementptr inbounds %union.tree_node* %t.030, i64 0, i32 0, i32 17
  %1 = load %struct.rtx_def** %rtl, align 8, !tbaa !32
  %cmp = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp, label %for.inc, label %cond.end

cond.end:                                         ; preds = %for.body
  tail call void @reset_used_flags(%struct.rtx_def* %1)
  br label %for.inc

for.inc:                                          ; preds = %for.body, %cond.end
  %chain = getelementptr inbounds %union.tree_node* %t.030, i64 0, i32 0, i32 0, i32 0
  %t.0 = load %union.tree_node** %chain, align 8
  %tobool = icmp eq %union.tree_node* %t.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  %2 = getelementptr inbounds %union.tree_node* %blk, i64 0, i32 0, i32 4
  %t.125 = load %union.tree_node** %2, align 8
  %tobool1026 = icmp eq %union.tree_node* %t.125, null
  br i1 %tobool1026, label %for.end15, label %for.body11

for.body11:                                       ; preds = %for.end, %for.body11
  %t.127 = phi %union.tree_node* [ %t.1, %for.body11 ], [ %t.125, %for.end ]
  tail call fastcc void @reset_used_decls(%union.tree_node* %t.127)
  %chain14 = getelementptr inbounds %union.tree_node* %t.127, i64 0, i32 0, i32 0, i32 0
  %t.1 = load %union.tree_node** %chain14, align 8
  %tobool10 = icmp eq %union.tree_node* %t.1, null
  br i1 %tobool10, label %for.end15, label %for.body11

for.end15:                                        ; preds = %for.body11, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @copy_most_rtx(%struct.rtx_def* %orig, %struct.rtx_def* %may_share) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %orig, %may_share
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %may_share, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 3
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call = tail call i32 @in_expr_list_p(%struct.rtx_def* %may_share, %struct.rtx_def* %orig) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %1 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 0
  %bf.load2 = load i32* %1, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  switch i32 %bf.clear3, label %sw.epilog [
    i32 61, label %return
    i32 71, label %return
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 68, label %return
    i32 36, label %return
    i32 59, label %return
    i32 69, label %return
  ]

sw.epilog:                                        ; preds = %if.end
  %call4 = tail call %struct.rtx_def* @rtx_alloc(i32 %bf.clear3) #4
  %bf.load5 = load i32* %1, align 8
  %bf.clear6 = and i32 %bf.load5, 16711680
  %2 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 0
  %bf.load7 = load i32* %2, align 8
  %bf.clear8 = and i32 %bf.load7, -16711681
  %bf.set = or i32 %bf.clear8, %bf.clear6
  store i32 %bf.set, i32* %2, align 8
  %bf.load9 = load i32* %1, align 8
  %bf.clear11 = and i32 %bf.load9, 268435456
  %bf.clear15 = and i32 %bf.set, -268435457
  %bf.set16 = or i32 %bf.clear15, %bf.clear11
  store i32 %bf.set16, i32* %2, align 8
  %bf.load17 = load i32* %1, align 8
  %bf.clear19 = and i32 %bf.load17, 134217728
  %bf.clear23 = and i32 %bf.set16, -134217729
  %bf.set24 = or i32 %bf.clear23, %bf.clear19
  store i32 %bf.set24, i32* %2, align 8
  %bf.load25 = load i32* %1, align 8
  %bf.clear27 = and i32 %bf.load25, 67108864
  %bf.clear31 = and i32 %bf.set24, -67108865
  %bf.set32 = or i32 %bf.clear31, %bf.clear27
  store i32 %bf.set32, i32* %2, align 8
  %bf.load33 = load i32* %1, align 8
  %bf.clear35 = and i32 %bf.load33, 1073741824
  %bf.clear39 = and i32 %bf.set32, -1073741825
  %bf.set40 = or i32 %bf.clear39, %bf.clear35
  store i32 %bf.set40, i32* %2, align 8
  %bf.load41 = load i32* %1, align 8
  %bf.lshr42 = and i32 %bf.load41, -2147483648
  %bf.clear46 = and i32 %bf.set40, 2147483647
  %bf.set47 = or i32 %bf.clear46, %bf.lshr42
  store i32 %bf.set47, i32* %2, align 8
  %bf.clear51281 = and i32 %bf.load7, 65535
  %idxprom52272282 = zext i32 %bf.clear51281 to i64
  %arrayidx53283 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom52272282
  %3 = load i8* %arrayidx53283, align 1, !tbaa !9
  %cmp54285 = icmp eq i8 %3, 0
  br i1 %cmp54285, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom52272282
  %4 = load i8** %arrayidx, align 8, !tbaa !7
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc188
  %indvars.iv289 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next290, %for.inc188 ]
  %format_ptr.0288 = phi i8* [ %4, %for.body.lr.ph ], [ %incdec.ptr, %for.inc188 ]
  %incdec.ptr = getelementptr inbounds i8* %format_ptr.0288, i64 1
  %5 = load i8* %format_ptr.0288, align 1, !tbaa !9
  %conv56 = sext i8 %5 to i32
  switch i32 %conv56, label %sw.default186 [
    i32 101, label %sw.bb57
    i32 117, label %sw.bb88
    i32 69, label %sw.bb97
    i32 86, label %sw.bb97
    i32 119, label %sw.bb145
    i32 110, label %sw.bb153
    i32 105, label %sw.bb153
    i32 116, label %sw.bb161
    i32 115, label %sw.bb169
    i32 83, label %sw.bb169
    i32 48, label %sw.bb177
  ]

sw.bb57:                                          ; preds = %for.body
  %arrayidx59 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv289
  %rtx = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %7 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 %indvars.iv289, i32 0
  %.c276 = ptrtoint %struct.rtx_def* %6 to i64
  store i64 %.c276, i64* %7, align 8, !tbaa !7
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp68 = icmp eq %struct.rtx_def* %8, null
  %cmp75 = icmp eq %struct.rtx_def* %8, %may_share
  %or.cond = or i1 %cmp68, %cmp75
  br i1 %or.cond, label %for.inc188, label %if.then77

if.then77:                                        ; preds = %sw.bb57
  %call82 = tail call %struct.rtx_def* @copy_most_rtx(%struct.rtx_def* %8, %struct.rtx_def* %may_share)
  %call82.c = ptrtoint %struct.rtx_def* %call82 to i64
  store i64 %call82.c, i64* %7, align 8, !tbaa !7
  br label %for.inc188

sw.bb88:                                          ; preds = %for.body
  %arrayidx91 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv289
  %rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx92, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 %indvars.iv289, i32 0
  %.c275 = ptrtoint %struct.rtx_def* %9 to i64
  store i64 %.c275, i64* %10, align 8, !tbaa !7
  br label %for.inc188

sw.bb97:                                          ; preds = %for.body, %for.body
  %arrayidx100 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv289
  %rtvec = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtvec_def**
  %11 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx103 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 %indvars.iv289
  %rtvec104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.rtvec_def**
  %12 = getelementptr inbounds %union.rtunion_def* %arrayidx103, i64 0, i32 0
  %.c274 = ptrtoint %struct.rtvec_def* %11 to i64
  store i64 %.c274, i64* %12, align 8, !tbaa !7
  %13 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %cmp109 = icmp eq %struct.rtvec_def* %13, null
  br i1 %cmp109, label %for.inc188, label %if.then111

if.then111:                                       ; preds = %sw.bb97
  %num_elem = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 0
  %14 = load i32* %num_elem, align 4, !tbaa !50
  %call116 = tail call %struct.rtvec_def* @rtvec_alloc(i32 %14) #4
  %call116.c = ptrtoint %struct.rtvec_def* %call116 to i64
  store i64 %call116.c, i64* %12, align 8, !tbaa !7
  %num_elem126277 = getelementptr inbounds %struct.rtvec_def* %call116, i64 0, i32 0
  %15 = load i32* %num_elem126277, align 4, !tbaa !50
  %cmp127278 = icmp sgt i32 %15, 0
  br i1 %cmp127278, label %for.body129, label %for.inc188

for.body129:                                      ; preds = %if.then111, %for.body129
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body129 ], [ 0, %if.then111 ]
  %16 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx135 = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 1, i64 %indvars.iv
  %17 = load %struct.rtx_def** %arrayidx135, align 8, !tbaa !7
  %call136 = tail call %struct.rtx_def* @copy_most_rtx(%struct.rtx_def* %17, %struct.rtx_def* %may_share)
  %18 = load %struct.rtvec_def** %rtvec104, align 8, !tbaa !7
  %arrayidx143 = getelementptr inbounds %struct.rtvec_def* %18, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %call136, %struct.rtx_def** %arrayidx143, align 8, !tbaa !7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %19 = load %struct.rtvec_def** %rtvec104, align 8, !tbaa !7
  %num_elem126 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 0
  %20 = load i32* %num_elem126, align 4, !tbaa !50
  %21 = trunc i64 %indvars.iv.next to i32
  %cmp127 = icmp slt i32 %21, %20
  br i1 %cmp127, label %for.body129, label %for.inc188

sw.bb145:                                         ; preds = %for.body
  %rtwint = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv289, i32 0
  %22 = load i64* %rtwint, align 8, !tbaa !5
  %rtwint152 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 %indvars.iv289, i32 0
  store i64 %22, i64* %rtwint152, align 8, !tbaa !5
  br label %for.inc188

sw.bb153:                                         ; preds = %for.body, %for.body
  %arrayidx156 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv289
  %rtint = bitcast %union.rtunion_def* %arrayidx156 to i32*
  %23 = load i32* %rtint, align 4, !tbaa !1
  %arrayidx159 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 %indvars.iv289
  %rtint160 = bitcast %union.rtunion_def* %arrayidx159 to i32*
  store i32 %23, i32* %rtint160, align 4, !tbaa !1
  br label %for.inc188

sw.bb161:                                         ; preds = %for.body
  %arrayidx164 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv289
  %rttree = bitcast %union.rtunion_def* %arrayidx164 to %union.tree_node**
  %24 = load %union.tree_node** %rttree, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 %indvars.iv289, i32 0
  %.c273 = ptrtoint %union.tree_node* %24 to i64
  store i64 %.c273, i64* %25, align 8, !tbaa !7
  br label %for.inc188

sw.bb169:                                         ; preds = %for.body, %for.body
  %arrayidx172 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv289
  %rtstr = bitcast %union.rtunion_def* %arrayidx172 to i8**
  %26 = load i8** %rtstr, align 8, !tbaa !7
  %27 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 %indvars.iv289, i32 0
  %.c = ptrtoint i8* %26 to i64
  store i64 %.c, i64* %27, align 8, !tbaa !7
  br label %for.inc188

sw.bb177:                                         ; preds = %for.body
  %rtwint181 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv289, i32 0
  %28 = load i64* %rtwint181, align 8, !tbaa !5
  %rtwint185 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 %indvars.iv289, i32 0
  store i64 %28, i64* %rtwint185, align 8, !tbaa !5
  br label %for.inc188

sw.default186:                                    ; preds = %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 2498, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.copy_most_rtx, i64 0, i64 0)) #8
  unreachable

for.inc188:                                       ; preds = %for.body129, %if.then111, %sw.bb57, %sw.bb97, %sw.bb88, %sw.bb145, %sw.bb153, %sw.bb161, %sw.bb169, %sw.bb177, %if.then77
  %indvars.iv.next290 = add nuw nsw i64 %indvars.iv289, 1
  %bf.load50 = load i32* %2, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %idxprom52272 = zext i32 %bf.clear51 to i64
  %arrayidx53 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom52272
  %29 = load i8* %arrayidx53, align 1, !tbaa !9
  %conv = zext i8 %29 to i32
  %30 = trunc i64 %indvars.iv.next290 to i32
  %cmp54 = icmp slt i32 %30, %conv
  br i1 %cmp54, label %for.body, label %return

return:                                           ; preds = %for.inc188, %sw.epilog, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %entry, %land.lhs.true
  %retval.0 = phi %struct.rtx_def* [ %orig, %land.lhs.true ], [ %orig, %entry ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %orig, %if.end ], [ %call4, %sw.epilog ], [ %call4, %for.inc188 ]
  ret %struct.rtx_def* %retval.0
}

declare i32 @in_expr_list_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @make_safe_from(%struct.rtx_def* %x, %struct.rtx_def* %other) #0 {
entry:
  br label %while.body

while.body:                                       ; preds = %while.body.backedge, %entry
  %other.addr.0 = phi %struct.rtx_def* [ %other, %entry ], [ %other.addr.0.be, %while.body.backedge ]
  %0 = getelementptr inbounds %struct.rtx_def* %other.addr.0, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %return [
    i32 63, label %while.body.backedge
    i32 64, label %while.body.backedge
    i32 120, label %while.body.backedge
    i32 121, label %while.body.backedge
    i32 66, label %land.lhs.true
    i32 61, label %land.lhs.true49
  ]

while.body.backedge:                              ; preds = %while.body, %while.body, %while.body, %while.body
  %other.addr.0.be.in.in = getelementptr inbounds %struct.rtx_def* %other.addr.0, i64 0, i32 1, i64 0
  %other.addr.0.be.in = bitcast %union.rtunion_def* %other.addr.0.be.in.in to %struct.rtx_def**
  %other.addr.0.be = load %struct.rtx_def** %other.addr.0.be.in, align 8
  br label %while.body

land.lhs.true:                                    ; preds = %while.body
  %1 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load7 = load i32* %1, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  switch i32 %bf.clear8, label %if.then [
    i32 67, label %return
    i32 68, label %return
    i32 54, label %return
    i32 55, label %return
    i32 58, label %return
    i32 134, label %return
    i32 56, label %return
    i32 140, label %return
    i32 61, label %return
    i32 63, label %return
  ]

land.lhs.true49:                                  ; preds = %while.body
  %arrayidx51 = getelementptr inbounds %struct.rtx_def* %other.addr.0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx51 to i32*
  %2 = load i32* %rtuint, align 4, !tbaa !1
  %cmp52 = icmp ult i32 %2, 53
  br i1 %cmp52, label %if.then, label %lor.lhs.false53

lor.lhs.false53:                                  ; preds = %land.lhs.true49
  %call = tail call i32 @reg_mentioned_p(%struct.rtx_def* %other.addr.0, %struct.rtx_def* %x) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false53, %land.lhs.true49
  %3 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load54 = load i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load54, 16
  %bf.clear55 = and i32 %bf.lshr, 255
  %call56 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear55)
  %call57 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call56, %struct.rtx_def* %x) #4
  br label %return

return:                                           ; preds = %while.body, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %lor.lhs.false53, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call56, %if.then ], [ %x, %lor.lhs.false53 ], [ %x, %land.lhs.true ], [ %x, %land.lhs.true ], [ %x, %land.lhs.true ], [ %x, %land.lhs.true ], [ %x, %land.lhs.true ], [ %x, %land.lhs.true ], [ %x, %land.lhs.true ], [ %x, %land.lhs.true ], [ %x, %land.lhs.true ], [ %x, %land.lhs.true ], [ %x, %while.body ]
  ret %struct.rtx_def* %retval.0
}

declare i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @get_insns() #5 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 2
  %2 = load %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @get_last_insn() #5 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 3
  %2 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  ret %struct.rtx_def* %2
}

; Function Attrs: nounwind uwtable
define void @set_last_insn(%struct.rtx_def* %insn) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 2749, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.set_last_insn, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 3
  store %struct.rtx_def* %insn, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  ret void
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @get_last_insn_anywhere() #5 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 3
  %2 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %tobool = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %sequence_stack = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 5
  %stack.010 = load %struct.sequence_stack** %sequence_stack, align 8
  %tobool411 = icmp eq %struct.sequence_stack* %stack.010, null
  br i1 %tobool411, label %return, label %for.body

for.cond:                                         ; preds = %for.body
  %next = getelementptr inbounds %struct.sequence_stack* %stack.012, i64 0, i32 3
  %stack.0 = load %struct.sequence_stack** %next, align 8
  %tobool4 = icmp eq %struct.sequence_stack* %stack.0, null
  br i1 %tobool4, label %return, label %for.body

for.body:                                         ; preds = %if.end, %for.cond
  %stack.012 = phi %struct.sequence_stack* [ %stack.0, %for.cond ], [ %stack.010, %if.end ]
  %last = getelementptr inbounds %struct.sequence_stack* %stack.012, i64 0, i32 1
  %3 = load %struct.rtx_def** %last, align 8, !tbaa !53
  %cmp = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp, label %for.cond, label %return

return:                                           ; preds = %for.body, %for.cond, %if.end, %entry
  %retval.0 = phi %struct.rtx_def* [ %2, %entry ], [ null, %if.end ], [ %3, %for.body ], [ null, %for.cond ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind readonly uwtable
define i32 @get_max_uid() #5 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 6
  %2 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define void @renumber_insns(%struct._IO_FILE* %stream) #0 {
entry:
  %0 = load i32* @flag_renumber_insns, align 4, !tbaa !1
  switch i32 %0, label %entry.if.end3_crit_edge [
    i32 0, label %for.end
    i32 1, label %land.lhs.true
  ]

entry.if.end3_crit_edge:                          ; preds = %entry
  %.pre = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 3
  %.pre27 = load %struct.emit_status** %emit.phi.trans.insert, align 8, !tbaa !10
  br label %if.end3

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 6
  %3 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %cmp1 = icmp slt i32 %3, 25000
  br i1 %cmp1, label %for.end, label %if.end3

if.end3:                                          ; preds = %entry.if.end3_crit_edge, %land.lhs.true
  %4 = phi %struct.emit_status* [ %.pre27, %entry.if.end3_crit_edge ], [ %2, %land.lhs.true ]
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %4, i64 0, i32 6
  store i32 1, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %4, i64 0, i32 2
  %insn.024 = load %struct.rtx_def** %x_first_insn.i, align 8
  %tobool525 = icmp eq %struct.rtx_def* %insn.024, null
  br i1 %tobool525, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end3
  %tobool6 = icmp eq %struct._IO_FILE* %stream, null
  br i1 %tobool6, label %if.end11.us, label %if.end11

if.end11.us:                                      ; preds = %for.body.lr.ph, %if.end11.us
  %insn.026.us = phi %struct.rtx_def* [ %insn.0.us, %if.end11.us ], [ %insn.024, %for.body.lr.ph ]
  %5 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc.us = add nsw i32 %5, 1
  store i32 %inc.us, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %fld14.us = getelementptr inbounds %struct.rtx_def* %insn.026.us, i64 0, i32 1
  %rtint16.us = bitcast [1 x %union.rtunion_def]* %fld14.us to i32*
  store i32 %5, i32* %rtint16.us, align 4, !tbaa !1
  %arrayidx18.us = getelementptr inbounds %struct.rtx_def* %insn.026.us, i64 0, i32 1, i64 2
  %rtx.us = bitcast %union.rtunion_def* %arrayidx18.us to %struct.rtx_def**
  %insn.0.us = load %struct.rtx_def** %rtx.us, align 8
  %tobool5.us = icmp eq %struct.rtx_def* %insn.0.us, null
  br i1 %tobool5.us, label %for.end, label %if.end11.us

if.end11:                                         ; preds = %for.body.lr.ph, %if.end11
  %6 = phi %struct.emit_status* [ %.pre29, %if.end11 ], [ %4, %for.body.lr.ph ]
  %insn.026 = phi %struct.rtx_def* [ %insn.0, %if.end11 ], [ %insn.024, %for.body.lr.ph ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.026, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %7 = load i32* %rtint, align 4, !tbaa !1
  %x_cur_insn_uid9 = getelementptr inbounds %struct.emit_status* %6, i64 0, i32 6
  %8 = load i32* %x_cur_insn_uid9, align 4, !tbaa !47
  %call10 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([27 x i8]* @.str2, i64 0, i64 0), i32 %7, i32 %8) #4
  %.pre28 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit12.phi.trans.insert = getelementptr inbounds %struct.function* %.pre28, i64 0, i32 3
  %.pre29 = load %struct.emit_status** %emit12.phi.trans.insert, align 8, !tbaa !10
  %x_cur_insn_uid13 = getelementptr inbounds %struct.emit_status* %.pre29, i64 0, i32 6
  %9 = load i32* %x_cur_insn_uid13, align 4, !tbaa !47
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %x_cur_insn_uid13, align 4, !tbaa !47
  %fld14 = getelementptr inbounds %struct.rtx_def* %insn.026, i64 0, i32 1
  %rtint16 = bitcast [1 x %union.rtunion_def]* %fld14 to i32*
  store i32 %9, i32* %rtint16, align 4, !tbaa !1
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %insn.026, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %insn.0 = load %struct.rtx_def** %rtx, align 8
  %tobool5 = icmp eq %struct.rtx_def* %insn.0, null
  br i1 %tobool5, label %for.end, label %if.end11

for.end:                                          ; preds = %if.end11, %if.end11.us, %if.end3, %entry, %land.lhs.true
  ret void
}

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #6

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @next_insn(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool, label %if.end16, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %tobool1 = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool1, label %if.end16, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %land.lhs.true2, label %if.end16

land.lhs.true2:                                   ; preds = %land.lhs.true
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 3
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx5, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load6 = load i32* %3, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 24
  br i1 %cmp8, label %if.then9, label %if.end16

if.then9:                                         ; preds = %land.lhs.true2
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtvec_def**
  %4 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx15 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 1, i64 0
  %5 = load %struct.rtx_def** %arrayidx15, align 8, !tbaa !7
  br label %if.end16

if.end16:                                         ; preds = %if.then, %entry, %land.lhs.true, %land.lhs.true2, %if.then9
  %insn.addr.0 = phi %struct.rtx_def* [ %5, %if.then9 ], [ %0, %land.lhs.true2 ], [ %0, %land.lhs.true ], [ null, %if.then ], [ null, %entry ]
  ret %struct.rtx_def* %insn.addr.0
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @previous_insn(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool, label %if.end22, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %tobool1 = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool1, label %if.end22, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %land.lhs.true2, label %if.end22

land.lhs.true2:                                   ; preds = %land.lhs.true
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 3
  %rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx5, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load6 = load i32* %3, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 24
  br i1 %cmp8, label %if.then9, label %if.end22

if.then9:                                         ; preds = %land.lhs.true2
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtvec_def**
  %4 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 0
  %5 = load i32* %num_elem, align 4, !tbaa !50
  %sub = add nsw i32 %5, -1
  %idxprom = sext i32 %sub to i64
  %arrayidx21 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 1, i64 %idxprom
  %6 = load %struct.rtx_def** %arrayidx21, align 8, !tbaa !7
  br label %if.end22

if.end22:                                         ; preds = %if.then, %entry, %land.lhs.true, %land.lhs.true2, %if.then9
  %insn.addr.0 = phi %struct.rtx_def* [ %6, %if.then9 ], [ %0, %land.lhs.true2 ], [ %0, %land.lhs.true ], [ null, %if.then ], [ null, %entry ]
  ret %struct.rtx_def* %insn.addr.0
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool.old = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool.old, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %lor.lhs.false
  %insn.addr.0 = phi %struct.rtx_def* [ %0, %lor.lhs.false ], [ %insn, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %while.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 37
  br i1 %cmp1, label %while.body, label %while.end

while.end:                                        ; preds = %lor.lhs.false, %while.body, %entry
  %insn.addr.1 = phi %struct.rtx_def* [ null, %entry ], [ %0, %lor.lhs.false ], [ null, %while.body ]
  ret %struct.rtx_def* %insn.addr.1
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool.old = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool.old, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %lor.lhs.false
  %insn.addr.0 = phi %struct.rtx_def* [ %0, %lor.lhs.false ], [ %insn, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %while.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 37
  br i1 %cmp1, label %while.body, label %while.end

while.end:                                        ; preds = %lor.lhs.false, %while.body, %entry
  %insn.addr.1 = phi %struct.rtx_def* [ null, %entry ], [ %0, %lor.lhs.false ], [ null, %while.body ]
  ret %struct.rtx_def* %insn.addr.1
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @next_real_insn(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool.old = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool.old, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %lor.lhs.false
  %insn.addr.0 = phi %struct.rtx_def* [ %0, %lor.lhs.false ], [ %insn, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %while.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %bf.clear.off = add i32 %bf.clear, -32
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %while.end, label %while.body

while.end:                                        ; preds = %lor.lhs.false, %while.body, %entry
  %insn.addr.1 = phi %struct.rtx_def* [ null, %entry ], [ %0, %lor.lhs.false ], [ null, %while.body ]
  ret %struct.rtx_def* %insn.addr.1
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @prev_real_insn(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool.old = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool.old, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %lor.lhs.false
  %insn.addr.0 = phi %struct.rtx_def* [ %0, %lor.lhs.false ], [ %insn, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %while.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %bf.clear.off = add i32 %bf.clear, -32
  %switch = icmp ult i32 %bf.clear.off, 3
  br i1 %switch, label %while.end, label %while.body

while.end:                                        ; preds = %lor.lhs.false, %while.body, %entry
  %insn.addr.1 = phi %struct.rtx_def* [ null, %entry ], [ %0, %lor.lhs.false ], [ null, %while.body ]
  ret %struct.rtx_def* %insn.addr.1
}

; Function Attrs: nounwind readonly uwtable
define i32 @active_insn_p(%struct.rtx_def* nocapture readonly %insn) #5 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %bf.clear.off = add i32 %bf.clear, -33
  %switch = icmp ult i32 %bf.clear.off, 2
  br i1 %switch, label %lor.end19, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %cmp6 = icmp eq i32 %bf.clear, 32
  br i1 %cmp6, label %land.rhs, label %lor.end19

land.rhs:                                         ; preds = %lor.rhs
  %1 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %lor.end19, label %lor.rhs7

lor.rhs7:                                         ; preds = %land.rhs
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load8 = load i32* %3, align 8
  %4 = and i32 %bf.load8, 65534
  %bf.clear9.cmp = icmp ne i32 %4, 48
  br label %lor.end19

lor.end19:                                        ; preds = %lor.rhs7, %entry, %land.rhs, %lor.rhs
  %5 = phi i1 [ false, %lor.rhs ], [ true, %land.rhs ], [ true, %entry ], [ %bf.clear9.cmp, %lor.rhs7 ]
  %lor.ext = zext i1 %5 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @next_active_insn(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool.old = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool.old, label %while.end, label %while.body.preheader

while.body.preheader:                             ; preds = %entry
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx8, align 8, !tbaa !7
  %cmp9 = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp9, label %while.end, label %lor.lhs.false.lr.ph

lor.lhs.false.lr.ph:                              ; preds = %while.body.preheader
  %1 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %1, 0
  br i1 %tobool.i, label %lor.lhs.false.us, label %lor.lhs.false

lor.lhs.false.us:                                 ; preds = %lor.lhs.false.lr.ph, %while.body.backedge.us
  %2 = phi %struct.rtx_def* [ %4, %while.body.backedge.us ], [ %0, %lor.lhs.false.lr.ph ]
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load.i.us = load i32* %3, align 8
  %bf.clear.i.us = and i32 %bf.load.i.us, 65535
  %bf.clear.i.us.off = add i32 %bf.clear.i.us, -32
  %switch = icmp ult i32 %bf.clear.i.us.off, 3
  br i1 %switch, label %while.end, label %while.body.backedge.us

while.body.backedge.us:                           ; preds = %lor.lhs.false.us
  %arrayidx.us = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 2
  %rtx.us = bitcast %union.rtunion_def* %arrayidx.us to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx.us, align 8, !tbaa !7
  %cmp.us = icmp eq %struct.rtx_def* %4, null
  br i1 %cmp.us, label %while.end, label %lor.lhs.false.us

lor.lhs.false:                                    ; preds = %lor.lhs.false.lr.ph, %while.body.backedge
  %5 = phi %struct.rtx_def* [ %10, %while.body.backedge ], [ %0, %lor.lhs.false.lr.ph ]
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load.i = load i32* %6, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %bf.clear.off.i = add i32 %bf.clear.i, -33
  %switch.i = icmp ult i32 %bf.clear.off.i, 2
  br i1 %switch.i, label %while.end, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %lor.lhs.false
  %cmp6.i = icmp eq i32 %bf.clear.i, 32
  br i1 %cmp6.i, label %lor.rhs7.i, label %while.body.backedge

lor.rhs7.i:                                       ; preds = %lor.rhs.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load8.i = load i32* %8, align 8
  %9 = and i32 %bf.load8.i, 65534
  %phitmp = icmp eq i32 %9, 48
  br i1 %phitmp, label %while.body.backedge, label %while.end

while.body.backedge:                              ; preds = %lor.rhs7.i, %lor.rhs.i
  %arrayidx = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp = icmp eq %struct.rtx_def* %10, null
  br i1 %cmp, label %while.end, label %lor.lhs.false

while.end:                                        ; preds = %while.body.backedge, %lor.rhs7.i, %lor.lhs.false, %lor.lhs.false.us, %while.body.backedge.us, %while.body.preheader, %entry
  %insn.addr.1 = phi %struct.rtx_def* [ null, %entry ], [ null, %while.body.preheader ], [ %2, %lor.lhs.false.us ], [ null, %while.body.backedge.us ], [ null, %while.body.backedge ], [ %5, %lor.rhs7.i ], [ %5, %lor.lhs.false ]
  ret %struct.rtx_def* %insn.addr.1
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @prev_active_insn(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool.old = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool.old, label %while.end, label %while.body.preheader

while.body.preheader:                             ; preds = %entry
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 1
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx8, align 8, !tbaa !7
  %cmp9 = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp9, label %while.end, label %lor.lhs.false.lr.ph

lor.lhs.false.lr.ph:                              ; preds = %while.body.preheader
  %1 = load i32* @reload_completed, align 4, !tbaa !1
  %tobool.i = icmp eq i32 %1, 0
  br label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.lhs.false.lr.ph, %while.body.backedge
  %2 = phi %struct.rtx_def* [ %0, %lor.lhs.false.lr.ph ], [ %7, %while.body.backedge ]
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load.i = load i32* %3, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %bf.clear.off.i = add i32 %bf.clear.i, -33
  %switch.i = icmp ult i32 %bf.clear.off.i, 2
  br i1 %switch.i, label %while.end, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %lor.lhs.false
  %cmp6.i = icmp eq i32 %bf.clear.i, 32
  br i1 %cmp6.i, label %land.rhs.i, label %while.body.backedge

land.rhs.i:                                       ; preds = %lor.rhs.i
  br i1 %tobool.i, label %while.end, label %lor.rhs7.i

lor.rhs7.i:                                       ; preds = %land.rhs.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load8.i = load i32* %5, align 8
  %6 = and i32 %bf.load8.i, 65534
  %phitmp = icmp eq i32 %6, 48
  br i1 %phitmp, label %while.body.backedge, label %while.end

while.body.backedge:                              ; preds = %lor.rhs7.i, %lor.rhs.i
  %arrayidx = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp, label %while.end, label %lor.lhs.false

while.end:                                        ; preds = %while.body.backedge, %lor.rhs7.i, %land.rhs.i, %lor.lhs.false, %while.body.preheader, %entry
  %insn.addr.1 = phi %struct.rtx_def* [ null, %entry ], [ null, %while.body.preheader ], [ null, %while.body.backedge ], [ %2, %lor.rhs7.i ], [ %2, %land.rhs.i ], [ %2, %lor.lhs.false ]
  ret %struct.rtx_def* %insn.addr.1
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @next_label(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool.old = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool.old, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %lor.lhs.false
  %insn.addr.0 = phi %struct.rtx_def* [ %0, %lor.lhs.false ], [ %insn, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %while.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 36
  br i1 %cmp1, label %while.end, label %while.body

while.end:                                        ; preds = %lor.lhs.false, %while.body, %entry
  %insn.addr.1 = phi %struct.rtx_def* [ null, %entry ], [ %0, %lor.lhs.false ], [ null, %while.body ]
  ret %struct.rtx_def* %insn.addr.1
}

; Function Attrs: nounwind readonly uwtable
define %struct.rtx_def* @prev_label(%struct.rtx_def* readonly %insn) #5 {
entry:
  %tobool.old = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool.old, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %lor.lhs.false
  %insn.addr.0 = phi %struct.rtx_def* [ %0, %lor.lhs.false ], [ %insn, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.addr.0, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %while.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 36
  br i1 %cmp1, label %while.end, label %while.body

while.end:                                        ; preds = %lor.lhs.false, %while.body, %entry
  %insn.addr.1 = phi %struct.rtx_def* [ null, %entry ], [ %0, %lor.lhs.false ], [ null, %while.body ]
  ret %struct.rtx_def* %insn.addr.1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @try_split(%struct.rtx_def* %pat, %struct.rtx_def* %trial, i32 %last) #0 {
entry:
  %arg.addr.i = alloca i64, align 8
  %arrayidx = getelementptr inbounds %struct.rtx_def* %trial, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %trial, i64 0, i32 1, i64 2
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx3, align 8, !tbaa !7
  %call = call i32 @any_condjump_p(%struct.rtx_def* %trial) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.endthread-pre-split, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %call4 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %trial, i32 16, %struct.rtx_def* null) #4
  %tobool5 = icmp eq %struct.rtx_def* %call4, null
  br i1 %tobool5, label %if.endthread-pre-split, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %call4, i64 0, i32 1, i64 0
  %rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx8, align 8, !tbaa !7
  %rtwint = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0, i32 0
  %3 = load i64* %rtwint, align 8, !tbaa !5
  %conv = trunc i64 %3 to i32
  store i32 %conv, i32* @split_branch_probability, align 4, !tbaa !1
  br label %if.end

if.endthread-pre-split:                           ; preds = %entry, %land.lhs.true
  %.pr = load i32* @split_branch_probability, align 4, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.endthread-pre-split, %if.then
  %4 = phi i32 [ %.pr, %if.endthread-pre-split ], [ %conv, %if.then ]
  %call11 = call %struct.rtx_def* @split_insns(%struct.rtx_def* %pat, %struct.rtx_def* %trial) #4
  store i32 -1, i32* @split_branch_probability, align 4, !tbaa !1
  %tobool12 = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool12, label %if.end19, label %land.lhs.true13

land.lhs.true13:                                  ; preds = %if.end
  %5 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load = load i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 35
  br i1 %cmp, label %if.then15, label %if.end19

if.then15:                                        ; preds = %land.lhs.true13
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 2
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx18, align 8, !tbaa !7
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then15, %land.lhs.true13
  %has_barrier.0 = phi i32 [ 1, %if.then15 ], [ 0, %land.lhs.true13 ], [ 0, %if.end ]
  %after.0 = phi %struct.rtx_def* [ %6, %if.then15 ], [ %1, %land.lhs.true13 ], [ null, %if.end ]
  %tobool20 = icmp eq %struct.rtx_def* %call11, null
  br i1 %tobool20, label %return, label %if.then21

if.then21:                                        ; preds = %if.end19
  %7 = getelementptr inbounds %struct.rtx_def* %call11, i64 0, i32 0
  %bf.load22 = load i32* %7, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  %cmp24 = icmp eq i32 %bf.clear23, 24
  br i1 %cmp24, label %for.cond.preheader, label %if.else

for.cond.preheader:                               ; preds = %if.then21
  %arrayidx28 = getelementptr inbounds %struct.rtx_def* %call11, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**
  %8 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem527 = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 0
  %9 = load i32* %num_elem527, align 4, !tbaa !50
  %cmp29528 = icmp sgt i32 %9, 0
  br i1 %cmp29528, label %for.body, label %for.cond57.preheader

for.cond57.preheader:                             ; preds = %for.inc, %for.cond.preheader
  %.lcssa500 = phi i32 [ %9, %for.cond.preheader ], [ %17, %for.inc ]
  %cmp88 = icmp eq i32 %4, -1
  %conv101 = sext i32 %4 to i64
  %10 = bitcast i64* %arg.addr.i to i8*
  %arg.off.i = add i64 %conv101, 64
  %11 = icmp ult i64 %arg.off.i, 129
  %arrayidx.i = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  br label %for.cond57.outer

for.body:                                         ; preds = %for.cond.preheader, %for.inc
  %indvars.iv544 = phi i64 [ %indvars.iv.next545, %for.inc ], [ 0, %for.cond.preheader ]
  %12 = phi %struct.rtvec_def* [ %16, %for.inc ], [ %8, %for.cond.preheader ]
  %arrayidx34 = getelementptr inbounds %struct.rtvec_def* %12, i64 0, i32 1, i64 %indvars.iv544
  %13 = load %struct.rtx_def** %arrayidx34, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 0
  %bf.load35 = load i32* %14, align 8
  %bf.clear36 = and i32 %bf.load35, 65535
  %cmp37 = icmp eq i32 %bf.clear36, 32
  br i1 %cmp37, label %land.lhs.true39, label %for.inc

land.lhs.true39:                                  ; preds = %for.body
  %arrayidx47 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 3
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx48, align 8, !tbaa !7
  %call49 = call i32 @rtx_equal_p(%struct.rtx_def* %15, %struct.rtx_def* %pat) #4
  %tobool50 = icmp eq i32 %call49, 0
  br i1 %tobool50, label %land.lhs.true39.for.inc_crit_edge, label %return

land.lhs.true39.for.inc_crit_edge:                ; preds = %land.lhs.true39
  %.pre555 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true39.for.inc_crit_edge, %for.body
  %16 = phi %struct.rtvec_def* [ %.pre555, %land.lhs.true39.for.inc_crit_edge ], [ %12, %for.body ]
  %indvars.iv.next545 = add nuw nsw i64 %indvars.iv544, 1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 0
  %17 = load i32* %num_elem, align 4, !tbaa !50
  %18 = trunc i64 %indvars.iv.next545 to i32
  %cmp29 = icmp slt i32 %18, %17
  br i1 %cmp29, label %for.body, label %for.cond57.preheader

for.cond57:                                       ; preds = %for.cond57.outer, %for.body60
  %indvars.iv542 = phi i64 [ %25, %for.cond57.outer ], [ %indvars.iv.next543, %for.body60 ]
  %indvars.iv.next543 = add nsw i64 %indvars.iv542, -1
  %19 = trunc i64 %indvars.iv542 to i32
  %cmp58 = icmp sgt i32 %19, 0
  br i1 %cmp58, label %for.body60, label %for.end113

for.body60:                                       ; preds = %for.cond57
  %20 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx66 = getelementptr inbounds %struct.rtvec_def* %20, i64 0, i32 1, i64 %indvars.iv.next543
  %21 = load %struct.rtx_def** %arrayidx66, align 8, !tbaa !7
  %22 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 0
  %bf.load67 = load i32* %22, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  %cmp69 = icmp eq i32 %bf.clear68, 33
  br i1 %cmp69, label %if.then71, label %for.cond57

if.then71:                                        ; preds = %for.body60
  %23 = trunc i64 %indvars.iv.next543 to i32
  %arrayidx79 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 1, i64 3
  %rtx80 = bitcast %union.rtunion_def* %arrayidx79 to %struct.rtx_def**
  %24 = load %struct.rtx_def** %rtx80, align 8, !tbaa !7
  call void @mark_jump_label(%struct.rtx_def* %24, %struct.rtx_def* %21, i32 0) #4
  %inc87 = add nsw i32 %njumps.0.ph, 1
  br i1 %cmp88, label %for.cond57.outer, label %land.lhs.true90

land.lhs.true90:                                  ; preds = %if.then71
  %call91 = call i32 @any_condjump_p(%struct.rtx_def* %21) #4
  %tobool92 = icmp eq i32 %call91, 0
  br i1 %tobool92, label %for.cond57.outer, label %land.lhs.true93

land.lhs.true93:                                  ; preds = %land.lhs.true90
  %call94 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %21, i32 16, %struct.rtx_def* null) #4
  %tobool95 = icmp eq %struct.rtx_def* %call94, null
  br i1 %tobool95, label %if.then96, label %for.cond57.outer

for.cond57.outer:                                 ; preds = %gen_rtx_CONST_INT.exit, %if.then71, %land.lhs.true90, %land.lhs.true93, %for.cond57.preheader
  %i.1.in.ph = phi i32 [ %.lcssa500, %for.cond57.preheader ], [ %23, %land.lhs.true93 ], [ %23, %land.lhs.true90 ], [ %23, %if.then71 ], [ %23, %gen_rtx_CONST_INT.exit ]
  %njumps.0.ph = phi i32 [ 0, %for.cond57.preheader ], [ %inc87, %land.lhs.true93 ], [ %inc87, %land.lhs.true90 ], [ %inc87, %if.then71 ], [ %inc87, %gen_rtx_CONST_INT.exit ]
  %25 = sext i32 %i.1.in.ph to i64
  br label %for.cond57

if.then96:                                        ; preds = %land.lhs.true93
  %cmp97 = icmp eq i32 %njumps.0.ph, 0
  br i1 %cmp97, label %if.end100, label %if.then99

if.then99:                                        ; preds = %if.then96
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3153, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.try_split, i64 0, i64 0)) #8
  unreachable

if.end100:                                        ; preds = %if.then96
  call void @llvm.lifetime.start(i64 8, i8* %10) #4
  store i64 %conv101, i64* %arg.addr.i, align 8, !tbaa !5
  br i1 %11, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.end100
  %26 = load %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  br label %gen_rtx_CONST_INT.exit

if.end.i:                                         ; preds = %if.end100
  %27 = load %struct.htab** @const_int_htab, align 8, !tbaa !7
  %call.i = call i8** @htab_find_slot_with_hash(%struct.htab* %27, i8* %10, i32 %4, i32 1) #4
  %28 = load i8** %call.i, align 8, !tbaa !7
  %cmp2.i = icmp eq i8* %28, null
  br i1 %cmp2.i, label %if.then4.i, label %if.end6.i

if.then4.i:                                       ; preds = %if.end.i
  %29 = load i64* %arg.addr.i, align 8, !tbaa !5
  %call5.i = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %29) #4
  %30 = bitcast %struct.rtx_def* %call5.i to i8*
  store i8* %30, i8** %call.i, align 8, !tbaa !7
  br label %if.end6.i

if.end6.i:                                        ; preds = %if.then4.i, %if.end.i
  %31 = phi i8* [ %30, %if.then4.i ], [ %28, %if.end.i ]
  %32 = bitcast i8* %31 to %struct.rtx_def*
  br label %gen_rtx_CONST_INT.exit

gen_rtx_CONST_INT.exit:                           ; preds = %if.then.i, %if.end6.i
  %retval.0.i = phi %struct.rtx_def* [ %26, %if.then.i ], [ %32, %if.end6.i ]
  call void @llvm.lifetime.end(i64 8, i8* %10) #4
  %arrayidx104 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 1, i64 6
  %rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**
  %33 = load %struct.rtx_def** %rtx105, align 8, !tbaa !7
  %call106 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 16, %struct.rtx_def* %retval.0.i, %struct.rtx_def* %33) #4
  %34 = getelementptr inbounds %union.rtunion_def* %arrayidx104, i64 0, i32 0
  %call106.c = ptrtoint %struct.rtx_def* %call106 to i64
  store i64 %call106.c, i64* %34, align 8, !tbaa !7
  br label %for.cond57.outer

for.end113:                                       ; preds = %for.cond57
  %35 = getelementptr inbounds %struct.rtx_def* %trial, i64 0, i32 0
  %bf.load114 = load i32* %35, align 8
  %bf.clear115 = and i32 %bf.load114, 65535
  %cmp116 = icmp eq i32 %bf.clear115, 34
  br i1 %cmp116, label %if.then118, label %if.end155

if.then118:                                       ; preds = %for.end113
  %36 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem122 = getelementptr inbounds %struct.rtvec_def* %36, i64 0, i32 0
  %37 = load i32* %num_elem122, align 4, !tbaa !50
  %cmp125525 = icmp sgt i32 %37, 0
  br i1 %cmp125525, label %for.body127.lr.ph, label %if.end155

for.body127.lr.ph:                                ; preds = %if.then118
  %arrayidx140 = getelementptr inbounds %struct.rtx_def* %trial, i64 0, i32 1, i64 7
  %rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**
  %38 = sext i32 %37 to i64
  br label %for.body127

for.body127:                                      ; preds = %for.cond124.backedge.for.body127_crit_edge, %for.body127.lr.ph
  %39 = phi %struct.rtvec_def* [ %36, %for.body127.lr.ph ], [ %.pre, %for.cond124.backedge.for.body127_crit_edge ]
  %indvars.iv540 = phi i64 [ %38, %for.body127.lr.ph ], [ %indvars.iv.next541, %for.cond124.backedge.for.body127_crit_edge ]
  %indvars.iv.next541 = add nsw i64 %indvars.iv540, -1
  %arrayidx133 = getelementptr inbounds %struct.rtvec_def* %39, i64 0, i32 1, i64 %indvars.iv.next541
  %40 = load %struct.rtx_def** %arrayidx133, align 8, !tbaa !7
  %41 = getelementptr inbounds %struct.rtx_def* %40, i64 0, i32 0
  %bf.load134 = load i32* %41, align 8
  %bf.clear135 = and i32 %bf.load134, 65535
  %cmp136 = icmp eq i32 %bf.clear135, 34
  br i1 %cmp136, label %if.then138, label %for.cond124.backedge

for.cond124.backedge:                             ; preds = %for.body127, %if.then138
  %42 = trunc i64 %indvars.iv.next541 to i32
  %cmp125 = icmp sgt i32 %42, 0
  br i1 %cmp125, label %for.cond124.backedge.for.body127_crit_edge, label %if.end155

for.cond124.backedge.for.body127_crit_edge:       ; preds = %for.cond124.backedge
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  br label %for.body127

if.then138:                                       ; preds = %for.body127
  %43 = load %struct.rtx_def** %rtx141, align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.rtx_def* %40, i64 0, i32 1, i64 7, i32 0
  %.c = ptrtoint %struct.rtx_def* %43 to i64
  store i64 %.c, i64* %44, align 8, !tbaa !7
  br label %for.cond124.backedge

if.end155:                                        ; preds = %for.cond124.backedge, %if.then118, %for.end113
  %arrayidx157 = getelementptr inbounds %struct.rtx_def* %trial, i64 0, i32 1, i64 6
  %note.0.in519 = bitcast %union.rtunion_def* %arrayidx157 to %struct.rtx_def**
  %note.0520 = load %struct.rtx_def** %note.0.in519, align 8
  %tobool160521 = icmp eq %struct.rtx_def* %note.0520, null
  br i1 %tobool160521, label %for.end288, label %for.body161

for.body161:                                      ; preds = %if.end155, %for.inc284
  %note.0522 = phi %struct.rtx_def* [ %note.0, %for.inc284 ], [ %note.0520, %if.end155 ]
  %45 = getelementptr inbounds %struct.rtx_def* %note.0522, i64 0, i32 0
  %bf.load162 = load i32* %45, align 8
  %bf.lshr = lshr i32 %bf.load162, 16
  %bf.clear163 = and i32 %bf.lshr, 255
  switch i32 %bf.clear163, label %for.inc284 [
    i32 23, label %sw.bb
    i32 26, label %sw.bb206
    i32 28, label %sw.bb206
    i32 29, label %sw.bb206
    i32 27, label %sw.bb245
  ]

sw.bb:                                            ; preds = %for.body161
  %46 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem167 = getelementptr inbounds %struct.rtvec_def* %46, i64 0, i32 0
  %47 = load i32* %num_elem167, align 4, !tbaa !50
  %cmp170517 = icmp sgt i32 %47, 0
  br i1 %cmp170517, label %for.body172.lr.ph, label %for.inc284

for.body172.lr.ph:                                ; preds = %sw.bb
  %arrayidx193 = getelementptr inbounds %struct.rtx_def* %note.0522, i64 0, i32 1, i64 0
  %rtx194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.rtx_def**
  %48 = sext i32 %47 to i64
  br label %for.body172

for.body172:                                      ; preds = %for.cond169.backedge.for.body172_crit_edge, %for.body172.lr.ph
  %49 = phi %struct.rtvec_def* [ %46, %for.body172.lr.ph ], [ %.pre547, %for.cond169.backedge.for.body172_crit_edge ]
  %indvars.iv538 = phi i64 [ %48, %for.body172.lr.ph ], [ %indvars.iv.next539, %for.cond169.backedge.for.body172_crit_edge ]
  %indvars.iv.next539 = add nsw i64 %indvars.iv538, -1
  %arrayidx179 = getelementptr inbounds %struct.rtvec_def* %49, i64 0, i32 1, i64 %indvars.iv.next539
  %50 = load %struct.rtx_def** %arrayidx179, align 8, !tbaa !7
  %51 = getelementptr inbounds %struct.rtx_def* %50, i64 0, i32 0
  %bf.load180 = load i32* %51, align 8
  %bf.clear181 = and i32 %bf.load180, 65535
  %cmp182 = icmp eq i32 %bf.clear181, 34
  br i1 %cmp182, label %if.then191, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body172
  %52 = load i32* @flag_non_call_exceptions, align 4, !tbaa !1
  %tobool184 = icmp eq i32 %52, 0
  br i1 %tobool184, label %for.cond169.backedge, label %land.lhs.true185

land.lhs.true185:                                 ; preds = %lor.lhs.false
  %arrayidx187 = getelementptr inbounds %struct.rtx_def* %50, i64 0, i32 1, i64 3
  %rtx188 = bitcast %union.rtunion_def* %arrayidx187 to %struct.rtx_def**
  %53 = load %struct.rtx_def** %rtx188, align 8, !tbaa !7
  %call189 = call i32 @may_trap_p(%struct.rtx_def* %53) #4
  %tobool190 = icmp eq i32 %call189, 0
  br i1 %tobool190, label %for.cond169.backedge, label %if.then191

for.cond169.backedge:                             ; preds = %land.lhs.true185, %lor.lhs.false, %if.then191
  %54 = trunc i64 %indvars.iv.next539 to i32
  %cmp170 = icmp sgt i32 %54, 0
  br i1 %cmp170, label %for.cond169.backedge.for.body172_crit_edge, label %for.inc284

for.cond169.backedge.for.body172_crit_edge:       ; preds = %for.cond169.backedge
  %.pre547 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  br label %for.body172

if.then191:                                       ; preds = %land.lhs.true185, %for.body172
  %55 = load %struct.rtx_def** %rtx194, align 8, !tbaa !7
  %arrayidx196 = getelementptr inbounds %struct.rtx_def* %50, i64 0, i32 1, i64 6
  %rtx197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.rtx_def**
  %56 = load %struct.rtx_def** %rtx197, align 8, !tbaa !7
  %call198 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 23, %struct.rtx_def* %55, %struct.rtx_def* %56) #4
  %57 = getelementptr inbounds %union.rtunion_def* %arrayidx196, i64 0, i32 0
  %call198.c = ptrtoint %struct.rtx_def* %call198 to i64
  store i64 %call198.c, i64* %57, align 8, !tbaa !7
  br label %for.cond169.backedge

sw.bb206:                                         ; preds = %for.body161, %for.body161, %for.body161
  %58 = load %struct.rtvec_def** %rtvec, align 8
  %num_elem210 = getelementptr inbounds %struct.rtvec_def* %58, i64 0, i32 0
  %59 = load i32* %num_elem210, align 4, !tbaa !50
  %cmp213514 = icmp sgt i32 %59, 0
  br i1 %cmp213514, label %for.body215.lr.ph, label %for.inc284

for.body215.lr.ph:                                ; preds = %sw.bb206
  %arrayidx232 = getelementptr inbounds %struct.rtx_def* %note.0522, i64 0, i32 1, i64 0
  %rtx233 = bitcast %union.rtunion_def* %arrayidx232 to %struct.rtx_def**
  %60 = sext i32 %59 to i64
  br label %for.body215

for.body215:                                      ; preds = %for.cond212.backedge.for.body215_crit_edge, %for.body215.lr.ph
  %61 = phi %struct.rtvec_def* [ %58, %for.body215.lr.ph ], [ %.pre553, %for.cond212.backedge.for.body215_crit_edge ]
  %indvars.iv536 = phi i64 [ %60, %for.body215.lr.ph ], [ %indvars.iv.next537, %for.cond212.backedge.for.body215_crit_edge ]
  %indvars.iv.next537 = add nsw i64 %indvars.iv536, -1
  %arrayidx222 = getelementptr inbounds %struct.rtvec_def* %61, i64 0, i32 1, i64 %indvars.iv.next537
  %62 = load %struct.rtx_def** %arrayidx222, align 8, !tbaa !7
  %63 = getelementptr inbounds %struct.rtx_def* %62, i64 0, i32 0
  %bf.load223 = load i32* %63, align 8
  %bf.clear224 = and i32 %bf.load223, 65535
  %cmp225 = icmp eq i32 %bf.clear224, 34
  br i1 %cmp225, label %if.then227, label %for.cond212.backedge

for.cond212.backedge:                             ; preds = %for.body215, %if.then227
  %64 = trunc i64 %indvars.iv.next537 to i32
  %cmp213 = icmp sgt i32 %64, 0
  br i1 %cmp213, label %for.cond212.backedge.for.body215_crit_edge, label %for.inc284

for.cond212.backedge.for.body215_crit_edge:       ; preds = %for.cond212.backedge
  %.pre553 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  br label %for.body215

if.then227:                                       ; preds = %for.body215
  %bf.load228 = load i32* %45, align 8
  %bf.lshr229 = lshr i32 %bf.load228, 16
  %bf.clear230 = and i32 %bf.lshr229, 255
  %65 = load %struct.rtx_def** %rtx233, align 8, !tbaa !7
  %arrayidx235 = getelementptr inbounds %struct.rtx_def* %62, i64 0, i32 1, i64 6
  %rtx236 = bitcast %union.rtunion_def* %arrayidx235 to %struct.rtx_def**
  %66 = load %struct.rtx_def** %rtx236, align 8, !tbaa !7
  %call237 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 %bf.clear230, %struct.rtx_def* %65, %struct.rtx_def* %66) #4
  %67 = getelementptr inbounds %union.rtunion_def* %arrayidx235, i64 0, i32 0
  %call237.c = ptrtoint %struct.rtx_def* %call237 to i64
  store i64 %call237.c, i64* %67, align 8, !tbaa !7
  br label %for.cond212.backedge

sw.bb245:                                         ; preds = %for.body161
  %68 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem249 = getelementptr inbounds %struct.rtvec_def* %68, i64 0, i32 0
  %69 = load i32* %num_elem249, align 4, !tbaa !50
  %cmp252511 = icmp sgt i32 %69, 0
  br i1 %cmp252511, label %for.body254.lr.ph, label %for.inc284

for.body254.lr.ph:                                ; preds = %sw.bb245
  %arrayidx271 = getelementptr inbounds %struct.rtx_def* %note.0522, i64 0, i32 1, i64 0
  %rtx272 = bitcast %union.rtunion_def* %arrayidx271 to %struct.rtx_def**
  %70 = sext i32 %69 to i64
  br label %for.body254

for.body254:                                      ; preds = %for.cond251.backedge.for.body254_crit_edge, %for.body254.lr.ph
  %71 = phi %struct.rtvec_def* [ %68, %for.body254.lr.ph ], [ %.pre554, %for.cond251.backedge.for.body254_crit_edge ]
  %indvars.iv534 = phi i64 [ %70, %for.body254.lr.ph ], [ %indvars.iv.next535, %for.cond251.backedge.for.body254_crit_edge ]
  %indvars.iv.next535 = add nsw i64 %indvars.iv534, -1
  %arrayidx261 = getelementptr inbounds %struct.rtvec_def* %71, i64 0, i32 1, i64 %indvars.iv.next535
  %72 = load %struct.rtx_def** %arrayidx261, align 8, !tbaa !7
  %73 = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 0
  %bf.load262 = load i32* %73, align 8
  %bf.clear263 = and i32 %bf.load262, 65535
  %cmp264 = icmp eq i32 %bf.clear263, 33
  br i1 %cmp264, label %if.then266, label %for.cond251.backedge

for.cond251.backedge:                             ; preds = %for.body254, %if.then266
  %74 = trunc i64 %indvars.iv.next535 to i32
  %cmp252 = icmp sgt i32 %74, 0
  br i1 %cmp252, label %for.cond251.backedge.for.body254_crit_edge, label %for.inc284

for.cond251.backedge.for.body254_crit_edge:       ; preds = %for.cond251.backedge
  %.pre554 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  br label %for.body254

if.then266:                                       ; preds = %for.body254
  %bf.load267 = load i32* %45, align 8
  %bf.lshr268 = lshr i32 %bf.load267, 16
  %bf.clear269 = and i32 %bf.lshr268, 255
  %75 = load %struct.rtx_def** %rtx272, align 8, !tbaa !7
  %arrayidx274 = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 1, i64 6
  %rtx275 = bitcast %union.rtunion_def* %arrayidx274 to %struct.rtx_def**
  %76 = load %struct.rtx_def** %rtx275, align 8, !tbaa !7
  %call276 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 %bf.clear269, %struct.rtx_def* %75, %struct.rtx_def* %76) #4
  %77 = getelementptr inbounds %union.rtunion_def* %arrayidx274, i64 0, i32 0
  %call276.c = ptrtoint %struct.rtx_def* %call276 to i64
  store i64 %call276.c, i64* %77, align 8, !tbaa !7
  br label %for.cond251.backedge

for.inc284:                                       ; preds = %for.cond251.backedge, %for.cond212.backedge, %for.cond169.backedge, %sw.bb245, %sw.bb206, %sw.bb, %for.body161
  %arrayidx286 = getelementptr inbounds %struct.rtx_def* %note.0522, i64 0, i32 1, i64 1
  %note.0.in = bitcast %union.rtunion_def* %arrayidx286 to %struct.rtx_def**
  %note.0 = load %struct.rtx_def** %note.0.in, align 8
  %tobool160 = icmp eq %struct.rtx_def* %note.0, null
  br i1 %tobool160, label %for.end288, label %for.body161

for.end288:                                       ; preds = %for.inc284, %if.end155
  %bf.load289 = load i32* %35, align 8
  %bf.clear290 = and i32 %bf.load289, 65535
  %cmp291 = icmp eq i32 %bf.clear290, 32
  br i1 %cmp291, label %if.then293, label %if.end327

if.then293:                                       ; preds = %for.end288
  %78 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem297 = getelementptr inbounds %struct.rtvec_def* %78, i64 0, i32 0
  %79 = load i32* %num_elem297, align 4, !tbaa !50
  %cmp300508 = icmp sgt i32 %79, 0
  br i1 %cmp300508, label %for.body302.lr.ph, label %if.end327

for.body302.lr.ph:                                ; preds = %if.then293
  %80 = sext i32 %79 to i64
  br label %for.body302

for.body302:                                      ; preds = %for.cond299.backedge.for.body302_crit_edge, %for.body302.lr.ph
  %81 = phi %struct.rtvec_def* [ %78, %for.body302.lr.ph ], [ %.pre546, %for.cond299.backedge.for.body302_crit_edge ]
  %indvars.iv = phi i64 [ %80, %for.body302.lr.ph ], [ %indvars.iv.next, %for.cond299.backedge.for.body302_crit_edge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx308 = getelementptr inbounds %struct.rtvec_def* %81, i64 0, i32 1, i64 %indvars.iv.next
  %82 = load %struct.rtx_def** %arrayidx308, align 8, !tbaa !7
  %83 = getelementptr inbounds %struct.rtx_def* %82, i64 0, i32 0
  %bf.load309 = load i32* %83, align 8
  %bf.clear310 = and i32 %bf.load309, 65535
  %cmp311 = icmp eq i32 %bf.clear310, 32
  br i1 %cmp311, label %if.then313, label %for.cond299.backedge

for.cond299.backedge:                             ; preds = %for.body302, %if.then313
  %84 = trunc i64 %indvars.iv.next to i32
  %cmp300 = icmp sgt i32 %84, 0
  br i1 %cmp300, label %for.cond299.backedge.for.body302_crit_edge, label %if.end327

for.cond299.backedge.for.body302_crit_edge:       ; preds = %for.cond299.backedge
  %.pre546 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  br label %for.body302

if.then313:                                       ; preds = %for.body302
  %arrayidx321 = getelementptr inbounds %struct.rtx_def* %82, i64 0, i32 1, i64 3
  %rtx322 = bitcast %union.rtunion_def* %arrayidx321 to %struct.rtx_def**
  %85 = load %struct.rtx_def** %rtx322, align 8, !tbaa !7
  call fastcc void @mark_label_nuses(%struct.rtx_def* %85)
  br label %for.cond299.backedge

if.end327:                                        ; preds = %for.cond299.backedge, %if.then293, %for.end288
  %bf.load.i = load i32* %7, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 24
  br i1 %cmp.i, label %for.cond.preheader.i, label %if.else.i

for.cond.preheader.i:                             ; preds = %if.end327
  %86 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem16.i = getelementptr inbounds %struct.rtvec_def* %86, i64 0, i32 0
  %87 = load i32* %num_elem16.i, align 4, !tbaa !50
  %cmp117.i = icmp sgt i32 %87, 0
  br i1 %cmp117.i, label %for.body.i, label %emit_insn_after.exit

for.body.i:                                       ; preds = %for.cond.preheader.i, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %for.cond.preheader.i ]
  %88 = phi %struct.rtvec_def* [ %90, %for.body.i ], [ %86, %for.cond.preheader.i ]
  %after.addr.018.i = phi %struct.rtx_def* [ %89, %for.body.i ], [ %trial, %for.cond.preheader.i ]
  %arrayidx5.i = getelementptr inbounds %struct.rtvec_def* %88, i64 0, i32 1, i64 %indvars.iv.i
  %89 = load %struct.rtx_def** %arrayidx5.i, align 8, !tbaa !7
  call void @add_insn_after(%struct.rtx_def* %89, %struct.rtx_def* %after.addr.018.i) #4
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %90 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %90, i64 0, i32 0
  %91 = load i32* %num_elem.i, align 4, !tbaa !50
  %92 = trunc i64 %indvars.iv.next.i to i32
  %cmp1.i = icmp slt i32 %92, %91
  br i1 %cmp1.i, label %for.body.i, label %emit_insn_after.exit

if.else.i:                                        ; preds = %if.end327
  %call.i.i = call %struct.rtx_def* @rtx_alloc(i32 32) #4
  %93 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i.i = getelementptr inbounds %struct.function* %93, i64 0, i32 3
  %94 = load %struct.emit_status** %emit.i.i, align 8, !tbaa !10
  %x_cur_insn_uid.i.i = getelementptr inbounds %struct.emit_status* %94, i64 0, i32 6
  %95 = load i32* %x_cur_insn_uid.i.i, align 4, !tbaa !47
  %inc.i.i = add nsw i32 %95, 1
  store i32 %inc.i.i, i32* %x_cur_insn_uid.i.i, align 4, !tbaa !47
  %fld.i.i = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1
  %rtint.i.i = bitcast [1 x %union.rtunion_def]* %fld.i.i to i32*
  store i32 %95, i32* %rtint.i.i, align 4, !tbaa !1
  %96 = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i.i = ptrtoint %struct.rtx_def* %call11 to i64
  store i64 %pattern.c.i.i, i64* %96, align 8, !tbaa !7
  %arrayidx4.i.i = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 4
  %rtint5.i.i = bitcast %union.rtunion_def* %arrayidx4.i.i to i32*
  store i32 -1, i32* %rtint5.i.i, align 4, !tbaa !1
  %97 = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 5, i32 0
  %98 = bitcast i64* %97 to i8*
  call void @llvm.memset.p0i8.i64(i8* %98, i8 0, i64 16, i32 8, i1 false) #4
  call void @add_insn_after(%struct.rtx_def* %call.i.i, %struct.rtx_def* %trial) #4
  br label %emit_insn_after.exit

emit_insn_after.exit:                             ; preds = %for.body.i, %for.cond.preheader.i, %if.else.i
  %insn.1.i = phi %struct.rtx_def* [ %call.i.i, %if.else.i ], [ %trial, %for.cond.preheader.i ], [ %89, %for.body.i ]
  %call329 = call %struct.rtx_def* @delete_related_insns(%struct.rtx_def* %trial) #4
  %tobool330 = icmp eq i32 %has_barrier.0, 0
  br i1 %tobool330, label %for.cond337.preheader, label %if.then331

if.then331:                                       ; preds = %emit_insn_after.exit
  %call.i493 = call %struct.rtx_def* @rtx_alloc(i32 35) #4
  %99 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %99, i64 0, i32 3
  %100 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %100, i64 0, i32 6
  %101 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %101, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %arrayidx.i494 = getelementptr inbounds %struct.rtx_def* %call.i493, i64 0, i32 1, i64 0
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i494 to i32*
  store i32 %101, i32* %rtint.i, align 4, !tbaa !1
  call void @add_insn_after(%struct.rtx_def* %call.i493, %struct.rtx_def* %insn.1.i) #4
  br label %for.cond337.preheader

for.cond337.preheader:                            ; preds = %emit_insn_after.exit, %if.then331
  %tem.0.in.in502 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 2
  %tem.0.in503 = bitcast %union.rtunion_def* %tem.0.in.in502 to %struct.rtx_def**
  %tem.0504 = load %struct.rtx_def** %tem.0.in503, align 8
  %cmp338505 = icmp eq %struct.rtx_def* %tem.0504, %after.0
  br i1 %cmp338505, label %if.end375, label %for.body340

for.body340:                                      ; preds = %for.cond337.preheader, %for.cond337.backedge
  %tem.0506 = phi %struct.rtx_def* [ %tem.0, %for.cond337.backedge ], [ %tem.0504, %for.cond337.preheader ]
  %102 = getelementptr inbounds %struct.rtx_def* %tem.0506, i64 0, i32 0
  %bf.load341 = load i32* %102, align 8
  %bf.clear343 = and i32 %bf.load341, 134217728
  %tobool344 = icmp eq i32 %bf.clear343, 0
  br i1 %tobool344, label %land.lhs.true345, label %for.cond337.backedge

for.cond337.backedge:                             ; preds = %for.body340, %land.lhs.true345, %if.then353
  %.pn.be = phi %struct.rtx_def* [ %tem.0506, %for.body340 ], [ %call357, %if.then353 ], [ %tem.0506, %land.lhs.true345 ]
  %tem.0.in.in = getelementptr inbounds %struct.rtx_def* %.pn.be, i64 0, i32 1, i64 2
  %tem.0.in = bitcast %union.rtunion_def* %tem.0.in.in to %struct.rtx_def**
  %tem.0 = load %struct.rtx_def** %tem.0.in, align 8
  %cmp338 = icmp eq %struct.rtx_def* %tem.0, %after.0
  br i1 %cmp338, label %if.end375, label %for.body340

land.lhs.true345:                                 ; preds = %for.body340
  %bf.clear347 = and i32 %bf.load341, 65535
  %idxprom348490 = zext i32 %bf.clear347 to i64
  %arrayidx349 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom348490
  %103 = load i8* %arrayidx349, align 1, !tbaa !9
  %cmp351 = icmp eq i8 %103, 105
  br i1 %cmp351, label %if.then353, label %for.cond337.backedge

if.then353:                                       ; preds = %land.lhs.true345
  %arrayidx355 = getelementptr inbounds %struct.rtx_def* %tem.0506, i64 0, i32 1, i64 3
  %rtx356 = bitcast %union.rtunion_def* %arrayidx355 to %struct.rtx_def**
  %104 = load %struct.rtx_def** %rtx356, align 8, !tbaa !7
  %call357 = call %struct.rtx_def* @try_split(%struct.rtx_def* %104, %struct.rtx_def* %tem.0506, i32 1)
  br label %for.cond337.backedge

if.else:                                          ; preds = %if.then21
  %call364 = call i32 @rtx_equal_p(%struct.rtx_def* %call11, %struct.rtx_def* %pat) #4
  %tobool365 = icmp eq i32 %call364, 0
  br i1 %tobool365, label %if.else367, label %return

if.else367:                                       ; preds = %if.else
  %105 = getelementptr inbounds %struct.rtx_def* %trial, i64 0, i32 1, i64 3, i32 0
  %call11.c = ptrtoint %struct.rtx_def* %call11 to i64
  store i64 %call11.c, i64* %105, align 8, !tbaa !7
  %arrayidx372 = getelementptr inbounds %struct.rtx_def* %trial, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx372 to i32*
  store i32 -1, i32* %rtint, align 4, !tbaa !1
  %call373 = call %struct.rtx_def* @try_split(%struct.rtx_def* %call11, %struct.rtx_def* %trial, i32 %last)
  br label %if.end375

if.end375:                                        ; preds = %for.cond337.backedge, %for.cond337.preheader, %if.else367
  %tobool376 = icmp eq i32 %last, 0
  br i1 %tobool376, label %cond.false382, label %cond.true

cond.true:                                        ; preds = %if.end375
  %tobool377 = icmp eq %struct.rtx_def* %after.0, null
  br i1 %tobool377, label %cond.false, label %cond.true378

cond.true378:                                     ; preds = %cond.true
  %arrayidx380 = getelementptr inbounds %struct.rtx_def* %after.0, i64 0, i32 1, i64 1
  %rtx381 = bitcast %union.rtunion_def* %arrayidx380 to %struct.rtx_def**
  br label %cond.end386

cond.false:                                       ; preds = %cond.true
  %106 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %106, i64 0, i32 3
  %107 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %107, i64 0, i32 3
  br label %cond.end386

cond.false382:                                    ; preds = %if.end375
  %arrayidx384 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 2
  %rtx385 = bitcast %union.rtunion_def* %arrayidx384 to %struct.rtx_def**
  br label %cond.end386

cond.end386:                                      ; preds = %cond.true378, %cond.false, %cond.false382
  %cond387.in = phi %struct.rtx_def** [ %rtx385, %cond.false382 ], [ %rtx381, %cond.true378 ], [ %x_last_insn, %cond.false ]
  %cond387 = load %struct.rtx_def** %cond387.in, align 8
  br label %return

return:                                           ; preds = %land.lhs.true39, %if.end19, %if.else, %cond.end386
  %retval.0 = phi %struct.rtx_def* [ %cond387, %cond.end386 ], [ %trial, %if.else ], [ %trial, %if.end19 ], [ %trial, %land.lhs.true39 ]
  ret %struct.rtx_def* %retval.0
}

declare i32 @any_condjump_p(%struct.rtx_def*) #1

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

declare %struct.rtx_def* @split_insns(%struct.rtx_def*, %struct.rtx_def*) #1

declare i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @mark_jump_label(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare i32 @may_trap_p(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @mark_label_nuses(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 67
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 3
  %rtint = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %2 = load i32* %rtint, align 4, !tbaa !1
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %rtint, align 4, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %idxprom57 = zext i32 %bf.clear to i64
  %arrayidx3 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom57
  %3 = load i8** %arrayidx3, align 8, !tbaa !7
  %arrayidx5 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom57
  %4 = load i8* %arrayidx5, align 1, !tbaa !9
  %cmp662 = icmp eq i8 %4, 0
  br i1 %cmp662, label %for.end42, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %5 = zext i8 %4 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv64 = phi i64 [ %5, %for.body.lr.ph ], [ %indvars.iv.next65, %for.cond.backedge ]
  %indvars.iv.next65 = add nsw i64 %indvars.iv64, -1
  %arrayidx9 = getelementptr inbounds i8* %3, i64 %indvars.iv.next65
  %6 = load i8* %arrayidx9, align 1, !tbaa !9
  switch i8 %6, label %for.cond.backedge [
    i8 101, label %if.then13
    i8 69, label %if.then23
  ]

for.cond.backedge:                                ; preds = %for.body31, %if.then23, %for.body, %if.then13
  %7 = trunc i64 %indvars.iv.next65 to i32
  %cmp6 = icmp sgt i32 %7, 0
  br i1 %cmp6, label %for.body, label %for.end42

if.then13:                                        ; preds = %for.body
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next65
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx17, align 8, !tbaa !7
  tail call fastcc void @mark_label_nuses(%struct.rtx_def* %8)
  br label %for.cond.backedge

if.then23:                                        ; preds = %for.body
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next65
  %rtvec = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtvec_def**
  %9 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 0
  %10 = load i32* %num_elem, align 4, !tbaa !50
  %cmp2959 = icmp sgt i32 %10, 0
  br i1 %cmp2959, label %for.body31.lr.ph, label %for.cond.backedge

for.body31.lr.ph:                                 ; preds = %if.then23
  %11 = sext i32 %10 to i64
  br label %for.body31

for.body31:                                       ; preds = %for.body31.for.body31_crit_edge, %for.body31.lr.ph
  %12 = phi %struct.rtvec_def* [ %9, %for.body31.lr.ph ], [ %.pre, %for.body31.for.body31_crit_edge ]
  %indvars.iv = phi i64 [ %11, %for.body31.lr.ph ], [ %indvars.iv.next, %for.body31.for.body31_crit_edge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx37 = getelementptr inbounds %struct.rtvec_def* %12, i64 0, i32 1, i64 %indvars.iv.next
  %13 = load %struct.rtx_def** %arrayidx37, align 8, !tbaa !7
  tail call fastcc void @mark_label_nuses(%struct.rtx_def* %13)
  %14 = trunc i64 %indvars.iv.next to i32
  %cmp29 = icmp sgt i32 %14, 0
  br i1 %cmp29, label %for.body31.for.body31_crit_edge, label %for.cond.backedge

for.body31.for.body31_crit_edge:                  ; preds = %for.body31
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  br label %for.body31

for.end42:                                        ; preds = %for.cond.backedge, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %pattern, %struct.rtx_def* %after) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %for.cond.preheader, label %if.else

for.cond.preheader:                               ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %1 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem16 = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 0
  %2 = load i32* %num_elem16, align 4, !tbaa !50
  %cmp117 = icmp sgt i32 %2, 0
  br i1 %cmp117, label %for.body, label %if.end

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.cond.preheader ]
  %3 = phi %struct.rtvec_def* [ %5, %for.body ], [ %1, %for.cond.preheader ]
  %after.addr.018 = phi %struct.rtx_def* [ %4, %for.body ], [ %after, %for.cond.preheader ]
  %arrayidx5 = getelementptr inbounds %struct.rtvec_def* %3, i64 0, i32 1, i64 %indvars.iv
  %4 = load %struct.rtx_def** %arrayidx5, align 8, !tbaa !7
  tail call void @add_insn_after(%struct.rtx_def* %4, %struct.rtx_def* %after.addr.018)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %5 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 0
  %6 = load i32* %num_elem, align 4, !tbaa !50
  %7 = trunc i64 %indvars.iv.next to i32
  %cmp1 = icmp slt i32 %7, %6
  br i1 %cmp1, label %for.body, label %if.end

if.else:                                          ; preds = %entry
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 32) #4
  %8 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %8, i64 0, i32 3
  %9 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 6
  %10 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %10, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %10, i32* %rtint.i, align 4, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c.i, i64* %11, align 8, !tbaa !7
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  store i32 -1, i32* %rtint5.i, align 4, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 5, i32 0
  %13 = bitcast i64* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i32 8, i1 false) #4
  tail call void @add_insn_after(%struct.rtx_def* %call.i, %struct.rtx_def* %after)
  br label %if.end

if.end:                                           ; preds = %for.body, %for.cond.preheader, %if.else
  %insn.1 = phi %struct.rtx_def* [ %call.i, %if.else ], [ %after, %for.cond.preheader ], [ %4, %for.body ]
  ret %struct.rtx_def* %insn.1
}

declare %struct.rtx_def* @delete_related_insns(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %after) #0 {
entry:
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 35) #4
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 6
  %2 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  store i32 %2, i32* %rtint, align 4, !tbaa !1
  tail call void @add_insn_after(%struct.rtx_def* %call, %struct.rtx_def* %after)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @make_insn_raw(%struct.rtx_def* %pattern) #0 {
entry:
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 32) #4
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 6
  %2 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %fld = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  store i32 %2, i32* %rtint, align 4, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 3, i32 0
  %pattern.c = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c, i64* %3, align 8, !tbaa !7
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 4
  %rtint5 = bitcast %union.rtunion_def* %arrayidx4 to i32*
  store i32 -1, i32* %rtint5, align 4, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 5, i32 0
  %5 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 16, i32 8, i1 false)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define void @add_insn(%struct.rtx_def* %insn) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 3
  %2 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %3 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 1, i32 0
  %.c = ptrtoint %struct.rtx_def* %2 to i64
  store i64 %.c, i64* %3, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %4, align 8, !tbaa !7
  %5 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4 = getelementptr inbounds %struct.function* %5, i64 0, i32 3
  %6 = load %struct.emit_status** %emit4, align 8, !tbaa !10
  %x_last_insn5 = getelementptr inbounds %struct.emit_status* %6, i64 0, i32 3
  %7 = load %struct.rtx_def** %x_last_insn5, align 8, !tbaa !46
  %cmp = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 2, i32 0
  %insn.c = ptrtoint %struct.rtx_def* %insn to i64
  store i64 %insn.c, i64* %8, align 8, !tbaa !7
  %.pre = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 3
  %.pre23 = load %struct.emit_status** %emit11.phi.trans.insert, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %9 = phi %struct.emit_status* [ %6, %entry ], [ %.pre23, %if.then ]
  %x_first_insn = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 2
  %10 = load %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %cmp12 = icmp eq %struct.rtx_def* %10, null
  br i1 %cmp12, label %if.then13, label %if.end16

if.then13:                                        ; preds = %if.end
  store %struct.rtx_def* %insn, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %.pre24 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert = getelementptr inbounds %struct.function* %.pre24, i64 0, i32 3
  %.pre25 = load %struct.emit_status** %emit17.phi.trans.insert, align 8, !tbaa !10
  br label %if.end16

if.end16:                                         ; preds = %if.then13, %if.end
  %11 = phi %struct.emit_status* [ %.pre25, %if.then13 ], [ %9, %if.end ]
  %x_last_insn18 = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 3
  store %struct.rtx_def* %insn, %struct.rtx_def** %x_last_insn18, align 8, !tbaa !46
  ret void
}

; Function Attrs: nounwind uwtable
define void @add_insn_after(%struct.rtx_def* %insn, %struct.rtx_def* %after) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %1 = load i32* @optimize, align 4, !tbaa !1
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 134217728
  %tobool1 = icmp eq i32 %bf.clear, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3365, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.add_insn_after, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2, i32 0
  %.c = ptrtoint %struct.rtx_def* %0 to i64
  store i64 %.c, i64* %3, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 1, i32 0
  %after.c = ptrtoint %struct.rtx_def* %after to i64
  store i64 %after.c, i64* %4, align 8, !tbaa !7
  %tobool8 = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool8, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.end
  %5 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1, i32 0
  %insn.c153 = ptrtoint %struct.rtx_def* %insn to i64
  store i64 %insn.c153, i64* %5, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load13 = load i32* %6, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp = icmp eq i32 %bf.clear14, 32
  br i1 %cmp, label %land.lhs.true15, label %if.end49

land.lhs.true15:                                  ; preds = %if.then9
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 3
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx18, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load19 = load i32* %8, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 24
  br i1 %cmp21, label %if.then22, label %if.end49

if.then22:                                        ; preds = %land.lhs.true15
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**
  %9 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx28 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 0
  %10 = load %struct.rtx_def** %arrayidx28, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 1, i32 0
  store i64 %insn.c153, i64* %11, align 8, !tbaa !7
  br label %if.end49

if.else:                                          ; preds = %if.end
  %12 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %12, i64 0, i32 3
  %13 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 3
  %14 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %cmp33 = icmp eq %struct.rtx_def* %14, %after
  br i1 %cmp33, label %if.then34, label %if.else37

if.then34:                                        ; preds = %if.else
  store %struct.rtx_def* %insn, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  br label %if.end49

if.else37:                                        ; preds = %if.else
  %sequence_stack = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 5
  %stack.0156 = load %struct.sequence_stack** %sequence_stack, align 8
  %cond157 = icmp eq %struct.sequence_stack* %stack.0156, null
  br i1 %cond157, label %if.then46, label %for.body

for.cond:                                         ; preds = %for.body
  %next44 = getelementptr inbounds %struct.sequence_stack* %stack.0158, i64 0, i32 3
  %stack.0 = load %struct.sequence_stack** %next44, align 8
  %cond = icmp eq %struct.sequence_stack* %stack.0, null
  br i1 %cond, label %if.then46, label %for.body

for.body:                                         ; preds = %if.else37, %for.cond
  %stack.0158 = phi %struct.sequence_stack* [ %stack.0, %for.cond ], [ %stack.0156, %if.else37 ]
  %last = getelementptr inbounds %struct.sequence_stack* %stack.0158, i64 0, i32 1
  %15 = load %struct.rtx_def** %last, align 8, !tbaa !53
  %cmp40 = icmp eq %struct.rtx_def* %15, %after
  br i1 %cmp40, label %if.then41, label %for.cond

if.then41:                                        ; preds = %for.body
  store %struct.rtx_def* %insn, %struct.rtx_def** %last, align 8, !tbaa !53
  br label %if.end49

if.then46:                                        ; preds = %for.cond, %if.else37
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3390, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.add_insn_after, i64 0, i64 0)) #8
  unreachable

if.end49:                                         ; preds = %if.then41, %if.then34, %if.then9, %land.lhs.true15, %if.then22
  %16 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !7
  %tobool50 = icmp eq %struct.varray_head_tag* %16, null
  br i1 %tobool50, label %if.end84, label %land.lhs.true51

land.lhs.true51:                                  ; preds = %if.end49
  %arrayidx53 = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx53 to i32*
  %17 = load i32* %rtint, align 4, !tbaa !1
  %conv = zext i32 %17 to i64
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 0
  %18 = load i64* %num_elements, align 8, !tbaa !55
  %cmp54 = icmp ult i64 %conv, %18
  br i1 %cmp54, label %land.lhs.true56, label %if.end84

land.lhs.true56:                                  ; preds = %land.lhs.true51
  %idxprom = sext i32 %17 to i64
  %data = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 4
  %bb60 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx61 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb60, i64 0, i64 %idxprom
  %19 = load %struct.basic_block_def** %arrayidx61, align 8, !tbaa !7
  %tobool62 = icmp eq %struct.basic_block_def* %19, null
  br i1 %tobool62, label %if.end84, label %if.then63

if.then63:                                        ; preds = %land.lhs.true56
  tail call void @set_block_for_insn(%struct.rtx_def* %insn, %struct.basic_block_def* %19) #4
  %end = getelementptr inbounds %struct.basic_block_def* %19, i64 0, i32 1
  %20 = load %struct.rtx_def** %end, align 8, !tbaa !57
  %cmp64 = icmp eq %struct.rtx_def* %20, %after
  br i1 %cmp64, label %land.lhs.true66, label %if.end84

land.lhs.true66:                                  ; preds = %if.then63
  %21 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load67 = load i32* %21, align 8
  %bf.clear68 = and i32 %bf.load67, 65535
  switch i32 %bf.clear68, label %if.then81 [
    i32 35, label %if.end84
    i32 37, label %lor.lhs.false
  ]

lor.lhs.false:                                    ; preds = %land.lhs.true66
  %arrayidx77 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint78 = bitcast %union.rtunion_def* %arrayidx77 to i32*
  %22 = load i32* %rtint78, align 4, !tbaa !1
  %cmp79 = icmp eq i32 %22, -80
  br i1 %cmp79, label %if.end84, label %if.then81

if.then81:                                        ; preds = %land.lhs.true66, %lor.lhs.false
  store %struct.rtx_def* %insn, %struct.rtx_def** %end, align 8, !tbaa !57
  br label %if.end84

if.end84:                                         ; preds = %land.lhs.true66, %lor.lhs.false, %land.lhs.true56, %if.end49, %if.then63, %if.then81, %land.lhs.true51
  %23 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %insn.c = ptrtoint %struct.rtx_def* %insn to i64
  store i64 %insn.c, i64* %23, align 8, !tbaa !7
  %24 = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 0
  %bf.load88 = load i32* %24, align 8
  %bf.clear89 = and i32 %bf.load88, 65535
  %cmp90 = icmp eq i32 %bf.clear89, 32
  br i1 %cmp90, label %land.lhs.true92, label %if.end116

land.lhs.true92:                                  ; preds = %if.end84
  %arrayidx94 = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 1, i64 3
  %rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**
  %25 = load %struct.rtx_def** %rtx95, align 8, !tbaa !7
  %26 = getelementptr inbounds %struct.rtx_def* %25, i64 0, i32 0
  %bf.load96 = load i32* %26, align 8
  %bf.clear97 = and i32 %bf.load96, 65535
  %cmp98 = icmp eq i32 %bf.clear97, 24
  br i1 %cmp98, label %if.then100, label %if.end116

if.then100:                                       ; preds = %land.lhs.true92
  %arrayidx105 = getelementptr inbounds %struct.rtx_def* %25, i64 0, i32 1, i64 0
  %rtvec106 = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtvec_def**
  %27 = load %struct.rtvec_def** %rtvec106, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %27, i64 0, i32 0
  %28 = load i32* %num_elem, align 4, !tbaa !50
  %sub = add nsw i32 %28, -1
  %idxprom107 = sext i32 %sub to i64
  %arrayidx112 = getelementptr inbounds %struct.rtvec_def* %27, i64 0, i32 1, i64 %idxprom107
  %29 = load %struct.rtx_def** %arrayidx112, align 8, !tbaa !7
  %30 = getelementptr inbounds %struct.rtx_def* %29, i64 0, i32 1, i64 2, i32 0
  store i64 %insn.c, i64* %30, align 8, !tbaa !7
  br label %if.end116

if.end116:                                        ; preds = %if.then100, %land.lhs.true92, %if.end84
  ret void
}

declare void @set_block_for_insn(%struct.rtx_def*, %struct.basic_block_def*) #1

; Function Attrs: nounwind uwtable
define void @add_insn_before(%struct.rtx_def* %insn, %struct.rtx_def* %before) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %before, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %1 = load i32* @optimize, align 4, !tbaa !1
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %before, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 134217728
  %tobool1 = icmp eq i32 %bf.clear, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3429, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.add_insn_before, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 1, i32 0
  %.c = ptrtoint %struct.rtx_def* %0 to i64
  store i64 %.c, i64* %3, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2, i32 0
  %before.c = ptrtoint %struct.rtx_def* %before to i64
  store i64 %before.c, i64* %4, align 8, !tbaa !7
  %tobool8 = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool8, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.end
  %5 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 2, i32 0
  %insn.c149 = ptrtoint %struct.rtx_def* %insn to i64
  store i64 %insn.c149, i64* %5, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load13 = load i32* %6, align 8
  %bf.clear14 = and i32 %bf.load13, 65535
  %cmp = icmp eq i32 %bf.clear14, 32
  br i1 %cmp, label %land.lhs.true15, label %if.end51

land.lhs.true15:                                  ; preds = %if.then9
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 3
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx18, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load19 = load i32* %8, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 24
  br i1 %cmp21, label %if.then22, label %if.end51

if.then22:                                        ; preds = %land.lhs.true15
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**
  %9 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 0
  %10 = load i32* %num_elem, align 4, !tbaa !50
  %sub = add nsw i32 %10, -1
  %idxprom = sext i32 %sub to i64
  %arrayidx31 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 %idxprom
  %11 = load %struct.rtx_def** %arrayidx31, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 2, i32 0
  store i64 %insn.c149, i64* %12, align 8, !tbaa !7
  br label %if.end51

if.else:                                          ; preds = %if.end
  %13 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %13, i64 0, i32 3
  %14 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %14, i64 0, i32 2
  %15 = load %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %cmp36 = icmp eq %struct.rtx_def* %15, %before
  br i1 %cmp36, label %if.then37, label %if.else40

if.then37:                                        ; preds = %if.else
  store %struct.rtx_def* %insn, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  br label %if.end51

if.else40:                                        ; preds = %if.else
  %sequence_stack = getelementptr inbounds %struct.emit_status* %14, i64 0, i32 5
  %stack.0152 = load %struct.sequence_stack** %sequence_stack, align 8
  %cond153 = icmp eq %struct.sequence_stack* %stack.0152, null
  br i1 %cond153, label %if.then48, label %for.body

for.cond:                                         ; preds = %for.body
  %next = getelementptr inbounds %struct.sequence_stack* %stack.0154, i64 0, i32 3
  %stack.0 = load %struct.sequence_stack** %next, align 8
  %cond = icmp eq %struct.sequence_stack* %stack.0, null
  br i1 %cond, label %if.then48, label %for.body

for.body:                                         ; preds = %if.else40, %for.cond
  %stack.0154 = phi %struct.sequence_stack* [ %stack.0, %for.cond ], [ %stack.0152, %if.else40 ]
  %first = getelementptr inbounds %struct.sequence_stack* %stack.0154, i64 0, i32 0
  %16 = load %struct.rtx_def** %first, align 8, !tbaa !59
  %cmp43 = icmp eq %struct.rtx_def* %16, %before
  br i1 %cmp43, label %if.then44, label %for.cond

if.then44:                                        ; preds = %for.body
  store %struct.rtx_def* %insn, %struct.rtx_def** %first, align 8, !tbaa !59
  br label %if.end51

if.then48:                                        ; preds = %for.cond, %if.else40
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3457, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.add_insn_before, i64 0, i64 0)) #8
  unreachable

if.end51:                                         ; preds = %if.then44, %if.then37, %if.then9, %land.lhs.true15, %if.then22
  %17 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !7
  %tobool52 = icmp eq %struct.varray_head_tag* %17, null
  br i1 %tobool52, label %if.end86, label %land.lhs.true53

land.lhs.true53:                                  ; preds = %if.end51
  %arrayidx55 = getelementptr inbounds %struct.rtx_def* %before, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx55 to i32*
  %18 = load i32* %rtint, align 4, !tbaa !1
  %conv = zext i32 %18 to i64
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %17, i64 0, i32 0
  %19 = load i64* %num_elements, align 8, !tbaa !55
  %cmp56 = icmp ult i64 %conv, %19
  br i1 %cmp56, label %land.lhs.true58, label %if.end86

land.lhs.true58:                                  ; preds = %land.lhs.true53
  %idxprom62 = sext i32 %18 to i64
  %data = getelementptr inbounds %struct.varray_head_tag* %17, i64 0, i32 4
  %bb63 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx64 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb63, i64 0, i64 %idxprom62
  %20 = load %struct.basic_block_def** %arrayidx64, align 8, !tbaa !7
  %tobool65 = icmp eq %struct.basic_block_def* %20, null
  br i1 %tobool65, label %if.end86, label %if.then66

if.then66:                                        ; preds = %land.lhs.true58
  tail call void @set_block_for_insn(%struct.rtx_def* %insn, %struct.basic_block_def* %20) #4
  %head = getelementptr inbounds %struct.basic_block_def* %20, i64 0, i32 0
  %21 = load %struct.rtx_def** %head, align 8, !tbaa !60
  %cmp67 = icmp eq %struct.rtx_def* %21, %insn
  br i1 %cmp67, label %land.lhs.true69, label %if.end86

land.lhs.true69:                                  ; preds = %if.then66
  %22 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load70 = load i32* %22, align 8
  %bf.clear71 = and i32 %bf.load70, 65535
  switch i32 %bf.clear71, label %if.then84 [
    i32 35, label %if.end86
    i32 37, label %lor.lhs.false
  ]

lor.lhs.false:                                    ; preds = %land.lhs.true69
  %arrayidx80 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint81 = bitcast %union.rtunion_def* %arrayidx80 to i32*
  %23 = load i32* %rtint81, align 4, !tbaa !1
  %cmp82 = icmp eq i32 %23, -80
  br i1 %cmp82, label %if.end86, label %if.then84

if.then84:                                        ; preds = %land.lhs.true69, %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3472, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.add_insn_before, i64 0, i64 0)) #8
  unreachable

if.end86:                                         ; preds = %land.lhs.true69, %lor.lhs.false, %land.lhs.true58, %if.end51, %if.then66, %land.lhs.true53
  %24 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %insn.c = ptrtoint %struct.rtx_def* %insn to i64
  store i64 %insn.c, i64* %24, align 8, !tbaa !7
  %25 = getelementptr inbounds %struct.rtx_def* %before, i64 0, i32 0
  %bf.load90 = load i32* %25, align 8
  %bf.clear91 = and i32 %bf.load90, 65535
  %cmp92 = icmp eq i32 %bf.clear91, 32
  br i1 %cmp92, label %land.lhs.true94, label %if.end114

land.lhs.true94:                                  ; preds = %if.end86
  %arrayidx96 = getelementptr inbounds %struct.rtx_def* %before, i64 0, i32 1, i64 3
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %26 = load %struct.rtx_def** %rtx97, align 8, !tbaa !7
  %27 = getelementptr inbounds %struct.rtx_def* %26, i64 0, i32 0
  %bf.load98 = load i32* %27, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp eq i32 %bf.clear99, 24
  br i1 %cmp100, label %if.then102, label %if.end114

if.then102:                                       ; preds = %land.lhs.true94
  %arrayidx107 = getelementptr inbounds %struct.rtx_def* %26, i64 0, i32 1, i64 0
  %rtvec108 = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtvec_def**
  %28 = load %struct.rtvec_def** %rtvec108, align 8, !tbaa !7
  %arrayidx110 = getelementptr inbounds %struct.rtvec_def* %28, i64 0, i32 1, i64 0
  %29 = load %struct.rtx_def** %arrayidx110, align 8, !tbaa !7
  %30 = getelementptr inbounds %struct.rtx_def* %29, i64 0, i32 1, i64 1, i32 0
  store i64 %insn.c, i64* %30, align 8, !tbaa !7
  br label %if.end114

if.end114:                                        ; preds = %if.then102, %land.lhs.true94, %if.end86
  ret void
}

; Function Attrs: nounwind uwtable
define void @remove_insn(%struct.rtx_def* readonly %insn) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 1
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx3, align 8, !tbaa !7
  %tobool = icmp eq %struct.rtx_def* %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 2, i32 0
  %.c169 = ptrtoint %struct.rtx_def* %0 to i64
  store i64 %.c169, i64* %2, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 32
  br i1 %cmp, label %land.lhs.true, label %if.end42

land.lhs.true:                                    ; preds = %if.then
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 3
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx9, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load10 = load i32* %5, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 24
  br i1 %cmp12, label %if.then13, label %if.end42

if.then13:                                        ; preds = %land.lhs.true
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 0
  %7 = load i32* %num_elem, align 4, !tbaa !50
  %sub = add nsw i32 %7, -1
  %idxprom = sext i32 %sub to i64
  %arrayidx22 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 1, i64 %idxprom
  %8 = load %struct.rtx_def** %arrayidx22, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 2, i32 0
  store i64 %.c169, i64* %9, align 8, !tbaa !7
  br label %if.end42

if.else:                                          ; preds = %entry
  %10 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %10, i64 0, i32 3
  %11 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 2
  %12 = load %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %cmp26 = icmp eq %struct.rtx_def* %12, %insn
  br i1 %cmp26, label %if.then27, label %if.else30

if.then27:                                        ; preds = %if.else
  store %struct.rtx_def* %0, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  br label %if.end42

if.else30:                                        ; preds = %if.else
  %sequence_stack = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 5
  %stack.0178 = load %struct.sequence_stack** %sequence_stack, align 8
  %cond179 = icmp eq %struct.sequence_stack* %stack.0178, null
  br i1 %cond179, label %if.then39, label %for.body

for.cond:                                         ; preds = %for.body
  %next37 = getelementptr inbounds %struct.sequence_stack* %stack.0180, i64 0, i32 3
  %stack.0 = load %struct.sequence_stack** %next37, align 8
  %cond = icmp eq %struct.sequence_stack* %stack.0, null
  br i1 %cond, label %if.then39, label %for.body

for.body:                                         ; preds = %if.else30, %for.cond
  %stack.0180 = phi %struct.sequence_stack* [ %stack.0, %for.cond ], [ %stack.0178, %if.else30 ]
  %first = getelementptr inbounds %struct.sequence_stack* %stack.0180, i64 0, i32 0
  %13 = load %struct.rtx_def** %first, align 8, !tbaa !59
  %cmp33 = icmp eq %struct.rtx_def* %13, %insn
  br i1 %cmp33, label %if.then34, label %for.cond

if.then34:                                        ; preds = %for.body
  store %struct.rtx_def* %0, %struct.rtx_def** %first, align 8, !tbaa !59
  br label %if.end42

if.then39:                                        ; preds = %for.cond, %if.else30
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3513, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.remove_insn, i64 0, i64 0)) #8
  unreachable

if.end42:                                         ; preds = %if.then34, %if.then27, %if.then, %land.lhs.true, %if.then13
  %tobool43 = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool43, label %if.else71, label %if.then44

if.then44:                                        ; preds = %if.end42
  %14 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1, i32 0
  %.c = ptrtoint %struct.rtx_def* %1 to i64
  store i64 %.c, i64* %14, align 8, !tbaa !7
  %15 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load48 = load i32* %15, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp eq i32 %bf.clear49, 32
  br i1 %cmp50, label %land.lhs.true51, label %if.end95

land.lhs.true51:                                  ; preds = %if.then44
  %arrayidx53 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 3
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %16 = load %struct.rtx_def** %rtx54, align 8, !tbaa !7
  %17 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 0
  %bf.load55 = load i32* %17, align 8
  %bf.clear56 = and i32 %bf.load55, 65535
  %cmp57 = icmp eq i32 %bf.clear56, 24
  br i1 %cmp57, label %if.then58, label %if.end95

if.then58:                                        ; preds = %land.lhs.true51
  %arrayidx63 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 0
  %rtvec64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtvec_def**
  %18 = load %struct.rtvec_def** %rtvec64, align 8, !tbaa !7
  %arrayidx66 = getelementptr inbounds %struct.rtvec_def* %18, i64 0, i32 1, i64 0
  %19 = load %struct.rtx_def** %arrayidx66, align 8, !tbaa !7
  %20 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 1, i32 0
  store i64 %.c, i64* %20, align 8, !tbaa !7
  br label %if.end95

if.else71:                                        ; preds = %if.end42
  %21 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit72 = getelementptr inbounds %struct.function* %21, i64 0, i32 3
  %22 = load %struct.emit_status** %emit72, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %22, i64 0, i32 3
  %23 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %cmp73 = icmp eq %struct.rtx_def* %23, %insn
  br i1 %cmp73, label %if.then74, label %if.else77

if.then74:                                        ; preds = %if.else71
  store %struct.rtx_def* %1, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  br label %if.end95

if.else77:                                        ; preds = %if.else71
  %sequence_stack80 = getelementptr inbounds %struct.emit_status* %22, i64 0, i32 5
  %stack78.0175 = load %struct.sequence_stack** %sequence_stack80, align 8
  %cond172176 = icmp eq %struct.sequence_stack* %stack78.0175, null
  br i1 %cond172176, label %if.then92, label %for.body83

for.cond81:                                       ; preds = %for.body83
  %next89 = getelementptr inbounds %struct.sequence_stack* %stack78.0177, i64 0, i32 3
  %stack78.0 = load %struct.sequence_stack** %next89, align 8
  %cond172 = icmp eq %struct.sequence_stack* %stack78.0, null
  br i1 %cond172, label %if.then92, label %for.body83

for.body83:                                       ; preds = %if.else77, %for.cond81
  %stack78.0177 = phi %struct.sequence_stack* [ %stack78.0, %for.cond81 ], [ %stack78.0175, %if.else77 ]
  %last = getelementptr inbounds %struct.sequence_stack* %stack78.0177, i64 0, i32 1
  %24 = load %struct.rtx_def** %last, align 8, !tbaa !53
  %cmp84 = icmp eq %struct.rtx_def* %24, %insn
  br i1 %cmp84, label %if.then85, label %for.cond81

if.then85:                                        ; preds = %for.body83
  store %struct.rtx_def* %1, %struct.rtx_def** %last, align 8, !tbaa !53
  br label %if.end95

if.then92:                                        ; preds = %for.cond81, %if.else77
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3536, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.remove_insn, i64 0, i64 0)) #8
  unreachable

if.end95:                                         ; preds = %if.then85, %if.then74, %if.then44, %land.lhs.true51, %if.then58
  %25 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !7
  %tobool96 = icmp eq %struct.varray_head_tag* %25, null
  br i1 %tobool96, label %if.end127, label %land.lhs.true97

land.lhs.true97:                                  ; preds = %if.end95
  %arrayidx99 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx99 to i32*
  %26 = load i32* %rtint, align 4, !tbaa !1
  %conv = zext i32 %26 to i64
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %25, i64 0, i32 0
  %27 = load i64* %num_elements, align 8, !tbaa !55
  %cmp100 = icmp ult i64 %conv, %27
  br i1 %cmp100, label %land.lhs.true102, label %if.end127

land.lhs.true102:                                 ; preds = %land.lhs.true97
  %idxprom106 = sext i32 %26 to i64
  %data = getelementptr inbounds %struct.varray_head_tag* %25, i64 0, i32 4
  %bb107 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx108 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb107, i64 0, i64 %idxprom106
  %28 = load %struct.basic_block_def** %arrayidx108, align 8, !tbaa !7
  %tobool109 = icmp eq %struct.basic_block_def* %28, null
  br i1 %tobool109, label %if.end127, label %if.then110

if.then110:                                       ; preds = %land.lhs.true102
  %head = getelementptr inbounds %struct.basic_block_def* %28, i64 0, i32 0
  %29 = load %struct.rtx_def** %head, align 8, !tbaa !60
  %cmp111 = icmp eq %struct.rtx_def* %29, %insn
  br i1 %cmp111, label %if.then113, label %if.end121

if.then113:                                       ; preds = %if.then110
  %30 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load114 = load i32* %30, align 8
  %bf.clear115 = and i32 %bf.load114, 65535
  %cmp116 = icmp eq i32 %bf.clear115, 37
  br i1 %cmp116, label %if.then118, label %if.end119

if.then118:                                       ; preds = %if.then113
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3547, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.remove_insn, i64 0, i64 0)) #8
  unreachable

if.end119:                                        ; preds = %if.then113
  store %struct.rtx_def* %0, %struct.rtx_def** %head, align 8, !tbaa !60
  br label %if.end121

if.end121:                                        ; preds = %if.end119, %if.then110
  %end = getelementptr inbounds %struct.basic_block_def* %28, i64 0, i32 1
  %31 = load %struct.rtx_def** %end, align 8, !tbaa !57
  %cmp122 = icmp eq %struct.rtx_def* %31, %insn
  br i1 %cmp122, label %if.then124, label %if.end127

if.then124:                                       ; preds = %if.end121
  store %struct.rtx_def* %1, %struct.rtx_def** %end, align 8, !tbaa !57
  br label %if.end127

if.end127:                                        ; preds = %land.lhs.true102, %if.end95, %if.end121, %if.then124, %land.lhs.true97
  ret void
}

; Function Attrs: nounwind uwtable
define void @delete_insns_since(%struct.rtx_def* %from) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %from, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = getelementptr inbounds %struct.rtx_def* %from, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %2, align 8, !tbaa !7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1 = getelementptr inbounds %struct.function* %3, i64 0, i32 3
  %4 = load %struct.emit_status** %emit1, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %4, i64 0, i32 3
  store %struct.rtx_def* %from, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  ret void
}

; Function Attrs: nounwind uwtable
define void @reorder_insns_nobb(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %after) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %from, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %tobool = icmp eq %struct.rtx_def* %0, null
  %arrayidx11.pre = getelementptr inbounds %struct.rtx_def* %to, i64 0, i32 1, i64 2
  %rtx12.pre = bitcast %union.rtunion_def* %arrayidx11.pre to %struct.rtx_def**
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def** %rtx12.pre, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 2, i32 0
  %.c91 = ptrtoint %struct.rtx_def* %1 to i64
  store i64 %.c91, i64* %2, align 8, !tbaa !7
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %3 = load %struct.rtx_def** %rtx12.pre, align 8, !tbaa !7
  %tobool13 = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool13, label %if.end24, label %if.then14

if.then14:                                        ; preds = %if.end
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 1, i32 0
  %.c90 = ptrtoint %struct.rtx_def* %4 to i64
  store i64 %.c90, i64* %5, align 8, !tbaa !7
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then14
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %6, i64 0, i32 3
  %7 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 3
  %8 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %cmp = icmp eq %struct.rtx_def* %8, %to
  br i1 %cmp, label %if.then25, label %if.end31

if.then25:                                        ; preds = %if.end24
  %9 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  store %struct.rtx_def* %9, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %.pre = load %struct.function** @cfun, align 8, !tbaa !7
  %emit32.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 3
  %.pre92 = load %struct.emit_status** %emit32.phi.trans.insert, align 8, !tbaa !10
  br label %if.end31

if.end31:                                         ; preds = %if.then25, %if.end24
  %10 = phi %struct.emit_status* [ %.pre92, %if.then25 ], [ %7, %if.end24 ]
  %x_first_insn = getelementptr inbounds %struct.emit_status* %10, i64 0, i32 2
  %11 = load %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %cmp33 = icmp eq %struct.rtx_def* %11, %from
  br i1 %cmp33, label %if.then34, label %if.end40

if.then34:                                        ; preds = %if.end31
  %12 = load %struct.rtx_def** %rtx12.pre, align 8, !tbaa !7
  store %struct.rtx_def* %12, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  br label %if.end40

if.end40:                                         ; preds = %if.then34, %if.end31
  %arrayidx42 = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 1, i64 2
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx43, align 8, !tbaa !7
  %tobool44 = icmp eq %struct.rtx_def* %13, null
  br i1 %tobool44, label %if.end52, label %if.then45

if.then45:                                        ; preds = %if.end40
  %14 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 1, i32 0
  %to.c = ptrtoint %struct.rtx_def* %to to i64
  store i64 %to.c, i64* %14, align 8, !tbaa !7
  %.pre93 = load %struct.rtx_def** %rtx43, align 8, !tbaa !7
  %phitmp = ptrtoint %struct.rtx_def* %.pre93 to i64
  br label %if.end52

if.end52:                                         ; preds = %if.end40, %if.then45
  %15 = phi i64 [ 0, %if.end40 ], [ %phitmp, %if.then45 ]
  %16 = getelementptr inbounds %union.rtunion_def* %arrayidx11.pre, i64 0, i32 0
  store i64 %15, i64* %16, align 8, !tbaa !7
  %17 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %after.c = ptrtoint %struct.rtx_def* %after to i64
  store i64 %after.c, i64* %17, align 8, !tbaa !7
  %18 = getelementptr inbounds %union.rtunion_def* %arrayidx42, i64 0, i32 0
  %from.c = ptrtoint %struct.rtx_def* %from to i64
  store i64 %from.c, i64* %18, align 8, !tbaa !7
  %19 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit65 = getelementptr inbounds %struct.function* %19, i64 0, i32 3
  %20 = load %struct.emit_status** %emit65, align 8, !tbaa !10
  %x_last_insn66 = getelementptr inbounds %struct.emit_status* %20, i64 0, i32 3
  %21 = load %struct.rtx_def** %x_last_insn66, align 8, !tbaa !46
  %cmp67 = icmp eq %struct.rtx_def* %21, %after
  br i1 %cmp67, label %if.then68, label %if.end71

if.then68:                                        ; preds = %if.end52
  store %struct.rtx_def* %to, %struct.rtx_def** %x_last_insn66, align 8, !tbaa !46
  br label %if.end71

if.end71:                                         ; preds = %if.then68, %if.end52
  ret void
}

; Function Attrs: nounwind uwtable
define void @reorder_insns(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %after) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %from, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %tobool.i = icmp eq %struct.rtx_def* %0, null
  %arrayidx11.pre.i = getelementptr inbounds %struct.rtx_def* %to, i64 0, i32 1, i64 2
  %rtx12.pre.i = bitcast %union.rtunion_def* %arrayidx11.pre.i to %struct.rtx_def**
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %1 = load %struct.rtx_def** %rtx12.pre.i, align 8, !tbaa !7
  %2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 2, i32 0
  %.c91.i = ptrtoint %struct.rtx_def* %1 to i64
  store i64 %.c91.i, i64* %2, align 8, !tbaa !7
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %3 = load %struct.rtx_def** %rtx12.pre.i, align 8, !tbaa !7
  %tobool13.i = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool13.i, label %if.end24.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end.i
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 1, i32 0
  %.c90.i = ptrtoint %struct.rtx_def* %4 to i64
  store i64 %.c90.i, i64* %5, align 8, !tbaa !7
  br label %if.end24.i

if.end24.i:                                       ; preds = %if.then14.i, %if.end.i
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %6, i64 0, i32 3
  %7 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_last_insn.i = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 3
  %8 = load %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %cmp.i = icmp eq %struct.rtx_def* %8, %to
  br i1 %cmp.i, label %if.then25.i, label %if.end31.i

if.then25.i:                                      ; preds = %if.end24.i
  %9 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  store %struct.rtx_def* %9, %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit32.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 3
  %.pre92.i = load %struct.emit_status** %emit32.phi.trans.insert.i, align 8, !tbaa !10
  br label %if.end31.i

if.end31.i:                                       ; preds = %if.then25.i, %if.end24.i
  %10 = phi %struct.emit_status* [ %.pre92.i, %if.then25.i ], [ %7, %if.end24.i ]
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %10, i64 0, i32 2
  %11 = load %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %cmp33.i = icmp eq %struct.rtx_def* %11, %from
  br i1 %cmp33.i, label %if.then34.i, label %if.end40.i

if.then34.i:                                      ; preds = %if.end31.i
  %12 = load %struct.rtx_def** %rtx12.pre.i, align 8, !tbaa !7
  store %struct.rtx_def* %12, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  br label %if.end40.i

if.end40.i:                                       ; preds = %if.then34.i, %if.end31.i
  %arrayidx42.i = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 1, i64 2
  %rtx43.i = bitcast %union.rtunion_def* %arrayidx42.i to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx43.i, align 8, !tbaa !7
  %tobool44.i = icmp eq %struct.rtx_def* %13, null
  br i1 %tobool44.i, label %if.end52.i, label %if.then45.i

if.then45.i:                                      ; preds = %if.end40.i
  %14 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 1, i32 0
  %to.c.i = ptrtoint %struct.rtx_def* %to to i64
  store i64 %to.c.i, i64* %14, align 8, !tbaa !7
  %.pre93.i = load %struct.rtx_def** %rtx43.i, align 8, !tbaa !7
  %phitmp.i = ptrtoint %struct.rtx_def* %.pre93.i to i64
  br label %if.end52.i

if.end52.i:                                       ; preds = %if.then45.i, %if.end40.i
  %15 = phi i64 [ 0, %if.end40.i ], [ %phitmp.i, %if.then45.i ]
  %16 = getelementptr inbounds %union.rtunion_def* %arrayidx11.pre.i, i64 0, i32 0
  store i64 %15, i64* %16, align 8, !tbaa !7
  %17 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %after.c.i = ptrtoint %struct.rtx_def* %after to i64
  store i64 %after.c.i, i64* %17, align 8, !tbaa !7
  %18 = getelementptr inbounds %union.rtunion_def* %arrayidx42.i, i64 0, i32 0
  %from.c.i = ptrtoint %struct.rtx_def* %from to i64
  store i64 %from.c.i, i64* %18, align 8, !tbaa !7
  %19 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit65.i = getelementptr inbounds %struct.function* %19, i64 0, i32 3
  %20 = load %struct.emit_status** %emit65.i, align 8, !tbaa !10
  %x_last_insn66.i = getelementptr inbounds %struct.emit_status* %20, i64 0, i32 3
  %21 = load %struct.rtx_def** %x_last_insn66.i, align 8, !tbaa !46
  %cmp67.i = icmp eq %struct.rtx_def* %21, %after
  br i1 %cmp67.i, label %if.then68.i, label %reorder_insns_nobb.exit

if.then68.i:                                      ; preds = %if.end52.i
  store %struct.rtx_def* %to, %struct.rtx_def** %x_last_insn66.i, align 8, !tbaa !46
  br label %reorder_insns_nobb.exit

reorder_insns_nobb.exit:                          ; preds = %if.end52.i, %if.then68.i
  %22 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !7
  %tobool = icmp eq %struct.varray_head_tag* %22, null
  br i1 %tobool, label %if.end49, label %land.lhs.true

land.lhs.true:                                    ; preds = %reorder_insns_nobb.exit
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %23 = load i32* %rtint, align 4, !tbaa !1
  %conv = zext i32 %23 to i64
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %22, i64 0, i32 0
  %24 = load i64* %num_elements, align 8, !tbaa !55
  %cmp = icmp ult i64 %conv, %24
  br i1 %cmp, label %land.lhs.true4, label %if.end49

land.lhs.true4:                                   ; preds = %land.lhs.true
  %idxprom = sext i32 %23 to i64
  %data = getelementptr inbounds %struct.varray_head_tag* %22, i64 0, i32 4
  %bb8 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx9 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb8, i64 0, i64 %idxprom
  %25 = load %struct.basic_block_def** %arrayidx9, align 8, !tbaa !7
  %tobool10 = icmp eq %struct.basic_block_def* %25, null
  br i1 %tobool10, label %if.end49, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %land.lhs.true4
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %from, i64 0, i32 1, i64 0
  %rtint15 = bitcast %union.rtunion_def* %arrayidx14 to i32*
  %26 = load i32* %rtint15, align 4, !tbaa !1
  %conv16 = zext i32 %26 to i64
  %cmp18 = icmp ult i64 %conv16, %24
  br i1 %cmp18, label %land.lhs.true20, label %if.end34

land.lhs.true20:                                  ; preds = %land.lhs.true12
  %idxprom24 = sext i32 %26 to i64
  %arrayidx27 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb8, i64 0, i64 %idxprom24
  %27 = load %struct.basic_block_def** %arrayidx27, align 8, !tbaa !7
  %tobool28 = icmp eq %struct.basic_block_def* %27, null
  br i1 %tobool28, label %if.end34, label %if.then29

if.then29:                                        ; preds = %land.lhs.true20
  %end = getelementptr inbounds %struct.basic_block_def* %27, i64 0, i32 1
  %28 = load %struct.rtx_def** %end, align 8, !tbaa !57
  %cmp30 = icmp eq %struct.rtx_def* %28, %to
  br i1 %cmp30, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.then29
  store %struct.rtx_def* %0, %struct.rtx_def** %end, align 8, !tbaa !57
  br label %if.end34

if.end34:                                         ; preds = %land.lhs.true20, %if.then29, %if.then32, %land.lhs.true12
  %end35 = getelementptr inbounds %struct.basic_block_def* %25, i64 0, i32 1
  %29 = load %struct.rtx_def** %end35, align 8, !tbaa !57
  %cmp36 = icmp eq %struct.rtx_def* %29, %after
  br i1 %cmp36, label %if.then38, label %for.cond.preheader

if.then38:                                        ; preds = %if.end34
  store %struct.rtx_def* %to, %struct.rtx_def** %end35, align 8, !tbaa !57
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then38, %if.end34
  %30 = load %struct.rtx_def** %rtx12.pre.i, align 8, !tbaa !7
  %cmp4465 = icmp eq %struct.rtx_def* %30, %from
  br i1 %cmp4465, label %if.end49, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %x.066 = phi %struct.rtx_def* [ %31, %for.body ], [ %from, %for.cond.preheader ]
  tail call void @set_block_for_insn(%struct.rtx_def* %x.066, %struct.basic_block_def* %25) #4
  %arrayidx47 = getelementptr inbounds %struct.rtx_def* %x.066, i64 0, i32 1, i64 2
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %31 = load %struct.rtx_def** %rtx48, align 8, !tbaa !7
  %32 = load %struct.rtx_def** %rtx12.pre.i, align 8, !tbaa !7
  %cmp44 = icmp eq %struct.rtx_def* %31, %32
  br i1 %cmp44, label %if.end49, label %for.body

if.end49:                                         ; preds = %for.body, %for.cond.preheader, %reorder_insns_nobb.exit, %land.lhs.true4, %land.lhs.true
  ret void
}

; Function Attrs: nounwind uwtable
define void @reorder_insns_with_line_notes(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %after) #0 {
entry:
  %0 = load i32* @no_line_numbers, align 4, !tbaa !1
  %tobool.i = icmp ne i32 %0, 0
  %tobool111.i = icmp eq %struct.rtx_def* %from, null
  %or.cond.i = or i1 %tobool.i, %tobool111.i
  br i1 %or.cond.i, label %find_line_note.exit, label %for.body.i

for.body.i:                                       ; preds = %entry, %for.inc.i
  %insn.addr.012.i = phi %struct.rtx_def* [ %3, %for.inc.i ], [ %from, %entry ]
  %1 = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i, i64 0, i32 0
  %bf.load.i = load i32* %1, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 37
  br i1 %cmp.i, label %land.lhs.true.i, label %for.inc.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i, i64 0, i32 1, i64 4
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %2 = load i32* %rtint.i, align 4, !tbaa !1
  %cmp2.i = icmp sgt i32 %2, -1
  br i1 %cmp2.i, label %find_line_note.exit, label %for.inc.i

for.inc.i:                                        ; preds = %land.lhs.true.i, %for.body.i
  %arrayidx6.i = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i, i64 0, i32 1, i64 1
  %rtx.i = bitcast %union.rtunion_def* %arrayidx6.i to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !7
  %tobool1.i = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool1.i, label %find_line_note.exit, label %for.body.i

find_line_note.exit:                              ; preds = %land.lhs.true.i, %for.inc.i, %entry
  %retval.0.i = phi %struct.rtx_def* [ null, %entry ], [ %insn.addr.012.i, %land.lhs.true.i ], [ null, %for.inc.i ]
  %tobool111.i33 = icmp eq %struct.rtx_def* %after, null
  %or.cond.i34 = or i1 %tobool.i, %tobool111.i33
  br i1 %or.cond.i34, label %find_line_note.exit49, label %for.body.i39

for.body.i39:                                     ; preds = %find_line_note.exit, %for.inc.i47
  %insn.addr.012.i35 = phi %struct.rtx_def* [ %6, %for.inc.i47 ], [ %after, %find_line_note.exit ]
  %4 = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i35, i64 0, i32 0
  %bf.load.i36 = load i32* %4, align 8
  %bf.clear.i37 = and i32 %bf.load.i36, 65535
  %cmp.i38 = icmp eq i32 %bf.clear.i37, 37
  br i1 %cmp.i38, label %land.lhs.true.i43, label %for.inc.i47

land.lhs.true.i43:                                ; preds = %for.body.i39
  %arrayidx.i40 = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i35, i64 0, i32 1, i64 4
  %rtint.i41 = bitcast %union.rtunion_def* %arrayidx.i40 to i32*
  %5 = load i32* %rtint.i41, align 4, !tbaa !1
  %cmp2.i42 = icmp sgt i32 %5, -1
  br i1 %cmp2.i42, label %find_line_note.exit49, label %for.inc.i47

for.inc.i47:                                      ; preds = %land.lhs.true.i43, %for.body.i39
  %arrayidx6.i44 = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i35, i64 0, i32 1, i64 1
  %rtx.i45 = bitcast %union.rtunion_def* %arrayidx6.i44 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx.i45, align 8, !tbaa !7
  %tobool1.i46 = icmp eq %struct.rtx_def* %6, null
  br i1 %tobool1.i46, label %find_line_note.exit49, label %for.body.i39

find_line_note.exit49:                            ; preds = %land.lhs.true.i43, %for.inc.i47, %find_line_note.exit
  %retval.0.i48 = phi %struct.rtx_def* [ null, %find_line_note.exit ], [ %insn.addr.012.i35, %land.lhs.true.i43 ], [ null, %for.inc.i47 ]
  tail call void @reorder_insns(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %after)
  %cmp = icmp eq %struct.rtx_def* %retval.0.i, %retval.0.i48
  br i1 %cmp, label %if.end16, label %if.end

if.end:                                           ; preds = %find_line_note.exit49
  %tobool = icmp eq %struct.rtx_def* %retval.0.i, null
  br i1 %tobool, label %if.end6, label %if.then2

if.then2:                                         ; preds = %if.end
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %retval.0.i, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %7 = load i32* %rtint, align 4, !tbaa !1
  %8 = load i32* @no_line_numbers, align 4, !tbaa !1
  %tobool.i50 = icmp ne i32 %8, 0
  %cmp.i51 = icmp sgt i32 %7, 0
  %or.cond.i52 = and i1 %tobool.i50, %cmp.i51
  br i1 %or.cond.i52, label %if.then.i56, label %if.end.i66

if.then.i56:                                      ; preds = %if.then2
  %9 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i53 = getelementptr inbounds %struct.function* %9, i64 0, i32 3
  %10 = load %struct.emit_status** %emit.i53, align 8, !tbaa !10
  %x_cur_insn_uid.i54 = getelementptr inbounds %struct.emit_status* %10, i64 0, i32 6
  %11 = load i32* %x_cur_insn_uid.i54, align 4, !tbaa !47
  %inc.i55 = add nsw i32 %11, 1
  store i32 %inc.i55, i32* %x_cur_insn_uid.i54, align 4, !tbaa !47
  br label %if.end6

if.end.i66:                                       ; preds = %if.then2
  %arrayidx = getelementptr inbounds %struct.rtx_def* %retval.0.i, i64 0, i32 1, i64 3
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  %12 = load i8** %rtstr, align 8, !tbaa !7
  %call.i57 = tail call %struct.rtx_def* @rtx_alloc(i32 37) #4
  %13 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1.i58 = getelementptr inbounds %struct.function* %13, i64 0, i32 3
  %14 = load %struct.emit_status** %emit1.i58, align 8, !tbaa !10
  %x_cur_insn_uid2.i59 = getelementptr inbounds %struct.emit_status* %14, i64 0, i32 6
  %15 = load i32* %x_cur_insn_uid2.i59, align 4, !tbaa !47
  %inc3.i60 = add nsw i32 %15, 1
  store i32 %inc3.i60, i32* %x_cur_insn_uid2.i59, align 4, !tbaa !47
  %fld.i61 = getelementptr inbounds %struct.rtx_def* %call.i57, i64 0, i32 1
  %rtint.i62 = bitcast [1 x %union.rtunion_def]* %fld.i61 to i32*
  store i32 %15, i32* %rtint.i62, align 4, !tbaa !1
  %16 = getelementptr inbounds %struct.rtx_def* %call.i57, i64 0, i32 1, i64 3, i32 0
  %file.c.i63 = ptrtoint i8* %12 to i64
  store i64 %file.c.i63, i64* %16, align 8, !tbaa !7
  %arrayidx7.i64 = getelementptr inbounds %struct.rtx_def* %call.i57, i64 0, i32 1, i64 4
  %rtint8.i65 = bitcast %union.rtunion_def* %arrayidx7.i64 to i32*
  store i32 %7, i32* %rtint8.i65, align 4, !tbaa !1
  tail call void @add_insn_after(%struct.rtx_def* %call.i57, %struct.rtx_def* %after) #4
  br label %if.end6

if.end6:                                          ; preds = %if.end.i66, %if.then.i56, %if.end
  %tobool7 = icmp eq %struct.rtx_def* %retval.0.i48, null
  br i1 %tobool7, label %if.end16, label %if.then8

if.then8:                                         ; preds = %if.end6
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %retval.0.i48, i64 0, i32 1, i64 4
  %rtint14 = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %17 = load i32* %rtint14, align 4, !tbaa !1
  %18 = load i32* @no_line_numbers, align 4, !tbaa !1
  %tobool.i27 = icmp ne i32 %18, 0
  %cmp.i28 = icmp sgt i32 %17, 0
  %or.cond.i29 = and i1 %tobool.i27, %cmp.i28
  br i1 %or.cond.i29, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then8
  %19 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %19, i64 0, i32 3
  %20 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %20, i64 0, i32 6
  %21 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %21, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  br label %if.end16

if.end.i:                                         ; preds = %if.then8
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %retval.0.i48, i64 0, i32 1, i64 3
  %rtstr11 = bitcast %union.rtunion_def* %arrayidx10 to i8**
  %22 = load i8** %rtstr11, align 8, !tbaa !7
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 37) #4
  %23 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1.i = getelementptr inbounds %struct.function* %23, i64 0, i32 3
  %24 = load %struct.emit_status** %emit1.i, align 8, !tbaa !10
  %x_cur_insn_uid2.i = getelementptr inbounds %struct.emit_status* %24, i64 0, i32 6
  %25 = load i32* %x_cur_insn_uid2.i, align 4, !tbaa !47
  %inc3.i = add nsw i32 %25, 1
  store i32 %inc3.i, i32* %x_cur_insn_uid2.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i30 = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %25, i32* %rtint.i30, align 4, !tbaa !1
  %26 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %file.c.i = ptrtoint i8* %22 to i64
  store i64 %file.c.i, i64* %26, align 8, !tbaa !7
  %arrayidx7.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint8.i = bitcast %union.rtunion_def* %arrayidx7.i to i32*
  store i32 %17, i32* %rtint8.i, align 4, !tbaa !1
  tail call void @add_insn_after(%struct.rtx_def* %call.i, %struct.rtx_def* %to) #4
  br label %if.end16

if.end16:                                         ; preds = %if.end.i, %if.then.i, %if.end6, %find_line_note.exit49
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_line_note_after(i8* %file, i32 %line, %struct.rtx_def* %after) #0 {
entry:
  %0 = load i32* @no_line_numbers, align 4, !tbaa !1
  %tobool = icmp ne i32 %0, 0
  %cmp = icmp sgt i32 %line, 0
  %or.cond = and i1 %tobool, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 6
  %3 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  br label %return

if.end:                                           ; preds = %entry
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 37) #4
  %4 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1 = getelementptr inbounds %struct.function* %4, i64 0, i32 3
  %5 = load %struct.emit_status** %emit1, align 8, !tbaa !10
  %x_cur_insn_uid2 = getelementptr inbounds %struct.emit_status* %5, i64 0, i32 6
  %6 = load i32* %x_cur_insn_uid2, align 4, !tbaa !47
  %inc3 = add nsw i32 %6, 1
  store i32 %inc3, i32* %x_cur_insn_uid2, align 4, !tbaa !47
  %fld = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  store i32 %6, i32* %rtint, align 4, !tbaa !1
  %7 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 3, i32 0
  %file.c = ptrtoint i8* %file to i64
  store i64 %file.c, i64* %7, align 8, !tbaa !7
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 4
  %rtint8 = bitcast %union.rtunion_def* %arrayidx7 to i32*
  store i32 %line, i32* %rtint8, align 4, !tbaa !1
  tail call void @add_insn_after(%struct.rtx_def* %call, %struct.rtx_def* %after)
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi %struct.rtx_def* [ null, %if.then ], [ %call, %if.end ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define void @remove_unnecessary_notes() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 2
  %2 = load %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %arrayidx = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %tobool155 = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool155, label %for.end102, label %for.body

for.body:                                         ; preds = %entry, %for.cond.backedge
  %block_stack.0158 = phi %struct.rtx_def* [ %block_stack.0.be, %for.cond.backedge ], [ null, %entry ]
  %insn.0157 = phi %struct.rtx_def* [ %4, %for.cond.backedge ], [ %3, %entry ]
  %eh_stack.0156 = phi %struct.rtx_def* [ %eh_stack.0.be, %for.cond.backedge ], [ null, %entry ]
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn.0157, i64 0, i32 1, i64 2
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx3, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.rtx_def* %insn.0157, i64 0, i32 0
  %bf.load = load i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %if.end, label %for.cond.backedge

if.end:                                           ; preds = %for.body
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %insn.0157, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx5 to i32*
  %6 = load i32* %rtint, align 4, !tbaa !1
  switch i32 %6, label %for.cond.backedge [
    i32 -99, label %sw.bb
    i32 -92, label %sw.bb
    i32 -86, label %sw.bb6
    i32 -85, label %sw.bb8
    i32 -98, label %sw.bb27
    i32 -97, label %sw.bb34
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  tail call void @remove_insn(%struct.rtx_def* %insn.0157)
  br label %for.cond.backedge

sw.bb6:                                           ; preds = %if.end
  %call7 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %insn.0157, %struct.rtx_def* %eh_stack.0156) #4
  br label %for.cond.backedge

sw.bb8:                                           ; preds = %if.end
  %cmp9 = icmp eq %struct.rtx_def* %eh_stack.0156, null
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %sw.bb8
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3716, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.remove_unnecessary_notes, i64 0, i64 0)) #8
  unreachable

if.end11:                                         ; preds = %sw.bb8
  %fld12 = getelementptr inbounds %struct.rtx_def* %eh_stack.0156, i64 0, i32 1
  %rtx14 = bitcast [1 x %union.rtunion_def]* %fld12 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx14, align 8, !tbaa !7
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 3
  %rtint17 = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %8 = load i32* %rtint17, align 4, !tbaa !1
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %insn.0157, i64 0, i32 1, i64 3
  %rtint20 = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %9 = load i32* %rtint20, align 4, !tbaa !1
  %cmp21 = icmp eq i32 %8, %9
  br i1 %cmp21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %if.end11
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3719, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.remove_unnecessary_notes, i64 0, i64 0)) #8
  unreachable

if.end23:                                         ; preds = %if.end11
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %eh_stack.0156, i64 0, i32 1, i64 1
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx26, align 8, !tbaa !7
  tail call void @free_INSN_LIST_node(%struct.rtx_def* %eh_stack.0156) #4
  br label %for.cond.backedge

sw.bb27:                                          ; preds = %if.end
  %arrayidx29 = getelementptr inbounds %struct.rtx_def* %insn.0157, i64 0, i32 1, i64 3
  %rttree = bitcast %union.rtunion_def* %arrayidx29 to %union.tree_node**
  %11 = load %union.tree_node** %rttree, align 8, !tbaa !7
  %cmp30 = icmp eq %union.tree_node* %11, null
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %sw.bb27
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3729, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.remove_unnecessary_notes, i64 0, i64 0)) #8
  unreachable

if.end32:                                         ; preds = %sw.bb27
  %call33 = tail call %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def* %insn.0157, %struct.rtx_def* %block_stack.0158) #4
  br label %for.cond.backedge

sw.bb34:                                          ; preds = %if.end
  %cmp35 = icmp eq %struct.rtx_def* %block_stack.0158, null
  br i1 %cmp35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %sw.bb34
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3736, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.remove_unnecessary_notes, i64 0, i64 0)) #8
  unreachable

if.end37:                                         ; preds = %sw.bb34
  %fld38 = getelementptr inbounds %struct.rtx_def* %block_stack.0158, i64 0, i32 1
  %rtx40 = bitcast [1 x %union.rtunion_def]* %fld38 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx40, align 8, !tbaa !7
  %arrayidx42 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 1, i64 3
  %rttree43 = bitcast %union.rtunion_def* %arrayidx42 to %union.tree_node**
  %13 = load %union.tree_node** %rttree43, align 8, !tbaa !7
  %arrayidx45 = getelementptr inbounds %struct.rtx_def* %insn.0157, i64 0, i32 1, i64 3
  %rttree46 = bitcast %union.rtunion_def* %arrayidx45 to %union.tree_node**
  %14 = load %union.tree_node** %rttree46, align 8, !tbaa !7
  %cmp47 = icmp eq %union.tree_node* %13, %14
  br i1 %cmp47, label %if.end49, label %if.then48

if.then48:                                        ; preds = %if.end37
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3739, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.remove_unnecessary_notes, i64 0, i64 0)) #8
  unreachable

if.end49:                                         ; preds = %if.end37
  %arrayidx51 = getelementptr inbounds %struct.rtx_def* %block_stack.0158, i64 0, i32 1, i64 1
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx52, align 8, !tbaa !7
  tail call void @free_INSN_LIST_node(%struct.rtx_def* %block_stack.0158) #4
  %tmp.0.in.in150 = getelementptr inbounds %struct.rtx_def* %insn.0157, i64 0, i32 1, i64 1
  %tmp.0.in151 = bitcast %union.rtunion_def* %tmp.0.in.in150 to %struct.rtx_def**
  %tmp.0152 = load %struct.rtx_def** %tmp.0.in151, align 8
  %tobool57153 = icmp eq %struct.rtx_def* %tmp.0152, null
  br i1 %tobool57153, label %for.cond.backedge, label %for.body58

for.body58:                                       ; preds = %if.end49, %for.cond56.backedge
  %tmp.0154 = phi %struct.rtx_def* [ %tmp.0, %for.cond56.backedge ], [ %tmp.0152, %if.end49 ]
  %16 = getelementptr inbounds %struct.rtx_def* %tmp.0154, i64 0, i32 0
  %bf.load59 = load i32* %16, align 8
  %bf.clear60 = and i32 %bf.load59, 65535
  %idxprom138 = zext i32 %bf.clear60 to i64
  %arrayidx61 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom138
  %17 = load i8* %arrayidx61, align 1, !tbaa !9
  %cmp62 = icmp eq i8 %17, 105
  br i1 %cmp62, label %for.cond.backedge, label %if.end65

if.end65:                                         ; preds = %for.body58
  %cmp68 = icmp eq i32 %bf.clear60, 37
  br i1 %cmp68, label %if.end71, label %for.cond56.backedge

if.end71:                                         ; preds = %if.end65
  %arrayidx73 = getelementptr inbounds %struct.rtx_def* %tmp.0154, i64 0, i32 1, i64 4
  %rtint74 = bitcast %union.rtunion_def* %arrayidx73 to i32*
  %18 = load i32* %rtint74, align 4, !tbaa !1
  switch i32 %18, label %for.cond56.backedge [
    i32 -98, label %if.then77
    i32 -97, label %for.cond.backedge
  ]

for.cond56.backedge:                              ; preds = %if.end71, %if.end65
  %tmp.0.in.in = getelementptr inbounds %struct.rtx_def* %tmp.0154, i64 0, i32 1, i64 1
  %tmp.0.in = bitcast %union.rtunion_def* %tmp.0.in.in to %struct.rtx_def**
  %tmp.0 = load %struct.rtx_def** %tmp.0.in, align 8
  %tobool57 = icmp eq %struct.rtx_def* %tmp.0, null
  br i1 %tobool57, label %for.cond.backedge, label %for.body58

if.then77:                                        ; preds = %if.end71
  %19 = load %union.tree_node** %rttree46, align 8, !tbaa !7
  %call81 = tail call i32 @is_body_block(%union.tree_node* %19) #4
  %tobool82 = icmp eq i32 %call81, 0
  br i1 %tobool82, label %land.lhs.true, label %for.cond.backedge

for.cond.backedge:                                ; preds = %if.end71, %for.cond56.backedge, %for.body58, %if.end49, %if.then77, %for.body, %sw.bb, %sw.bb6, %if.end23, %if.end32, %if.end, %land.lhs.true, %if.then88
  %eh_stack.0.be = phi %struct.rtx_def* [ %eh_stack.0156, %for.body ], [ %eh_stack.0156, %if.end ], [ %eh_stack.0156, %if.then77 ], [ %eh_stack.0156, %if.then88 ], [ %eh_stack.0156, %land.lhs.true ], [ %eh_stack.0156, %if.end32 ], [ %10, %if.end23 ], [ %call7, %sw.bb6 ], [ %eh_stack.0156, %sw.bb ], [ %eh_stack.0156, %if.end49 ], [ %eh_stack.0156, %for.body58 ], [ %eh_stack.0156, %for.cond56.backedge ], [ %eh_stack.0156, %if.end71 ]
  %block_stack.0.be = phi %struct.rtx_def* [ %block_stack.0158, %for.body ], [ %block_stack.0158, %if.end ], [ %15, %if.then77 ], [ %15, %if.then88 ], [ %15, %land.lhs.true ], [ %call33, %if.end32 ], [ %block_stack.0158, %if.end23 ], [ %block_stack.0158, %sw.bb6 ], [ %block_stack.0158, %sw.bb ], [ %15, %if.end49 ], [ %15, %for.body58 ], [ %15, %for.cond56.backedge ], [ %15, %if.end71 ]
  %tobool = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool, label %for.end102, label %for.body

land.lhs.true:                                    ; preds = %if.then77
  %20 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !7
  %ignore_block = getelementptr inbounds %struct.gcc_debug_hooks* %20, i64 0, i32 8
  %21 = load i1 (%union.tree_node*)** %ignore_block, align 8, !tbaa !61
  %22 = load %union.tree_node** %rttree46, align 8, !tbaa !7
  %call86 = tail call zeroext i1 %21(%union.tree_node* %22) #4
  br i1 %call86, label %if.then88, label %for.cond.backedge

if.then88:                                        ; preds = %land.lhs.true
  tail call void @remove_insn(%struct.rtx_def* %tmp.0154)
  tail call void @remove_insn(%struct.rtx_def* %insn.0157)
  br label %for.cond.backedge

for.end102:                                       ; preds = %for.cond.backedge, %entry
  %block_stack.0.lcssa = phi %struct.rtx_def* [ null, %entry ], [ %block_stack.0.be, %for.cond.backedge ]
  %eh_stack.0.lcssa = phi %struct.rtx_def* [ null, %entry ], [ %eh_stack.0.be, %for.cond.backedge ]
  %tobool103 = icmp ne %struct.rtx_def* %block_stack.0.lcssa, null
  %tobool104 = icmp ne %struct.rtx_def* %eh_stack.0.lcssa, null
  %or.cond = or i1 %tobool103, %tobool104
  br i1 %or.cond, label %if.then105, label %if.end106

if.then105:                                       ; preds = %for.end102
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 3789, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.remove_unnecessary_notes, i64 0, i64 0)) #8
  unreachable

if.end106:                                        ; preds = %for.end102
  ret void
}

declare %struct.rtx_def* @alloc_INSN_LIST(%struct.rtx_def*, %struct.rtx_def*) #1

declare void @free_INSN_LIST_node(%struct.rtx_def*) #1

declare i32 @is_body_block(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %pattern, %struct.rtx_def* %before) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %for.cond.preheader, label %if.else

for.cond.preheader:                               ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %1 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem15 = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 0
  %2 = load i32* %num_elem15, align 4, !tbaa !50
  %cmp116 = icmp sgt i32 %2, 0
  br i1 %cmp116, label %for.body, label %if.end

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.cond.preheader ]
  %3 = phi %struct.rtvec_def* [ %5, %for.body ], [ %1, %for.cond.preheader ]
  %arrayidx5 = getelementptr inbounds %struct.rtvec_def* %3, i64 0, i32 1, i64 %indvars.iv
  %4 = load %struct.rtx_def** %arrayidx5, align 8, !tbaa !7
  tail call void @add_insn_before(%struct.rtx_def* %4, %struct.rtx_def* %before)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %5 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 0
  %6 = load i32* %num_elem, align 4, !tbaa !50
  %7 = trunc i64 %indvars.iv.next to i32
  %cmp1 = icmp slt i32 %7, %6
  br i1 %cmp1, label %for.body, label %if.end

if.else:                                          ; preds = %entry
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 32) #4
  %8 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %8, i64 0, i32 3
  %9 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 6
  %10 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %10, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %10, i32* %rtint.i, align 4, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c.i, i64* %11, align 8, !tbaa !7
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  store i32 -1, i32* %rtint5.i, align 4, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 5, i32 0
  %13 = bitcast i64* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i32 8, i1 false) #4
  tail call void @add_insn_before(%struct.rtx_def* %call.i, %struct.rtx_def* %before)
  br label %if.end

if.end:                                           ; preds = %for.body, %for.cond.preheader, %if.else
  %insn.1 = phi %struct.rtx_def* [ %call.i, %if.else ], [ %before, %for.cond.preheader ], [ %4, %for.body ]
  ret %struct.rtx_def* %insn.1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_jump_insn_before(%struct.rtx_def* %pattern, %struct.rtx_def* %before) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %for.cond.preheader.i, label %if.else

for.cond.preheader.i:                             ; preds = %entry
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtvec_def**
  %1 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !7
  %num_elem15.i = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 0
  %2 = load i32* %num_elem15.i, align 4, !tbaa !50
  %cmp116.i = icmp sgt i32 %2, 0
  br i1 %cmp116.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %for.cond.preheader.i, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %for.cond.preheader.i ]
  %3 = phi %struct.rtvec_def* [ %5, %for.body.i ], [ %1, %for.cond.preheader.i ]
  %arrayidx5.i = getelementptr inbounds %struct.rtvec_def* %3, i64 0, i32 1, i64 %indvars.iv.i
  %4 = load %struct.rtx_def** %arrayidx5.i, align 8, !tbaa !7
  tail call void @add_insn_before(%struct.rtx_def* %4, %struct.rtx_def* %before) #4
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %5 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !7
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 0
  %6 = load i32* %num_elem.i, align 4, !tbaa !50
  %7 = trunc i64 %indvars.iv.next.i to i32
  %cmp1.i = icmp slt i32 %7, %6
  br i1 %cmp1.i, label %for.body.i, label %if.end

if.else:                                          ; preds = %entry
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 33) #4
  %8 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %8, i64 0, i32 3
  %9 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 6
  %10 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %10, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %10, i32* %rtint.i, align 4, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c.i, i64* %11, align 8, !tbaa !7
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  store i32 -1, i32* %rtint5.i, align 4, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 5, i32 0
  %13 = bitcast i64* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 24, i32 8, i1 false) #4
  tail call void @add_insn_before(%struct.rtx_def* %call.i, %struct.rtx_def* %before)
  br label %if.end

if.end:                                           ; preds = %for.body.i, %for.cond.preheader.i, %if.else
  %insn.0 = phi %struct.rtx_def* [ %call.i, %if.else ], [ %before, %for.cond.preheader.i ], [ %4, %for.body.i ]
  ret %struct.rtx_def* %insn.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_call_insn_before(%struct.rtx_def* %pattern, %struct.rtx_def* %before) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %for.cond.preheader.i, label %if.else

for.cond.preheader.i:                             ; preds = %entry
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtvec_def**
  %1 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !7
  %num_elem15.i = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 0
  %2 = load i32* %num_elem15.i, align 4, !tbaa !50
  %cmp116.i = icmp sgt i32 %2, 0
  br i1 %cmp116.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %for.cond.preheader.i, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %for.cond.preheader.i ]
  %3 = phi %struct.rtvec_def* [ %5, %for.body.i ], [ %1, %for.cond.preheader.i ]
  %arrayidx5.i = getelementptr inbounds %struct.rtvec_def* %3, i64 0, i32 1, i64 %indvars.iv.i
  %4 = load %struct.rtx_def** %arrayidx5.i, align 8, !tbaa !7
  tail call void @add_insn_before(%struct.rtx_def* %4, %struct.rtx_def* %before) #4
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %5 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !7
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 0
  %6 = load i32* %num_elem.i, align 4, !tbaa !50
  %7 = trunc i64 %indvars.iv.next.i to i32
  %cmp1.i = icmp slt i32 %7, %6
  br i1 %cmp1.i, label %for.body.i, label %if.end

if.else:                                          ; preds = %entry
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 34) #4
  %8 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %8, i64 0, i32 3
  %9 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 6
  %10 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %10, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %10, i32* %rtint.i, align 4, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c.i, i64* %11, align 8, !tbaa !7
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  store i32 -1, i32* %rtint5.i, align 4, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 5, i32 0
  %13 = bitcast i64* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 24, i32 8, i1 false) #4
  tail call void @add_insn_before(%struct.rtx_def* %call.i, %struct.rtx_def* %before)
  %14 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 0
  %bf.load2 = load i32* %14, align 8
  %bf.clear3 = and i32 %bf.load2, -65536
  %bf.set = or i32 %bf.clear3, 34
  store i32 %bf.set, i32* %14, align 8
  br label %if.end

if.end:                                           ; preds = %for.body.i, %for.cond.preheader.i, %if.else
  %insn.0 = phi %struct.rtx_def* [ %call.i, %if.else ], [ %before, %for.cond.preheader.i ], [ %4, %for.body.i ]
  ret %struct.rtx_def* %insn.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_barrier_before(%struct.rtx_def* %before) #0 {
entry:
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 35) #4
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 6
  %2 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  store i32 %2, i32* %rtint, align 4, !tbaa !1
  tail call void @add_insn_before(%struct.rtx_def* %call, %struct.rtx_def* %before)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_label_before(%struct.rtx_def* %label, %struct.rtx_def* %before) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %label, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %0 = load i32* %rtint, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 6
  %3 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  store i32 %3, i32* %rtint, align 4, !tbaa !1
  tail call void @add_insn_before(%struct.rtx_def* %label, %struct.rtx_def* %before)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret %struct.rtx_def* %label
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_note_before(i32 %subtype, %struct.rtx_def* %before) #0 {
entry:
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 37) #4
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 6
  %2 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %fld = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  store i32 %2, i32* %rtint, align 4, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 3, i32 0
  store i64 0, i64* %3, align 8, !tbaa !7
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 4
  %rtint5 = bitcast %union.rtunion_def* %arrayidx4 to i32*
  store i32 %subtype, i32* %rtint5, align 4, !tbaa !1
  tail call void @add_insn_before(%struct.rtx_def* %call, %struct.rtx_def* %before)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define void @emit_insn_after_with_line_notes(%struct.rtx_def* %pattern, %struct.rtx_def* %after, %struct.rtx_def* readonly %from) #0 {
entry:
  %0 = load i32* @no_line_numbers, align 4, !tbaa !1
  %tobool.i = icmp ne i32 %0, 0
  %tobool111.i = icmp eq %struct.rtx_def* %from, null
  %or.cond.i = or i1 %tobool.i, %tobool111.i
  br i1 %or.cond.i, label %find_line_note.exit, label %for.body.i

for.body.i:                                       ; preds = %entry, %for.inc.i
  %insn.addr.012.i = phi %struct.rtx_def* [ %3, %for.inc.i ], [ %from, %entry ]
  %1 = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i, i64 0, i32 0
  %bf.load.i = load i32* %1, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 37
  br i1 %cmp.i, label %land.lhs.true.i, label %for.inc.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i, i64 0, i32 1, i64 4
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %2 = load i32* %rtint.i, align 4, !tbaa !1
  %cmp2.i = icmp sgt i32 %2, -1
  br i1 %cmp2.i, label %find_line_note.exit, label %for.inc.i

for.inc.i:                                        ; preds = %land.lhs.true.i, %for.body.i
  %arrayidx6.i = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i, i64 0, i32 1, i64 1
  %rtx.i = bitcast %union.rtunion_def* %arrayidx6.i to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !7
  %tobool1.i = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool1.i, label %find_line_note.exit, label %for.body.i

find_line_note.exit:                              ; preds = %land.lhs.true.i, %for.inc.i, %entry
  %retval.0.i = phi %struct.rtx_def* [ null, %entry ], [ %insn.addr.012.i, %land.lhs.true.i ], [ null, %for.inc.i ]
  %tobool111.i28 = icmp eq %struct.rtx_def* %after, null
  %or.cond.i29 = or i1 %tobool.i, %tobool111.i28
  br i1 %or.cond.i29, label %find_line_note.exit44, label %for.body.i34

for.body.i34:                                     ; preds = %find_line_note.exit, %for.inc.i42
  %insn.addr.012.i30 = phi %struct.rtx_def* [ %6, %for.inc.i42 ], [ %after, %find_line_note.exit ]
  %4 = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i30, i64 0, i32 0
  %bf.load.i31 = load i32* %4, align 8
  %bf.clear.i32 = and i32 %bf.load.i31, 65535
  %cmp.i33 = icmp eq i32 %bf.clear.i32, 37
  br i1 %cmp.i33, label %land.lhs.true.i38, label %for.inc.i42

land.lhs.true.i38:                                ; preds = %for.body.i34
  %arrayidx.i35 = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i30, i64 0, i32 1, i64 4
  %rtint.i36 = bitcast %union.rtunion_def* %arrayidx.i35 to i32*
  %5 = load i32* %rtint.i36, align 4, !tbaa !1
  %cmp2.i37 = icmp sgt i32 %5, -1
  br i1 %cmp2.i37, label %find_line_note.exit44, label %for.inc.i42

for.inc.i42:                                      ; preds = %land.lhs.true.i38, %for.body.i34
  %arrayidx6.i39 = getelementptr inbounds %struct.rtx_def* %insn.addr.012.i30, i64 0, i32 1, i64 1
  %rtx.i40 = bitcast %union.rtunion_def* %arrayidx6.i39 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx.i40, align 8, !tbaa !7
  %tobool1.i41 = icmp eq %struct.rtx_def* %6, null
  br i1 %tobool1.i41, label %find_line_note.exit44, label %for.body.i34

find_line_note.exit44:                            ; preds = %land.lhs.true.i38, %for.inc.i42, %find_line_note.exit
  %retval.0.i43 = phi %struct.rtx_def* [ null, %find_line_note.exit ], [ %insn.addr.012.i30, %land.lhs.true.i38 ], [ null, %for.inc.i42 ]
  %7 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 0
  %bf.load.i45 = load i32* %7, align 8
  %bf.clear.i46 = and i32 %bf.load.i45, 65535
  %cmp.i47 = icmp eq i32 %bf.clear.i46, 24
  br i1 %cmp.i47, label %for.cond.preheader.i, label %if.else.i

for.cond.preheader.i:                             ; preds = %find_line_note.exit44
  %arrayidx.i48 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx.i48 to %struct.rtvec_def**
  %8 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !7
  %num_elem16.i = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 0
  %9 = load i32* %num_elem16.i, align 4, !tbaa !50
  %cmp117.i = icmp sgt i32 %9, 0
  br i1 %cmp117.i, label %for.body.i49, label %emit_insn_after.exit

for.body.i49:                                     ; preds = %for.cond.preheader.i, %for.body.i49
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i49 ], [ 0, %for.cond.preheader.i ]
  %10 = phi %struct.rtvec_def* [ %12, %for.body.i49 ], [ %8, %for.cond.preheader.i ]
  %after.addr.018.i = phi %struct.rtx_def* [ %11, %for.body.i49 ], [ %after, %for.cond.preheader.i ]
  %arrayidx5.i = getelementptr inbounds %struct.rtvec_def* %10, i64 0, i32 1, i64 %indvars.iv.i
  %11 = load %struct.rtx_def** %arrayidx5.i, align 8, !tbaa !7
  tail call void @add_insn_after(%struct.rtx_def* %11, %struct.rtx_def* %after.addr.018.i) #4
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %12 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !7
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %12, i64 0, i32 0
  %13 = load i32* %num_elem.i, align 4, !tbaa !50
  %14 = trunc i64 %indvars.iv.next.i to i32
  %cmp1.i = icmp slt i32 %14, %13
  br i1 %cmp1.i, label %for.body.i49, label %emit_insn_after.exit

if.else.i:                                        ; preds = %find_line_note.exit44
  %call.i.i = tail call %struct.rtx_def* @rtx_alloc(i32 32) #4
  %15 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i.i = getelementptr inbounds %struct.function* %15, i64 0, i32 3
  %16 = load %struct.emit_status** %emit.i.i, align 8, !tbaa !10
  %x_cur_insn_uid.i.i = getelementptr inbounds %struct.emit_status* %16, i64 0, i32 6
  %17 = load i32* %x_cur_insn_uid.i.i, align 4, !tbaa !47
  %inc.i.i = add nsw i32 %17, 1
  store i32 %inc.i.i, i32* %x_cur_insn_uid.i.i, align 4, !tbaa !47
  %fld.i.i = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1
  %rtint.i.i = bitcast [1 x %union.rtunion_def]* %fld.i.i to i32*
  store i32 %17, i32* %rtint.i.i, align 4, !tbaa !1
  %18 = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i.i = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c.i.i, i64* %18, align 8, !tbaa !7
  %arrayidx4.i.i = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 4
  %rtint5.i.i = bitcast %union.rtunion_def* %arrayidx4.i.i to i32*
  store i32 -1, i32* %rtint5.i.i, align 4, !tbaa !1
  %19 = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 5, i32 0
  %20 = bitcast i64* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %20, i8 0, i64 16, i32 8, i1 false) #4
  tail call void @add_insn_after(%struct.rtx_def* %call.i.i, %struct.rtx_def* %after) #4
  br label %emit_insn_after.exit

emit_insn_after.exit:                             ; preds = %for.body.i49, %for.cond.preheader.i, %if.else.i
  %insn.1.i = phi %struct.rtx_def* [ %call.i.i, %if.else.i ], [ %after, %for.cond.preheader.i ], [ %11, %for.body.i49 ]
  %tobool = icmp eq %struct.rtx_def* %retval.0.i, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %emit_insn_after.exit
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %retval.0.i, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %21 = load i32* %rtint, align 4, !tbaa !1
  %22 = load i32* @no_line_numbers, align 4, !tbaa !1
  %tobool.i51 = icmp ne i32 %22, 0
  %cmp.i52 = icmp sgt i32 %21, 0
  %or.cond.i53 = and i1 %tobool.i51, %cmp.i52
  br i1 %or.cond.i53, label %if.then.i57, label %if.end.i67

if.then.i57:                                      ; preds = %if.then
  %23 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i54 = getelementptr inbounds %struct.function* %23, i64 0, i32 3
  %24 = load %struct.emit_status** %emit.i54, align 8, !tbaa !10
  %x_cur_insn_uid.i55 = getelementptr inbounds %struct.emit_status* %24, i64 0, i32 6
  %25 = load i32* %x_cur_insn_uid.i55, align 4, !tbaa !47
  %inc.i56 = add nsw i32 %25, 1
  store i32 %inc.i56, i32* %x_cur_insn_uid.i55, align 4, !tbaa !47
  br label %if.end

if.end.i67:                                       ; preds = %if.then
  %arrayidx = getelementptr inbounds %struct.rtx_def* %retval.0.i, i64 0, i32 1, i64 3
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  %26 = load i8** %rtstr, align 8, !tbaa !7
  %call.i58 = tail call %struct.rtx_def* @rtx_alloc(i32 37) #4
  %27 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1.i59 = getelementptr inbounds %struct.function* %27, i64 0, i32 3
  %28 = load %struct.emit_status** %emit1.i59, align 8, !tbaa !10
  %x_cur_insn_uid2.i60 = getelementptr inbounds %struct.emit_status* %28, i64 0, i32 6
  %29 = load i32* %x_cur_insn_uid2.i60, align 4, !tbaa !47
  %inc3.i61 = add nsw i32 %29, 1
  store i32 %inc3.i61, i32* %x_cur_insn_uid2.i60, align 4, !tbaa !47
  %fld.i62 = getelementptr inbounds %struct.rtx_def* %call.i58, i64 0, i32 1
  %rtint.i63 = bitcast [1 x %union.rtunion_def]* %fld.i62 to i32*
  store i32 %29, i32* %rtint.i63, align 4, !tbaa !1
  %30 = getelementptr inbounds %struct.rtx_def* %call.i58, i64 0, i32 1, i64 3, i32 0
  %file.c.i64 = ptrtoint i8* %26 to i64
  store i64 %file.c.i64, i64* %30, align 8, !tbaa !7
  %arrayidx7.i65 = getelementptr inbounds %struct.rtx_def* %call.i58, i64 0, i32 1, i64 4
  %rtint8.i66 = bitcast %union.rtunion_def* %arrayidx7.i65 to i32*
  store i32 %21, i32* %rtint8.i66, align 4, !tbaa !1
  tail call void @add_insn_after(%struct.rtx_def* %call.i58, %struct.rtx_def* %after) #4
  br label %if.end

if.end:                                           ; preds = %if.end.i67, %if.then.i57, %emit_insn_after.exit
  %tobool6 = icmp eq %struct.rtx_def* %retval.0.i43, null
  br i1 %tobool6, label %if.end15, label %if.then7

if.then7:                                         ; preds = %if.end
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %retval.0.i43, i64 0, i32 1, i64 4
  %rtint13 = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %31 = load i32* %rtint13, align 4, !tbaa !1
  %32 = load i32* @no_line_numbers, align 4, !tbaa !1
  %tobool.i22 = icmp ne i32 %32, 0
  %cmp.i23 = icmp sgt i32 %31, 0
  %or.cond.i24 = and i1 %tobool.i22, %cmp.i23
  br i1 %or.cond.i24, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then7
  %33 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %33, i64 0, i32 3
  %34 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %34, i64 0, i32 6
  %35 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %35, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  br label %if.end15

if.end.i:                                         ; preds = %if.then7
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %retval.0.i43, i64 0, i32 1, i64 3
  %rtstr10 = bitcast %union.rtunion_def* %arrayidx9 to i8**
  %36 = load i8** %rtstr10, align 8, !tbaa !7
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 37) #4
  %37 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1.i = getelementptr inbounds %struct.function* %37, i64 0, i32 3
  %38 = load %struct.emit_status** %emit1.i, align 8, !tbaa !10
  %x_cur_insn_uid2.i = getelementptr inbounds %struct.emit_status* %38, i64 0, i32 6
  %39 = load i32* %x_cur_insn_uid2.i, align 4, !tbaa !47
  %inc3.i = add nsw i32 %39, 1
  store i32 %inc3.i, i32* %x_cur_insn_uid2.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i25 = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %39, i32* %rtint.i25, align 4, !tbaa !1
  %40 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %file.c.i = ptrtoint i8* %36 to i64
  store i64 %file.c.i, i64* %40, align 8, !tbaa !7
  %arrayidx7.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint8.i = bitcast %union.rtunion_def* %arrayidx7.i to i32*
  store i32 %31, i32* %rtint8.i, align 4, !tbaa !1
  tail call void @add_insn_after(%struct.rtx_def* %call.i, %struct.rtx_def* %insn.1.i) #4
  br label %if.end15

if.end15:                                         ; preds = %if.end.i, %if.then.i, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %pattern, %struct.rtx_def* %after) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %for.cond.preheader.i, label %if.else

for.cond.preheader.i:                             ; preds = %entry
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtvec_def**
  %1 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !7
  %num_elem16.i = getelementptr inbounds %struct.rtvec_def* %1, i64 0, i32 0
  %2 = load i32* %num_elem16.i, align 4, !tbaa !50
  %cmp117.i = icmp sgt i32 %2, 0
  br i1 %cmp117.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %for.cond.preheader.i, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %for.cond.preheader.i ]
  %3 = phi %struct.rtvec_def* [ %5, %for.body.i ], [ %1, %for.cond.preheader.i ]
  %after.addr.018.i = phi %struct.rtx_def* [ %4, %for.body.i ], [ %after, %for.cond.preheader.i ]
  %arrayidx5.i = getelementptr inbounds %struct.rtvec_def* %3, i64 0, i32 1, i64 %indvars.iv.i
  %4 = load %struct.rtx_def** %arrayidx5.i, align 8, !tbaa !7
  tail call void @add_insn_after(%struct.rtx_def* %4, %struct.rtx_def* %after.addr.018.i) #4
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %5 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !7
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 0
  %6 = load i32* %num_elem.i, align 4, !tbaa !50
  %7 = trunc i64 %indvars.iv.next.i to i32
  %cmp1.i = icmp slt i32 %7, %6
  br i1 %cmp1.i, label %for.body.i, label %if.end

if.else:                                          ; preds = %entry
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 33) #4
  %8 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %8, i64 0, i32 3
  %9 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 6
  %10 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %10, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %10, i32* %rtint.i, align 4, !tbaa !1
  %11 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c.i, i64* %11, align 8, !tbaa !7
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  store i32 -1, i32* %rtint5.i, align 4, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 5, i32 0
  %13 = bitcast i64* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 24, i32 8, i1 false) #4
  tail call void @add_insn_after(%struct.rtx_def* %call.i, %struct.rtx_def* %after)
  br label %if.end

if.end:                                           ; preds = %for.body.i, %for.cond.preheader.i, %if.else
  %insn.0 = phi %struct.rtx_def* [ %call.i, %if.else ], [ %after, %for.cond.preheader.i ], [ %4, %for.body.i ]
  ret %struct.rtx_def* %insn.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_label_after(%struct.rtx_def* %label, %struct.rtx_def* %after) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %label, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %0 = load i32* %rtint, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 6
  %3 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  store i32 %3, i32* %rtint, align 4, !tbaa !1
  tail call void @add_insn_after(%struct.rtx_def* %label, %struct.rtx_def* %after)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret %struct.rtx_def* %label
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_note_after(i32 %subtype, %struct.rtx_def* %after) #0 {
entry:
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 37) #4
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 6
  %2 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %fld = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  store i32 %2, i32* %rtint, align 4, !tbaa !1
  %3 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 3, i32 0
  store i64 0, i64* %3, align 8, !tbaa !7
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 4
  %rtint5 = bitcast %union.rtunion_def* %arrayidx4 to i32*
  store i32 %subtype, i32* %rtint5, align 4, !tbaa !1
  tail call void @add_insn_after(%struct.rtx_def* %call, %struct.rtx_def* %after)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_insn(%struct.rtx_def* %pattern) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 3
  %3 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %arrayidx = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**
  %4 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem34 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 0
  %5 = load i32* %num_elem34, align 4, !tbaa !50
  %cmp135 = icmp sgt i32 %5, 0
  br i1 %cmp135, label %for.body, label %if.end

for.body:                                         ; preds = %if.then, %add_insn.exit.for.body_crit_edge
  %6 = phi %struct.rtx_def* [ %.pre38, %add_insn.exit.for.body_crit_edge ], [ %3, %if.then ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %add_insn.exit.for.body_crit_edge ], [ 0, %if.then ]
  %7 = phi %struct.rtvec_def* [ %18, %add_insn.exit.for.body_crit_edge ], [ %4, %if.then ]
  %arrayidx5 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 1, i64 %indvars.iv
  %8 = load %struct.rtx_def** %arrayidx5, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 1, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %6 to i64
  store i64 %.c.i, i64* %9, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %10, align 8, !tbaa !7
  %11 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i = getelementptr inbounds %struct.function* %11, i64 0, i32 3
  %12 = load %struct.emit_status** %emit4.i, align 8, !tbaa !10
  %x_last_insn5.i = getelementptr inbounds %struct.emit_status* %12, i64 0, i32 3
  %13 = load %struct.rtx_def** %x_last_insn5.i, align 8, !tbaa !46
  %cmp.i = icmp eq %struct.rtx_def* %13, null
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %for.body
  %14 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 2, i32 0
  %insn.c.i = ptrtoint %struct.rtx_def* %8 to i64
  store i64 %insn.c.i, i64* %14, align 8, !tbaa !7
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 3
  %.pre23.i = load %struct.emit_status** %emit11.phi.trans.insert.i, align 8, !tbaa !10
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body
  %15 = phi %struct.emit_status* [ %12, %for.body ], [ %.pre23.i, %if.then.i ]
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %15, i64 0, i32 2
  %16 = load %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %cmp12.i = icmp eq %struct.rtx_def* %16, null
  br i1 %cmp12.i, label %if.then13.i, label %add_insn.exit

if.then13.i:                                      ; preds = %if.end.i
  store %struct.rtx_def* %8, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %.pre24.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre24.i, i64 0, i32 3
  %.pre25.i = load %struct.emit_status** %emit17.phi.trans.insert.i, align 8, !tbaa !10
  br label %add_insn.exit

add_insn.exit:                                    ; preds = %if.end.i, %if.then13.i
  %17 = phi %struct.emit_status* [ %.pre25.i, %if.then13.i ], [ %15, %if.end.i ]
  %x_last_insn18.i = getelementptr inbounds %struct.emit_status* %17, i64 0, i32 3
  store %struct.rtx_def* %8, %struct.rtx_def** %x_last_insn18.i, align 8, !tbaa !46
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %18 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %18, i64 0, i32 0
  %19 = load i32* %num_elem, align 4, !tbaa !50
  %20 = trunc i64 %indvars.iv.next to i32
  %cmp1 = icmp slt i32 %20, %19
  br i1 %cmp1, label %add_insn.exit.for.body_crit_edge, label %if.end

add_insn.exit.for.body_crit_edge:                 ; preds = %add_insn.exit
  %.pre = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 3
  %.pre37 = load %struct.emit_status** %emit.i.phi.trans.insert, align 8, !tbaa !10
  %x_last_insn.i.phi.trans.insert = getelementptr inbounds %struct.emit_status* %.pre37, i64 0, i32 3
  %.pre38 = load %struct.rtx_def** %x_last_insn.i.phi.trans.insert, align 8, !tbaa !46
  br label %for.body

if.else:                                          ; preds = %entry
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 32) #4
  %21 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i33 = getelementptr inbounds %struct.function* %21, i64 0, i32 3
  %22 = load %struct.emit_status** %emit.i33, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %22, i64 0, i32 6
  %23 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %23, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %23, i32* %rtint.i, align 4, !tbaa !1
  %24 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c.i, i64* %24, align 8, !tbaa !7
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  store i32 -1, i32* %rtint5.i, align 4, !tbaa !1
  %25 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 5, i32 0
  %26 = bitcast i64* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %26, i8 0, i64 16, i32 8, i1 false) #4
  %27 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i13 = getelementptr inbounds %struct.function* %27, i64 0, i32 3
  %28 = load %struct.emit_status** %emit.i13, align 8, !tbaa !10
  %x_last_insn.i14 = getelementptr inbounds %struct.emit_status* %28, i64 0, i32 3
  %29 = load %struct.rtx_def** %x_last_insn.i14, align 8, !tbaa !46
  %30 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 1, i32 0
  %.c.i15 = ptrtoint %struct.rtx_def* %29 to i64
  store i64 %.c.i15, i64* %30, align 8, !tbaa !7
  %31 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %31, align 8, !tbaa !7
  %32 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i16 = getelementptr inbounds %struct.function* %32, i64 0, i32 3
  %33 = load %struct.emit_status** %emit4.i16, align 8, !tbaa !10
  %x_last_insn5.i17 = getelementptr inbounds %struct.emit_status* %33, i64 0, i32 3
  %34 = load %struct.rtx_def** %x_last_insn5.i17, align 8, !tbaa !46
  %cmp.i18 = icmp eq %struct.rtx_def* %34, null
  br i1 %cmp.i18, label %if.end.i26, label %if.then.i23

if.then.i23:                                      ; preds = %if.else
  %35 = getelementptr inbounds %struct.rtx_def* %34, i64 0, i32 1, i64 2, i32 0
  %insn.c.i19 = ptrtoint %struct.rtx_def* %call.i to i64
  store i64 %insn.c.i19, i64* %35, align 8, !tbaa !7
  %.pre.i20 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i21 = getelementptr inbounds %struct.function* %.pre.i20, i64 0, i32 3
  %.pre23.i22 = load %struct.emit_status** %emit11.phi.trans.insert.i21, align 8, !tbaa !10
  br label %if.end.i26

if.end.i26:                                       ; preds = %if.then.i23, %if.else
  %36 = phi %struct.emit_status* [ %33, %if.else ], [ %.pre23.i22, %if.then.i23 ]
  %x_first_insn.i24 = getelementptr inbounds %struct.emit_status* %36, i64 0, i32 2
  %37 = load %struct.rtx_def** %x_first_insn.i24, align 8, !tbaa !45
  %cmp12.i25 = icmp eq %struct.rtx_def* %37, null
  br i1 %cmp12.i25, label %if.then13.i30, label %add_insn.exit32

if.then13.i30:                                    ; preds = %if.end.i26
  store %struct.rtx_def* %call.i, %struct.rtx_def** %x_first_insn.i24, align 8, !tbaa !45
  %.pre24.i27 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i28 = getelementptr inbounds %struct.function* %.pre24.i27, i64 0, i32 3
  %.pre25.i29 = load %struct.emit_status** %emit17.phi.trans.insert.i28, align 8, !tbaa !10
  br label %add_insn.exit32

add_insn.exit32:                                  ; preds = %if.end.i26, %if.then13.i30
  %38 = phi %struct.emit_status* [ %.pre25.i29, %if.then13.i30 ], [ %36, %if.end.i26 ]
  %x_last_insn18.i31 = getelementptr inbounds %struct.emit_status* %38, i64 0, i32 3
  store %struct.rtx_def* %call.i, %struct.rtx_def** %x_last_insn18.i31, align 8, !tbaa !46
  br label %if.end

if.end:                                           ; preds = %add_insn.exit, %if.then, %add_insn.exit32
  %insn.1 = phi %struct.rtx_def* [ %call.i, %add_insn.exit32 ], [ %3, %if.then ], [ %8, %add_insn.exit ]
  ret %struct.rtx_def* %insn.1
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_insns(%struct.rtx_def* %insn) #0 {
entry:
  %tobool4 = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool4, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %add_insn.exit
  %insn.addr.05 = phi %struct.rtx_def* [ %0, %add_insn.exit ], [ %insn, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.addr.05, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_last_insn.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 3
  %3 = load %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %4 = getelementptr inbounds %struct.rtx_def* %insn.addr.05, i64 0, i32 1, i64 1, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %3 to i64
  store i64 %.c.i, i64* %4, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.rtx_def* %insn.addr.05, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %5, align 8, !tbaa !7
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i = getelementptr inbounds %struct.function* %6, i64 0, i32 3
  %7 = load %struct.emit_status** %emit4.i, align 8, !tbaa !10
  %x_last_insn5.i = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 3
  %8 = load %struct.rtx_def** %x_last_insn5.i, align 8, !tbaa !46
  %cmp.i = icmp eq %struct.rtx_def* %8, null
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %while.body
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 2, i32 0
  %insn.c.i = ptrtoint %struct.rtx_def* %insn.addr.05 to i64
  store i64 %insn.c.i, i64* %9, align 8, !tbaa !7
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 3
  %.pre23.i = load %struct.emit_status** %emit11.phi.trans.insert.i, align 8, !tbaa !10
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %while.body
  %10 = phi %struct.emit_status* [ %7, %while.body ], [ %.pre23.i, %if.then.i ]
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %10, i64 0, i32 2
  %11 = load %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %cmp12.i = icmp eq %struct.rtx_def* %11, null
  br i1 %cmp12.i, label %if.then13.i, label %add_insn.exit

if.then13.i:                                      ; preds = %if.end.i
  store %struct.rtx_def* %insn.addr.05, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %.pre24.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre24.i, i64 0, i32 3
  %.pre25.i = load %struct.emit_status** %emit17.phi.trans.insert.i, align 8, !tbaa !10
  br label %add_insn.exit

add_insn.exit:                                    ; preds = %if.end.i, %if.then13.i
  %12 = phi %struct.emit_status* [ %.pre25.i, %if.then13.i ], [ %10, %if.end.i ]
  %x_last_insn18.i = getelementptr inbounds %struct.emit_status* %12, i64 0, i32 3
  store %struct.rtx_def* %insn.addr.05, %struct.rtx_def** %x_last_insn18.i, align 8, !tbaa !46
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %add_insn.exit, %entry
  %last.0.lcssa = phi %struct.rtx_def* [ null, %entry ], [ %insn.addr.05, %add_insn.exit ]
  ret %struct.rtx_def* %last.0.lcssa
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_insns_before(%struct.rtx_def* %insn, %struct.rtx_def* %before) #0 {
entry:
  %tobool4 = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool4, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %insn.addr.05 = phi %struct.rtx_def* [ %0, %while.body ], [ %insn, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.addr.05, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  tail call void @add_insn_before(%struct.rtx_def* %insn.addr.05, %struct.rtx_def* %before)
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %entry
  %last.0.lcssa = phi %struct.rtx_def* [ null, %entry ], [ %insn.addr.05, %while.body ]
  ret %struct.rtx_def* %last.0.lcssa
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_insns_after(%struct.rtx_def* %first, %struct.rtx_def* %after) #0 {
entry:
  %tobool = icmp eq %struct.rtx_def* %after, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 4142, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.emit_insns_after, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %tobool1 = icmp eq %struct.rtx_def* %first, null
  br i1 %tobool1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %0 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !7
  %tobool4 = icmp eq %struct.varray_head_tag* %0, null
  br i1 %tobool4, label %for.cond25, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end3
  %arrayidx = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtint, align 4, !tbaa !1
  %conv = zext i32 %1 to i64
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %0, i64 0, i32 0
  %2 = load i64* %num_elements, align 8, !tbaa !55
  %cmp = icmp ult i64 %conv, %2
  br i1 %cmp, label %land.lhs.true6, label %for.cond25

land.lhs.true6:                                   ; preds = %land.lhs.true
  %idxprom = sext i32 %1 to i64
  %data = getelementptr inbounds %struct.varray_head_tag* %0, i64 0, i32 4
  %bb10 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx11 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb10, i64 0, i64 %idxprom
  %3 = load %struct.basic_block_def** %arrayidx11, align 8, !tbaa !7
  %tobool12 = icmp eq %struct.basic_block_def* %3, null
  br i1 %tobool12, label %for.cond25, label %for.cond.preheader

for.cond.preheader:                               ; preds = %land.lhs.true6
  %arrayidx1586 = getelementptr inbounds %struct.rtx_def* %first, i64 0, i32 1, i64 2
  %rtx87 = bitcast %union.rtunion_def* %arrayidx1586 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx87, align 8, !tbaa !7
  %tobool1688 = icmp eq %struct.rtx_def* %4, null
  tail call void @set_block_for_insn(%struct.rtx_def* %first, %struct.basic_block_def* %3) #4
  br i1 %tobool1688, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.cond.preheader, %for.inc
  %rtx89 = phi %struct.rtx_def** [ %rtx, %for.inc ], [ %rtx87, %for.cond.preheader ]
  %5 = load %struct.rtx_def** %rtx89, align 8, !tbaa !7
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %tobool16 = icmp eq %struct.rtx_def* %6, null
  tail call void @set_block_for_insn(%struct.rtx_def* %5, %struct.basic_block_def* %3) #4
  br i1 %tobool16, label %for.end, label %for.inc

for.end:                                          ; preds = %for.inc, %for.cond.preheader
  %last.0.lcssa = phi %struct.rtx_def* [ %first, %for.cond.preheader ], [ %5, %for.inc ]
  %end = getelementptr inbounds %struct.basic_block_def* %3, i64 0, i32 1
  %7 = load %struct.rtx_def** %end, align 8, !tbaa !57
  %cmp20 = icmp eq %struct.rtx_def* %7, %after
  br i1 %cmp20, label %if.then22, label %if.end36

if.then22:                                        ; preds = %for.end
  store %struct.rtx_def* %last.0.lcssa, %struct.rtx_def** %end, align 8, !tbaa !57
  br label %if.end36

for.cond25:                                       ; preds = %land.lhs.true, %if.end3, %land.lhs.true6, %for.cond25
  %last.1 = phi %struct.rtx_def* [ %8, %for.cond25 ], [ %first, %land.lhs.true6 ], [ %first, %if.end3 ], [ %first, %land.lhs.true ]
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %last.1, i64 0, i32 1, i64 2
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx28, align 8, !tbaa !7
  %tobool29 = icmp eq %struct.rtx_def* %8, null
  br i1 %tobool29, label %if.end36, label %for.cond25

if.end36:                                         ; preds = %for.cond25, %for.end, %if.then22
  %last.2 = phi %struct.rtx_def* [ %last.0.lcssa, %if.then22 ], [ %last.0.lcssa, %for.end ], [ %last.1, %for.cond25 ]
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %after, i64 0, i32 1, i64 2
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx39, align 8, !tbaa !7
  %10 = getelementptr inbounds %union.rtunion_def* %arrayidx38, i64 0, i32 0
  %first.c = ptrtoint %struct.rtx_def* %first to i64
  store i64 %first.c, i64* %10, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.rtx_def* %first, i64 0, i32 1, i64 1, i32 0
  %after.c = ptrtoint %struct.rtx_def* %after to i64
  store i64 %after.c, i64* %11, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.rtx_def* %last.2, i64 0, i32 1, i64 2, i32 0
  %.c = ptrtoint %struct.rtx_def* %9 to i64
  store i64 %.c, i64* %12, align 8, !tbaa !7
  %tobool49 = icmp eq %struct.rtx_def* %9, null
  br i1 %tobool49, label %if.end54, label %if.then50

if.then50:                                        ; preds = %if.end36
  %13 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 1, i32 0
  %last.2.c = ptrtoint %struct.rtx_def* %last.2 to i64
  store i64 %last.2.c, i64* %13, align 8, !tbaa !7
  br label %if.end54

if.end54:                                         ; preds = %if.end36, %if.then50
  %14 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %14, i64 0, i32 3
  %15 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %15, i64 0, i32 3
  %16 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %cmp55 = icmp eq %struct.rtx_def* %16, %after
  br i1 %cmp55, label %if.then57, label %return

if.then57:                                        ; preds = %if.end54
  store %struct.rtx_def* %last.2, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  br label %return

return:                                           ; preds = %if.end54, %if.then57, %if.end
  %retval.0 = phi %struct.rtx_def* [ %after, %if.end ], [ %last.2, %if.then57 ], [ %last.2, %if.end54 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %pattern) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %pattern)
  br label %return

if.else:                                          ; preds = %entry
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 33) #4
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 6
  %3 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %3, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %3, i32* %rtint.i, align 4, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c.i, i64* %4, align 8, !tbaa !7
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  store i32 -1, i32* %rtint5.i, align 4, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 5, i32 0
  %6 = bitcast i64* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 24, i32 8, i1 false) #4
  %7 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i4 = getelementptr inbounds %struct.function* %7, i64 0, i32 3
  %8 = load %struct.emit_status** %emit.i4, align 8, !tbaa !10
  %x_last_insn.i = getelementptr inbounds %struct.emit_status* %8, i64 0, i32 3
  %9 = load %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %10 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 1, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %9 to i64
  store i64 %.c.i, i64* %10, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %11, align 8, !tbaa !7
  %12 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i = getelementptr inbounds %struct.function* %12, i64 0, i32 3
  %13 = load %struct.emit_status** %emit4.i, align 8, !tbaa !10
  %x_last_insn5.i = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 3
  %14 = load %struct.rtx_def** %x_last_insn5.i, align 8, !tbaa !46
  %cmp.i = icmp eq %struct.rtx_def* %14, null
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.else
  %15 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 2, i32 0
  %insn.c.i = ptrtoint %struct.rtx_def* %call.i to i64
  store i64 %insn.c.i, i64* %15, align 8, !tbaa !7
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 3
  %.pre23.i = load %struct.emit_status** %emit11.phi.trans.insert.i, align 8, !tbaa !10
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.else
  %16 = phi %struct.emit_status* [ %13, %if.else ], [ %.pre23.i, %if.then.i ]
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %16, i64 0, i32 2
  %17 = load %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %cmp12.i = icmp eq %struct.rtx_def* %17, null
  br i1 %cmp12.i, label %if.then13.i, label %add_insn.exit

if.then13.i:                                      ; preds = %if.end.i
  store %struct.rtx_def* %call.i, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %.pre24.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre24.i, i64 0, i32 3
  %.pre25.i = load %struct.emit_status** %emit17.phi.trans.insert.i, align 8, !tbaa !10
  br label %add_insn.exit

add_insn.exit:                                    ; preds = %if.end.i, %if.then13.i
  %18 = phi %struct.emit_status* [ %.pre25.i, %if.then13.i ], [ %16, %if.end.i ]
  %x_last_insn18.i = getelementptr inbounds %struct.emit_status* %18, i64 0, i32 3
  store %struct.rtx_def* %call.i, %struct.rtx_def** %x_last_insn18.i, align 8, !tbaa !46
  br label %return

return:                                           ; preds = %add_insn.exit, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call, %if.then ], [ %call.i, %add_insn.exit ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %pattern) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 24
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %pattern)
  br label %return

if.else:                                          ; preds = %entry
  %call.i = tail call %struct.rtx_def* @rtx_alloc(i32 34) #4
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 6
  %3 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %3, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %fld.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1
  %rtint.i = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  store i32 %3, i32* %rtint.i, align 4, !tbaa !1
  %4 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i = ptrtoint %struct.rtx_def* %pattern to i64
  store i64 %pattern.c.i, i64* %4, align 8, !tbaa !7
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 4
  %rtint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  store i32 -1, i32* %rtint5.i, align 4, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 5, i32 0
  %6 = bitcast i64* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 24, i32 8, i1 false) #4
  %7 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i7 = getelementptr inbounds %struct.function* %7, i64 0, i32 3
  %8 = load %struct.emit_status** %emit.i7, align 8, !tbaa !10
  %x_last_insn.i = getelementptr inbounds %struct.emit_status* %8, i64 0, i32 3
  %9 = load %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %10 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 1, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %9 to i64
  store i64 %.c.i, i64* %10, align 8, !tbaa !7
  %11 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %11, align 8, !tbaa !7
  %12 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i = getelementptr inbounds %struct.function* %12, i64 0, i32 3
  %13 = load %struct.emit_status** %emit4.i, align 8, !tbaa !10
  %x_last_insn5.i = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 3
  %14 = load %struct.rtx_def** %x_last_insn5.i, align 8, !tbaa !46
  %cmp.i = icmp eq %struct.rtx_def* %14, null
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.else
  %15 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 2, i32 0
  %insn.c.i = ptrtoint %struct.rtx_def* %call.i to i64
  store i64 %insn.c.i, i64* %15, align 8, !tbaa !7
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 3
  %.pre23.i = load %struct.emit_status** %emit11.phi.trans.insert.i, align 8, !tbaa !10
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.else
  %16 = phi %struct.emit_status* [ %13, %if.else ], [ %.pre23.i, %if.then.i ]
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %16, i64 0, i32 2
  %17 = load %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %cmp12.i = icmp eq %struct.rtx_def* %17, null
  br i1 %cmp12.i, label %if.then13.i, label %add_insn.exit

if.then13.i:                                      ; preds = %if.end.i
  store %struct.rtx_def* %call.i, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %.pre24.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre24.i, i64 0, i32 3
  %.pre25.i = load %struct.emit_status** %emit17.phi.trans.insert.i, align 8, !tbaa !10
  br label %add_insn.exit

add_insn.exit:                                    ; preds = %if.end.i, %if.then13.i
  %18 = phi %struct.emit_status* [ %.pre25.i, %if.then13.i ], [ %16, %if.end.i ]
  %x_last_insn18.i = getelementptr inbounds %struct.emit_status* %18, i64 0, i32 3
  store %struct.rtx_def* %call.i, %struct.rtx_def** %x_last_insn18.i, align 8, !tbaa !46
  %19 = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 0
  %bf.load2 = load i32* %19, align 8
  %bf.clear3 = and i32 %bf.load2, -65536
  %bf.set = or i32 %bf.clear3, 34
  store i32 %bf.set, i32* %19, align 8
  br label %return

return:                                           ; preds = %add_insn.exit, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call, %if.then ], [ %call.i, %add_insn.exit ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_label(%struct.rtx_def* %label) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %label, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %0 = load i32* %rtint, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 6
  %3 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  store i32 %3, i32* %rtint, align 4, !tbaa !1
  %x_last_insn.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 3
  %4 = load %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %5 = getelementptr inbounds %struct.rtx_def* %label, i64 0, i32 1, i64 1, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %4 to i64
  store i64 %.c.i, i64* %5, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rtx_def* %label, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %6, align 8, !tbaa !7
  %7 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i = getelementptr inbounds %struct.function* %7, i64 0, i32 3
  %8 = load %struct.emit_status** %emit4.i, align 8, !tbaa !10
  %x_last_insn5.i = getelementptr inbounds %struct.emit_status* %8, i64 0, i32 3
  %9 = load %struct.rtx_def** %x_last_insn5.i, align 8, !tbaa !46
  %cmp.i = icmp eq %struct.rtx_def* %9, null
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 2, i32 0
  %insn.c.i = ptrtoint %struct.rtx_def* %label to i64
  store i64 %insn.c.i, i64* %10, align 8, !tbaa !7
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 3
  %.pre23.i = load %struct.emit_status** %emit11.phi.trans.insert.i, align 8, !tbaa !10
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %11 = phi %struct.emit_status* [ %8, %if.then ], [ %.pre23.i, %if.then.i ]
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 2
  %12 = load %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %cmp12.i = icmp eq %struct.rtx_def* %12, null
  br i1 %cmp12.i, label %if.then13.i, label %add_insn.exit

if.then13.i:                                      ; preds = %if.end.i
  store %struct.rtx_def* %label, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %.pre24.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre24.i, i64 0, i32 3
  %.pre25.i = load %struct.emit_status** %emit17.phi.trans.insert.i, align 8, !tbaa !10
  br label %add_insn.exit

add_insn.exit:                                    ; preds = %if.end.i, %if.then13.i
  %13 = phi %struct.emit_status* [ %.pre25.i, %if.then13.i ], [ %11, %if.end.i ]
  %x_last_insn18.i = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 3
  store %struct.rtx_def* %label, %struct.rtx_def** %x_last_insn18.i, align 8, !tbaa !46
  br label %if.end

if.end:                                           ; preds = %add_insn.exit, %entry
  ret %struct.rtx_def* %label
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_barrier() #0 {
entry:
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 35) #4
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 6
  %2 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  store i32 %2, i32* %rtint, align 4, !tbaa !1
  %x_last_insn.i = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 3
  %3 = load %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %4 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %3 to i64
  store i64 %.c.i, i64* %4, align 8, !tbaa !7
  %5 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %5, align 8, !tbaa !7
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i = getelementptr inbounds %struct.function* %6, i64 0, i32 3
  %7 = load %struct.emit_status** %emit4.i, align 8, !tbaa !10
  %x_last_insn5.i = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 3
  %8 = load %struct.rtx_def** %x_last_insn5.i, align 8, !tbaa !46
  %cmp.i = icmp eq %struct.rtx_def* %8, null
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 2, i32 0
  %insn.c.i = ptrtoint %struct.rtx_def* %call to i64
  store i64 %insn.c.i, i64* %9, align 8, !tbaa !7
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 3
  %.pre23.i = load %struct.emit_status** %emit11.phi.trans.insert.i, align 8, !tbaa !10
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %10 = phi %struct.emit_status* [ %7, %entry ], [ %.pre23.i, %if.then.i ]
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %10, i64 0, i32 2
  %11 = load %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %cmp12.i = icmp eq %struct.rtx_def* %11, null
  br i1 %cmp12.i, label %if.then13.i, label %add_insn.exit

if.then13.i:                                      ; preds = %if.end.i
  store %struct.rtx_def* %call, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %.pre24.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre24.i, i64 0, i32 3
  %.pre25.i = load %struct.emit_status** %emit17.phi.trans.insert.i, align 8, !tbaa !10
  br label %add_insn.exit

add_insn.exit:                                    ; preds = %if.end.i, %if.then13.i
  %12 = phi %struct.emit_status* [ %.pre25.i, %if.then13.i ], [ %10, %if.end.i ]
  %x_last_insn18.i = getelementptr inbounds %struct.emit_status* %12, i64 0, i32 3
  store %struct.rtx_def* %call, %struct.rtx_def** %x_last_insn18.i, align 8, !tbaa !46
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_line_note(i8* %file, i32 %line) #0 {
entry:
  tail call void @set_file_and_line_for_stmt(i8* %file, i32 %line) #4
  %call = tail call %struct.rtx_def* @emit_note(i8* %file, i32 %line)
  ret %struct.rtx_def* %call
}

declare void @set_file_and_line_for_stmt(i8*, i32) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_note(i8* %file, i32 %line) #0 {
entry:
  %cmp = icmp sgt i32 %line, 0
  br i1 %cmp, label %if.then, label %if.end20

if.then:                                          ; preds = %entry
  %tobool = icmp eq i8* %file, null
  %.pre = load %struct.function** @cfun, align 8, !tbaa !7
  %emit10.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 3
  %.pre43 = load %struct.emit_status** %emit10.phi.trans.insert, align 8, !tbaa !10
  br i1 %tobool, label %if.end14, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %x_last_filename = getelementptr inbounds %struct.emit_status* %.pre43, i64 0, i32 8
  %0 = load i8** %x_last_filename, align 8, !tbaa !63
  %tobool1 = icmp eq i8* %0, null
  br i1 %tobool1, label %if.end14, label %land.lhs.true2

land.lhs.true2:                                   ; preds = %land.lhs.true
  %call = tail call i32 @strcmp(i8* %file, i8* %0) #4
  %tobool5 = icmp eq i32 %call, 0
  br i1 %tobool5, label %land.lhs.true6, label %if.end14

land.lhs.true6:                                   ; preds = %land.lhs.true2
  %x_last_linenum = getelementptr inbounds %struct.emit_status* %.pre43, i64 0, i32 7
  %1 = load i32* %x_last_linenum, align 4, !tbaa !64
  %cmp8 = icmp eq i32 %1, %line
  br i1 %cmp8, label %return, label %if.end14

if.end14:                                         ; preds = %if.then, %land.lhs.true6, %land.lhs.true, %land.lhs.true2
  %x_last_filename11 = getelementptr inbounds %struct.emit_status* %.pre43, i64 0, i32 8
  store i8* %file, i8** %x_last_filename11, align 8, !tbaa !63
  %2 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit12 = getelementptr inbounds %struct.function* %2, i64 0, i32 3
  %3 = load %struct.emit_status** %emit12, align 8, !tbaa !10
  %x_last_linenum13 = getelementptr inbounds %struct.emit_status* %3, i64 0, i32 7
  store i32 %line, i32* %x_last_linenum13, align 4, !tbaa !64
  %4 = load i32* @no_line_numbers, align 4, !tbaa !1
  %tobool15 = icmp eq i32 %4, 0
  br i1 %tobool15, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end14
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %3, i64 0, i32 6
  %5 = load i32* %x_cur_insn_uid, align 4, !tbaa !47
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %x_cur_insn_uid, align 4, !tbaa !47
  br label %return

if.end20:                                         ; preds = %if.end14, %entry
  %call21 = tail call %struct.rtx_def* @rtx_alloc(i32 37) #4
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit22 = getelementptr inbounds %struct.function* %6, i64 0, i32 3
  %7 = load %struct.emit_status** %emit22, align 8, !tbaa !10
  %x_cur_insn_uid23 = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 6
  %8 = load i32* %x_cur_insn_uid23, align 4, !tbaa !47
  %inc24 = add nsw i32 %8, 1
  store i32 %inc24, i32* %x_cur_insn_uid23, align 4, !tbaa !47
  %fld = getelementptr inbounds %struct.rtx_def* %call21, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  store i32 %8, i32* %rtint, align 4, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %call21, i64 0, i32 1, i64 3, i32 0
  %file.c = ptrtoint i8* %file to i64
  store i64 %file.c, i64* %9, align 8, !tbaa !7
  %arrayidx28 = getelementptr inbounds %struct.rtx_def* %call21, i64 0, i32 1, i64 4
  %rtint29 = bitcast %union.rtunion_def* %arrayidx28 to i32*
  store i32 %line, i32* %rtint29, align 4, !tbaa !1
  %10 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %10, i64 0, i32 3
  %11 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_last_insn.i = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 3
  %12 = load %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %13 = getelementptr inbounds %struct.rtx_def* %call21, i64 0, i32 1, i64 1, i32 0
  %.c.i = ptrtoint %struct.rtx_def* %12 to i64
  store i64 %.c.i, i64* %13, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.rtx_def* %call21, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %14, align 8, !tbaa !7
  %15 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i = getelementptr inbounds %struct.function* %15, i64 0, i32 3
  %16 = load %struct.emit_status** %emit4.i, align 8, !tbaa !10
  %x_last_insn5.i = getelementptr inbounds %struct.emit_status* %16, i64 0, i32 3
  %17 = load %struct.rtx_def** %x_last_insn5.i, align 8, !tbaa !46
  %cmp.i = icmp eq %struct.rtx_def* %17, null
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.end20
  %18 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 1, i64 2, i32 0
  %insn.c.i = ptrtoint %struct.rtx_def* %call21 to i64
  store i64 %insn.c.i, i64* %18, align 8, !tbaa !7
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 3
  %.pre23.i = load %struct.emit_status** %emit11.phi.trans.insert.i, align 8, !tbaa !10
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.end20
  %19 = phi %struct.emit_status* [ %16, %if.end20 ], [ %.pre23.i, %if.then.i ]
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %19, i64 0, i32 2
  %20 = load %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %cmp12.i = icmp eq %struct.rtx_def* %20, null
  br i1 %cmp12.i, label %if.then13.i, label %add_insn.exit

if.then13.i:                                      ; preds = %if.end.i
  store %struct.rtx_def* %call21, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %.pre24.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre24.i, i64 0, i32 3
  %.pre25.i = load %struct.emit_status** %emit17.phi.trans.insert.i, align 8, !tbaa !10
  br label %add_insn.exit

add_insn.exit:                                    ; preds = %if.end.i, %if.then13.i
  %21 = phi %struct.emit_status* [ %.pre25.i, %if.then13.i ], [ %19, %if.end.i ]
  %x_last_insn18.i = getelementptr inbounds %struct.emit_status* %21, i64 0, i32 3
  store %struct.rtx_def* %call21, %struct.rtx_def** %x_last_insn18.i, align 8, !tbaa !46
  br label %return

return:                                           ; preds = %land.lhs.true6, %add_insn.exit, %if.then18
  %retval.0 = phi %struct.rtx_def* [ null, %if.then18 ], [ %call21, %add_insn.exit ], [ null, %land.lhs.true6 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #7

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit_line_note_force(i8* %file, i32 %line) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_linenum = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 7
  store i32 -1, i32* %x_last_linenum, align 4, !tbaa !64
  tail call void @set_file_and_line_for_stmt(i8* %file, i32 %line) #4
  %call.i = tail call %struct.rtx_def* @emit_note(i8* %file, i32 %line) #4
  ret %struct.rtx_def* %call.i
}

; Function Attrs: nounwind uwtable
define void @force_next_line_note() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_last_linenum = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 7
  store i32 -1, i32* %x_last_linenum, align 4, !tbaa !64
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %insn, i32 %kind, %struct.rtx_def* %datum) #0 {
entry:
  %call = tail call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %insn, i32 %kind, %struct.rtx_def* null) #4
  %.off = add i32 %kind, -3
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %sw.bb, label %sw.epilog

sw.bb:                                            ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 39
  br i1 %cmp, label %land.lhs.true, label %if.end4

land.lhs.true:                                    ; preds = %sw.bb
  %call1 = tail call i32 @multiple_sets(%struct.rtx_def* %insn) #4
  %tobool = icmp eq i32 %call1, 0
  br i1 %tobool, label %if.end4, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %tobool2 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool2, label %return, label %if.then3

if.then3:                                         ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 4335, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.set_unique_reg_note, i64 0, i64 0)) #8
  unreachable

if.end4:                                          ; preds = %land.lhs.true, %sw.bb
  %2 = getelementptr inbounds %struct.rtx_def* %datum, i64 0, i32 0
  %bf.load5 = load i32* %2, align 8
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 41
  br i1 %cmp7, label %return, label %sw.epilog

sw.epilog:                                        ; preds = %entry, %if.end4
  %tobool10 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool10, label %if.end15, label %if.then11

if.then11:                                        ; preds = %sw.epilog
  %3 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0, i32 0
  %datum.c = ptrtoint %struct.rtx_def* %datum to i64
  store i64 %datum.c, i64* %3, align 8, !tbaa !7
  br label %return

if.end15:                                         ; preds = %sw.epilog
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx18, align 8, !tbaa !7
  %call19 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 %kind, %struct.rtx_def* %datum, %struct.rtx_def* %4) #4
  %5 = getelementptr inbounds %union.rtunion_def* %arrayidx17, i64 0, i32 0
  %call19.c = ptrtoint %struct.rtx_def* %call19 to i64
  store i64 %call19.c, i64* %5, align 8, !tbaa !7
  br label %return

return:                                           ; preds = %if.end4, %if.then, %if.end15, %if.then11
  %retval.0 = phi %struct.rtx_def* [ %call, %if.then11 ], [ %call19, %if.end15 ], [ null, %if.then ], [ null, %if.end4 ]
  ret %struct.rtx_def* %retval.0
}

declare i32 @multiple_sets(%struct.rtx_def*) #1

; Function Attrs: nounwind readonly uwtable
define i32 @classify_insn(%struct.rtx_def* nocapture readonly %x) #5 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.end89 [
    i32 36, label %return
    i32 50, label %if.then4
    i32 51, label %if.then9
    i32 47, label %if.then14
    i32 39, label %if.then29
  ]

if.then4:                                         ; preds = %entry
  br label %return

if.then9:                                         ; preds = %entry
  br label %return

if.then14:                                        ; preds = %entry
  %fld = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %2 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !tbaa !7
  %cmp15 = icmp eq %struct.rtx_def* %1, %2
  br i1 %cmp15, label %return, label %if.else

if.else:                                          ; preds = %if.then14
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx19, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 0
  %bf.load20 = load i32* %4, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 50
  %. = select i1 %cmp22, i32 34, i32 32
  br label %return

if.then29:                                        ; preds = %entry
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtvec_def**
  %5 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %num_elem = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 0
  %6 = load i32* %num_elem, align 4, !tbaa !50
  %cmp32108 = icmp sgt i32 %6, 0
  br i1 %cmp32108, label %for.body.lr.ph, label %if.end89

for.body.lr.ph:                                   ; preds = %if.then29
  %7 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !tbaa !7
  %8 = sext i32 %6 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv = phi i64 [ %8, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.backedge ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx36 = getelementptr inbounds %struct.rtvec_def* %5, i64 0, i32 1, i64 %indvars.iv.next
  %9 = load %struct.rtx_def** %arrayidx36, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load37 = load i32* %10, align 8
  %bf.clear38 = and i32 %bf.load37, 65535
  switch i32 %bf.clear38, label %for.cond.backedge [
    i32 50, label %return
    i32 47, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %for.body
  %arrayidx58 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 0
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx59, align 8, !tbaa !7
  %cmp60 = icmp eq %struct.rtx_def* %11, %7
  br i1 %cmp60, label %return, label %land.lhs.true72

for.cond.backedge:                                ; preds = %for.body, %land.lhs.true72
  %12 = trunc i64 %indvars.iv.next to i32
  %cmp32 = icmp sgt i32 %12, 0
  br i1 %cmp32, label %for.body, label %if.end89

land.lhs.true72:                                  ; preds = %land.lhs.true
  %arrayidx80 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 1, i64 1
  %rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx81, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 0
  %bf.load82 = load i32* %14, align 8
  %bf.clear83 = and i32 %bf.load82, 65535
  %cmp84 = icmp eq i32 %bf.clear83, 50
  br i1 %cmp84, label %return, label %for.cond.backedge

if.end89:                                         ; preds = %for.cond.backedge, %if.then29, %entry
  br label %return

return:                                           ; preds = %land.lhs.true72, %land.lhs.true, %for.body, %entry, %if.else, %if.then14, %if.end89, %if.then9, %if.then4
  %retval.0 = phi i32 [ 34, %if.then4 ], [ 33, %if.then9 ], [ 32, %if.end89 ], [ 36, %entry ], [ 33, %if.then14 ], [ %., %if.else ], [ 34, %land.lhs.true72 ], [ 33, %land.lhs.true ], [ 34, %for.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @emit(%struct.rtx_def* %x) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load.i = load i32* %0, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  switch i32 %bf.clear.i, label %if.then3 [
    i32 36, label %if.then
    i32 50, label %if.else.i29
    i32 51, label %if.else.i71
    i32 47, label %if.then14.i
    i32 39, label %if.then29.i
  ]

if.then14.i:                                      ; preds = %entry
  %fld.i = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx.i = bitcast [1 x %union.rtunion_def]* %fld.i to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !7
  %2 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !tbaa !7
  %cmp15.i = icmp eq %struct.rtx_def* %1, %2
  br i1 %cmp15.i, label %if.else.i71, label %classify_insn.exit

if.then29.i:                                      ; preds = %entry
  %arrayidx31.i = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtvec.i = bitcast %union.rtunion_def* %arrayidx31.i to %struct.rtvec_def**
  %3 = load %struct.rtvec_def** %rtvec.i, align 8, !tbaa !7
  %num_elem.i = getelementptr inbounds %struct.rtvec_def* %3, i64 0, i32 0
  %4 = load i32* %num_elem.i, align 4, !tbaa !50
  %cmp32108.i = icmp sgt i32 %4, 0
  br i1 %cmp32108.i, label %for.body.lr.ph.i, label %if.then3

for.body.lr.ph.i:                                 ; preds = %if.then29.i
  %5 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !tbaa !7
  %6 = sext i32 %4 to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.cond.backedge.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ %6, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.cond.backedge.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, -1
  %arrayidx36.i = getelementptr inbounds %struct.rtvec_def* %3, i64 0, i32 1, i64 %indvars.iv.next.i
  %7 = load %struct.rtx_def** %arrayidx36.i, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load37.i = load i32* %8, align 8
  %bf.clear38.i = and i32 %bf.load37.i, 65535
  switch i32 %bf.clear38.i, label %for.cond.backedge.i [
    i32 50, label %if.then15
    i32 47, label %land.lhs.true.i
  ]

land.lhs.true.i:                                  ; preds = %for.body.i
  %arrayidx58.i = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0
  %rtx59.i = bitcast %union.rtunion_def* %arrayidx58.i to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx59.i, align 8, !tbaa !7
  %cmp60.i = icmp eq %struct.rtx_def* %9, %5
  br i1 %cmp60.i, label %if.then7, label %land.lhs.true72.i

for.cond.backedge.i:                              ; preds = %land.lhs.true72.i, %for.body.i
  %10 = trunc i64 %indvars.iv.next.i to i32
  %cmp32.i = icmp sgt i32 %10, 0
  br i1 %cmp32.i, label %for.body.i, label %if.then3

land.lhs.true72.i:                                ; preds = %land.lhs.true.i
  %arrayidx80.i = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 1
  %rtx81.i = bitcast %union.rtunion_def* %arrayidx80.i to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx81.i, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load82.i = load i32* %12, align 8
  %bf.clear83.i = and i32 %bf.load82.i, 65535
  %cmp84.i = icmp eq i32 %bf.clear83.i, 50
  br i1 %cmp84.i, label %if.then15, label %for.cond.backedge.i

classify_insn.exit:                               ; preds = %if.then14.i
  %arrayidx18.i = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx19.i = bitcast %union.rtunion_def* %arrayidx18.i to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx19.i, align 8, !tbaa !7
  %14 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 0
  %bf.load20.i = load i32* %14, align 8
  %bf.clear21.i = and i32 %bf.load20.i, 65535
  %cmp22.i = icmp eq i32 %bf.clear21.i, 50
  br i1 %cmp22.i, label %if.else.i29, label %if.then3

if.then:                                          ; preds = %entry
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  %15 = load i32* %rtint.i, align 4, !tbaa !1
  %cmp.i31 = icmp eq i32 %15, 0
  br i1 %cmp.i31, label %if.then.i37, label %return

if.then.i37:                                      ; preds = %if.then
  %16 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %16, i64 0, i32 3
  %17 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_cur_insn_uid.i = getelementptr inbounds %struct.emit_status* %17, i64 0, i32 6
  %18 = load i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  %inc.i = add nsw i32 %18, 1
  store i32 %inc.i, i32* %x_cur_insn_uid.i, align 4, !tbaa !47
  store i32 %18, i32* %rtint.i, align 4, !tbaa !1
  %x_last_insn.i.i32 = getelementptr inbounds %struct.emit_status* %17, i64 0, i32 3
  %19 = load %struct.rtx_def** %x_last_insn.i.i32, align 8, !tbaa !46
  %20 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1, i32 0
  %.c.i.i33 = ptrtoint %struct.rtx_def* %19 to i64
  store i64 %.c.i.i33, i64* %20, align 8, !tbaa !7
  %21 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %21, align 8, !tbaa !7
  %22 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i.i34 = getelementptr inbounds %struct.function* %22, i64 0, i32 3
  %23 = load %struct.emit_status** %emit4.i.i34, align 8, !tbaa !10
  %x_last_insn5.i.i35 = getelementptr inbounds %struct.emit_status* %23, i64 0, i32 3
  %24 = load %struct.rtx_def** %x_last_insn5.i.i35, align 8, !tbaa !46
  %cmp.i.i36 = icmp eq %struct.rtx_def* %24, null
  br i1 %cmp.i.i36, label %if.end.i.i45, label %if.then.i.i42

if.then.i.i42:                                    ; preds = %if.then.i37
  %25 = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 1, i64 2, i32 0
  %insn.c.i.i38 = ptrtoint %struct.rtx_def* %x to i64
  store i64 %insn.c.i.i38, i64* %25, align 8, !tbaa !7
  %.pre.i.i39 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i.i40 = getelementptr inbounds %struct.function* %.pre.i.i39, i64 0, i32 3
  %.pre23.i.i41 = load %struct.emit_status** %emit11.phi.trans.insert.i.i40, align 8, !tbaa !10
  br label %if.end.i.i45

if.end.i.i45:                                     ; preds = %if.then.i.i42, %if.then.i37
  %26 = phi %struct.emit_status* [ %23, %if.then.i37 ], [ %.pre23.i.i41, %if.then.i.i42 ]
  %x_first_insn.i.i43 = getelementptr inbounds %struct.emit_status* %26, i64 0, i32 2
  %27 = load %struct.rtx_def** %x_first_insn.i.i43, align 8, !tbaa !45
  %cmp12.i.i44 = icmp eq %struct.rtx_def* %27, null
  br i1 %cmp12.i.i44, label %if.then13.i.i49, label %add_insn.exit.i51

if.then13.i.i49:                                  ; preds = %if.end.i.i45
  store %struct.rtx_def* %x, %struct.rtx_def** %x_first_insn.i.i43, align 8, !tbaa !45
  %.pre24.i.i46 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i.i47 = getelementptr inbounds %struct.function* %.pre24.i.i46, i64 0, i32 3
  %.pre25.i.i48 = load %struct.emit_status** %emit17.phi.trans.insert.i.i47, align 8, !tbaa !10
  br label %add_insn.exit.i51

add_insn.exit.i51:                                ; preds = %if.then13.i.i49, %if.end.i.i45
  %28 = phi %struct.emit_status* [ %.pre25.i.i48, %if.then13.i.i49 ], [ %26, %if.end.i.i45 ]
  %x_last_insn18.i.i50 = getelementptr inbounds %struct.emit_status* %28, i64 0, i32 3
  store %struct.rtx_def* %x, %struct.rtx_def** %x_last_insn18.i.i50, align 8, !tbaa !46
  br label %return

if.then3:                                         ; preds = %for.cond.backedge.i, %classify_insn.exit, %if.then29.i, %entry
  %call4 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %x)
  br label %return

if.then7:                                         ; preds = %land.lhs.true.i
  %cmp.i54 = icmp eq i32 %bf.clear.i, 24
  br i1 %cmp.i54, label %if.then.i56, label %if.else.i71

if.then.i56:                                      ; preds = %if.then7
  %call.i55 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %x) #4
  br label %emit_jump_insn.exit

if.else.i71:                                      ; preds = %if.then14.i, %entry, %if.then7
  %call.i.i57 = tail call %struct.rtx_def* @rtx_alloc(i32 33) #4
  %29 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i.i58 = getelementptr inbounds %struct.function* %29, i64 0, i32 3
  %30 = load %struct.emit_status** %emit.i.i58, align 8, !tbaa !10
  %x_cur_insn_uid.i.i59 = getelementptr inbounds %struct.emit_status* %30, i64 0, i32 6
  %31 = load i32* %x_cur_insn_uid.i.i59, align 4, !tbaa !47
  %inc.i.i60 = add nsw i32 %31, 1
  store i32 %inc.i.i60, i32* %x_cur_insn_uid.i.i59, align 4, !tbaa !47
  %fld.i.i61 = getelementptr inbounds %struct.rtx_def* %call.i.i57, i64 0, i32 1
  %rtint.i.i62 = bitcast [1 x %union.rtunion_def]* %fld.i.i61 to i32*
  store i32 %31, i32* %rtint.i.i62, align 4, !tbaa !1
  %32 = getelementptr inbounds %struct.rtx_def* %call.i.i57, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i.i63 = ptrtoint %struct.rtx_def* %x to i64
  store i64 %pattern.c.i.i63, i64* %32, align 8, !tbaa !7
  %arrayidx4.i.i64 = getelementptr inbounds %struct.rtx_def* %call.i.i57, i64 0, i32 1, i64 4
  %rtint5.i.i65 = bitcast %union.rtunion_def* %arrayidx4.i.i64 to i32*
  store i32 -1, i32* %rtint5.i.i65, align 4, !tbaa !1
  %33 = getelementptr inbounds %struct.rtx_def* %call.i.i57, i64 0, i32 1, i64 5, i32 0
  %34 = bitcast i64* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 24, i32 8, i1 false) #4
  %35 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i4.i = getelementptr inbounds %struct.function* %35, i64 0, i32 3
  %36 = load %struct.emit_status** %emit.i4.i, align 8, !tbaa !10
  %x_last_insn.i.i66 = getelementptr inbounds %struct.emit_status* %36, i64 0, i32 3
  %37 = load %struct.rtx_def** %x_last_insn.i.i66, align 8, !tbaa !46
  %38 = getelementptr inbounds %struct.rtx_def* %call.i.i57, i64 0, i32 1, i64 1, i32 0
  %.c.i.i67 = ptrtoint %struct.rtx_def* %37 to i64
  store i64 %.c.i.i67, i64* %38, align 8, !tbaa !7
  %39 = getelementptr inbounds %struct.rtx_def* %call.i.i57, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %39, align 8, !tbaa !7
  %40 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i.i68 = getelementptr inbounds %struct.function* %40, i64 0, i32 3
  %41 = load %struct.emit_status** %emit4.i.i68, align 8, !tbaa !10
  %x_last_insn5.i.i69 = getelementptr inbounds %struct.emit_status* %41, i64 0, i32 3
  %42 = load %struct.rtx_def** %x_last_insn5.i.i69, align 8, !tbaa !46
  %cmp.i.i70 = icmp eq %struct.rtx_def* %42, null
  br i1 %cmp.i.i70, label %if.end.i.i79, label %if.then.i.i76

if.then.i.i76:                                    ; preds = %if.else.i71
  %43 = getelementptr inbounds %struct.rtx_def* %42, i64 0, i32 1, i64 2, i32 0
  %insn.c.i.i72 = ptrtoint %struct.rtx_def* %call.i.i57 to i64
  store i64 %insn.c.i.i72, i64* %43, align 8, !tbaa !7
  %.pre.i.i73 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i.i74 = getelementptr inbounds %struct.function* %.pre.i.i73, i64 0, i32 3
  %.pre23.i.i75 = load %struct.emit_status** %emit11.phi.trans.insert.i.i74, align 8, !tbaa !10
  br label %if.end.i.i79

if.end.i.i79:                                     ; preds = %if.then.i.i76, %if.else.i71
  %44 = phi %struct.emit_status* [ %41, %if.else.i71 ], [ %.pre23.i.i75, %if.then.i.i76 ]
  %x_first_insn.i.i77 = getelementptr inbounds %struct.emit_status* %44, i64 0, i32 2
  %45 = load %struct.rtx_def** %x_first_insn.i.i77, align 8, !tbaa !45
  %cmp12.i.i78 = icmp eq %struct.rtx_def* %45, null
  br i1 %cmp12.i.i78, label %if.then13.i.i83, label %add_insn.exit.i85

if.then13.i.i83:                                  ; preds = %if.end.i.i79
  store %struct.rtx_def* %call.i.i57, %struct.rtx_def** %x_first_insn.i.i77, align 8, !tbaa !45
  %.pre24.i.i80 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i.i81 = getelementptr inbounds %struct.function* %.pre24.i.i80, i64 0, i32 3
  %.pre25.i.i82 = load %struct.emit_status** %emit17.phi.trans.insert.i.i81, align 8, !tbaa !10
  br label %add_insn.exit.i85

add_insn.exit.i85:                                ; preds = %if.then13.i.i83, %if.end.i.i79
  %46 = phi %struct.emit_status* [ %.pre25.i.i82, %if.then13.i.i83 ], [ %44, %if.end.i.i79 ]
  %x_last_insn18.i.i84 = getelementptr inbounds %struct.emit_status* %46, i64 0, i32 3
  store %struct.rtx_def* %call.i.i57, %struct.rtx_def** %x_last_insn18.i.i84, align 8, !tbaa !46
  br label %emit_jump_insn.exit

emit_jump_insn.exit:                              ; preds = %if.then.i56, %add_insn.exit.i85
  %retval.0.i86 = phi %struct.rtx_def* [ %call.i55, %if.then.i56 ], [ %call.i.i57, %add_insn.exit.i85 ]
  %call9 = tail call i32 @any_uncondjump_p(%struct.rtx_def* %retval.0.i86) #4
  %tobool = icmp eq i32 %call9, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then11

lor.lhs.false:                                    ; preds = %emit_jump_insn.exit
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp10 = icmp eq i32 %bf.clear, 51
  br i1 %cmp10, label %if.then11, label %return

if.then11:                                        ; preds = %emit_jump_insn.exit, %lor.lhs.false
  %call.i87 = tail call %struct.rtx_def* @rtx_alloc(i32 35) #4
  %47 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i88 = getelementptr inbounds %struct.function* %47, i64 0, i32 3
  %48 = load %struct.emit_status** %emit.i88, align 8, !tbaa !10
  %x_cur_insn_uid.i89 = getelementptr inbounds %struct.emit_status* %48, i64 0, i32 6
  %49 = load i32* %x_cur_insn_uid.i89, align 4, !tbaa !47
  %inc.i90 = add nsw i32 %49, 1
  store i32 %inc.i90, i32* %x_cur_insn_uid.i89, align 4, !tbaa !47
  %arrayidx.i91 = getelementptr inbounds %struct.rtx_def* %call.i87, i64 0, i32 1, i64 0
  %rtint.i92 = bitcast %union.rtunion_def* %arrayidx.i91 to i32*
  store i32 %49, i32* %rtint.i92, align 4, !tbaa !1
  %x_last_insn.i.i93 = getelementptr inbounds %struct.emit_status* %48, i64 0, i32 3
  %50 = load %struct.rtx_def** %x_last_insn.i.i93, align 8, !tbaa !46
  %51 = getelementptr inbounds %struct.rtx_def* %call.i87, i64 0, i32 1, i64 1, i32 0
  %.c.i.i94 = ptrtoint %struct.rtx_def* %50 to i64
  store i64 %.c.i.i94, i64* %51, align 8, !tbaa !7
  %52 = getelementptr inbounds %struct.rtx_def* %call.i87, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %52, align 8, !tbaa !7
  %53 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i.i95 = getelementptr inbounds %struct.function* %53, i64 0, i32 3
  %54 = load %struct.emit_status** %emit4.i.i95, align 8, !tbaa !10
  %x_last_insn5.i.i96 = getelementptr inbounds %struct.emit_status* %54, i64 0, i32 3
  %55 = load %struct.rtx_def** %x_last_insn5.i.i96, align 8, !tbaa !46
  %cmp.i.i97 = icmp eq %struct.rtx_def* %55, null
  br i1 %cmp.i.i97, label %if.end.i.i105, label %if.then.i.i102

if.then.i.i102:                                   ; preds = %if.then11
  %56 = getelementptr inbounds %struct.rtx_def* %55, i64 0, i32 1, i64 2, i32 0
  %insn.c.i.i98 = ptrtoint %struct.rtx_def* %call.i87 to i64
  store i64 %insn.c.i.i98, i64* %56, align 8, !tbaa !7
  %.pre.i.i99 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i.i100 = getelementptr inbounds %struct.function* %.pre.i.i99, i64 0, i32 3
  %.pre23.i.i101 = load %struct.emit_status** %emit11.phi.trans.insert.i.i100, align 8, !tbaa !10
  br label %if.end.i.i105

if.end.i.i105:                                    ; preds = %if.then.i.i102, %if.then11
  %57 = phi %struct.emit_status* [ %54, %if.then11 ], [ %.pre23.i.i101, %if.then.i.i102 ]
  %x_first_insn.i.i103 = getelementptr inbounds %struct.emit_status* %57, i64 0, i32 2
  %58 = load %struct.rtx_def** %x_first_insn.i.i103, align 8, !tbaa !45
  %cmp12.i.i104 = icmp eq %struct.rtx_def* %58, null
  br i1 %cmp12.i.i104, label %if.then13.i.i109, label %emit_barrier.exit

if.then13.i.i109:                                 ; preds = %if.end.i.i105
  store %struct.rtx_def* %call.i87, %struct.rtx_def** %x_first_insn.i.i103, align 8, !tbaa !45
  %.pre24.i.i106 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i.i107 = getelementptr inbounds %struct.function* %.pre24.i.i106, i64 0, i32 3
  %.pre25.i.i108 = load %struct.emit_status** %emit17.phi.trans.insert.i.i107, align 8, !tbaa !10
  br label %emit_barrier.exit

emit_barrier.exit:                                ; preds = %if.end.i.i105, %if.then13.i.i109
  %59 = phi %struct.emit_status* [ %.pre25.i.i108, %if.then13.i.i109 ], [ %57, %if.end.i.i105 ]
  %x_last_insn18.i.i110 = getelementptr inbounds %struct.emit_status* %59, i64 0, i32 3
  store %struct.rtx_def* %call.i87, %struct.rtx_def** %x_last_insn18.i.i110, align 8, !tbaa !46
  br label %return

if.then15:                                        ; preds = %for.body.i, %land.lhs.true72.i
  %cmp.i = icmp eq i32 %bf.clear.i, 24
  br i1 %cmp.i, label %if.then.i, label %if.else.i29

if.then.i:                                        ; preds = %if.then15
  %call.i = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %x) #4
  br label %return

if.else.i29:                                      ; preds = %entry, %classify_insn.exit, %if.then15
  %call.i.i = tail call %struct.rtx_def* @rtx_alloc(i32 34) #4
  %60 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i.i = getelementptr inbounds %struct.function* %60, i64 0, i32 3
  %61 = load %struct.emit_status** %emit.i.i, align 8, !tbaa !10
  %x_cur_insn_uid.i.i = getelementptr inbounds %struct.emit_status* %61, i64 0, i32 6
  %62 = load i32* %x_cur_insn_uid.i.i, align 4, !tbaa !47
  %inc.i.i = add nsw i32 %62, 1
  store i32 %inc.i.i, i32* %x_cur_insn_uid.i.i, align 4, !tbaa !47
  %fld.i.i = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1
  %rtint.i.i = bitcast [1 x %union.rtunion_def]* %fld.i.i to i32*
  store i32 %62, i32* %rtint.i.i, align 4, !tbaa !1
  %63 = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 3, i32 0
  %pattern.c.i.i = ptrtoint %struct.rtx_def* %x to i64
  store i64 %pattern.c.i.i, i64* %63, align 8, !tbaa !7
  %arrayidx4.i.i = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 4
  %rtint5.i.i = bitcast %union.rtunion_def* %arrayidx4.i.i to i32*
  store i32 -1, i32* %rtint5.i.i, align 4, !tbaa !1
  %64 = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 5, i32 0
  %65 = bitcast i64* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %65, i8 0, i64 24, i32 8, i1 false) #4
  %66 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i7.i = getelementptr inbounds %struct.function* %66, i64 0, i32 3
  %67 = load %struct.emit_status** %emit.i7.i, align 8, !tbaa !10
  %x_last_insn.i.i = getelementptr inbounds %struct.emit_status* %67, i64 0, i32 3
  %68 = load %struct.rtx_def** %x_last_insn.i.i, align 8, !tbaa !46
  %69 = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 1, i32 0
  %.c.i.i = ptrtoint %struct.rtx_def* %68 to i64
  store i64 %.c.i.i, i64* %69, align 8, !tbaa !7
  %70 = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 2, i32 0
  store i64 0, i64* %70, align 8, !tbaa !7
  %71 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4.i.i = getelementptr inbounds %struct.function* %71, i64 0, i32 3
  %72 = load %struct.emit_status** %emit4.i.i, align 8, !tbaa !10
  %x_last_insn5.i.i = getelementptr inbounds %struct.emit_status* %72, i64 0, i32 3
  %73 = load %struct.rtx_def** %x_last_insn5.i.i, align 8, !tbaa !46
  %cmp.i.i = icmp eq %struct.rtx_def* %73, null
  br i1 %cmp.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.else.i29
  %74 = getelementptr inbounds %struct.rtx_def* %73, i64 0, i32 1, i64 2, i32 0
  %insn.c.i.i = ptrtoint %struct.rtx_def* %call.i.i to i64
  store i64 %insn.c.i.i, i64* %74, align 8, !tbaa !7
  %.pre.i.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit11.phi.trans.insert.i.i = getelementptr inbounds %struct.function* %.pre.i.i, i64 0, i32 3
  %.pre23.i.i = load %struct.emit_status** %emit11.phi.trans.insert.i.i, align 8, !tbaa !10
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %if.else.i29
  %75 = phi %struct.emit_status* [ %72, %if.else.i29 ], [ %.pre23.i.i, %if.then.i.i ]
  %x_first_insn.i.i = getelementptr inbounds %struct.emit_status* %75, i64 0, i32 2
  %76 = load %struct.rtx_def** %x_first_insn.i.i, align 8, !tbaa !45
  %cmp12.i.i = icmp eq %struct.rtx_def* %76, null
  br i1 %cmp12.i.i, label %if.then13.i.i, label %add_insn.exit.i

if.then13.i.i:                                    ; preds = %if.end.i.i
  store %struct.rtx_def* %call.i.i, %struct.rtx_def** %x_first_insn.i.i, align 8, !tbaa !45
  %.pre24.i.i = load %struct.function** @cfun, align 8, !tbaa !7
  %emit17.phi.trans.insert.i.i = getelementptr inbounds %struct.function* %.pre24.i.i, i64 0, i32 3
  %.pre25.i.i = load %struct.emit_status** %emit17.phi.trans.insert.i.i, align 8, !tbaa !10
  br label %add_insn.exit.i

add_insn.exit.i:                                  ; preds = %if.then13.i.i, %if.end.i.i
  %77 = phi %struct.emit_status* [ %.pre25.i.i, %if.then13.i.i ], [ %75, %if.end.i.i ]
  %x_last_insn18.i.i = getelementptr inbounds %struct.emit_status* %77, i64 0, i32 3
  store %struct.rtx_def* %call.i.i, %struct.rtx_def** %x_last_insn18.i.i, align 8, !tbaa !46
  %78 = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 0
  %bf.load2.i = load i32* %78, align 8
  %bf.clear3.i = and i32 %bf.load2.i, -65536
  %bf.set.i = or i32 %bf.clear3.i, 34
  store i32 %bf.set.i, i32* %78, align 8
  br label %return

return:                                           ; preds = %add_insn.exit.i, %if.then.i, %add_insn.exit.i51, %if.then, %lor.lhs.false, %emit_barrier.exit, %if.then3
  %retval.0 = phi %struct.rtx_def* [ %call4, %if.then3 ], [ %call.i87, %emit_barrier.exit ], [ %retval.0.i86, %lor.lhs.false ], [ %x, %if.then ], [ %x, %add_insn.exit.i51 ], [ %call.i, %if.then.i ], [ %call.i.i, %add_insn.exit.i ]
  ret %struct.rtx_def* %retval.0
}

declare i32 @any_uncondjump_p(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @start_sequence() #0 {
entry:
  %call = tail call noalias i8* @xmalloc(i64 32) #4
  %0 = bitcast i8* %call to %struct.sequence_stack*
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %sequence_stack = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 5
  %3 = load %struct.sequence_stack** %sequence_stack, align 8, !tbaa !65
  %next = getelementptr inbounds i8* %call, i64 24
  %4 = bitcast i8* %next to %struct.sequence_stack**
  store %struct.sequence_stack* %3, %struct.sequence_stack** %4, align 8, !tbaa !66
  %x_first_insn = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 2
  %5 = bitcast %struct.rtx_def** %x_first_insn to <2 x %struct.rtx_def*>*
  %6 = load <2 x %struct.rtx_def*>* %5, align 8, !tbaa !7
  %7 = bitcast i8* %call to <2 x %struct.rtx_def*>*
  store <2 x %struct.rtx_def*> %6, <2 x %struct.rtx_def*>* %7, align 8, !tbaa !7
  %sequence_rtl_expr = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 4
  %8 = load %union.tree_node** %sequence_rtl_expr, align 8, !tbaa !67
  %sequence_rtl_expr4 = getelementptr inbounds i8* %call, i64 16
  %9 = bitcast i8* %sequence_rtl_expr4 to %union.tree_node**
  store %union.tree_node* %8, %union.tree_node** %9, align 8, !tbaa !68
  store %struct.sequence_stack* %0, %struct.sequence_stack** %sequence_stack, align 8, !tbaa !65
  %10 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit7 = getelementptr inbounds %struct.function* %10, i64 0, i32 3
  %11 = load %struct.emit_status** %emit7, align 8, !tbaa !10
  %x_first_insn8 = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %x_first_insn8, align 8, !tbaa !45
  %12 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit9 = getelementptr inbounds %struct.function* %12, i64 0, i32 3
  %13 = load %struct.emit_status** %emit9, align 8, !tbaa !10
  %x_last_insn10 = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_insn10, align 8, !tbaa !46
  ret void
}

declare noalias i8* @xmalloc(i64) #1

; Function Attrs: nounwind uwtable
define void @start_sequence_for_rtl_expr(%union.tree_node* %t) #0 {
entry:
  %call.i = tail call noalias i8* @xmalloc(i64 32) #4
  %0 = bitcast i8* %call.i to %struct.sequence_stack*
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %sequence_stack.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 5
  %3 = load %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %next.i = getelementptr inbounds i8* %call.i, i64 24
  %4 = bitcast i8* %next.i to %struct.sequence_stack**
  store %struct.sequence_stack* %3, %struct.sequence_stack** %4, align 8, !tbaa !66
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 2
  %5 = bitcast %struct.rtx_def** %x_first_insn.i to <2 x %struct.rtx_def*>*
  %6 = load <2 x %struct.rtx_def*>* %5, align 8, !tbaa !7
  %7 = bitcast i8* %call.i to <2 x %struct.rtx_def*>*
  store <2 x %struct.rtx_def*> %6, <2 x %struct.rtx_def*>* %7, align 8, !tbaa !7
  %sequence_rtl_expr.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 4
  %8 = load %union.tree_node** %sequence_rtl_expr.i, align 8, !tbaa !67
  %sequence_rtl_expr4.i = getelementptr inbounds i8* %call.i, i64 16
  %9 = bitcast i8* %sequence_rtl_expr4.i to %union.tree_node**
  store %union.tree_node* %8, %union.tree_node** %9, align 8, !tbaa !68
  store %struct.sequence_stack* %0, %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %10 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit7.i = getelementptr inbounds %struct.function* %10, i64 0, i32 3
  %11 = load %struct.emit_status** %emit7.i, align 8, !tbaa !10
  %x_first_insn8.i = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %x_first_insn8.i, align 8, !tbaa !45
  %12 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit9.i = getelementptr inbounds %struct.function* %12, i64 0, i32 3
  %13 = load %struct.emit_status** %emit9.i, align 8, !tbaa !10
  %x_last_insn10.i = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_insn10.i, align 8, !tbaa !46
  %14 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %14, i64 0, i32 3
  %15 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %sequence_rtl_expr = getelementptr inbounds %struct.emit_status* %15, i64 0, i32 4
  store %union.tree_node* %t, %union.tree_node** %sequence_rtl_expr, align 8, !tbaa !67
  ret void
}

; Function Attrs: nounwind uwtable
define void @push_to_sequence(%struct.rtx_def* %first) #0 {
entry:
  %call.i = tail call noalias i8* @xmalloc(i64 32) #4
  %0 = bitcast i8* %call.i to %struct.sequence_stack*
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %sequence_stack.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 5
  %3 = load %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %next.i = getelementptr inbounds i8* %call.i, i64 24
  %4 = bitcast i8* %next.i to %struct.sequence_stack**
  store %struct.sequence_stack* %3, %struct.sequence_stack** %4, align 8, !tbaa !66
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 2
  %5 = bitcast %struct.rtx_def** %x_first_insn.i to <2 x %struct.rtx_def*>*
  %6 = load <2 x %struct.rtx_def*>* %5, align 8, !tbaa !7
  %7 = bitcast i8* %call.i to <2 x %struct.rtx_def*>*
  store <2 x %struct.rtx_def*> %6, <2 x %struct.rtx_def*>* %7, align 8, !tbaa !7
  %sequence_rtl_expr.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 4
  %8 = load %union.tree_node** %sequence_rtl_expr.i, align 8, !tbaa !67
  %sequence_rtl_expr4.i = getelementptr inbounds i8* %call.i, i64 16
  %9 = bitcast i8* %sequence_rtl_expr4.i to %union.tree_node**
  store %union.tree_node* %8, %union.tree_node** %9, align 8, !tbaa !68
  store %struct.sequence_stack* %0, %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %10 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit7.i = getelementptr inbounds %struct.function* %10, i64 0, i32 3
  %11 = load %struct.emit_status** %emit7.i, align 8, !tbaa !10
  %x_first_insn8.i = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %x_first_insn8.i, align 8, !tbaa !45
  %12 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit9.i = getelementptr inbounds %struct.function* %12, i64 0, i32 3
  %13 = load %struct.emit_status** %emit9.i, align 8, !tbaa !10
  %x_last_insn10.i = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_insn10.i, align 8, !tbaa !46
  br label %for.cond

for.cond:                                         ; preds = %land.rhs, %entry
  %last.0 = phi %struct.rtx_def* [ %first, %entry ], [ %14, %land.rhs ]
  %tobool = icmp eq %struct.rtx_def* %last.0, null
  br i1 %tobool, label %for.end, label %land.rhs

land.rhs:                                         ; preds = %for.cond
  %arrayidx = getelementptr inbounds %struct.rtx_def* %last.0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %tobool1 = icmp eq %struct.rtx_def* %14, null
  br i1 %tobool1, label %for.end, label %for.cond

for.end:                                          ; preds = %land.rhs, %for.cond
  %last.0.lcssa = phi %struct.rtx_def* [ %last.0, %land.rhs ], [ null, %for.cond ]
  %15 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %15, i64 0, i32 3
  %16 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %16, i64 0, i32 2
  store %struct.rtx_def* %first, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %17 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit5 = getelementptr inbounds %struct.function* %17, i64 0, i32 3
  %18 = load %struct.emit_status** %emit5, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %18, i64 0, i32 3
  store %struct.rtx_def* %last.0.lcssa, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  ret void
}

; Function Attrs: nounwind uwtable
define void @push_to_full_sequence(%struct.rtx_def* %first, %struct.rtx_def* %last) #0 {
entry:
  %call.i = tail call noalias i8* @xmalloc(i64 32) #4
  %0 = bitcast i8* %call.i to %struct.sequence_stack*
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %sequence_stack.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 5
  %3 = load %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %next.i = getelementptr inbounds i8* %call.i, i64 24
  %4 = bitcast i8* %next.i to %struct.sequence_stack**
  store %struct.sequence_stack* %3, %struct.sequence_stack** %4, align 8, !tbaa !66
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 2
  %5 = bitcast %struct.rtx_def** %x_first_insn.i to <2 x %struct.rtx_def*>*
  %6 = load <2 x %struct.rtx_def*>* %5, align 8, !tbaa !7
  %7 = bitcast i8* %call.i to <2 x %struct.rtx_def*>*
  store <2 x %struct.rtx_def*> %6, <2 x %struct.rtx_def*>* %7, align 8, !tbaa !7
  %sequence_rtl_expr.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 4
  %8 = load %union.tree_node** %sequence_rtl_expr.i, align 8, !tbaa !67
  %sequence_rtl_expr4.i = getelementptr inbounds i8* %call.i, i64 16
  %9 = bitcast i8* %sequence_rtl_expr4.i to %union.tree_node**
  store %union.tree_node* %8, %union.tree_node** %9, align 8, !tbaa !68
  store %struct.sequence_stack* %0, %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %10 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit7.i = getelementptr inbounds %struct.function* %10, i64 0, i32 3
  %11 = load %struct.emit_status** %emit7.i, align 8, !tbaa !10
  %x_first_insn8.i = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %x_first_insn8.i, align 8, !tbaa !45
  %12 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit9.i = getelementptr inbounds %struct.function* %12, i64 0, i32 3
  %13 = load %struct.emit_status** %emit9.i, align 8, !tbaa !10
  %x_last_insn10.i = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_insn10.i, align 8, !tbaa !46
  %14 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %14, i64 0, i32 3
  %15 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %15, i64 0, i32 2
  store %struct.rtx_def* %first, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %16 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1 = getelementptr inbounds %struct.function* %16, i64 0, i32 3
  %17 = load %struct.emit_status** %emit1, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %17, i64 0, i32 3
  store %struct.rtx_def* %last, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %tobool = icmp eq %struct.rtx_def* %last, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %last, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %tobool2 = icmp eq %struct.rtx_def* %18, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 4491, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.push_to_full_sequence, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @push_topmost_sequence() #0 {
entry:
  %call.i = tail call noalias i8* @xmalloc(i64 32) #4
  %0 = bitcast i8* %call.i to %struct.sequence_stack*
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %sequence_stack.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 5
  %3 = load %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %next.i = getelementptr inbounds i8* %call.i, i64 24
  %4 = bitcast i8* %next.i to %struct.sequence_stack**
  store %struct.sequence_stack* %3, %struct.sequence_stack** %4, align 8, !tbaa !66
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 2
  %5 = bitcast %struct.rtx_def** %x_first_insn.i to <2 x %struct.rtx_def*>*
  %6 = load <2 x %struct.rtx_def*>* %5, align 8, !tbaa !7
  %7 = bitcast i8* %call.i to <2 x %struct.rtx_def*>*
  store <2 x %struct.rtx_def*> %6, <2 x %struct.rtx_def*>* %7, align 8, !tbaa !7
  %sequence_rtl_expr.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 4
  %8 = load %union.tree_node** %sequence_rtl_expr.i, align 8, !tbaa !67
  %sequence_rtl_expr4.i = getelementptr inbounds i8* %call.i, i64 16
  %9 = bitcast i8* %sequence_rtl_expr4.i to %union.tree_node**
  store %union.tree_node* %8, %union.tree_node** %9, align 8, !tbaa !68
  store %struct.sequence_stack* %0, %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %10 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit7.i = getelementptr inbounds %struct.function* %10, i64 0, i32 3
  %11 = load %struct.emit_status** %emit7.i, align 8, !tbaa !10
  %x_first_insn8.i = getelementptr inbounds %struct.emit_status* %11, i64 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %x_first_insn8.i, align 8, !tbaa !45
  %12 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit9.i = getelementptr inbounds %struct.function* %12, i64 0, i32 3
  %13 = load %struct.emit_status** %emit9.i, align 8, !tbaa !10
  %x_last_insn10.i = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_insn10.i, align 8, !tbaa !46
  %14 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %14, i64 0, i32 3
  %15 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %sequence_stack = getelementptr inbounds %struct.emit_status* %15, i64 0, i32 5
  br label %for.cond

for.cond:                                         ; preds = %for.cond, %entry
  %stack.0.in = phi %struct.sequence_stack** [ %sequence_stack, %entry ], [ %next, %for.cond ]
  %top.0 = phi %struct.sequence_stack* [ null, %entry ], [ %stack.0, %for.cond ]
  %stack.0 = load %struct.sequence_stack** %stack.0.in, align 8
  %tobool = icmp eq %struct.sequence_stack* %stack.0, null
  %next = getelementptr inbounds %struct.sequence_stack* %stack.0, i64 0, i32 3
  br i1 %tobool, label %for.end, label %for.cond

for.end:                                          ; preds = %for.cond
  %first = getelementptr inbounds %struct.sequence_stack* %top.0, i64 0, i32 0
  %16 = load %struct.rtx_def** %first, align 8, !tbaa !59
  %x_first_insn = getelementptr inbounds %struct.emit_status* %15, i64 0, i32 2
  store %struct.rtx_def* %16, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %last = getelementptr inbounds %struct.sequence_stack* %top.0, i64 0, i32 1
  %17 = load %struct.rtx_def** %last, align 8, !tbaa !53
  %18 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit2 = getelementptr inbounds %struct.function* %18, i64 0, i32 3
  %19 = load %struct.emit_status** %emit2, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %19, i64 0, i32 3
  store %struct.rtx_def* %17, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %sequence_rtl_expr = getelementptr inbounds %struct.sequence_stack* %top.0, i64 0, i32 2
  %20 = load %union.tree_node** %sequence_rtl_expr, align 8, !tbaa !68
  %21 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit3 = getelementptr inbounds %struct.function* %21, i64 0, i32 3
  %22 = load %struct.emit_status** %emit3, align 8, !tbaa !10
  %sequence_rtl_expr4 = getelementptr inbounds %struct.emit_status* %22, i64 0, i32 4
  store %union.tree_node* %20, %union.tree_node** %sequence_rtl_expr4, align 8, !tbaa !67
  ret void
}

; Function Attrs: nounwind uwtable
define void @pop_topmost_sequence() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %sequence_stack = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 5
  br label %for.cond

for.cond:                                         ; preds = %for.cond, %entry
  %stack.0.in = phi %struct.sequence_stack** [ %sequence_stack, %entry ], [ %next, %for.cond ]
  %top.0 = phi %struct.sequence_stack* [ null, %entry ], [ %stack.0, %for.cond ]
  %stack.0 = load %struct.sequence_stack** %stack.0.in, align 8
  %tobool = icmp eq %struct.sequence_stack* %stack.0, null
  %next = getelementptr inbounds %struct.sequence_stack* %stack.0, i64 0, i32 3
  br i1 %tobool, label %for.end, label %for.cond

for.end:                                          ; preds = %for.cond
  %x_first_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 2
  %2 = load %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %first = getelementptr inbounds %struct.sequence_stack* %top.0, i64 0, i32 0
  store %struct.rtx_def* %2, %struct.rtx_def** %first, align 8, !tbaa !59
  %3 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit2 = getelementptr inbounds %struct.function* %3, i64 0, i32 3
  %4 = load %struct.emit_status** %emit2, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %4, i64 0, i32 3
  %5 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %last = getelementptr inbounds %struct.sequence_stack* %top.0, i64 0, i32 1
  store %struct.rtx_def* %5, %struct.rtx_def** %last, align 8, !tbaa !53
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %6, i64 0, i32 3
  %7 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %sequence_stack.i = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 5
  %8 = load %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %first.i = getelementptr inbounds %struct.sequence_stack* %8, i64 0, i32 0
  %9 = load %struct.rtx_def** %first.i, align 8, !tbaa !59
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 2
  store %struct.rtx_def* %9, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %last.i = getelementptr inbounds %struct.sequence_stack* %8, i64 0, i32 1
  %10 = load %struct.rtx_def** %last.i, align 8, !tbaa !53
  %11 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit2.i = getelementptr inbounds %struct.function* %11, i64 0, i32 3
  %12 = load %struct.emit_status** %emit2.i, align 8, !tbaa !10
  %x_last_insn.i = getelementptr inbounds %struct.emit_status* %12, i64 0, i32 3
  store %struct.rtx_def* %10, %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %sequence_rtl_expr.i = getelementptr inbounds %struct.sequence_stack* %8, i64 0, i32 2
  %13 = load %union.tree_node** %sequence_rtl_expr.i, align 8, !tbaa !68
  %14 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit3.i = getelementptr inbounds %struct.function* %14, i64 0, i32 3
  %15 = load %struct.emit_status** %emit3.i, align 8, !tbaa !10
  %sequence_rtl_expr4.i = getelementptr inbounds %struct.emit_status* %15, i64 0, i32 4
  store %union.tree_node* %13, %union.tree_node** %sequence_rtl_expr4.i, align 8, !tbaa !67
  %next.i = getelementptr inbounds %struct.sequence_stack* %8, i64 0, i32 3
  %16 = load %struct.sequence_stack** %next.i, align 8, !tbaa !66
  %17 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit5.i = getelementptr inbounds %struct.function* %17, i64 0, i32 3
  %18 = load %struct.emit_status** %emit5.i, align 8, !tbaa !10
  %sequence_stack6.i = getelementptr inbounds %struct.emit_status* %18, i64 0, i32 5
  store %struct.sequence_stack* %16, %struct.sequence_stack** %sequence_stack6.i, align 8, !tbaa !65
  %19 = bitcast %struct.sequence_stack* %8 to i8*
  tail call void @free(i8* %19) #4
  ret void
}

; Function Attrs: nounwind uwtable
define void @end_sequence() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %sequence_stack = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 5
  %2 = load %struct.sequence_stack** %sequence_stack, align 8, !tbaa !65
  %first = getelementptr inbounds %struct.sequence_stack* %2, i64 0, i32 0
  %3 = load %struct.rtx_def** %first, align 8, !tbaa !59
  %x_first_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 2
  store %struct.rtx_def* %3, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %last = getelementptr inbounds %struct.sequence_stack* %2, i64 0, i32 1
  %4 = load %struct.rtx_def** %last, align 8, !tbaa !53
  %5 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit2 = getelementptr inbounds %struct.function* %5, i64 0, i32 3
  %6 = load %struct.emit_status** %emit2, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %6, i64 0, i32 3
  store %struct.rtx_def* %4, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %sequence_rtl_expr = getelementptr inbounds %struct.sequence_stack* %2, i64 0, i32 2
  %7 = load %union.tree_node** %sequence_rtl_expr, align 8, !tbaa !68
  %8 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit3 = getelementptr inbounds %struct.function* %8, i64 0, i32 3
  %9 = load %struct.emit_status** %emit3, align 8, !tbaa !10
  %sequence_rtl_expr4 = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 4
  store %union.tree_node* %7, %union.tree_node** %sequence_rtl_expr4, align 8, !tbaa !67
  %next = getelementptr inbounds %struct.sequence_stack* %2, i64 0, i32 3
  %10 = load %struct.sequence_stack** %next, align 8, !tbaa !66
  %11 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit5 = getelementptr inbounds %struct.function* %11, i64 0, i32 3
  %12 = load %struct.emit_status** %emit5, align 8, !tbaa !10
  %sequence_stack6 = getelementptr inbounds %struct.emit_status* %12, i64 0, i32 5
  store %struct.sequence_stack* %10, %struct.sequence_stack** %sequence_stack6, align 8, !tbaa !65
  %13 = bitcast %struct.sequence_stack* %2 to i8*
  tail call void @free(i8* %13)
  ret void
}

; Function Attrs: nounwind uwtable
define void @end_full_sequence(%struct.rtx_def** nocapture %first, %struct.rtx_def** nocapture %last) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 2
  %2 = load %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  store %struct.rtx_def* %2, %struct.rtx_def** %first, align 8, !tbaa !7
  %3 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1 = getelementptr inbounds %struct.function* %3, i64 0, i32 3
  %4 = load %struct.emit_status** %emit1, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %4, i64 0, i32 3
  %5 = load %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  store %struct.rtx_def* %5, %struct.rtx_def** %last, align 8, !tbaa !7
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %6, i64 0, i32 3
  %7 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %sequence_stack.i = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 5
  %8 = load %struct.sequence_stack** %sequence_stack.i, align 8, !tbaa !65
  %first.i = getelementptr inbounds %struct.sequence_stack* %8, i64 0, i32 0
  %9 = load %struct.rtx_def** %first.i, align 8, !tbaa !59
  %x_first_insn.i = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 2
  store %struct.rtx_def* %9, %struct.rtx_def** %x_first_insn.i, align 8, !tbaa !45
  %last.i = getelementptr inbounds %struct.sequence_stack* %8, i64 0, i32 1
  %10 = load %struct.rtx_def** %last.i, align 8, !tbaa !53
  %11 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit2.i = getelementptr inbounds %struct.function* %11, i64 0, i32 3
  %12 = load %struct.emit_status** %emit2.i, align 8, !tbaa !10
  %x_last_insn.i = getelementptr inbounds %struct.emit_status* %12, i64 0, i32 3
  store %struct.rtx_def* %10, %struct.rtx_def** %x_last_insn.i, align 8, !tbaa !46
  %sequence_rtl_expr.i = getelementptr inbounds %struct.sequence_stack* %8, i64 0, i32 2
  %13 = load %union.tree_node** %sequence_rtl_expr.i, align 8, !tbaa !68
  %14 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit3.i = getelementptr inbounds %struct.function* %14, i64 0, i32 3
  %15 = load %struct.emit_status** %emit3.i, align 8, !tbaa !10
  %sequence_rtl_expr4.i = getelementptr inbounds %struct.emit_status* %15, i64 0, i32 4
  store %union.tree_node* %13, %union.tree_node** %sequence_rtl_expr4.i, align 8, !tbaa !67
  %next.i = getelementptr inbounds %struct.sequence_stack* %8, i64 0, i32 3
  %16 = load %struct.sequence_stack** %next.i, align 8, !tbaa !66
  %17 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit5.i = getelementptr inbounds %struct.function* %17, i64 0, i32 3
  %18 = load %struct.emit_status** %emit5.i, align 8, !tbaa !10
  %sequence_stack6.i = getelementptr inbounds %struct.emit_status* %18, i64 0, i32 5
  store %struct.sequence_stack* %16, %struct.sequence_stack** %sequence_stack6.i, align 8, !tbaa !65
  %19 = bitcast %struct.sequence_stack* %8 to i8*
  tail call void @free(i8* %19) #4
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i32 @in_sequence_p() #5 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %sequence_stack = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 5
  %2 = load %struct.sequence_stack** %sequence_stack, align 8, !tbaa !65
  %cmp = icmp ne %struct.sequence_stack* %2, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @gen_sequence() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 2
  %tem.047 = load %struct.rtx_def** %x_first_insn, align 8
  %tobool48 = icmp eq %struct.rtx_def* %tem.047, null
  br i1 %tobool48, label %if.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %tem.050 = phi %struct.rtx_def* [ %tem.0, %for.body ], [ %tem.047, %entry ]
  %len.049 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %inc = add nsw i32 %len.049, 1
  %arrayidx = getelementptr inbounds %struct.rtx_def* %tem.050, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %tem.0 = load %struct.rtx_def** %rtx, align 8
  %tobool = icmp eq %struct.rtx_def* %tem.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %cmp = icmp eq i32 %len.049, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.end
  %2 = getelementptr inbounds %struct.rtx_def* %tem.047, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %3 = and i32 %bf.load, -2147418113
  %4 = icmp eq i32 %3, 32
  br i1 %4, label %land.lhs.true9, label %if.end

land.lhs.true9:                                   ; preds = %land.lhs.true
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %tem.047, i64 0, i32 1, i64 6
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx14, align 8, !tbaa !7
  %cmp15 = icmp eq %struct.rtx_def* %5, null
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true9
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %tem.047, i64 0, i32 1, i64 3
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx20, align 8, !tbaa !7
  br label %return

if.end:                                           ; preds = %entry, %land.lhs.true, %land.lhs.true9, %for.end
  %len.0.lcssa52 = phi i32 [ 1, %land.lhs.true ], [ 1, %land.lhs.true9 ], [ %inc, %for.end ], [ 0, %entry ]
  %call = tail call %struct.rtvec_def* @rtvec_alloc(i32 %len.0.lcssa52) #4
  %call21 = tail call %struct.rtx_def* @gen_rtx_fmt_E(i32 24, i32 0, %struct.rtvec_def* %call) #4
  %7 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit22 = getelementptr inbounds %struct.function* %7, i64 0, i32 3
  %8 = load %struct.emit_status** %emit22, align 8, !tbaa !10
  %x_first_insn23 = getelementptr inbounds %struct.emit_status* %8, i64 0, i32 2
  %tem.143 = load %struct.rtx_def** %x_first_insn23, align 8
  %tobool2544 = icmp eq %struct.rtx_def* %tem.143, null
  br i1 %tobool2544, label %return, label %for.body26.lr.ph

for.body26.lr.ph:                                 ; preds = %if.end
  %arrayidx28 = getelementptr inbounds %struct.rtx_def* %call21, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**
  br label %for.body26

for.body26:                                       ; preds = %for.body26.lr.ph, %for.body26
  %indvars.iv = phi i64 [ 0, %for.body26.lr.ph ], [ %indvars.iv.next, %for.body26 ]
  %tem.146 = phi %struct.rtx_def* [ %tem.143, %for.body26.lr.ph ], [ %tem.1, %for.body26 ]
  %9 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx29 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %tem.146, %struct.rtx_def** %arrayidx29, align 8, !tbaa !7
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %tem.146, i64 0, i32 1, i64 2
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %tem.1 = load %struct.rtx_def** %rtx33, align 8
  %tobool25 = icmp eq %struct.rtx_def* %tem.1, null
  br i1 %tobool25, label %return, label %for.body26

return:                                           ; preds = %for.body26, %if.end, %if.then
  %retval.0 = phi %struct.rtx_def* [ %6, %if.then ], [ %call21, %if.end ], [ %call21, %for.body26 ]
  ret %struct.rtx_def* %retval.0
}

declare %struct.rtx_def* @gen_rtx_fmt_E(i32, i32, %struct.rtvec_def*) #1

; Function Attrs: nounwind uwtable
define void @init_virtual_regs(%struct.emit_status* nocapture readonly %es) #0 {
entry:
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %es, i64 0, i32 12
  %0 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !tbaa !17
  %1 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16, !tbaa !7
  %arrayidx = getelementptr inbounds %struct.rtx_def** %0, i64 53
  store %struct.rtx_def* %1, %struct.rtx_def** %arrayidx, align 8, !tbaa !7
  %2 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !tbaa !7
  %arrayidx1 = getelementptr inbounds %struct.rtx_def** %0, i64 54
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx1, align 8, !tbaa !7
  %3 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16, !tbaa !7
  %arrayidx2 = getelementptr inbounds %struct.rtx_def** %0, i64 55
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx2, align 8, !tbaa !7
  %4 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !tbaa !7
  %arrayidx3 = getelementptr inbounds %struct.rtx_def** %0, i64 56
  store %struct.rtx_def* %4, %struct.rtx_def** %arrayidx3, align 8, !tbaa !7
  %5 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 10), align 16, !tbaa !7
  %arrayidx4 = getelementptr inbounds %struct.rtx_def** %0, i64 57
  store %struct.rtx_def* %5, %struct.rtx_def** %arrayidx4, align 8, !tbaa !7
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %orig) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 61, label %return
    i32 71, label %return
    i32 54, label %return
    i32 55, label %return
    i32 56, label %return
    i32 68, label %return
    i32 36, label %return
    i32 59, label %return
    i32 69, label %return
    i32 70, label %return
    i32 62, label %for.cond.preheader
    i32 58, label %sw.bb5
  ]

for.cond.preheader:                               ; preds = %entry
  %1 = load i32* @copy_insn_n_scratches, align 4, !tbaa !1
  %cmp266 = icmp sgt i32 %1, 0
  br i1 %cmp266, label %for.body, label %sw.epilog

for.cond:                                         ; preds = %for.body
  %2 = trunc i64 %indvars.iv.next272 to i32
  %cmp = icmp slt i32 %2, %1
  br i1 %cmp, label %for.body, label %sw.epilog

for.body:                                         ; preds = %for.cond.preheader, %for.cond
  %indvars.iv271 = phi i64 [ %indvars.iv.next272, %for.cond ], [ 0, %for.cond.preheader ]
  %arrayidx = getelementptr inbounds [30 x %struct.rtx_def*]* @copy_insn_scratch_in, i64 0, i64 %indvars.iv271
  %3 = load %struct.rtx_def** %arrayidx, align 8, !tbaa !7
  %cmp2 = icmp eq %struct.rtx_def* %3, %orig
  %indvars.iv.next272 = add nuw nsw i64 %indvars.iv271, 1
  br i1 %cmp2, label %if.then, label %for.cond

if.then:                                          ; preds = %for.body
  %arrayidx4 = getelementptr inbounds [30 x %struct.rtx_def*]* @copy_insn_scratch_out, i64 0, i64 %indvars.iv271
  %4 = load %struct.rtx_def** %arrayidx4, align 8, !tbaa !7
  br label %return

sw.bb5:                                           ; preds = %entry
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !7
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load7 = load i32* %6, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 75
  br i1 %cmp9, label %land.lhs.true, label %sw.epilog

land.lhs.true:                                    ; preds = %sw.bb5
  %fld13 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1
  %rtx15 = bitcast [1 x %union.rtunion_def]* %fld13 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx15, align 8, !tbaa !7
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load16 = load i32* %8, align 8
  %bf.clear17 = and i32 %bf.load16, 65535
  %cmp18 = icmp eq i32 %bf.clear17, 68
  br i1 %cmp18, label %land.lhs.true19, label %sw.epilog

land.lhs.true19:                                  ; preds = %land.lhs.true
  %arrayidx24 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 1
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx25, align 8, !tbaa !7
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load26 = load i32* %10, align 8
  %bf.clear27 = and i32 %bf.load26, 65535
  %cmp28 = icmp eq i32 %bf.clear27, 54
  br i1 %cmp28, label %return, label %sw.epilog

sw.epilog:                                        ; preds = %for.cond, %for.cond.preheader, %entry, %sw.bb5, %land.lhs.true, %land.lhs.true19
  %call = tail call %struct.rtx_def* @rtx_alloc(i32 %bf.clear) #4
  %11 = bitcast %struct.rtx_def* %orig to i64*
  %12 = bitcast %struct.rtx_def* %call to i64*
  %13 = load i64* %11, align 8
  store i64 %13, i64* %12, align 8
  %14 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 0
  %trunc = trunc i64 %13 to i32
  %bf.clear32 = and i32 %trunc, -536870913
  store i32 %bf.clear32, i32* %14, align 8
  %idxprom33251 = zext i32 %bf.clear to i64
  %arrayidx34 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom33251
  %15 = load i8* %arrayidx34, align 1, !tbaa !9
  %cmp35 = icmp eq i8 %15, 105
  br i1 %cmp35, label %if.then37, label %if.end44

if.then37:                                        ; preds = %sw.epilog
  %bf.clear43 = and i32 %trunc, 1560281087
  store i32 %bf.clear43, i32* %14, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.then37, %sw.epilog
  %bf.load45 = phi i32 [ %bf.clear43, %if.then37 ], [ %bf.clear32, %sw.epilog ]
  %bf.clear51259 = and i32 %bf.load45, 65535
  %idxprom52253260 = zext i32 %bf.clear51259 to i64
  %arrayidx53261 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom52253260
  %16 = load i8* %arrayidx53261, align 1, !tbaa !9
  %cmp55263 = icmp eq i8 %16, 0
  br i1 %cmp55263, label %for.end156, label %for.body57.lr.ph

for.body57.lr.ph:                                 ; preds = %if.end44
  %arrayidx48 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom52253260
  %17 = load i8** %arrayidx48, align 8, !tbaa !7
  br label %for.body57

for.body57:                                       ; preds = %for.body57.lr.ph, %for.inc154
  %indvars.iv269 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next270, %for.inc154 ]
  %format_ptr.0265 = phi i8* [ %17, %for.body57.lr.ph ], [ %incdec.ptr, %for.inc154 ]
  %arrayidx60 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 %indvars.iv269
  %arrayidx63 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 %indvars.iv269
  %18 = getelementptr inbounds %union.rtunion_def* %arrayidx63, i64 0, i32 0
  %19 = load i64* %18, align 8
  %20 = getelementptr inbounds %union.rtunion_def* %arrayidx60, i64 0, i32 0
  store i64 %19, i64* %20, align 8
  %incdec.ptr = getelementptr inbounds i8* %format_ptr.0265, i64 1
  %21 = load i8* %format_ptr.0265, align 1, !tbaa !9
  %conv64 = sext i8 %21 to i32
  switch i32 %conv64, label %sw.default152 [
    i32 101, label %sw.bb65
    i32 69, label %sw.bb83
    i32 86, label %sw.bb83
    i32 116, label %for.inc154
    i32 119, label %for.inc154
    i32 105, label %for.inc154
    i32 115, label %for.inc154
    i32 83, label %for.inc154
    i32 117, label %for.inc154
    i32 48, label %for.inc154
  ]

sw.bb65:                                          ; preds = %for.body57
  %rtx69 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**
  %22 = load %struct.rtx_def** %rtx69, align 8, !tbaa !7
  %cmp70 = icmp eq %struct.rtx_def* %22, null
  br i1 %cmp70, label %for.inc154, label %if.then72

if.then72:                                        ; preds = %sw.bb65
  %call77 = tail call %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %22)
  %call77.c = ptrtoint %struct.rtx_def* %call77 to i64
  store i64 %call77.c, i64* %20, align 8, !tbaa !7
  br label %for.inc154

sw.bb83:                                          ; preds = %for.body57, %for.body57
  %rtvec = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtvec_def**
  %23 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %24 = load %struct.rtvec_def** @orig_asm_constraints_vector, align 8, !tbaa !7
  %cmp87 = icmp eq %struct.rtvec_def* %23, %24
  br i1 %cmp87, label %if.then89, label %if.else

if.then89:                                        ; preds = %sw.bb83
  %25 = load %struct.rtvec_def** @copy_asm_constraints_vector, align 8, !tbaa !7
  %.c254 = ptrtoint %struct.rtvec_def* %25 to i64
  store i64 %.c254, i64* %20, align 8, !tbaa !7
  br label %for.inc154

if.else:                                          ; preds = %sw.bb83
  %26 = load %struct.rtvec_def** @orig_asm_operands_vector, align 8, !tbaa !7
  %cmp98 = icmp eq %struct.rtvec_def* %23, %26
  br i1 %cmp98, label %if.then100, label %if.else105

if.then100:                                       ; preds = %if.else
  %27 = load %struct.rtvec_def** @copy_asm_operands_vector, align 8, !tbaa !7
  %.c = ptrtoint %struct.rtvec_def* %27 to i64
  store i64 %.c, i64* %20, align 8, !tbaa !7
  br label %for.inc154

if.else105:                                       ; preds = %if.else
  %cmp110 = icmp eq %struct.rtvec_def* %23, null
  br i1 %cmp110, label %for.inc154, label %if.then112

if.then112:                                       ; preds = %if.else105
  %num_elem = getelementptr inbounds %struct.rtvec_def* %23, i64 0, i32 0
  %28 = load i32* %num_elem, align 4, !tbaa !50
  %call117 = tail call %struct.rtvec_def* @rtvec_alloc(i32 %28) #4
  %rtvec121 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtvec_def**
  %call117.c = ptrtoint %struct.rtvec_def* %call117 to i64
  store i64 %call117.c, i64* %20, align 8, !tbaa !7
  %num_elem127255 = getelementptr inbounds %struct.rtvec_def* %call117, i64 0, i32 0
  %29 = load i32* %num_elem127255, align 4, !tbaa !50
  %cmp128256 = icmp sgt i32 %29, 0
  br i1 %cmp128256, label %for.body130, label %for.inc154

for.body130:                                      ; preds = %if.then112, %for.body130
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body130 ], [ 0, %if.then112 ]
  %30 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !7
  %arrayidx136 = getelementptr inbounds %struct.rtvec_def* %30, i64 0, i32 1, i64 %indvars.iv
  %31 = load %struct.rtx_def** %arrayidx136, align 8, !tbaa !7
  %call137 = tail call %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %31)
  %32 = load %struct.rtvec_def** %rtvec121, align 8, !tbaa !7
  %arrayidx144 = getelementptr inbounds %struct.rtvec_def* %32, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %call137, %struct.rtx_def** %arrayidx144, align 8, !tbaa !7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %33 = load %struct.rtvec_def** %rtvec121, align 8, !tbaa !7
  %num_elem127 = getelementptr inbounds %struct.rtvec_def* %33, i64 0, i32 0
  %34 = load i32* %num_elem127, align 4, !tbaa !50
  %35 = trunc i64 %indvars.iv.next to i32
  %cmp128 = icmp slt i32 %35, %34
  br i1 %cmp128, label %for.body130, label %for.inc154

sw.default152:                                    ; preds = %for.body57
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 4773, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.copy_insn_1, i64 0, i64 0)) #8
  unreachable

for.inc154:                                       ; preds = %for.body130, %if.then112, %sw.bb65, %if.else105, %if.then72, %if.then100, %if.then89, %for.body57, %for.body57, %for.body57, %for.body57, %for.body57, %for.body57, %for.body57
  %indvars.iv.next270 = add nuw nsw i64 %indvars.iv269, 1
  %bf.load50 = load i32* %14, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %idxprom52253 = zext i32 %bf.clear51 to i64
  %arrayidx53 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom52253
  %36 = load i8* %arrayidx53, align 1, !tbaa !9
  %conv54 = zext i8 %36 to i32
  %37 = trunc i64 %indvars.iv.next270 to i32
  %cmp55 = icmp slt i32 %37, %conv54
  br i1 %cmp55, label %for.body57, label %for.end156

for.end156:                                       ; preds = %for.inc154, %if.end44
  switch i32 %bf.clear, label %return [
    i32 62, label %if.then159
    i32 41, label %if.then172
  ]

if.then159:                                       ; preds = %for.end156
  %38 = load i32* @copy_insn_n_scratches, align 4, !tbaa !1
  %inc160 = add nsw i32 %38, 1
  store i32 %inc160, i32* @copy_insn_n_scratches, align 4, !tbaa !1
  %cmp161 = icmp sgt i32 %38, 29
  br i1 %cmp161, label %if.then163, label %if.end164

if.then163:                                       ; preds = %if.then159
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 4781, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.copy_insn_1, i64 0, i64 0)) #8
  unreachable

if.end164:                                        ; preds = %if.then159
  %idxprom165 = sext i32 %38 to i64
  %arrayidx166 = getelementptr inbounds [30 x %struct.rtx_def*]* @copy_insn_scratch_in, i64 0, i64 %idxprom165
  store %struct.rtx_def* %orig, %struct.rtx_def** %arrayidx166, align 8, !tbaa !7
  %arrayidx168 = getelementptr inbounds [30 x %struct.rtx_def*]* @copy_insn_scratch_out, i64 0, i64 %idxprom165
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx168, align 8, !tbaa !7
  br label %return

if.then172:                                       ; preds = %for.end156
  %arrayidx174 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 3
  %rtvec175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtvec_def**
  %39 = load %struct.rtvec_def** %rtvec175, align 8, !tbaa !7
  store %struct.rtvec_def* %39, %struct.rtvec_def** @orig_asm_operands_vector, align 8, !tbaa !7
  %arrayidx177 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 3
  %rtvec178 = bitcast %union.rtunion_def* %arrayidx177 to %struct.rtvec_def**
  %40 = load %struct.rtvec_def** %rtvec178, align 8, !tbaa !7
  store %struct.rtvec_def* %40, %struct.rtvec_def** @copy_asm_operands_vector, align 8, !tbaa !7
  %arrayidx180 = getelementptr inbounds %struct.rtx_def* %orig, i64 0, i32 1, i64 4
  %rtvec181 = bitcast %union.rtunion_def* %arrayidx180 to %struct.rtvec_def**
  %41 = load %struct.rtvec_def** %rtvec181, align 8, !tbaa !7
  store %struct.rtvec_def* %41, %struct.rtvec_def** @orig_asm_constraints_vector, align 8, !tbaa !7
  %arrayidx183 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 4
  %rtvec184 = bitcast %union.rtunion_def* %arrayidx183 to %struct.rtvec_def**
  %42 = load %struct.rtvec_def** %rtvec184, align 8, !tbaa !7
  store %struct.rtvec_def* %42, %struct.rtvec_def** @copy_asm_constraints_vector, align 8, !tbaa !7
  br label %return

return:                                           ; preds = %if.end164, %if.then172, %for.end156, %land.lhs.true19, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %if.then
  %retval.0 = phi %struct.rtx_def* [ %4, %if.then ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %entry ], [ %orig, %land.lhs.true19 ], [ %call, %for.end156 ], [ %call, %if.then172 ], [ %call, %if.end164 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @copy_insn(%struct.rtx_def* %insn) #0 {
entry:
  store i32 0, i32* @copy_insn_n_scratches, align 4, !tbaa !1
  store %struct.rtvec_def* null, %struct.rtvec_def** @orig_asm_operands_vector, align 8, !tbaa !7
  store %struct.rtvec_def* null, %struct.rtvec_def** @orig_asm_constraints_vector, align 8, !tbaa !7
  store %struct.rtvec_def* null, %struct.rtvec_def** @copy_asm_operands_vector, align 8, !tbaa !7
  store %struct.rtvec_def* null, %struct.rtvec_def** @copy_asm_constraints_vector, align 8, !tbaa !7
  %call = tail call %struct.rtx_def* @copy_insn_1(%struct.rtx_def* %insn)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define void @init_emit() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !7
  %call = tail call noalias i8* @xmalloc(i64 88) #4
  %1 = bitcast i8* %call to %struct.emit_status*
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  store %struct.emit_status* %1, %struct.emit_status** %emit, align 8, !tbaa !10
  %2 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit1 = getelementptr inbounds %struct.function* %2, i64 0, i32 3
  %3 = load %struct.emit_status** %emit1, align 8, !tbaa !10
  %x_first_insn = getelementptr inbounds %struct.emit_status* %3, i64 0, i32 2
  store %struct.rtx_def* null, %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %4 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit2 = getelementptr inbounds %struct.function* %4, i64 0, i32 3
  %5 = load %struct.emit_status** %emit2, align 8, !tbaa !10
  %x_last_insn = getelementptr inbounds %struct.emit_status* %5, i64 0, i32 3
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_insn, align 8, !tbaa !46
  %6 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit3 = getelementptr inbounds %struct.function* %6, i64 0, i32 3
  %7 = load %struct.emit_status** %emit3, align 8, !tbaa !10
  %sequence_rtl_expr = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 4
  store %union.tree_node* null, %union.tree_node** %sequence_rtl_expr, align 8, !tbaa !67
  %8 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit4 = getelementptr inbounds %struct.function* %8, i64 0, i32 3
  %9 = load %struct.emit_status** %emit4, align 8, !tbaa !10
  %x_cur_insn_uid = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 6
  store i32 1, i32* %x_cur_insn_uid, align 4, !tbaa !47
  %x_reg_rtx_no = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 0
  store i32 58, i32* %x_reg_rtx_no, align 4, !tbaa !13
  %x_last_linenum = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 7
  store i32 0, i32* %x_last_linenum, align 4, !tbaa !64
  %x_last_filename = getelementptr inbounds %struct.emit_status* %9, i64 0, i32 8
  store i8* null, i8** %x_last_filename, align 8, !tbaa !63
  %10 = load i32* @label_num, align 4, !tbaa !1
  %11 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit8 = getelementptr inbounds %struct.function* %11, i64 0, i32 3
  %12 = load %struct.emit_status** %emit8, align 8, !tbaa !10
  %x_first_label_num = getelementptr inbounds %struct.emit_status* %12, i64 0, i32 1
  store i32 %10, i32* %x_first_label_num, align 4, !tbaa !19
  store i32 0, i32* @last_label_num, align 4, !tbaa !1
  %sequence_stack = getelementptr inbounds %struct.emit_status* %12, i64 0, i32 5
  store %struct.sequence_stack* null, %struct.sequence_stack** %sequence_stack, align 8, !tbaa !65
  tail call void @llvm.memset.p0i8.i64(i8* bitcast ([5 x %struct.rtx_def*]* @sequence_result to i8*), i8 0, i64 40, i32 16, i1 false) #4
  %13 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_pointer_align_length = getelementptr inbounds %struct.emit_status* %13, i64 0, i32 9
  store i32 158, i32* %regno_pointer_align_length, align 4, !tbaa !15
  %call13 = tail call noalias i8* @xcalloc(i64 158, i64 1) #4
  %14 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_pointer_align = getelementptr inbounds %struct.emit_status* %14, i64 0, i32 10
  store i8* %call13, i8** %regno_pointer_align, align 8, !tbaa !16
  %regno_pointer_align_length16 = getelementptr inbounds %struct.emit_status* %14, i64 0, i32 9
  %15 = load i32* %regno_pointer_align_length16, align 4, !tbaa !15
  %conv17 = sext i32 %15 to i64
  %call18 = tail call noalias i8* @xcalloc(i64 %conv17, i64 8) #4
  %16 = bitcast i8* %call18 to %struct.rtx_def**
  %17 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit19 = getelementptr inbounds %struct.function* %17, i64 0, i32 3
  %18 = load %struct.emit_status** %emit19, align 8, !tbaa !10
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %18, i64 0, i32 12
  store %struct.rtx_def** %16, %struct.rtx_def*** %x_regno_reg_rtx, align 8, !tbaa !17
  %19 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_pointer_align_length21 = getelementptr inbounds %struct.emit_status* %19, i64 0, i32 9
  %20 = load i32* %regno_pointer_align_length21, align 4, !tbaa !15
  %conv22 = sext i32 %20 to i64
  %call23 = tail call noalias i8* @xcalloc(i64 %conv22, i64 8) #4
  %21 = bitcast i8* %call23 to %union.tree_node**
  %22 = load %struct.emit_status** %emit, align 8, !tbaa !10
  %regno_decl = getelementptr inbounds %struct.emit_status* %22, i64 0, i32 11
  store %union.tree_node** %21, %union.tree_node*** %regno_decl, align 8, !tbaa !18
  %x_regno_reg_rtx.i = getelementptr inbounds %struct.emit_status* %22, i64 0, i32 12
  %23 = load %struct.rtx_def*** %x_regno_reg_rtx.i, align 8, !tbaa !17
  %24 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16, !tbaa !7
  %arrayidx.i = getelementptr inbounds %struct.rtx_def** %23, i64 53
  store %struct.rtx_def* %24, %struct.rtx_def** %arrayidx.i, align 8, !tbaa !7
  %25 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !tbaa !7
  %arrayidx1.i = getelementptr inbounds %struct.rtx_def** %23, i64 54
  store %struct.rtx_def* %25, %struct.rtx_def** %arrayidx1.i, align 8, !tbaa !7
  %26 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16, !tbaa !7
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def** %23, i64 55
  store %struct.rtx_def* %26, %struct.rtx_def** %arrayidx2.i, align 8, !tbaa !7
  %27 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !tbaa !7
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def** %23, i64 56
  store %struct.rtx_def* %27, %struct.rtx_def** %arrayidx3.i, align 8, !tbaa !7
  %28 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 10), align 16, !tbaa !7
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def** %23, i64 57
  store %struct.rtx_def* %28, %struct.rtx_def** %arrayidx4.i, align 8, !tbaa !7
  %29 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !tbaa !7
  %30 = getelementptr inbounds %struct.rtx_def* %29, i64 0, i32 0
  %bf.load = load i32* %30, align 8
  %bf.set = or i32 %bf.load, -2147483648
  store i32 %bf.set, i32* %30, align 8
  %31 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !tbaa !7
  %32 = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 0
  %bf.load26 = load i32* %32, align 8
  %bf.set28 = or i32 %bf.load26, -2147483648
  store i32 %bf.set28, i32* %32, align 8
  %33 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !tbaa !7
  %34 = getelementptr inbounds %struct.rtx_def* %33, i64 0, i32 0
  %bf.load29 = load i32* %34, align 8
  %bf.set31 = or i32 %bf.load29, -2147483648
  store i32 %bf.set31, i32* %34, align 8
  %35 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.rtx_def* %35, i64 0, i32 0
  %bf.load32 = load i32* %36, align 8
  %bf.set34 = or i32 %bf.load32, -2147483648
  store i32 %bf.set34, i32* %36, align 8
  %37 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16, !tbaa !7
  %38 = getelementptr inbounds %struct.rtx_def* %37, i64 0, i32 0
  %bf.load35 = load i32* %38, align 8
  %bf.set37 = or i32 %bf.load35, -2147483648
  store i32 %bf.set37, i32* %38, align 8
  %39 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !tbaa !7
  %40 = getelementptr inbounds %struct.rtx_def* %39, i64 0, i32 0
  %bf.load38 = load i32* %40, align 8
  %bf.set40 = or i32 %bf.load38, -2147483648
  store i32 %bf.set40, i32* %40, align 8
  %41 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16, !tbaa !7
  %42 = getelementptr inbounds %struct.rtx_def* %41, i64 0, i32 0
  %bf.load41 = load i32* %42, align 8
  %bf.set43 = or i32 %bf.load41, -2147483648
  store i32 %bf.set43, i32* %42, align 8
  %43 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.rtx_def* %43, i64 0, i32 0
  %bf.load44 = load i32* %44, align 8
  %bf.set46 = or i32 %bf.load44, -2147483648
  store i32 %bf.set46, i32* %44, align 8
  %45 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 10), align 16, !tbaa !7
  %46 = getelementptr inbounds %struct.rtx_def* %45, i64 0, i32 0
  %bf.load47 = load i32* %46, align 8
  %bf.set49 = or i32 %bf.load47, -2147483648
  store i32 %bf.set49, i32* %46, align 8
  %47 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %47, 20
  %48 = and i32 %and, 32
  %49 = add i32 %48, 32
  %conv50 = trunc i32 %49 to i8
  %50 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit51 = getelementptr inbounds %struct.function* %50, i64 0, i32 3
  %51 = load %struct.emit_status** %emit51, align 8, !tbaa !10
  %regno_pointer_align52 = getelementptr inbounds %struct.emit_status* %51, i64 0, i32 10
  %52 = load i8** %regno_pointer_align52, align 8, !tbaa !16
  %arrayidx = getelementptr inbounds i8* %52, i64 7
  store i8 %conv50, i8* %arrayidx, align 1, !tbaa !9
  %53 = load i32* @target_flags, align 4, !tbaa !1
  %and53 = lshr i32 %53, 20
  %54 = and i32 %and53, 32
  %55 = add i32 %54, 32
  %conv56 = trunc i32 %55 to i8
  %56 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit57 = getelementptr inbounds %struct.function* %56, i64 0, i32 3
  %57 = load %struct.emit_status** %emit57, align 8, !tbaa !10
  %regno_pointer_align58 = getelementptr inbounds %struct.emit_status* %57, i64 0, i32 10
  %58 = load i8** %regno_pointer_align58, align 8, !tbaa !16
  %arrayidx59 = getelementptr inbounds i8* %58, i64 20
  store i8 %conv56, i8* %arrayidx59, align 1, !tbaa !9
  %59 = load i32* @target_flags, align 4, !tbaa !1
  %and60 = lshr i32 %59, 20
  %60 = and i32 %and60, 32
  %61 = add i32 %60, 32
  %conv63 = trunc i32 %61 to i8
  %62 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit64 = getelementptr inbounds %struct.function* %62, i64 0, i32 3
  %63 = load %struct.emit_status** %emit64, align 8, !tbaa !10
  %regno_pointer_align65 = getelementptr inbounds %struct.emit_status* %63, i64 0, i32 10
  %64 = load i8** %regno_pointer_align65, align 8, !tbaa !16
  %arrayidx66 = getelementptr inbounds i8* %64, i64 6
  store i8 %conv63, i8* %arrayidx66, align 1, !tbaa !9
  %65 = load i32* @target_flags, align 4, !tbaa !1
  %and67 = lshr i32 %65, 20
  %66 = and i32 %and67, 32
  %67 = add i32 %66, 32
  %conv70 = trunc i32 %67 to i8
  %68 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit71 = getelementptr inbounds %struct.function* %68, i64 0, i32 3
  %69 = load %struct.emit_status** %emit71, align 8, !tbaa !10
  %regno_pointer_align72 = getelementptr inbounds %struct.emit_status* %69, i64 0, i32 10
  %70 = load i8** %regno_pointer_align72, align 8, !tbaa !16
  %arrayidx73 = getelementptr inbounds i8* %70, i64 16
  store i8 %conv70, i8* %arrayidx73, align 1, !tbaa !9
  %71 = load i32* @target_flags, align 4, !tbaa !1
  %and74 = lshr i32 %71, 20
  %72 = and i32 %and74, 32
  %73 = add i32 %72, 32
  %conv77 = trunc i32 %73 to i8
  %74 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit78 = getelementptr inbounds %struct.function* %74, i64 0, i32 3
  %75 = load %struct.emit_status** %emit78, align 8, !tbaa !10
  %regno_pointer_align79 = getelementptr inbounds %struct.emit_status* %75, i64 0, i32 10
  %76 = load i8** %regno_pointer_align79, align 8, !tbaa !16
  %arrayidx80 = getelementptr inbounds i8* %76, i64 53
  store i8 %conv77, i8* %arrayidx80, align 1, !tbaa !9
  %77 = load i32* @target_flags, align 4, !tbaa !1
  %and81 = lshr i32 %77, 20
  %78 = and i32 %and81, 32
  %79 = add i32 %78, 32
  %conv84 = trunc i32 %79 to i8
  %80 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit85 = getelementptr inbounds %struct.function* %80, i64 0, i32 3
  %81 = load %struct.emit_status** %emit85, align 8, !tbaa !10
  %regno_pointer_align86 = getelementptr inbounds %struct.emit_status* %81, i64 0, i32 10
  %82 = load i8** %regno_pointer_align86, align 8, !tbaa !16
  %arrayidx87 = getelementptr inbounds i8* %82, i64 54
  store i8 %conv84, i8* %arrayidx87, align 1, !tbaa !9
  %83 = load i32* @target_flags, align 4, !tbaa !1
  %and88 = lshr i32 %83, 20
  %84 = and i32 %and88, 32
  %85 = add i32 %84, 32
  %conv91 = trunc i32 %85 to i8
  %86 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit92 = getelementptr inbounds %struct.function* %86, i64 0, i32 3
  %87 = load %struct.emit_status** %emit92, align 8, !tbaa !10
  %regno_pointer_align93 = getelementptr inbounds %struct.emit_status* %87, i64 0, i32 10
  %88 = load i8** %regno_pointer_align93, align 8, !tbaa !16
  %arrayidx94 = getelementptr inbounds i8* %88, i64 55
  store i8 %conv91, i8* %arrayidx94, align 1, !tbaa !9
  %89 = load i32* @target_flags, align 4, !tbaa !1
  %and95 = lshr i32 %89, 20
  %90 = and i32 %and95, 32
  %91 = add i32 %90, 32
  %conv98 = trunc i32 %91 to i8
  %92 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit99 = getelementptr inbounds %struct.function* %92, i64 0, i32 3
  %93 = load %struct.emit_status** %emit99, align 8, !tbaa !10
  %regno_pointer_align100 = getelementptr inbounds %struct.emit_status* %93, i64 0, i32 10
  %94 = load i8** %regno_pointer_align100, align 8, !tbaa !16
  %arrayidx101 = getelementptr inbounds i8* %94, i64 56
  store i8 %conv98, i8* %arrayidx101, align 1, !tbaa !9
  %95 = load i32* @target_flags, align 4, !tbaa !1
  %and102 = lshr i32 %95, 20
  %96 = and i32 %and102, 32
  %97 = add i32 %96, 32
  %conv105 = trunc i32 %97 to i8
  %98 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit106 = getelementptr inbounds %struct.function* %98, i64 0, i32 3
  %99 = load %struct.emit_status** %emit106, align 8, !tbaa !10
  %regno_pointer_align107 = getelementptr inbounds %struct.emit_status* %99, i64 0, i32 10
  %100 = load i8** %regno_pointer_align107, align 8, !tbaa !16
  %arrayidx108 = getelementptr inbounds i8* %100, i64 57
  store i8 %conv105, i8* %arrayidx108, align 1, !tbaa !9
  ret void
}

declare noalias i8* @xcalloc(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @mark_emit_status(%struct.emit_status* readonly %es) #0 {
entry:
  %cmp = icmp eq %struct.emit_status* %es, null
  br i1 %cmp, label %do.end54, label %if.end

if.end:                                           ; preds = %entry
  %regno_pointer_align_length = getelementptr inbounds %struct.emit_status* %es, i64 0, i32 9
  %0 = load i32* %regno_pointer_align_length, align 4, !tbaa !15
  %cmp172 = icmp sgt i32 %0, 0
  br i1 %cmp172, label %do.body.lr.ph, label %for.end

do.body.lr.ph:                                    ; preds = %if.end
  %regno_decl = getelementptr inbounds %struct.emit_status* %es, i64 0, i32 11
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %es, i64 0, i32 12
  %1 = load %union.tree_node*** %regno_decl, align 8, !tbaa !18
  %2 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !tbaa !17
  br label %do.body

do.body:                                          ; preds = %do.body.lr.ph, %for.inc
  %r.075 = phi %struct.rtx_def** [ %2, %do.body.lr.ph ], [ %incdec.ptr, %for.inc ]
  %t.074 = phi %union.tree_node** [ %1, %do.body.lr.ph ], [ %incdec.ptr21, %for.inc ]
  %i.073 = phi i32 [ %0, %do.body.lr.ph ], [ %dec, %for.inc ]
  %3 = load %struct.rtx_def** %r.075, align 8, !tbaa !7
  %cmp2 = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp2, label %do.body5, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.body
  %4 = bitcast %struct.rtx_def* %3 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %4) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.then3, label %do.body5

if.then3:                                         ; preds = %land.lhs.true
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %3) #4
  br label %do.body5

do.body5:                                         ; preds = %land.lhs.true, %do.body, %if.then3
  %5 = load %union.tree_node** %t.074, align 8, !tbaa !7
  %cmp6 = icmp eq %union.tree_node* %5, null
  br i1 %cmp6, label %for.inc, label %land.lhs.true7

land.lhs.true7:                                   ; preds = %do.body5
  %6 = bitcast %union.tree_node* %5 to i8*
  %call8 = tail call i32 @ggc_set_mark(i8* %6) #4
  %tobool9 = icmp eq i32 %call8, 0
  br i1 %tobool9, label %do.body11, label %for.inc

do.body11:                                        ; preds = %land.lhs.true7
  %7 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !7
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 1
  %8 = load i64* %elements_used, align 8, !tbaa !69
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 0
  %9 = load i64* %num_elements, align 8, !tbaa !55
  %cmp12 = icmp ult i64 %8, %9
  br i1 %cmp12, label %if.end16, label %if.then13

if.then13:                                        ; preds = %do.body11
  %mul = shl i64 %9, 1
  %call15 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %7, i64 %mul) #4
  store %struct.varray_head_tag* %call15, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !7
  %elements_used17.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call15, i64 0, i32 1
  %.pre76 = load i64* %elements_used17.phi.trans.insert, align 8, !tbaa !69
  br label %if.end16

if.end16:                                         ; preds = %do.body11, %if.then13
  %10 = phi i64 [ %8, %do.body11 ], [ %.pre76, %if.then13 ]
  %11 = phi %struct.varray_head_tag* [ %7, %do.body11 ], [ %call15, %if.then13 ]
  %elements_used17 = getelementptr inbounds %struct.varray_head_tag* %11, i64 0, i32 1
  %inc = add i64 %10, 1
  store i64 %inc, i64* %elements_used17, align 8, !tbaa !69
  %data = getelementptr inbounds %struct.varray_head_tag* %11, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %10
  store %union.tree_node* %5, %union.tree_node** %arrayidx, align 8, !tbaa !7
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true7, %do.body5, %if.end16
  %dec = add nsw i32 %i.073, -1
  %incdec.ptr = getelementptr inbounds %struct.rtx_def** %r.075, i64 1
  %incdec.ptr21 = getelementptr inbounds %union.tree_node** %t.074, i64 1
  %cmp1 = icmp sgt i32 %dec, 0
  br i1 %cmp1, label %do.body, label %for.end

for.end:                                          ; preds = %for.inc, %if.end
  %sequence_stack = getelementptr inbounds %struct.emit_status* %es, i64 0, i32 5
  %12 = load %struct.sequence_stack** %sequence_stack, align 8, !tbaa !65
  %tobool25.i = icmp eq %struct.sequence_stack* %12, null
  br i1 %tobool25.i, label %mark_sequence_stack.exit, label %do.body.i

do.body.i:                                        ; preds = %for.end, %do.end17.i
  %ss.addr.026.i = phi %struct.sequence_stack* [ %22, %do.end17.i ], [ %12, %for.end ]
  %first.i = getelementptr inbounds %struct.sequence_stack* %ss.addr.026.i, i64 0, i32 0
  %13 = load %struct.rtx_def** %first.i, align 8, !tbaa !59
  %cmp.i = icmp eq %struct.rtx_def* %13, null
  br i1 %cmp.i, label %do.body2.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %do.body.i
  %14 = bitcast %struct.rtx_def* %13 to i8*
  %call.i = tail call i32 @ggc_set_mark(i8* %14) #4
  %tobool1.i = icmp eq i32 %call.i, 0
  br i1 %tobool1.i, label %if.then.i, label %do.body2.i

if.then.i:                                        ; preds = %land.lhs.true.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %13) #4
  br label %do.body2.i

do.body2.i:                                       ; preds = %if.then.i, %land.lhs.true.i, %do.body.i
  %sequence_rtl_expr.i = getelementptr inbounds %struct.sequence_stack* %ss.addr.026.i, i64 0, i32 2
  %15 = load %union.tree_node** %sequence_rtl_expr.i, align 8, !tbaa !68
  %cmp3.i = icmp eq %union.tree_node* %15, null
  br i1 %cmp3.i, label %do.end17.i, label %land.lhs.true4.i

land.lhs.true4.i:                                 ; preds = %do.body2.i
  %16 = bitcast %union.tree_node* %15 to i8*
  %call5.i = tail call i32 @ggc_set_mark(i8* %16) #4
  %tobool6.i = icmp eq i32 %call5.i, 0
  br i1 %tobool6.i, label %do.body8.i, label %do.end17.i

do.body8.i:                                       ; preds = %land.lhs.true4.i
  %17 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !7
  %elements_used.i = getelementptr inbounds %struct.varray_head_tag* %17, i64 0, i32 1
  %18 = load i64* %elements_used.i, align 8, !tbaa !69
  %num_elements.i = getelementptr inbounds %struct.varray_head_tag* %17, i64 0, i32 0
  %19 = load i64* %num_elements.i, align 8, !tbaa !55
  %cmp9.i = icmp ult i64 %18, %19
  br i1 %cmp9.i, label %if.end13.i, label %if.then10.i

if.then10.i:                                      ; preds = %do.body8.i
  %mul.i = shl i64 %19, 1
  %call12.i = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %17, i64 %mul.i) #4
  store %struct.varray_head_tag* %call12.i, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !7
  %elements_used14.phi.trans.insert.i = getelementptr inbounds %struct.varray_head_tag* %call12.i, i64 0, i32 1
  %.pre.i = load i64* %elements_used14.phi.trans.insert.i, align 8, !tbaa !69
  br label %if.end13.i

if.end13.i:                                       ; preds = %if.then10.i, %do.body8.i
  %20 = phi i64 [ %18, %do.body8.i ], [ %.pre.i, %if.then10.i ]
  %21 = phi %struct.varray_head_tag* [ %17, %do.body8.i ], [ %call12.i, %if.then10.i ]
  %elements_used14.i = getelementptr inbounds %struct.varray_head_tag* %21, i64 0, i32 1
  %inc.i = add i64 %20, 1
  store i64 %inc.i, i64* %elements_used14.i, align 8, !tbaa !69
  %data.i = getelementptr inbounds %struct.varray_head_tag* %21, i64 0, i32 4
  %tree.i = bitcast %union.varray_data_tag* %data.i to [1 x %union.tree_node*]*
  %arrayidx.i = getelementptr inbounds [1 x %union.tree_node*]* %tree.i, i64 0, i64 %20
  store %union.tree_node* %15, %union.tree_node** %arrayidx.i, align 8, !tbaa !7
  br label %do.end17.i

do.end17.i:                                       ; preds = %if.end13.i, %land.lhs.true4.i, %do.body2.i
  %next.i = getelementptr inbounds %struct.sequence_stack* %ss.addr.026.i, i64 0, i32 3
  %22 = load %struct.sequence_stack** %next.i, align 8, !tbaa !66
  %tobool.i = icmp eq %struct.sequence_stack* %22, null
  br i1 %tobool.i, label %mark_sequence_stack.exit, label %do.body.i

mark_sequence_stack.exit:                         ; preds = %do.end17.i, %for.end
  %sequence_rtl_expr = getelementptr inbounds %struct.emit_status* %es, i64 0, i32 4
  %23 = load %union.tree_node** %sequence_rtl_expr, align 8, !tbaa !67
  %cmp24 = icmp eq %union.tree_node* %23, null
  br i1 %cmp24, label %do.body46, label %land.lhs.true25

land.lhs.true25:                                  ; preds = %mark_sequence_stack.exit
  %24 = bitcast %union.tree_node* %23 to i8*
  %call26 = tail call i32 @ggc_set_mark(i8* %24) #4
  %tobool27 = icmp eq i32 %call26, 0
  br i1 %tobool27, label %do.body29, label %do.body46

do.body29:                                        ; preds = %land.lhs.true25
  %25 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !7
  %elements_used30 = getelementptr inbounds %struct.varray_head_tag* %25, i64 0, i32 1
  %26 = load i64* %elements_used30, align 8, !tbaa !69
  %num_elements31 = getelementptr inbounds %struct.varray_head_tag* %25, i64 0, i32 0
  %27 = load i64* %num_elements31, align 8, !tbaa !55
  %cmp32 = icmp ult i64 %26, %27
  br i1 %cmp32, label %if.end37, label %if.then33

if.then33:                                        ; preds = %do.body29
  %mul35 = shl i64 %27, 1
  %call36 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %25, i64 %mul35) #4
  store %struct.varray_head_tag* %call36, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !7
  %elements_used38.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call36, i64 0, i32 1
  %.pre = load i64* %elements_used38.phi.trans.insert, align 8, !tbaa !69
  br label %if.end37

if.end37:                                         ; preds = %do.body29, %if.then33
  %28 = phi i64 [ %26, %do.body29 ], [ %.pre, %if.then33 ]
  %29 = phi %struct.varray_head_tag* [ %25, %do.body29 ], [ %call36, %if.then33 ]
  %elements_used38 = getelementptr inbounds %struct.varray_head_tag* %29, i64 0, i32 1
  %inc39 = add i64 %28, 1
  store i64 %inc39, i64* %elements_used38, align 8, !tbaa !69
  %data40 = getelementptr inbounds %struct.varray_head_tag* %29, i64 0, i32 4
  %tree41 = bitcast %union.varray_data_tag* %data40 to [1 x %union.tree_node*]*
  %arrayidx42 = getelementptr inbounds [1 x %union.tree_node*]* %tree41, i64 0, i64 %28
  store %union.tree_node* %23, %union.tree_node** %arrayidx42, align 8, !tbaa !7
  br label %do.body46

do.body46:                                        ; preds = %land.lhs.true25, %mark_sequence_stack.exit, %if.end37
  %x_first_insn = getelementptr inbounds %struct.emit_status* %es, i64 0, i32 2
  %30 = load %struct.rtx_def** %x_first_insn, align 8, !tbaa !45
  %cmp48 = icmp eq %struct.rtx_def* %30, null
  br i1 %cmp48, label %do.end54, label %land.lhs.true49

land.lhs.true49:                                  ; preds = %do.body46
  %31 = bitcast %struct.rtx_def* %30 to i8*
  %call50 = tail call i32 @ggc_set_mark(i8* %31) #4
  %tobool51 = icmp eq i32 %call50, 0
  br i1 %tobool51, label %if.then52, label %do.end54

if.then52:                                        ; preds = %land.lhs.true49
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %30) #4
  br label %do.end54

do.end54:                                         ; preds = %land.lhs.true49, %do.body46, %if.then52, %entry
  ret void
}

declare i32 @ggc_set_mark(i8*) #1

declare void @ggc_mark_rtx_children(%struct.rtx_def*) #1

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #1

; Function Attrs: nounwind uwtable
define void @init_emit_once(i32 %line_numbers) #0 {
entry:
  %tmp = alloca %struct.realvaluetype, align 8
  %tmp104 = alloca %struct.realvaluetype, align 8
  %tmp105 = alloca %struct.realvaluetype, align 8
  %tmp106 = alloca %struct.realvaluetype, align 8
  %u.sroa.0 = alloca [3 x i64], align 8
  %call = call %struct.htab* @htab_create(i64 37, i32 (i8*)* @const_int_htab_hash, i32 (i8*, i8*)* @const_int_htab_eq, void (i8*)* null) #4
  store %struct.htab* %call, %struct.htab** @const_int_htab, align 8, !tbaa !7
  %0 = bitcast %struct.htab* %call to i8*
  call void @ggc_add_deletable_htab(i8* %0, i32 (i8*)* null, void (i8*)* null) #4
  %call1 = call %struct.htab* @htab_create(i64 37, i32 (i8*)* @mem_attrs_htab_hash, i32 (i8*, i8*)* @mem_attrs_htab_eq, void (i8*)* null) #4
  store %struct.htab* %call1, %struct.htab** @mem_attrs_htab, align 8, !tbaa !7
  %1 = bitcast %struct.htab* %call1 to i8*
  call void @ggc_add_deletable_htab(i8* %1, i32 (i8*)* null, void (i8*)* @mem_attrs_mark) #4
  %lnot = icmp eq i32 %line_numbers, 0
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* @no_line_numbers, align 4, !tbaa !1
  store i32 0, i32* @byte_mode, align 4, !tbaa !9
  store i32 0, i32* @word_mode, align 4, !tbaa !9
  %2 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 1), align 4, !tbaa !9
  %cmp416 = icmp eq i32 %2, 0
  br i1 %cmp416, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %3 = load i32* @target_flags, align 4, !tbaa !1
  %and = lshr i32 %3, 20
  %4 = and i32 %and, 32
  %5 = add i32 %4, 32
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %6 = phi i32 [ 0, %for.body.lr.ph ], [ %10, %for.inc ]
  %7 = phi i32 [ 0, %for.body.lr.ph ], [ %9, %for.inc ]
  %mode.0417 = phi i32 [ %2, %for.body.lr.ph ], [ %conv19, %for.inc ]
  %idxprom = sext i32 %mode.0417 to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %8 = load i16* %arrayidx, align 2, !tbaa !20
  %cmp2 = icmp eq i16 %8, 8
  %cmp4 = icmp eq i32 %7, 0
  %or.cond = and i1 %cmp2, %cmp4
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 %mode.0417, i32* @byte_mode, align 4, !tbaa !9
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %9 = phi i32 [ %mode.0417, %if.then ], [ %7, %for.body ]
  %conv8 = zext i16 %8 to i32
  %cmp10 = icmp eq i32 %conv8, %5
  %cmp13 = icmp eq i32 %6, 0
  %or.cond243 = and i1 %cmp10, %cmp13
  br i1 %or.cond243, label %if.then15, label %for.inc

if.then15:                                        ; preds = %if.end
  store i32 %mode.0417, i32* @word_mode, align 4, !tbaa !9
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then15
  %10 = phi i32 [ %6, %if.end ], [ %mode.0417, %if.then15 ]
  %arrayidx18 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom
  %11 = load i8* %arrayidx18, align 1, !tbaa !9
  %conv19 = zext i8 %11 to i32
  %cmp = icmp eq i8 %11, 0
  br i1 %cmp, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  %12 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 2), align 4, !tbaa !9
  %cmp21413 = icmp eq i32 %12, 0
  br i1 %cmp21413, label %for.end38, label %for.body23

for.body23:                                       ; preds = %for.end, %for.body23
  %double_mode.0415 = phi i32 [ %mode.1.double_mode.0, %for.body23 ], [ 0, %for.end ]
  %mode.1414 = phi i32 [ %conv37, %for.body23 ], [ %12, %for.end ]
  %idxprom24 = sext i32 %mode.1414 to i64
  %arrayidx25 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom24
  %13 = load i16* %arrayidx25, align 2, !tbaa !20
  %cmp27 = icmp eq i16 %13, 64
  %cmp30 = icmp eq i32 %double_mode.0415, 0
  %or.cond244 = and i1 %cmp27, %cmp30
  %mode.1.double_mode.0 = select i1 %or.cond244, i32 %mode.1414, i32 %double_mode.0415
  %arrayidx36 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom24
  %14 = load i8* %arrayidx36, align 1, !tbaa !9
  %conv37 = zext i8 %14 to i32
  %cmp21 = icmp eq i8 %14, 0
  br i1 %cmp21, label %for.end38, label %for.body23

for.end38:                                        ; preds = %for.body23, %for.end
  %double_mode.0.lcssa = phi i32 [ 0, %for.end ], [ %mode.1.double_mode.0, %for.body23 ]
  %15 = load i32* @target_flags, align 4, !tbaa !1
  %and39 = and i32 %15, 33554432
  %16 = lshr exact i32 %and39, 20
  %17 = add i32 %16, 32
  %18 = lshr exact i32 %and39, 25
  %19 = or i32 %18, 4
  %idxprom45302 = zext i32 %19 to i64
  %arrayidx46 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom45302
  %20 = load i32* %arrayidx46, align 4, !tbaa !9
  %call47 = call i32 @mode_for_size(i32 %17, i32 %20, i32 0) #4
  store i32 %call47, i32* @ptr_mode, align 4, !tbaa !9
  %call48 = call %struct.rtx_def* (i32, i32, ...)* @gen_rtx(i32 59, i32 0)
  store %struct.rtx_def* %call48, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !tbaa !7
  %call49 = call %struct.rtx_def* (i32, i32, ...)* @gen_rtx(i32 69, i32 0)
  store %struct.rtx_def* %call49, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 1), align 8, !tbaa !7
  %21 = load i32* @target_flags, align 4, !tbaa !1
  %and50 = lshr i32 %21, 25
  %22 = and i32 %and50, 1
  %23 = or i32 %22, 4
  %call.i = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %23, i32 7) #4
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %call.i, i64 0, i32 1, i64 1
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx.i to i32*
  store i32 7, i32* %rtuint.i, align 4, !tbaa !1
  store %struct.rtx_def* %call.i, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !tbaa !7
  %24 = load i32* @target_flags, align 4, !tbaa !1
  %and54 = lshr i32 %24, 25
  %25 = and i32 %and54, 1
  %26 = or i32 %25, 4
  %call.i305 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %26, i32 20) #4
  %arrayidx.i306 = getelementptr inbounds %struct.rtx_def* %call.i305, i64 0, i32 1, i64 1
  %rtuint.i307 = bitcast %union.rtunion_def* %arrayidx.i306 to i32*
  store i32 20, i32* %rtuint.i307, align 4, !tbaa !1
  store %struct.rtx_def* %call.i305, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !tbaa !7
  %27 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !tbaa !7
  %cmp58 = icmp eq %struct.rtx_def* %27, null
  br i1 %cmp58, label %if.then60, label %if.end65

if.then60:                                        ; preds = %for.end38
  %28 = load i32* @target_flags, align 4, !tbaa !1
  %and61 = lshr i32 %28, 25
  %29 = and i32 %and61, 1
  %30 = or i32 %29, 4
  %call.i308 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %30, i32 6) #4
  %arrayidx.i309 = getelementptr inbounds %struct.rtx_def* %call.i308, i64 0, i32 1, i64 1
  %rtuint.i310 = bitcast %union.rtunion_def* %arrayidx.i309 to i32*
  store i32 6, i32* %rtuint.i310, align 4, !tbaa !1
  store %struct.rtx_def* %call.i308, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !tbaa !7
  br label %if.end65

if.end65:                                         ; preds = %if.then60, %for.end38
  %31 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !tbaa !7
  %cmp66 = icmp eq %struct.rtx_def* %31, null
  br i1 %cmp66, label %if.then68, label %if.end73

if.then68:                                        ; preds = %if.end65
  %32 = load i32* @target_flags, align 4, !tbaa !1
  %and69 = lshr i32 %32, 25
  %33 = and i32 %and69, 1
  %34 = or i32 %33, 4
  %call.i311 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %34, i32 16) #4
  %arrayidx.i312 = getelementptr inbounds %struct.rtx_def* %call.i311, i64 0, i32 1, i64 1
  %rtuint.i313 = bitcast %union.rtunion_def* %arrayidx.i312 to i32*
  store i32 16, i32* %rtuint.i313, align 4, !tbaa !1
  store %struct.rtx_def* %call.i311, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !tbaa !7
  br label %if.end73

if.end73:                                         ; preds = %if.then68, %if.end65
  %35 = load i32* @target_flags, align 4, !tbaa !1
  %and74 = lshr i32 %35, 25
  %36 = and i32 %and74, 1
  %37 = or i32 %36, 4
  %call.i314 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %37, i32 53) #4
  %arrayidx.i315 = getelementptr inbounds %struct.rtx_def* %call.i314, i64 0, i32 1, i64 1
  %rtuint.i316 = bitcast %union.rtunion_def* %arrayidx.i315 to i32*
  store i32 53, i32* %rtuint.i316, align 4, !tbaa !1
  store %struct.rtx_def* %call.i314, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16, !tbaa !7
  %38 = load i32* @target_flags, align 4, !tbaa !1
  %and78 = lshr i32 %38, 25
  %39 = and i32 %and78, 1
  %40 = or i32 %39, 4
  %call.i317 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %40, i32 54) #4
  %arrayidx.i318 = getelementptr inbounds %struct.rtx_def* %call.i317, i64 0, i32 1, i64 1
  %rtuint.i319 = bitcast %union.rtunion_def* %arrayidx.i318 to i32*
  store i32 54, i32* %rtuint.i319, align 4, !tbaa !1
  store %struct.rtx_def* %call.i317, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !tbaa !7
  %41 = load i32* @target_flags, align 4, !tbaa !1
  %and82 = lshr i32 %41, 25
  %42 = and i32 %and82, 1
  %43 = or i32 %42, 4
  %call.i320 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %43, i32 55) #4
  %arrayidx.i321 = getelementptr inbounds %struct.rtx_def* %call.i320, i64 0, i32 1, i64 1
  %rtuint.i322 = bitcast %union.rtunion_def* %arrayidx.i321 to i32*
  store i32 55, i32* %rtuint.i322, align 4, !tbaa !1
  store %struct.rtx_def* %call.i320, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16, !tbaa !7
  %44 = load i32* @target_flags, align 4, !tbaa !1
  %and86 = lshr i32 %44, 25
  %45 = and i32 %and86, 1
  %46 = or i32 %45, 4
  %call.i323 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %46, i32 56) #4
  %arrayidx.i324 = getelementptr inbounds %struct.rtx_def* %call.i323, i64 0, i32 1, i64 1
  %rtuint.i325 = bitcast %union.rtunion_def* %arrayidx.i324 to i32*
  store i32 56, i32* %rtuint.i325, align 4, !tbaa !1
  store %struct.rtx_def* %call.i323, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !tbaa !7
  %47 = load i32* @target_flags, align 4, !tbaa !1
  %and90 = lshr i32 %47, 25
  %48 = and i32 %and90, 1
  %49 = or i32 %48, 4
  %call.i326 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %49, i32 57) #4
  %arrayidx.i327 = getelementptr inbounds %struct.rtx_def* %call.i326, i64 0, i32 1, i64 1
  %rtuint.i328 = bitcast %union.rtunion_def* %arrayidx.i327 to i32*
  store i32 57, i32* %rtuint.i328, align 4, !tbaa !1
  store %struct.rtx_def* %call.i326, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 10), align 16, !tbaa !7
  call void @ggc_add_rtx_root(%struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), i32 11) #4
  br label %for.body97

for.body97:                                       ; preds = %for.body97, %if.end73
  %indvars.iv418 = phi i64 [ -64, %if.end73 ], [ %indvars.iv.next419, %for.body97 ]
  %call99 = call %struct.rtx_def* @gen_rtx_fmt_w(i32 54, i32 0, i64 %indvars.iv418) #4
  %50 = add nsw i64 %indvars.iv418, 64
  %arrayidx101 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %50
  store %struct.rtx_def* %call99, %struct.rtx_def** %arrayidx101, align 8, !tbaa !7
  %indvars.iv.next419 = add nsw i64 %indvars.iv418, 1
  %exitcond421 = icmp eq i64 %indvars.iv.next419, 65
  br i1 %exitcond421, label %for.end103, label %for.body97

for.end103:                                       ; preds = %for.body97
  call void @ggc_add_rtx_root(%struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 0), i32 129) #4
  %51 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !tbaa !7
  store %struct.rtx_def* %51, %struct.rtx_def** @const_true_rtx, align 8, !tbaa !7
  call void @ereal_atof(%struct.realvaluetype* sret %tmp, i8* getelementptr inbounds ([2 x i8]* @.str3, i64 0, i64 0), i32 %double_mode.0.lcssa) #4
  %52 = bitcast %struct.realvaluetype* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.realvaluetype* @dconst0 to i8*), i8* %52, i64 24, i32 8, i1 false), !tbaa.struct !70
  call void @ereal_atof(%struct.realvaluetype* sret %tmp104, i8* getelementptr inbounds ([2 x i8]* @.str4, i64 0, i64 0), i32 %double_mode.0.lcssa) #4
  %53 = bitcast %struct.realvaluetype* %tmp104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.realvaluetype* @dconst1 to i8*), i8* %53, i64 24, i32 8, i1 false), !tbaa.struct !70
  call void @ereal_atof(%struct.realvaluetype* sret %tmp105, i8* getelementptr inbounds ([2 x i8]* @.str5, i64 0, i64 0), i32 %double_mode.0.lcssa) #4
  %54 = bitcast %struct.realvaluetype* %tmp105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.realvaluetype* @dconst2 to i8*), i8* %54, i64 24, i32 8, i1 false), !tbaa.struct !70
  call void @ereal_atof(%struct.realvaluetype* sret %tmp106, i8* getelementptr inbounds ([3 x i8]* @.str6, i64 0, i64 0), i32 %double_mode.0.lcssa) #4
  %55 = bitcast %struct.realvaluetype* %tmp106 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.realvaluetype* @dconstm1 to i8*), i8* %55, i64 24, i32 8, i1 false), !tbaa.struct !70
  %56 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 3), align 4, !tbaa !9
  %cmp158408 = icmp eq i32 %56, 0
  %u.sroa.0.0..sroa_cast250 = bitcast [3 x i64]* %u.sroa.0 to i8*
  br label %for.body110

for.body110:                                      ; preds = %for.inc172, %for.end103
  %indvars.iv = phi i64 [ 0, %for.end103 ], [ %indvars.iv.next, %for.inc172 ]
  br i1 %cmp21413, label %gen_rtx_CONST_INT.exit, label %for.body114

for.body114:                                      ; preds = %for.body110, %cond.end124
  %mode.2405 = phi i32 [ %conv135, %cond.end124 ], [ %12, %for.body110 ]
  %call116 = call %struct.rtx_def* @rtx_alloc(i32 55) #4
  call void @llvm.memset.p0i8.i64(i8* %u.sroa.0.0..sroa_cast250, i8 0, i64 24, i32 8, i1 false)
  %57 = trunc i64 %indvars.iv to i32
  switch i32 %57, label %cond.false123 [
    i32 0, label %cond.true
    i32 1, label %cond.true122
  ]

cond.true:                                        ; preds = %for.body114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %u.sroa.0.0..sroa_cast250, i8* bitcast (%struct.realvaluetype* @dconst0 to i8*), i64 24, i32 8, i1 false)
  br label %cond.end124

cond.true122:                                     ; preds = %for.body114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %u.sroa.0.0..sroa_cast250, i8* bitcast (%struct.realvaluetype* @dconst1 to i8*), i64 24, i32 8, i1 false)
  br label %cond.end124

cond.false123:                                    ; preds = %for.body114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %u.sroa.0.0..sroa_cast250, i8* bitcast (%struct.realvaluetype* @dconst2 to i8*), i64 24, i32 8, i1 false)
  br label %cond.end124

cond.end124:                                      ; preds = %cond.true122, %cond.false123, %cond.true
  %rtwint = getelementptr inbounds %struct.rtx_def* %call116, i64 0, i32 1, i64 1, i32 0
  %u.sroa.0.0..sroa_cast248 = bitcast i64* %rtwint to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %u.sroa.0.0..sroa_cast248, i8* %u.sroa.0.0..sroa_cast250, i64 24, i32 8, i1 false)
  %58 = getelementptr inbounds %struct.rtx_def* %call116, i64 0, i32 1, i64 0, i32 0
  store i64 0, i64* %58, align 8, !tbaa !7
  %59 = getelementptr inbounds %struct.rtx_def* %call116, i64 0, i32 0
  %bf.load = load i32* %59, align 8
  %bf.value = shl i32 %mode.2405, 16
  %bf.shl = and i32 %bf.value, 16711680
  %bf.clear = and i32 %bf.load, -16711681
  %bf.set = or i32 %bf.clear, %bf.shl
  store i32 %bf.set, i32* %59, align 8
  %idxprom128 = sext i32 %mode.2405 to i64
  %arrayidx131 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %indvars.iv, i64 %idxprom128
  store %struct.rtx_def* %call116, %struct.rtx_def** %arrayidx131, align 8, !tbaa !7
  %arrayidx134 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom128
  %60 = load i8* %arrayidx134, align 1, !tbaa !9
  %conv135 = zext i8 %60 to i32
  %cmp112 = icmp eq i8 %60, 0
  br i1 %cmp112, label %gen_rtx_CONST_INT.exit, label %for.body114

gen_rtx_CONST_INT.exit:                           ; preds = %cond.end124, %for.body110
  %arg.off.i = add i64 %indvars.iv, 64
  %arrayidx.i329 = getelementptr inbounds [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 %arg.off.i
  %61 = load %struct.rtx_def** %arrayidx.i329, align 8, !tbaa !7
  %arrayidx141 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %indvars.iv, i64 0
  store %struct.rtx_def* %61, %struct.rtx_def** %arrayidx141, align 8, !tbaa !7
  br i1 %cmp416, label %for.end156, label %gen_rtx_CONST_INT.exit343

gen_rtx_CONST_INT.exit343:                        ; preds = %gen_rtx_CONST_INT.exit, %gen_rtx_CONST_INT.exit343
  %mode.3407 = phi i32 [ %conv155, %gen_rtx_CONST_INT.exit343 ], [ %2, %gen_rtx_CONST_INT.exit ]
  %idxprom148 = sext i32 %mode.3407 to i64
  %arrayidx151 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %indvars.iv, i64 %idxprom148
  store %struct.rtx_def* %61, %struct.rtx_def** %arrayidx151, align 8, !tbaa !7
  %arrayidx154 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom148
  %62 = load i8* %arrayidx154, align 1, !tbaa !9
  %conv155 = zext i8 %62 to i32
  %cmp143 = icmp eq i8 %62, 0
  br i1 %cmp143, label %for.end156, label %gen_rtx_CONST_INT.exit343

for.end156:                                       ; preds = %gen_rtx_CONST_INT.exit343, %gen_rtx_CONST_INT.exit
  br i1 %cmp158408, label %for.inc172, label %gen_rtx_CONST_INT.exit356

gen_rtx_CONST_INT.exit356:                        ; preds = %for.end156, %gen_rtx_CONST_INT.exit356
  %mode.4409 = phi i32 [ %conv170, %gen_rtx_CONST_INT.exit356 ], [ %56, %for.end156 ]
  %idxprom163 = sext i32 %mode.4409 to i64
  %arrayidx166 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 %indvars.iv, i64 %idxprom163
  store %struct.rtx_def* %61, %struct.rtx_def** %arrayidx166, align 8, !tbaa !7
  %arrayidx169 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom163
  %63 = load i8* %arrayidx169, align 1, !tbaa !9
  %conv170 = zext i8 %63 to i32
  %cmp158 = icmp eq i8 %63, 0
  br i1 %cmp158, label %for.inc172, label %gen_rtx_CONST_INT.exit356

for.inc172:                                       ; preds = %gen_rtx_CONST_INT.exit356, %for.end156
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %for.end174, label %for.body110

for.end174:                                       ; preds = %for.inc172
  %64 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 7), align 4, !tbaa !9
  %cmp176402 = icmp eq i32 %64, 0
  br i1 %cmp176402, label %for.end186, label %for.body178

for.body178:                                      ; preds = %for.end174, %gen_const_vector_0.exit
  %mode.5403 = phi i32 [ %conv185, %gen_const_vector_0.exit ], [ %64, %for.end174 ]
  %idxprom.i = sext i32 %mode.5403 to i64
  %arrayidx.i357 = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom.i
  %65 = load i8* %arrayidx.i357, align 1, !tbaa !9
  %cmp.i = icmp eq i8 %65, 0
  br i1 %cmp.i, label %cond.end.i, label %cond.false.i

cond.false.i:                                     ; preds = %for.body178
  %arrayidx3.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i
  %66 = load i8* %arrayidx3.i, align 1, !tbaa !9
  %div28.i = udiv i8 %66, %65
  %div.i = zext i8 %div28.i to i32
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %for.body178
  %cond.i = phi i32 [ %div.i, %cond.false.i ], [ 0, %for.body178 ]
  %arrayidx9.i = getelementptr inbounds [59 x i32]* @inner_mode_array, i64 0, i64 %idxprom.i
  %67 = load i32* %arrayidx9.i, align 4, !tbaa !9
  %call.i358 = call %struct.rtvec_def* @rtvec_alloc(i32 %cond.i) #4
  %idxprom10.i = sext i32 %67 to i64
  %arrayidx11.i = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 %idxprom10.i
  %68 = load %struct.rtx_def** %arrayidx11.i, align 8, !tbaa !7
  %tobool.i = icmp eq %struct.rtx_def* %68, null
  br i1 %tobool.i, label %if.then.i359, label %for.cond.preheader.i

for.cond.preheader.i:                             ; preds = %cond.end.i
  %cmp1229.i = icmp eq i32 %cond.i, 0
  br i1 %cmp1229.i, label %gen_const_vector_0.exit, label %for.body.i.preheader

for.body.i.preheader:                             ; preds = %for.cond.preheader.i
  %arrayidx17.i399 = getelementptr inbounds %struct.rtvec_def* %call.i358, i64 0, i32 1, i64 0
  store %struct.rtx_def* %68, %struct.rtx_def** %arrayidx17.i399, align 8, !tbaa !7
  %cmp12.i400 = icmp ugt i32 %cond.i, 1
  br i1 %cmp12.i400, label %for.body.for.body_crit_edge.i, label %gen_const_vector_0.exit

if.then.i359:                                     ; preds = %cond.end.i
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 4941, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.gen_const_vector_0, i64 0, i64 0)) #8
  unreachable

for.body.for.body_crit_edge.i:                    ; preds = %for.body.i.preheader, %for.body.for.body_crit_edge.i
  %indvars.iv.next.i401 = phi i64 [ %indvars.iv.next.i, %for.body.for.body_crit_edge.i ], [ 1, %for.body.i.preheader ]
  %.pre.i = load %struct.rtx_def** %arrayidx11.i, align 8, !tbaa !7
  %arrayidx17.i = getelementptr inbounds %struct.rtvec_def* %call.i358, i64 0, i32 1, i64 %indvars.iv.next.i401
  store %struct.rtx_def* %.pre.i, %struct.rtx_def** %arrayidx17.i, align 8, !tbaa !7
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i401, 1
  %69 = trunc i64 %indvars.iv.next.i to i32
  %cmp12.i = icmp slt i32 %69, %cond.i
  br i1 %cmp12.i, label %for.body.for.body_crit_edge.i, label %gen_const_vector_0.exit

gen_const_vector_0.exit:                          ; preds = %for.body.for.body_crit_edge.i, %for.body.i.preheader, %for.cond.preheader.i
  %call18.i = call %struct.rtx_def* @gen_rtx_fmt_E(i32 56, i32 %mode.5403, %struct.rtvec_def* %call.i358) #4
  %arrayidx181 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 %idxprom.i
  store %struct.rtx_def* %call18.i, %struct.rtx_def** %arrayidx181, align 8, !tbaa !7
  %arrayidx184 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom.i
  %70 = load i8* %arrayidx184, align 1, !tbaa !9
  %conv185 = zext i8 %70 to i32
  %cmp176 = icmp eq i8 %70, 0
  br i1 %cmp176, label %for.end186, label %for.body178

for.end186:                                       ; preds = %gen_const_vector_0.exit, %for.end174
  %71 = load i32* getelementptr inbounds ([9 x i32]* @class_narrowest_mode, i64 0, i64 8), align 4, !tbaa !9
  %cmp188397 = icmp eq i32 %71, 0
  br i1 %cmp188397, label %for.cond199.preheader, label %for.body190

for.cond199.preheader:                            ; preds = %gen_const_vector_0.exit385, %for.end186
  %72 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !tbaa !7
  %73 = load i32* getelementptr inbounds ([59 x i32]* @mode_class, i64 0, i64 52), align 4, !tbaa !9
  %cmp205 = icmp eq i32 %73, 4
  br i1 %cmp205, label %if.then207, label %for.inc211

for.body190:                                      ; preds = %for.end186, %gen_const_vector_0.exit385
  %mode.6398 = phi i32 [ %conv197, %gen_const_vector_0.exit385 ], [ %71, %for.end186 ]
  %idxprom.i360 = sext i32 %mode.6398 to i64
  %arrayidx.i361 = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom.i360
  %74 = load i8* %arrayidx.i361, align 1, !tbaa !9
  %cmp.i362 = icmp eq i8 %74, 0
  br i1 %cmp.i362, label %cond.end.i373, label %cond.false.i366

cond.false.i366:                                  ; preds = %for.body190
  %arrayidx3.i363 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom.i360
  %75 = load i8* %arrayidx3.i363, align 1, !tbaa !9
  %div28.i364 = udiv i8 %75, %74
  %div.i365 = zext i8 %div28.i364 to i32
  br label %cond.end.i373

cond.end.i373:                                    ; preds = %cond.false.i366, %for.body190
  %cond.i367 = phi i32 [ %div.i365, %cond.false.i366 ], [ 0, %for.body190 ]
  %arrayidx9.i368 = getelementptr inbounds [59 x i32]* @inner_mode_array, i64 0, i64 %idxprom.i360
  %76 = load i32* %arrayidx9.i368, align 4, !tbaa !9
  %call.i369 = call %struct.rtvec_def* @rtvec_alloc(i32 %cond.i367) #4
  %idxprom10.i370 = sext i32 %76 to i64
  %arrayidx11.i371 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 %idxprom10.i370
  %77 = load %struct.rtx_def** %arrayidx11.i371, align 8, !tbaa !7
  %tobool.i372 = icmp eq %struct.rtx_def* %77, null
  br i1 %tobool.i372, label %if.then.i376, label %for.cond.preheader.i375

for.cond.preheader.i375:                          ; preds = %cond.end.i373
  %cmp1229.i374 = icmp eq i32 %cond.i367, 0
  br i1 %cmp1229.i374, label %gen_const_vector_0.exit385, label %for.body.i381.preheader

for.body.i381.preheader:                          ; preds = %for.cond.preheader.i375
  %arrayidx17.i378394 = getelementptr inbounds %struct.rtvec_def* %call.i369, i64 0, i32 1, i64 0
  store %struct.rtx_def* %77, %struct.rtx_def** %arrayidx17.i378394, align 8, !tbaa !7
  %cmp12.i380395 = icmp ugt i32 %cond.i367, 1
  br i1 %cmp12.i380395, label %for.body.for.body_crit_edge.i383, label %gen_const_vector_0.exit385

if.then.i376:                                     ; preds = %cond.end.i373
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8]* @.str, i64 0, i64 0), i32 4941, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.gen_const_vector_0, i64 0, i64 0)) #8
  unreachable

for.body.for.body_crit_edge.i383:                 ; preds = %for.body.i381.preheader, %for.body.for.body_crit_edge.i383
  %indvars.iv.next.i379396 = phi i64 [ %indvars.iv.next.i379, %for.body.for.body_crit_edge.i383 ], [ 1, %for.body.i381.preheader ]
  %.pre.i382 = load %struct.rtx_def** %arrayidx11.i371, align 8, !tbaa !7
  %arrayidx17.i378 = getelementptr inbounds %struct.rtvec_def* %call.i369, i64 0, i32 1, i64 %indvars.iv.next.i379396
  store %struct.rtx_def* %.pre.i382, %struct.rtx_def** %arrayidx17.i378, align 8, !tbaa !7
  %indvars.iv.next.i379 = add nuw nsw i64 %indvars.iv.next.i379396, 1
  %78 = trunc i64 %indvars.iv.next.i379 to i32
  %cmp12.i380 = icmp slt i32 %78, %cond.i367
  br i1 %cmp12.i380, label %for.body.for.body_crit_edge.i383, label %gen_const_vector_0.exit385

gen_const_vector_0.exit385:                       ; preds = %for.body.for.body_crit_edge.i383, %for.body.i381.preheader, %for.cond.preheader.i375
  %call18.i384 = call %struct.rtx_def* @gen_rtx_fmt_E(i32 56, i32 %mode.6398, %struct.rtvec_def* %call.i369) #4
  %arrayidx193 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 %idxprom.i360
  store %struct.rtx_def* %call18.i384, %struct.rtx_def** %arrayidx193, align 8, !tbaa !7
  %arrayidx196 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom.i360
  %79 = load i8* %arrayidx196, align 1, !tbaa !9
  %conv197 = zext i8 %79 to i32
  %cmp188 = icmp eq i8 %79, 0
  br i1 %cmp188, label %for.cond199.preheader, label %for.body190

if.then207:                                       ; preds = %for.cond199.preheader
  store %struct.rtx_def* %72, %struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 52), align 16, !tbaa !7
  br label %for.inc211

for.inc211:                                       ; preds = %for.cond199.preheader, %if.then207
  %80 = load i32* getelementptr inbounds ([59 x i32]* @mode_class, i64 0, i64 53), align 4, !tbaa !9
  %cmp205.1 = icmp eq i32 %80, 4
  br i1 %cmp205.1, label %if.then207.1, label %for.inc211.1

lor.end239:                                       ; preds = %for.inc211.6
  %call.i390 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 4, i32 3) #4
  %arrayidx.i391 = getelementptr inbounds %struct.rtx_def* %call.i390, i64 0, i32 1, i64 1
  %rtuint.i392 = bitcast %union.rtunion_def* %arrayidx.i391 to i32*
  store i32 3, i32* %rtuint.i392, align 4, !tbaa !1
  store %struct.rtx_def* %call.i390, %struct.rtx_def** @pic_offset_table_rtx, align 8, !tbaa !7
  br label %if.end242

if.end242:                                        ; preds = %for.inc211.6, %lor.end239
  call void @ggc_add_rtx_root(%struct.rtx_def** @pic_offset_table_rtx, i32 1) #4
  call void @ggc_add_rtx_root(%struct.rtx_def** @struct_value_rtx, i32 1) #4
  call void @ggc_add_rtx_root(%struct.rtx_def** @struct_value_incoming_rtx, i32 1) #4
  call void @ggc_add_rtx_root(%struct.rtx_def** @static_chain_rtx, i32 1) #4
  call void @ggc_add_rtx_root(%struct.rtx_def** @static_chain_incoming_rtx, i32 1) #4
  call void @ggc_add_rtx_root(%struct.rtx_def** @return_address_pointer_rtx, i32 1) #4
  ret void

if.then207.1:                                     ; preds = %for.inc211
  store %struct.rtx_def* %72, %struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 53), align 8, !tbaa !7
  br label %for.inc211.1

for.inc211.1:                                     ; preds = %if.then207.1, %for.inc211
  %81 = load i32* getelementptr inbounds ([59 x i32]* @mode_class, i64 0, i64 54), align 4, !tbaa !9
  %cmp205.2 = icmp eq i32 %81, 4
  br i1 %cmp205.2, label %if.then207.2, label %for.inc211.2

if.then207.2:                                     ; preds = %for.inc211.1
  store %struct.rtx_def* %72, %struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 54), align 16, !tbaa !7
  br label %for.inc211.2

for.inc211.2:                                     ; preds = %if.then207.2, %for.inc211.1
  %82 = load i32* getelementptr inbounds ([59 x i32]* @mode_class, i64 0, i64 55), align 4, !tbaa !9
  %cmp205.3 = icmp eq i32 %82, 4
  br i1 %cmp205.3, label %if.then207.3, label %for.inc211.3

if.then207.3:                                     ; preds = %for.inc211.2
  store %struct.rtx_def* %72, %struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 55), align 8, !tbaa !7
  br label %for.inc211.3

for.inc211.3:                                     ; preds = %if.then207.3, %for.inc211.2
  %83 = load i32* getelementptr inbounds ([59 x i32]* @mode_class, i64 0, i64 56), align 4, !tbaa !9
  %cmp205.4 = icmp eq i32 %83, 4
  br i1 %cmp205.4, label %if.then207.4, label %for.inc211.4

if.then207.4:                                     ; preds = %for.inc211.3
  store %struct.rtx_def* %72, %struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 56), align 16, !tbaa !7
  br label %for.inc211.4

for.inc211.4:                                     ; preds = %if.then207.4, %for.inc211.3
  %84 = load i32* getelementptr inbounds ([59 x i32]* @mode_class, i64 0, i64 57), align 4, !tbaa !9
  %cmp205.5 = icmp eq i32 %84, 4
  br i1 %cmp205.5, label %if.then207.5, label %for.inc211.5

if.then207.5:                                     ; preds = %for.inc211.4
  store %struct.rtx_def* %72, %struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 57), align 8, !tbaa !7
  br label %for.inc211.5

for.inc211.5:                                     ; preds = %if.then207.5, %for.inc211.4
  %85 = load i32* getelementptr inbounds ([59 x i32]* @mode_class, i64 0, i64 58), align 4, !tbaa !9
  %cmp205.6 = icmp eq i32 %85, 4
  br i1 %cmp205.6, label %if.then207.6, label %for.inc211.6

if.then207.6:                                     ; preds = %for.inc211.5
  store %struct.rtx_def* %72, %struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 58), align 16, !tbaa !7
  br label %for.inc211.6

for.inc211.6:                                     ; preds = %if.then207.6, %for.inc211.5
  store %struct.rtx_def* %72, %struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 1), align 8, !tbaa !7
  %86 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !tbaa !7
  store %struct.rtx_def* %86, %struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1, i64 1), align 8, !tbaa !7
  call void @ggc_add_rtx_root(%struct.rtx_def** getelementptr inbounds ([3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 0), i32 177) #4
  call void @ggc_add_rtx_root(%struct.rtx_def** @const_true_rtx, i32 1) #4
  store %struct.rtx_def* null, %struct.rtx_def** @struct_value_rtx, align 8, !tbaa !7
  store %struct.rtx_def* null, %struct.rtx_def** @struct_value_incoming_rtx, align 8, !tbaa !7
  %87 = load i32* @target_flags, align 4, !tbaa !1
  %and214 = and i32 %87, 33554432
  %tobool215 = icmp ne i32 %and214, 0
  %88 = lshr exact i32 %and214, 25
  %89 = or i32 %88, 4
  %cond219 = select i1 %tobool215, i32 39, i32 2
  %call.i.i = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %89, i32 %cond219) #4
  %arrayidx.i.i = getelementptr inbounds %struct.rtx_def* %call.i.i, i64 0, i32 1, i64 1
  %rtuint.i.i = bitcast %union.rtunion_def* %arrayidx.i.i to i32*
  store i32 %cond219, i32* %rtuint.i.i, align 4, !tbaa !1
  store %struct.rtx_def* %call.i.i, %struct.rtx_def** @static_chain_rtx, align 8, !tbaa !7
  store %struct.rtx_def* %call.i.i, %struct.rtx_def** @static_chain_incoming_rtx, align 8, !tbaa !7
  %90 = load i32* @target_flags, align 4, !tbaa !1
  %and221 = and i32 %90, 33554432
  %tobool222 = icmp eq i32 %and221, 0
  %91 = load i32* @flag_pic, align 4
  %not.lnot224 = icmp ne i32 %91, 0
  %or.cond304 = and i1 %tobool222, %not.lnot224
  br i1 %or.cond304, label %lor.end239, label %if.end242
}

declare %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #1

; Function Attrs: nounwind readonly uwtable
define internal i32 @const_int_htab_hash(i8* nocapture readonly %x) #5 {
entry:
  %fld = getelementptr inbounds i8* %x, i64 8
  %rtwint = bitcast i8* %fld to i64*
  %0 = load i64* %rtwint, align 8, !tbaa !5
  %conv = trunc i64 %0 to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @const_int_htab_eq(i8* nocapture readonly %x, i8* nocapture readonly %y) #5 {
entry:
  %fld = getelementptr inbounds i8* %x, i64 8
  %rtwint = bitcast i8* %fld to i64*
  %0 = load i64* %rtwint, align 8, !tbaa !5
  %1 = bitcast i8* %y to i64*
  %2 = load i64* %1, align 8, !tbaa !5
  %cmp = icmp eq i64 %0, %2
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare void @ggc_add_deletable_htab(i8*, i32 (i8*)*, void (i8*)*) #1

; Function Attrs: nounwind readonly uwtable
define internal i32 @mem_attrs_htab_hash(i8* nocapture readonly %x) #5 {
entry:
  %alias = bitcast i8* %x to i64*
  %0 = load i64* %alias, align 8, !tbaa !28
  %align = getelementptr inbounds i8* %x, i64 32
  %1 = bitcast i8* %align to i32*
  %2 = load i32* %1, align 4, !tbaa !26
  %mul = mul i32 %2, 1000
  %conv = zext i32 %mul to i64
  %xor = xor i64 %conv, %0
  %offset = getelementptr inbounds i8* %x, i64 16
  %3 = bitcast i8* %offset to %struct.rtx_def**
  %4 = load %struct.rtx_def** %3, align 8, !tbaa !24
  %tobool = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool, label %cond.end, label %cond.true

cond.true:                                        ; preds = %entry
  %rtwint = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0, i32 0
  %5 = load i64* %rtwint, align 8, !tbaa !5
  %phitmp = mul i64 %5, 50000
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i64 [ %phitmp, %cond.true ], [ 0, %entry ]
  %xor3 = xor i64 %xor, %cond
  %size = getelementptr inbounds i8* %x, i64 24
  %6 = bitcast i8* %size to %struct.rtx_def**
  %7 = load %struct.rtx_def** %6, align 8, !tbaa !27
  %tobool4 = icmp eq %struct.rtx_def* %7, null
  br i1 %tobool4, label %cond.end11, label %cond.true5

cond.true5:                                       ; preds = %cond.end
  %rtwint9 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0, i32 0
  %8 = load i64* %rtwint9, align 8, !tbaa !5
  %phitmp23 = mul i64 %8, 2500000
  br label %cond.end11

cond.end11:                                       ; preds = %cond.end, %cond.true5
  %cond12 = phi i64 [ %phitmp23, %cond.true5 ], [ 0, %cond.end ]
  %xor14 = xor i64 %xor3, %cond12
  %expr = getelementptr inbounds i8* %x, i64 8
  %9 = bitcast i8* %expr to %union.tree_node**
  %10 = load %union.tree_node** %9, align 8, !tbaa !29
  %11 = ptrtoint %union.tree_node* %10 to i64
  %xor15 = xor i64 %xor14, %11
  %conv16 = trunc i64 %xor15 to i32
  ret i32 %conv16
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @mem_attrs_htab_eq(i8* nocapture readonly %x, i8* nocapture readonly %y) #5 {
entry:
  %alias = bitcast i8* %x to i64*
  %0 = load i64* %alias, align 8, !tbaa !28
  %alias1 = bitcast i8* %y to i64*
  %1 = load i64* %alias1, align 8, !tbaa !28
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %expr = getelementptr inbounds i8* %x, i64 8
  %2 = bitcast i8* %expr to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !29
  %expr2 = getelementptr inbounds i8* %y, i64 8
  %4 = bitcast i8* %expr2 to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !29
  %cmp3 = icmp eq %union.tree_node* %3, %5
  br i1 %cmp3, label %land.lhs.true4, label %land.end

land.lhs.true4:                                   ; preds = %land.lhs.true
  %offset = getelementptr inbounds i8* %x, i64 16
  %6 = bitcast i8* %offset to %struct.rtx_def**
  %7 = load %struct.rtx_def** %6, align 8, !tbaa !24
  %offset5 = getelementptr inbounds i8* %y, i64 16
  %8 = bitcast i8* %offset5 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %8, align 8, !tbaa !24
  %cmp6 = icmp eq %struct.rtx_def* %7, %9
  br i1 %cmp6, label %land.lhs.true7, label %land.end

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %size = getelementptr inbounds i8* %x, i64 24
  %10 = bitcast i8* %size to %struct.rtx_def**
  %11 = load %struct.rtx_def** %10, align 8, !tbaa !27
  %size8 = getelementptr inbounds i8* %y, i64 24
  %12 = bitcast i8* %size8 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %12, align 8, !tbaa !27
  %cmp9 = icmp eq %struct.rtx_def* %11, %13
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true7
  %align = getelementptr inbounds i8* %x, i64 32
  %14 = bitcast i8* %align to i32*
  %15 = load i32* %14, align 4, !tbaa !26
  %align10 = getelementptr inbounds i8* %y, i64 32
  %16 = bitcast i8* %align10 to i32*
  %17 = load i32* %16, align 4, !tbaa !26
  %cmp11 = icmp eq i32 %15, %17
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %entry
  %18 = phi i1 [ false, %land.lhs.true7 ], [ false, %land.lhs.true4 ], [ false, %land.lhs.true ], [ false, %entry ], [ %cmp11, %land.rhs ]
  %land.ext = zext i1 %18 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define internal void @mem_attrs_mark(i8* nocapture readonly %x) #0 {
entry:
  %expr = getelementptr inbounds i8* %x, i64 8
  %0 = bitcast i8* %expr to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !29
  %tobool = icmp eq %union.tree_node* %1, null
  br i1 %tobool, label %if.end12, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = bitcast %union.tree_node* %1 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %2) #4
  %tobool2 = icmp eq i32 %call, 0
  br i1 %tobool2, label %do.body4, label %if.end12

do.body4:                                         ; preds = %land.lhs.true
  %3 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !7
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 1
  %4 = load i64* %elements_used, align 8, !tbaa !69
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 0
  %5 = load i64* %num_elements, align 8, !tbaa !55
  %cmp5 = icmp ult i64 %4, %5
  br i1 %cmp5, label %if.end, label %if.then6

if.then6:                                         ; preds = %do.body4
  %mul = shl i64 %5, 1
  %call8 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %3, i64 %mul) #4
  store %struct.varray_head_tag* %call8, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !7
  %elements_used9.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call8, i64 0, i32 1
  %.pre = load i64* %elements_used9.phi.trans.insert, align 8, !tbaa !69
  br label %if.end

if.end:                                           ; preds = %do.body4, %if.then6
  %6 = phi i64 [ %4, %do.body4 ], [ %.pre, %if.then6 ]
  %7 = phi %struct.varray_head_tag* [ %3, %do.body4 ], [ %call8, %if.then6 ]
  %elements_used9 = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 1
  %inc = add i64 %6, 1
  store i64 %inc, i64* %elements_used9, align 8, !tbaa !69
  %data = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %6
  store %union.tree_node* %1, %union.tree_node** %arrayidx, align 8, !tbaa !7
  br label %if.end12

if.end12:                                         ; preds = %entry, %land.lhs.true, %if.end
  %offset = getelementptr inbounds i8* %x, i64 16
  %8 = bitcast i8* %offset to %struct.rtx_def**
  %9 = load %struct.rtx_def** %8, align 8, !tbaa !24
  %tobool13 = icmp eq %struct.rtx_def* %9, null
  br i1 %tobool13, label %if.end24, label %land.lhs.true18

land.lhs.true18:                                  ; preds = %if.end12
  %10 = bitcast %struct.rtx_def* %9 to i8*
  %call19 = tail call i32 @ggc_set_mark(i8* %10) #4
  %tobool20 = icmp eq i32 %call19, 0
  br i1 %tobool20, label %if.then21, label %if.end24

if.then21:                                        ; preds = %land.lhs.true18
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %9) #4
  br label %if.end24

if.end24:                                         ; preds = %if.end12, %land.lhs.true18, %if.then21
  %size = getelementptr inbounds i8* %x, i64 24
  %11 = bitcast i8* %size to %struct.rtx_def**
  %12 = load %struct.rtx_def** %11, align 8, !tbaa !27
  %tobool25 = icmp eq %struct.rtx_def* %12, null
  br i1 %tobool25, label %if.end37, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %if.end24
  %13 = bitcast %struct.rtx_def* %12 to i8*
  %call32 = tail call i32 @ggc_set_mark(i8* %13) #4
  %tobool33 = icmp eq i32 %call32, 0
  br i1 %tobool33, label %if.then34, label %if.end37

if.then34:                                        ; preds = %land.lhs.true31
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %12) #4
  br label %if.end37

if.end37:                                         ; preds = %if.end24, %land.lhs.true31, %if.then34
  ret void
}

declare void @ggc_add_rtx_root(%struct.rtx_def**, i32) #1

declare void @ereal_atof(%struct.realvaluetype* sret, i8*, i32) #1

; Function Attrs: nounwind uwtable
define i32 @force_line_numbers() #0 {
entry:
  %0 = load i32* @no_line_numbers, align 4, !tbaa !1
  store i32 0, i32* @no_line_numbers, align 4, !tbaa !1
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !7
  %emit.i = getelementptr inbounds %struct.function* %1, i64 0, i32 3
  %2 = load %struct.emit_status** %emit.i, align 8, !tbaa !10
  %x_last_linenum.i = getelementptr inbounds %struct.emit_status* %2, i64 0, i32 7
  store i32 -1, i32* %x_last_linenum.i, align 4, !tbaa !64
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define void @restore_line_number_status(i32 %old_value) #0 {
entry:
  store i32 %old_value, i32* @no_line_numbers, align 4, !tbaa !1
  ret void
}

declare %struct.rtx_def* @memory_address(i32, %struct.rtx_def*) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

declare i8** @htab_find_slot(%struct.htab*, i8*, i32) #1

declare i8* @ggc_alloc(i64) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

declare %union.tree_node* @find_placeholder(%union.tree_node*, %union.tree_node**) #1

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"int", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !6, i64 0}
!6 = metadata !{metadata !"long long", metadata !3, i64 0}
!7 = metadata !{metadata !8, metadata !8, i64 0}
!8 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!9 = metadata !{metadata !3, metadata !3, i64 0}
!10 = metadata !{metadata !11, metadata !8, i64 24}
!11 = metadata !{metadata !"function", metadata !8, i64 0, metadata !8, i64 8, metadata !8, i64 16, metadata !8, i64 24, metadata !8, i64 32, metadata !8, i64 40, metadata !8, i64 48, metadata !8, i64 56, metadata !2, i64 64, metadata !2, i64 68, metadata !2, i64 72, metadata !2, i64 76, metadata !8, i64 80, metadata !12, i64 88, metadata !8, i64 120, metadata !8, i64 128, metadata !8, i64 136, metadata !8, i64 144, metadata !2, i64 152, metadata !8, i64 160, metadata !8, i64 168, metadata !8, i64 176, metadata !8, i64 184, metadata !8, i64 192, metadata !8, i64 200, metadata !8, i64 208, metadata !8, i64 216, metadata !8, i64 224, metadata !8, i64 232, metadata !8, i64 240, metadata !8, i64 248, metadata !8, i64 256, metadata !6, i64 264, metadata !8, i64 272, metadata !8, i64 280, metadata !8, i64 288, metadata !8, i64 296, metadata !2, i64 304, metadata !8, i64 312, metadata !8, i64 320, metadata !2, i64 328, metadata !2, i64 332, metadata !2, i64 336, metadata !8, i64 344, metadata !2, i64 352, metadata !2, i64 356, metadata !8, i64 360, metadata !8, i64 368, metadata !8, i64 376, metadata !2, i64 384, metadata !2, i64 388, metadata !8, i64 392, metadata !2, i64 400, metadata !2, i64 404, metadata !8, i64 408, metadata !8, i64 416, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426}
!12 = metadata !{metadata !"ix86_args", metadata !2, i64 0, metadata !2, i64 4, metadata !2, i64 8, metadata !2, i64 12, metadata !2, i64 16, metadata !2, i64 20, metadata !2, i64 24}
!13 = metadata !{metadata !14, metadata !2, i64 0}
!14 = metadata !{metadata !"emit_status", metadata !2, i64 0, metadata !2, i64 4, metadata !8, i64 8, metadata !8, i64 16, metadata !8, i64 24, metadata !8, i64 32, metadata !2, i64 40, metadata !2, i64 44, metadata !8, i64 48, metadata !2, i64 56, metadata !8, i64 64, metadata !8, i64 72, metadata !8, i64 80}
!15 = metadata !{metadata !14, metadata !2, i64 56}
!16 = metadata !{metadata !14, metadata !8, i64 64}
!17 = metadata !{metadata !14, metadata !8, i64 80}
!18 = metadata !{metadata !14, metadata !8, i64 72}
!19 = metadata !{metadata !14, metadata !2, i64 4}
!20 = metadata !{metadata !21, metadata !21, i64 0}
!21 = metadata !{metadata !"short", metadata !3, i64 0}
!22 = metadata !{metadata !23, metadata !23, i64 0}
!23 = metadata !{metadata !"long", metadata !3, i64 0}
!24 = metadata !{metadata !25, metadata !8, i64 16}
!25 = metadata !{metadata !"", metadata !6, i64 0, metadata !8, i64 8, metadata !8, i64 16, metadata !8, i64 24, metadata !2, i64 32}
!26 = metadata !{metadata !25, metadata !2, i64 32}
!27 = metadata !{metadata !25, metadata !8, i64 24}
!28 = metadata !{metadata !25, metadata !6, i64 0}
!29 = metadata !{metadata !25, metadata !8, i64 8}
!30 = metadata !{metadata !31, metadata !8, i64 8}
!31 = metadata !{metadata !"tree_common", metadata !8, i64 0, metadata !8, i64 8, metadata !3, i64 16, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19}
!32 = metadata !{metadata !33, metadata !8, i64 144}
!33 = metadata !{metadata !"tree_decl", metadata !31, i64 0, metadata !8, i64 24, metadata !2, i64 32, metadata !2, i64 36, metadata !8, i64 40, metadata !3, i64 48, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 51, metadata !2, i64 51, metadata !2, i64 51, metadata !2, i64 51, metadata !2, i64 51, metadata !3, i64 51, metadata !2, i64 51, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 53, metadata !2, i64 53, metadata !2, i64 53, metadata !2, i64 53, metadata !2, i64 53, metadata !3, i64 56, metadata !8, i64 64, metadata !8, i64 72, metadata !8, i64 80, metadata !8, i64 88, metadata !8, i64 96, metadata !8, i64 104, metadata !8, i64 112, metadata !8, i64 120, metadata !8, i64 128, metadata !8, i64 136, metadata !8, i64 144, metadata !8, i64 152, metadata !3, i64 160, metadata !8, i64 168, metadata !8, i64 176, metadata !8, i64 184, metadata !6, i64 192, metadata !8, i64 200}
!34 = metadata !{metadata !35, metadata !36, i64 96}
!35 = metadata !{metadata !"lang_hooks", metadata !8, i64 0, metadata !23, i64 8, metadata !8, i64 16, metadata !8, i64 24, metadata !8, i64 32, metadata !8, i64 40, metadata !8, i64 48, metadata !8, i64 56, metadata !8, i64 64, metadata !8, i64 72, metadata !8, i64 80, metadata !8, i64 88, metadata !36, i64 96, metadata !8, i64 104, metadata !8, i64 112, metadata !8, i64 120, metadata !8, i64 128, metadata !8, i64 136, metadata !8, i64 144, metadata !37, i64 152, metadata !38, i64 240}
!36 = metadata !{metadata !"_Bool", metadata !3, i64 0}
!37 = metadata !{metadata !"lang_hooks_for_tree_inlining", metadata !8, i64 0, metadata !8, i64 8, metadata !8, i64 16, metadata !8, i64 24, metadata !8, i64 32, metadata !8, i64 40, metadata !8, i64 48, metadata !8, i64 56, metadata !8, i64 64, metadata !8, i64 72, metadata !8, i64 80}
!38 = metadata !{metadata !"lang_hooks_for_tree_dump", metadata !8, i64 0, metadata !8, i64 8}
!39 = metadata !{i8 0, i8 2}
!40 = metadata !{metadata !41, metadata !2, i64 64}
!41 = metadata !{metadata !"tree_type", metadata !31, i64 0, metadata !8, i64 24, metadata !8, i64 32, metadata !8, i64 40, metadata !8, i64 48, metadata !2, i64 56, metadata !2, i64 60, metadata !3, i64 61, metadata !2, i64 62, metadata !2, i64 62, metadata !2, i64 62, metadata !2, i64 62, metadata !2, i64 62, metadata !2, i64 62, metadata !2, i64 62, metadata !2, i64 63, metadata !2, i64 63, metadata !2, i64 63, metadata !2, i64 63, metadata !2, i64 63, metadata !2, i64 63, metadata !2, i64 63, metadata !2, i64 63, metadata !2, i64 64, metadata !8, i64 72, metadata !8, i64 80, metadata !3, i64 88, metadata !8, i64 96, metadata !8, i64 104, metadata !8, i64 112, metadata !8, i64 120, metadata !8, i64 128, metadata !8, i64 136, metadata !8, i64 144, metadata !6, i64 152, metadata !8, i64 160}
!42 = metadata !{metadata !41, metadata !8, i64 40}
!43 = metadata !{metadata !33, metadata !8, i64 64}
!44 = metadata !{metadata !33, metadata !8, i64 88}
!45 = metadata !{metadata !14, metadata !8, i64 8}
!46 = metadata !{metadata !14, metadata !8, i64 16}
!47 = metadata !{metadata !14, metadata !2, i64 40}
!48 = metadata !{metadata !33, metadata !8, i64 104}
!49 = metadata !{metadata !11, metadata !8, i64 216}
!50 = metadata !{metadata !51, metadata !2, i64 0}
!51 = metadata !{metadata !"rtvec_def", metadata !2, i64 0, metadata !3, i64 8}
!52 = metadata !{metadata !11, metadata !8, i64 48}
!53 = metadata !{metadata !54, metadata !8, i64 8}
!54 = metadata !{metadata !"sequence_stack", metadata !8, i64 0, metadata !8, i64 8, metadata !8, i64 16, metadata !8, i64 24}
!55 = metadata !{metadata !56, metadata !23, i64 0}
!56 = metadata !{metadata !"varray_head_tag", metadata !23, i64 0, metadata !23, i64 8, metadata !23, i64 16, metadata !8, i64 24, metadata !3, i64 32}
!57 = metadata !{metadata !58, metadata !8, i64 8}
!58 = metadata !{metadata !"basic_block_def", metadata !8, i64 0, metadata !8, i64 8, metadata !8, i64 16, metadata !8, i64 24, metadata !8, i64 32, metadata !8, i64 40, metadata !8, i64 48, metadata !8, i64 56, metadata !8, i64 64, metadata !8, i64 72, metadata !8, i64 80, metadata !2, i64 88, metadata !2, i64 92, metadata !6, i64 96, metadata !2, i64 104, metadata !2, i64 108}
!59 = metadata !{metadata !54, metadata !8, i64 0}
!60 = metadata !{metadata !58, metadata !8, i64 0}
!61 = metadata !{metadata !62, metadata !8, i64 64}
!62 = metadata !{metadata !"gcc_debug_hooks", metadata !8, i64 0, metadata !8, i64 8, metadata !8, i64 16, metadata !8, i64 24, metadata !8, i64 32, metadata !8, i64 40, metadata !8, i64 48, metadata !8, i64 56, metadata !8, i64 64, metadata !8, i64 72, metadata !8, i64 80, metadata !8, i64 88, metadata !8, i64 96, metadata !8, i64 104, metadata !8, i64 112, metadata !8, i64 120, metadata !8, i64 128, metadata !8, i64 136, metadata !8, i64 144, metadata !8, i64 152}
!63 = metadata !{metadata !14, metadata !8, i64 48}
!64 = metadata !{metadata !14, metadata !2, i64 44}
!65 = metadata !{metadata !14, metadata !8, i64 32}
!66 = metadata !{metadata !54, metadata !8, i64 24}
!67 = metadata !{metadata !14, metadata !8, i64 24}
!68 = metadata !{metadata !54, metadata !8, i64 16}
!69 = metadata !{metadata !56, metadata !23, i64 8}
!70 = metadata !{i64 0, i64 24, metadata !9}
