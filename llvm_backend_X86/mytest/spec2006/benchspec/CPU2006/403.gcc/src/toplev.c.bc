; ModuleID = 'toplev.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i1 (%union.tree_node*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void ()*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.lang_decl = type opaque
%struct._IO_FILE = type opaque
%struct.file_stack = type { i8*, %struct.file_stack*, i32, i32 }
%struct.diagnostic_context = type { %struct.output_buffer, i8*, [1 x %struct.__va_list_tag]*, i8*, i32, i32, void (%struct.output_buffer*, %struct.diagnostic_context*)*, void (%struct.output_buffer*, %struct.diagnostic_context*)*, i8* }
%struct.output_buffer = type { %struct.output_state, %struct._IO_FILE*, %struct.obstack, i32, [128 x i8], i32 (%struct.output_buffer*)* }
%struct.output_state = type { i8*, i32, i32, i32, i8, i8, i32, i8*, [1 x %struct.__va_list_tag]*, [7 x i32] }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.__jmp_buf_tag = type { [8 x i64], i64, [16 x i64] }
%struct.lang_hooks = type { i8*, i64, void ()*, i32 (i32, i8**)*, void ()*, i8* (i8*)*, void ()*, void ()*, i64 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (%struct.rtx_def*, %union.tree_node*)*, i32 (%union.tree_node*)*, i8, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (i32)*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_tree_dump }
%struct.lang_hooks_for_tree_inlining = type { %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, i8*)*, i32 (%union.tree_node**)*, i32 (%union.tree_node*)*, %union.tree_node* (i8*, %union.tree_node*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8*, i32*, i8*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_tree_dump = type { i32 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_independent_options = type { i8*, i32*, i32, i8* }
%struct.anon.3 = type { i8*, i32, i8* }
%struct.anon.4 = type { i8*, i8**, i8* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.param_info = type { i8*, i32, i8* }
%struct.lang_opt = type { i8*, i8* }
%struct.anon.5 = type { i8*, i32, i32, i8* }
%struct.loops = type { i32, i32, %struct.loop*, %struct.loop*, %struct.cfg, %struct.simple_bitmap_def* }
%struct.loop = type { i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.edge_def**, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.simple_bitmap_def*, i32, %struct.edge_def**, i32, %struct.edge_def**, i32, %struct.simple_bitmap_def*, i32, i32, %struct.loop*, %struct.loop*, %struct.loop*, i32, i32, i8*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.cfg = type { %struct.simple_bitmap_def**, i32*, i32* }
%struct.simple_bitmap_def = type { i32, i32, i32, [1 x i64] }
%struct.dump_file_info = type { i8*, i8, i8, i8, i8 }

@do_nothing_debug_hooks = external global %struct.gcc_debug_hooks
@debug_hooks = global %struct.gcc_debug_hooks* @do_nothing_debug_hooks, align 8
@write_symbols = global i32 0, align 4
@debug_info_level = global i32 0, align 4
@use_gnu_debug_info_extensions = global i32 0, align 4
@optimize = global i32 3, align 4
@optimize_size = global i32 0, align 4
@lang_expand_expr = global %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, i32, i32)* null, align 8
@incomplete_decl_finalize_hook = global void (%union.tree_node*)* null, align 8
@flag_eliminate_dwarf2_dups = global i32 0, align 4
@profile_flag = global i32 0, align 4
@profile_arc_flag = global i32 0, align 4
@flag_test_coverage = global i32 0, align 4
@flag_branch_probabilities = global i32 0, align 4
@flag_reorder_blocks = global i32 0, align 4
@flag_rename_registers = global i32 0, align 4
@flag_cprop_registers = global i32 0, align 4
@pedantic = global i32 0, align 4
@in_system_header = global i32 0, align 4
@quiet_flag = global i32 1, align 4
@time_report = global i32 0, align 4
@mem_report = global i32 0, align 4
@flag_detailed_statistics = global i32 0, align 4
@flag_caller_saves = global i32 0, align 4
@flag_pcc_struct_return = global i32 1, align 4
@flag_force_mem = global i32 0, align 4
@flag_force_addr = global i32 1, align 4
@flag_defer_pop = global i32 0, align 4
@flag_float_store = global i32 0, align 4
@flag_strength_reduce = global i32 0, align 4
@flag_move_all_movables = global i32 0, align 4
@flag_reduce_all_givs = global i32 0, align 4
@flag_regmove = global i32 0, align 4
@flag_writable_strings = global i32 0, align 4
@flag_no_function_cse = global i32 0, align 4
@flag_omit_frame_pointer = global i32 1, align 4
@flag_function_sections = global i32 0, align 4
@flag_data_sections = global i32 0, align 4
@flag_no_peephole = global i32 0, align 4
@flag_optimize_sibling_calls = global i32 0, align 4
@flag_errno_math = global i32 1, align 4
@flag_unsafe_math_optimizations = global i32 1, align 4
@flag_trapping_math = global i32 1, align 4
@flag_complex_divide_method = global i32 0, align 4
@flag_syntax_only = global i32 0, align 4
@flag_gcse_lm = global i32 1, align 4
@flag_gcse_sm = global i32 1, align 4
@flag_rerun_loop_opt = global i32 1, align 4
@flag_no_inline = global i32 2, align 4
@flag_really_no_inline = global i32 2, align 4
@flag_keep_static_consts = global i32 1, align 4
@flag_gen_aux_info = global i32 0, align 4
@flag_unwind_tables = global i32 0, align 4
@flag_asynchronous_unwind_tables = global i32 0, align 4
@flag_pedantic_errors = global i32 0, align 4
@flag_schedule_insns = global i32 0, align 4
@flag_schedule_insns_after_reload = global i32 0, align 4
@flag_schedule_interblock = global i32 1, align 4
@flag_schedule_speculative = global i32 1, align 4
@flag_schedule_speculative_load = global i32 0, align 4
@flag_schedule_speculative_load_dangerous = global i32 0, align 4
@flag_branch_on_count_reg = global i32 1, align 4
@flag_inhibit_size_directive = global i32 0, align 4
@flag_verbose_asm = global i32 0, align 4
@flag_debug_asm = global i32 0, align 4
@flag_dump_rtl_in_asm = global i32 0, align 4
@flag_gnu_linker = global i32 1, align 4
@flag_ssa = global i32 1, align 4
@flag_ssa_ccp = global i32 0, align 4
@flag_ssa_dce = global i32 1, align 4
@flag_pack_struct = global i32 0, align 4
@flag_argument_noalias = global i32 0, align 4
@flag_strict_aliasing = global i32 0, align 4
@flag_instrument_function_entry_exit = global i32 0, align 4
@flag_no_ident = global i32 0, align 4
@flag_peephole2 = global i32 0, align 4
@flag_guess_branch_prob = global i32 0, align 4
@flag_bounded_pointers = global i32 0, align 4
@flag_bounds_check = global i32 0, align 4
@flag_merge_constants = global i32 1, align 4
@flag_renumber_insns = global i32 1, align 4
@flag_trapv = global i32 0, align 4
@flag_leading_underscore = global i32 -1, align 4
@inhibit_warnings = global i32 0, align 4
@warn_system_headers = global i32 0, align 4
@extra_warnings = global i32 0, align 4
@warnings_are_errors = global i32 0, align 4
@warn_deprecated_decl = global i32 1, align 4
@warn_unused_function = common global i32 0, align 4
@warn_unused_label = common global i32 0, align 4
@warn_unused_parameter = common global i32 0, align 4
@warn_unused_variable = common global i32 0, align 4
@warn_unused_value = common global i32 0, align 4
@rtl_dump_file = global %struct._IO_FILE* null, align 8
@_sch_istable = external constant [256 x i16]
@.str = private unnamed_addr constant [20 x i8] c"invalid option `%s'\00", align 1
@.str1 = private unnamed_addr constant [9 x i8] c"toplev.c\00", align 1
@__FUNCTION__.do_abort = private unnamed_addr constant [9 x i8] c"do_abort\00", align 1
@__FUNCTION__.botch = private unnamed_addr constant [6 x i8] c"botch\00", align 1
@.str2 = private unnamed_addr constant [6 x i8] c"\5C%03o\00", align 1
@.str3 = private unnamed_addr constant [8 x i8] c"\09.file\09\00", align 1
@lang_set_decl_assembler_name = external global void (%union.tree_node*)*
@flag_keep_inline_functions = common global i32 0, align 4
@.str4 = private unnamed_addr constant [28 x i8] c"`%s' used but never defined\00", align 1
@.str5 = private unnamed_addr constant [41 x i8] c"`%s' declared `static' but never defined\00", align 1
@.str6 = private unnamed_addr constant [26 x i8] c"`%s' defined but not used\00", align 1
@input_file_stack = common global %struct.file_stack* null, align 8
@input_filename = common global i8* null, align 8
@lineno = common global i32 0, align 4
@input_file_stack_tick = common global i32 0, align 4
@__FUNCTION__.pop_srcloc = private unnamed_addr constant [11 x i8] c"pop_srcloc\00", align 1
@.str7 = private unnamed_addr constant [6 x i8] c"alias\00", align 1
@last_assemble_variable_decl = external global %union.tree_node*
@global_trees = external global [51 x %union.tree_node*]
@size_directive_output = external global i32
@asm_out_file = common global %struct._IO_FILE* null, align 8
@.str9 = private unnamed_addr constant [8 x i8] c"\09.size\09\00", align 1
@.str10 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str11 = private unnamed_addr constant [49 x i8] c"invalid register name `%s' for register variable\00", align 1
@generating_concat_p = external global i32
@cse_not_expected = external global i32
@cfun = external global %struct.function*
@current_function_decl = common global %union.tree_node* null, align 8
@flag_inline_functions = common global i32 0, align 4
@warn_inline = common global i32 0, align 4
@.str12 = private unnamed_addr constant [18 x i8] c";; (integrable)\0A\0A\00", align 1
@warn_return_type = common global i32 0, align 4
@current_function_nothrow = external global i32
@rtx_equal_function_value_matters = external global i32
@rtl_dump_and_exit = common global i32 0, align 4
@global_dc = external global %struct.diagnostic_context*
@flag_pic = common global i32 0, align 4
@flag_thread_jumps = common global i32 0, align 4
@flag_delete_null_pointer_checks = internal global i32 0, align 4
@flag_rerun_cse_after_loop = internal global i32 1, align 4
@flag_gcse = internal global i32 0, align 4
@flag_cse_skip_blocks = common global i32 0, align 4
@flag_cse_follow_jumps = common global i32 0, align 4
@flag_expensive_optimizations = common global i32 0, align 4
@flag_unroll_loops = common global i32 0, align 4
@flag_prefetch_loop_arrays = common global i32 0, align 4
@no_new_pseudos = common global i32 0, align 4
@warn_uninitialized = common global i32 0, align 4
@current_function_is_leaf = external global i32
@max_regno = external global i32
@reg_equiv_memory_loc = external global %struct.rtx_def**
@n_basic_blocks = external global i32
@n_edges = external global i32
@warn_disabled_optimization = common global i32 0, align 4
@.str13 = private unnamed_addr constant [74 x i8] c"crossjump disabled: %d > 1000 basic blocks and %d >= 20 edges/basic block\00", align 1
@flow2_completed = external global i32
@__FUNCTION__.rest_of_compilation = private unnamed_addr constant [20 x i8] c"rest_of_compilation\00", align 1
@reload_completed = external global i32
@exit_after_options = internal unnamed_addr global i1 false
@progname = common global i8* null, align 8
@save_argc = common global i32 0, align 4
@save_argv = common global i8** null, align 8
@main_input_filename = common global i8* null, align 8
@dump_base_name = common global i8* null, align 8
@flag_print_asm_name = common global i32 0, align 4
@graph_dump_format = common global i32 0, align 4
@asm_file_name = common global i8* null, align 8
@g_switch_value = common global i32 0, align 4
@g_switch_set = common global i32 0, align 4
@current_function_func_begin_label = common global %union.tree_node* null, align 8
@decl_printable_name = common global i8* (%union.tree_node*, i32)* null, align 8
@flag_signed_char = common global i32 0, align 4
@flag_short_enums = common global i32 0, align 4
@flag_unroll_all_loops = common global i32 0, align 4
@flag_volatile = common global i32 0, align 4
@flag_volatile_global = common global i32 0, align 4
@flag_volatile_static = common global i32 0, align 4
@flag_shared_data = common global i32 0, align 4
@flag_delayed_branch = common global i32 0, align 4
@flag_exceptions = common global i32 0, align 4
@flag_no_common = common global i32 0, align 4
@flag_pretend_float = common global i32 0, align 4
@flag_single_precision_constant = common global i32 0, align 4
@flag_stack_check = common global i32 0, align 4
@stack_limit_rtx = common global %struct.rtx_def* null, align 8
@align_loops = common global i32 0, align 4
@align_loops_log = common global i32 0, align 4
@align_loops_max_skip = common global i32 0, align 4
@align_jumps = common global i32 0, align 4
@align_jumps_log = common global i32 0, align 4
@align_jumps_max_skip = common global i32 0, align 4
@align_labels = common global i32 0, align 4
@align_labels_log = common global i32 0, align 4
@align_labels_max_skip = common global i32 0, align 4
@align_functions = common global i32 0, align 4
@align_functions_log = common global i32 0, align 4
@user_label_prefix = common global i8* null, align 8
@warn_notreached = common global i32 0, align 4
@warn_shadow = common global i32 0, align 4
@warn_switch = common global i32 0, align 4
@warn_cast_align = common global i32 0, align 4
@warn_larger_than = common global i32 0, align 4
@larger_than_size = common global i64 0, align 8
@warn_aggregate_return = common global i32 0, align 4
@warn_packed = common global i32 0, align 4
@warn_padded = common global i32 0, align 4
@warn_missing_noreturn = common global i32 0, align 4
@aux_info_file = common global %struct._IO_FILE* null, align 8
@float_handled = common global i32 0, align 4
@float_handler = common global [1 x %struct.__jmp_buf_tag] zeroinitializer, align 16
@filename = internal unnamed_addr global i8* null, align 8
@stderr = external constant %struct._IO_FILE*
@aux_info_file_name = internal unnamed_addr global i8* null, align 8
@.str14 = private unnamed_addr constant [20 x i8] c"error writing to %s\00", align 1
@.str15 = private unnamed_addr constant [17 x i8] c"error closing %s\00", align 1
@.str16 = private unnamed_addr constant [7 x i8] c".%02d.\00", align 1
@lang_hooks = external constant %struct.lang_hooks
@.str17 = private unnamed_addr constant [19 x i8] c"%s\22GCC: (GNU) %s\22\0A\00", align 1
@.str18 = private unnamed_addr constant [9 x i8] c"\09.ident\09\00", align 1
@version_string = external constant i8*
@.str19 = private unnamed_addr constant [8 x i8] c"gccdump\00", align 1
@stdout = external constant %struct._IO_FILE*
@.str20 = private unnamed_addr constant [3 x i8] c".s\00", align 1
@.str21 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str22 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str23 = private unnamed_addr constant [26 x i8] c"can't open %s for writing\00", align 1
@ix86_asm_dialect = external global i32
@.str24 = private unnamed_addr constant [16 x i8] c"\09.intel_syntax\0A\00", align 1
@.str25 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str26 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str28 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str29 = private unnamed_addr constant [17 x i8] c"options passed: \00", align 1
@.str30 = private unnamed_addr constant [3 x i8] c"-o\00", align 1
@.str31 = private unnamed_addr constant [7 x i8] c"-quiet\00", align 1
@.str32 = private unnamed_addr constant [9 x i8] c"-version\00", align 1
@.str33 = private unnamed_addr constant [18 x i8] c"options enabled: \00", align 1
@f_options = internal unnamed_addr constant [97 x %struct.lang_independent_options] [%struct.lang_independent_options { i8* getelementptr inbounds ([22 x i8]* @.str148, i32 0, i32 0), i32* @flag_eliminate_dwarf2_dups, i32 1, i8* getelementptr inbounds ([37 x i8]* @.str149, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([12 x i8]* @.str150, i32 0, i32 0), i32* @flag_float_store, i32 1, i8* getelementptr inbounds ([33 x i8]* @.str151, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([9 x i8]* @.str152, i32 0, i32 0), i32* @flag_volatile, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str153, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str154, i32 0, i32 0), i32* @flag_volatile_global, i32 1, i8* getelementptr inbounds ([52 x i8]* @.str155, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str156, i32 0, i32 0), i32* @flag_volatile_static, i32 1, i8* getelementptr inbounds ([52 x i8]* @.str157, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([10 x i8]* @.str158, i32 0, i32 0), i32* @flag_defer_pop, i32 1, i8* getelementptr inbounds ([52 x i8]* @.str159, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([19 x i8]* @.str160, i32 0, i32 0), i32* @flag_omit_frame_pointer, i32 1, i8* getelementptr inbounds ([43 x i8]* @.str161, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([23 x i8]* @.str162, i32 0, i32 0), i32* @flag_optimize_sibling_calls, i32 1, i8* getelementptr inbounds ([42 x i8]* @.str163, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str164, i32 0, i32 0), i32* @flag_cse_follow_jumps, i32 1, i8* getelementptr inbounds ([48 x i8]* @.str165, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str166, i32 0, i32 0), i32* @flag_cse_skip_blocks, i32 1, i8* getelementptr inbounds ([43 x i8]* @.str167, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([24 x i8]* @.str168, i32 0, i32 0), i32* @flag_expensive_optimizations, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str169, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([13 x i8]* @.str170, i32 0, i32 0), i32* @flag_thread_jumps, i32 1, i8* getelementptr inbounds ([37 x i8]* @.str171, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str172, i32 0, i32 0), i32* @flag_strength_reduce, i32 1, i8* getelementptr inbounds ([41 x i8]* @.str173, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([13 x i8]* @.str174, i32 0, i32 0), i32* @flag_unroll_loops, i32 1, i8* getelementptr inbounds ([53 x i8]* @.str175, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str176, i32 0, i32 0), i32* @flag_unroll_all_loops, i32 1, i8* getelementptr inbounds ([37 x i8]* @.str177, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([21 x i8]* @.str178, i32 0, i32 0), i32* @flag_prefetch_loop_arrays, i32 1, i8* getelementptr inbounds ([66 x i8]* @.str179, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([18 x i8]* @.str180, i32 0, i32 0), i32* @flag_move_all_movables, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str181, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str182, i32 0, i32 0), i32* @flag_reduce_all_givs, i32 1, i8* getelementptr inbounds ([53 x i8]* @.str183, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str184, i32 0, i32 0), i32* @flag_writable_strings, i32 1, i8* getelementptr inbounds ([39 x i8]* @.str185, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([9 x i8]* @.str186, i32 0, i32 0), i32* @flag_no_peephole, i32 0, i8* getelementptr inbounds ([47 x i8]* @.str187, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([10 x i8]* @.str188, i32 0, i32 0), i32* @flag_force_mem, i32 1, i8* getelementptr inbounds ([49 x i8]* @.str189, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([11 x i8]* @.str190, i32 0, i32 0), i32* @flag_force_addr, i32 1, i8* getelementptr inbounds ([53 x i8]* @.str191, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([13 x i8]* @.str192, i32 0, i32 0), i32* @flag_no_function_cse, i32 0, i8* getelementptr inbounds ([49 x i8]* @.str193, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str194, i32 0, i32 0), i32* @flag_inline_functions, i32 1, i8* getelementptr inbounds ([46 x i8]* @.str195, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([22 x i8]* @.str196, i32 0, i32 0), i32* @flag_keep_inline_functions, i32 1, i8* getelementptr inbounds ([55 x i8]* @.str197, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([7 x i8]* @.str198, i32 0, i32 0), i32* @flag_no_inline, i32 0, i8* getelementptr inbounds ([38 x i8]* @.str199, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([19 x i8]* @.str200, i32 0, i32 0), i32* @flag_keep_static_consts, i32 1, i8* getelementptr inbounds ([54 x i8]* @.str201, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([12 x i8]* @.str202, i32 0, i32 0), i32* @flag_syntax_only, i32 1, i8* getelementptr inbounds ([35 x i8]* @.str203, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([12 x i8]* @.str204, i32 0, i32 0), i32* @flag_shared_data, i32 1, i8* getelementptr inbounds ([40 x i8]* @.str205, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([13 x i8]* @.str206, i32 0, i32 0), i32* @flag_caller_saves, i32 1, i8* getelementptr inbounds ([46 x i8]* @.str207, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([18 x i8]* @.str208, i32 0, i32 0), i32* @flag_pcc_struct_return, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str209, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([18 x i8]* @.str210, i32 0, i32 0), i32* @flag_pcc_struct_return, i32 0, i8* getelementptr inbounds ([39 x i8]* @.str211, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([15 x i8]* @.str212, i32 0, i32 0), i32* @flag_delayed_branch, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str213, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([5 x i8]* @.str214, i32 0, i32 0), i32* @flag_gcse, i32 1, i8* getelementptr inbounds ([52 x i8]* @.str215, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([8 x i8]* @.str216, i32 0, i32 0), i32* @flag_gcse_lm, i32 1, i8* getelementptr inbounds ([69 x i8]* @.str217, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([8 x i8]* @.str218, i32 0, i32 0), i32* @flag_gcse_sm, i32 1, i8* getelementptr inbounds ([60 x i8]* @.str219, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([21 x i8]* @.str220, i32 0, i32 0), i32* @flag_rerun_cse_after_loop, i32 1, i8* getelementptr inbounds ([38 x i8]* @.str221, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([15 x i8]* @.str222, i32 0, i32 0), i32* @flag_rerun_loop_opt, i32 1, i8* getelementptr inbounds ([29 x i8]* @.str223, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([27 x i8]* @.str224, i32 0, i32 0), i32* @flag_delete_null_pointer_checks, i32 1, i8* getelementptr inbounds ([35 x i8]* @.str225, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([14 x i8]* @.str226, i32 0, i32 0), i32* @flag_pretend_float, i32 1, i8* getelementptr inbounds ([52 x i8]* @.str227, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([15 x i8]* @.str228, i32 0, i32 0), i32* @flag_schedule_insns, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str229, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str230, i32 0, i32 0), i32* @flag_schedule_insns_after_reload, i32 1, i8* getelementptr inbounds ([50 x i8]* @.str231, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str232, i32 0, i32 0), i32* @flag_schedule_interblock, i32 1, i8* getelementptr inbounds ([38 x i8]* @.str233, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([11 x i8]* @.str234, i32 0, i32 0), i32* @flag_schedule_speculative, i32 1, i8* getelementptr inbounds ([38 x i8]* @.str235, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str236, i32 0, i32 0), i32* @flag_schedule_speculative_load, i32 1, i8* getelementptr inbounds ([39 x i8]* @.str237, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([26 x i8]* @.str238, i32 0, i32 0), i32* @flag_schedule_speculative_load_dangerous, i32 1, i8* getelementptr inbounds ([39 x i8]* @.str239, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str240, i32 0, i32 0), i32* @flag_branch_on_count_reg, i32 1, i8* getelementptr inbounds ([52 x i8]* @.str241, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([4 x i8]* @.str242, i32 0, i32 0), i32* @flag_pic, i32 1, i8* getelementptr inbounds ([48 x i8]* @.str243, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([4 x i8]* @.str244, i32 0, i32 0), i32* @flag_pic, i32 2, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([11 x i8]* @.str245, i32 0, i32 0), i32* @flag_exceptions, i32 1, i8* getelementptr inbounds ([26 x i8]* @.str246, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([14 x i8]* @.str247, i32 0, i32 0), i32* @flag_unwind_tables, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str248, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([27 x i8]* @.str249, i32 0, i32 0), i32* @flag_asynchronous_unwind_tables, i32 1, i8* getelementptr inbounds ([58 x i8]* @.str250, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([20 x i8]* @.str251, i32 0, i32 0), i32* @flag_non_call_exceptions, i32 1, i8* getelementptr inbounds ([40 x i8]* @.str252, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([13 x i8]* @.str253, i32 0, i32 0), i32* @profile_arc_flag, i32 1, i8* getelementptr inbounds ([40 x i8]* @.str254, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([14 x i8]* @.str255, i32 0, i32 0), i32* @flag_test_coverage, i32 1, i8* getelementptr inbounds ([33 x i8]* @.str256, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([21 x i8]* @.str257, i32 0, i32 0), i32* @flag_branch_probabilities, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str258, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([15 x i8]* @.str259, i32 0, i32 0), i32* @flag_reorder_blocks, i32 1, i8* getelementptr inbounds ([47 x i8]* @.str260, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str261, i32 0, i32 0), i32* @flag_rename_registers, i32 1, i8* getelementptr inbounds ([43 x i8]* @.str262, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str263, i32 0, i32 0), i32* @flag_cprop_registers, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str264, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([7 x i8]* @.str265, i32 0, i32 0), i32* @flag_no_common, i32 0, i8* getelementptr inbounds ([55 x i8]* @.str266, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([23 x i8]* @.str267, i32 0, i32 0), i32* @flag_inhibit_size_directive, i32 1, i8* getelementptr inbounds ([33 x i8]* @.str268, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([18 x i8]* @.str269, i32 0, i32 0), i32* @flag_function_sections, i32 1, i8* getelementptr inbounds ([41 x i8]* @.str270, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([14 x i8]* @.str271, i32 0, i32 0), i32* @flag_data_sections, i32 1, i8* getelementptr inbounds ([40 x i8]* @.str272, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([12 x i8]* @.str273, i32 0, i32 0), i32* @flag_verbose_asm, i32 1, i8* getelementptr inbounds ([40 x i8]* @.str274, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([11 x i8]* @.str275, i32 0, i32 0), i32* @flag_gnu_linker, i32 1, i8* getelementptr inbounds ([44 x i8]* @.str276, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([8 x i8]* @.str277, i32 0, i32 0), i32* @flag_regmove, i32 1, i8* getelementptr inbounds ([37 x i8]* @.str278, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([23 x i8]* @.str279, i32 0, i32 0), i32* @flag_regmove, i32 1, i8* getelementptr inbounds ([38 x i8]* @.str280, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([12 x i8]* @.str281, i32 0, i32 0), i32* @flag_pack_struct, i32 1, i8* getelementptr inbounds ([46 x i8]* @.str282, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([12 x i8]* @.str283, i32 0, i32 0), i32* @flag_stack_check, i32 1, i8* getelementptr inbounds ([44 x i8]* @.str284, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([15 x i8]* @.str285, i32 0, i32 0), i32* @flag_argument_noalias, i32 0, i8* getelementptr inbounds ([54 x i8]* @.str286, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str287, i32 0, i32 0), i32* @flag_argument_noalias, i32 1, i8* getelementptr inbounds ([54 x i8]* @.str288, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([24 x i8]* @.str289, i32 0, i32 0), i32* @flag_argument_noalias, i32 2, i8* getelementptr inbounds ([52 x i8]* @.str290, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str291, i32 0, i32 0), i32* @flag_strict_aliasing, i32 1, i8* getelementptr inbounds ([35 x i8]* @.str292, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([12 x i8]* @.str293, i32 0, i32 0), i32* @align_loops, i32 0, i8* getelementptr inbounds ([25 x i8]* @.str294, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([12 x i8]* @.str295, i32 0, i32 0), i32* @align_jumps, i32 0, i8* getelementptr inbounds ([47 x i8]* @.str296, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([13 x i8]* @.str297, i32 0, i32 0), i32* @align_labels, i32 0, i8* getelementptr inbounds ([17 x i8]* @.str298, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str299, i32 0, i32 0), i32* @align_functions, i32 0, i8* getelementptr inbounds ([29 x i8]* @.str300, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str301, i32 0, i32 0), i32* @flag_merge_constants, i32 1, i8* getelementptr inbounds ([63 x i8]* @.str302, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([20 x i8]* @.str303, i32 0, i32 0), i32* @flag_merge_constants, i32 2, i8* getelementptr inbounds ([60 x i8]* @.str304, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str305, i32 0, i32 0), i32* @flag_dump_unnumbered, i32 1, i8* getelementptr inbounds ([80 x i8]* @.str306, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([21 x i8]* @.str307, i32 0, i32 0), i32* @flag_instrument_function_entry_exit, i32 1, i8* getelementptr inbounds ([52 x i8]* @.str308, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([4 x i8]* @.str309, i32 0, i32 0), i32* @flag_ssa, i32 1, i8* getelementptr inbounds ([25 x i8]* @.str310, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([8 x i8]* @.str311, i32 0, i32 0), i32* @flag_ssa_ccp, i32 1, i8* getelementptr inbounds ([44 x i8]* @.str312, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([8 x i8]* @.str313, i32 0, i32 0), i32* @flag_ssa_dce, i32 1, i8* getelementptr inbounds ([44 x i8]* @.str314, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([19 x i8]* @.str315, i32 0, i32 0), i32* @flag_leading_underscore, i32 1, i8* getelementptr inbounds ([43 x i8]* @.str316, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([6 x i8]* @.str317, i32 0, i32 0), i32* @flag_no_ident, i32 0, i8* getelementptr inbounds ([26 x i8]* @.str318, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([10 x i8]* @.str319, i32 0, i32 0), i32* @flag_peephole2, i32 1, i8* getelementptr inbounds ([47 x i8]* @.str320, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([25 x i8]* @.str321, i32 0, i32 0), i32* @flag_guess_branch_prob, i32 1, i8* getelementptr inbounds ([41 x i8]* @.str322, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([11 x i8]* @.str323, i32 0, i32 0), i32* @flag_errno_math, i32 1, i8* getelementptr inbounds ([40 x i8]* @.str324, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([14 x i8]* @.str325, i32 0, i32 0), i32* @flag_trapping_math, i32 1, i8* getelementptr inbounds ([35 x i8]* @.str326, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([26 x i8]* @.str327, i32 0, i32 0), i32* @flag_unsafe_math_optimizations, i32 1, i8* getelementptr inbounds ([65 x i8]* @.str328, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str329, i32 0, i32 0), i32* @flag_bounded_pointers, i32 1, i8* getelementptr inbounds ([47 x i8]* @.str330, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([13 x i8]* @.str331, i32 0, i32 0), i32* @flag_bounds_check, i32 1, i8* getelementptr inbounds ([71 x i8]* @.str332, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([26 x i8]* @.str333, i32 0, i32 0), i32* @flag_single_precision_constant, i32 1, i8* getelementptr inbounds ([61 x i8]* @.str334, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([12 x i8]* @.str335, i32 0, i32 0), i32* @time_report, i32 1, i8* getelementptr inbounds ([54 x i8]* @.str336, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([11 x i8]* @.str337, i32 0, i32 0), i32* @mem_report, i32 1, i8* getelementptr inbounds ([52 x i8]* @.str338, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([6 x i8]* @.str339, i32 0, i32 0), i32* @flag_trapv, i32 1, i8* getelementptr inbounds ([68 x i8]* @.str340, i32 0, i32 0) }], align 16
@.str34 = private unnamed_addr constant [3 x i8] c"-f\00", align 1
@target_switches = internal unnamed_addr constant [56 x %struct.anon.3] [%struct.anon.3 { i8* getelementptr inbounds ([6 x i8]* @.str61, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([16 x i8]* @.str62, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str63, i32 0, i32 0), i32 -1, i8* getelementptr inbounds ([23 x i8]* @.str64, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str65, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([16 x i8]* @.str62, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str66, i32 0, i32 0), i32 -1, i8* getelementptr inbounds ([23 x i8]* @.str64, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str67, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([16 x i8]* @.str62, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([4 x i8]* @.str68, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([4 x i8]* @.str69, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([8 x i8]* @.str70, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str71, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str72, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str73, i32 0, i32 0), i32 0, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([4 x i8]* @.str74, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([29 x i8]* @.str75, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([7 x i8]* @.str76, i32 0, i32 0), i32 -2, i8* getelementptr inbounds ([30 x i8]* @.str77, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str78, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([37 x i8]* @.str79, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str80, i32 0, i32 0), i32 -4, i8* getelementptr inbounds ([31 x i8]* @.str81, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str82, i32 0, i32 0), i32 8, i8* getelementptr inbounds ([29 x i8]* @.str83, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str84, i32 0, i32 0), i32 -8, i8* getelementptr inbounds ([30 x i8]* @.str85, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([8 x i8]* @.str86, i32 0, i32 0), i32 16, i8* getelementptr inbounds ([33 x i8]* @.str87, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([11 x i8]* @.str88, i32 0, i32 0), i32 -16, i8* getelementptr inbounds ([40 x i8]* @.str89, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([14 x i8]* @.str90, i32 0, i32 0), i32 32, i8* getelementptr inbounds ([44 x i8]* @.str91, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([17 x i8]* @.str92, i32 0, i32 0), i32 -32, i8* getelementptr inbounds ([51 x i8]* @.str93, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str94, i32 0, i32 0), i32 64, i8* getelementptr inbounds ([39 x i8]* @.str95, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([15 x i8]* @.str96, i32 0, i32 0), i32 -64, i8* getelementptr inbounds ([32 x i8]* @.str97, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([24 x i8]* @.str98, i32 0, i32 0), i32 128, i8* getelementptr inbounds ([41 x i8]* @.str99, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([27 x i8]* @.str100, i32 0, i32 0), i32 -128, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str101, i32 0, i32 0), i32 256, i8* getelementptr inbounds ([21 x i8]* @.str102, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str103, i32 0, i32 0), i32 -256, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([8 x i8]* @.str104, i32 0, i32 0), i32 0, i8* null }, %struct.anon.3 { i8* getelementptr inbounds ([4 x i8]* @.str105, i32 0, i32 0), i32 0, i8* null }, %struct.anon.3 { i8* getelementptr inbounds ([16 x i8]* @.str106, i32 0, i32 0), i32 -512, i8* getelementptr inbounds ([43 x i8]* @.str107, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str108, i32 0, i32 0), i32 512, i8* getelementptr inbounds ([50 x i8]* @.str109, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([21 x i8]* @.str110, i32 0, i32 0), i32 1024, i8* getelementptr inbounds ([35 x i8]* @.str111, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([24 x i8]* @.str112, i32 0, i32 0), i32 -1024, i8* getelementptr inbounds ([42 x i8]* @.str113, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([10 x i8]* @.str114, i32 0, i32 0), i32 -2048, i8* getelementptr inbounds ([49 x i8]* @.str115, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([13 x i8]* @.str116, i32 0, i32 0), i32 2048, i8* getelementptr inbounds ([56 x i8]* @.str117, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([25 x i8]* @.str118, i32 0, i32 0), i32 12288, i8* getelementptr inbounds ([49 x i8]* @.str115, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([28 x i8]* @.str119, i32 0, i32 0), i32 8192, i8* getelementptr inbounds ([56 x i8]* @.str117, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([4 x i8]* @.str120, i32 0, i32 0), i32 49152, i8* getelementptr inbounds ([31 x i8]* @.str121, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([7 x i8]* @.str122, i32 0, i32 0), i32 -16384, i8* getelementptr inbounds ([38 x i8]* @.str123, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([7 x i8]* @.str122, i32 0, i32 0), i32 32768, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([6 x i8]* @.str124, i32 0, i32 0), i32 3145728, i8* getelementptr inbounds ([34 x i8]* @.str125, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str126, i32 0, i32 0), i32 -1048576, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str126, i32 0, i32 0), i32 2097152, i8* getelementptr inbounds ([41 x i8]* @.str127, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([4 x i8]* @.str128, i32 0, i32 0), i32 196608, i8* getelementptr inbounds ([59 x i8]* @.str129, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([7 x i8]* @.str130, i32 0, i32 0), i32 -65536, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([7 x i8]* @.str130, i32 0, i32 0), i32 131072, i8* getelementptr inbounds ([66 x i8]* @.str131, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([5 x i8]* @.str132, i32 0, i32 0), i32 786432, i8* getelementptr inbounds ([65 x i8]* @.str133, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([8 x i8]* @.str134, i32 0, i32 0), i32 -262144, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([8 x i8]* @.str134, i32 0, i32 0), i32 524288, i8* getelementptr inbounds ([72 x i8]* @.str135, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([19 x i8]* @.str136, i32 0, i32 0), i32 16777216, i8* getelementptr inbounds ([26 x i8]* @.str137, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([18 x i8]* @.str138, i32 0, i32 0), i32 -16777216, i8* getelementptr inbounds ([26 x i8]* @.str139, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([3 x i8]* @.str140, i32 0, i32 0), i32 33554432, i8* getelementptr inbounds ([27 x i8]* @.str141, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([3 x i8]* @.str142, i32 0, i32 0), i32 -33554432, i8* getelementptr inbounds ([25 x i8]* @.str143, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([9 x i8]* @.str144, i32 0, i32 0), i32 -67108864, i8* getelementptr inbounds ([32 x i8]* @.str145, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([12 x i8]* @.str146, i32 0, i32 0), i32 67108864, i8* getelementptr inbounds ([39 x i8]* @.str147, i32 0, i32 0) }, %struct.anon.3 { i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0), i32 33554481, i8* null }], align 16
@target_flags = external global i32
@.str35 = private unnamed_addr constant [3 x i8] c"-m\00", align 1
@target_options = internal unnamed_addr constant [13 x %struct.anon.4] [%struct.anon.4 { i8* getelementptr inbounds ([5 x i8]* @.str37, i32 0, i32 0), i8** @ix86_cpu_string, i8* getelementptr inbounds ([28 x i8]* @.str38, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([8 x i8]* @.str39, i32 0, i32 0), i8** @ix86_fpmath_string, i8* getelementptr inbounds ([64 x i8]* @.str40, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([6 x i8]* @.str41, i32 0, i32 0), i8** @ix86_arch_string, i8* getelementptr inbounds ([28 x i8]* @.str42, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([9 x i8]* @.str43, i32 0, i32 0), i8** @ix86_regparm_string, i8* getelementptr inbounds ([51 x i8]* @.str44, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([13 x i8]* @.str45, i32 0, i32 0), i8** @ix86_align_loops_string, i8* getelementptr inbounds ([37 x i8]* @.str46, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([13 x i8]* @.str47, i32 0, i32 0), i8** @ix86_align_jumps_string, i8* getelementptr inbounds ([44 x i8]* @.str48, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([17 x i8]* @.str49, i32 0, i32 0), i8** @ix86_align_funcs_string, i8* getelementptr inbounds ([47 x i8]* @.str50, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([26 x i8]* @.str51, i32 0, i32 0), i8** @ix86_preferred_stack_boundary_string, i8* getelementptr inbounds ([49 x i8]* @.str52, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([13 x i8]* @.str53, i32 0, i32 0), i8** @ix86_branch_cost_string, i8* getelementptr inbounds ([51 x i8]* @.str54, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([8 x i8]* @.str55, i32 0, i32 0), i8** @ix86_cmodel_string, i8* getelementptr inbounds ([28 x i8]* @.str56, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([10 x i8]* @.str57, i32 0, i32 0), i8** @ix86_debug_arg_string, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([11 x i8]* @.str58, i32 0, i32 0), i8** @ix86_debug_addr_string, i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.anon.4 { i8* getelementptr inbounds ([5 x i8]* @.str59, i32 0, i32 0), i8** @ix86_asm_string, i8* getelementptr inbounds ([28 x i8]* @.str60, i32 0, i32 0) }], align 16
@.str36 = private unnamed_addr constant [5 x i8] c"-m%s\00", align 1
@.str37 = private unnamed_addr constant [5 x i8] c"cpu=\00", align 1
@ix86_cpu_string = external global i8*
@.str38 = private unnamed_addr constant [28 x i8] c"Schedule code for given CPU\00", align 1
@.str39 = private unnamed_addr constant [8 x i8] c"fpmath=\00", align 1
@ix86_fpmath_string = external global i8*
@.str40 = private unnamed_addr constant [64 x i8] c"Generate floating point mathematics using given instruction set\00", align 1
@.str41 = private unnamed_addr constant [6 x i8] c"arch=\00", align 1
@ix86_arch_string = external global i8*
@.str42 = private unnamed_addr constant [28 x i8] c"Generate code for given CPU\00", align 1
@.str43 = private unnamed_addr constant [9 x i8] c"regparm=\00", align 1
@ix86_regparm_string = external global i8*
@.str44 = private unnamed_addr constant [51 x i8] c"Number of registers used to pass integer arguments\00", align 1
@.str45 = private unnamed_addr constant [13 x i8] c"align-loops=\00", align 1
@ix86_align_loops_string = external global i8*
@.str46 = private unnamed_addr constant [37 x i8] c"Loop code aligned to this power of 2\00", align 1
@.str47 = private unnamed_addr constant [13 x i8] c"align-jumps=\00", align 1
@ix86_align_jumps_string = external global i8*
@.str48 = private unnamed_addr constant [44 x i8] c"Jump targets are aligned to this power of 2\00", align 1
@.str49 = private unnamed_addr constant [17 x i8] c"align-functions=\00", align 1
@ix86_align_funcs_string = external global i8*
@.str50 = private unnamed_addr constant [47 x i8] c"Function starts are aligned to this power of 2\00", align 1
@.str51 = private unnamed_addr constant [26 x i8] c"preferred-stack-boundary=\00", align 1
@ix86_preferred_stack_boundary_string = external global i8*
@.str52 = private unnamed_addr constant [49 x i8] c"Attempt to keep stack aligned to this power of 2\00", align 1
@.str53 = private unnamed_addr constant [13 x i8] c"branch-cost=\00", align 1
@ix86_branch_cost_string = external global i8*
@.str54 = private unnamed_addr constant [51 x i8] c"Branches are this expensive (1-5, arbitrary units)\00", align 1
@.str55 = private unnamed_addr constant [8 x i8] c"cmodel=\00", align 1
@ix86_cmodel_string = external global i8*
@.str56 = private unnamed_addr constant [28 x i8] c"Use given x86-64 code model\00", align 1
@.str57 = private unnamed_addr constant [10 x i8] c"debug-arg\00", align 1
@ix86_debug_arg_string = external global i8*
@.str58 = private unnamed_addr constant [11 x i8] c"debug-addr\00", align 1
@ix86_debug_addr_string = external global i8*
@.str59 = private unnamed_addr constant [5 x i8] c"asm=\00", align 1
@ix86_asm_string = external global i8*
@.str60 = private unnamed_addr constant [28 x i8] c"Use given assembler dialect\00", align 1
@.str61 = private unnamed_addr constant [6 x i8] c"80387\00", align 1
@.str62 = private unnamed_addr constant [16 x i8] c"Use hardware fp\00", align 1
@.str63 = private unnamed_addr constant [9 x i8] c"no-80387\00", align 1
@.str64 = private unnamed_addr constant [23 x i8] c"Do not use hardware fp\00", align 1
@.str65 = private unnamed_addr constant [11 x i8] c"hard-float\00", align 1
@.str66 = private unnamed_addr constant [11 x i8] c"soft-float\00", align 1
@.str67 = private unnamed_addr constant [14 x i8] c"no-soft-float\00", align 1
@.str68 = private unnamed_addr constant [4 x i8] c"386\00", align 1
@.str69 = private unnamed_addr constant [4 x i8] c"486\00", align 1
@.str70 = private unnamed_addr constant [8 x i8] c"pentium\00", align 1
@.str71 = private unnamed_addr constant [11 x i8] c"pentiumpro\00", align 1
@.str72 = private unnamed_addr constant [13 x i8] c"intel-syntax\00", align 1
@.str73 = private unnamed_addr constant [16 x i8] c"no-intel-syntax\00", align 1
@.str74 = private unnamed_addr constant [4 x i8] c"rtd\00", align 1
@.str75 = private unnamed_addr constant [29 x i8] c"Alternate calling convention\00", align 1
@.str76 = private unnamed_addr constant [7 x i8] c"no-rtd\00", align 1
@.str77 = private unnamed_addr constant [30 x i8] c"Use normal calling convention\00", align 1
@.str78 = private unnamed_addr constant [13 x i8] c"align-double\00", align 1
@.str79 = private unnamed_addr constant [37 x i8] c"Align some doubles on dword boundary\00", align 1
@.str80 = private unnamed_addr constant [16 x i8] c"no-align-double\00", align 1
@.str81 = private unnamed_addr constant [31 x i8] c"Align doubles on word boundary\00", align 1
@.str82 = private unnamed_addr constant [11 x i8] c"svr3-shlib\00", align 1
@.str83 = private unnamed_addr constant [29 x i8] c"Uninitialized locals in .bss\00", align 1
@.str84 = private unnamed_addr constant [14 x i8] c"no-svr3-shlib\00", align 1
@.str85 = private unnamed_addr constant [30 x i8] c"Uninitialized locals in .data\00", align 1
@.str86 = private unnamed_addr constant [8 x i8] c"ieee-fp\00", align 1
@.str87 = private unnamed_addr constant [33 x i8] c"Use IEEE math for fp comparisons\00", align 1
@.str88 = private unnamed_addr constant [11 x i8] c"no-ieee-fp\00", align 1
@.str89 = private unnamed_addr constant [40 x i8] c"Do not use IEEE math for fp comparisons\00", align 1
@.str90 = private unnamed_addr constant [14 x i8] c"fp-ret-in-387\00", align 1
@.str91 = private unnamed_addr constant [44 x i8] c"Return values of functions in FPU registers\00", align 1
@.str92 = private unnamed_addr constant [17 x i8] c"no-fp-ret-in-387\00", align 1
@.str93 = private unnamed_addr constant [51 x i8] c"Do not return values of functions in FPU registers\00", align 1
@.str94 = private unnamed_addr constant [18 x i8] c"no-fancy-math-387\00", align 1
@.str95 = private unnamed_addr constant [39 x i8] c"Do not generate sin, cos, sqrt for FPU\00", align 1
@.str96 = private unnamed_addr constant [15 x i8] c"fancy-math-387\00", align 1
@.str97 = private unnamed_addr constant [32 x i8] c"Generate sin, cos, sqrt for FPU\00", align 1
@.str98 = private unnamed_addr constant [24 x i8] c"omit-leaf-frame-pointer\00", align 1
@.str99 = private unnamed_addr constant [41 x i8] c"Omit the frame pointer in leaf functions\00", align 1
@.str100 = private unnamed_addr constant [27 x i8] c"no-omit-leaf-frame-pointer\00", align 1
@.str101 = private unnamed_addr constant [16 x i8] c"stack-arg-probe\00", align 1
@.str102 = private unnamed_addr constant [21 x i8] c"Enable stack probing\00", align 1
@.str103 = private unnamed_addr constant [19 x i8] c"no-stack-arg-probe\00", align 1
@.str104 = private unnamed_addr constant [8 x i8] c"windows\00", align 1
@.str105 = private unnamed_addr constant [4 x i8] c"dll\00", align 1
@.str106 = private unnamed_addr constant [16 x i8] c"align-stringops\00", align 1
@.str107 = private unnamed_addr constant [43 x i8] c"Align destination of the string operations\00", align 1
@.str108 = private unnamed_addr constant [19 x i8] c"no-align-stringops\00", align 1
@.str109 = private unnamed_addr constant [50 x i8] c"Do not align destination of the string operations\00", align 1
@.str110 = private unnamed_addr constant [21 x i8] c"inline-all-stringops\00", align 1
@.str111 = private unnamed_addr constant [35 x i8] c"Inline all known string operations\00", align 1
@.str112 = private unnamed_addr constant [24 x i8] c"no-inline-all-stringops\00", align 1
@.str113 = private unnamed_addr constant [42 x i8] c"Do not inline all known string operations\00", align 1
@.str114 = private unnamed_addr constant [10 x i8] c"push-args\00", align 1
@.str115 = private unnamed_addr constant [49 x i8] c"Use push instructions to save outgoing arguments\00", align 1
@.str116 = private unnamed_addr constant [13 x i8] c"no-push-args\00", align 1
@.str117 = private unnamed_addr constant [56 x i8] c"Do not use push instructions to save outgoing arguments\00", align 1
@.str118 = private unnamed_addr constant [25 x i8] c"accumulate-outgoing-args\00", align 1
@.str119 = private unnamed_addr constant [28 x i8] c"no-accumulate-outgoing-args\00", align 1
@.str120 = private unnamed_addr constant [4 x i8] c"mmx\00", align 1
@.str121 = private unnamed_addr constant [31 x i8] c"Support MMX built-in functions\00", align 1
@.str122 = private unnamed_addr constant [7 x i8] c"no-mmx\00", align 1
@.str123 = private unnamed_addr constant [38 x i8] c"Do not support MMX built-in functions\00", align 1
@.str124 = private unnamed_addr constant [6 x i8] c"3dnow\00", align 1
@.str125 = private unnamed_addr constant [34 x i8] c"Support 3DNow! built-in functions\00", align 1
@.str126 = private unnamed_addr constant [9 x i8] c"no-3dnow\00", align 1
@.str127 = private unnamed_addr constant [41 x i8] c"Do not support 3DNow! built-in functions\00", align 1
@.str128 = private unnamed_addr constant [4 x i8] c"sse\00", align 1
@.str129 = private unnamed_addr constant [59 x i8] c"Support MMX and SSE built-in functions and code generation\00", align 1
@.str130 = private unnamed_addr constant [7 x i8] c"no-sse\00", align 1
@.str131 = private unnamed_addr constant [66 x i8] c"Do not support MMX and SSE built-in functions and code generation\00", align 1
@.str132 = private unnamed_addr constant [5 x i8] c"sse2\00", align 1
@.str133 = private unnamed_addr constant [65 x i8] c"Support MMX, SSE and SSE2 built-in functions and code generation\00", align 1
@.str134 = private unnamed_addr constant [8 x i8] c"no-sse2\00", align 1
@.str135 = private unnamed_addr constant [72 x i8] c"Do not support MMX, SSE and SSE2 built-in functions and code generation\00", align 1
@.str136 = private unnamed_addr constant [19 x i8] c"128bit-long-double\00", align 1
@.str137 = private unnamed_addr constant [26 x i8] c"sizeof(long double) is 16\00", align 1
@.str138 = private unnamed_addr constant [18 x i8] c"96bit-long-double\00", align 1
@.str139 = private unnamed_addr constant [26 x i8] c"sizeof(long double) is 12\00", align 1
@.str140 = private unnamed_addr constant [3 x i8] c"64\00", align 1
@.str141 = private unnamed_addr constant [27 x i8] c"Generate 64bit x86-64 code\00", align 1
@.str142 = private unnamed_addr constant [3 x i8] c"32\00", align 1
@.str143 = private unnamed_addr constant [25 x i8] c"Generate 32bit i386 code\00", align 1
@.str144 = private unnamed_addr constant [9 x i8] c"red-zone\00", align 1
@.str145 = private unnamed_addr constant [32 x i8] c"Use red-zone in the x86-64 code\00", align 1
@.str146 = private unnamed_addr constant [12 x i8] c"no-red-zone\00", align 1
@.str147 = private unnamed_addr constant [39 x i8] c"Do not use red-zone in the x86-64 code\00", align 1
@.str148 = private unnamed_addr constant [22 x i8] c"eliminate-dwarf2-dups\00", align 1
@.str149 = private unnamed_addr constant [37 x i8] c"Perform DWARF2 duplicate elimination\00", align 1
@.str150 = private unnamed_addr constant [12 x i8] c"float-store\00", align 1
@.str151 = private unnamed_addr constant [33 x i8] c"Do not store floats in registers\00", align 1
@.str152 = private unnamed_addr constant [9 x i8] c"volatile\00", align 1
@.str153 = private unnamed_addr constant [51 x i8] c"Consider all mem refs through pointers as volatile\00", align 1
@.str154 = private unnamed_addr constant [16 x i8] c"volatile-global\00", align 1
@.str155 = private unnamed_addr constant [52 x i8] c"Consider all mem refs to global data to be volatile\00", align 1
@.str156 = private unnamed_addr constant [16 x i8] c"volatile-static\00", align 1
@.str157 = private unnamed_addr constant [52 x i8] c"Consider all mem refs to static data to be volatile\00", align 1
@.str158 = private unnamed_addr constant [10 x i8] c"defer-pop\00", align 1
@.str159 = private unnamed_addr constant [52 x i8] c"Defer popping functions args from stack until later\00", align 1
@.str160 = private unnamed_addr constant [19 x i8] c"omit-frame-pointer\00", align 1
@.str161 = private unnamed_addr constant [43 x i8] c"When possible do not generate stack frames\00", align 1
@.str162 = private unnamed_addr constant [23 x i8] c"optimize-sibling-calls\00", align 1
@.str163 = private unnamed_addr constant [42 x i8] c"Optimize sibling and tail recursive calls\00", align 1
@.str164 = private unnamed_addr constant [17 x i8] c"cse-follow-jumps\00", align 1
@.str165 = private unnamed_addr constant [48 x i8] c"When running CSE, follow jumps to their targets\00", align 1
@.str166 = private unnamed_addr constant [16 x i8] c"cse-skip-blocks\00", align 1
@.str167 = private unnamed_addr constant [43 x i8] c"When running CSE, follow conditional jumps\00", align 1
@.str168 = private unnamed_addr constant [24 x i8] c"expensive-optimizations\00", align 1
@.str169 = private unnamed_addr constant [51 x i8] c"Perform a number of minor, expensive optimizations\00", align 1
@.str170 = private unnamed_addr constant [13 x i8] c"thread-jumps\00", align 1
@.str171 = private unnamed_addr constant [37 x i8] c"Perform jump threading optimizations\00", align 1
@.str172 = private unnamed_addr constant [16 x i8] c"strength-reduce\00", align 1
@.str173 = private unnamed_addr constant [41 x i8] c"Perform strength reduction optimizations\00", align 1
@.str174 = private unnamed_addr constant [13 x i8] c"unroll-loops\00", align 1
@.str175 = private unnamed_addr constant [53 x i8] c"Perform loop unrolling when iteration count is known\00", align 1
@.str176 = private unnamed_addr constant [17 x i8] c"unroll-all-loops\00", align 1
@.str177 = private unnamed_addr constant [37 x i8] c"Perform loop unrolling for all loops\00", align 1
@.str178 = private unnamed_addr constant [21 x i8] c"prefetch-loop-arrays\00", align 1
@.str179 = private unnamed_addr constant [66 x i8] c"Generate prefetch instructions, if available, for arrays in loops\00", align 1
@.str180 = private unnamed_addr constant [18 x i8] c"move-all-movables\00", align 1
@.str181 = private unnamed_addr constant [51 x i8] c"Force all loop invariant computations out of loops\00", align 1
@.str182 = private unnamed_addr constant [16 x i8] c"reduce-all-givs\00", align 1
@.str183 = private unnamed_addr constant [53 x i8] c"Strength reduce all loop general induction variables\00", align 1
@.str184 = private unnamed_addr constant [17 x i8] c"writable-strings\00", align 1
@.str185 = private unnamed_addr constant [39 x i8] c"Store strings in writable data section\00", align 1
@.str186 = private unnamed_addr constant [9 x i8] c"peephole\00", align 1
@.str187 = private unnamed_addr constant [47 x i8] c"Enable machine specific peephole optimizations\00", align 1
@.str188 = private unnamed_addr constant [10 x i8] c"force-mem\00", align 1
@.str189 = private unnamed_addr constant [49 x i8] c"Copy memory operands into registers before using\00", align 1
@.str190 = private unnamed_addr constant [11 x i8] c"force-addr\00", align 1
@.str191 = private unnamed_addr constant [53 x i8] c"Copy memory address constants into regs before using\00", align 1
@.str192 = private unnamed_addr constant [13 x i8] c"function-cse\00", align 1
@.str193 = private unnamed_addr constant [49 x i8] c"Allow function addresses to be held in registers\00", align 1
@.str194 = private unnamed_addr constant [17 x i8] c"inline-functions\00", align 1
@.str195 = private unnamed_addr constant [46 x i8] c"Integrate simple functions into their callers\00", align 1
@.str196 = private unnamed_addr constant [22 x i8] c"keep-inline-functions\00", align 1
@.str197 = private unnamed_addr constant [55 x i8] c"Generate code for funcs even if they are fully inlined\00", align 1
@.str198 = private unnamed_addr constant [7 x i8] c"inline\00", align 1
@.str199 = private unnamed_addr constant [38 x i8] c"Pay attention to the 'inline' keyword\00", align 1
@.str200 = private unnamed_addr constant [19 x i8] c"keep-static-consts\00", align 1
@.str201 = private unnamed_addr constant [54 x i8] c"Emit static const variables even if they are not used\00", align 1
@.str202 = private unnamed_addr constant [12 x i8] c"syntax-only\00", align 1
@.str203 = private unnamed_addr constant [35 x i8] c"Check for syntax errors, then stop\00", align 1
@.str204 = private unnamed_addr constant [12 x i8] c"shared-data\00", align 1
@.str205 = private unnamed_addr constant [40 x i8] c"Mark data as shared rather than private\00", align 1
@.str206 = private unnamed_addr constant [13 x i8] c"caller-saves\00", align 1
@.str207 = private unnamed_addr constant [46 x i8] c"Enable saving registers around function calls\00", align 1
@.str208 = private unnamed_addr constant [18 x i8] c"pcc-struct-return\00", align 1
@.str209 = private unnamed_addr constant [51 x i8] c"Return 'short' aggregates in memory, not registers\00", align 1
@.str210 = private unnamed_addr constant [18 x i8] c"reg-struct-return\00", align 1
@.str211 = private unnamed_addr constant [39 x i8] c"Return 'short' aggregates in registers\00", align 1
@.str212 = private unnamed_addr constant [15 x i8] c"delayed-branch\00", align 1
@.str213 = private unnamed_addr constant [51 x i8] c"Attempt to fill delay slots of branch instructions\00", align 1
@.str214 = private unnamed_addr constant [5 x i8] c"gcse\00", align 1
@.str215 = private unnamed_addr constant [52 x i8] c"Perform the global common subexpression elimination\00", align 1
@.str216 = private unnamed_addr constant [8 x i8] c"gcse-lm\00", align 1
@.str217 = private unnamed_addr constant [69 x i8] c"Perform enhanced load motion during global subexpression elimination\00", align 1
@.str218 = private unnamed_addr constant [8 x i8] c"gcse-sm\00", align 1
@.str219 = private unnamed_addr constant [60 x i8] c"Perform store motion after global subexpression elimination\00", align 1
@.str220 = private unnamed_addr constant [21 x i8] c"rerun-cse-after-loop\00", align 1
@.str221 = private unnamed_addr constant [38 x i8] c"Run CSE pass after loop optimizations\00", align 1
@.str222 = private unnamed_addr constant [15 x i8] c"rerun-loop-opt\00", align 1
@.str223 = private unnamed_addr constant [29 x i8] c"Run the loop optimizer twice\00", align 1
@.str224 = private unnamed_addr constant [27 x i8] c"delete-null-pointer-checks\00", align 1
@.str225 = private unnamed_addr constant [35 x i8] c"Delete useless null pointer checks\00", align 1
@.str226 = private unnamed_addr constant [14 x i8] c"pretend-float\00", align 1
@.str227 = private unnamed_addr constant [52 x i8] c"Pretend that host and target use the same FP format\00", align 1
@.str228 = private unnamed_addr constant [15 x i8] c"schedule-insns\00", align 1
@.str229 = private unnamed_addr constant [51 x i8] c"Reschedule instructions before register allocation\00", align 1
@.str230 = private unnamed_addr constant [16 x i8] c"schedule-insns2\00", align 1
@.str231 = private unnamed_addr constant [50 x i8] c"Reschedule instructions after register allocation\00", align 1
@.str232 = private unnamed_addr constant [17 x i8] c"sched-interblock\00", align 1
@.str233 = private unnamed_addr constant [38 x i8] c"Enable scheduling across basic blocks\00", align 1
@.str234 = private unnamed_addr constant [11 x i8] c"sched-spec\00", align 1
@.str235 = private unnamed_addr constant [38 x i8] c"Allow speculative motion of non-loads\00", align 1
@.str236 = private unnamed_addr constant [16 x i8] c"sched-spec-load\00", align 1
@.str237 = private unnamed_addr constant [39 x i8] c"Allow speculative motion of some loads\00", align 1
@.str238 = private unnamed_addr constant [26 x i8] c"sched-spec-load-dangerous\00", align 1
@.str239 = private unnamed_addr constant [39 x i8] c"Allow speculative motion of more loads\00", align 1
@.str240 = private unnamed_addr constant [17 x i8] c"branch-count-reg\00", align 1
@.str241 = private unnamed_addr constant [52 x i8] c"Replace add,compare,branch with branch on count reg\00", align 1
@.str242 = private unnamed_addr constant [4 x i8] c"pic\00", align 1
@.str243 = private unnamed_addr constant [48 x i8] c"Generate position independent code, if possible\00", align 1
@.str244 = private unnamed_addr constant [4 x i8] c"PIC\00", align 1
@.str245 = private unnamed_addr constant [11 x i8] c"exceptions\00", align 1
@.str246 = private unnamed_addr constant [26 x i8] c"Enable exception handling\00", align 1
@.str247 = private unnamed_addr constant [14 x i8] c"unwind-tables\00", align 1
@.str248 = private unnamed_addr constant [51 x i8] c"Just generate unwind tables for exception handling\00", align 1
@.str249 = private unnamed_addr constant [27 x i8] c"asynchronous-unwind-tables\00", align 1
@.str250 = private unnamed_addr constant [58 x i8] c"Generate unwind tables exact at each instruction boundary\00", align 1
@.str251 = private unnamed_addr constant [20 x i8] c"non-call-exceptions\00", align 1
@flag_non_call_exceptions = external global i32
@.str252 = private unnamed_addr constant [40 x i8] c"Support synchronous non-call exceptions\00", align 1
@.str253 = private unnamed_addr constant [13 x i8] c"profile-arcs\00", align 1
@.str254 = private unnamed_addr constant [40 x i8] c"Insert arc based program profiling code\00", align 1
@.str255 = private unnamed_addr constant [14 x i8] c"test-coverage\00", align 1
@.str256 = private unnamed_addr constant [33 x i8] c"Create data files needed by gcov\00", align 1
@.str257 = private unnamed_addr constant [21 x i8] c"branch-probabilities\00", align 1
@.str258 = private unnamed_addr constant [51 x i8] c"Use profiling information for branch probabilities\00", align 1
@.str259 = private unnamed_addr constant [15 x i8] c"reorder-blocks\00", align 1
@.str260 = private unnamed_addr constant [47 x i8] c"Reorder basic blocks to improve code placement\00", align 1
@.str261 = private unnamed_addr constant [17 x i8] c"rename-registers\00", align 1
@.str262 = private unnamed_addr constant [43 x i8] c"Do the register renaming optimization pass\00", align 1
@.str263 = private unnamed_addr constant [16 x i8] c"cprop-registers\00", align 1
@.str264 = private unnamed_addr constant [51 x i8] c"Do the register copy-propagation optimization pass\00", align 1
@.str265 = private unnamed_addr constant [7 x i8] c"common\00", align 1
@.str266 = private unnamed_addr constant [55 x i8] c"Do not put uninitialized globals in the common section\00", align 1
@.str267 = private unnamed_addr constant [23 x i8] c"inhibit-size-directive\00", align 1
@.str268 = private unnamed_addr constant [33 x i8] c"Do not generate .size directives\00", align 1
@.str269 = private unnamed_addr constant [18 x i8] c"function-sections\00", align 1
@.str270 = private unnamed_addr constant [41 x i8] c"place each function into its own section\00", align 1
@.str271 = private unnamed_addr constant [14 x i8] c"data-sections\00", align 1
@.str272 = private unnamed_addr constant [40 x i8] c"place data items into their own section\00", align 1
@.str273 = private unnamed_addr constant [12 x i8] c"verbose-asm\00", align 1
@.str274 = private unnamed_addr constant [40 x i8] c"Add extra commentry to assembler output\00", align 1
@.str275 = private unnamed_addr constant [11 x i8] c"gnu-linker\00", align 1
@.str276 = private unnamed_addr constant [44 x i8] c"Output GNU ld formatted global initializers\00", align 1
@.str277 = private unnamed_addr constant [8 x i8] c"regmove\00", align 1
@.str278 = private unnamed_addr constant [37 x i8] c"Enables a register move optimization\00", align 1
@.str279 = private unnamed_addr constant [23 x i8] c"optimize-register-move\00", align 1
@.str280 = private unnamed_addr constant [38 x i8] c"Do the full regmove optimization pass\00", align 1
@.str281 = private unnamed_addr constant [12 x i8] c"pack-struct\00", align 1
@.str282 = private unnamed_addr constant [46 x i8] c"Pack structure members together without holes\00", align 1
@.str283 = private unnamed_addr constant [12 x i8] c"stack-check\00", align 1
@.str284 = private unnamed_addr constant [44 x i8] c"Insert stack checking code into the program\00", align 1
@.str285 = private unnamed_addr constant [15 x i8] c"argument-alias\00", align 1
@.str286 = private unnamed_addr constant [54 x i8] c"Specify that arguments may alias each other & globals\00", align 1
@.str287 = private unnamed_addr constant [17 x i8] c"argument-noalias\00", align 1
@.str288 = private unnamed_addr constant [54 x i8] c"Assume arguments may alias globals but not each other\00", align 1
@.str289 = private unnamed_addr constant [24 x i8] c"argument-noalias-global\00", align 1
@.str290 = private unnamed_addr constant [52 x i8] c"Assume arguments do not alias each other or globals\00", align 1
@.str291 = private unnamed_addr constant [16 x i8] c"strict-aliasing\00", align 1
@.str292 = private unnamed_addr constant [35 x i8] c"Assume strict aliasing rules apply\00", align 1
@.str293 = private unnamed_addr constant [12 x i8] c"align-loops\00", align 1
@.str294 = private unnamed_addr constant [25 x i8] c"Align the start of loops\00", align 1
@.str295 = private unnamed_addr constant [12 x i8] c"align-jumps\00", align 1
@.str296 = private unnamed_addr constant [47 x i8] c"Align labels which are only reached by jumping\00", align 1
@.str297 = private unnamed_addr constant [13 x i8] c"align-labels\00", align 1
@.str298 = private unnamed_addr constant [17 x i8] c"Align all labels\00", align 1
@.str299 = private unnamed_addr constant [16 x i8] c"align-functions\00", align 1
@.str300 = private unnamed_addr constant [29 x i8] c"Align the start of functions\00", align 1
@.str301 = private unnamed_addr constant [16 x i8] c"merge-constants\00", align 1
@.str302 = private unnamed_addr constant [63 x i8] c"Attempt to merge identical constants accross compilation units\00", align 1
@.str303 = private unnamed_addr constant [20 x i8] c"merge-all-constants\00", align 1
@.str304 = private unnamed_addr constant [60 x i8] c"Attempt to merge identical constants and constant variables\00", align 1
@.str305 = private unnamed_addr constant [16 x i8] c"dump-unnumbered\00", align 1
@flag_dump_unnumbered = external global i32
@.str306 = private unnamed_addr constant [80 x i8] c"Suppress output of instruction numbers and line number notes in debugging dumps\00", align 1
@.str307 = private unnamed_addr constant [21 x i8] c"instrument-functions\00", align 1
@.str308 = private unnamed_addr constant [52 x i8] c"Instrument function entry/exit with profiling calls\00", align 1
@.str309 = private unnamed_addr constant [4 x i8] c"ssa\00", align 1
@.str310 = private unnamed_addr constant [25 x i8] c"Enable SSA optimizations\00", align 1
@.str311 = private unnamed_addr constant [8 x i8] c"ssa-ccp\00", align 1
@.str312 = private unnamed_addr constant [44 x i8] c"Enable SSA conditional constant propagation\00", align 1
@.str313 = private unnamed_addr constant [8 x i8] c"ssa-dce\00", align 1
@.str314 = private unnamed_addr constant [44 x i8] c"Enable aggressive SSA dead code elimination\00", align 1
@.str315 = private unnamed_addr constant [19 x i8] c"leading-underscore\00", align 1
@.str316 = private unnamed_addr constant [43 x i8] c"External symbols have a leading underscore\00", align 1
@.str317 = private unnamed_addr constant [6 x i8] c"ident\00", align 1
@.str318 = private unnamed_addr constant [26 x i8] c"Process #ident directives\00", align 1
@.str319 = private unnamed_addr constant [10 x i8] c"peephole2\00", align 1
@.str320 = private unnamed_addr constant [47 x i8] c"Enables an rtl peephole pass run before sched2\00", align 1
@.str321 = private unnamed_addr constant [25 x i8] c"guess-branch-probability\00", align 1
@.str322 = private unnamed_addr constant [41 x i8] c"Enables guessing of branch probabilities\00", align 1
@.str323 = private unnamed_addr constant [11 x i8] c"math-errno\00", align 1
@.str324 = private unnamed_addr constant [40 x i8] c"Set errno after built-in math functions\00", align 1
@.str325 = private unnamed_addr constant [14 x i8] c"trapping-math\00", align 1
@.str326 = private unnamed_addr constant [35 x i8] c"Floating-point operations can trap\00", align 1
@.str327 = private unnamed_addr constant [26 x i8] c"unsafe-math-optimizations\00", align 1
@.str328 = private unnamed_addr constant [65 x i8] c"Allow math optimizations that may violate IEEE or ANSI standards\00", align 1
@.str329 = private unnamed_addr constant [17 x i8] c"bounded-pointers\00", align 1
@.str330 = private unnamed_addr constant [47 x i8] c"Compile pointers as triples: value, base & end\00", align 1
@.str331 = private unnamed_addr constant [13 x i8] c"bounds-check\00", align 1
@.str332 = private unnamed_addr constant [71 x i8] c"Generate code to check bounds before dereferencing pointers and arrays\00", align 1
@.str333 = private unnamed_addr constant [26 x i8] c"single-precision-constant\00", align 1
@.str334 = private unnamed_addr constant [61 x i8] c"Convert floating point constant to single precision constant\00", align 1
@.str335 = private unnamed_addr constant [12 x i8] c"time-report\00", align 1
@.str336 = private unnamed_addr constant [54 x i8] c"Report time taken by each compiler pass at end of run\00", align 1
@.str337 = private unnamed_addr constant [11 x i8] c"mem-report\00", align 1
@.str338 = private unnamed_addr constant [52 x i8] c"Report on permanent memory allocation at end of run\00", align 1
@.str339 = private unnamed_addr constant [6 x i8] c"trapv\00", align 1
@.str340 = private unnamed_addr constant [68 x i8] c"Trap for signed overflow in addition / subtraction / multiplication\00", align 1
@.str341 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@.str342 = private unnamed_addr constant [57 x i8] c"%s%s%s version %s (%s)\0A%s\09compiled by GNU C version %s.\0A\00", align 1
@.str343 = private unnamed_addr constant [7 x i8] c"x86-64\00", align 1
@.str344 = private unnamed_addr constant [35 x i8] c"4.2.1 Compatible Clang 3.5 (trunk)\00", align 1
@tree_code_length = external global [256 x i32]
@.str345 = private unnamed_addr constant [51 x i8] c"this target machine does not have delayed branches\00", align 1
@.str346 = private unnamed_addr constant [48 x i8] c"profiling does not work without a frame pointer\00", align 1
@.str347 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@version_flag = internal unnamed_addr global i1 false
@dbx_debug_hooks = external global %struct.gcc_debug_hooks
@dwarf2_debug_hooks = external global %struct.gcc_debug_hooks
@.str350 = private unnamed_addr constant [14 x i8] c"can't open %s\00", align 1
@targetm = external global %struct.gcc_target
@.str351 = private unnamed_addr constant [50 x i8] c"-ffunction-sections not supported for this target\00", align 1
@.str352 = private unnamed_addr constant [46 x i8] c"-fdata-sections not supported for this target\00", align 1
@.str353 = private unnamed_addr constant [60 x i8] c"-ffunction-sections disabled; it makes profiling impossible\00", align 1
@x86_prefetch_sse = external global i32
@.str354 = private unnamed_addr constant [75 x i8] c"-fprefetch-loop-arrays not supported for this target (try -march switches)\00", align 1
@.str355 = private unnamed_addr constant [49 x i8] c"-fprefetch-loop-arrays is not supported with -Os\00", align 1
@lang_independent_params = internal constant [7 x %struct.param_info] [%struct.param_info { i8* getelementptr inbounds ([17 x i8]* @.str597, i32 0, i32 0), i32 5500, i8* getelementptr inbounds ([79 x i8]* @.str653, i32 0, i32 0) }, %struct.param_info { i8* getelementptr inbounds ([27 x i8]* @.str654, i32 0, i32 0), i32 100, i8* getelementptr inbounds ([68 x i8]* @.str655, i32 0, i32 0) }, %struct.param_info { i8* getelementptr inbounds ([27 x i8]* @.str656, i32 0, i32 0), i32 333, i8* getelementptr inbounds ([90 x i8]* @.str657, i32 0, i32 0) }, %struct.param_info { i8* getelementptr inbounds ([24 x i8]* @.str658, i32 0, i32 0), i32 32, i8* getelementptr inbounds ([59 x i8]* @.str659, i32 0, i32 0) }, %struct.param_info { i8* getelementptr inbounds ([16 x i8]* @.str660, i32 0, i32 0), i32 314572800, i8* getelementptr inbounds ([53 x i8]* @.str661, i32 0, i32 0) }, %struct.param_info { i8* getelementptr inbounds ([16 x i8]* @.str662, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([53 x i8]* @.str663, i32 0, i32 0) }, %struct.param_info zeroinitializer], align 16
@.str356 = private unnamed_addr constant [3 x i8] c"-O\00", align 1
@documented_lang_options = internal unnamed_addr constant [108 x %struct.lang_opt] [%struct.lang_opt { i8* getelementptr inbounds ([6 x i8]* @.str362, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8]* @.str363, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([25 x i8]* @.str364, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8]* @.str365, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([7 x i8]* @.str366, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8]* @.str367, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([19 x i8]* @.str368, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([21 x i8]* @.str369, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8]* @.str370, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([22 x i8]* @.str371, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([24 x i8]* @.str372, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([14 x i8]* @.str373, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8]* @.str374, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([16 x i8]* @.str375, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8]* @.str376, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str377, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([19 x i8]* @.str378, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([14 x i8]* @.str379, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([13 x i8]* @.str380, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8]* @.str381, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([16 x i8]* @.str382, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str383, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([6 x i8]* @.str384, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([9 x i8]* @.str385, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8]* @.str386, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([10 x i8]* @.str387, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([13 x i8]* @.str388, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8]* @.str389, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([9 x i8]* @.str390, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8]* @.str391, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([12 x i8]* @.str392, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([15 x i8]* @.str393, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8]* @.str394, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([18 x i8]* @.str395, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([16 x i8]* @.str396, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8]* @.str397, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([19 x i8]* @.str398, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([25 x i8]* @.str399, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8]* @.str400, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([28 x i8]* @.str401, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([15 x i8]* @.str402, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([18 x i8]* @.str403, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([15 x i8]* @.str404, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8]* @.str405, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([18 x i8]* @.str406, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([14 x i8]* @.str407, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8]* @.str408, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str409, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([14 x i8]* @.str410, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8]* @.str411, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str412, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([6 x i8]* @.str413, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8]* @.str414, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([20 x i8]* @.str415, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8]* @.str416, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([23 x i8]* @.str417, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([22 x i8]* @.str418, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([27 x i8]* @.str419, i32 0, i32 0), i8* getelementptr inbounds ([69 x i8]* @.str420, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([30 x i8]* @.str421, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([12 x i8]* @.str422, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8]* @.str423, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([15 x i8]* @.str424, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([18 x i8]* @.str425, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8]* @.str426, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([21 x i8]* @.str427, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([10 x i8]* @.str428, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8]* @.str429, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([13 x i8]* @.str430, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([11 x i8]* @.str431, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8]* @.str429, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([14 x i8]* @.str432, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([13 x i8]* @.str433, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8]* @.str434, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([16 x i8]* @.str435, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([9 x i8]* @.str436, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8]* @.str437, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([12 x i8]* @.str438, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([13 x i8]* @.str439, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([16 x i8]* @.str440, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8]* @.str441, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([20 x i8]* @.str442, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([23 x i8]* @.str443, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8]* @.str444, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([20 x i8]* @.str445, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8]* @.str446, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([23 x i8]* @.str447, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([18 x i8]* @.str448, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8]* @.str449, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([21 x i8]* @.str450, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([32 x i8]* @.str451, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8]* @.str452, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([35 x i8]* @.str453, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([38 x i8]* @.str454, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([15 x i8]* @.str455, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8]* @.str456, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([18 x i8]* @.str457, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([11 x i8]* @.str458, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([14 x i8]* @.str459, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([9 x i8]* @.str460, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8]* @.str461, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([12 x i8]* @.str462, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([12 x i8]* @.str463, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([15 x i8]* @.str464, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8]* @.str465, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([7 x i8]* @.str466, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8]* @.str467, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([10 x i8]* @.str468, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str469, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8]* @.str470, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([20 x i8]* @.str471, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([23 x i8]* @.str472, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8]* @.str473, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([26 x i8]* @.str474, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([21 x i8]* @.str475, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8]* @.str476, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([24 x i8]* @.str477, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([12 x i8]* @.str478, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8]* @.str479, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([15 x i8]* @.str480, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str481, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8]* @.str482, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([20 x i8]* @.str483, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([14 x i8]* @.str484, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8]* @.str485, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str486, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str487, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8]* @.str488, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([20 x i8]* @.str489, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([16 x i8]* @.str490, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8]* @.str491, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([19 x i8]* @.str492, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([18 x i8]* @.str493, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8]* @.str494, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([21 x i8]* @.str495, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([15 x i8]* @.str496, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8]* @.str497, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([18 x i8]* @.str498, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([14 x i8]* @.str499, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8]* @.str500, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str501, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([18 x i8]* @.str502, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8]* @.str503, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([21 x i8]* @.str504, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([20 x i8]* @.str505, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8]* @.str506, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([23 x i8]* @.str507, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([14 x i8]* @.str508, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8]* @.str509, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([17 x i8]* @.str510, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([12 x i8]* @.str511, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8]* @.str512, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([15 x i8]* @.str513, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([8 x i8]* @.str514, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([11 x i8]* @.str515, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([16 x i8]* @.str516, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8]* @.str517, i32 0, i32 0) }, %struct.lang_opt { i8* getelementptr inbounds ([19 x i8]* @.str518, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0) }], align 16
@.str357 = private unnamed_addr constant [34 x i8] c"ignoring command line option '%s'\00", align 1
@.str359 = private unnamed_addr constant [39 x i8] c"`%s': unknown or unsupported -g option\00", align 1
@.str360 = private unnamed_addr constant [25 x i8] c"unrecognized option `%s'\00", align 1
@.str361 = private unnamed_addr constant [44 x i8] c"-Wuninitialized is not supported without -O\00", align 1
@.str362 = private unnamed_addr constant [6 x i8] c"-ansi\00", align 1
@.str363 = private unnamed_addr constant [25 x i8] c"Compile just for ISO C89\00", align 1
@.str364 = private unnamed_addr constant [25 x i8] c"-fallow-single-precision\00", align 1
@.str365 = private unnamed_addr constant [54 x i8] c"Do not promote floats to double if using -traditional\00", align 1
@.str366 = private unnamed_addr constant [7 x i8] c"-std= \00", align 1
@.str367 = private unnamed_addr constant [28 x i8] c"Determine language standard\00", align 1
@.str368 = private unnamed_addr constant [19 x i8] c"-fsigned-bitfields\00", align 1
@.str369 = private unnamed_addr constant [21 x i8] c"-funsigned-bitfields\00", align 1
@.str370 = private unnamed_addr constant [39 x i8] c"Make bit-fields by unsigned by default\00", align 1
@.str371 = private unnamed_addr constant [22 x i8] c"-fno-signed-bitfields\00", align 1
@.str372 = private unnamed_addr constant [24 x i8] c"-fno-unsigned-bitfields\00", align 1
@.str373 = private unnamed_addr constant [14 x i8] c"-fsigned-char\00", align 1
@.str374 = private unnamed_addr constant [33 x i8] c"Make 'char' be signed by default\00", align 1
@.str375 = private unnamed_addr constant [16 x i8] c"-funsigned-char\00", align 1
@.str376 = private unnamed_addr constant [35 x i8] c"Make 'char' be unsigned by default\00", align 1
@.str377 = private unnamed_addr constant [17 x i8] c"-fno-signed-char\00", align 1
@.str378 = private unnamed_addr constant [19 x i8] c"-fno-unsigned-char\00", align 1
@.str379 = private unnamed_addr constant [14 x i8] c"-ftraditional\00", align 1
@.str380 = private unnamed_addr constant [13 x i8] c"-traditional\00", align 1
@.str381 = private unnamed_addr constant [43 x i8] c"Attempt to support traditional K&R style C\00", align 1
@.str382 = private unnamed_addr constant [16 x i8] c"-fnotraditional\00", align 1
@.str383 = private unnamed_addr constant [17 x i8] c"-fno-traditional\00", align 1
@.str384 = private unnamed_addr constant [6 x i8] c"-fasm\00", align 1
@.str385 = private unnamed_addr constant [9 x i8] c"-fno-asm\00", align 1
@.str386 = private unnamed_addr constant [35 x i8] c"Do not recognize the 'asm' keyword\00", align 1
@.str387 = private unnamed_addr constant [10 x i8] c"-fbuiltin\00", align 1
@.str388 = private unnamed_addr constant [13 x i8] c"-fno-builtin\00", align 1
@.str389 = private unnamed_addr constant [40 x i8] c"Do not recognize any built in functions\00", align 1
@.str390 = private unnamed_addr constant [9 x i8] c"-fhosted\00", align 1
@.str391 = private unnamed_addr constant [38 x i8] c"Assume normal C execution environment\00", align 1
@.str392 = private unnamed_addr constant [12 x i8] c"-fno-hosted\00", align 1
@.str393 = private unnamed_addr constant [15 x i8] c"-ffreestanding\00", align 1
@.str394 = private unnamed_addr constant [54 x i8] c"Assume that standard libraries & main might not exist\00", align 1
@.str395 = private unnamed_addr constant [18 x i8] c"-fno-freestanding\00", align 1
@.str396 = private unnamed_addr constant [16 x i8] c"-fcond-mismatch\00", align 1
@.str397 = private unnamed_addr constant [44 x i8] c"Allow different types as args of ? operator\00", align 1
@.str398 = private unnamed_addr constant [19 x i8] c"-fno-cond-mismatch\00", align 1
@.str399 = private unnamed_addr constant [25 x i8] c"-fdollars-in-identifiers\00", align 1
@.str400 = private unnamed_addr constant [38 x i8] c"Allow the use of $ inside identifiers\00", align 1
@.str401 = private unnamed_addr constant [28 x i8] c"-fno-dollars-in-identifiers\00", align 1
@.str402 = private unnamed_addr constant [15 x i8] c"-fpreprocessed\00", align 1
@.str403 = private unnamed_addr constant [18 x i8] c"-fno-preprocessed\00", align 1
@.str404 = private unnamed_addr constant [15 x i8] c"-fshort-double\00", align 1
@.str405 = private unnamed_addr constant [42 x i8] c"Use the same size for double as for float\00", align 1
@.str406 = private unnamed_addr constant [18 x i8] c"-fno-short-double\00", align 1
@.str407 = private unnamed_addr constant [14 x i8] c"-fshort-enums\00", align 1
@.str408 = private unnamed_addr constant [47 x i8] c"Use the smallest fitting integer to hold enums\00", align 1
@.str409 = private unnamed_addr constant [17 x i8] c"-fno-short-enums\00", align 1
@.str410 = private unnamed_addr constant [14 x i8] c"-fshort-wchar\00", align 1
@.str411 = private unnamed_addr constant [61 x i8] c"Override the underlying type for wchar_t to `unsigned short'\00", align 1
@.str412 = private unnamed_addr constant [17 x i8] c"-fno-short-wchar\00", align 1
@.str413 = private unnamed_addr constant [6 x i8] c"-Wall\00", align 1
@.str414 = private unnamed_addr constant [29 x i8] c"Enable most warning messages\00", align 1
@.str415 = private unnamed_addr constant [20 x i8] c"-Wbad-function-cast\00", align 1
@.str416 = private unnamed_addr constant [51 x i8] c"Warn about casting functions to incompatible types\00", align 1
@.str417 = private unnamed_addr constant [23 x i8] c"-Wno-bad-function-cast\00", align 1
@.str418 = private unnamed_addr constant [22 x i8] c"-Wno-missing-noreturn\00", align 1
@.str419 = private unnamed_addr constant [27 x i8] c"-Wmissing-format-attribute\00", align 1
@.str420 = private unnamed_addr constant [69 x i8] c"Warn about functions which might be candidates for format attributes\00", align 1
@.str421 = private unnamed_addr constant [30 x i8] c"-Wno-missing-format-attribute\00", align 1
@.str422 = private unnamed_addr constant [12 x i8] c"-Wcast-qual\00", align 1
@.str423 = private unnamed_addr constant [42 x i8] c"Warn about casts which discard qualifiers\00", align 1
@.str424 = private unnamed_addr constant [15 x i8] c"-Wno-cast-qual\00", align 1
@.str425 = private unnamed_addr constant [18 x i8] c"-Wchar-subscripts\00", align 1
@.str426 = private unnamed_addr constant [43 x i8] c"Warn about subscripts whose type is 'char'\00", align 1
@.str427 = private unnamed_addr constant [21 x i8] c"-Wno-char-subscripts\00", align 1
@.str428 = private unnamed_addr constant [10 x i8] c"-Wcomment\00", align 1
@.str429 = private unnamed_addr constant [37 x i8] c"Warn if nested comments are detected\00", align 1
@.str430 = private unnamed_addr constant [13 x i8] c"-Wno-comment\00", align 1
@.str431 = private unnamed_addr constant [11 x i8] c"-Wcomments\00", align 1
@.str432 = private unnamed_addr constant [14 x i8] c"-Wno-comments\00", align 1
@.str433 = private unnamed_addr constant [13 x i8] c"-Wconversion\00", align 1
@.str434 = private unnamed_addr constant [47 x i8] c"Warn about possibly confusing type conversions\00", align 1
@.str435 = private unnamed_addr constant [16 x i8] c"-Wno-conversion\00", align 1
@.str436 = private unnamed_addr constant [9 x i8] c"-Wformat\00", align 1
@.str437 = private unnamed_addr constant [58 x i8] c"Warn about printf/scanf/strftime/strfmon format anomalies\00", align 1
@.str438 = private unnamed_addr constant [12 x i8] c"-Wno-format\00", align 1
@.str439 = private unnamed_addr constant [13 x i8] c"-Wformat-y2k\00", align 1
@.str440 = private unnamed_addr constant [16 x i8] c"-Wno-format-y2k\00", align 1
@.str441 = private unnamed_addr constant [57 x i8] c"Don't warn about strftime formats yielding 2 digit years\00", align 1
@.str442 = private unnamed_addr constant [20 x i8] c"-Wformat-extra-args\00", align 1
@.str443 = private unnamed_addr constant [23 x i8] c"-Wno-format-extra-args\00", align 1
@.str444 = private unnamed_addr constant [56 x i8] c"Don't warn about too many arguments to format functions\00", align 1
@.str445 = private unnamed_addr constant [20 x i8] c"-Wformat-nonliteral\00", align 1
@.str446 = private unnamed_addr constant [45 x i8] c"Warn about non-string-literal format strings\00", align 1
@.str447 = private unnamed_addr constant [23 x i8] c"-Wno-format-nonliteral\00", align 1
@.str448 = private unnamed_addr constant [18 x i8] c"-Wformat-security\00", align 1
@.str449 = private unnamed_addr constant [60 x i8] c"Warn about possible security problems with format functions\00", align 1
@.str450 = private unnamed_addr constant [21 x i8] c"-Wno-format-security\00", align 1
@.str451 = private unnamed_addr constant [32 x i8] c"-Wimplicit-function-declaration\00", align 1
@.str452 = private unnamed_addr constant [42 x i8] c"Warn about implicit function declarations\00", align 1
@.str453 = private unnamed_addr constant [35 x i8] c"-Wno-implicit-function-declaration\00", align 1
@.str454 = private unnamed_addr constant [38 x i8] c"-Werror-implicit-function-declaration\00", align 1
@.str455 = private unnamed_addr constant [15 x i8] c"-Wimplicit-int\00", align 1
@.str456 = private unnamed_addr constant [48 x i8] c"Warn when a declaration does not specify a type\00", align 1
@.str457 = private unnamed_addr constant [18 x i8] c"-Wno-implicit-int\00", align 1
@.str458 = private unnamed_addr constant [11 x i8] c"-Wimplicit\00", align 1
@.str459 = private unnamed_addr constant [14 x i8] c"-Wno-implicit\00", align 1
@.str460 = private unnamed_addr constant [9 x i8] c"-Wimport\00", align 1
@.str461 = private unnamed_addr constant [44 x i8] c"Warn about the use of the #import directive\00", align 1
@.str462 = private unnamed_addr constant [12 x i8] c"-Wno-import\00", align 1
@.str463 = private unnamed_addr constant [12 x i8] c"-Wlong-long\00", align 1
@.str464 = private unnamed_addr constant [15 x i8] c"-Wno-long-long\00", align 1
@.str465 = private unnamed_addr constant [51 x i8] c"Do not warn about using 'long long' when -pedantic\00", align 1
@.str466 = private unnamed_addr constant [7 x i8] c"-Wmain\00", align 1
@.str467 = private unnamed_addr constant [43 x i8] c"Warn about suspicious declarations of main\00", align 1
@.str468 = private unnamed_addr constant [10 x i8] c"-Wno-main\00", align 1
@.str469 = private unnamed_addr constant [17 x i8] c"-Wmissing-braces\00", align 1
@.str470 = private unnamed_addr constant [55 x i8] c"Warn about possibly missing braces around initializers\00", align 1
@.str471 = private unnamed_addr constant [20 x i8] c"-Wno-missing-braces\00", align 1
@.str472 = private unnamed_addr constant [23 x i8] c"-Wmissing-declarations\00", align 1
@.str473 = private unnamed_addr constant [54 x i8] c"Warn about global funcs without previous declarations\00", align 1
@.str474 = private unnamed_addr constant [26 x i8] c"-Wno-missing-declarations\00", align 1
@.str475 = private unnamed_addr constant [21 x i8] c"-Wmissing-prototypes\00", align 1
@.str476 = private unnamed_addr constant [43 x i8] c"Warn about global funcs without prototypes\00", align 1
@.str477 = private unnamed_addr constant [24 x i8] c"-Wno-missing-prototypes\00", align 1
@.str478 = private unnamed_addr constant [12 x i8] c"-Wmultichar\00", align 1
@.str479 = private unnamed_addr constant [42 x i8] c"Warn about use of multicharacter literals\00", align 1
@.str480 = private unnamed_addr constant [15 x i8] c"-Wno-multichar\00", align 1
@.str481 = private unnamed_addr constant [17 x i8] c"-Wnested-externs\00", align 1
@.str482 = private unnamed_addr constant [43 x i8] c"Warn about externs not at file scope level\00", align 1
@.str483 = private unnamed_addr constant [20 x i8] c"-Wno-nested-externs\00", align 1
@.str484 = private unnamed_addr constant [14 x i8] c"-Wparentheses\00", align 1
@.str485 = private unnamed_addr constant [40 x i8] c"Warn about possible missing parentheses\00", align 1
@.str486 = private unnamed_addr constant [17 x i8] c"-Wno-parentheses\00", align 1
@.str487 = private unnamed_addr constant [17 x i8] c"-Wsequence-point\00", align 1
@.str488 = private unnamed_addr constant [55 x i8] c"Warn about possible violations of sequence point rules\00", align 1
@.str489 = private unnamed_addr constant [20 x i8] c"-Wno-sequence-point\00", align 1
@.str490 = private unnamed_addr constant [16 x i8] c"-Wpointer-arith\00", align 1
@.str491 = private unnamed_addr constant [39 x i8] c"Warn about function pointer arithmetic\00", align 1
@.str492 = private unnamed_addr constant [19 x i8] c"-Wno-pointer-arith\00", align 1
@.str493 = private unnamed_addr constant [18 x i8] c"-Wredundant-decls\00", align 1
@.str494 = private unnamed_addr constant [52 x i8] c"Warn about multiple declarations of the same object\00", align 1
@.str495 = private unnamed_addr constant [21 x i8] c"-Wno-redundant-decls\00", align 1
@.str496 = private unnamed_addr constant [15 x i8] c"-Wsign-compare\00", align 1
@.str497 = private unnamed_addr constant [39 x i8] c"Warn about signed/unsigned comparisons\00", align 1
@.str498 = private unnamed_addr constant [18 x i8] c"-Wno-sign-compare\00", align 1
@.str499 = private unnamed_addr constant [14 x i8] c"-Wfloat-equal\00", align 1
@.str500 = private unnamed_addr constant [54 x i8] c"Warn about testing equality of floating point numbers\00", align 1
@.str501 = private unnamed_addr constant [17 x i8] c"-Wno-float-equal\00", align 1
@.str502 = private unnamed_addr constant [18 x i8] c"-Wunknown-pragmas\00", align 1
@.str503 = private unnamed_addr constant [32 x i8] c"Warn about unrecognized pragmas\00", align 1
@.str504 = private unnamed_addr constant [21 x i8] c"-Wno-unknown-pragmas\00", align 1
@.str505 = private unnamed_addr constant [20 x i8] c"-Wstrict-prototypes\00", align 1
@.str506 = private unnamed_addr constant [41 x i8] c"Warn about non-prototyped function decls\00", align 1
@.str507 = private unnamed_addr constant [23 x i8] c"-Wno-strict-prototypes\00", align 1
@.str508 = private unnamed_addr constant [14 x i8] c"-Wtraditional\00", align 1
@.str509 = private unnamed_addr constant [52 x i8] c"Warn about constructs whose meaning change in ISO C\00", align 1
@.str510 = private unnamed_addr constant [17 x i8] c"-Wno-traditional\00", align 1
@.str511 = private unnamed_addr constant [12 x i8] c"-Wtrigraphs\00", align 1
@.str512 = private unnamed_addr constant [36 x i8] c"Warn when trigraphs are encountered\00", align 1
@.str513 = private unnamed_addr constant [15 x i8] c"-Wno-trigraphs\00", align 1
@.str514 = private unnamed_addr constant [8 x i8] c"-Wundef\00", align 1
@.str515 = private unnamed_addr constant [11 x i8] c"-Wno-undef\00", align 1
@.str516 = private unnamed_addr constant [16 x i8] c"-Wwrite-strings\00", align 1
@.str517 = private unnamed_addr constant [31 x i8] c"Mark strings as 'const char *'\00", align 1
@.str518 = private unnamed_addr constant [19 x i8] c"-Wno-write-strings\00", align 1
@.str519 = private unnamed_addr constant [6 x i8] c"-help\00", align 1
@.str520 = private unnamed_addr constant [13 x i8] c"-target-help\00", align 1
@.str521 = private unnamed_addr constant [7 x i8] c"-param\00", align 1
@.str522 = private unnamed_addr constant [31 x i8] c"-param option missing argument\00", align 1
@.str523 = private unnamed_addr constant [27 x i8] c"invalid --param option: %s\00", align 1
@.str524 = private unnamed_addr constant [29 x i8] c"invalid parameter value `%s'\00", align 1
@.str525 = private unnamed_addr constant [9 x i8] c"dumpbase\00", align 1
@.str526 = private unnamed_addr constant [9 x i8] c"pedantic\00", align 1
@.str527 = private unnamed_addr constant [16 x i8] c"pedantic-errors\00", align 1
@.str528 = private unnamed_addr constant [6 x i8] c"quiet\00", align 1
@.str529 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str530 = private unnamed_addr constant [9 x i8] c"aux-info\00", align 1
@W_options = internal unnamed_addr constant [19 x %struct.lang_independent_options] [%struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str536, i32 0, i32 0), i32* @warn_unused_function, i32 1, i8* getelementptr inbounds ([31 x i8]* @.str537, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([13 x i8]* @.str538, i32 0, i32 0), i32* @warn_unused_label, i32 1, i8* getelementptr inbounds ([28 x i8]* @.str539, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str540, i32 0, i32 0), i32* @warn_unused_parameter, i32 1, i8* getelementptr inbounds ([41 x i8]* @.str541, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([16 x i8]* @.str542, i32 0, i32 0), i32* @warn_unused_variable, i32 1, i8* getelementptr inbounds ([31 x i8]* @.str543, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([13 x i8]* @.str544, i32 0, i32 0), i32* @warn_unused_value, i32 1, i8* getelementptr inbounds ([40 x i8]* @.str545, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([15 x i8]* @.str546, i32 0, i32 0), i32* @warn_system_headers, i32 1, i8* getelementptr inbounds ([45 x i8]* @.str547, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([6 x i8]* @.str548, i32 0, i32 0), i32* @warnings_are_errors, i32 1, i8* getelementptr inbounds ([29 x i8]* @.str549, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([7 x i8]* @.str550, i32 0, i32 0), i32* @warn_shadow, i32 1, i8* getelementptr inbounds ([45 x i8]* @.str551, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([7 x i8]* @.str552, i32 0, i32 0), i32* @warn_switch, i32 1, i8* getelementptr inbounds ([55 x i8]* @.str553, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str554, i32 0, i32 0), i32* @warn_aggregate_return, i32 1, i8* getelementptr inbounds ([50 x i8]* @.str555, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([11 x i8]* @.str556, i32 0, i32 0), i32* @warn_cast_align, i32 1, i8* getelementptr inbounds ([50 x i8]* @.str557, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str558, i32 0, i32 0), i32* @warn_notreached, i32 1, i8* getelementptr inbounds ([44 x i8]* @.str559, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([14 x i8]* @.str560, i32 0, i32 0), i32* @warn_uninitialized, i32 1, i8* getelementptr inbounds ([45 x i8]* @.str561, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([7 x i8]* @.str198, i32 0, i32 0), i32* @warn_inline, i32 1, i8* getelementptr inbounds ([48 x i8]* @.str562, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([7 x i8]* @.str563, i32 0, i32 0), i32* @warn_packed, i32 1, i8* getelementptr inbounds ([62 x i8]* @.str564, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([7 x i8]* @.str565, i32 0, i32 0), i32* @warn_padded, i32 1, i8* getelementptr inbounds ([54 x i8]* @.str566, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([22 x i8]* @.str567, i32 0, i32 0), i32* @warn_disabled_optimization, i32 1, i8* getelementptr inbounds ([43 x i8]* @.str568, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([24 x i8]* @.str569, i32 0, i32 0), i32* @warn_deprecated_decl, i32 1, i8* getelementptr inbounds ([60 x i8]* @.str570, i32 0, i32 0) }, %struct.lang_independent_options { i8* getelementptr inbounds ([17 x i8]* @.str571, i32 0, i32 0), i32* @warn_missing_noreturn, i32 1, i8* getelementptr inbounds ([70 x i8]* @.str572, i32 0, i32 0) }], align 16
@.str531 = private unnamed_addr constant [10 x i8] c"id-clash-\00", align 1
@.str532 = private unnamed_addr constant [38 x i8] c"-Wid-clash-LEN is no longer supported\00", align 1
@.str533 = private unnamed_addr constant [13 x i8] c"larger-than-\00", align 1
@.str534 = private unnamed_addr constant [7 x i8] c"unused\00", align 1
@.str535 = private unnamed_addr constant [10 x i8] c"no-unused\00", align 1
@.str536 = private unnamed_addr constant [16 x i8] c"unused-function\00", align 1
@.str537 = private unnamed_addr constant [31 x i8] c"Warn when a function is unused\00", align 1
@.str538 = private unnamed_addr constant [13 x i8] c"unused-label\00", align 1
@.str539 = private unnamed_addr constant [28 x i8] c"Warn when a label is unused\00", align 1
@.str540 = private unnamed_addr constant [17 x i8] c"unused-parameter\00", align 1
@.str541 = private unnamed_addr constant [41 x i8] c"Warn when a function parameter is unused\00", align 1
@.str542 = private unnamed_addr constant [16 x i8] c"unused-variable\00", align 1
@.str543 = private unnamed_addr constant [31 x i8] c"Warn when a variable is unused\00", align 1
@.str544 = private unnamed_addr constant [13 x i8] c"unused-value\00", align 1
@.str545 = private unnamed_addr constant [40 x i8] c"Warn when an expression value is unused\00", align 1
@.str546 = private unnamed_addr constant [15 x i8] c"system-headers\00", align 1
@.str547 = private unnamed_addr constant [45 x i8] c"Do not suppress warnings from system headers\00", align 1
@.str548 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str549 = private unnamed_addr constant [29 x i8] c"Treat all warnings as errors\00", align 1
@.str550 = private unnamed_addr constant [7 x i8] c"shadow\00", align 1
@.str551 = private unnamed_addr constant [45 x i8] c"Warn when one local variable shadows another\00", align 1
@.str552 = private unnamed_addr constant [7 x i8] c"switch\00", align 1
@.str553 = private unnamed_addr constant [55 x i8] c"Warn about enumerated switches missing a specific case\00", align 1
@.str554 = private unnamed_addr constant [17 x i8] c"aggregate-return\00", align 1
@.str555 = private unnamed_addr constant [50 x i8] c"Warn about returning structures, unions or arrays\00", align 1
@.str556 = private unnamed_addr constant [11 x i8] c"cast-align\00", align 1
@.str557 = private unnamed_addr constant [50 x i8] c"Warn about pointer casts which increase alignment\00", align 1
@.str558 = private unnamed_addr constant [17 x i8] c"unreachable-code\00", align 1
@.str559 = private unnamed_addr constant [44 x i8] c"Warn about code that will never be executed\00", align 1
@.str560 = private unnamed_addr constant [14 x i8] c"uninitialized\00", align 1
@.str561 = private unnamed_addr constant [45 x i8] c"Warn about uninitialized automatic variables\00", align 1
@.str562 = private unnamed_addr constant [48 x i8] c"Warn when an inlined function cannot be inlined\00", align 1
@.str563 = private unnamed_addr constant [7 x i8] c"packed\00", align 1
@.str564 = private unnamed_addr constant [62 x i8] c"Warn when the packed attribute has no effect on struct layout\00", align 1
@.str565 = private unnamed_addr constant [7 x i8] c"padded\00", align 1
@.str566 = private unnamed_addr constant [54 x i8] c"Warn when padding is required to align struct members\00", align 1
@.str567 = private unnamed_addr constant [22 x i8] c"disabled-optimization\00", align 1
@.str568 = private unnamed_addr constant [43 x i8] c"Warn when an optimization pass is disabled\00", align 1
@.str569 = private unnamed_addr constant [24 x i8] c"deprecated-declarations\00", align 1
@.str570 = private unnamed_addr constant [60 x i8] c"Warn about uses of __attribute__((deprecated)) declarations\00", align 1
@.str571 = private unnamed_addr constant [17 x i8] c"missing-noreturn\00", align 1
@.str572 = private unnamed_addr constant [70 x i8] c"Warn about functions which might be candidates for attribute noreturn\00", align 1
@.str573 = private unnamed_addr constant [38 x i8] c"unrecognized gcc debugging option: %c\00", align 1
@decode_g_option.level = internal unnamed_addr global i32 0, align 4
@decode_g_option.selected_debug_type = internal unnamed_addr global i32 0, align 4
@decode_g_option.type_explicitly_set_p = internal unnamed_addr global i32 0, align 4
@decode_g_option.debug_type_names = internal unnamed_addr constant [7 x i8*] [i8* getelementptr inbounds ([5 x i8]* @.str574, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str575, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str576, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str577, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str578, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str579, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8]* @.str580, i32 0, i32 0)], align 16
@.str574 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str575 = private unnamed_addr constant [6 x i8] c"stabs\00", align 1
@.str576 = private unnamed_addr constant [5 x i8] c"coff\00", align 1
@.str577 = private unnamed_addr constant [8 x i8] c"dwarf-1\00", align 1
@.str578 = private unnamed_addr constant [8 x i8] c"dwarf-2\00", align 1
@.str579 = private unnamed_addr constant [6 x i8] c"xcoff\00", align 1
@.str580 = private unnamed_addr constant [4 x i8] c"vms\00", align 1
@debug_args = internal constant [6 x %struct.anon.5] [%struct.anon.5 { i8* getelementptr inbounds ([1 x i8]* @.str28, i32 0, i32 0), i32 0, i32 1, i8* getelementptr inbounds ([42 x i8]* @.str587, i32 0, i32 0) }, %struct.anon.5 { i8* getelementptr inbounds ([4 x i8]* @.str585, i32 0, i32 0), i32 0, i32 1, i8* getelementptr inbounds ([51 x i8]* @.str588, i32 0, i32 0) }, %struct.anon.5 { i8* getelementptr inbounds ([6 x i8]* @.str575, i32 0, i32 0), i32 1, i32 0, i8* getelementptr inbounds ([33 x i8]* @.str589, i32 0, i32 0) }, %struct.anon.5 { i8* getelementptr inbounds ([7 x i8]* @.str590, i32 0, i32 0), i32 1, i32 1, i8* getelementptr inbounds ([42 x i8]* @.str591, i32 0, i32 0) }, %struct.anon.5 { i8* getelementptr inbounds ([8 x i8]* @.str578, i32 0, i32 0), i32 4, i32 0, i8* getelementptr inbounds ([28 x i8]* @.str592, i32 0, i32 0) }, %struct.anon.5 zeroinitializer], align 16
@da = internal unnamed_addr global %struct.anon.5* null, align 8
@.str581 = private unnamed_addr constant [6 x i8] c"dwarf\00", align 1
@.str582 = private unnamed_addr constant [40 x i8] c"use -gdwarf -g%d for DWARF v1, level %d\00", align 1
@.str583 = private unnamed_addr constant [29 x i8] c"use -gdwarf-2   for DWARF v2\00", align 1
@.str584 = private unnamed_addr constant [62 x i8] c"ignoring option `%s' due to invalid debug level specification\00", align 1
@.str585 = private unnamed_addr constant [4 x i8] c"gdb\00", align 1
@.str586 = private unnamed_addr constant [36 x i8] c"`%s' ignored, conflicts with `-g%s'\00", align 1
@.str587 = private unnamed_addr constant [42 x i8] c"Generate debugging info in default format\00", align 1
@.str588 = private unnamed_addr constant [51 x i8] c"Generate debugging info in default extended format\00", align 1
@.str589 = private unnamed_addr constant [33 x i8] c"Generate STABS format debug info\00", align 1
@.str590 = private unnamed_addr constant [7 x i8] c"stabs+\00", align 1
@.str591 = private unnamed_addr constant [42 x i8] c"Generate extended STABS format debug info\00", align 1
@.str592 = private unnamed_addr constant [28 x i8] c"Generate DWARF-2 debug info\00", align 1
@.str593 = private unnamed_addr constant [10 x i8] c"fast-math\00", align 1
@.str594 = private unnamed_addr constant [13 x i8] c"no-fast-math\00", align 1
@.str595 = private unnamed_addr constant [14 x i8] c"inline-limit-\00", align 1
@.str596 = private unnamed_addr constant [14 x i8] c"inline-limit=\00", align 1
@compiler_params = external global %struct.param_info*
@.str597 = private unnamed_addr constant [17 x i8] c"max-inline-insns\00", align 1
@.str598 = private unnamed_addr constant [15 x i8] c"sched-verbose=\00", align 1
@.str599 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str600 = private unnamed_addr constant [7 x i8] c"fixed-\00", align 1
@.str601 = private unnamed_addr constant [11 x i8] c"call-used-\00", align 1
@.str602 = private unnamed_addr constant [12 x i8] c"call-saved-\00", align 1
@.str603 = private unnamed_addr constant [14 x i8] c"align-labels=\00", align 1
@.str604 = private unnamed_addr constant [22 x i8] c"stack-limit-register=\00", align 1
@.str605 = private unnamed_addr constant [32 x i8] c"unrecognized register name `%s'\00", align 1
@.str606 = private unnamed_addr constant [20 x i8] c"stack-limit-symbol=\00", align 1
@.str607 = private unnamed_addr constant [16 x i8] c"message-length=\00", align 1
@.str608 = private unnamed_addr constant [27 x i8] c"diagnostics-show-location=\00", align 1
@.str609 = private unnamed_addr constant [5 x i8] c"once\00", align 1
@.str610 = private unnamed_addr constant [11 x i8] c"every-line\00", align 1
@.str611 = private unnamed_addr constant [15 x i8] c"no-stack-limit\00", align 1
@.str612 = private unnamed_addr constant [13 x i8] c"preprocessed\00", align 1
@display_target_options.displayed = internal unnamed_addr global i1 false
@.str614 = private unnamed_addr constant [29 x i8] c"  -m%-23.23s [undocumented]\0A\00", align 1
@.str615 = private unnamed_addr constant [17 x i8] c"  -m%-23.23s %s\0A\00", align 1
@.str624 = private unnamed_addr constant [14 x i8] c"  -f%-21s %s\0A\00", align 1
@.str627 = private unnamed_addr constant [28 x i8] c"  --param %s=<value>%.*s%s\0A\00", align 1
@.str628 = private unnamed_addr constant [22 x i8] c"                     \00", align 1
@.str633 = private unnamed_addr constant [14 x i8] c"  -W%-21s %s\0A\00", align 1
@.str639 = private unnamed_addr constant [14 x i8] c"  -g%-21s %s\0A\00", align 1
@.str652 = private unnamed_addr constant [15 x i8] c"  %-23.23s %s\0A\00", align 1
@.str653 = private unnamed_addr constant [79 x i8] c"The maximum number of instructions in a function that is eligible for inlining\00", align 1
@.str654 = private unnamed_addr constant [27 x i8] c"max-delay-slot-insn-search\00", align 1
@.str655 = private unnamed_addr constant [68 x i8] c"The maximum number of instructions to consider to fill a delay slot\00", align 1
@.str656 = private unnamed_addr constant [27 x i8] c"max-delay-slot-live-search\00", align 1
@.str657 = private unnamed_addr constant [90 x i8] c"The maximum number of instructions to consider to find accurate live register information\00", align 1
@.str658 = private unnamed_addr constant [24 x i8] c"max-pending-list-length\00", align 1
@.str659 = private unnamed_addr constant [59 x i8] c"The maximum length of scheduling's pending operations list\00", align 1
@.str660 = private unnamed_addr constant [16 x i8] c"max-gcse-memory\00", align 1
@.str661 = private unnamed_addr constant [53 x i8] c"The maximum amount of memory to be allocated by GCSE\00", align 1
@.str662 = private unnamed_addr constant [16 x i8] c"max-gcse-passes\00", align 1
@.str663 = private unnamed_addr constant [53 x i8] c"The maximum number of passes to make when doing GCSE\00", align 1
@.str664 = private unnamed_addr constant [19 x i8] c"internal error: %d\00", align 1
@.str665 = private unnamed_addr constant [4 x i8] c"rtl\00", align 1
@.str666 = private unnamed_addr constant [8 x i8] c"sibling\00", align 1
@.str667 = private unnamed_addr constant [3 x i8] c"eh\00", align 1
@.str668 = private unnamed_addr constant [5 x i8] c"jump\00", align 1
@.str669 = private unnamed_addr constant [7 x i8] c"ssaccp\00", align 1
@.str670 = private unnamed_addr constant [7 x i8] c"ssadce\00", align 1
@.str671 = private unnamed_addr constant [5 x i8] c"ussa\00", align 1
@.str672 = private unnamed_addr constant [4 x i8] c"cse\00", align 1
@.str673 = private unnamed_addr constant [10 x i8] c"addressof\00", align 1
@.str674 = private unnamed_addr constant [5 x i8] c"loop\00", align 1
@.str675 = private unnamed_addr constant [5 x i8] c"cse2\00", align 1
@.str676 = private unnamed_addr constant [4 x i8] c"cfg\00", align 1
@.str677 = private unnamed_addr constant [3 x i8] c"bp\00", align 1
@.str678 = private unnamed_addr constant [5 x i8] c"life\00", align 1
@.str679 = private unnamed_addr constant [8 x i8] c"combine\00", align 1
@.str680 = private unnamed_addr constant [3 x i8] c"ce\00", align 1
@.str681 = private unnamed_addr constant [6 x i8] c"sched\00", align 1
@.str682 = private unnamed_addr constant [5 x i8] c"lreg\00", align 1
@.str683 = private unnamed_addr constant [5 x i8] c"greg\00", align 1
@.str684 = private unnamed_addr constant [11 x i8] c"postreload\00", align 1
@.str685 = private unnamed_addr constant [6 x i8] c"flow2\00", align 1
@.str686 = private unnamed_addr constant [6 x i8] c"rnreg\00", align 1
@.str687 = private unnamed_addr constant [4 x i8] c"ce2\00", align 1
@.str688 = private unnamed_addr constant [7 x i8] c"sched2\00", align 1
@.str689 = private unnamed_addr constant [6 x i8] c"stack\00", align 1
@.str690 = private unnamed_addr constant [5 x i8] c"bbro\00", align 1
@.str691 = private unnamed_addr constant [5 x i8] c"mach\00", align 1
@.str692 = private unnamed_addr constant [4 x i8] c"dbr\00", align 1
@dump_file = internal unnamed_addr global <{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }> <{ { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str665, i32 0, i32 0), i8 114, i8 0, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([8 x i8]* @.str666, i32 0, i32 0), i8 105, i8 0, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str667, i32 0, i32 0), i8 104, i8 0, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str668, i32 0, i32 0), i8 106, i8 0, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str309, i32 0, i32 0), i8 101, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([7 x i8]* @.str669, i32 0, i32 0), i8 87, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([7 x i8]* @.str670, i32 0, i32 0), i8 88, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str671, i32 0, i32 0), i8 101, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str672, i32 0, i32 0), i8 115, i8 0, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([10 x i8]* @.str673, i32 0, i32 0), i8 70, i8 0, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str214, i32 0, i32 0), i8 71, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str674, i32 0, i32 0), i8 76, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str675, i32 0, i32 0), i8 116, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str676, i32 0, i32 0), i8 102, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str677, i32 0, i32 0), i8 98, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str678, i32 0, i32 0), i8 102, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([8 x i8]* @.str679, i32 0, i32 0), i8 99, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str680, i32 0, i32 0), i8 67, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([8 x i8]* @.str277, i32 0, i32 0), i8 78, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([6 x i8]* @.str681, i32 0, i32 0), i8 83, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str682, i32 0, i32 0), i8 108, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str683, i32 0, i32 0), i8 103, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([11 x i8]* @.str684, i32 0, i32 0), i8 111, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([6 x i8]* @.str685, i32 0, i32 0), i8 119, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([10 x i8]* @.str319, i32 0, i32 0), i8 122, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([6 x i8]* @.str686, i32 0, i32 0), i8 110, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str687, i32 0, i32 0), i8 69, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([7 x i8]* @.str688, i32 0, i32 0), i8 82, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([6 x i8]* @.str689, i32 0, i32 0), i8 107, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str690, i32 0, i32 0), i8 66, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([5 x i8]* @.str691, i32 0, i32 0), i8 77, i8 1, i8 0, i8 0, [4 x i8] undef }, { i8*, i8, i8, i8, i8, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str692, i32 0, i32 0), i8 100, i8 0, i8 0, i8 0, [4 x i8] undef } }>, align 16
@.str693 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str694 = private unnamed_addr constant [18 x i8] c"\0A;; Function %s\0A\0A\00", align 1
@float_handler_set = internal unnamed_addr global i1 false
@str = private unnamed_addr constant [79 x i8] c"  -ffixed-<register>      Mark <register> as being unavailable to the compiler\00"
@str695 = private unnamed_addr constant [79 x i8] c"  -fcall-used-<register>  Mark <register> as being corrupted by function calls\00"
@str696 = private unnamed_addr constant [78 x i8] c"  -fcall-saved-<register> Mark <register> as being preserved across functions\00"
@str697 = private unnamed_addr constant [75 x i8] c"  -finline-limit=<number> Limits the size of inlined functions to <number>\00"
@str698 = private unnamed_addr constant [125 x i8] c"  -fmessage-length=<number> Limits diagnostics messages lengths to <number> characters per line.  0 suppresses line-wrapping\00"
@str699 = private unnamed_addr constant [179 x i8] c"  -fdiagnostics-show-location=[once | every-line] Indicates how often source location information should be emitted, as prefix, at the beginning of diagnostics when line-wrapping\00"
@str700 = private unnamed_addr constant [61 x i8] c"  -O[number]              Set optimization level to [number]\00"
@str701 = private unnamed_addr constant [63 x i8] c"  -Os                     Optimize for space rather than speed\00"
@str702 = private unnamed_addr constant [78 x i8] c"  -pedantic               Issue warnings needed by strict compliance to ISO C\00"
@str703 = private unnamed_addr constant [73 x i8] c"  -pedantic-errors        Like -pedantic except that errors are produced\00"
@str704 = private unnamed_addr constant [44 x i8] c"  -w                      Suppress warnings\00"
@str705 = private unnamed_addr constant [48 x i8] c"  -W                      Enable extra warnings\00"
@str706 = private unnamed_addr constant [49 x i8] c"  -Wunused                Enable unused warnings\00"
@str707 = private unnamed_addr constant [74 x i8] c"  -Wlarger-than-<number>  Warn if an object is larger than <number> bytes\00"
@str708 = private unnamed_addr constant [52 x i8] c"  -p                      Enable function profiling\00"
@str709 = private unnamed_addr constant [52 x i8] c"  -o <file>               Place output into <file> \00"
@str710 = private unnamed_addr constant [148 x i8] c"  -G <number>             Put global and static data smaller than <number>\0A                          bytes into a special section (on some targets)\00"
@str711 = private unnamed_addr constant [60 x i8] c"  -aux-info <file>        Emit declaration info into <file>\00"
@str712 = private unnamed_addr constant [76 x i8] c"  -quiet                  Do not display functions compiled or elapsed time\00"
@str713 = private unnamed_addr constant [57 x i8] c"  -version                Display the compiler's version\00"
@str714 = private unnamed_addr constant [76 x i8] c"  -d[letters]             Enable dumps from specific passes of the compiler\00"
@str715 = private unnamed_addr constant [78 x i8] c"  -dumpbase <file>        Base name to be used for dumps from specific passes\00"
@str716 = private unnamed_addr constant [68 x i8] c"  -fsched-verbose=<number> Set the verbosity level of the scheduler\00"
@str717 = private unnamed_addr constant [51 x i8] c"  --help                  Display this information\00"
@str718 = private unnamed_addr constant [28 x i8] c"\0ALanguage specific options:\00"
@str719 = private unnamed_addr constant [26 x i8] c"\0ATarget specific options:\00"
@str720 = private unnamed_addr constant [43 x i8] c"  They exist, but they are not documented.\00"
@str721 = private unnamed_addr constant [57 x i8] c"\0AThere are undocumented target specific options as well.\00"

; Function Attrs: nounwind uwtable
define void @set_Wunused(i32 %setting) #0 {
entry:
  store i32 %setting, i32* @warn_unused_function, align 4, !tbaa !1
  store i32 %setting, i32* @warn_unused_label, align 4, !tbaa !1
  %tobool = icmp eq i32 %setting, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* @warn_unused_parameter, align 4, !tbaa !1
  br label %if.end3

if.else:                                          ; preds = %entry
  %0 = load i32* @warn_unused_parameter, align 4, !tbaa !1
  %tobool1 = icmp eq i32 %0, 0
  br i1 %tobool1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.else
  store i32 -1, i32* @warn_unused_parameter, align 4, !tbaa !1
  br label %if.end3

if.end3:                                          ; preds = %if.else, %if.then2, %if.then
  store i32 %setting, i32* @warn_unused_variable, align 4, !tbaa !1
  store i32 %setting, i32* @warn_unused_value, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_fast_math_flags() #0 {
entry:
  store i32 0, i32* @flag_trapping_math, align 4, !tbaa !1
  store i32 1, i32* @flag_unsafe_math_optimizations, align 4, !tbaa !1
  store i32 0, i32* @flag_errno_math, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @set_no_fast_math_flags() #0 {
entry:
  store i32 1, i32* @flag_trapping_math, align 4, !tbaa !1
  store i32 0, i32* @flag_unsafe_math_optimizations, align 4, !tbaa !1
  store i32 1, i32* @flag_errno_math, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @read_integral_parameter(i8* nocapture readonly %p, i8* %pname, i32 %defval) #0 {
entry:
  %0 = load i8* %p, align 1, !tbaa !5
  %tobool20 = icmp eq i8 %0, 0
  br i1 %tobool20, label %if.end11, label %while.body

while.cond:                                       ; preds = %while.body
  %1 = load i8* %incdec.ptr, align 1, !tbaa !5
  %tobool = icmp eq i8 %1, 0
  br i1 %tobool, label %if.end11, label %while.body

while.body:                                       ; preds = %entry, %while.cond
  %.pr = phi i8 [ %1, %while.cond ], [ %0, %entry ]
  %endp.021 = phi i8* [ %incdec.ptr, %while.cond ], [ %p, %entry ]
  %idxprom = zext i8 %.pr to i64
  %arrayidx = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom
  %2 = load i16* %arrayidx, align 2, !tbaa !6
  %and2 = and i16 %2, 4
  %tobool3 = icmp eq i16 %and2, 0
  %incdec.ptr = getelementptr inbounds i8* %endp.021, i64 1
  br i1 %tobool3, label %if.then6, label %while.cond

if.then6:                                         ; preds = %while.body
  %cmp7 = icmp eq i8* %pname, null
  br i1 %cmp7, label %return, label %if.then9

if.then9:                                         ; preds = %if.then6
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %pname) #6
  br label %return

if.end11:                                         ; preds = %while.cond, %entry
  %call = tail call i32 @atoi(i8* %p) #6
  br label %return

return:                                           ; preds = %if.then9, %if.then6, %if.end11
  %retval.0 = phi i32 [ %call, %if.end11 ], [ %defval, %if.then6 ], [ %defval, %if.then9 ]
  ret i32 %retval.0
}

declare void @error(i8*, ...) #1

; Function Attrs: nounwind readonly
declare i32 @atoi(i8* nocapture) #2

; Function Attrs: noreturn nounwind uwtable
define void @do_abort() #3 {
entry:
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str1, i64 0, i64 0), i32 1592, i8* getelementptr inbounds ([9 x i8]* @__FUNCTION__.do_abort, i64 0, i64 0)) #10
  unreachable
}

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #4

; Function Attrs: noreturn nounwind uwtable
define void @botch(i8* nocapture readnone %s) #3 {
entry:
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str1, i64 0, i64 0), i32 1602, i8* getelementptr inbounds ([6 x i8]* @__FUNCTION__.botch, i64 0, i64 0)) #10
  unreachable
}

; Function Attrs: nounwind readnone uwtable
define i32 @exact_log2_wide(i64 %x) #5 {
entry:
  %cmp = icmp eq i64 %x, 0
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %sub = sub i64 0, %x
  %and = and i64 %x, %sub
  %cmp1 = icmp eq i64 %and, %x
  br i1 %cmp1, label %while.cond, label %return

while.cond:                                       ; preds = %lor.lhs.false, %while.cond
  %x.addr.0 = phi i64 [ %shr, %while.cond ], [ %x, %lor.lhs.false ]
  %log.0 = phi i32 [ %inc, %while.cond ], [ 0, %lor.lhs.false ]
  %shr = lshr i64 %x.addr.0, 1
  %cmp2 = icmp eq i64 %shr, 0
  %inc = add nsw i32 %log.0, 1
  br i1 %cmp2, label %return, label %while.cond

return:                                           ; preds = %while.cond, %entry, %lor.lhs.false
  %retval.0 = phi i32 [ -1, %lor.lhs.false ], [ -1, %entry ], [ %log.0, %while.cond ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readnone uwtable
define i32 @floor_log2_wide(i64 %x) #5 {
entry:
  %cmp2 = icmp eq i64 %x, 0
  br i1 %cmp2, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %log.04 = phi i32 [ %inc, %while.body ], [ -1, %entry ]
  %x.addr.03 = phi i64 [ %shr, %while.body ], [ %x, %entry ]
  %inc = add nsw i32 %log.04, 1
  %shr = lshr i64 %x.addr.03, 1
  %cmp = icmp eq i64 %shr, 0
  br i1 %cmp, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %entry
  %log.0.lcssa = phi i32 [ -1, %entry ], [ %inc, %while.body ]
  ret i32 %log.0.lcssa
}

; Function Attrs: nounwind uwtable
define i32 @do_float_handler(void (i8*)* nocapture %fn, i8* %data) #0 {
entry:
  %buf = alloca [1 x %struct.__jmp_buf_tag], align 16
  %0 = bitcast [1 x %struct.__jmp_buf_tag]* %buf to i8*
  call void @llvm.lifetime.start(i64 200, i8* %0) #6
  %arraydecay = getelementptr inbounds [1 x %struct.__jmp_buf_tag]* %buf, i64 0, i64 0
  %call = call i32 @setjmp(%struct.__jmp_buf_tag* %arraydecay) #11
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store i32 1, i32* @float_handled, align 4, !tbaa !1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([1 x %struct.__jmp_buf_tag]* @float_handler to i8*), i8* %0, i64 200, i32 16, i1 false) #6
  %.b.i = load i1* @float_handler_set, align 1
  br i1 %.b.i, label %set_float_handler.exit, label %if.then3.i

if.then3.i:                                       ; preds = %if.end
  %call.i = call void (i32)* (i32, void (i32)*)* @signal(i32 8, void (i32)* @float_signal) #6
  store i1 true, i1* @float_handler_set, align 1
  br label %set_float_handler.exit

set_float_handler.exit:                           ; preds = %if.end, %if.then3.i
  call void %fn(i8* %data) #6
  br label %cleanup

cleanup:                                          ; preds = %entry, %set_float_handler.exit
  %retval.0 = phi i32 [ 1, %set_float_handler.exit ], [ 0, %entry ]
  store i32 0, i32* @float_handled, align 4, !tbaa !1
  call void @llvm.lifetime.end(i64 200, i8* %0) #6
  ret i32 %retval.0
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #6

; Function Attrs: returns_twice
declare i32 @setjmp(%struct.__jmp_buf_tag*) #7

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #6

; Function Attrs: nounwind uwtable
define void @strip_off_ending(i8* nocapture %name, i32 %len) #0 {
entry:
  %cmp114 = icmp sgt i32 %len, 2
  br i1 %cmp114, label %for.body, label %for.end

for.cond:                                         ; preds = %for.body
  %0 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %0, 6
  %cmp1 = icmp slt i32 %0, %len
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.cond
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond ], [ 2, %entry ]
  %1 = trunc i64 %indvars.iv to i32
  %sub = sub nsw i32 %len, %1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds i8* %name, i64 %idxprom
  %2 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp2 = icmp eq i8 %2, 46
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp2, label %if.then, label %for.cond

if.then:                                          ; preds = %for.body
  store i8 0, i8* %arrayidx, align 1, !tbaa !5
  br label %for.end

for.end:                                          ; preds = %for.cond, %entry, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @output_quoted_string(%struct._IO_FILE* nocapture %asm_file, i8* nocapture readonly %string) #0 {
entry:
  %call = tail call i32 @putc(i32 34, %struct._IO_FILE* %asm_file) #6
  %0 = load i8* %string, align 1, !tbaa !5
  %cmp30 = icmp eq i8 %0, 0
  br i1 %cmp30, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.cond.backedge
  %conv32.in = phi i8 [ %2, %while.cond.backedge ], [ %0, %entry ]
  %string.pn = phi i8* [ %incdec.ptr31, %while.cond.backedge ], [ %string, %entry ]
  %incdec.ptr31 = getelementptr inbounds i8* %string.pn, i64 1
  %conv32 = sext i8 %conv32.in to i32
  %and = and i32 %conv32, 255
  %idxprom27 = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom27
  %1 = load i16* %arrayidx, align 2, !tbaa !6
  %and4 = and i16 %1, 16
  %tobool = icmp eq i16 %and4, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %while.body
  switch i8 %conv32.in, label %if.end [
    i8 34, label %if.then11
    i8 92, label %if.then11
  ]

if.then11:                                        ; preds = %if.then, %if.then
  %call12 = tail call i32 @putc(i32 92, %struct._IO_FILE* %asm_file) #6
  br label %if.end

if.end:                                           ; preds = %if.then, %if.then11
  %call14 = tail call i32 @putc(i32 %conv32, %struct._IO_FILE* %asm_file) #6
  br label %while.cond.backedge

if.else:                                          ; preds = %while.body
  %call16 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %asm_file, i8* getelementptr inbounds ([6 x i8]* @.str2, i64 0, i64 0), i32 %conv32) #6
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.else, %if.end
  %2 = load i8* %incdec.ptr31, align 1, !tbaa !5
  %cmp = icmp eq i8 %2, 0
  br i1 %cmp, label %while.end, label %while.body

while.end:                                        ; preds = %while.cond.backedge, %entry
  %call18 = tail call i32 @putc(i32 34, %struct._IO_FILE* %asm_file) #6
  ret void
}

; Function Attrs: nounwind
declare i32 @putc(i32, %struct._IO_FILE* nocapture) #8

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #8

; Function Attrs: nounwind uwtable
define void @output_file_directive(%struct._IO_FILE* nocapture %asm_file, i8* readonly %input_name) #0 {
entry:
  %call = tail call i64 @strlen(i8* %input_name) #6
  %sext = shl i64 %call, 32
  %idx.ext = ashr exact i64 %sext, 32
  %add.ptr = getelementptr inbounds i8* %input_name, i64 %idx.ext
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %na.0 = phi i8* [ %add.ptr, %entry ], [ %arrayidx, %while.body ]
  %cmp = icmp ugt i8* %na.0, %input_name
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arrayidx = getelementptr inbounds i8* %na.0, i64 -1
  %0 = load i8* %arrayidx, align 1, !tbaa !5
  %cmp3 = icmp eq i8 %0, 47
  br i1 %cmp3, label %while.end, label %while.cond

while.end:                                        ; preds = %while.body, %while.cond
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %asm_file)
  %call.i = tail call i32 @putc(i32 34, %struct._IO_FILE* %asm_file) #6
  %2 = load i8* %na.0, align 1, !tbaa !5
  %cmp30.i = icmp eq i8 %2, 0
  br i1 %cmp30.i, label %output_quoted_string.exit, label %while.body.i

while.body.i:                                     ; preds = %while.end, %while.cond.backedge.i
  %conv32.in.i = phi i8 [ %4, %while.cond.backedge.i ], [ %2, %while.end ]
  %string.pn.i = phi i8* [ %incdec.ptr31.i, %while.cond.backedge.i ], [ %na.0, %while.end ]
  %incdec.ptr31.i = getelementptr inbounds i8* %string.pn.i, i64 1
  %conv32.i = sext i8 %conv32.in.i to i32
  %and.i = and i32 %conv32.i, 255
  %idxprom27.i = zext i32 %and.i to i64
  %arrayidx.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom27.i
  %3 = load i16* %arrayidx.i, align 2, !tbaa !6
  %and4.i = and i16 %3, 16
  %tobool.i = icmp eq i16 %and4.i, 0
  br i1 %tobool.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %while.body.i
  switch i8 %conv32.in.i, label %if.end.i [
    i8 34, label %if.then11.i
    i8 92, label %if.then11.i
  ]

if.then11.i:                                      ; preds = %if.then.i, %if.then.i
  %call12.i = tail call i32 @putc(i32 92, %struct._IO_FILE* %asm_file) #6
  br label %if.end.i

if.end.i:                                         ; preds = %if.then11.i, %if.then.i
  %call14.i = tail call i32 @putc(i32 %conv32.i, %struct._IO_FILE* %asm_file) #6
  br label %while.cond.backedge.i

if.else.i:                                        ; preds = %while.body.i
  %call16.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %asm_file, i8* getelementptr inbounds ([6 x i8]* @.str2, i64 0, i64 0), i32 %conv32.i) #6
  br label %while.cond.backedge.i

while.cond.backedge.i:                            ; preds = %if.else.i, %if.end.i
  %4 = load i8* %incdec.ptr31.i, align 1, !tbaa !5
  %cmp.i = icmp eq i8 %4, 0
  br i1 %cmp.i, label %output_quoted_string.exit, label %while.body.i

output_quoted_string.exit:                        ; preds = %while.cond.backedge.i, %while.end
  %call18.i = tail call i32 @putc(i32 34, %struct._IO_FILE* %asm_file) #6
  %call6 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %asm_file) #6
  ret void
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #2

; Function Attrs: nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) #8

; Function Attrs: nounwind uwtable
define i32 @wrapup_global_declarations(%union.tree_node** nocapture readonly %vec, i32 %len) #0 {
entry:
  %cmp178 = icmp sgt i32 %len, 0
  br i1 %cmp178, label %for.body, label %do.end

do.body.preheader:                                ; preds = %for.inc
  br i1 %cmp178, label %for.body11.lr.ph.us, label %do.end

for.end132.us:                                    ; preds = %for.inc130.us
  %tobool133.us = icmp ne i32 %reconsider.2.us, 0
  %.output_something.0.us = select i1 %tobool133.us, i32 1, i32 %output_something.0.us
  br i1 %tobool133.us, label %for.body11.lr.ph.us, label %do.end

for.body11.us:                                    ; preds = %for.inc130.us, %for.body11.lr.ph.us
  %indvars.iv180 = phi i64 [ 0, %for.body11.lr.ph.us ], [ %indvars.iv.next181, %for.inc130.us ]
  %reconsider.0177.us = phi i32 [ 0, %for.body11.lr.ph.us ], [ %reconsider.2.us, %for.inc130.us ]
  %arrayidx13.us = getelementptr inbounds %union.tree_node** %vec, i64 %indvars.iv180
  %0 = load %union.tree_node** %arrayidx13.us, align 8, !tbaa !8
  %asm_written_flag.us = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load15.us = load i32* %asm_written_flag.us, align 8
  %bf.clear16.us = and i32 %bf.load15.us, 16384
  %tobool.us = icmp eq i32 %bf.clear16.us, 0
  br i1 %tobool.us, label %lor.lhs.false.us, label %for.inc130.us

lor.lhs.false.us:                                 ; preds = %for.body11.us
  %external_flag.us = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %1 = bitcast i48* %external_flag.us to i64*
  %bf.load18.us = load i64* %1, align 8
  %bf.cast.us = and i64 %bf.load18.us, 256
  %tobool21.us = icmp eq i64 %bf.cast.us, 0
  br i1 %tobool21.us, label %if.end23.us, label %for.inc130.us

if.end23.us:                                      ; preds = %lor.lhs.false.us
  %2 = and i32 %bf.load15.us, 262399
  %3 = icmp eq i32 %2, 262178
  br i1 %3, label %if.then35.us, label %if.end84.us

if.then35.us:                                     ; preds = %if.end23.us
  %assembler_name.us = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 14
  %4 = load %union.tree_node** %assembler_name.us, align 8, !tbaa !10
  %cmp37.us = icmp eq %union.tree_node* %4, null
  br i1 %cmp37.us, label %cond.false.us, label %cond.end.us

cond.false.us:                                    ; preds = %if.then35.us
  %5 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !8
  tail call void %5(%union.tree_node* %0) #6
  %.pre = load %union.tree_node** %assembler_name.us, align 8, !tbaa !10
  br label %cond.end.us

cond.end.us:                                      ; preds = %cond.false.us, %if.then35.us
  %6 = phi %union.tree_node* [ %.pre, %cond.false.us ], [ %4, %if.then35.us ]
  %static_flag41.us = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load42.us = load i32* %static_flag41.us, align 8
  %bf.clear44.us = and i32 %bf.load42.us, 262144
  %tobool45.us = icmp eq i32 %bf.clear44.us, 0
  br i1 %tobool45.us, label %if.else.us, label %if.then82.us

if.else.us:                                       ; preds = %cond.end.us
  %bf.load48.us = load i64* %1, align 8
  %bf.cast51.us = and i64 %bf.load48.us, 67108864
  %tobool52.us = icmp eq i64 %bf.cast51.us, 0
  br i1 %tobool52.us, label %if.else54.us, label %if.end84.us

if.else54.us:                                     ; preds = %if.else.us
  %bf.load56.us = load i32* %asm_written_flag.us, align 8
  %7 = and i32 %bf.load56.us, 528384
  %8 = icmp eq i32 %7, 4096
  br i1 %8, label %land.lhs.true66.us, label %if.then82.us

land.lhs.true66.us:                               ; preds = %if.else54.us
  %9 = load i32* @optimize, align 4, !tbaa !1
  %tobool67.us = icmp eq i32 %9, 0
  %10 = load i32* @flag_keep_static_consts, align 4
  %tobool69.us = icmp ne i32 %10, 0
  %or.cond137.us = and i1 %tobool67.us, %tobool69.us
  %bf.cast75.us = and i64 %bf.load48.us, 4194304
  %tobool76.us = icmp eq i64 %bf.cast75.us, 0
  %or.cond172.us = and i1 %or.cond137.us, %tobool76.us
  br i1 %or.cond172.us, label %if.then82.us, label %if.end84.us

if.then82.us:                                     ; preds = %land.lhs.true66.us, %if.else54.us, %cond.end.us
  tail call void @rest_of_decl_compilation(%union.tree_node* %0, i8* null, i32 1, i32 1)
  br label %if.end84.us

if.end84.us:                                      ; preds = %if.then82.us, %land.lhs.true66.us, %if.else.us, %if.end23.us
  %reconsider.1.us = phi i32 [ 1, %if.then82.us ], [ %reconsider.0177.us, %if.end23.us ], [ %reconsider.0177.us, %if.else.us ], [ %reconsider.0177.us, %land.lhs.true66.us ]
  %bf.load87.us = load i32* %asm_written_flag.us, align 8
  %bf.clear88.us = and i32 %bf.load87.us, 255
  %cmp89.us = icmp eq i32 %bf.clear88.us, 30
  br i1 %cmp89.us, label %land.lhs.true90.us, label %for.inc130.us

land.lhs.true90.us:                               ; preds = %if.end84.us
  %initial.us = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 12
  %11 = load %union.tree_node** %initial.us, align 8, !tbaa !14
  %cmp92.us = icmp eq %union.tree_node* %11, null
  br i1 %cmp92.us, label %for.inc130.us, label %land.lhs.true93.us

land.lhs.true93.us:                               ; preds = %land.lhs.true90.us
  %f.us = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 19, i32 0
  %12 = load %struct.function** %f.us, align 8, !tbaa !8
  %cmp95.us = icmp eq %struct.function* %12, null
  br i1 %cmp95.us, label %for.inc130.us, label %land.lhs.true96.us

land.lhs.true96.us:                               ; preds = %land.lhs.true93.us
  %13 = load i32* @flag_keep_inline_functions, align 4, !tbaa !1
  %tobool97.us = icmp eq i32 %13, 0
  br i1 %tobool97.us, label %lor.lhs.false98.us, label %if.then128.us

lor.lhs.false98.us:                               ; preds = %land.lhs.true96.us
  %bf.clear103.us = and i32 %bf.load87.us, 524288
  %tobool104.us = icmp eq i32 %bf.clear103.us, 0
  br i1 %tobool104.us, label %lor.lhs.false113.us, label %land.lhs.true105.us

land.lhs.true105.us:                              ; preds = %lor.lhs.false98.us
  %bf.load108.us = load i64* %1, align 8
  %bf.cast111.us = and i64 %bf.load108.us, 67108864
  %tobool112.us = icmp eq i64 %bf.cast111.us, 0
  br i1 %tobool112.us, label %if.then128.us, label %lor.lhs.false113.us

lor.lhs.false113.us:                              ; preds = %land.lhs.true105.us, %lor.lhs.false98.us
  %assembler_name115.us = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 14
  %14 = load %union.tree_node** %assembler_name115.us, align 8, !tbaa !10
  %cmp116.us = icmp eq %union.tree_node* %14, null
  br i1 %cmp116.us, label %cond.false118.us, label %cond.end119.us

cond.false118.us:                                 ; preds = %lor.lhs.false113.us
  %15 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !8
  tail call void %15(%union.tree_node* %0) #6
  %.pre184 = load %union.tree_node** %assembler_name115.us, align 8, !tbaa !10
  br label %cond.end119.us

cond.end119.us:                                   ; preds = %cond.false118.us, %lor.lhs.false113.us
  %16 = phi %union.tree_node* [ %.pre184, %cond.false118.us ], [ %14, %lor.lhs.false113.us ]
  %static_flag123.us = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 2
  %bf.load124.us = load i32* %static_flag123.us, align 8
  %bf.clear126.us = and i32 %bf.load124.us, 262144
  %tobool127.us = icmp eq i32 %bf.clear126.us, 0
  br i1 %tobool127.us, label %for.inc130.us, label %if.then128.us

if.then128.us:                                    ; preds = %cond.end119.us, %land.lhs.true105.us, %land.lhs.true96.us
  tail call void @output_inline_function(%union.tree_node* %0) #6
  br label %for.inc130.us

for.inc130.us:                                    ; preds = %if.then128.us, %cond.end119.us, %land.lhs.true93.us, %land.lhs.true90.us, %if.end84.us, %lor.lhs.false.us, %for.body11.us
  %reconsider.2.us = phi i32 [ %reconsider.0177.us, %for.body11.us ], [ %reconsider.0177.us, %lor.lhs.false.us ], [ 1, %if.then128.us ], [ %reconsider.1.us, %cond.end119.us ], [ %reconsider.1.us, %land.lhs.true93.us ], [ %reconsider.1.us, %land.lhs.true90.us ], [ %reconsider.1.us, %if.end84.us ]
  %indvars.iv.next181 = add nuw nsw i64 %indvars.iv180, 1
  %lftr.wideiv182 = trunc i64 %indvars.iv.next181 to i32
  %exitcond183 = icmp eq i32 %lftr.wideiv182, %len
  br i1 %exitcond183, label %for.end132.us, label %for.body11.us

for.body11.lr.ph.us:                              ; preds = %do.body.preheader, %for.end132.us
  %output_something.0.us = phi i32 [ %.output_something.0.us, %for.end132.us ], [ 0, %do.body.preheader ]
  br label %for.body11.us

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds %union.tree_node** %vec, i64 %indvars.iv
  %17 = load %union.tree_node** %arrayidx, align 8, !tbaa !8
  %defer_output = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 5
  %18 = bitcast i48* %defer_output to i64*
  %bf.load = load i64* %18, align 8
  %bf.clear = and i64 %bf.load, -262145
  store i64 %bf.clear, i64* %18, align 8
  %code = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 2
  %bf.load2 = load i32* %code, align 8
  %bf.clear3 = and i32 %bf.load2, 255
  %cmp4 = icmp eq i32 %bf.clear3, 34
  br i1 %cmp4, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %size = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 4
  %19 = load %union.tree_node** %size, align 8, !tbaa !15
  %cmp6 = icmp eq %union.tree_node* %19, null
  %20 = load void (%union.tree_node*)** @incomplete_decl_finalize_hook, align 8
  %cmp8 = icmp ne void (%union.tree_node*)* %20, null
  %or.cond = and i1 %cmp6, %cmp8
  br i1 %or.cond, label %if.then, label %for.inc

if.then:                                          ; preds = %land.lhs.true
  tail call void %20(%union.tree_node* %17) #6
  br label %for.inc

for.inc:                                          ; preds = %for.body, %land.lhs.true, %if.then
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %len
  br i1 %exitcond, label %do.body.preheader, label %for.body

do.end:                                           ; preds = %for.end132.us, %entry, %do.body.preheader
  %.output_something.0.lcssa = phi i32 [ 0, %do.body.preheader ], [ 0, %entry ], [ %.output_something.0.us, %for.end132.us ]
  ret i32 %.output_something.0.lcssa
}

; Function Attrs: nounwind uwtable
define void @rest_of_decl_compilation(%union.tree_node* %decl, i8* %asmspec, i32 %top_level, i32 %at_end) #0 {
entry:
  %attributes = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 16
  %0 = load %union.tree_node** %attributes, align 8, !tbaa !16
  %call = tail call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([6 x i8]* @.str7, i64 0, i64 0), %union.tree_node* %0) #6
  %tobool = icmp eq %union.tree_node* %call, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %value = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %1 = bitcast i32* %value to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !17
  %value3 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 2
  %3 = bitcast i32* %value3 to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !17
  %pointer = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 4
  %5 = load %union.tree_node** %pointer, align 8
  %6 = bitcast %union.tree_node* %5 to i8*
  %call4 = tail call %union.tree_node* @get_identifier(i8* %6) #6
  tail call void @assemble_alias(%union.tree_node* %decl, %union.tree_node* %call4) #6
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %static_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %static_flag, align 8
  %bf.clear = and i32 %bf.load, 262144
  %tobool5 = icmp eq i32 %bf.clear, 0
  br i1 %tobool5, label %lor.lhs.false, label %if.then15

lor.lhs.false:                                    ; preds = %if.end
  %external_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %7 = bitcast i48* %external_flag to i64*
  %bf.load7 = load i64* %7, align 8
  %bf.cast = and i64 %bf.load7, 256
  %tobool10 = icmp eq i64 %bf.cast, 0
  br i1 %tobool10, label %lor.lhs.false11, label %if.then15

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %bf.clear14 = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear14, 30
  br i1 %cmp, label %if.then15, label %if.else

if.then15:                                        ; preds = %lor.lhs.false, %if.end, %lor.lhs.false11
  tail call void @timevar_push(i32 11) #6
  %tobool16 = icmp eq i8* %asmspec, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.then15
  tail call void @make_decl_rtl(%union.tree_node* %decl, i8* %asmspec) #6
  br label %if.end18

if.end18:                                         ; preds = %if.then15, %if.then17
  %tobool19 = icmp ne i32 %at_end, 0
  br i1 %tobool19, label %if.then27, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.end18
  %defer_output = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %8 = bitcast i48* %defer_output to i64*
  %bf.load22 = load i64* %8, align 8
  %bf.cast25 = and i64 %bf.load22, 262144
  %tobool26 = icmp eq i64 %bf.cast25, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %lor.lhs.false20, %if.end18
  tail call void @assemble_variable(%union.tree_node* %decl, i32 %top_level, i32 %at_end, i32 0) #6
  br label %if.end28

if.end28:                                         ; preds = %lor.lhs.false20, %if.then27
  %9 = load %union.tree_node** @last_assemble_variable_decl, align 8, !tbaa !8
  %cmp29 = icmp eq %union.tree_node* %9, %decl
  br i1 %cmp29, label %do.body, label %if.end59

do.body:                                          ; preds = %if.end28
  %rtl = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  %10 = load %struct.rtx_def** %rtl, align 8, !tbaa !19
  %tobool32 = icmp eq %struct.rtx_def* %10, null
  br i1 %tobool32, label %cond.false, label %cond.end

cond.false:                                       ; preds = %do.body
  tail call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %11 = load %struct.rtx_def** %rtl, align 8, !tbaa !19
  br label %cond.end

cond.end:                                         ; preds = %do.body, %cond.false
  %cond = phi %struct.rtx_def* [ %11, %cond.false ], [ %10, %do.body ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %cond, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx, align 8, !tbaa !8
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx38 to i8**
  %13 = load i8** %rtstr, align 8, !tbaa !8
  %14 = load i32* @flag_inhibit_size_directive, align 4, !tbaa !1
  %tobool39 = icmp eq i32 %14, 0
  br i1 %tobool39, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %cond.end
  %size = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 4
  %15 = load %union.tree_node** %size, align 8, !tbaa !15
  %tobool41 = icmp eq %union.tree_node* %15, null
  %or.cond = or i1 %tobool41, %tobool19
  %or.cond.not = xor i1 %or.cond, true
  %tobool45 = icmp ne i32 %top_level, 0
  %or.cond98 = and i1 %tobool45, %or.cond.not
  br i1 %or.cond98, label %land.lhs.true46, label %if.end59

land.lhs.true46:                                  ; preds = %land.lhs.true
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %16 = load %union.tree_node** %initial, align 8, !tbaa !14
  %17 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !8
  %cmp48 = icmp ne %union.tree_node* %16, %17
  %18 = load i32* @size_directive_output, align 4
  %tobool50 = icmp ne i32 %18, 0
  %or.cond99 = or i1 %cmp48, %tobool50
  br i1 %or.cond99, label %if.end59, label %if.then51

if.then51:                                        ; preds = %land.lhs.true46
  store i32 1, i32* @size_directive_output, align 4, !tbaa !1
  %19 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %20 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str9, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %19)
  %21 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  tail call void @assemble_name(%struct._IO_FILE* %21, i8* %13) #6
  %22 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %call53 = tail call i32 @putc(i32 44, %struct._IO_FILE* %22) #6
  %23 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %type = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %24 = load %union.tree_node** %type, align 8, !tbaa !20
  %call55 = tail call i64 @int_size_in_bytes(%union.tree_node* %24) #6
  %call56 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([5 x i8]* @.str10, i64 0, i64 0), i64 %call55) #6
  %25 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %call57 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %25) #6
  br label %if.end59

if.end59:                                         ; preds = %cond.end, %land.lhs.true46, %land.lhs.true, %if.then51, %if.end28
  tail call void @timevar_pop(i32 11) #6
  br label %if.end97

if.else:                                          ; preds = %lor.lhs.false11
  %bf.cast64 = and i64 %bf.load7, 1024
  %tobool65 = icmp ne i64 %bf.cast64, 0
  %cmp67 = icmp ne i8* %asmspec, null
  %or.cond100 = and i1 %tobool65, %cmp67
  br i1 %or.cond100, label %if.then68, label %if.else83

if.then68:                                        ; preds = %if.else
  %call69 = tail call i32 @decode_reg_name(i8* %asmspec) #6
  %cmp70 = icmp sgt i32 %call69, -1
  br i1 %cmp70, label %if.then71, label %if.else74

if.then71:                                        ; preds = %if.then68
  %rtl73 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  store %struct.rtx_def* null, %struct.rtx_def** %rtl73, align 8, !tbaa !19
  tail call void @make_decl_rtl(%union.tree_node* %decl, i8* %asmspec) #6
  br label %if.end97

if.else74:                                        ; preds = %if.then68
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([49 x i8]* @.str11, i64 0, i64 0), i8* %asmspec) #6
  %bf.load77 = load i64* %7, align 8
  %bf.clear78 = and i64 %bf.load77, -1025
  store i64 %bf.clear78, i64* %7, align 8
  %tobool79 = icmp eq i32 %top_level, 0
  br i1 %tobool79, label %if.then80, label %if.end97

if.then80:                                        ; preds = %if.else74
  tail call void @expand_decl(%union.tree_node* %decl) #6
  br label %if.end97

if.else83:                                        ; preds = %if.else
  %26 = load i32* @write_symbols, align 4, !tbaa !5
  %27 = and i32 %26, -5
  %28 = icmp eq i32 %27, 1
  %cmp92 = icmp eq i32 %bf.clear14, 33
  %or.cond135 = and i1 %28, %cmp92
  br i1 %or.cond135, label %if.then93, label %if.end97

if.then93:                                        ; preds = %if.else83
  tail call void @timevar_push(i32 43) #6
  %call94 = tail call i32 @dbxout_symbol(%union.tree_node* %decl, i32 0) #6
  tail call void @timevar_pop(i32 43) #6
  br label %if.end97

if.end97:                                         ; preds = %if.else74, %if.then80, %if.then71, %if.else83, %if.then93, %if.end59
  ret void
}

declare void @output_inline_function(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define void @check_global_declarations(%union.tree_node** nocapture readonly %vec, i32 %len) #0 {
entry:
  %cmp190 = icmp sgt i32 %len, 0
  br i1 %cmp190, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %if.end151
  %indvars.iv = phi i64 [ %indvars.iv.next, %if.end151 ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds %union.tree_node** %vec, i64 %indvars.iv
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !8
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %1 = and i32 %bf.load, 278783
  %2 = icmp eq i32 %1, 262178
  br i1 %2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %rtl = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 17
  store %struct.rtx_def* null, %struct.rtx_def** %rtl, align 8, !tbaa !19
  br label %if.end

if.end:                                           ; preds = %for.body, %if.then
  %bf.clear15 = and i32 %bf.load, 255
  %cmp16 = icmp eq i32 %bf.clear15, 30
  br i1 %cmp16, label %land.lhs.true17, label %if.end72

land.lhs.true17:                                  ; preds = %if.end
  %3 = load i32* @warn_unused_function, align 4, !tbaa !1
  %tobool18 = icmp eq i32 %3, 0
  br i1 %tobool18, label %lor.lhs.false, label %land.lhs.true29

lor.lhs.false:                                    ; preds = %land.lhs.true17
  %assembler_name = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 14
  %4 = load %union.tree_node** %assembler_name, align 8, !tbaa !10
  %cmp20 = icmp eq %union.tree_node* %4, null
  br i1 %cmp20, label %cond.false, label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %5 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !8
  tail call void %5(%union.tree_node* %0) #6
  %.pre = load %union.tree_node** %assembler_name, align 8, !tbaa !10
  br label %cond.end

cond.end:                                         ; preds = %lor.lhs.false, %cond.false
  %6 = phi %union.tree_node* [ %4, %lor.lhs.false ], [ %.pre, %cond.false ]
  %static_flag24 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 2
  %bf.load25 = load i32* %static_flag24, align 8
  %bf.clear27 = and i32 %bf.load25, 262144
  %tobool28 = icmp eq i32 %bf.clear27, 0
  br i1 %tobool28, label %if.end72, label %land.lhs.true29

land.lhs.true29:                                  ; preds = %cond.end, %land.lhs.true17
  %initial = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 12
  %7 = load %union.tree_node** %initial, align 8, !tbaa !14
  %cmp31 = icmp eq %union.tree_node* %7, null
  br i1 %cmp31, label %land.lhs.true32, label %if.end72

land.lhs.true32:                                  ; preds = %land.lhs.true29
  %external_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %8 = bitcast i48* %external_flag to i64*
  %bf.load34 = load i64* %8, align 8
  %9 = and i64 %bf.load34, 4194560
  %10 = icmp eq i64 %9, 256
  br i1 %10, label %land.lhs.true45, label %if.end72

land.lhs.true45:                                  ; preds = %land.lhs.true32
  %bf.load47 = load i32* %code, align 8
  %bf.clear49 = and i32 %bf.load47, 524288
  %tobool50 = icmp eq i32 %bf.clear49, 0
  br i1 %tobool50, label %if.then51, label %if.end72

if.then51:                                        ; preds = %land.lhs.true45
  %assembler_name53 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 14
  %11 = load %union.tree_node** %assembler_name53, align 8, !tbaa !10
  %cmp54 = icmp eq %union.tree_node* %11, null
  br i1 %cmp54, label %cond.false56, label %cond.end57

cond.false56:                                     ; preds = %if.then51
  %12 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !8
  tail call void %12(%union.tree_node* %0) #6
  %.pre192 = load %union.tree_node** %assembler_name53, align 8, !tbaa !10
  br label %cond.end57

cond.end57:                                       ; preds = %if.then51, %cond.false56
  %13 = phi %union.tree_node* [ %11, %if.then51 ], [ %.pre192, %cond.false56 ]
  %static_flag61 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 2
  %bf.load62 = load i32* %static_flag61, align 8
  %bf.clear64 = and i32 %bf.load62, 262144
  %tobool65 = icmp eq i32 %bf.clear64, 0
  br i1 %tobool65, label %if.else, label %if.then66

if.then66:                                        ; preds = %cond.end57
  tail call void (%union.tree_node*, i8*, ...)* @pedwarn_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([28 x i8]* @.str4, i64 0, i64 0)) #6
  br label %if.end67

if.else:                                          ; preds = %cond.end57
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([41 x i8]* @.str5, i64 0, i64 0)) #6
  br label %if.end67

if.end67:                                         ; preds = %if.else, %if.then66
  %bf.load70 = load i32* %code, align 8
  %bf.set = or i32 %bf.load70, 524288
  store i32 %bf.set, i32* %code, align 8
  tail call void @assemble_external(%union.tree_node* %0) #6
  br label %if.end72

if.end72:                                         ; preds = %land.lhs.true32, %land.lhs.true45, %cond.end, %if.end67, %land.lhs.true29, %if.end
  %14 = load i32* @warn_unused_function, align 4, !tbaa !1
  %tobool73 = icmp eq i32 %14, 0
  br i1 %tobool73, label %lor.lhs.false87, label %land.lhs.true74

land.lhs.true74:                                  ; preds = %if.end72
  %bf.load77 = load i32* %code, align 8
  %bf.clear78 = and i32 %bf.load77, 255
  %cmp79 = icmp eq i32 %bf.clear78, 30
  br i1 %cmp79, label %land.lhs.true80, label %lor.lhs.false87

land.lhs.true80:                                  ; preds = %land.lhs.true74
  %inline_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %15 = bitcast i48* %inline_flag to i64*
  %bf.load82 = load i64* %15, align 8
  %bf.cast85 = and i64 %bf.load82, 2048
  %tobool86 = icmp eq i64 %bf.cast85, 0
  br i1 %tobool86, label %land.lhs.true101, label %lor.lhs.false87

lor.lhs.false87:                                  ; preds = %land.lhs.true80, %if.end72, %land.lhs.true74
  %16 = load i32* @warn_unused_variable, align 4, !tbaa !1
  %tobool88 = icmp eq i32 %16, 0
  br i1 %tobool88, label %if.end151, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %lor.lhs.false87
  %bf.load92 = load i32* %code, align 8
  %17 = and i32 %bf.load92, 4351
  %18 = icmp eq i32 %17, 34
  br i1 %18, label %land.lhs.true89.land.lhs.true101_crit_edge, label %if.end151

land.lhs.true89.land.lhs.true101_crit_edge:       ; preds = %land.lhs.true89
  %in_system_header_flag.phi.trans.insert = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5
  %.phi.trans.insert = bitcast i48* %in_system_header_flag.phi.trans.insert to i64*
  %bf.load103.pre = load i64* %.phi.trans.insert, align 8
  br label %land.lhs.true101

land.lhs.true101:                                 ; preds = %land.lhs.true89.land.lhs.true101_crit_edge, %land.lhs.true80
  %bf.load119 = phi i32 [ %bf.load92, %land.lhs.true89.land.lhs.true101_crit_edge ], [ %bf.load77, %land.lhs.true80 ]
  %bf.load103 = phi i64 [ %bf.load103.pre, %land.lhs.true89.land.lhs.true101_crit_edge ], [ %bf.load82, %land.lhs.true80 ]
  %19 = and i64 %bf.load103, 65792
  %20 = icmp eq i64 %19, 0
  %21 = and i32 %bf.load119, 589824
  %22 = icmp eq i32 %21, 0
  %or.cond = and i1 %20, %22
  br i1 %or.cond, label %land.lhs.true129, label %if.end151

land.lhs.true129:                                 ; preds = %land.lhs.true101
  %bf.clear133 = and i32 %bf.load119, 255
  %cmp134 = icmp eq i32 %bf.clear133, 30
  %bf.cast140 = and i64 %bf.load103, 1024
  %tobool141 = icmp eq i64 %bf.cast140, 0
  %or.cond189 = or i1 %cmp134, %tobool141
  br i1 %or.cond189, label %land.lhs.true142, label %if.end151

land.lhs.true142:                                 ; preds = %land.lhs.true129
  %name = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 8
  %23 = load %union.tree_node** %name, align 8, !tbaa !21
  %used_flag145 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 2
  %bf.load146 = load i32* %used_flag145, align 8
  %bf.clear148 = and i32 %bf.load146, 65536
  %tobool149 = icmp eq i32 %bf.clear148, 0
  br i1 %tobool149, label %if.then150, label %if.end151

if.then150:                                       ; preds = %land.lhs.true142
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %0, i8* getelementptr inbounds ([26 x i8]* @.str6, i64 0, i64 0)) #6
  br label %if.end151

if.end151:                                        ; preds = %land.lhs.true129, %land.lhs.true142, %land.lhs.true101, %lor.lhs.false87, %if.then150, %land.lhs.true89
  tail call void @timevar_push(i32 43) #6
  %24 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !8
  %global_decl = getelementptr inbounds %struct.gcc_debug_hooks* %24, i64 0, i32 16
  %25 = load void (%union.tree_node*)** %global_decl, align 8, !tbaa !22
  tail call void %25(%union.tree_node* %0) #6
  tail call void @timevar_pop(i32 43) #6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %len
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %if.end151, %entry
  ret void
}

declare void @pedwarn_with_decl(%union.tree_node*, i8*, ...) #1

declare void @warning_with_decl(%union.tree_node*, i8*, ...) #1

declare void @assemble_external(%union.tree_node*) #1

declare void @timevar_push(i32) #1

declare void @timevar_pop(i32) #1

; Function Attrs: nounwind uwtable
define void @push_srcloc(i8* %file, i32 %line) #0 {
entry:
  %0 = load %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %tobool = icmp eq %struct.file_stack* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i8** @input_filename, align 8, !tbaa !8
  %name = getelementptr inbounds %struct.file_stack* %0, i64 0, i32 0
  store i8* %1, i8** %name, align 8, !tbaa !24
  %2 = load i32* @lineno, align 4, !tbaa !1
  %3 = load %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %line1 = getelementptr inbounds %struct.file_stack* %3, i64 0, i32 2
  store i32 %2, i32* %line1, align 4, !tbaa !26
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %call = tail call noalias i8* @xmalloc(i64 24) #6
  %4 = bitcast i8* %call to %struct.file_stack*
  store i8* %file, i8** @input_filename, align 8, !tbaa !8
  %name2 = bitcast i8* %call to i8**
  store i8* %file, i8** %name2, align 8, !tbaa !24
  store i32 %line, i32* @lineno, align 4, !tbaa !1
  %line3 = getelementptr inbounds i8* %call, i64 16
  %5 = bitcast i8* %line3 to i32*
  store i32 %line, i32* %5, align 4, !tbaa !26
  %indent_level = getelementptr inbounds i8* %call, i64 20
  %6 = bitcast i8* %indent_level to i32*
  store i32 0, i32* %6, align 4, !tbaa !27
  %7 = load %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %next = getelementptr inbounds i8* %call, i64 8
  %8 = bitcast i8* %next to %struct.file_stack**
  store %struct.file_stack* %7, %struct.file_stack** %8, align 8, !tbaa !28
  store %struct.file_stack* %4, %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %9 = load i32* @input_file_stack_tick, align 4, !tbaa !1
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* @input_file_stack_tick, align 4, !tbaa !1
  ret void
}

declare noalias i8* @xmalloc(i64) #1

; Function Attrs: nounwind uwtable
define void @pop_srcloc() #0 {
entry:
  %0 = load %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %next = getelementptr inbounds %struct.file_stack* %0, i64 0, i32 1
  %1 = load %struct.file_stack** %next, align 8, !tbaa !28
  store %struct.file_stack* %1, %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %2 = bitcast %struct.file_stack* %0 to i8*
  tail call void @free(i8* %2)
  %3 = load i32* @input_file_stack_tick, align 4, !tbaa !1
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @input_file_stack_tick, align 4, !tbaa !1
  %4 = load %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %tobool = icmp eq %struct.file_stack* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str1, i64 0, i64 0), i32 2104, i8* getelementptr inbounds ([11 x i8]* @__FUNCTION__.pop_srcloc, i64 0, i64 0)) #10
  unreachable

if.end:                                           ; preds = %entry
  %name = getelementptr inbounds %struct.file_stack* %4, i64 0, i32 0
  %5 = load i8** %name, align 8, !tbaa !24
  store i8* %5, i8** @input_filename, align 8, !tbaa !8
  %line = getelementptr inbounds %struct.file_stack* %4, i64 0, i32 2
  %6 = load i32* %line, align 4, !tbaa !26
  store i32 %6, i32* @lineno, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #8

declare %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #1

declare %union.tree_node* @get_identifier(i8*) #1

declare void @assemble_alias(%union.tree_node*, %union.tree_node*) #1

declare void @make_decl_rtl(%union.tree_node*, i8*) #1

declare void @assemble_variable(%union.tree_node*, i32, i32, i32) #1

declare void @assemble_name(%struct._IO_FILE*, i8*) #1

declare i64 @int_size_in_bytes(%union.tree_node*) #1

declare i32 @decode_reg_name(i8*) #1

declare void @expand_decl(%union.tree_node*) #1

declare i32 @dbxout_symbol(%union.tree_node*, i32) #1

; Function Attrs: nounwind uwtable
define void @rest_of_type_compilation(%union.tree_node* nocapture readonly %type, i32 %toplev) #0 {
entry:
  tail call void @timevar_push(i32 43) #6
  %0 = load i32* @write_symbols, align 4, !tbaa !5
  %1 = and i32 %0, -5
  %2 = icmp eq i32 %1, 1
  br i1 %2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %chain = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0
  %3 = load %union.tree_node** %chain, align 8, !tbaa !29
  %lnot = icmp eq i32 %toplev, 0
  %lnot.ext = zext i1 %lnot to i32
  %call = tail call i32 @dbxout_symbol(%union.tree_node* %3, i32 %lnot.ext) #6
  %.pre = load i32* @write_symbols, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %4 = phi i32 [ %0, %entry ], [ %.pre, %if.then ]
  %cmp2 = icmp eq i32 %4, 4
  %cmp4 = icmp eq i32 %4, 7
  %or.cond10 = or i1 %cmp2, %cmp4
  %tobool5 = icmp ne i32 %toplev, 0
  %or.cond11 = and i1 %or.cond10, %tobool5
  br i1 %or.cond11, label %if.then6, label %if.end9

if.then6:                                         ; preds = %if.end
  %chain8 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0
  %5 = load %union.tree_node** %chain8, align 8, !tbaa !29
  tail call void @dwarf2out_decl(%union.tree_node* %5) #6
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then6
  tail call void @timevar_pop(i32 43) #6
  ret void
}

declare void @dwarf2out_decl(%union.tree_node*) #1

; Function Attrs: nounwind uwtable
define void @rest_of_compilation(%union.tree_node* %decl) #0 {
entry:
  %loops = alloca %struct.loops, align 8
  call void @timevar_push(i32 44) #6
  store i32 0, i32* @generating_concat_p, align 4, !tbaa !1
  %0 = load i32* @optimize, align 4, !tbaa !1
  %lnot = icmp eq i32 %0, 0
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* @cse_not_expected, align 4, !tbaa !1
  %1 = load %struct.function** @cfun, align 8, !tbaa !8
  %x_whole_function_mode_p = getelementptr inbounds %struct.function* %1, i64 0, i32 56
  %2 = bitcast i24* %x_whole_function_mode_p to i32*
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 262144
  %tobool1 = icmp eq i32 %bf.clear, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @identify_blocks() #6
  %.pre = load %struct.function** @cfun, align 8, !tbaa !8
  %x_whole_function_mode_p2.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 56
  %.phi.trans.insert = bitcast i24* %x_whole_function_mode_p2.phi.trans.insert to i32*
  %bf.load3.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %bf.load3 = phi i32 [ %bf.load, %entry ], [ %bf.load3.pre, %if.then ]
  %bf.clear5 = and i32 %bf.load3, 262144
  %tobool6 = icmp eq i32 %bf.clear5, 0
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end
  call void @reorder_blocks() #6
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then7
  call void @init_flow() #6
  %f = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 19, i32 0
  %3 = load %struct.function** %f, align 8, !tbaa !8
  %cmp = icmp eq %struct.function* %3, null
  br i1 %cmp, label %if.then10, label %if.end179

if.then10:                                        ; preds = %if.end8
  %4 = load %union.tree_node** @current_function_decl, align 8, !tbaa !8
  %context = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 9
  %5 = load %union.tree_node** %context, align 8, !tbaa !30
  %cmp12883 = icmp eq %union.tree_node* %5, null
  br i1 %cmp12883, label %for.end, label %for.body

for.body:                                         ; preds = %if.then10, %for.inc
  %parent.0884 = phi %union.tree_node* [ %call, %for.inc ], [ %5, %if.then10 ]
  %code = getelementptr inbounds %union.tree_node* %parent.0884, i64 0, i32 0, i32 0, i32 2
  %bf.load13 = load i32* %code, align 8
  %bf.clear14 = and i32 %bf.load13, 255
  %cmp15 = icmp eq i32 %bf.clear14, 30
  br i1 %cmp15, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %inline_flag = getelementptr inbounds %union.tree_node* %parent.0884, i64 0, i32 0, i32 5
  %6 = bitcast i48* %inline_flag to i64*
  %bf.load17 = load i64* %6, align 8
  %7 = and i64 %bf.load17, 2304
  %8 = icmp eq i64 %7, 2304
  br i1 %8, label %if.then28, label %for.inc

if.then28:                                        ; preds = %land.lhs.true
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  store %union.tree_node* null, %union.tree_node** %initial, align 8, !tbaa !14
  %defer_output664.pre = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %.pre895 = bitcast i48* %defer_output664.pre to i64*
  br label %exit_rest_of_compilation

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %call = call %union.tree_node* @get_containing_scope(%union.tree_node* %parent.0884) #6
  %cmp12 = icmp eq %union.tree_node* %call, null
  br i1 %cmp12, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.then10
  %inline_flag32 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %9 = bitcast i48* %inline_flag32 to i64*
  %bf.load33 = load i64* %9, align 8
  %bf.cast36 = and i64 %bf.load33, 2048
  %10 = load i32* @flag_no_inline, align 4
  %notlhs = icmp ne i64 %bf.cast36, 0
  %notrhs = icmp eq i32 %10, 0
  %or.cond.not = and i1 %notrhs, %notlhs
  %11 = load i32* @flag_inline_functions, align 4
  %tobool40 = icmp ne i32 %11, 0
  %or.cond675 = or i1 %or.cond.not, %tobool40
  br i1 %or.cond675, label %if.then41, label %if.end75

if.then41:                                        ; preds = %for.end
  call void @timevar_push(i32 12) #6
  %call42 = call i8* @function_cannot_inline_p(%union.tree_node* %decl) #6
  call void @timevar_pop(i32 12) #6
  %tobool43 = icmp eq i8* %call42, null
  %12 = load i32* @optimize, align 4
  %tobool45 = icmp ne i32 %12, 0
  %or.cond676 = and i1 %tobool43, %tobool45
  br i1 %or.cond676, label %if.else, label %if.then46

if.then46:                                        ; preds = %if.then41
  %13 = load i32* @warn_inline, align 4, !tbaa !1
  %tobool47 = icmp eq i32 %13, 0
  br i1 %tobool47, label %if.end57, label %land.lhs.true48

land.lhs.true48:                                  ; preds = %if.then46
  %bf.load51 = load i64* %9, align 8
  %bf.cast54 = and i64 %bf.load51, 2048
  %tobool55 = icmp eq i64 %bf.cast54, 0
  br i1 %tobool55, label %if.end57, label %if.then56

if.then56:                                        ; preds = %land.lhs.true48
  call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %decl, i8* %call42) #6
  br label %if.end57

if.end57:                                         ; preds = %land.lhs.true48, %if.then46, %if.then56
  %abstract_origin = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 13
  store %union.tree_node* null, %union.tree_node** %abstract_origin, align 8, !tbaa !31
  %bf.load61 = load i64* %9, align 8
  %bf.cast64 = and i64 %bf.load61, 256
  %tobool65 = icmp eq i64 %bf.cast64, 0
  br i1 %tobool65, label %if.end75, label %if.then66

if.then66:                                        ; preds = %if.end57
  %initial68 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  store %union.tree_node* null, %union.tree_node** %initial68, align 8, !tbaa !14
  br label %exit_rest_of_compilation

if.else:                                          ; preds = %if.then41
  %bf.load72 = load i64* %9, align 8
  %bf.set = or i64 %bf.load72, 2048
  store i64 %bf.set, i64* %9, align 8
  br label %if.end75

if.end75:                                         ; preds = %if.end57, %if.else, %for.end
  %inlinable.0 = phi i32 [ 1, %if.else ], [ 0, %if.end57 ], [ 0, %for.end ]
  %call76 = call %struct.rtx_def* @get_insns() #6
  %call77 = call fastcc i32 @open_dump_file(i32 0, %union.tree_node* %decl)
  %tobool78 = icmp eq i32 %call77, 0
  br i1 %tobool78, label %if.end87, label %if.then79

if.then79:                                        ; preds = %if.end75
  %14 = load %struct.function** %f, align 8, !tbaa !8
  %tobool83 = icmp eq %struct.function* %14, null
  br i1 %tobool83, label %if.end86, label %if.then84

if.then84:                                        ; preds = %if.then79
  %15 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %16 = call i64 @fwrite(i8* getelementptr inbounds ([18 x i8]* @.str12, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %15)
  br label %if.end86

if.end86:                                         ; preds = %if.then79, %if.then84
  call fastcc void @close_dump_file(i32 0, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %call76)
  br label %if.end87

if.end87:                                         ; preds = %if.end75, %if.end86
  call void @convert_from_eh_region_ranges() #6
  %tobool88 = icmp eq i32 %inlinable.0, 0
  br i1 %tobool88, label %lor.lhs.false89, label %if.then129

lor.lhs.false89:                                  ; preds = %if.end87
  %bf.load92 = load i64* %9, align 8
  %bf.cast95 = and i64 %bf.load92, 2048
  %tobool96 = icmp eq i64 %bf.cast95, 0
  br i1 %tobool96, label %if.end134, label %land.lhs.true97

land.lhs.true97:                                  ; preds = %lor.lhs.false89
  %public_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load99 = load i32* %public_flag, align 8
  %17 = and i32 %bf.load99, 525312
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %land.lhs.true109, label %lor.lhs.false121

land.lhs.true109:                                 ; preds = %land.lhs.true97
  %assembler_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 14
  %19 = load %union.tree_node** %assembler_name, align 8, !tbaa !10
  %cmp111 = icmp eq %union.tree_node* %19, null
  br i1 %cmp111, label %cond.false, label %cond.end

cond.false:                                       ; preds = %land.lhs.true109
  %20 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !8
  call void %20(%union.tree_node* %decl) #6
  %.pre886 = load %union.tree_node** %assembler_name, align 8, !tbaa !10
  br label %cond.end

cond.end:                                         ; preds = %land.lhs.true109, %cond.false
  %21 = phi %union.tree_node* [ %19, %land.lhs.true109 ], [ %.pre886, %cond.false ]
  %static_flag = getelementptr inbounds %union.tree_node* %21, i64 0, i32 0, i32 0, i32 2
  %bf.load115 = load i32* %static_flag, align 8
  %bf.clear117 = and i32 %bf.load115, 262144
  %22 = load i32* @flag_keep_inline_functions, align 4
  %23 = or i32 %bf.clear117, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %if.then129, label %cond.end.lor.lhs.false121_crit_edge

cond.end.lor.lhs.false121_crit_edge:              ; preds = %cond.end
  %bf.load124.pre = load i64* %9, align 8
  br label %lor.lhs.false121

lor.lhs.false121:                                 ; preds = %cond.end.lor.lhs.false121_crit_edge, %land.lhs.true97
  %bf.load124 = phi i64 [ %bf.load124.pre, %cond.end.lor.lhs.false121_crit_edge ], [ %bf.load92, %land.lhs.true97 ]
  %bf.cast127 = and i64 %bf.load124, 256
  %tobool128 = icmp eq i64 %bf.cast127, 0
  br i1 %tobool128, label %if.end134, label %if.then129

if.then129:                                       ; preds = %lor.lhs.false121, %cond.end, %if.end87
  %bf.load131 = load i64* %9, align 8
  %bf.set133 = or i64 %bf.load131, 262144
  store i64 %bf.set133, i64* %9, align 8
  br label %if.end134

if.end134:                                        ; preds = %lor.lhs.false121, %lor.lhs.false89, %if.then129
  %bf.load137 = phi i64 [ %bf.load124, %lor.lhs.false121 ], [ %bf.load92, %lor.lhs.false89 ], [ %bf.set133, %if.then129 ]
  %bf.cast140 = and i64 %bf.load137, 2048
  %tobool141 = icmp eq i64 %bf.cast140, 0
  br i1 %tobool141, label %if.end143, label %if.then142

if.then142:                                       ; preds = %if.end134
  %25 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !8
  %deferred_inline_function = getelementptr inbounds %struct.gcc_debug_hooks* %25, i64 0, i32 17
  %26 = load void (%union.tree_node*)** %deferred_inline_function, align 8, !tbaa !32
  call void %26(%union.tree_node* %decl) #6
  %bf.load146.pre = load i64* %9, align 8
  br label %if.end143

if.end143:                                        ; preds = %if.end134, %if.then142
  %bf.load146 = phi i64 [ %bf.load137, %if.end134 ], [ %bf.load146.pre, %if.then142 ]
  %bf.cast149 = and i64 %bf.load146, 262144
  %tobool150 = icmp eq i64 %bf.cast149, 0
  br i1 %tobool150, label %if.end169, label %if.then151

if.then151:                                       ; preds = %if.end143
  %27 = load i32* @warn_return_type, align 4, !tbaa !1
  %tobool152 = icmp eq i32 %27, 0
  br i1 %tobool152, label %if.end156, label %if.then153

if.then153:                                       ; preds = %if.then151
  %28 = load i32* @optimize, align 4, !tbaa !1
  store i32 0, i32* @optimize, align 4, !tbaa !1
  call void @rebuild_jump_labels(%struct.rtx_def* %call76) #6
  call void @find_exception_handler_labels() #6
  %call154 = call i32 @max_reg_num() #6
  %29 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %call76, i32 %call154, %struct._IO_FILE* %29) #6
  %call155 = call zeroext i1 @cleanup_cfg(i32 24) #6
  store i32 %28, i32* @optimize, align 4, !tbaa !1
  call void @free_bb_for_insn() #6
  br label %if.end156

if.end156:                                        ; preds = %if.then151, %if.then153
  %call157 = call zeroext i1 @nothrow_function_p() #6
  %conv = zext i1 %call157 to i32
  store i32 %conv, i32* @current_function_nothrow, align 4, !tbaa !1
  br i1 %call157, label %if.then159, label %if.end164

if.then159:                                       ; preds = %if.end156
  %30 = load %union.tree_node** @current_function_decl, align 8, !tbaa !8
  %nothrow_flag = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 0, i32 2
  %bf.load161 = load i32* %nothrow_flag, align 8
  %bf.set163 = or i32 %bf.load161, 131072
  store i32 %bf.set163, i32* %nothrow_flag, align 8
  br label %if.end164

if.end164:                                        ; preds = %if.then159, %if.end156
  call void @timevar_push(i32 12) #6
  call void @save_for_inline(%union.tree_node* %decl) #6
  call void @timevar_pop(i32 12) #6
  %31 = load %struct.function** %f, align 8, !tbaa !8
  %inlinable168 = getelementptr inbounds %struct.function* %31, i64 0, i32 44
  store i32 %inlinable.0, i32* %inlinable168, align 4, !tbaa !33
  br label %exit_rest_of_compilation

if.end169:                                        ; preds = %if.end143
  %bf.cast175 = and i64 %bf.load146, 256
  %tobool176 = icmp eq i64 %bf.cast175, 0
  br i1 %tobool176, label %if.end179, label %exit_rest_of_compilation

if.end179:                                        ; preds = %if.end169, %if.end8
  %32 = load %union.tree_node** @current_function_decl, align 8, !tbaa !8
  %context182 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 9
  %33 = load %union.tree_node** %context182, align 8, !tbaa !30
  %cmp184881 = icmp eq %union.tree_node* %33, null
  br i1 %cmp184881, label %for.end211, label %for.body186

for.body186:                                      ; preds = %if.end179, %for.inc209
  %parent180.0882 = phi %union.tree_node* [ %call210, %for.inc209 ], [ %33, %if.end179 ]
  %code188 = getelementptr inbounds %union.tree_node* %parent180.0882, i64 0, i32 0, i32 0, i32 2
  %bf.load189 = load i32* %code188, align 8
  %bf.clear190 = and i32 %bf.load189, 255
  %cmp191 = icmp eq i32 %bf.clear190, 30
  br i1 %cmp191, label %if.then193, label %for.inc209

if.then193:                                       ; preds = %for.body186
  %assembler_name195 = getelementptr inbounds %union.tree_node* %parent180.0882, i64 0, i32 0, i32 14
  %34 = load %union.tree_node** %assembler_name195, align 8, !tbaa !10
  %cmp196 = icmp eq %union.tree_node* %34, null
  br i1 %cmp196, label %cond.false199, label %cond.end200

cond.false199:                                    ; preds = %if.then193
  %35 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !8
  call void %35(%union.tree_node* %parent180.0882) #6
  %.pre894 = load %union.tree_node** %assembler_name195, align 8, !tbaa !10
  br label %cond.end200

cond.end200:                                      ; preds = %if.then193, %cond.false199
  %36 = phi %union.tree_node* [ %34, %if.then193 ], [ %.pre894, %cond.false199 ]
  %static_flag204 = getelementptr inbounds %union.tree_node* %36, i64 0, i32 0, i32 0, i32 2
  %bf.load205 = load i32* %static_flag204, align 8
  %bf.set207 = or i32 %bf.load205, 262144
  store i32 %bf.set207, i32* %static_flag204, align 8
  br label %for.inc209

for.inc209:                                       ; preds = %for.body186, %cond.end200
  %call210 = call %union.tree_node* @get_containing_scope(%union.tree_node* %parent180.0882) #6
  %cmp184 = icmp eq %union.tree_node* %call210, null
  br i1 %cmp184, label %for.end211, label %for.body186

for.end211:                                       ; preds = %for.inc209, %if.end179
  %inline_flag213 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %37 = bitcast i48* %inline_flag213 to i64*
  %bf.load214 = load i64* %37, align 8
  %bf.cast217 = and i64 %bf.load214, 2048
  %tobool218 = icmp eq i64 %bf.cast217, 0
  br i1 %tobool218, label %if.end220, label %if.then219

if.then219:                                       ; preds = %for.end211
  %38 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !8
  %outlining_inline_function = getelementptr inbounds %struct.gcc_debug_hooks* %38, i64 0, i32 18
  %39 = load void (%union.tree_node*)** %outlining_inline_function, align 8, !tbaa !36
  call void %39(%union.tree_node* %decl) #6
  br label %if.end220

if.end220:                                        ; preds = %for.end211, %if.then219
  call void @remove_unnecessary_notes() #6
  call void @reorder_blocks() #6
  call void @ggc_collect() #6
  call void @init_function_for_compilation() #6
  %bf.load223 = load i64* %37, align 8
  %bf.cast226 = and i64 %bf.load223, 262144
  %tobool227 = icmp eq i64 %bf.cast226, 0
  br i1 %tobool227, label %if.then228, label %if.end233

if.then228:                                       ; preds = %if.end220
  %asm_written_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load230 = load i32* %asm_written_flag, align 8
  %bf.set232 = or i32 %bf.load230, 16384
  store i32 %bf.set232, i32* %asm_written_flag, align 8
  br label %if.end233

if.end233:                                        ; preds = %if.end220, %if.then228
  store i32 0, i32* @rtx_equal_function_value_matters, align 4, !tbaa !1
  %call234 = call %struct.rtx_def* @get_insns() #6
  call void @purge_hard_subreg_sets(%struct.rtx_def* %call234) #6
  %40 = load i32* @rtl_dump_and_exit, align 4, !tbaa !1
  %41 = load i32* @flag_syntax_only, align 4
  %42 = or i32 %41, %40
  %or.cond678.not = icmp eq i32 %42, 0
  %43 = load i32* @warn_return_type, align 4
  %tobool239 = icmp ne i32 %43, 0
  %or.cond679 = or i1 %or.cond678.not, %tobool239
  br i1 %or.cond679, label %lor.lhs.false240, label %exit_rest_of_compilation

lor.lhs.false240:                                 ; preds = %if.end233
  %44 = load %struct.diagnostic_context** @global_dc, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds %struct.diagnostic_context* %44, i64 0, i32 0, i32 0, i32 9, i64 3
  %45 = load i32* %arrayidx, align 4, !tbaa !1
  %tobool241 = icmp eq i32 %45, 0
  br i1 %tobool241, label %lor.lhs.false242, label %exit_rest_of_compilation

lor.lhs.false242:                                 ; preds = %lor.lhs.false240
  %arrayidx245 = getelementptr inbounds %struct.diagnostic_context* %44, i64 0, i32 0, i32 0, i32 9, i64 2
  %46 = load i32* %arrayidx245, align 4, !tbaa !1
  %tobool246 = icmp eq i32 %46, 0
  br i1 %tobool246, label %if.end248, label %exit_rest_of_compilation

if.end248:                                        ; preds = %lor.lhs.false242
  %47 = load i32* @flag_optimize_sibling_calls, align 4, !tbaa !1
  %tobool249 = icmp eq i32 %47, 0
  br i1 %tobool249, label %if.end253, label %if.then250

if.then250:                                       ; preds = %if.end248
  call void @timevar_push(i32 13) #6
  %call251 = call fastcc i32 @open_dump_file(i32 1, %union.tree_node* %decl)
  call void @optimize_sibling_and_tail_recursive_calls() #6
  %call252 = call %struct.rtx_def* @get_insns() #6
  call fastcc void @close_dump_file(i32 1, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %call252)
  call void @timevar_pop(i32 13) #6
  br label %if.end253

if.end253:                                        ; preds = %if.end248, %if.then250
  call void @find_exception_handler_labels() #6
  %call254 = call i32 @doing_eh(i32 0) #6
  %tobool255 = icmp eq i32 %call254, 0
  br i1 %tobool255, label %if.end259, label %if.then256

if.then256:                                       ; preds = %if.end253
  call void @timevar_push(i32 13) #6
  %call257 = call fastcc i32 @open_dump_file(i32 2, %union.tree_node* %decl)
  call void @finish_eh_generation() #6
  %call258 = call %struct.rtx_def* @get_insns() #6
  call fastcc void @close_dump_file(i32 2, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %call258)
  call void @timevar_pop(i32 13) #6
  br label %if.end259

if.end259:                                        ; preds = %if.end253, %if.then256
  call void @emit_initial_value_sets() #6
  %48 = load i32* @flag_pic, align 4, !tbaa !1
  %tobool260 = icmp eq i32 %48, 0
  br i1 %tobool260, label %if.end271, label %if.then261

if.then261:                                       ; preds = %if.end259
  %49 = load %struct.function** @cfun, align 8, !tbaa !8
  %profile = getelementptr inbounds %struct.function* %49, i64 0, i32 56
  %50 = bitcast i24* %profile to i32*
  %bf.load262 = load i32* %50, align 8
  %51 = shl i32 %bf.load262, 7
  %52 = and i32 %51, 2097152
  %bf.set270 = or i32 %52, %bf.load262
  store i32 %bf.set270, i32* %50, align 8
  br label %if.end271

if.end271:                                        ; preds = %if.end259, %if.then261
  %call272 = call %struct.rtx_def* @get_insns() #6
  %53 = load %union.tree_node** @current_function_decl, align 8, !tbaa !8
  call void @unshare_all_rtl(%union.tree_node* %53, %struct.rtx_def* %call272) #6
  %54 = load %union.tree_node** @current_function_decl, align 8, !tbaa !8
  call void @instantiate_virtual_regs(%union.tree_node* %54, %struct.rtx_def* %call272) #6
  %call273 = call fastcc i32 @open_dump_file(i32 3, %union.tree_node* %decl)
  call void @timevar_push(i32 13) #6
  call void @expected_value_to_br_prob() #6
  %call274 = call i32 @max_reg_num() #6
  call void @reg_scan(%struct.rtx_def* %call272, i32 %call274, i32 0) #6
  call void @rebuild_jump_labels(%struct.rtx_def* %call272) #6
  %call275 = call i32 @max_reg_num() #6
  %55 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %call272, i32 %call275, %struct._IO_FILE* %55) #6
  %56 = load i32* @optimize, align 4, !tbaa !1
  %tobool276 = icmp ne i32 %56, 0
  %cond = zext i1 %tobool276 to i32
  %or277 = or i32 %cond, 16
  %call278 = call zeroext i1 @cleanup_cfg(i32 %or277) #6
  call void @free_bb_for_insn() #6
  call void @copy_loop_headers(%struct.rtx_def* %call272) #6
  call void @purge_line_number_notes(%struct.rtx_def* %call272) #6
  call void @timevar_pop(i32 13) #6
  %57 = load i32* @rtl_dump_and_exit, align 4, !tbaa !1
  %58 = load i32* @flag_syntax_only, align 4
  %59 = or i32 %58, %57
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %lor.lhs.false282, label %if.then290

lor.lhs.false282:                                 ; preds = %if.end271
  %bf.load285 = load i64* %37, align 8
  %bf.cast288 = and i64 %bf.load285, 262144
  %tobool289 = icmp eq i64 %bf.cast288, 0
  br i1 %tobool289, label %if.end291, label %if.then290

if.then290:                                       ; preds = %lor.lhs.false282, %if.end271
  call fastcc void @close_dump_file(i32 3, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %call272)
  br label %exit_rest_of_compilation

if.end291:                                        ; preds = %lor.lhs.false282
  %61 = load i32* @optimize, align 4, !tbaa !1
  %cmp292 = icmp sgt i32 %61, 0
  %62 = load i32* @flag_ssa, align 4
  %tobool295 = icmp ne i32 %62, 0
  %or.cond681 = and i1 %cmp292, %tobool295
  br i1 %or.cond681, label %if.then296, label %if.end312

if.then296:                                       ; preds = %if.end291
  call void @timevar_push(i32 38) #6
  %call297 = call fastcc i32 @open_dump_file(i32 4, %union.tree_node* %decl)
  %call298 = call i32 @max_reg_num() #6
  %63 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %call272, i32 %call298, %struct._IO_FILE* %63) #6
  %call299 = call zeroext i1 @cleanup_cfg(i32 17) #6
  call void @convert_to_ssa() #6
  call fastcc void @close_dump_file(i32 4, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %call272)
  call void @timevar_pop(i32 38) #6
  %64 = load i32* @flag_ssa_ccp, align 4, !tbaa !1
  %tobool300 = icmp eq i32 %64, 0
  br i1 %tobool300, label %if.end304, label %if.then301

if.then301:                                       ; preds = %if.then296
  call void @timevar_push(i32 39) #6
  %call302 = call fastcc i32 @open_dump_file(i32 5, %union.tree_node* %decl)
  call void @ssa_const_prop() #6
  %call303 = call %struct.rtx_def* @get_insns() #6
  call fastcc void @close_dump_file(i32 5, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %call303)
  call void @timevar_pop(i32 39) #6
  br label %if.end304

if.end304:                                        ; preds = %if.then296, %if.then301
  %65 = load i32* @flag_ssa_dce, align 4, !tbaa !1
  %tobool305 = icmp eq i32 %65, 0
  br i1 %tobool305, label %if.end309, label %if.then306

if.then306:                                       ; preds = %if.end304
  call void @timevar_push(i32 40) #6
  %call307 = call fastcc i32 @open_dump_file(i32 6, %union.tree_node* %decl)
  %call308 = call %struct.rtx_def* @get_insns() #6
  call void @ssa_eliminate_dead_code() #6
  call fastcc void @close_dump_file(i32 6, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %call308)
  call void @timevar_pop(i32 40) #6
  br label %if.end309

if.end309:                                        ; preds = %if.end304, %if.then306
  %insns.0 = phi %struct.rtx_def* [ %call308, %if.then306 ], [ %call272, %if.end304 ]
  call void @timevar_push(i32 41) #6
  %call310 = call fastcc i32 @open_dump_file(i32 7, %union.tree_node* %decl)
  call void @convert_from_ssa() #6
  %call311 = call i32 @max_reg_num() #6
  call void @reg_scan(%struct.rtx_def* %insns.0, i32 %call311, i32 1) #6
  call fastcc void @close_dump_file(i32 7, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.0)
  call void @timevar_pop(i32 41) #6
  call void @ggc_collect() #6
  call void @free_bb_for_insn() #6
  br label %if.end312

if.end312:                                        ; preds = %if.end309, %if.end291
  %insns.1 = phi %struct.rtx_def* [ %insns.0, %if.end309 ], [ %call272, %if.end291 ]
  call void @timevar_push(i32 13) #6
  %66 = load i32* @optimize, align 4, !tbaa !1
  %cmp313 = icmp sgt i32 %66, 0
  br i1 %cmp313, label %if.then315, label %if.end324

if.then315:                                       ; preds = %if.end312
  %call316 = call i32 @max_reg_num() #6
  %67 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %insns.1, i32 %call316, %struct._IO_FILE* %67) #6
  %68 = load i32* @flag_thread_jumps, align 4, !tbaa !1
  %tobool317 = icmp ne i32 %68, 0
  %or319 = select i1 %tobool317, i32 81, i32 17
  %call320 = call zeroext i1 @cleanup_cfg(i32 %or319) #6
  call void @timevar_push(i32 21) #6
  call void @if_convert(i32 0) #6
  call void @timevar_pop(i32 21) #6
  call void @free_bb_for_insn() #6
  %69 = load i32* @flag_delete_null_pointer_checks, align 4, !tbaa !1
  %tobool321 = icmp eq i32 %69, 0
  br i1 %tobool321, label %if.end324, label %if.then322

if.then322:                                       ; preds = %if.then315
  call void @delete_null_pointer_checks(%struct.rtx_def* %insns.1) #6
  br label %if.end324

if.end324:                                        ; preds = %if.then315, %if.then322, %if.end312
  %70 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @renumber_insns(%struct._IO_FILE* %70) #6
  call void @timevar_pop(i32 13) #6
  call fastcc void @close_dump_file(i32 3, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %insns.1)
  call void @ggc_collect() #6
  %71 = load i32* @optimize, align 4, !tbaa !1
  %cmp325 = icmp sgt i32 %71, 0
  br i1 %cmp325, label %if.then327, label %if.end358

if.then327:                                       ; preds = %if.end324
  %call328 = call fastcc i32 @open_dump_file(i32 8, %union.tree_node* %decl)
  call void @timevar_push(i32 14) #6
  %call329 = call i32 @max_reg_num() #6
  call void @reg_scan(%struct.rtx_def* %insns.1, i32 %call329, i32 1) #6
  %call330 = call i32 @max_reg_num() #6
  %72 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call331 = call i32 @cse_main(%struct.rtx_def* %insns.1, i32 %call330, i32 0, %struct._IO_FILE* %72) #6
  %73 = load i32* @flag_rerun_cse_after_loop, align 4, !tbaa !1
  %tobool332 = icmp eq i32 %73, 0
  br i1 %tobool332, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then327
  %74 = load i32* @flag_gcse, align 4, !tbaa !1
  %lnot334 = icmp eq i32 %74, 0
  br label %land.end

land.end:                                         ; preds = %if.then327, %land.rhs
  %75 = phi i1 [ false, %if.then327 ], [ %lnot334, %land.rhs ]
  %land.ext = zext i1 %75 to i32
  store i32 %land.ext, i32* @cse_not_expected, align 4, !tbaa !1
  %tobool336 = icmp ne i32 %call331, 0
  %76 = load i32* @optimize, align 4
  %cmp338 = icmp sgt i32 %76, 1
  %or.cond682 = or i1 %tobool336, %cmp338
  br i1 %or.cond682, label %if.then340, label %if.end343

if.then340:                                       ; preds = %land.end
  call void @timevar_push(i32 13) #6
  call void @rebuild_jump_labels(%struct.rtx_def* %insns.1) #6
  %call341 = call i32 @max_reg_num() #6
  %77 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %insns.1, i32 %call341, %struct._IO_FILE* %77) #6
  %call342 = call zeroext i1 @cleanup_cfg(i32 17) #6
  call void @timevar_pop(i32 13) #6
  call void @free_bb_for_insn() #6
  br label %if.end343

if.end343:                                        ; preds = %land.end, %if.then340
  %call344 = call i32 @max_reg_num() #6
  call void @delete_trivially_dead_insns(%struct.rtx_def* %insns.1, i32 %call344, i32 0) #6
  %78 = load i32* @flag_delete_null_pointer_checks, align 4, !tbaa !1
  %79 = load i32* @flag_thread_jumps, align 4
  %80 = or i32 %79, %78
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %if.end357, label %if.then348

if.then348:                                       ; preds = %if.end343
  call void @timevar_push(i32 13) #6
  %call349 = call i32 @max_reg_num() #6
  %82 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %insns.1, i32 %call349, %struct._IO_FILE* %82) #6
  %83 = load i32* @flag_thread_jumps, align 4, !tbaa !1
  %tobool350 = icmp ne i32 %83, 0
  %or352 = select i1 %tobool350, i32 81, i32 17
  %call353 = call zeroext i1 @cleanup_cfg(i32 %or352) #6
  %84 = load i32* @flag_delete_null_pointer_checks, align 4, !tbaa !1
  %tobool354 = icmp eq i32 %84, 0
  br i1 %tobool354, label %if.end356, label %if.then355

if.then355:                                       ; preds = %if.then348
  call void @delete_null_pointer_checks(%struct.rtx_def* %insns.1) #6
  br label %if.end356

if.end356:                                        ; preds = %if.then348, %if.then355
  call void @free_bb_for_insn() #6
  call void @timevar_pop(i32 13) #6
  br label %if.end357

if.end357:                                        ; preds = %if.end343, %if.end356
  %85 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @renumber_insns(%struct._IO_FILE* %85) #6
  call void @timevar_pop(i32 14) #6
  call fastcc void @close_dump_file(i32 8, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %insns.1)
  br label %if.end358

if.end358:                                        ; preds = %if.end357, %if.end324
  %call359 = call fastcc i32 @open_dump_file(i32 9, %union.tree_node* %decl)
  call void @purge_addressof(%struct.rtx_def* %insns.1) #6
  %call360 = call i32 @max_reg_num() #6
  call void @reg_scan(%struct.rtx_def* %insns.1, i32 %call360, i32 1) #6
  call fastcc void @close_dump_file(i32 9, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %insns.1)
  call void @ggc_collect() #6
  %86 = load i32* @optimize, align 4, !tbaa !1
  %cmp361 = icmp sgt i32 %86, 0
  %87 = load i32* @flag_gcse, align 4
  %tobool364 = icmp ne i32 %87, 0
  %or.cond684 = and i1 %cmp361, %tobool364
  br i1 %or.cond684, label %if.then365, label %if.end390

if.then365:                                       ; preds = %if.end358
  call void @timevar_push(i32 15) #6
  %call366 = call fastcc i32 @open_dump_file(i32 10, %union.tree_node* %decl)
  %call367 = call i32 @max_reg_num() #6
  %88 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %insns.1, i32 %call367, %struct._IO_FILE* %88) #6
  %call368 = call zeroext i1 @cleanup_cfg(i32 17) #6
  %89 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call369 = call i32 @gcse_main(%struct.rtx_def* %insns.1, %struct._IO_FILE* %89) #6
  call void @rebuild_jump_labels(%struct.rtx_def* %insns.1) #6
  %90 = load i32* @flag_cse_skip_blocks, align 4, !tbaa !1
  %91 = load i32* @flag_cse_follow_jumps, align 4, !tbaa !1
  store i32 0, i32* @flag_cse_follow_jumps, align 4, !tbaa !1
  store i32 0, i32* @flag_cse_skip_blocks, align 4, !tbaa !1
  call void @free_bb_for_insn() #6
  %92 = load i32* @flag_expensive_optimizations, align 4, !tbaa !1
  %tobool370 = icmp eq i32 %92, 0
  br i1 %tobool370, label %while.cond.preheader, label %if.then371

if.then371:                                       ; preds = %if.then365
  call void @timevar_push(i32 14) #6
  %call372 = call i32 @max_reg_num() #6
  call void @reg_scan(%struct.rtx_def* %insns.1, i32 %call372, i32 1) #6
  %call373 = call i32 @max_reg_num() #6
  %93 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call374 = call i32 @cse_main(%struct.rtx_def* %insns.1, i32 %call373, i32 0, %struct._IO_FILE* %93) #6
  call void @timevar_pop(i32 14) #6
  %94 = load i32* @flag_rerun_cse_after_loop, align 4, !tbaa !1
  %lnot376 = icmp eq i32 %94, 0
  %lnot.ext377 = zext i1 %lnot376 to i32
  store i32 %lnot.ext377, i32* @cse_not_expected, align 4, !tbaa !1
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then371, %if.then365
  %tem2.0.ph = phi i32 [ 0, %if.then365 ], [ %call374, %if.then371 ]
  %95 = or i32 %call369, %tem2.0.ph
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.cond.backedge
  call void @timevar_push(i32 13) #6
  call void @rebuild_jump_labels(%struct.rtx_def* %insns.1) #6
  %call381 = call i32 @max_reg_num() #6
  call void @delete_trivially_dead_insns(%struct.rtx_def* %insns.1, i32 %call381, i32 0) #6
  %call382 = call i32 @max_reg_num() #6
  %97 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %insns.1, i32 %call382, %struct._IO_FILE* %97) #6
  %call383 = call zeroext i1 @cleanup_cfg(i32 17) #6
  call void @free_bb_for_insn() #6
  call void @timevar_pop(i32 13) #6
  %98 = load i32* @flag_expensive_optimizations, align 4, !tbaa !1
  %tobool384 = icmp eq i32 %98, 0
  br i1 %tobool384, label %while.end, label %while.cond.backedge

while.cond.backedge:                              ; preds = %while.body
  call void @timevar_push(i32 14) #6
  %call386 = call i32 @max_reg_num() #6
  call void @reg_scan(%struct.rtx_def* %insns.1, i32 %call386, i32 1) #6
  %call387 = call i32 @max_reg_num() #6
  %99 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call388 = call i32 @cse_main(%struct.rtx_def* %insns.1, i32 %call387, i32 0, %struct._IO_FILE* %99) #6
  call void @timevar_pop(i32 14) #6
  %phitmp = icmp eq i32 %call388, 0
  br i1 %phitmp, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %while.cond.backedge, %while.cond.preheader
  call fastcc void @close_dump_file(i32 10, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %insns.1)
  call void @timevar_pop(i32 15) #6
  call void @ggc_collect() #6
  store i32 %90, i32* @flag_cse_skip_blocks, align 4, !tbaa !1
  store i32 %91, i32* @flag_cse_follow_jumps, align 4, !tbaa !1
  %.pr = load i32* @optimize, align 4, !tbaa !1
  br label %if.end390

if.end390:                                        ; preds = %while.end, %if.end358
  %100 = phi i32 [ %.pr, %while.end ], [ %86, %if.end358 ]
  %cmp391 = icmp sgt i32 %100, 0
  br i1 %cmp391, label %if.then393, label %if.end426

if.then393:                                       ; preds = %if.end390
  call void @timevar_push(i32 16) #6
  %call394 = call fastcc i32 @open_dump_file(i32 11, %union.tree_node* %decl)
  call void @free_bb_for_insn() #6
  %101 = load i32* @flag_rerun_loop_opt, align 4, !tbaa !1
  %tobool395 = icmp eq i32 %101, 0
  br i1 %tobool395, label %if.end406, label %if.then396

if.then396:                                       ; preds = %if.then393
  call void @cleanup_barriers() #6
  %102 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @loop_optimize(%struct.rtx_def* %insns.1, %struct._IO_FILE* %102, i32 8) #6
  %call397 = call i32 @max_reg_num() #6
  call void @delete_trivially_dead_insns(%struct.rtx_def* %insns.1, i32 %call397, i32 0) #6
  %call398 = call i32 @max_reg_num() #6
  call void @reg_scan(%struct.rtx_def* %insns.1, i32 %call398, i32 1) #6
  br label %if.end406

if.end406:                                        ; preds = %if.then396, %if.then393
  call void @cleanup_barriers() #6
  %103 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %104 = load i32* @flag_unroll_loops, align 4, !tbaa !1
  %tobool400 = icmp ne i32 %104, 0
  %cond401 = zext i1 %tobool400 to i32
  %105 = load i32* @flag_prefetch_loop_arrays, align 4, !tbaa !1
  %tobool403 = icmp ne i32 %105, 0
  %cond404 = select i1 %tobool403, i32 4, i32 0
  %or402 = or i32 %cond401, %cond404
  %or405 = or i32 %or402, 2
  call void @loop_optimize(%struct.rtx_def* %insns.1, %struct._IO_FILE* %103, i32 %or405) #6
  call fastcc void @close_dump_file(i32 11, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %insns.1)
  call void @timevar_pop(i32 16) #6
  call void @ggc_collect() #6
  %.pre890 = load i32* @optimize, align 4, !tbaa !1
  %cmp407 = icmp sgt i32 %.pre890, 0
  br i1 %cmp407, label %if.then409, label %if.end426

if.then409:                                       ; preds = %if.end406
  call void @timevar_push(i32 17) #6
  %call410 = call fastcc i32 @open_dump_file(i32 12, %union.tree_node* %decl)
  %106 = load i32* @flag_rerun_cse_after_loop, align 4, !tbaa !1
  %tobool411 = icmp eq i32 %106, 0
  br i1 %tobool411, label %if.end425, label %if.then412

if.then412:                                       ; preds = %if.then409
  call void @timevar_push(i32 13) #6
  %call413 = call i32 @max_reg_num() #6
  call void @delete_trivially_dead_insns(%struct.rtx_def* %insns.1, i32 %call413, i32 0) #6
  %call414 = call i32 @max_reg_num() #6
  call void @reg_scan(%struct.rtx_def* %insns.1, i32 %call414, i32 0) #6
  call void @timevar_push(i32 21) #6
  %call415 = call i32 @max_reg_num() #6
  %107 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %insns.1, i32 %call415, %struct._IO_FILE* %107) #6
  %call416 = call zeroext i1 @cleanup_cfg(i32 1) #6
  call void @if_convert(i32 0) #6
  call void @timevar_pop(i32 21) #6
  call void @timevar_pop(i32 13) #6
  call void @free_bb_for_insn() #6
  %call417 = call i32 @max_reg_num() #6
  call void @reg_scan(%struct.rtx_def* %insns.1, i32 %call417, i32 0) #6
  %call418 = call i32 @max_reg_num() #6
  %108 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call419 = call i32 @cse_main(%struct.rtx_def* %insns.1, i32 %call418, i32 1, %struct._IO_FILE* %108) #6
  %tobool420 = icmp eq i32 %call419, 0
  br i1 %tobool420, label %if.end425, label %if.then421

if.then421:                                       ; preds = %if.then412
  call void @timevar_push(i32 13) #6
  call void @rebuild_jump_labels(%struct.rtx_def* %insns.1) #6
  %call422 = call i32 @max_reg_num() #6
  %109 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %insns.1, i32 %call422, %struct._IO_FILE* %109) #6
  %call423 = call zeroext i1 @cleanup_cfg(i32 1) #6
  call void @free_bb_for_insn() #6
  call void @timevar_pop(i32 13) #6
  br label %if.end425

if.end425:                                        ; preds = %if.then412, %if.then409, %if.then421
  call fastcc void @close_dump_file(i32 12, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl, %struct.rtx_def* %insns.1)
  call void @timevar_pop(i32 17) #6
  call void @ggc_collect() #6
  br label %if.end426

if.end426:                                        ; preds = %if.end390, %if.end425, %if.end406
  store i32 1, i32* @cse_not_expected, align 4, !tbaa !1
  call void @regclass_init() #6
  call void @timevar_push(i32 19) #6
  %call427 = call fastcc i32 @open_dump_file(i32 13, %union.tree_node* %decl)
  %call428 = call i32 @max_reg_num() #6
  %110 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @find_basic_blocks(%struct.rtx_def* %insns.1, i32 %call428, %struct._IO_FILE* %110) #6
  %111 = load i32* @optimize, align 4, !tbaa !1
  %tobool429 = icmp ne i32 %111, 0
  %cond430 = zext i1 %tobool429 to i32
  %112 = load i32* @flag_thread_jumps, align 4, !tbaa !1
  %tobool431 = icmp ne i32 %112, 0
  %cond432 = select i1 %tobool431, i32 64, i32 0
  %or433 = or i32 %cond432, %cond430
  %call434 = call zeroext i1 @cleanup_cfg(i32 %or433) #6
  call void @check_function_return_warnings() #6
  call void @mark_constant_function() #6
  call fastcc void @close_dump_file(i32 13, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.1)
  %113 = load i32* @profile_arc_flag, align 4, !tbaa !1
  %114 = load i32* @flag_test_coverage, align 4
  %115 = or i32 %114, %113
  %116 = load i32* @flag_branch_probabilities, align 4
  %117 = or i32 %115, %116
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %if.end442, label %if.then440

if.then440:                                       ; preds = %if.end426
  call void @timevar_push(i32 18) #6
  %call441 = call fastcc i32 @open_dump_file(i32 14, %union.tree_node* %decl)
  call void @branch_prob() #6
  call fastcc void @close_dump_file(i32 14, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.1)
  call void @timevar_pop(i32 18) #6
  br label %if.end442

if.end442:                                        ; preds = %if.end426, %if.then440
  %call443 = call fastcc i32 @open_dump_file(i32 15, %union.tree_node* %decl)
  %119 = load i32* @optimize, align 4, !tbaa !1
  %tobool444 = icmp eq i32 %119, 0
  br i1 %tobool444, label %if.end453, label %if.then445

if.then445:                                       ; preds = %if.end442
  %120 = bitcast %struct.loops* %loops to i8*
  call void @llvm.lifetime.start(i64 56, i8* %120) #6
  %call446 = call i32 @flow_loops_find(%struct.loops* %loops, i32 1) #6
  %121 = load i32* @flag_guess_branch_prob, align 4, !tbaa !1
  %tobool447 = icmp eq i32 %121, 0
  br i1 %tobool447, label %if.end449, label %if.then448

if.then448:                                       ; preds = %if.then445
  call void @estimate_probability(%struct.loops* %loops) #6
  br label %if.end449

if.end449:                                        ; preds = %if.then445, %if.then448
  %122 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %tobool450 = icmp eq %struct._IO_FILE* %122, null
  br i1 %tobool450, label %if.end452, label %if.then451

if.then451:                                       ; preds = %if.end449
  call void @flow_loops_dump(%struct.loops* %loops, %struct._IO_FILE* %122, void (%struct.loop*, %struct._IO_FILE*, i32)* null, i32 0) #6
  br label %if.end452

if.end452:                                        ; preds = %if.end449, %if.then451
  call void @flow_loops_free(%struct.loops* %loops) #6
  call void @llvm.lifetime.end(i64 56, i8* %120) #6
  br label %if.end453

if.end453:                                        ; preds = %if.end442, %if.end452
  %123 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @life_analysis(%struct.rtx_def* %insns.1, %struct._IO_FILE* %123, i32 127) #6
  call void @timevar_pop(i32 19) #6
  store i32 1, i32* @no_new_pseudos, align 4, !tbaa !1
  %124 = load i32* @warn_uninitialized, align 4, !tbaa !1
  %125 = load i32* @extra_warnings, align 4
  %126 = or i32 %125, %124
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %if.end463, label %if.then457

if.then457:                                       ; preds = %if.end453
  %initial459 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %128 = load %union.tree_node** %initial459, align 8, !tbaa !14
  call void @uninitialized_vars_warning(%union.tree_node* %128) #6
  %129 = load i32* @extra_warnings, align 4, !tbaa !1
  %tobool460 = icmp eq i32 %129, 0
  br i1 %tobool460, label %if.end463, label %if.then461

if.then461:                                       ; preds = %if.then457
  call void @setjmp_args_warning() #6
  br label %if.end463

if.end463:                                        ; preds = %if.then457, %if.end453, %if.then461
  %130 = load i32* @optimize, align 4, !tbaa !1
  %tobool464 = icmp eq i32 %130, 0
  br i1 %tobool464, label %if.end471, label %if.then465

if.then465:                                       ; preds = %if.end463
  %call466 = call i32 @initialize_uninitialized_subregs() #6
  %tobool467 = icmp eq i32 %call466, 0
  br i1 %tobool467, label %if.end471, label %if.then468

if.then468:                                       ; preds = %if.then465
  %call469 = call %struct.rtx_def* @get_insns() #6
  %131 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @life_analysis(%struct.rtx_def* %call469, %struct._IO_FILE* %131, i32 7) #6
  br label %if.end471

if.end471:                                        ; preds = %if.then465, %if.end463, %if.then468
  %insns.2 = phi %struct.rtx_def* [ %call469, %if.then468 ], [ %insns.1, %if.then465 ], [ %insns.1, %if.end463 ]
  call fastcc void @close_dump_file(i32 15, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @ggc_collect() #6
  %132 = load i32* @optimize, align 4, !tbaa !1
  %cmp472 = icmp sgt i32 %132, 0
  br i1 %cmp472, label %if.then474, label %if.end500

if.then474:                                       ; preds = %if.end471
  call void @timevar_push(i32 20) #6
  %call475 = call fastcc i32 @open_dump_file(i32 16, %union.tree_node* %decl)
  %call476 = call i32 @max_reg_num() #6
  %call477 = call i32 @combine_instructions(%struct.rtx_def* %insns.2, i32 %call476) #6
  %call478 = call zeroext i1 @purge_all_dead_edges(i32 1) #6
  %conv479 = zext i1 %call478 to i32
  %or480 = or i32 %conv479, %call477
  %tobool481 = icmp eq i32 %or480, 0
  br i1 %tobool481, label %if.end485, label %if.then482

if.then482:                                       ; preds = %if.then474
  call void @timevar_push(i32 13) #6
  call void @rebuild_jump_labels(%struct.rtx_def* %insns.2) #6
  call void @timevar_pop(i32 13) #6
  %call483 = call zeroext i1 @cleanup_cfg(i32 33) #6
  br label %if.end485

if.end485:                                        ; preds = %if.then482, %if.then474
  call fastcc void @close_dump_file(i32 16, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 20) #6
  call void @ggc_collect() #6
  %.pr873 = load i32* @optimize, align 4, !tbaa !1
  %cmp486 = icmp sgt i32 %.pr873, 0
  br i1 %cmp486, label %if.end490, label %if.end500

if.end490:                                        ; preds = %if.end485
  call void @timevar_push(i32 21) #6
  %call489 = call fastcc i32 @open_dump_file(i32 17, %union.tree_node* %decl)
  store i32 0, i32* @no_new_pseudos, align 4, !tbaa !1
  call void @if_convert(i32 1) #6
  store i32 1, i32* @no_new_pseudos, align 4, !tbaa !1
  call fastcc void @close_dump_file(i32 17, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 21) #6
  %.pr875.pr = load i32* @optimize, align 4, !tbaa !1
  %cmp491 = icmp sgt i32 %.pr875.pr, 0
  br i1 %cmp491, label %land.lhs.true493, label %if.end500

land.lhs.true493:                                 ; preds = %if.end490
  %133 = load i32* @flag_regmove, align 4, !tbaa !1
  %134 = load i32* @flag_expensive_optimizations, align 4
  %135 = or i32 %134, %133
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %if.end500, label %if.then497

if.then497:                                       ; preds = %land.lhs.true493
  call void @timevar_push(i32 22) #6
  %call498 = call fastcc i32 @open_dump_file(i32 18, %union.tree_node* %decl)
  %call499 = call i32 @max_reg_num() #6
  %137 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @regmove_optimize(%struct.rtx_def* %insns.2, i32 %call499, %struct._IO_FILE* %137) #6
  call fastcc void @close_dump_file(i32 18, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 22) #6
  call void @ggc_collect() #6
  br label %if.end500

if.end500:                                        ; preds = %if.end471, %if.end485, %land.lhs.true493, %if.then497, %if.end490
  call void @split_all_insns(i32 1) #6
  call void @timevar_push(i32 23) #6
  store i32 0, i32* @no_new_pseudos, align 4, !tbaa !1
  %call501 = call i32 @optimize_mode_switching(%struct._IO_FILE* null) #6
  %not.tobool502 = icmp ne i32 %call501, 0
  %. = zext i1 %not.tobool502 to i32
  store i32 1, i32* @no_new_pseudos, align 4, !tbaa !1
  call void @timevar_pop(i32 23) #6
  call void @timevar_push(i32 24) #6
  %138 = load i32* @optimize, align 4, !tbaa !1
  %cmp505 = icmp sgt i32 %138, 0
  %139 = load i32* @flag_schedule_insns, align 4
  %tobool508 = icmp ne i32 %139, 0
  %or.cond689 = and i1 %cmp505, %tobool508
  br i1 %or.cond689, label %if.then509, label %if.end511

if.then509:                                       ; preds = %if.end500
  %call510 = call fastcc i32 @open_dump_file(i32 19, %union.tree_node* %decl)
  %140 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @schedule_insns(%struct._IO_FILE* %140) #6
  call fastcc void @close_dump_file(i32 19, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  br label %if.end511

if.end511:                                        ; preds = %if.then509, %if.end500
  %register_life_up_to_date.1 = phi i32 [ 1, %if.then509 ], [ %., %if.end500 ]
  call void @timevar_pop(i32 24) #6
  call void @ggc_collect() #6
  %call512 = call i32 @leaf_function_p() #6
  store i32 %call512, i32* @current_function_is_leaf, align 4, !tbaa !1
  call void @timevar_push(i32 25) #6
  %call513 = call fastcc i32 @open_dump_file(i32 20, %union.tree_node* %decl)
  %tobool514 = icmp eq i32 %register_life_up_to_date.1, 0
  br i1 %tobool514, label %if.then515, label %if.end519

if.then515:                                       ; preds = %if.end511
  %141 = load i32* @optimize_size, align 4, !tbaa !1
  %lnot517 = icmp eq i32 %141, 0
  %lnot.ext518 = zext i1 %lnot517 to i32
  call void @recompute_reg_usage(%struct.rtx_def* %insns.2, i32 %lnot.ext518) #6
  br label %if.end519

if.end519:                                        ; preds = %if.end511, %if.then515
  %142 = load i32* @max_regno, align 4, !tbaa !1
  %conv520 = sext i32 %142 to i64
  call void @allocate_reg_info(i64 %conv520, i32 0, i32 1) #6
  %143 = load i32* @max_regno, align 4, !tbaa !1
  %conv521 = sext i32 %143 to i64
  %call522 = call noalias i8* @xcalloc(i64 %conv521, i64 8) #6
  %144 = bitcast i8* %call522 to %struct.rtx_def**
  store %struct.rtx_def** %144, %struct.rtx_def*** @reg_equiv_memory_loc, align 8, !tbaa !8
  call void @allocate_initial_values(%struct.rtx_def** %144) #6
  %call523 = call i32 @max_reg_num() #6
  %145 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @regclass(%struct.rtx_def* %insns.2, i32 %call523, %struct._IO_FILE* %145) #6
  %call524 = call i32 @local_alloc() #6
  call void @timevar_pop(i32 25) #6
  %146 = load i8* getelementptr inbounds (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file, i64 0, i32 20, i32 3), align 2, !tbaa !37
  %tobool525 = icmp eq i8 %146, 0
  br i1 %tobool525, label %if.end527, label %if.then526

if.then526:                                       ; preds = %if.end519
  call void @timevar_push(i32 2) #6
  %147 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @dump_flow_info(%struct._IO_FILE* %147) #6
  %148 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @dump_local_alloc(%struct._IO_FILE* %148) #6
  call fastcc void @close_dump_file(i32 20, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 2) #6
  br label %if.end527

if.end527:                                        ; preds = %if.end519, %if.then526
  call void @ggc_collect() #6
  call void @timevar_push(i32 26) #6
  %call528 = call fastcc i32 @open_dump_file(i32 21, %union.tree_node* %decl)
  %149 = load i32* @optimize, align 4, !tbaa !1
  %tobool529 = icmp eq i32 %149, 0
  br i1 %tobool529, label %if.else532, label %if.then530

if.then530:                                       ; preds = %if.end527
  %150 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call531 = call i32 @global_alloc(%struct._IO_FILE* %150) #6
  br label %if.end534

if.else532:                                       ; preds = %if.end527
  call void @build_insn_chain(%struct.rtx_def* %insns.2) #6
  %call533 = call i32 @reload(%struct.rtx_def* %insns.2, i32 0) #6
  br label %if.end534

if.end534:                                        ; preds = %if.else532, %if.then530
  %failure.0 = phi i32 [ %call531, %if.then530 ], [ %call533, %if.else532 ]
  call void @timevar_pop(i32 26) #6
  %151 = load i8* getelementptr inbounds (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file, i64 0, i32 21, i32 3), align 2, !tbaa !37
  %tobool535 = icmp eq i8 %151, 0
  br i1 %tobool535, label %if.end537, label %if.then536

if.then536:                                       ; preds = %if.end534
  call void @timevar_push(i32 2) #6
  %152 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @dump_global_regs(%struct._IO_FILE* %152) #6
  call fastcc void @close_dump_file(i32 21, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 2) #6
  br label %if.end537

if.end537:                                        ; preds = %if.end534, %if.then536
  %tobool538 = icmp eq i32 %failure.0, 0
  br i1 %tobool538, label %if.end540, label %exit_rest_of_compilation

if.end540:                                        ; preds = %if.end537
  call void @ggc_collect() #6
  %call541 = call fastcc i32 @open_dump_file(i32 22, %union.tree_node* %decl)
  %153 = load i32* @optimize, align 4, !tbaa !1
  %cmp542 = icmp sgt i32 %153, 0
  br i1 %cmp542, label %if.then544, label %if.end545

if.then544:                                       ; preds = %if.end540
  call void @timevar_push(i32 27) #6
  call void @reload_cse_regs(%struct.rtx_def* %insns.2) #6
  call void @timevar_pop(i32 27) #6
  br label %if.end545

if.end545:                                        ; preds = %if.then544, %if.end540
  %tobool546 = icmp eq i32 %call524, 0
  br i1 %tobool546, label %if.end548, label %if.then547

if.then547:                                       ; preds = %if.end545
  call void @timevar_push(i32 13) #6
  call void @rebuild_jump_labels(%struct.rtx_def* %insns.2) #6
  call void @timevar_pop(i32 13) #6
  br label %if.end548

if.end548:                                        ; preds = %if.end545, %if.then547
  call fastcc void @close_dump_file(i32 22, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_push(i32 28) #6
  %call549 = call fastcc i32 @open_dump_file(i32 23, %union.tree_node* %decl)
  %154 = load i32* @optimize, align 4, !tbaa !1
  %cmp550 = icmp sgt i32 %154, 0
  br i1 %cmp550, label %if.then552, label %if.end553

if.then552:                                       ; preds = %if.end548
  call void @split_all_insns(i32 0) #6
  %.pre891 = load i32* @optimize, align 4, !tbaa !1
  br label %if.end553

if.end553:                                        ; preds = %if.then552, %if.end548
  %155 = phi i32 [ %.pre891, %if.then552 ], [ %154, %if.end548 ]
  %tobool554 = icmp ne i32 %155, 0
  %cond555 = zext i1 %tobool554 to i32
  %call556 = call zeroext i1 @cleanup_cfg(i32 %cond555) #6
  call void @thread_prologue_and_epilogue_insns(%struct.rtx_def* %insns.2) #6
  %156 = load i32* @n_basic_blocks, align 4, !tbaa !1
  %cmp557 = icmp sgt i32 %156, 1000
  br i1 %cmp557, label %land.lhs.true559, label %if.end569thread-pre-split

land.lhs.true559:                                 ; preds = %if.end553
  %157 = load i32* @n_edges, align 4, !tbaa !1
  %div = sdiv i32 %157, %156
  %cmp560 = icmp sgt i32 %div, 19
  br i1 %cmp560, label %if.then562, label %if.end569thread-pre-split

if.then562:                                       ; preds = %land.lhs.true559
  %158 = load i32* @optimize, align 4, !tbaa !1
  %tobool563 = icmp ne i32 %158, 0
  %159 = load i32* @warn_disabled_optimization, align 4
  %tobool565 = icmp ne i32 %159, 0
  %or.cond690 = and i1 %tobool563, %tobool565
  br i1 %or.cond690, label %if.then566, label %if.end569

if.then566:                                       ; preds = %if.then562
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([74 x i8]* @.str13, i64 0, i64 0), i32 %156, i32 %div) #6
  br label %if.end569thread-pre-split

if.end569thread-pre-split:                        ; preds = %if.end553, %land.lhs.true559, %if.then566
  %cleanup_crossjump.0.ph = phi i32 [ 1, %if.then566 ], [ 3, %land.lhs.true559 ], [ 3, %if.end553 ]
  %.pr877 = load i32* @optimize, align 4, !tbaa !1
  br label %if.end569

if.end569:                                        ; preds = %if.end569thread-pre-split, %if.then562
  %160 = phi i32 [ %.pr877, %if.end569thread-pre-split ], [ %158, %if.then562 ]
  %cleanup_crossjump.0 = phi i32 [ %cleanup_crossjump.0.ph, %if.end569thread-pre-split ], [ 1, %if.then562 ]
  %tobool570 = icmp eq i32 %160, 0
  br i1 %tobool570, label %if.end574, label %if.then571

if.then571:                                       ; preds = %if.end569
  %call573 = call zeroext i1 @cleanup_cfg(i32 %cleanup_crossjump.0) #6
  %161 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @life_analysis(%struct.rtx_def* %insns.2, %struct._IO_FILE* %161, i32 127) #6
  call void @combine_stack_adjustments() #6
  call void @ggc_collect() #6
  br label %if.end574

if.end574:                                        ; preds = %if.end569, %if.then571
  store i32 1, i32* @flow2_completed, align 4, !tbaa !1
  call fastcc void @close_dump_file(i32 23, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 28) #6
  %162 = load i32* @optimize, align 4, !tbaa !1
  %cmp575 = icmp sgt i32 %162, 0
  %163 = load i32* @flag_peephole2, align 4
  %tobool578 = icmp ne i32 %163, 0
  %or.cond691 = and i1 %cmp575, %tobool578
  br i1 %or.cond691, label %if.then579, label %if.end581

if.then579:                                       ; preds = %if.end574
  call void @timevar_push(i32 30) #6
  %call580 = call fastcc i32 @open_dump_file(i32 24, %union.tree_node* %decl)
  %164 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @peephole2_optimize(%struct._IO_FILE* %164) #6
  call fastcc void @close_dump_file(i32 24, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 30) #6
  %.pr878 = load i32* @optimize, align 4, !tbaa !1
  br label %if.end581

if.end581:                                        ; preds = %if.then579, %if.end574
  %165 = phi i32 [ %.pr878, %if.then579 ], [ %162, %if.end574 ]
  %cmp582 = icmp sgt i32 %165, 0
  br i1 %cmp582, label %land.lhs.true584, label %if.end601

land.lhs.true584:                                 ; preds = %if.end581
  %166 = load i32* @flag_rename_registers, align 4, !tbaa !1
  %167 = load i32* @flag_cprop_registers, align 4
  %168 = or i32 %167, %166
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %if.end596, label %if.then588

if.then588:                                       ; preds = %land.lhs.true584
  call void @timevar_push(i32 31) #6
  %call589 = call fastcc i32 @open_dump_file(i32 25, %union.tree_node* %decl)
  %170 = load i32* @flag_rename_registers, align 4, !tbaa !1
  %tobool590 = icmp eq i32 %170, 0
  br i1 %tobool590, label %if.end592, label %if.then591

if.then591:                                       ; preds = %if.then588
  call void @regrename_optimize() #6
  br label %if.end592

if.end592:                                        ; preds = %if.then588, %if.then591
  %171 = load i32* @flag_cprop_registers, align 4, !tbaa !1
  %tobool593 = icmp eq i32 %171, 0
  br i1 %tobool593, label %if.end595, label %if.then594

if.then594:                                       ; preds = %if.end592
  call void @copyprop_hardreg_forward() #6
  br label %if.end595

if.end595:                                        ; preds = %if.end592, %if.then594
  call fastcc void @close_dump_file(i32 25, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 31) #6
  %.pre892 = load i32* @optimize, align 4, !tbaa !1
  br label %if.end596

if.end596:                                        ; preds = %land.lhs.true584, %if.end595
  %172 = phi i32 [ %165, %land.lhs.true584 ], [ %.pre892, %if.end595 ]
  %cmp597 = icmp sgt i32 %172, 0
  br i1 %cmp597, label %if.then599, label %if.end601

if.then599:                                       ; preds = %if.end596
  call void @timevar_push(i32 29) #6
  %call600 = call fastcc i32 @open_dump_file(i32 26, %union.tree_node* %decl)
  call void @if_convert(i32 1) #6
  call fastcc void @close_dump_file(i32 26, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 29) #6
  %.pr879 = load i32* @optimize, align 4, !tbaa !1
  br label %if.end601

if.end601:                                        ; preds = %if.end581, %if.then599, %if.end596
  %173 = phi i32 [ %.pr879, %if.then599 ], [ %172, %if.end596 ], [ %165, %if.end581 ]
  %tobool602 = icmp eq i32 %173, 0
  br i1 %tobool602, label %if.end611, label %if.end604

if.end604:                                        ; preds = %if.end601
  call void @split_all_insns(i32 1) #6
  %.pre893 = load i32* @optimize, align 4, !tbaa !1
  %phitmp896 = icmp sgt i32 %.pre893, 0
  %174 = load i32* @flag_schedule_insns_after_reload, align 4
  %tobool608 = icmp ne i32 %174, 0
  %or.cond693 = and i1 %phitmp896, %tobool608
  br i1 %or.cond693, label %if.then609, label %if.end611

if.then609:                                       ; preds = %if.end604
  call void @timevar_push(i32 32) #6
  %call610 = call fastcc i32 @open_dump_file(i32 27, %union.tree_node* %decl)
  call void @split_all_insns(i32 1) #6
  %175 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @schedule_insns(%struct._IO_FILE* %175) #6
  call fastcc void @close_dump_file(i32 27, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 32) #6
  call void @ggc_collect() #6
  br label %if.end611

if.end611:                                        ; preds = %if.end601, %if.then609, %if.end604
  call void @timevar_push(i32 37) #6
  %call612 = call fastcc i32 @open_dump_file(i32 28, %union.tree_node* %decl)
  %176 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @reg_to_stack(%struct.rtx_def* %insns.2, %struct._IO_FILE* %176) #6
  call fastcc void @close_dump_file(i32 28, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 37) #6
  call void @ggc_collect() #6
  %177 = load i32* @optimize, align 4, !tbaa !1
  %cmp613 = icmp sgt i32 %177, 0
  br i1 %cmp613, label %if.then615, label %if.end622

if.then615:                                       ; preds = %if.end611
  call void @timevar_push(i32 35) #6
  %call616 = call fastcc i32 @open_dump_file(i32 29, %union.tree_node* %decl)
  %call617 = call zeroext i1 @cleanup_cfg(i32 5) #6
  %178 = load i32* @flag_reorder_blocks, align 4, !tbaa !1
  %tobool618 = icmp eq i32 %178, 0
  br i1 %tobool618, label %if.end621, label %if.then619

if.then619:                                       ; preds = %if.then615
  call void @reorder_basic_blocks() #6
  %call620 = call zeroext i1 @cleanup_cfg(i32 5) #6
  br label %if.end621

if.end621:                                        ; preds = %if.then615, %if.then619
  call fastcc void @close_dump_file(i32 29, void (%struct._IO_FILE*, %struct.rtx_def*)* @print_rtl_with_bb, %struct.rtx_def* %insns.2)
  call void @timevar_pop(i32 35) #6
  br label %if.end622

if.end622:                                        ; preds = %if.end621, %if.end611
  call void @compute_alignments() #6
  call void @free_bb_for_insn() #6
  call void @purge_line_number_notes(%struct.rtx_def* %insns.2) #6
  call void @cleanup_barriers() #6
  call void @convert_to_eh_region_ranges() #6
  call void @timevar_push(i32 36) #6
  %call623 = call %struct.rtx_def* @get_insns() #6
  call void @shorten_branches(%struct.rtx_def* %call623) #6
  call void @timevar_pop(i32 36) #6
  %call624 = call zeroext i1 @nothrow_function_p() #6
  %conv625 = zext i1 %call624 to i32
  store i32 %conv625, i32* @current_function_nothrow, align 4, !tbaa !1
  br i1 %call624, label %if.then627, label %if.end633

if.then627:                                       ; preds = %if.end622
  %179 = load %union.tree_node** @current_function_decl, align 8, !tbaa !8
  %nothrow_flag629 = getelementptr inbounds %union.tree_node* %179, i64 0, i32 0, i32 0, i32 2
  %bf.load630 = load i32* %nothrow_flag629, align 8
  %bf.set632 = or i32 %bf.load630, 131072
  store i32 %bf.set632, i32* %nothrow_flag629, align 8
  br label %if.end633

if.end633:                                        ; preds = %if.then627, %if.end622
  call void @timevar_push(i32 42) #6
  %rtl = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  %180 = load %struct.rtx_def** %rtl, align 8, !tbaa !19
  %tobool635 = icmp eq %struct.rtx_def* %180, null
  br i1 %tobool635, label %cond.false639, label %cond.end642

cond.false639:                                    ; preds = %if.end633
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #6
  %181 = load %struct.rtx_def** %rtl, align 8, !tbaa !19
  br label %cond.end642

cond.end642:                                      ; preds = %if.end633, %cond.false639
  %cond643 = phi %struct.rtx_def* [ %181, %cond.false639 ], [ %180, %if.end633 ]
  %182 = getelementptr inbounds %struct.rtx_def* %cond643, i64 0, i32 0
  %bf.load644 = load i32* %182, align 8
  %bf.clear645 = and i32 %bf.load644, 65535
  %cmp646 = icmp eq i32 %bf.clear645, 66
  br i1 %cmp646, label %if.end649, label %if.then648

if.then648:                                       ; preds = %cond.end642
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str1, i64 0, i64 0), i32 3494, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.rest_of_compilation, i64 0, i64 0)) #10
  unreachable

if.end649:                                        ; preds = %cond.end642
  %arrayidx650 = getelementptr inbounds %struct.rtx_def* %cond643, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx650 to %struct.rtx_def**
  %183 = load %struct.rtx_def** %rtx, align 8, !tbaa !8
  %184 = getelementptr inbounds %struct.rtx_def* %183, i64 0, i32 0
  %bf.load651 = load i32* %184, align 8
  %bf.clear652 = and i32 %bf.load651, 65535
  %cmp653 = icmp eq i32 %bf.clear652, 68
  br i1 %cmp653, label %if.end656, label %if.then655

if.then655:                                       ; preds = %if.end649
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str1, i64 0, i64 0), i32 3497, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.rest_of_compilation, i64 0, i64 0)) #10
  unreachable

if.end656:                                        ; preds = %if.end649
  %arrayidx658 = getelementptr inbounds %struct.rtx_def* %183, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx658 to i8**
  %185 = load i8** %rtstr, align 8, !tbaa !8
  call void @assemble_start_function(%union.tree_node* %decl, i8* %185) #6
  %186 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %187 = load i32* @optimize, align 4, !tbaa !1
  call void @final_start_function(%struct.rtx_def* %insns.2, %struct._IO_FILE* %186, i32 %187) #6
  %188 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %189 = load i32* @optimize, align 4, !tbaa !1
  call void @final(%struct.rtx_def* %insns.2, %struct._IO_FILE* %188, i32 %189, i32 0) #6
  call void @final_end_function() #6
  call void @assemble_end_function(%union.tree_node* %decl, i8* %185) #6
  call void @output_function_exception_table() #6
  %190 = load i32* @quiet_flag, align 4, !tbaa !1
  %tobool659 = icmp eq i32 %190, 0
  br i1 %tobool659, label %if.then660, label %if.end662

if.then660:                                       ; preds = %if.end656
  %191 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %call661 = call i32 @fflush(%struct._IO_FILE* %191) #6
  br label %if.end662

if.end662:                                        ; preds = %if.end656, %if.then660
  call void @free_basic_block_vars(i32 0) #6
  call void @regset_release_memory() #6
  call void @timevar_pop(i32 42) #6
  call void @ggc_collect() #6
  call void @timevar_push(i32 43) #6
  %192 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !8
  %function_decl = getelementptr inbounds %struct.gcc_debug_hooks* %192, i64 0, i32 15
  %193 = load void (%union.tree_node*)** %function_decl, align 8, !tbaa !39
  call void %193(%union.tree_node* %decl) #6
  call void @timevar_pop(i32 43) #6
  br label %exit_rest_of_compilation

exit_rest_of_compilation:                         ; preds = %if.end169, %if.end537, %lor.lhs.false242, %lor.lhs.false240, %if.end233, %if.end662, %if.then290, %if.end164, %if.then66, %if.then28
  %.pre-phi = phi i64* [ %9, %if.end169 ], [ %37, %if.end537 ], [ %37, %lor.lhs.false242 ], [ %37, %lor.lhs.false240 ], [ %37, %if.end233 ], [ %37, %if.end662 ], [ %37, %if.then290 ], [ %9, %if.end164 ], [ %9, %if.then66 ], [ %.pre895, %if.then28 ]
  store i32 0, i32* @reload_completed, align 4, !tbaa !1
  store i32 0, i32* @flow2_completed, align 4, !tbaa !1
  store i32 0, i32* @no_new_pseudos, align 4, !tbaa !1
  call void @timevar_push(i32 42) #6
  call void @init_insn_lengths() #6
  call void @clear_const_double_mem() #6
  call void @init_temp_slots() #6
  call void @free_basic_block_vars(i32 0) #6
  call void @free_bb_for_insn() #6
  call void @timevar_pop(i32 42) #6
  call void @init_recog_no_volatile() #6
  %194 = load %struct.function** @cfun, align 8, !tbaa !8
  call void @free_after_parsing(%struct.function* %194) #6
  %bf.load665 = load i64* %.pre-phi, align 8
  %bf.cast668 = and i64 %bf.load665, 262144
  %tobool669 = icmp eq i64 %bf.cast668, 0
  br i1 %tobool669, label %if.then670, label %if.end674

if.then670:                                       ; preds = %exit_rest_of_compilation
  %195 = load %struct.function** @cfun, align 8, !tbaa !8
  call void @free_after_compilation(%struct.function* %195) #6
  store %struct.function* null, %struct.function** %f, align 8, !tbaa !8
  br label %if.end674

if.end674:                                        ; preds = %exit_rest_of_compilation, %if.then670
  store %struct.function* null, %struct.function** @cfun, align 8, !tbaa !8
  call void @ggc_collect() #6
  call void @timevar_pop(i32 44) #6
  ret void
}

declare void @identify_blocks() #1

declare void @reorder_blocks() #1

declare void @init_flow() #1

declare %union.tree_node* @get_containing_scope(%union.tree_node*) #1

declare i8* @function_cannot_inline_p(%union.tree_node*) #1

declare %struct.rtx_def* @get_insns() #1

; Function Attrs: nounwind uwtable
define internal fastcc i32 @open_dump_file(i32 %index, %union.tree_node* %decl) #0 {
entry:
  %seq = alloca [16 x i8], align 16
  %idxprom = zext i32 %index to i64
  %arrayidx = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %idxprom
  %enabled = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %idxprom, i32 3
  %0 = load i8* %enabled, align 2, !tbaa !37
  %tobool = icmp eq i8 %0, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  call void @timevar_push(i32 2) #6
  %1 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %cmp = icmp eq %struct._IO_FILE* %1, null
  br i1 %cmp, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  %call = call i32 @fclose(%struct._IO_FILE* %1) #6
  br label %if.end2

if.end2:                                          ; preds = %if.end, %if.then1
  %arraydecay = getelementptr inbounds [16 x i8]* %seq, i64 0, i64 0
  %call3 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8]* @.str16, i64 0, i64 0), i32 %index) #6
  %initialized = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %idxprom, i32 4
  %2 = load i8* %initialized, align 1, !tbaa !40
  %tobool6 = icmp eq i8 %2, 0
  br i1 %tobool6, label %if.then7, label %if.end21

if.then7:                                         ; preds = %if.end2
  %3 = load i32* @graph_dump_format, align 4, !tbaa !5
  %cmp8 = icmp eq i32 %3, 0
  br i1 %cmp8, label %if.end17, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then7
  %graph_dump_p = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %idxprom, i32 2
  %4 = load i8* %graph_dump_p, align 1, !tbaa !41
  %tobool11 = icmp eq i8 %4, 0
  br i1 %tobool11, label %if.end17, label %if.then12

if.then12:                                        ; preds = %land.lhs.true
  %extension = getelementptr inbounds %struct.dump_file_info* %arrayidx, i64 0, i32 0
  %5 = load i8** %extension, align 16, !tbaa !42
  %call16 = call noalias i8* (i8*, ...)* @concat(i8* %arraydecay, i8* %5, i8* null) #6
  %6 = load i8** @dump_base_name, align 8, !tbaa !8
  call void @clean_graph_dump_file(i8* %6, i8* %call16) #6
  call void @free(i8* %call16)
  br label %if.end17

if.end17:                                         ; preds = %land.lhs.true, %if.then7, %if.then12
  store i8 1, i8* %initialized, align 1, !tbaa !40
  br label %if.end21

if.end21:                                         ; preds = %if.end2, %if.end17
  %open_arg.0 = phi i8* [ getelementptr inbounds ([2 x i8]* @.str22, i64 0, i64 0), %if.end17 ], [ getelementptr inbounds ([2 x i8]* @.str693, i64 0, i64 0), %if.end2 ]
  %7 = load i8** @dump_base_name, align 8, !tbaa !8
  %extension25 = getelementptr inbounds %struct.dump_file_info* %arrayidx, i64 0, i32 0
  %8 = load i8** %extension25, align 16, !tbaa !42
  %call26 = call noalias i8* (i8*, ...)* @concat(i8* %7, i8* %arraydecay, i8* %8, i8* null) #6
  %call27 = call %struct._IO_FILE* @fopen(i8* %call26, i8* %open_arg.0) #6
  store %struct._IO_FILE* %call27, %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %cmp28 = icmp eq %struct._IO_FILE* %call27, null
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end21
  call void (i8*, ...)* @fatal_io_error(i8* getelementptr inbounds ([14 x i8]* @.str350, i64 0, i64 0), i8* %call26) #10
  unreachable

if.end31:                                         ; preds = %if.end21
  call void @free(i8* %call26)
  %tobool32 = icmp eq %union.tree_node* %decl, null
  br i1 %tobool32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %if.end31
  %9 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %10 = load i8* (%union.tree_node*, i32)** @decl_printable_name, align 8, !tbaa !8
  %call34 = call i8* %10(%union.tree_node* %decl, i32 2) #6
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([18 x i8]* @.str694, i64 0, i64 0), i8* %call34) #6
  br label %if.end36

if.end36:                                         ; preds = %if.end31, %if.then33
  call void @timevar_pop(i32 2) #6
  br label %return

return:                                           ; preds = %entry, %if.end36
  %retval.0 = phi i32 [ 1, %if.end36 ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @close_dump_file(i32 %index, void (%struct._IO_FILE*, %struct.rtx_def*)* %func, %struct.rtx_def* %insns) #0 {
entry:
  %seq = alloca [16 x i8], align 16
  %0 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %tobool = icmp eq %struct._IO_FILE* %0, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  call void @timevar_push(i32 2) #6
  %tobool1 = icmp ne %struct.rtx_def* %insns, null
  %1 = load i32* @graph_dump_format, align 4
  %cmp = icmp ne i32 %1, 0
  %or.cond = and i1 %tobool1, %cmp
  br i1 %or.cond, label %land.lhs.true2, label %if.end9

land.lhs.true2:                                   ; preds = %if.end
  %idxprom = zext i32 %index to i64
  %graph_dump_p = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %idxprom, i32 2
  %2 = load i8* %graph_dump_p, align 1, !tbaa !41
  %tobool3 = icmp eq i8 %2, 0
  br i1 %tobool3, label %if.end9, label %if.then4

if.then4:                                         ; preds = %land.lhs.true2
  %arraydecay = getelementptr inbounds [16 x i8]* %seq, i64 0, i64 0
  %call = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8]* @.str16, i64 0, i64 0), i32 %index) #6
  %extension = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %idxprom, i32 0
  %3 = load i8** %extension, align 16, !tbaa !42
  %call8 = call noalias i8* (i8*, ...)* @concat(i8* %arraydecay, i8* %3, i8* null) #6
  %4 = load i8** @dump_base_name, align 8, !tbaa !8
  call void @print_rtl_graph_with_bb(i8* %4, i8* %call8, %struct.rtx_def* %insns) #6
  call void @free(i8* %call8)
  br label %if.end9

if.end9:                                          ; preds = %land.lhs.true2, %if.then4, %if.end
  %tobool10 = icmp ne void (%struct._IO_FILE*, %struct.rtx_def*)* %func, null
  %or.cond17 = and i1 %tobool10, %tobool1
  br i1 %or.cond17, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end9
  %5 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void %func(%struct._IO_FILE* %5, %struct.rtx_def* %insns) #6
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end9
  %6 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call15 = call i32 @fflush(%struct._IO_FILE* %6) #6
  %7 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call16 = call i32 @fclose(%struct._IO_FILE* %7) #6
  store %struct._IO_FILE* null, %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @timevar_pop(i32 2) #6
  br label %return

return:                                           ; preds = %entry, %if.end14
  ret void
}

declare void @print_rtl(%struct._IO_FILE*, %struct.rtx_def*) #1

declare void @convert_from_eh_region_ranges() #1

declare void @rebuild_jump_labels(%struct.rtx_def*) #1

declare void @find_exception_handler_labels() #1

declare void @find_basic_blocks(%struct.rtx_def*, i32, %struct._IO_FILE*) #1

declare i32 @max_reg_num() #1

declare zeroext i1 @cleanup_cfg(i32) #1

declare void @free_bb_for_insn() #1

declare zeroext i1 @nothrow_function_p() #1

declare void @save_for_inline(%union.tree_node*) #1

declare void @remove_unnecessary_notes() #1

declare void @ggc_collect() #1

declare void @init_function_for_compilation() #1

declare void @purge_hard_subreg_sets(%struct.rtx_def*) #1

declare void @optimize_sibling_and_tail_recursive_calls() #1

declare i32 @doing_eh(i32) #1

declare void @finish_eh_generation() #1

declare void @emit_initial_value_sets() #1

declare void @unshare_all_rtl(%union.tree_node*, %struct.rtx_def*) #1

declare void @instantiate_virtual_regs(%union.tree_node*, %struct.rtx_def*) #1

declare void @expected_value_to_br_prob() #1

declare void @reg_scan(%struct.rtx_def*, i32, i32) #1

declare void @copy_loop_headers(%struct.rtx_def*) #1

declare void @purge_line_number_notes(%struct.rtx_def*) #1

declare void @convert_to_ssa() #1

declare void @print_rtl_with_bb(%struct._IO_FILE*, %struct.rtx_def*) #1

declare void @ssa_const_prop() #1

declare void @ssa_eliminate_dead_code() #1

declare void @convert_from_ssa() #1

declare void @if_convert(i32) #1

declare void @delete_null_pointer_checks(%struct.rtx_def*) #1

declare void @renumber_insns(%struct._IO_FILE*) #1

declare i32 @cse_main(%struct.rtx_def*, i32, i32, %struct._IO_FILE*) #1

declare void @delete_trivially_dead_insns(%struct.rtx_def*, i32, i32) #1

declare void @purge_addressof(%struct.rtx_def*) #1

declare i32 @gcse_main(%struct.rtx_def*, %struct._IO_FILE*) #1

declare void @cleanup_barriers() #1

declare void @loop_optimize(%struct.rtx_def*, %struct._IO_FILE*, i32) #1

declare void @regclass_init() #1

declare void @check_function_return_warnings() #1

declare void @mark_constant_function() #1

declare void @branch_prob() #1

declare i32 @flow_loops_find(%struct.loops*, i32) #1

declare void @estimate_probability(%struct.loops*) #1

declare void @flow_loops_dump(%struct.loops*, %struct._IO_FILE*, void (%struct.loop*, %struct._IO_FILE*, i32)*, i32) #1

declare void @flow_loops_free(%struct.loops*) #1

declare void @life_analysis(%struct.rtx_def*, %struct._IO_FILE*, i32) #1

declare void @uninitialized_vars_warning(%union.tree_node*) #1

declare void @setjmp_args_warning() #1

declare i32 @initialize_uninitialized_subregs() #1

declare i32 @combine_instructions(%struct.rtx_def*, i32) #1

declare zeroext i1 @purge_all_dead_edges(i32) #1

declare void @regmove_optimize(%struct.rtx_def*, i32, %struct._IO_FILE*) #1

declare void @split_all_insns(i32) #1

declare i32 @optimize_mode_switching(%struct._IO_FILE*) #1

declare void @schedule_insns(%struct._IO_FILE*) #1

declare i32 @leaf_function_p() #1

declare void @recompute_reg_usage(%struct.rtx_def*, i32) #1

declare void @allocate_reg_info(i64, i32, i32) #1

declare noalias i8* @xcalloc(i64, i64) #1

declare void @allocate_initial_values(%struct.rtx_def**) #1

declare void @regclass(%struct.rtx_def*, i32, %struct._IO_FILE*) #1

declare i32 @local_alloc() #1

declare void @dump_flow_info(%struct._IO_FILE*) #1

declare void @dump_local_alloc(%struct._IO_FILE*) #1

declare i32 @global_alloc(%struct._IO_FILE*) #1

declare void @build_insn_chain(%struct.rtx_def*) #1

declare i32 @reload(%struct.rtx_def*, i32) #1

declare void @dump_global_regs(%struct._IO_FILE*) #1

declare void @reload_cse_regs(%struct.rtx_def*) #1

declare void @thread_prologue_and_epilogue_insns(%struct.rtx_def*) #1

declare void @warning(i8*, ...) #1

declare void @combine_stack_adjustments() #1

declare void @peephole2_optimize(%struct._IO_FILE*) #1

declare void @regrename_optimize() #1

declare void @copyprop_hardreg_forward() #1

declare void @reg_to_stack(%struct.rtx_def*, %struct._IO_FILE*) #1

declare void @reorder_basic_blocks() #1

declare void @compute_alignments() #1

declare void @convert_to_eh_region_ranges() #1

declare void @shorten_branches(%struct.rtx_def*) #1

declare void @assemble_start_function(%union.tree_node*, i8*) #1

declare void @final_start_function(%struct.rtx_def*, %struct._IO_FILE*, i32) #1

declare void @final(%struct.rtx_def*, %struct._IO_FILE*, i32, i32) #1

declare void @final_end_function() #1

declare void @assemble_end_function(%union.tree_node*, i8*) #1

declare void @output_function_exception_table() #1

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) #8

declare void @free_basic_block_vars(i32) #1

declare void @regset_release_memory() #1

declare void @init_insn_lengths() #1

declare void @clear_const_double_mem() #1

declare void @init_temp_slots() #1

declare void @init_recog_no_volatile() #1

declare void @free_after_parsing(%struct.function*) #1

declare void @free_after_compilation(%struct.function*) #1

; Function Attrs: nounwind uwtable
define i32 @toplev_main(i32 %argc, i8** %argv) #0 {
entry:
  %seq.i.i = alloca [16 x i8], align 16
  call void @hex_init() #6
  %0 = load i8** %argv, align 8, !tbaa !8
  %call.i = call i64 @strlen(i8* %0) #6
  %add.ptr.i = getelementptr inbounds i8* %0, i64 %call.i
  br label %while.cond.i

while.cond.i:                                     ; preds = %land.rhs.i, %entry
  %p.0.i = phi i8* [ %add.ptr.i, %entry ], [ %arrayidx.i, %land.rhs.i ]
  %cmp.i = icmp eq i8* %p.0.i, %0
  br i1 %cmp.i, label %general_init.exit, label %land.rhs.i

land.rhs.i:                                       ; preds = %while.cond.i
  %arrayidx.i = getelementptr inbounds i8* %p.0.i, i64 -1
  %1 = load i8* %arrayidx.i, align 1, !tbaa !5
  %lnot.i = icmp eq i8 %1, 47
  br i1 %lnot.i, label %general_init.exit, label %while.cond.i

general_init.exit:                                ; preds = %while.cond.i, %land.rhs.i
  %p.0.lcssa.i = phi i8* [ %p.0.i, %land.rhs.i ], [ %0, %while.cond.i ]
  store i8* %p.0.lcssa.i, i8** @progname, align 8, !tbaa !8
  call void @xmalloc_set_program_name(i8* %p.0.lcssa.i) #6
  %call3.i = call void (i32)* (i32, void (i32)*)* @signal(i32 8, void (i32)* @float_signal) #6
  %call4.i = call void (i32)* (i32, void (i32)*)* @signal(i32 11, void (i32)* @crash_signal) #6
  %call5.i = call void (i32)* (i32, void (i32)*)* @signal(i32 4, void (i32)* @crash_signal) #6
  %call6.i = call void (i32)* (i32, void (i32)*)* @signal(i32 7, void (i32)* @crash_signal) #6
  %call7.i = call void (i32)* (i32, void (i32)*)* @signal(i32 6, void (i32)* @crash_signal) #6
  %2 = load %struct.diagnostic_context** @global_dc, align 8, !tbaa !8
  call void @diagnostic_initialize(%struct.diagnostic_context* %2) #6
  store i32 %argc, i32* @save_argc, align 4, !tbaa !1
  store i8** %argv, i8*** @save_argv, align 8, !tbaa !8
  call void @init_reg_sets() #6
  call void @add_params(%struct.param_info* getelementptr inbounds ([7 x %struct.param_info]* @lang_independent_params, i64 0, i64 0), i64 6) #6
  %3 = load void ()** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 2), align 8, !tbaa !43
  call void %3() #6
  %cmp238.i = icmp sgt i32 %argc, 1
  br i1 %cmp238.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %general_init.exit, %for.inc.i
  %indvars.iv253.i = phi i64 [ %indvars.iv.next254.i, %for.inc.i ], [ 1, %general_init.exit ]
  %arrayidx.i14 = getelementptr inbounds i8** %argv, i64 %indvars.iv253.i
  %4 = load i8** %arrayidx.i14, align 8, !tbaa !8
  %call.i15 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8]* @.str356, i64 0, i64 0)) #6
  %tobool.i = icmp eq i32 %call.i15, 0
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body.i
  store i32 1, i32* @optimize, align 4, !tbaa !1
  store i32 0, i32* @optimize_size, align 4, !tbaa !1
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body.i
  %5 = load i8* %4, align 1, !tbaa !5
  %cmp4.i = icmp eq i8 %5, 45
  br i1 %cmp4.i, label %land.lhs.true.i, label %for.inc.i

land.lhs.true.i:                                  ; preds = %if.else.i
  %arrayidx8.i = getelementptr inbounds i8* %4, i64 1
  %6 = load i8* %arrayidx8.i, align 1, !tbaa !5
  %cmp10.i = icmp eq i8 %6, 79
  br i1 %cmp10.i, label %if.then12.i, label %for.inc.i

if.then12.i:                                      ; preds = %land.lhs.true.i
  %arrayidx15.i = getelementptr inbounds i8* %4, i64 2
  %7 = load i8* %arrayidx15.i, align 1, !tbaa !5
  switch i8 %7, label %while.body.i.i [
    i8 115, label %land.lhs.true20.i
    i8 0, label %read_integral_parameter.exit.i
  ]

land.lhs.true20.i:                                ; preds = %if.then12.i
  %arrayidx21.i = getelementptr inbounds i8* %4, i64 3
  %8 = load i8* %arrayidx21.i, align 1, !tbaa !5
  %cmp23.i = icmp eq i8 %8, 0
  br i1 %cmp23.i, label %if.then25.i, label %while.body.i.i

if.then25.i:                                      ; preds = %land.lhs.true20.i
  store i32 1, i32* @optimize_size, align 4, !tbaa !1
  store i32 2, i32* @optimize, align 4, !tbaa !1
  br label %for.inc.i

while.cond.i.i:                                   ; preds = %while.body.i.i
  %9 = load i8* %incdec.ptr.i.i, align 1, !tbaa !5
  %tobool.i.i = icmp eq i8 %9, 0
  br i1 %tobool.i.i, label %read_integral_parameter.exit.i, label %while.body.i.i

while.body.i.i:                                   ; preds = %land.lhs.true20.i, %if.then12.i, %while.cond.i.i
  %.pr.i.i = phi i8 [ %9, %while.cond.i.i ], [ 115, %land.lhs.true20.i ], [ %7, %if.then12.i ]
  %endp.021.i.i = phi i8* [ %incdec.ptr.i.i, %while.cond.i.i ], [ %arrayidx15.i, %if.then12.i ], [ %arrayidx15.i, %land.lhs.true20.i ]
  %idxprom.i.i = zext i8 %.pr.i.i to i64
  %arrayidx.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i.i
  %10 = load i16* %arrayidx.i.i, align 2, !tbaa !6
  %and2.i.i = and i16 %10, 4
  %tobool3.i.i = icmp eq i16 %and2.i.i, 0
  %incdec.ptr.i.i = getelementptr inbounds i8* %endp.021.i.i, i64 1
  br i1 %tobool3.i.i, label %if.then6.i.i, label %while.cond.i.i

if.then6.i.i:                                     ; preds = %while.body.i.i
  %cmp7.i.i = icmp eq i8* %4, null
  br i1 %cmp7.i.i, label %for.inc.i, label %if.then9.i.i

if.then9.i.i:                                     ; preds = %if.then6.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %4) #6
  br label %for.inc.i

read_integral_parameter.exit.i:                   ; preds = %while.cond.i.i, %if.then12.i
  %call.i.i = call i32 @atoi(i8* %arrayidx15.i) #6
  %cmp28.i = icmp eq i32 %call.i.i, -1
  br i1 %cmp28.i, label %for.inc.i, label %if.then30.i

if.then30.i:                                      ; preds = %read_integral_parameter.exit.i
  store i32 %call.i.i, i32* @optimize, align 4, !tbaa !1
  store i32 0, i32* @optimize_size, align 4, !tbaa !1
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then30.i, %read_integral_parameter.exit.i, %if.then9.i.i, %if.then6.i.i, %if.then25.i, %land.lhs.true.i, %if.else.i, %if.then.i
  %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1
  %lftr.wideiv79 = trunc i64 %indvars.iv.next254.i to i32
  %exitcond80 = icmp eq i32 %lftr.wideiv79, %argc
  br i1 %exitcond80, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.inc.i, %general_init.exit
  %11 = load i32* @optimize, align 4, !tbaa !1
  %tobool34.i = icmp eq i32 %11, 0
  br i1 %tobool34.i, label %if.end36.thread.i, label %if.end36.i

if.end36.thread.i:                                ; preds = %for.end.i
  store i32 0, i32* @flag_merge_constants, align 4, !tbaa !1
  br label %if.then52.i

if.end36.i:                                       ; preds = %for.end.i
  %cmp37.i = icmp sgt i32 %11, 0
  br i1 %cmp37.i, label %if.end40.i, label %if.then52.i

if.end40.i:                                       ; preds = %if.end36.i
  store i32 1, i32* @flag_defer_pop, align 4, !tbaa !1
  store i32 1, i32* @flag_thread_jumps, align 4, !tbaa !1
  store i32 1, i32* @flag_guess_branch_prob, align 4, !tbaa !1
  store i32 1, i32* @flag_cprop_registers, align 4, !tbaa !1
  %cmp41.i = icmp sgt i32 %11, 1
  br i1 %cmp41.i, label %if.end44.i, label %if.then52.i

if.end44.i:                                       ; preds = %if.end40.i
  store i32 1, i32* @flag_optimize_sibling_calls, align 4, !tbaa !1
  store i32 1, i32* @flag_cse_follow_jumps, align 4, !tbaa !1
  store i32 1, i32* @flag_cse_skip_blocks, align 4, !tbaa !1
  store i32 1, i32* @flag_gcse, align 4, !tbaa !1
  store i32 1, i32* @flag_expensive_optimizations, align 4, !tbaa !1
  store i32 1, i32* @flag_strength_reduce, align 4, !tbaa !1
  store i32 1, i32* @flag_rerun_cse_after_loop, align 4, !tbaa !1
  store i32 1, i32* @flag_rerun_loop_opt, align 4, !tbaa !1
  store i32 1, i32* @flag_caller_saves, align 4, !tbaa !1
  store i32 1, i32* @flag_force_mem, align 4, !tbaa !1
  store i32 1, i32* @flag_peephole2, align 4, !tbaa !1
  store i32 1, i32* @flag_schedule_insns, align 4, !tbaa !1
  store i32 1, i32* @flag_schedule_insns_after_reload, align 4, !tbaa !1
  store i32 1, i32* @flag_regmove, align 4, !tbaa !1
  store i32 1, i32* @flag_strict_aliasing, align 4, !tbaa !1
  store i32 1, i32* @flag_delete_null_pointer_checks, align 4, !tbaa !1
  store i32 1, i32* @flag_reorder_blocks, align 4, !tbaa !1
  %cmp45.i = icmp sgt i32 %11, 2
  br i1 %cmp45.i, label %if.then47.i, label %if.end48.i

if.then47.i:                                      ; preds = %if.end44.i
  store i32 1, i32* @flag_inline_functions, align 4, !tbaa !1
  store i32 1, i32* @flag_rename_registers, align 4, !tbaa !1
  br label %if.end48.i

if.end48.i:                                       ; preds = %if.then47.i, %if.end44.i
  %cmp49.i = icmp slt i32 %11, 2
  %12 = load i32* @optimize_size, align 4
  %tobool51.i = icmp ne i32 %12, 0
  %or.cond.i = or i1 %cmp49.i, %tobool51.i
  br i1 %or.cond.i, label %if.then52.i, label %if.end53.i

if.then52.i:                                      ; preds = %if.end48.i, %if.end40.i, %if.end36.i, %if.end36.thread.i
  store i32 1, i32* @align_loops, align 4, !tbaa !1
  store i32 1, i32* @align_jumps, align 4, !tbaa !1
  store i32 1, i32* @align_labels, align 4, !tbaa !1
  store i32 1, i32* @align_functions, align 4, !tbaa !1
  br label %if.end53.i

if.end53.i:                                       ; preds = %if.then52.i, %if.end48.i
  store i32 1, i32* @flag_signed_char, align 4, !tbaa !1
  store i32 0, i32* @target_flags, align 4, !tbaa !1
  call fastcc void @set_target_switch(i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0)) #6
  %13 = load i32* @optimize, align 4, !tbaa !1
  %14 = load i32* @optimize_size, align 4, !tbaa !1
  call void @optimization_options(i32 %13, i32 %14) #6
  br i1 %cmp238.i, label %for.body57.lr.ph.i, label %for.end139.i

for.body57.lr.ph.i:                               ; preds = %if.end53.i
  %15 = load i32 (i32, i8**)** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 3), align 8, !tbaa !49
  %16 = load %struct._IO_FILE** @stderr, align 8, !tbaa !8
  %17 = load i8** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 0), align 8, !tbaa !50
  %18 = load i8** @version_string, align 8, !tbaa !8
  %19 = load void (i32)** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 18), align 8, !tbaa !51
  br label %for.body57.i

for.body57.i:                                     ; preds = %for.cond54.backedge.i, %for.body57.lr.ph.i
  %i.1237.i = phi i32 [ 1, %for.body57.lr.ph.i ], [ %i.1.be.i, %for.cond54.backedge.i ]
  %sub.i = sub nsw i32 %argc, %i.1237.i
  %idx.ext.i = sext i32 %i.1237.i to i64
  %add.ptr58.i = getelementptr inbounds i8** %argv, i64 %idx.ext.i
  %call59.i = call i32 %15(i32 %sub.i, i8** %add.ptr58.i) #6
  %cmp60.i = icmp sgt i32 %call59.i, -1
  br i1 %cmp60.i, label %if.then62.i, label %if.else67.i

if.then62.i:                                      ; preds = %for.body57.i
  %20 = load i8** %add.ptr58.i, align 8, !tbaa !8
  %21 = load i8* %20, align 1, !tbaa !5
  switch i8 %21, label %if.end.i.i [
    i8 45, label %lor.lhs.false.i.i
    i8 43, label %if.end69.i
  ]

lor.lhs.false.i.i:                                ; preds = %if.then62.i
  %arrayidx3.i.i = getelementptr inbounds i8* %20, i64 1
  %22 = load i8* %arrayidx3.i.i, align 1, !tbaa !5
  %cmp5.i.i = icmp eq i8 %22, 0
  br i1 %cmp5.i.i, label %if.end.i.i, label %if.end12.i.i

if.end.i.i:                                       ; preds = %lor.lhs.false.i.i, %if.then62.i
  store i8* %20, i8** @filename, align 8, !tbaa !8
  br label %if.end69.i

if.end12.i.i:                                     ; preds = %lor.lhs.false.i.i
  %call.i209.i = call i32 @strcmp(i8* %arrayidx3.i.i, i8* getelementptr inbounds ([6 x i8]* @.str519, i64 0, i64 0)) #6
  %tobool.i210.i = icmp eq i32 %call.i209.i, 0
  br i1 %tobool.i210.i, label %if.then13.i.i, label %if.end14.i.i

if.then13.i.i:                                    ; preds = %if.end12.i.i
  %puts.i.i.i = call i32 @puts(i8* getelementptr inbounds ([79 x i8]* @str, i64 0, i64 0)) #6
  %puts159.i.i.i = call i32 @puts(i8* getelementptr inbounds ([79 x i8]* @str695, i64 0, i64 0)) #6
  %puts160.i.i.i = call i32 @puts(i8* getelementptr inbounds ([78 x i8]* @str696, i64 0, i64 0)) #6
  %puts161.i.i.i = call i32 @puts(i8* getelementptr inbounds ([75 x i8]* @str697, i64 0, i64 0)) #6
  %puts162.i.i.i = call i32 @puts(i8* getelementptr inbounds ([125 x i8]* @str698, i64 0, i64 0)) #6
  %puts163.i.i.i = call i32 @puts(i8* getelementptr inbounds ([179 x i8]* @str699, i64 0, i64 0)) #6
  br label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %for.cond.backedge.i.i.i, %if.then13.i.i
  %dec187.i.i.i = phi i64 [ 96, %if.then13.i.i ], [ %dec.i.i.i, %for.cond.backedge.i.i.i ]
  %description6.i.i.i = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %dec187.i.i.i, i32 3
  %23 = load i8** %description6.i.i.i, align 8, !tbaa !52
  %24 = load i8* %23, align 1, !tbaa !5
  %cmp7.i.i.i = icmp eq i8 %24, 0
  br i1 %cmp7.i.i.i, label %for.cond.backedge.i.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.body.i.i.i
  %string.i.i.i = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %dec187.i.i.i, i32 0
  %25 = load i8** %string.i.i.i, align 16, !tbaa !54
  %call10.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str624, i64 0, i64 0), i8* %25, i8* %23) #6
  br label %for.cond.backedge.i.i.i

for.cond.backedge.i.i.i:                          ; preds = %if.then.i.i.i, %for.body.i.i.i
  %dec.i.i.i = add i64 %dec187.i.i.i, -1
  %tobool.i.i.i = icmp eq i64 %dec187.i.i.i, 0
  br i1 %tobool.i.i.i, label %for.end.i.i.i, label %for.body.i.i.i

for.end.i.i.i:                                    ; preds = %for.cond.backedge.i.i.i
  %puts164.i.i.i = call i32 @puts(i8* getelementptr inbounds ([61 x i8]* @str700, i64 0, i64 0)) #6
  %puts165.i.i.i = call i32 @puts(i8* getelementptr inbounds ([63 x i8]* @str701, i64 0, i64 0)) #6
  %26 = load %struct.param_info** @compiler_params, align 8, !tbaa !8
  %help.i.i.i = getelementptr inbounds %struct.param_info* %26, i64 5, i32 2
  %27 = load i8** %help.i.i.i, align 8, !tbaa !55
  %option.i.i.i = getelementptr inbounds %struct.param_info* %26, i64 5, i32 0
  %28 = load i8** %option.i.i.i, align 8, !tbaa !57
  %call20.i.i.i = call i64 @strlen(i8* %28) #6
  %sub.i.i.i = sub i64 21, %call20.i.i.i
  %conv21.i.i.i = trunc i64 %sub.i.i.i to i32
  %cmp22.i.i.i = icmp eq i8* %27, null
  br i1 %cmp22.i.i.i, label %for.cond13.backedge.i.i.i, label %land.lhs.true24.i.i.i

land.lhs.true24.i.i.i:                            ; preds = %for.end.i.i.i
  %29 = load i8* %27, align 1, !tbaa !5
  %cmp26.i.i.i = icmp eq i8 %29, 0
  br i1 %cmp26.i.i.i, label %for.cond13.backedge.i.i.i, label %if.then28.i.i.i

if.then28.i.i.i:                                  ; preds = %land.lhs.true24.i.i.i
  %cmp31.i.i.i = icmp slt i32 %conv21.i.i.i, 1
  %cond.i.i.i = select i1 %cmp31.i.i.i, i32 1, i32 %conv21.i.i.i
  %call33.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str627, i64 0, i64 0), i8* %28, i32 %cond.i.i.i, i8* getelementptr inbounds ([22 x i8]* @.str628, i64 0, i64 0), i8* %27) #6
  %.pre.i.i.i = load %struct.param_info** @compiler_params, align 8, !tbaa !8
  br label %for.cond13.backedge.i.i.i

for.cond13.backedge.i.i.i:                        ; preds = %if.then28.i.i.i, %land.lhs.true24.i.i.i, %for.end.i.i.i
  %30 = phi %struct.param_info* [ %.pre.i.i.i, %if.then28.i.i.i ], [ %26, %for.end.i.i.i ], [ %26, %land.lhs.true24.i.i.i ]
  %help.1.i.i.i = getelementptr inbounds %struct.param_info* %30, i64 4, i32 2
  %31 = load i8** %help.1.i.i.i, align 8, !tbaa !55
  %option.1.i.i.i = getelementptr inbounds %struct.param_info* %30, i64 4, i32 0
  %32 = load i8** %option.1.i.i.i, align 8, !tbaa !57
  %call20.1.i.i.i = call i64 @strlen(i8* %32) #6
  %sub.1.i.i.i = sub i64 21, %call20.1.i.i.i
  %conv21.1.i.i.i = trunc i64 %sub.1.i.i.i to i32
  %cmp22.1.i.i.i = icmp eq i8* %31, null
  br i1 %cmp22.1.i.i.i, label %for.cond13.backedge.1.i.i.i, label %land.lhs.true24.1.i.i.i

for.body43.i.i.i:                                 ; preds = %for.cond13.backedge.5.i.i.i, %for.cond40.backedge.i.i.i
  %dec41185.i.i.i = phi i64 [ 18, %for.cond13.backedge.5.i.i.i ], [ %dec41.i.i.i, %for.cond40.backedge.i.i.i ]
  %description46.i.i.i = getelementptr inbounds [19 x %struct.lang_independent_options]* @W_options, i64 0, i64 %dec41185.i.i.i, i32 3
  %33 = load i8** %description46.i.i.i, align 8, !tbaa !52
  %34 = load i8* %33, align 1, !tbaa !5
  %cmp51.i.i.i = icmp eq i8 %34, 0
  br i1 %cmp51.i.i.i, label %for.cond40.backedge.i.i.i, label %if.then53.i.i.i

if.then53.i.i.i:                                  ; preds = %for.body43.i.i.i
  %string55.i.i.i = getelementptr inbounds [19 x %struct.lang_independent_options]* @W_options, i64 0, i64 %dec41185.i.i.i, i32 0
  %35 = load i8** %string55.i.i.i, align 16, !tbaa !54
  %call56.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str633, i64 0, i64 0), i8* %35, i8* %33) #6
  br label %for.cond40.backedge.i.i.i

for.cond40.backedge.i.i.i:                        ; preds = %if.then53.i.i.i, %for.body43.i.i.i
  %dec41.i.i.i = add i64 %dec41185.i.i.i, -1
  %tobool42.i.i.i = icmp eq i64 %dec41185.i.i.i, 0
  br i1 %tobool42.i.i.i, label %for.end58.i.i.i, label %for.body43.i.i.i

for.end58.i.i.i:                                  ; preds = %for.cond40.backedge.i.i.i
  %puts170.i.i.i = call i32 @puts(i8* getelementptr inbounds ([49 x i8]* @str706, i64 0, i64 0)) #6
  %puts171.i.i.i = call i32 @puts(i8* getelementptr inbounds ([74 x i8]* @str707, i64 0, i64 0)) #6
  %puts172.i.i.i = call i32 @puts(i8* getelementptr inbounds ([52 x i8]* @str708, i64 0, i64 0)) #6
  %puts173.i.i.i = call i32 @puts(i8* getelementptr inbounds ([52 x i8]* @str709, i64 0, i64 0)) #6
  %puts174.i.i.i = call i32 @puts(i8* getelementptr inbounds ([148 x i8]* @str710, i64 0, i64 0)) #6
  br label %for.body67.i.i.i

for.body67.i.i.i:                                 ; preds = %for.cond64.backedge.i.i.i, %for.body67.i.i.i, %for.end58.i.i.i
  %dec65184.i.i.i = phi i64 [ 5, %for.end58.i.i.i ], [ %dec65.i.i.i, %for.cond64.backedge.i.i.i ], [ 4, %for.body67.i.i.i ]
  %cmp70.i.i.i = icmp eq i64 %dec65184.i.i.i, 5
  br i1 %cmp70.i.i.i, label %for.body67.i.i.i, label %for.cond64.backedge.i.i.i

for.cond64.backedge.i.i.i:                        ; preds = %for.body67.i.i.i
  %description69.i.i.i = getelementptr inbounds [6 x %struct.anon.5]* @debug_args, i64 0, i64 %dec65184.i.i.i, i32 3
  %36 = load i8** %description69.i.i.i, align 8, !tbaa !58
  %arg.i.i.i = getelementptr inbounds [6 x %struct.anon.5]* @debug_args, i64 0, i64 %dec65184.i.i.i, i32 0
  %37 = load i8** %arg.i.i.i, align 8, !tbaa !60
  %call76.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str639, i64 0, i64 0), i8* %37, i8* %36) #6
  %dec65.i.i.i = add i64 %dec65184.i.i.i, -1
  %tobool66.i.i.i = icmp eq i64 %dec65184.i.i.i, 0
  br i1 %tobool66.i.i.i, label %for.end78.i.i.i, label %for.body67.i.i.i

for.end78.i.i.i:                                  ; preds = %for.cond64.backedge.i.i.i
  %puts175.i.i.i = call i32 @puts(i8* getelementptr inbounds ([60 x i8]* @str711, i64 0, i64 0)) #6
  %puts176.i.i.i = call i32 @puts(i8* getelementptr inbounds ([76 x i8]* @str712, i64 0, i64 0)) #6
  %puts177.i.i.i = call i32 @puts(i8* getelementptr inbounds ([57 x i8]* @str713, i64 0, i64 0)) #6
  %puts178.i.i.i = call i32 @puts(i8* getelementptr inbounds ([76 x i8]* @str714, i64 0, i64 0)) #6
  %puts179.i.i.i = call i32 @puts(i8* getelementptr inbounds ([78 x i8]* @str715, i64 0, i64 0)) #6
  %puts180.i.i.i = call i32 @puts(i8* getelementptr inbounds ([68 x i8]* @str716, i64 0, i64 0)) #6
  %puts181.i.i.i = call i32 @puts(i8* getelementptr inbounds ([51 x i8]* @str717, i64 0, i64 0)) #6
  %puts182.i.i.i = call i32 @puts(i8* getelementptr inbounds ([28 x i8]* @str718, i64 0, i64 0)) #6
  br label %for.body90.i.i.i

for.body90.i.i.i:                                 ; preds = %for.inc.i.i.i, %for.end78.i.i.i
  %i.4183.i.i.i = phi i64 [ 0, %for.end78.i.i.i ], [ %inc.i.i.i, %for.inc.i.i.i ]
  %description93.i.i.i = getelementptr inbounds [108 x %struct.lang_opt]* @documented_lang_options, i64 0, i64 %i.4183.i.i.i, i32 1
  %38 = load i8** %description93.i.i.i, align 8, !tbaa !61
  %39 = load i8* %38, align 1, !tbaa !5
  %cmp105.i.i.i = icmp eq i8 %39, 0
  br i1 %cmp105.i.i.i, label %for.inc.i.i.i, label %if.else117.i.i.i

if.else117.i.i.i:                                 ; preds = %for.body90.i.i.i
  %option96.i.i.i = getelementptr inbounds [108 x %struct.lang_opt]* @documented_lang_options, i64 0, i64 %i.4183.i.i.i, i32 0
  %40 = load i8** %option96.i.i.i, align 16, !tbaa !63
  %call118.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @.str652, i64 0, i64 0), i8* %40, i8* %38) #6
  br label %for.inc.i.i.i

for.inc.i.i.i:                                    ; preds = %if.else117.i.i.i, %for.body90.i.i.i
  %inc.i.i.i = add i64 %i.4183.i.i.i, 1
  %exitcond.i.i.i = icmp eq i64 %inc.i.i.i, 108
  br i1 %exitcond.i.i.i, label %display_help.exit.i.i, label %for.body90.i.i.i

land.lhs.true24.1.i.i.i:                          ; preds = %for.cond13.backedge.i.i.i
  %41 = load i8* %31, align 1, !tbaa !5
  %cmp26.1.i.i.i = icmp eq i8 %41, 0
  br i1 %cmp26.1.i.i.i, label %for.cond13.backedge.1.i.i.i, label %if.then28.1.i.i.i

if.then28.1.i.i.i:                                ; preds = %land.lhs.true24.1.i.i.i
  %cmp31.1.i.i.i = icmp slt i32 %conv21.1.i.i.i, 1
  %cond.1.i.i.i = select i1 %cmp31.1.i.i.i, i32 1, i32 %conv21.1.i.i.i
  %call33.1.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str627, i64 0, i64 0), i8* %32, i32 %cond.1.i.i.i, i8* getelementptr inbounds ([22 x i8]* @.str628, i64 0, i64 0), i8* %31) #6
  %.pre188.i.i.i = load %struct.param_info** @compiler_params, align 8, !tbaa !8
  br label %for.cond13.backedge.1.i.i.i

for.cond13.backedge.1.i.i.i:                      ; preds = %if.then28.1.i.i.i, %land.lhs.true24.1.i.i.i, %for.cond13.backedge.i.i.i
  %42 = phi %struct.param_info* [ %.pre188.i.i.i, %if.then28.1.i.i.i ], [ %30, %land.lhs.true24.1.i.i.i ], [ %30, %for.cond13.backedge.i.i.i ]
  %help.2.i.i.i = getelementptr inbounds %struct.param_info* %42, i64 3, i32 2
  %43 = load i8** %help.2.i.i.i, align 8, !tbaa !55
  %option.2.i.i.i = getelementptr inbounds %struct.param_info* %42, i64 3, i32 0
  %44 = load i8** %option.2.i.i.i, align 8, !tbaa !57
  %call20.2.i.i.i = call i64 @strlen(i8* %44) #6
  %sub.2.i.i.i = sub i64 21, %call20.2.i.i.i
  %conv21.2.i.i.i = trunc i64 %sub.2.i.i.i to i32
  %cmp22.2.i.i.i = icmp eq i8* %43, null
  br i1 %cmp22.2.i.i.i, label %for.cond13.backedge.2.i.i.i, label %land.lhs.true24.2.i.i.i

land.lhs.true24.2.i.i.i:                          ; preds = %for.cond13.backedge.1.i.i.i
  %45 = load i8* %43, align 1, !tbaa !5
  %cmp26.2.i.i.i = icmp eq i8 %45, 0
  br i1 %cmp26.2.i.i.i, label %for.cond13.backedge.2.i.i.i, label %if.then28.2.i.i.i

if.then28.2.i.i.i:                                ; preds = %land.lhs.true24.2.i.i.i
  %cmp31.2.i.i.i = icmp slt i32 %conv21.2.i.i.i, 1
  %cond.2.i.i.i = select i1 %cmp31.2.i.i.i, i32 1, i32 %conv21.2.i.i.i
  %call33.2.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str627, i64 0, i64 0), i8* %44, i32 %cond.2.i.i.i, i8* getelementptr inbounds ([22 x i8]* @.str628, i64 0, i64 0), i8* %43) #6
  %.pre189.i.i.i = load %struct.param_info** @compiler_params, align 8, !tbaa !8
  br label %for.cond13.backedge.2.i.i.i

for.cond13.backedge.2.i.i.i:                      ; preds = %if.then28.2.i.i.i, %land.lhs.true24.2.i.i.i, %for.cond13.backedge.1.i.i.i
  %46 = phi %struct.param_info* [ %.pre189.i.i.i, %if.then28.2.i.i.i ], [ %42, %land.lhs.true24.2.i.i.i ], [ %42, %for.cond13.backedge.1.i.i.i ]
  %help.3.i.i.i = getelementptr inbounds %struct.param_info* %46, i64 2, i32 2
  %47 = load i8** %help.3.i.i.i, align 8, !tbaa !55
  %option.3.i.i.i = getelementptr inbounds %struct.param_info* %46, i64 2, i32 0
  %48 = load i8** %option.3.i.i.i, align 8, !tbaa !57
  %call20.3.i.i.i = call i64 @strlen(i8* %48) #6
  %sub.3.i.i.i = sub i64 21, %call20.3.i.i.i
  %conv21.3.i.i.i = trunc i64 %sub.3.i.i.i to i32
  %cmp22.3.i.i.i = icmp eq i8* %47, null
  br i1 %cmp22.3.i.i.i, label %for.cond13.backedge.3.i.i.i, label %land.lhs.true24.3.i.i.i

land.lhs.true24.3.i.i.i:                          ; preds = %for.cond13.backedge.2.i.i.i
  %49 = load i8* %47, align 1, !tbaa !5
  %cmp26.3.i.i.i = icmp eq i8 %49, 0
  br i1 %cmp26.3.i.i.i, label %for.cond13.backedge.3.i.i.i, label %if.then28.3.i.i.i

if.then28.3.i.i.i:                                ; preds = %land.lhs.true24.3.i.i.i
  %cmp31.3.i.i.i = icmp slt i32 %conv21.3.i.i.i, 1
  %cond.3.i.i.i = select i1 %cmp31.3.i.i.i, i32 1, i32 %conv21.3.i.i.i
  %call33.3.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str627, i64 0, i64 0), i8* %48, i32 %cond.3.i.i.i, i8* getelementptr inbounds ([22 x i8]* @.str628, i64 0, i64 0), i8* %47) #6
  %.pre190.i.i.i = load %struct.param_info** @compiler_params, align 8, !tbaa !8
  br label %for.cond13.backedge.3.i.i.i

for.cond13.backedge.3.i.i.i:                      ; preds = %if.then28.3.i.i.i, %land.lhs.true24.3.i.i.i, %for.cond13.backedge.2.i.i.i
  %50 = phi %struct.param_info* [ %.pre190.i.i.i, %if.then28.3.i.i.i ], [ %46, %land.lhs.true24.3.i.i.i ], [ %46, %for.cond13.backedge.2.i.i.i ]
  %help.4.i.i.i = getelementptr inbounds %struct.param_info* %50, i64 1, i32 2
  %51 = load i8** %help.4.i.i.i, align 8, !tbaa !55
  %option.4.i.i.i = getelementptr inbounds %struct.param_info* %50, i64 1, i32 0
  %52 = load i8** %option.4.i.i.i, align 8, !tbaa !57
  %call20.4.i.i.i = call i64 @strlen(i8* %52) #6
  %sub.4.i.i.i = sub i64 21, %call20.4.i.i.i
  %conv21.4.i.i.i = trunc i64 %sub.4.i.i.i to i32
  %cmp22.4.i.i.i = icmp eq i8* %51, null
  br i1 %cmp22.4.i.i.i, label %for.cond13.backedge.4.i.i.i, label %land.lhs.true24.4.i.i.i

land.lhs.true24.4.i.i.i:                          ; preds = %for.cond13.backedge.3.i.i.i
  %53 = load i8* %51, align 1, !tbaa !5
  %cmp26.4.i.i.i = icmp eq i8 %53, 0
  br i1 %cmp26.4.i.i.i, label %for.cond13.backedge.4.i.i.i, label %if.then28.4.i.i.i

if.then28.4.i.i.i:                                ; preds = %land.lhs.true24.4.i.i.i
  %cmp31.4.i.i.i = icmp slt i32 %conv21.4.i.i.i, 1
  %cond.4.i.i.i = select i1 %cmp31.4.i.i.i, i32 1, i32 %conv21.4.i.i.i
  %call33.4.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str627, i64 0, i64 0), i8* %52, i32 %cond.4.i.i.i, i8* getelementptr inbounds ([22 x i8]* @.str628, i64 0, i64 0), i8* %51) #6
  %.pre191.i.i.i = load %struct.param_info** @compiler_params, align 8, !tbaa !8
  br label %for.cond13.backedge.4.i.i.i

for.cond13.backedge.4.i.i.i:                      ; preds = %if.then28.4.i.i.i, %land.lhs.true24.4.i.i.i, %for.cond13.backedge.3.i.i.i
  %54 = phi %struct.param_info* [ %.pre191.i.i.i, %if.then28.4.i.i.i ], [ %50, %land.lhs.true24.4.i.i.i ], [ %50, %for.cond13.backedge.3.i.i.i ]
  %help.5.i.i.i = getelementptr inbounds %struct.param_info* %54, i64 0, i32 2
  %55 = load i8** %help.5.i.i.i, align 8, !tbaa !55
  %option.5.i.i.i = getelementptr inbounds %struct.param_info* %54, i64 0, i32 0
  %56 = load i8** %option.5.i.i.i, align 8, !tbaa !57
  %call20.5.i.i.i = call i64 @strlen(i8* %56) #6
  %sub.5.i.i.i = sub i64 21, %call20.5.i.i.i
  %conv21.5.i.i.i = trunc i64 %sub.5.i.i.i to i32
  %cmp22.5.i.i.i = icmp eq i8* %55, null
  br i1 %cmp22.5.i.i.i, label %for.cond13.backedge.5.i.i.i, label %land.lhs.true24.5.i.i.i

land.lhs.true24.5.i.i.i:                          ; preds = %for.cond13.backedge.4.i.i.i
  %57 = load i8* %55, align 1, !tbaa !5
  %cmp26.5.i.i.i = icmp eq i8 %57, 0
  br i1 %cmp26.5.i.i.i, label %for.cond13.backedge.5.i.i.i, label %if.then28.5.i.i.i

if.then28.5.i.i.i:                                ; preds = %land.lhs.true24.5.i.i.i
  %cmp31.5.i.i.i = icmp slt i32 %conv21.5.i.i.i, 1
  %cond.5.i.i.i = select i1 %cmp31.5.i.i.i, i32 1, i32 %conv21.5.i.i.i
  %call33.5.i.i.i = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str627, i64 0, i64 0), i8* %56, i32 %cond.5.i.i.i, i8* getelementptr inbounds ([22 x i8]* @.str628, i64 0, i64 0), i8* %55) #6
  br label %for.cond13.backedge.5.i.i.i

for.cond13.backedge.5.i.i.i:                      ; preds = %if.then28.5.i.i.i, %land.lhs.true24.5.i.i.i, %for.cond13.backedge.4.i.i.i
  %puts166.i.i.i = call i32 @puts(i8* getelementptr inbounds ([78 x i8]* @str702, i64 0, i64 0)) #6
  %puts167.i.i.i = call i32 @puts(i8* getelementptr inbounds ([73 x i8]* @str703, i64 0, i64 0)) #6
  %puts168.i.i.i = call i32 @puts(i8* getelementptr inbounds ([44 x i8]* @str704, i64 0, i64 0)) #6
  %puts169.i.i.i = call i32 @puts(i8* getelementptr inbounds ([48 x i8]* @str705, i64 0, i64 0)) #6
  br label %for.body43.i.i.i

display_help.exit.i.i:                            ; preds = %for.inc.i.i.i
  call fastcc void @display_target_options() #6
  store i1 true, i1* @exit_after_options, align 1
  br label %if.end14.i.i

if.end14.i.i:                                     ; preds = %display_help.exit.i.i, %if.end12.i.i
  %call15.i.i = call i32 @strcmp(i8* %arrayidx3.i.i, i8* getelementptr inbounds ([13 x i8]* @.str520, i64 0, i64 0)) #6
  %tobool16.i.i = icmp eq i32 %call15.i.i, 0
  br i1 %tobool16.i.i, label %if.then17.i.i, label %if.end18.i.i

if.then17.i.i:                                    ; preds = %if.end14.i.i
  call fastcc void @display_target_options() #6
  store i1 true, i1* @exit_after_options, align 1
  br label %if.end18.i.i

if.end18.i.i:                                     ; preds = %if.then17.i.i, %if.end14.i.i
  %call19.i.i = call i32 @strcmp(i8* %arrayidx3.i.i, i8* getelementptr inbounds ([9 x i8]* @.str32, i64 0, i64 0)) #6
  %tobool20.i211.i = icmp eq i32 %call19.i.i, 0
  br i1 %tobool20.i211.i, label %if.then21.i.i, label %if.end22.i.i

if.then21.i.i:                                    ; preds = %if.end18.i.i
  call void (%struct._IO_FILE*, i8*, ...)* @fnotice(%struct._IO_FILE* %16, i8* getelementptr inbounds ([57 x i8]* @.str342, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0), i8* %17, i8* %18, i8* getelementptr inbounds ([7 x i8]* @.str343, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8]* @.str344, i64 0, i64 0)) #6
  store i1 true, i1* @exit_after_options, align 1
  br label %if.end22.i.i

if.end22.i.i:                                     ; preds = %if.then21.i.i, %if.end18.i.i
  %call23.i.i = call i32 @strcmp(i8* %arrayidx3.i.i, i8* getelementptr inbounds ([7 x i8]* @.str521, i64 0, i64 0)) #6
  %cmp24.i.i = icmp eq i32 %call23.i.i, 0
  br i1 %cmp24.i.i, label %if.then26.i.i, label %if.end43.i.i

if.then26.i.i:                                    ; preds = %if.end22.i.i
  %cmp27.i.i = icmp eq i32 %sub.i, 1
  br i1 %cmp27.i.i, label %if.then29.i.i, label %if.end30.i.i

if.then29.i.i:                                    ; preds = %if.then26.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([31 x i8]* @.str522, i64 0, i64 0)) #6
  br label %if.end69.i

if.end30.i.i:                                     ; preds = %if.then26.i.i
  %add.ptr58.sum220.i = add i64 %idx.ext.i, 1
  %arrayidx31.i.i = getelementptr inbounds i8** %argv, i64 %add.ptr58.sum220.i
  %58 = load i8** %arrayidx31.i.i, align 8, !tbaa !8
  %call32.i.i = call i8* @strchr(i8* %58, i32 61) #6
  %tobool33.i.i = icmp eq i8* %call32.i.i, null
  br i1 %tobool33.i.i, label %if.then34.i.i, label %if.else.i.i

if.then34.i.i:                                    ; preds = %if.end30.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([27 x i8]* @.str523, i64 0, i64 0), i8* %58) #6
  br label %if.end69.i

if.else.i.i:                                      ; preds = %if.end30.i.i
  store i8 0, i8* %call32.i.i, align 1, !tbaa !5
  %add.ptr.i.i = getelementptr inbounds i8* %call32.i.i, i64 1
  %59 = load i8* %add.ptr.i.i, align 1, !tbaa !5
  %tobool20.i.i.i = icmp eq i8 %59, 0
  br i1 %tobool20.i.i.i, label %read_integral_parameter.exit.i.i, label %while.body.i.i.i

while.cond.i.i.i:                                 ; preds = %while.body.i.i.i
  %60 = load i8* %incdec.ptr.i.i.i, align 1, !tbaa !5
  %tobool.i229.i.i = icmp eq i8 %60, 0
  br i1 %tobool.i229.i.i, label %read_integral_parameter.exit.i.i, label %while.body.i.i.i

while.body.i.i.i:                                 ; preds = %if.else.i.i, %while.cond.i.i.i
  %.pr.i.i.i = phi i8 [ %60, %while.cond.i.i.i ], [ %59, %if.else.i.i ]
  %endp.021.i.i.i = phi i8* [ %incdec.ptr.i.i.i, %while.cond.i.i.i ], [ %add.ptr.i.i, %if.else.i.i ]
  %idxprom.i.i.i = zext i8 %.pr.i.i.i to i64
  %arrayidx.i.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i.i.i
  %61 = load i16* %arrayidx.i.i.i, align 2, !tbaa !6
  %and2.i.i.i = and i16 %61, 4
  %tobool3.i.i.i = icmp eq i16 %and2.i.i.i, 0
  %incdec.ptr.i.i.i = getelementptr inbounds i8* %endp.021.i.i.i, i64 1
  br i1 %tobool3.i.i.i, label %if.else39.i.i, label %while.cond.i.i.i

read_integral_parameter.exit.i.i:                 ; preds = %while.cond.i.i.i, %if.else.i.i
  %call.i.i.i = call i32 @atoi(i8* %add.ptr.i.i) #6
  %cmp36.i.i = icmp eq i32 %call.i.i.i, -1
  br i1 %cmp36.i.i, label %if.else39.i.i, label %if.then38.i.i

if.then38.i.i:                                    ; preds = %read_integral_parameter.exit.i.i
  call void @set_param_value(i8* %58, i32 %call.i.i.i) #6
  br label %if.end69.i

if.else39.i.i:                                    ; preds = %while.body.i.i.i, %read_integral_parameter.exit.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([29 x i8]* @.str524, i64 0, i64 0), i8* %add.ptr.i.i) #6
  br label %if.end69.i

if.end43.i.i:                                     ; preds = %if.end22.i.i
  %62 = load i8* %arrayidx3.i.i, align 1, !tbaa !5
  %cmp45.i.i = icmp eq i8 %62, 89
  %incdec.ptr48.i.i = getelementptr inbounds i8* %20, i64 2
  %incdec.ptr48.incdec.ptr.i.i = select i1 %cmp45.i.i, i8* %incdec.ptr48.i.i, i8* %arrayidx3.i.i
  %63 = load i8* %incdec.ptr48.incdec.ptr.i.i, align 1, !tbaa !5
  %conv50.i.i = sext i8 %63 to i32
  switch i32 %conv50.i.i, label %if.end69.i [
    i32 79, label %sw.epilog.i.i
    i32 109, label %sw.bb.i.i
    i32 102, label %sw.bb52.i.i
    i32 103, label %sw.bb55.i.i
    i32 100, label %sw.bb58.i.i
    i32 112, label %sw.bb70.i.i
    i32 113, label %sw.bb88.i.i
    i32 118, label %sw.bb94.i.i
    i32 119, label %sw.bb100.i.i
    i32 87, label %sw.bb108.i.i
    i32 97, label %sw.bb122.i.i
    i32 111, label %sw.bb148.i.i
    i32 71, label %sw.bb160.i.i
  ]

sw.bb.i.i:                                        ; preds = %if.end43.i.i
  %add.ptr51.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 1
  call fastcc void @set_target_switch(i8* %add.ptr51.i.i) #6
  br label %sw.epilog.i.i

sw.bb52.i.i:                                      ; preds = %if.end43.i.i
  %add.ptr53.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 1
  %arrayidx8.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 2
  %arrayidx13.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 3
  %add.ptr.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 4
  br label %for.body.i232.i.i

for.body.i232.i.i:                                ; preds = %for.cond.backedge.i235.i.i, %sw.bb52.i.i
  %indvars.iv.i.i.i = phi i64 [ 96, %sw.bb52.i.i ], [ %indvars.iv.next.i.i.i, %for.cond.backedge.i235.i.i ]
  %string.i230.i.i = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %indvars.iv.i.i.i, i32 0
  %64 = load i8** %string.i230.i.i, align 16, !tbaa !54
  %call.i231.i.i = call i32 @strcmp(i8* %add.ptr53.i.i, i8* %64) #6
  %tobool1.i.i.i = icmp eq i32 %call.i231.i.i, 0
  br i1 %tobool1.i.i.i, label %if.then.i233.i.i, label %if.end.i.i.i

if.then.i233.i.i:                                 ; preds = %for.body.i232.i.i
  %on_value.i.i.i = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %indvars.iv.i.i.i, i32 2
  %65 = load i32* %on_value.i.i.i, align 16, !tbaa !64
  %variable.i.i.i = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %indvars.iv.i.i.i, i32 1
  %66 = load i32** %variable.i.i.i, align 8, !tbaa !65
  store i32 %65, i32* %66, align 4, !tbaa !1
  br label %if.end69.i

if.end.i.i.i:                                     ; preds = %for.body.i232.i.i
  %67 = load i8* %add.ptr53.i.i, align 1, !tbaa !5
  %cmp.i.i.i = icmp eq i8 %67, 110
  br i1 %cmp.i.i.i, label %land.lhs.true.i.i.i, label %for.cond.backedge.i235.i.i

land.lhs.true.i.i.i:                              ; preds = %if.end.i.i.i
  %68 = load i8* %arrayidx8.i.i.i, align 1, !tbaa !5
  %cmp10.i.i.i = icmp eq i8 %68, 111
  br i1 %cmp10.i.i.i, label %land.lhs.true12.i.i.i, label %for.cond.backedge.i235.i.i

land.lhs.true12.i.i.i:                            ; preds = %land.lhs.true.i.i.i
  %69 = load i8* %arrayidx13.i.i.i, align 1, !tbaa !5
  %cmp15.i.i.i = icmp eq i8 %69, 45
  br i1 %cmp15.i.i.i, label %land.lhs.true17.i.i.i, label %for.cond.backedge.i235.i.i

for.cond.backedge.i235.i.i:                       ; preds = %land.lhs.true17.i.i.i, %land.lhs.true12.i.i.i, %land.lhs.true.i.i.i, %if.end.i.i.i
  %indvars.iv.next.i.i.i = add nsw i64 %indvars.iv.i.i.i, -1
  %70 = trunc i64 %indvars.iv.i.i.i to i32
  %tobool.i234.i.i = icmp eq i32 %70, 0
  br i1 %tobool.i234.i.i, label %for.end.i236.i.i, label %for.body.i232.i.i

land.lhs.true17.i.i.i:                            ; preds = %land.lhs.true12.i.i.i
  %call21.i.i.i = call i32 @strcmp(i8* %add.ptr.i.i.i, i8* %64) #6
  %tobool22.i.i.i = icmp eq i32 %call21.i.i.i, 0
  br i1 %tobool22.i.i.i, label %if.then23.i.i.i, label %for.cond.backedge.i235.i.i

if.then23.i.i.i:                                  ; preds = %land.lhs.true17.i.i.i
  %on_value26.i.i.i = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %indvars.iv.i.i.i, i32 2
  %71 = load i32* %on_value26.i.i.i, align 16, !tbaa !64
  %lnot.i.i.i = icmp eq i32 %71, 0
  %lnot.ext.i.i.i = zext i1 %lnot.i.i.i to i32
  %variable30.i.i.i = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %indvars.iv.i.i.i, i32 1
  %72 = load i32** %variable30.i.i.i, align 8, !tbaa !65
  store i32 %lnot.ext.i.i.i, i32* %72, align 4, !tbaa !1
  br label %if.end69.i

for.end.i236.i.i:                                 ; preds = %for.cond.backedge.i235.i.i
  %call32.i.i.i = call i32 @strcmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([10 x i8]* @.str593, i64 0, i64 0)) #6
  %tobool33.i.i.i = icmp eq i32 %call32.i.i.i, 0
  br i1 %tobool33.i.i.i, label %if.then34.i.i.i, label %if.else.i.i.i

if.then34.i.i.i:                                  ; preds = %for.end.i236.i.i
  store i32 0, i32* @flag_trapping_math, align 4, !tbaa !1
  store i32 1, i32* @flag_unsafe_math_optimizations, align 4, !tbaa !1
  store i32 0, i32* @flag_errno_math, align 4, !tbaa !1
  br label %if.end238.i.i.i

if.else.i.i.i:                                    ; preds = %for.end.i236.i.i
  %call35.i.i.i = call i32 @strcmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([13 x i8]* @.str594, i64 0, i64 0)) #6
  %tobool36.i.i.i = icmp eq i32 %call35.i.i.i, 0
  br i1 %tobool36.i.i.i, label %if.then37.i.i.i, label %if.else38.i.i.i

if.then37.i.i.i:                                  ; preds = %if.else.i.i.i
  store i32 1, i32* @flag_trapping_math, align 4, !tbaa !1
  store i32 0, i32* @flag_unsafe_math_optimizations, align 4, !tbaa !1
  store i32 1, i32* @flag_errno_math, align 4, !tbaa !1
  br label %if.end238.i.i.i

if.else38.i.i.i:                                  ; preds = %if.else.i.i.i
  %call39.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([14 x i8]* @.str595, i64 0, i64 0), i64 13) #6
  %add.ptr41.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 14
  %not.tobool40.i.i.i = icmp eq i32 %call39.i.i.i, 0
  br i1 %not.tobool40.i.i.i, label %if.then51.i.i.i, label %lor.lhs.false.i.i.i

lor.lhs.false.i.i.i:                              ; preds = %if.else38.i.i.i
  %call43.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([14 x i8]* @.str596, i64 0, i64 0), i64 13) #6
  %not.tobool44.i.i.i = icmp eq i32 %call43.i.i.i, 0
  br i1 %not.tobool44.i.i.i, label %if.then51.i.i.i, label %if.else55.i.i.i

if.then51.i.i.i:                                  ; preds = %lor.lhs.false.i.i.i, %if.else38.i.i.i
  %add.ptr52.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  %73 = load %struct.param_info** @compiler_params, align 8, !tbaa !8
  %value.i.i.i = getelementptr inbounds %struct.param_info* %73, i64 0, i32 1
  %74 = load i32* %value.i.i.i, align 4, !tbaa !66
  %75 = load i8* %add.ptr41.i.i.i, align 1, !tbaa !5
  %tobool20.i302.i.i.i = icmp eq i8 %75, 0
  br i1 %tobool20.i302.i.i.i, label %if.end11.i315.i.i.i, label %while.body.i312.i.i.i

while.cond.i304.i.i.i:                            ; preds = %while.body.i312.i.i.i
  %76 = load i8* %incdec.ptr.i311.i.i.i, align 1, !tbaa !5
  %tobool.i303.i.i.i = icmp eq i8 %76, 0
  br i1 %tobool.i303.i.i.i, label %if.end11.i315.i.i.i, label %while.body.i312.i.i.i

while.body.i312.i.i.i:                            ; preds = %if.then51.i.i.i, %while.cond.i304.i.i.i
  %.pr.i305.i.i.i = phi i8 [ %76, %while.cond.i304.i.i.i ], [ %75, %if.then51.i.i.i ]
  %endp.021.i306.i.i.i = phi i8* [ %incdec.ptr.i311.i.i.i, %while.cond.i304.i.i.i ], [ %add.ptr41.i.i.i, %if.then51.i.i.i ]
  %idxprom.i307.i.i.i = zext i8 %.pr.i305.i.i.i to i64
  %arrayidx.i308.i.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i307.i.i.i
  %77 = load i16* %arrayidx.i308.i.i.i, align 2, !tbaa !6
  %and2.i309.i.i.i = and i16 %77, 4
  %tobool3.i310.i.i.i = icmp eq i16 %and2.i309.i.i.i, 0
  %incdec.ptr.i311.i.i.i = getelementptr inbounds i8* %endp.021.i306.i.i.i, i64 1
  br i1 %tobool3.i310.i.i.i, label %if.then6.i313.i.i.i, label %while.cond.i304.i.i.i

if.then6.i313.i.i.i:                              ; preds = %while.body.i312.i.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %add.ptr52.i.i.i) #6
  br label %read_integral_parameter.exit317.i.i.i

if.end11.i315.i.i.i:                              ; preds = %while.cond.i304.i.i.i, %if.then51.i.i.i
  %call.i314.i.i.i = call i32 @atoi(i8* %add.ptr41.i.i.i) #6
  br label %read_integral_parameter.exit317.i.i.i

read_integral_parameter.exit317.i.i.i:            ; preds = %if.end11.i315.i.i.i, %if.then6.i313.i.i.i
  %retval.0.i316.i.i.i = phi i32 [ %call.i314.i.i.i, %if.end11.i315.i.i.i ], [ %74, %if.then6.i313.i.i.i ]
  call void @set_param_value(i8* getelementptr inbounds ([17 x i8]* @.str597, i64 0, i64 0), i32 %retval.0.i316.i.i.i) #6
  br label %if.end238.i.i.i

if.else55.i.i.i:                                  ; preds = %lor.lhs.false.i.i.i
  %call56.i237.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([15 x i8]* @.str598, i64 0, i64 0), i64 14) #6
  %tobool57.i.i.i = icmp eq i32 %call56.i237.i.i, 0
  %add.ptr60.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 15
  %add.ptr60..i.i.i = select i1 %tobool57.i.i.i, i8* %add.ptr60.i.i.i, i8* null
  %tobool63.i.i.i = icmp eq i8* %add.ptr60..i.i.i, null
  br i1 %tobool63.i.i.i, label %if.else65.i.i.i, label %if.then64.i.i.i

if.then64.i.i.i:                                  ; preds = %if.else55.i.i.i
  call void @fix_sched_param(i8* getelementptr inbounds ([8 x i8]* @.str599, i64 0, i64 0), i8* %add.ptr60..i.i.i) #6
  br label %if.end238.i.i.i

if.else65.i.i.i:                                  ; preds = %if.else55.i.i.i
  %call66.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([7 x i8]* @.str600, i64 0, i64 0), i64 6) #6
  %tobool67.i.i.i = icmp eq i32 %call66.i.i.i, 0
  %add.ptr70.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 7
  %add.ptr70..i.i.i = select i1 %tobool67.i.i.i, i8* %add.ptr70.i.i.i, i8* null
  %tobool73.i.i.i = icmp eq i8* %add.ptr70..i.i.i, null
  br i1 %tobool73.i.i.i, label %if.else75.i.i.i, label %if.then74.i.i.i

if.then74.i.i.i:                                  ; preds = %if.else65.i.i.i
  call void @fix_register(i8* %add.ptr70..i.i.i, i32 1, i32 1) #6
  br label %if.end238.i.i.i

if.else75.i.i.i:                                  ; preds = %if.else65.i.i.i
  %call76.i238.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([11 x i8]* @.str601, i64 0, i64 0), i64 10) #6
  %tobool77.i.i.i = icmp eq i32 %call76.i238.i.i, 0
  %add.ptr80.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 11
  %add.ptr80..i.i.i = select i1 %tobool77.i.i.i, i8* %add.ptr80.i.i.i, i8* null
  %tobool83.i.i.i = icmp eq i8* %add.ptr80..i.i.i, null
  br i1 %tobool83.i.i.i, label %if.else85.i.i.i, label %if.then84.i.i.i

if.then84.i.i.i:                                  ; preds = %if.else75.i.i.i
  call void @fix_register(i8* %add.ptr80..i.i.i, i32 0, i32 1) #6
  br label %if.end238.i.i.i

if.else85.i.i.i:                                  ; preds = %if.else75.i.i.i
  %call86.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([12 x i8]* @.str602, i64 0, i64 0), i64 11) #6
  %tobool87.i.i.i = icmp eq i32 %call86.i.i.i, 0
  %add.ptr90.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 12
  %add.ptr90..i.i.i = select i1 %tobool87.i.i.i, i8* %add.ptr90.i.i.i, i8* null
  %tobool93.i.i.i = icmp eq i8* %add.ptr90..i.i.i, null
  br i1 %tobool93.i.i.i, label %if.else95.i.i.i, label %if.then94.i.i.i

if.then94.i.i.i:                                  ; preds = %if.else85.i.i.i
  call void @fix_register(i8* %add.ptr90..i.i.i, i32 0, i32 0) #6
  br label %if.end238.i.i.i

if.else95.i.i.i:                                  ; preds = %if.else85.i.i.i
  %call96.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([13 x i8]* @.str45, i64 0, i64 0), i64 12) #6
  %tobool97.i.i.i = icmp eq i32 %call96.i.i.i, 0
  %add.ptr100.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 13
  %add.ptr100..i.i.i = select i1 %tobool97.i.i.i, i8* %add.ptr100.i.i.i, i8* null
  %tobool103.i.i.i = icmp eq i8* %add.ptr100..i.i.i, null
  br i1 %tobool103.i.i.i, label %if.else107.i.i.i, label %if.then104.i.i.i

if.then104.i.i.i:                                 ; preds = %if.else95.i.i.i
  %add.ptr105.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  %78 = load i32* @align_loops, align 4, !tbaa !1
  %79 = load i8* %add.ptr100..i.i.i, align 1, !tbaa !5
  %tobool20.i318.i.i.i = icmp eq i8 %79, 0
  br i1 %tobool20.i318.i.i.i, label %if.end11.i331.i.i.i, label %while.body.i328.i.i.i

while.cond.i320.i.i.i:                            ; preds = %while.body.i328.i.i.i
  %80 = load i8* %incdec.ptr.i327.i.i.i, align 1, !tbaa !5
  %tobool.i319.i.i.i = icmp eq i8 %80, 0
  br i1 %tobool.i319.i.i.i, label %if.end11.i331.i.i.i, label %while.body.i328.i.i.i

while.body.i328.i.i.i:                            ; preds = %if.then104.i.i.i, %while.cond.i320.i.i.i
  %.pr.i321.i.i.i = phi i8 [ %80, %while.cond.i320.i.i.i ], [ %79, %if.then104.i.i.i ]
  %endp.021.i322.i.i.i = phi i8* [ %incdec.ptr.i327.i.i.i, %while.cond.i320.i.i.i ], [ %add.ptr100.i.i.i, %if.then104.i.i.i ]
  %idxprom.i323.i.i.i = zext i8 %.pr.i321.i.i.i to i64
  %arrayidx.i324.i.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i323.i.i.i
  %81 = load i16* %arrayidx.i324.i.i.i, align 2, !tbaa !6
  %and2.i325.i.i.i = and i16 %81, 4
  %tobool3.i326.i.i.i = icmp eq i16 %and2.i325.i.i.i, 0
  %incdec.ptr.i327.i.i.i = getelementptr inbounds i8* %endp.021.i322.i.i.i, i64 1
  br i1 %tobool3.i326.i.i.i, label %if.then6.i329.i.i.i, label %while.cond.i320.i.i.i

if.then6.i329.i.i.i:                              ; preds = %while.body.i328.i.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %add.ptr105.i.i.i) #6
  br label %read_integral_parameter.exit333.i.i.i

if.end11.i331.i.i.i:                              ; preds = %while.cond.i320.i.i.i, %if.then104.i.i.i
  %call.i330.i.i.i = call i32 @atoi(i8* %add.ptr100..i.i.i) #6
  br label %read_integral_parameter.exit333.i.i.i

read_integral_parameter.exit333.i.i.i:            ; preds = %if.end11.i331.i.i.i, %if.then6.i329.i.i.i
  %retval.0.i332.i.i.i = phi i32 [ %call.i330.i.i.i, %if.end11.i331.i.i.i ], [ %78, %if.then6.i329.i.i.i ]
  store i32 %retval.0.i332.i.i.i, i32* @align_loops, align 4, !tbaa !1
  br label %if.end238.i.i.i

if.else107.i.i.i:                                 ; preds = %if.else95.i.i.i
  %call108.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([17 x i8]* @.str49, i64 0, i64 0), i64 16) #6
  %tobool109.i.i.i = icmp eq i32 %call108.i.i.i, 0
  %add.ptr112.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 17
  %add.ptr112..i.i.i = select i1 %tobool109.i.i.i, i8* %add.ptr112.i.i.i, i8* null
  %tobool115.i.i.i = icmp eq i8* %add.ptr112..i.i.i, null
  br i1 %tobool115.i.i.i, label %if.else119.i.i.i, label %if.then116.i.i.i

if.then116.i.i.i:                                 ; preds = %if.else107.i.i.i
  %add.ptr117.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  %82 = load i32* @align_functions, align 4, !tbaa !1
  %83 = load i8* %add.ptr112..i.i.i, align 1, !tbaa !5
  %tobool20.i334.i.i.i = icmp eq i8 %83, 0
  br i1 %tobool20.i334.i.i.i, label %if.end11.i347.i.i.i, label %while.body.i344.i.i.i

while.cond.i336.i.i.i:                            ; preds = %while.body.i344.i.i.i
  %84 = load i8* %incdec.ptr.i343.i.i.i, align 1, !tbaa !5
  %tobool.i335.i.i.i = icmp eq i8 %84, 0
  br i1 %tobool.i335.i.i.i, label %if.end11.i347.i.i.i, label %while.body.i344.i.i.i

while.body.i344.i.i.i:                            ; preds = %if.then116.i.i.i, %while.cond.i336.i.i.i
  %.pr.i337.i.i.i = phi i8 [ %84, %while.cond.i336.i.i.i ], [ %83, %if.then116.i.i.i ]
  %endp.021.i338.i.i.i = phi i8* [ %incdec.ptr.i343.i.i.i, %while.cond.i336.i.i.i ], [ %add.ptr112.i.i.i, %if.then116.i.i.i ]
  %idxprom.i339.i.i.i = zext i8 %.pr.i337.i.i.i to i64
  %arrayidx.i340.i.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i339.i.i.i
  %85 = load i16* %arrayidx.i340.i.i.i, align 2, !tbaa !6
  %and2.i341.i.i.i = and i16 %85, 4
  %tobool3.i342.i.i.i = icmp eq i16 %and2.i341.i.i.i, 0
  %incdec.ptr.i343.i.i.i = getelementptr inbounds i8* %endp.021.i338.i.i.i, i64 1
  br i1 %tobool3.i342.i.i.i, label %if.then6.i345.i.i.i, label %while.cond.i336.i.i.i

if.then6.i345.i.i.i:                              ; preds = %while.body.i344.i.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %add.ptr117.i.i.i) #6
  br label %read_integral_parameter.exit349.i.i.i

if.end11.i347.i.i.i:                              ; preds = %while.cond.i336.i.i.i, %if.then116.i.i.i
  %call.i346.i.i.i = call i32 @atoi(i8* %add.ptr112..i.i.i) #6
  br label %read_integral_parameter.exit349.i.i.i

read_integral_parameter.exit349.i.i.i:            ; preds = %if.end11.i347.i.i.i, %if.then6.i345.i.i.i
  %retval.0.i348.i.i.i = phi i32 [ %call.i346.i.i.i, %if.end11.i347.i.i.i ], [ %82, %if.then6.i345.i.i.i ]
  store i32 %retval.0.i348.i.i.i, i32* @align_functions, align 4, !tbaa !1
  br label %if.end238.i.i.i

if.else119.i.i.i:                                 ; preds = %if.else107.i.i.i
  %call120.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([13 x i8]* @.str47, i64 0, i64 0), i64 12) #6
  %tobool121.i.i.i = icmp eq i32 %call120.i.i.i, 0
  %add.ptr124..i.i.i = select i1 %tobool121.i.i.i, i8* %add.ptr100.i.i.i, i8* null
  %tobool127.i.i.i = icmp eq i8* %add.ptr124..i.i.i, null
  br i1 %tobool127.i.i.i, label %if.else131.i.i.i, label %if.then128.i.i.i

if.then128.i.i.i:                                 ; preds = %if.else119.i.i.i
  %add.ptr129.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  %86 = load i32* @align_jumps, align 4, !tbaa !1
  %87 = load i8* %add.ptr124..i.i.i, align 1, !tbaa !5
  %tobool20.i350.i.i.i = icmp eq i8 %87, 0
  br i1 %tobool20.i350.i.i.i, label %if.end11.i363.i.i.i, label %while.body.i360.i.i.i

while.cond.i352.i.i.i:                            ; preds = %while.body.i360.i.i.i
  %88 = load i8* %incdec.ptr.i359.i.i.i, align 1, !tbaa !5
  %tobool.i351.i.i.i = icmp eq i8 %88, 0
  br i1 %tobool.i351.i.i.i, label %if.end11.i363.i.i.i, label %while.body.i360.i.i.i

while.body.i360.i.i.i:                            ; preds = %if.then128.i.i.i, %while.cond.i352.i.i.i
  %.pr.i353.i.i.i = phi i8 [ %88, %while.cond.i352.i.i.i ], [ %87, %if.then128.i.i.i ]
  %endp.021.i354.i.i.i = phi i8* [ %incdec.ptr.i359.i.i.i, %while.cond.i352.i.i.i ], [ %add.ptr100.i.i.i, %if.then128.i.i.i ]
  %idxprom.i355.i.i.i = zext i8 %.pr.i353.i.i.i to i64
  %arrayidx.i356.i.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i355.i.i.i
  %89 = load i16* %arrayidx.i356.i.i.i, align 2, !tbaa !6
  %and2.i357.i.i.i = and i16 %89, 4
  %tobool3.i358.i.i.i = icmp eq i16 %and2.i357.i.i.i, 0
  %incdec.ptr.i359.i.i.i = getelementptr inbounds i8* %endp.021.i354.i.i.i, i64 1
  br i1 %tobool3.i358.i.i.i, label %if.then6.i361.i.i.i, label %while.cond.i352.i.i.i

if.then6.i361.i.i.i:                              ; preds = %while.body.i360.i.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %add.ptr129.i.i.i) #6
  br label %read_integral_parameter.exit365.i.i.i

if.end11.i363.i.i.i:                              ; preds = %while.cond.i352.i.i.i, %if.then128.i.i.i
  %call.i362.i.i.i = call i32 @atoi(i8* %add.ptr124..i.i.i) #6
  br label %read_integral_parameter.exit365.i.i.i

read_integral_parameter.exit365.i.i.i:            ; preds = %if.end11.i363.i.i.i, %if.then6.i361.i.i.i
  %retval.0.i364.i.i.i = phi i32 [ %call.i362.i.i.i, %if.end11.i363.i.i.i ], [ %86, %if.then6.i361.i.i.i ]
  store i32 %retval.0.i364.i.i.i, i32* @align_jumps, align 4, !tbaa !1
  br label %if.end238.i.i.i

if.else131.i.i.i:                                 ; preds = %if.else119.i.i.i
  %call132.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([14 x i8]* @.str603, i64 0, i64 0), i64 13) #6
  %tobool133.i.i.i = icmp eq i32 %call132.i.i.i, 0
  %add.ptr136..i.i.i = select i1 %tobool133.i.i.i, i8* %add.ptr41.i.i.i, i8* null
  %tobool139.i.i.i = icmp eq i8* %add.ptr136..i.i.i, null
  br i1 %tobool139.i.i.i, label %if.else143.i.i.i, label %if.then140.i.i.i

if.then140.i.i.i:                                 ; preds = %if.else131.i.i.i
  %add.ptr141.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  %90 = load i32* @align_labels, align 4, !tbaa !1
  %91 = load i8* %add.ptr136..i.i.i, align 1, !tbaa !5
  %tobool20.i366.i.i.i = icmp eq i8 %91, 0
  br i1 %tobool20.i366.i.i.i, label %if.end11.i379.i.i.i, label %while.body.i376.i.i.i

while.cond.i368.i.i.i:                            ; preds = %while.body.i376.i.i.i
  %92 = load i8* %incdec.ptr.i375.i.i.i, align 1, !tbaa !5
  %tobool.i367.i.i.i = icmp eq i8 %92, 0
  br i1 %tobool.i367.i.i.i, label %if.end11.i379.i.i.i, label %while.body.i376.i.i.i

while.body.i376.i.i.i:                            ; preds = %if.then140.i.i.i, %while.cond.i368.i.i.i
  %.pr.i369.i.i.i = phi i8 [ %92, %while.cond.i368.i.i.i ], [ %91, %if.then140.i.i.i ]
  %endp.021.i370.i.i.i = phi i8* [ %incdec.ptr.i375.i.i.i, %while.cond.i368.i.i.i ], [ %add.ptr41.i.i.i, %if.then140.i.i.i ]
  %idxprom.i371.i.i.i = zext i8 %.pr.i369.i.i.i to i64
  %arrayidx.i372.i.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i371.i.i.i
  %93 = load i16* %arrayidx.i372.i.i.i, align 2, !tbaa !6
  %and2.i373.i.i.i = and i16 %93, 4
  %tobool3.i374.i.i.i = icmp eq i16 %and2.i373.i.i.i, 0
  %incdec.ptr.i375.i.i.i = getelementptr inbounds i8* %endp.021.i370.i.i.i, i64 1
  br i1 %tobool3.i374.i.i.i, label %if.then6.i377.i.i.i, label %while.cond.i368.i.i.i

if.then6.i377.i.i.i:                              ; preds = %while.body.i376.i.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %add.ptr141.i.i.i) #6
  br label %read_integral_parameter.exit381.i.i.i

if.end11.i379.i.i.i:                              ; preds = %while.cond.i368.i.i.i, %if.then140.i.i.i
  %call.i378.i.i.i = call i32 @atoi(i8* %add.ptr136..i.i.i) #6
  br label %read_integral_parameter.exit381.i.i.i

read_integral_parameter.exit381.i.i.i:            ; preds = %if.end11.i379.i.i.i, %if.then6.i377.i.i.i
  %retval.0.i380.i.i.i = phi i32 [ %call.i378.i.i.i, %if.end11.i379.i.i.i ], [ %90, %if.then6.i377.i.i.i ]
  store i32 %retval.0.i380.i.i.i, i32* @align_labels, align 4, !tbaa !1
  br label %if.end238.i.i.i

if.else143.i.i.i:                                 ; preds = %if.else131.i.i.i
  %call144.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([22 x i8]* @.str604, i64 0, i64 0), i64 21) #6
  %tobool145.i.i.i = icmp eq i32 %call144.i.i.i, 0
  %add.ptr148.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 22
  %add.ptr148..i.i.i = select i1 %tobool145.i.i.i, i8* %add.ptr148.i.i.i, i8* null
  %tobool151.i.i.i = icmp eq i8* %add.ptr148..i.i.i, null
  br i1 %tobool151.i.i.i, label %if.else162.i.i.i, label %if.then152.i.i.i

if.then152.i.i.i:                                 ; preds = %if.else143.i.i.i
  %call153.i.i.i = call i32 @decode_reg_name(i8* %add.ptr148..i.i.i) #6
  %cmp154.i.i.i = icmp slt i32 %call153.i.i.i, 0
  br i1 %cmp154.i.i.i, label %if.then156.i.i.i, label %if.else157.i.i.i

if.then156.i.i.i:                                 ; preds = %if.then152.i.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([32 x i8]* @.str605, i64 0, i64 0), i8* %add.ptr148..i.i.i) #6
  br label %if.end238.i.i.i

if.else157.i.i.i:                                 ; preds = %if.then152.i.i.i
  %94 = load i32* @target_flags, align 4, !tbaa !1
  %and.i.i.i = lshr i32 %94, 25
  %95 = and i32 %and.i.i.i, 1
  %96 = or i32 %95, 4
  %call160.i.i.i = call %struct.rtx_def* @gen_rtx_REG(i32 %96, i32 %call153.i.i.i) #6
  store %struct.rtx_def* %call160.i.i.i, %struct.rtx_def** @stack_limit_rtx, align 8, !tbaa !8
  br label %if.end238.i.i.i

if.else162.i.i.i:                                 ; preds = %if.else143.i.i.i
  %call163.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([20 x i8]* @.str606, i64 0, i64 0), i64 19) #6
  %tobool164.i.i.i = icmp eq i32 %call163.i.i.i, 0
  %add.ptr167.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 20
  %add.ptr167..i.i.i = select i1 %tobool164.i.i.i, i8* %add.ptr167.i.i.i, i8* null
  %tobool170.i.i.i = icmp eq i8* %add.ptr167..i.i.i, null
  br i1 %tobool170.i.i.i, label %if.else177.i.i.i, label %if.then171.i.i.i

if.then171.i.i.i:                                 ; preds = %if.else162.i.i.i
  %call172.i.i.i = call i8* @ggc_alloc_string(i8* %add.ptr167..i.i.i, i32 -1) #6
  %97 = load i32* @target_flags, align 4, !tbaa !1
  %and173.i.i.i = lshr i32 %97, 25
  %98 = and i32 %and173.i.i.i, 1
  %99 = or i32 %98, 4
  %call176.i.i.i = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %99, i8* %call172.i.i.i) #6
  store %struct.rtx_def* %call176.i.i.i, %struct.rtx_def** @stack_limit_rtx, align 8, !tbaa !8
  br label %if.end238.i.i.i

if.else177.i.i.i:                                 ; preds = %if.else162.i.i.i
  %call178.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([16 x i8]* @.str607, i64 0, i64 0), i64 15) #6
  %tobool179.i.i.i = icmp eq i32 %call178.i.i.i, 0
  %add.ptr182.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 16
  %add.ptr182..i.i.i = select i1 %tobool179.i.i.i, i8* %add.ptr182.i.i.i, i8* null
  %tobool185.i.i.i = icmp eq i8* %add.ptr182..i.i.i, null
  br i1 %tobool185.i.i.i, label %if.else189.i.i.i, label %if.then186.i.i.i

if.then186.i.i.i:                                 ; preds = %if.else177.i.i.i
  %100 = load %struct.diagnostic_context** @global_dc, align 8, !tbaa !8
  %buffer.i.i.i = getelementptr inbounds %struct.diagnostic_context* %100, i64 0, i32 0
  %add.ptr187.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  %ideal_maximum_length.i.i.i = getelementptr inbounds %struct.diagnostic_context* %100, i64 0, i32 0, i32 0, i32 2
  %101 = load i32* %ideal_maximum_length.i.i.i, align 4, !tbaa !67
  %102 = load i8* %add.ptr182..i.i.i, align 1, !tbaa !5
  %tobool20.i.i.i.i = icmp eq i8 %102, 0
  br i1 %tobool20.i.i.i.i, label %if.end11.i.i.i.i, label %while.body.i.i.i.i

while.cond.i.i.i.i:                               ; preds = %while.body.i.i.i.i
  %103 = load i8* %incdec.ptr.i.i.i.i, align 1, !tbaa !5
  %tobool.i.i.i.i = icmp eq i8 %103, 0
  br i1 %tobool.i.i.i.i, label %if.end11.i.i.i.i, label %while.body.i.i.i.i

while.body.i.i.i.i:                               ; preds = %if.then186.i.i.i, %while.cond.i.i.i.i
  %.pr.i.i.i.i = phi i8 [ %103, %while.cond.i.i.i.i ], [ %102, %if.then186.i.i.i ]
  %endp.021.i.i.i.i = phi i8* [ %incdec.ptr.i.i.i.i, %while.cond.i.i.i.i ], [ %add.ptr182.i.i.i, %if.then186.i.i.i ]
  %idxprom.i.i.i.i = zext i8 %.pr.i.i.i.i to i64
  %arrayidx.i.i.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i.i.i.i
  %104 = load i16* %arrayidx.i.i.i.i, align 2, !tbaa !6
  %and2.i.i.i.i = and i16 %104, 4
  %tobool3.i.i.i.i = icmp eq i16 %and2.i.i.i.i, 0
  %incdec.ptr.i.i.i.i = getelementptr inbounds i8* %endp.021.i.i.i.i, i64 1
  br i1 %tobool3.i.i.i.i, label %if.then6.i.i.i.i, label %while.cond.i.i.i.i

if.then6.i.i.i.i:                                 ; preds = %while.body.i.i.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %add.ptr187.i.i.i) #6
  br label %read_integral_parameter.exit.i.i.i

if.end11.i.i.i.i:                                 ; preds = %while.cond.i.i.i.i, %if.then186.i.i.i
  %call.i.i.i.i = call i32 @atoi(i8* %add.ptr182..i.i.i) #6
  br label %read_integral_parameter.exit.i.i.i

read_integral_parameter.exit.i.i.i:               ; preds = %if.end11.i.i.i.i, %if.then6.i.i.i.i
  %retval.0.i.i.i.i = phi i32 [ %call.i.i.i.i, %if.end11.i.i.i.i ], [ %101, %if.then6.i.i.i.i ]
  call void @output_set_maximum_length(%struct.output_buffer* %buffer.i.i.i, i32 %retval.0.i.i.i.i) #6
  br label %if.end238.i.i.i

if.else189.i.i.i:                                 ; preds = %if.else177.i.i.i
  %call190.i.i.i = call i32 @strncmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([27 x i8]* @.str608, i64 0, i64 0), i64 26) #6
  %tobool191.i.i.i = icmp eq i32 %call190.i.i.i, 0
  %add.ptr194.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 27
  %add.ptr194..i.i.i = select i1 %tobool191.i.i.i, i8* %add.ptr194.i.i.i, i8* null
  %tobool197.i.i.i = icmp eq i8* %add.ptr194..i.i.i, null
  br i1 %tobool197.i.i.i, label %if.else213.i.i.i, label %if.then198.i.i.i

if.then198.i.i.i:                                 ; preds = %if.else189.i.i.i
  %call199.i.i.i = call i32 @strcmp(i8* %add.ptr194..i.i.i, i8* getelementptr inbounds ([5 x i8]* @.str609, i64 0, i64 0)) #6
  %tobool200.i.i.i = icmp eq i32 %call199.i.i.i, 0
  br i1 %tobool200.i.i.i, label %if.then201.i.i.i, label %if.else203.i.i.i

if.then201.i.i.i:                                 ; preds = %if.then198.i.i.i
  %105 = load %struct.diagnostic_context** @global_dc, align 8, !tbaa !8
  %prefixing_rule.i.i.i = getelementptr inbounds %struct.diagnostic_context* %105, i64 0, i32 0, i32 0, i32 6
  store i32 0, i32* %prefixing_rule.i.i.i, align 4, !tbaa !71
  br label %if.end238.i.i.i

if.else203.i.i.i:                                 ; preds = %if.then198.i.i.i
  %call204.i.i.i = call i32 @strcmp(i8* %add.ptr194..i.i.i, i8* getelementptr inbounds ([11 x i8]* @.str610, i64 0, i64 0)) #6
  %tobool205.i.i.i = icmp eq i32 %call204.i.i.i, 0
  br i1 %tobool205.i.i.i, label %if.then206.i.i.i, label %if.else209.i.i.i

if.then206.i.i.i:                                 ; preds = %if.else203.i.i.i
  %106 = load %struct.diagnostic_context** @global_dc, align 8, !tbaa !8
  %prefixing_rule208.i.i.i = getelementptr inbounds %struct.diagnostic_context* %106, i64 0, i32 0, i32 0, i32 6
  store i32 2, i32* %prefixing_rule208.i.i.i, align 4, !tbaa !71
  br label %if.end238.i.i.i

if.else209.i.i.i:                                 ; preds = %if.else203.i.i.i
  %add.ptr210.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([25 x i8]* @.str360, i64 0, i64 0), i8* %add.ptr210.i.i.i) #6
  br label %if.end238.i.i.i

if.else213.i.i.i:                                 ; preds = %if.else189.i.i.i
  %call214.i.i.i = call i32 @strcmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([15 x i8]* @.str611, i64 0, i64 0)) #6
  %tobool215.i.i.i = icmp eq i32 %call214.i.i.i, 0
  br i1 %tobool215.i.i.i, label %if.then216.i.i.i, label %if.else217.i.i.i

if.then216.i.i.i:                                 ; preds = %if.else213.i.i.i
  store %struct.rtx_def* null, %struct.rtx_def** @stack_limit_rtx, align 8, !tbaa !8
  br label %if.end238.i.i.i

if.else217.i.i.i:                                 ; preds = %if.else213.i.i.i
  %call218.i.i.i = call i32 @strcmp(i8* %add.ptr53.i.i, i8* getelementptr inbounds ([13 x i8]* @.str612, i64 0, i64 0)) #6
  %tobool219.i.i.i = icmp eq i32 %call218.i.i.i, 0
  br i1 %tobool219.i.i.i, label %if.end238.i.i.i, label %if.end69.i

if.end238.i.i.i:                                  ; preds = %if.else217.i.i.i, %if.then216.i.i.i, %if.else209.i.i.i, %if.then206.i.i.i, %if.then201.i.i.i, %read_integral_parameter.exit.i.i.i, %if.then171.i.i.i, %if.else157.i.i.i, %if.then156.i.i.i, %read_integral_parameter.exit381.i.i.i, %read_integral_parameter.exit365.i.i.i, %read_integral_parameter.exit349.i.i.i, %read_integral_parameter.exit333.i.i.i, %if.then94.i.i.i, %if.then84.i.i.i, %if.then74.i.i.i, %if.then64.i.i.i, %read_integral_parameter.exit317.i.i.i, %if.then37.i.i.i, %if.then34.i.i.i
  br label %if.end69.i

sw.bb55.i.i:                                      ; preds = %if.end43.i.i
  %add.ptr56.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 1
  store %struct.anon.5* getelementptr inbounds ([6 x %struct.anon.5]* @debug_args, i64 0, i64 0), %struct.anon.5** @da, align 8, !tbaa !8
  br label %for.body.i242.i.i

for.body.i242.i.i:                                ; preds = %for.inc.i264.i.i, %sw.bb55.i.i
  %107 = phi %struct.anon.5* [ getelementptr inbounds ([6 x %struct.anon.5]* @debug_args, i64 0, i64 0), %sw.bb55.i.i ], [ %incdec.ptr.i262.i.i, %for.inc.i264.i.i ]
  %108 = phi i8* [ getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0), %sw.bb55.i.i ], [ %125, %for.inc.i264.i.i ]
  %call.i240.i.i = call i64 @strlen(i8* %108) #6
  %conv.i.i.i = trunc i64 %call.i240.i.i to i32
  %cmp.i241.i.i = icmp eq i32 %conv.i.i.i, 0
  %sext114.pre.i.i.i = shl i64 %call.i240.i.i, 32
  %idx.ext.pre.i.i.i = ashr exact i64 %sext114.pre.i.i.i, 32
  br i1 %cmp.i241.i.i, label %if.then.i245.i.i, label %lor.lhs.false.i243.i.i

lor.lhs.false.i243.i.i:                           ; preds = %for.body.i242.i.i
  %call6.i.i.i = call i32 @strncmp(i8* %add.ptr56.i.i, i8* %108, i64 %idx.ext.pre.i.i.i) #6
  %tobool7.i.i.i = icmp eq i32 %call6.i.i.i, 0
  br i1 %tobool7.i.i.i, label %if.then.i245.i.i, label %for.inc.i264.i.i

if.then.i245.i.i:                                 ; preds = %lor.lhs.false.i243.i.i, %for.body.i242.i.i
  %debug_type.i.i.i = getelementptr inbounds %struct.anon.5* %107, i64 0, i32 1
  %109 = load i32* %debug_type.i.i.i, align 4, !tbaa !72
  %add.ptr56.sum.i.i = add i64 %idx.ext.pre.i.i.i, 1
  %add.ptr.i244.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 %add.ptr56.sum.i.i
  %110 = load i8* %add.ptr.i244.i.i, align 1, !tbaa !5
  %tobool9.i.i.i = icmp eq i8 %110, 0
  br i1 %tobool9.i.i.i, label %if.else.i259.i.i, label %land.lhs.true.i248.i.i

land.lhs.true.i248.i.i:                           ; preds = %if.then.i245.i.i
  %idxprom.i246.i.i = zext i8 %110 to i64
  %arrayidx.i247.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i246.i.i
  %111 = load i16* %arrayidx.i247.i.i, align 2, !tbaa !6
  %and12.i.i.i = and i16 %111, 4
  %tobool13.i.i.i = icmp eq i16 %and12.i.i.i, 0
  br i1 %tobool13.i.i.i, label %for.inc.i264.i.i, label %while.cond.i.i250.lr.ph.i.i

while.cond.i.i250.lr.ph.i.i:                      ; preds = %land.lhs.true.i248.i.i
  %add.ptr.i244.sum.i.i = add i64 %idx.ext.pre.i.i.i, 2
  %incdec.ptr.i.i254377.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 %add.ptr.i244.sum.i.i
  br label %while.cond.i.i250.i.i

while.cond.i.i250.i.i:                            ; preds = %while.cond.i.while.body.i_crit_edge.i.i.i, %while.cond.i.i250.lr.ph.i.i
  %incdec.ptr.i.i254378.i.i = phi i8* [ %incdec.ptr.i.i254377.i.i, %while.cond.i.i250.lr.ph.i.i ], [ %incdec.ptr.i.i254.i.i, %while.cond.i.while.body.i_crit_edge.i.i.i ]
  %112 = load i8* %incdec.ptr.i.i254378.i.i, align 1, !tbaa !5
  %tobool.i.i249.i.i = icmp eq i8 %112, 0
  br i1 %tobool.i.i249.i.i, label %if.end11.i.i257.i.i, label %while.cond.i.while.body.i_crit_edge.i.i.i

while.cond.i.while.body.i_crit_edge.i.i.i:        ; preds = %while.cond.i.i250.i.i
  %idxprom.i.phi.trans.insert.i.i.i = zext i8 %112 to i64
  %arrayidx.i.phi.trans.insert.i.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i.phi.trans.insert.i.i.i
  %.pre146.i.i.i = load i16* %arrayidx.i.phi.trans.insert.i.i.i, align 2, !tbaa !6
  %and2.i.i252.i.i = and i16 %.pre146.i.i.i, 4
  %tobool3.i.i253.i.i = icmp eq i16 %and2.i.i252.i.i, 0
  %incdec.ptr.i.i254.i.i = getelementptr inbounds i8* %incdec.ptr.i.i254378.i.i, i64 1
  br i1 %tobool3.i.i253.i.i, label %if.end20.i.i.i, label %while.cond.i.i250.i.i

if.end11.i.i257.i.i:                              ; preds = %while.cond.i.i250.i.i
  %call.i.i256.i.i = call i32 @atoi(i8* %add.ptr.i244.i.i) #6
  br label %if.end20.i.i.i

if.else.i259.i.i:                                 ; preds = %if.then.i245.i.i
  %113 = load i32* @decode_g_option.level, align 4, !tbaa !1
  %cmp18.i.i.i = icmp eq i32 %113, 0
  %cond.i258.i.i = select i1 %cmp18.i.i.i, i32 2, i32 %113
  br label %if.end20.i.i.i

if.end20.i.i.i:                                   ; preds = %while.cond.i.while.body.i_crit_edge.i.i.i, %if.else.i259.i.i, %if.end11.i.i257.i.i
  %storemerge115.i.i.i = phi i32 [ %cond.i258.i.i, %if.else.i259.i.i ], [ %call.i.i256.i.i, %if.end11.i.i257.i.i ], [ 4, %while.cond.i.while.body.i_crit_edge.i.i.i ]
  store i32 %storemerge115.i.i.i, i32* @decode_g_option.level, align 4, !tbaa !1
  %cmp21.i.i.i = icmp sgt i32 %conv.i.i.i, 1
  br i1 %cmp21.i.i.i, label %land.lhs.true23.i.i.i, label %if.end35.i.i.i

land.lhs.true23.i.i.i:                            ; preds = %if.end20.i.i.i
  %114 = load i8* %add.ptr.i244.i.i, align 1, !tbaa !5
  %tobool25.i.i.i = icmp eq i8 %114, 0
  br i1 %tobool25.i.i.i, label %if.end35.i.i.i, label %land.lhs.true26.i.i.i

land.lhs.true26.i.i.i:                            ; preds = %land.lhs.true23.i.i.i
  %call28.i.i.i = call i32 @strncmp(i8* %add.ptr56.i.i, i8* getelementptr inbounds ([6 x i8]* @.str581, i64 0, i64 0), i64 %idx.ext.pre.i.i.i) #6
  %tobool29.i.i.i = icmp eq i32 %call28.i.i.i, 0
  br i1 %tobool29.i.i.i, label %if.then30.i.i.i, label %if.end35.i.i.i

if.then30.i.i.i:                                  ; preds = %land.lhs.true26.i.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([40 x i8]* @.str582, i64 0, i64 0), i32 %storemerge115.i.i.i, i32 %storemerge115.i.i.i) #6
  %115 = load i32* @decode_g_option.level, align 4, !tbaa !1
  %cmp31.i260.i.i = icmp eq i32 %115, 2
  br i1 %cmp31.i260.i.i, label %if.then33.i.i.i, label %if.end35.i.i.i

if.then33.i.i.i:                                  ; preds = %if.then30.i.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([29 x i8]* @.str583, i64 0, i64 0)) #6
  %.pr118.pre.i.i.i = load i32* @decode_g_option.level, align 4, !tbaa !1
  br label %if.end35.i.i.i

if.end35.i.i.i:                                   ; preds = %if.then33.i.i.i, %if.then30.i.i.i, %land.lhs.true26.i.i.i, %land.lhs.true23.i.i.i, %if.end20.i.i.i
  %116 = phi i32 [ %115, %if.then30.i.i.i ], [ %storemerge115.i.i.i, %if.end20.i.i.i ], [ %.pr118.pre.i.i.i, %if.then33.i.i.i ], [ %storemerge115.i.i.i, %land.lhs.true23.i.i.i ], [ %storemerge115.i.i.i, %land.lhs.true26.i.i.i ]
  %cmp36.i.i.i = icmp ugt i32 %116, 3
  br i1 %cmp36.i.i.i, label %if.then38.i.i.i, label %if.end40.i.i.i

if.then38.i.i.i:                                  ; preds = %if.end35.i.i.i
  %add.ptr39.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([62 x i8]* @.str584, i64 0, i64 0), i8* %add.ptr39.i.i.i) #6
  %117 = load i32* @debug_info_level, align 4, !tbaa !5
  store i32 %117, i32* @decode_g_option.level, align 4, !tbaa !1
  br label %if.end40.i.i.i

if.end40.i.i.i:                                   ; preds = %if.then38.i.i.i, %if.end35.i.i.i
  %cmp41.not.i.i.i = icmp ne i32 %109, 0
  %cmp21.not.i.i.i = xor i1 %cmp21.i.i.i, true
  %brmerge.i.i.i = or i1 %cmp41.not.i.i.i, %cmp21.not.i.i.i
  %.mux.i.i.i = select i1 %cmp41.not.i.i.i, i32 %109, i32 4
  br i1 %brmerge.i.i.i, label %if.end53.i.i.i, label %if.end58.i.i.i

if.end53.i.i.i:                                   ; preds = %if.end40.i.i.i
  %cmp54.i.i.i = icmp eq i32 %.mux.i.i.i, 0
  br i1 %cmp54.i.i.i, label %if.then56.i.i.i, label %if.end58.i.i.i

if.then56.i.i.i:                                  ; preds = %if.end53.i.i.i
  %add.ptr57.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([39 x i8]* @.str359, i64 0, i64 0), i8* %add.ptr57.i.i.i) #6
  br label %if.end58.i.i.i

if.end58.i.i.i:                                   ; preds = %if.then56.i.i.i, %if.end53.i.i.i, %if.end40.i.i.i
  %type.0120.i.i.i = phi i32 [ 0, %if.then56.i.i.i ], [ %.mux.i.i.i, %if.end53.i.i.i ], [ 4, %if.end40.i.i.i ]
  %118 = load i32* @decode_g_option.type_explicitly_set_p, align 4, !tbaa !1
  %tobool59.i.i.i = icmp eq i32 %118, 0
  %.pre.i261.i.i = load %struct.anon.5** @da, align 8, !tbaa !8
  %debug_type79.i.pre.i.i = getelementptr inbounds %struct.anon.5* %.pre.i261.i.i, i64 0, i32 1
  br i1 %tobool59.i.i.i, label %if.else78.i.i.i, label %land.lhs.true60.i.i.i

land.lhs.true60.i.i.i:                            ; preds = %if.end58.i.i.i
  %119 = load i32* %debug_type79.i.pre.i.i, align 4, !tbaa !72
  %cmp62.i.i.i = icmp eq i32 %119, 0
  %.pre145.i.i.i = load i32* @decode_g_option.selected_debug_type, align 4, !tbaa !5
  br i1 %cmp62.i.i.i, label %if.end82.i.i.i, label %land.lhs.true64.i.i.i

land.lhs.true64.i.i.i:                            ; preds = %land.lhs.true60.i.i.i
  %cmp65.i.i.i = icmp eq i32 %type.0120.i.i.i, %.pre145.i.i.i
  br i1 %cmp65.i.i.i, label %if.else78.i.i.i, label %if.then67.i.i.i

if.then67.i.i.i:                                  ; preds = %land.lhs.true64.i.i.i
  %add.ptr68.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  %idxprom69.i.i.i = sext i32 %.pre145.i.i.i to i64
  %arrayidx70.i.i.i = getelementptr inbounds [7 x i8*]* @decode_g_option.debug_type_names, i64 0, i64 %idxprom69.i.i.i
  %120 = load i8** %arrayidx70.i.i.i, align 8, !tbaa !8
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([36 x i8]* @.str586, i64 0, i64 0), i8* %add.ptr68.i.i.i, i8* %120) #6
  %.pre147.i.i.i = load %struct.anon.5** @da, align 8, !tbaa !8
  br label %decode_g_option.exit.i.i

if.else78.i.i.i:                                  ; preds = %land.lhs.true64.i.i.i, %if.end58.i.i.i
  store i32 %type.0120.i.i.i, i32* @decode_g_option.selected_debug_type, align 4, !tbaa !5
  %121 = load i32* %debug_type79.i.pre.i.i, align 4, !tbaa !72
  %cmp80.i.i.i = icmp ne i32 %121, 0
  %conv81.i.i.i = zext i1 %cmp80.i.i.i to i32
  store i32 %conv81.i.i.i, i32* @decode_g_option.type_explicitly_set_p, align 4, !tbaa !1
  br label %if.end82.i.i.i

if.end82.i.i.i:                                   ; preds = %if.else78.i.i.i, %land.lhs.true60.i.i.i
  %122 = phi i32 [ %type.0120.i.i.i, %if.else78.i.i.i ], [ %.pre145.i.i.i, %land.lhs.true60.i.i.i ]
  %123 = load i32* @decode_g_option.level, align 4, !tbaa !1
  %cmp83.i.i.i = icmp eq i32 %123, 0
  %cond88.i.i.i = select i1 %cmp83.i.i.i, i32 0, i32 %122
  store i32 %cond88.i.i.i, i32* @write_symbols, align 4, !tbaa !5
  %use_extensions_p.i.i.i = getelementptr inbounds %struct.anon.5* %.pre.i261.i.i, i64 0, i32 2
  %124 = load i32* %use_extensions_p.i.i.i, align 4, !tbaa !73
  store i32 %124, i32* @use_gnu_debug_info_extensions, align 4, !tbaa !1
  store i32 %123, i32* @debug_info_level, align 4, !tbaa !5
  br label %decode_g_option.exit.i.i

for.inc.i264.i.i:                                 ; preds = %land.lhs.true.i248.i.i, %lor.lhs.false.i243.i.i
  %incdec.ptr.i262.i.i = getelementptr inbounds %struct.anon.5* %107, i64 1
  store %struct.anon.5* %incdec.ptr.i262.i.i, %struct.anon.5** @da, align 8, !tbaa !8
  %arg1.i.i.i = getelementptr inbounds %struct.anon.5* %incdec.ptr.i262.i.i, i64 0, i32 0
  %125 = load i8** %arg1.i.i.i, align 8, !tbaa !60
  %tobool.i263.i.i = icmp eq i8* %125, null
  br i1 %tobool.i263.i.i, label %decode_g_option.exit.i.i, label %for.body.i242.i.i

decode_g_option.exit.i.i:                         ; preds = %for.inc.i264.i.i, %if.end82.i.i.i, %if.then67.i.i.i
  %126 = phi %struct.anon.5* [ %.pre147.i.i.i, %if.then67.i.i.i ], [ %.pre.i261.i.i, %if.end82.i.i.i ], [ %incdec.ptr.i262.i.i, %for.inc.i264.i.i ]
  %arg91.i.i.i = getelementptr inbounds %struct.anon.5* %126, i64 0, i32 0
  %127 = load i8** %arg91.i.i.i, align 8, !tbaa !60
  %not.tobool92.i.i.i = icmp ne i8* %127, null
  %..i.i.i = zext i1 %not.tobool92.i.i.i to i32
  br label %if.end69.i

sw.bb58.i.i:                                      ; preds = %if.end43.i.i
  %call59.i.i = call i32 @strcmp(i8* %incdec.ptr48.incdec.ptr.i.i, i8* getelementptr inbounds ([9 x i8]* @.str525, i64 0, i64 0)) #6
  %tobool60.i.i = icmp eq i32 %call59.i.i, 0
  br i1 %tobool60.i.i, label %if.then61.i.i, label %if.else67.i.i

if.then61.i.i:                                    ; preds = %sw.bb58.i.i
  %cmp62.i.i = icmp eq i32 %sub.i, 1
  br i1 %cmp62.i.i, label %if.end69.i, label %if.end65.i.i

if.end65.i.i:                                     ; preds = %if.then61.i.i
  %add.ptr58.sum219.i = add i64 %idx.ext.i, 1
  %arrayidx66.i.i = getelementptr inbounds i8** %argv, i64 %add.ptr58.sum219.i
  %128 = load i8** %arrayidx66.i.i, align 8, !tbaa !8
  store i8* %128, i8** @dump_base_name, align 8, !tbaa !8
  br label %if.end69.i

if.else67.i.i:                                    ; preds = %sw.bb58.i.i
  %add.ptr68.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 1
  %129 = load i8* %add.ptr68.i.i, align 1, !tbaa !5
  %tobool38.i.i.i = icmp eq i8 %129, 0
  br i1 %tobool38.i.i.i, label %sw.epilog.i.i, label %while.body.i268.i.i

while.body.i268.i.i:                              ; preds = %if.else67.i.i, %while.cond.backedge.i.i.i
  %130 = phi i8 [ %140, %while.cond.backedge.i.i.i ], [ %129, %if.else67.i.i ]
  %arg.addr.039.i.i.i = phi i8* [ %incdec.ptr.i266.i.i, %while.cond.backedge.i.i.i ], [ %add.ptr68.i.i, %if.else67.i.i ]
  %incdec.ptr.i266.i.i = getelementptr inbounds i8* %arg.addr.039.i.i.i, i64 1
  %conv.i267.i.i = sext i8 %130 to i32
  switch i32 %conv.i267.i.i, label %for.body12.i.i.i [
    i32 97, label %vector.body
    i32 65, label %sw.bb2.i.i.i
    i32 112, label %sw.bb3.i.i.i
    i32 80, label %sw.bb4.i.i.i
    i32 118, label %sw.bb5.i.i.i
    i32 120, label %sw.bb6.i.i.i
    i32 121, label %sw.bb7.i.i.i
    i32 68, label %while.cond.backedge.i.i.i
    i32 73, label %while.cond.backedge.i.i.i
  ]

vector.body:                                      ; preds = %while.body.i268.i.i, %vector.body
  %index = phi i64 [ %index.next, %vector.body ], [ 0, %while.body.i268.i.i ]
  %broadcast.splatinsert = insertelement <4 x i64> undef, i64 %index, i32 0
  %broadcast.splat = shufflevector <4 x i64> %broadcast.splatinsert, <4 x i64> undef, <4 x i32> zeroinitializer
  %induction = add <4 x i64> %broadcast.splat, <i64 0, i64 1, i64 2, i64 3>
  %131 = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %index, i32 3
  %132 = extractelement <4 x i64> %induction, i32 1
  %133 = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %132, i32 3
  %134 = extractelement <4 x i64> %induction, i32 2
  %135 = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %134, i32 3
  %136 = extractelement <4 x i64> %induction, i32 3
  %137 = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %136, i32 3
  store i8 1, i8* %131, align 2, !tbaa !37
  store i8 1, i8* %133, align 2, !tbaa !37
  store i8 1, i8* %135, align 2, !tbaa !37
  store i8 1, i8* %137, align 2, !tbaa !37
  %index.next = add i64 %index, 4
  %138 = icmp eq i64 %index.next, 32
  br i1 %138, label %while.cond.backedge.i.i.i, label %vector.body, !llvm.loop !74

sw.bb2.i.i.i:                                     ; preds = %while.body.i268.i.i
  store i32 1, i32* @flag_debug_asm, align 4, !tbaa !1
  br label %while.cond.backedge.i.i.i

sw.bb3.i.i.i:                                     ; preds = %while.body.i268.i.i
  store i32 1, i32* @flag_print_asm_name, align 4, !tbaa !1
  br label %while.cond.backedge.i.i.i

sw.bb4.i.i.i:                                     ; preds = %while.body.i268.i.i
  store i32 1, i32* @flag_dump_rtl_in_asm, align 4, !tbaa !1
  store i32 1, i32* @flag_print_asm_name, align 4, !tbaa !1
  br label %while.cond.backedge.i.i.i

sw.bb5.i.i.i:                                     ; preds = %while.body.i268.i.i
  store i32 1, i32* @graph_dump_format, align 4, !tbaa !5
  br label %while.cond.backedge.i.i.i

sw.bb6.i.i.i:                                     ; preds = %while.body.i268.i.i
  store i32 1, i32* @rtl_dump_and_exit, align 4, !tbaa !1
  br label %while.cond.backedge.i.i.i

sw.bb7.i.i.i:                                     ; preds = %while.body.i268.i.i
  call void %19(i32 1) #6
  br label %while.cond.backedge.i.i.i

for.body12.i.i.i:                                 ; preds = %while.body.i268.i.i, %for.inc21.i.i.i
  %indvars.iv40.i.i.i = phi i64 [ %indvars.iv.next41.i.i.i, %for.inc21.i.i.i ], [ 0, %while.body.i268.i.i ]
  %matched.037.i.i.i = phi i32 [ %matched.1.i.i.i, %for.inc21.i.i.i ], [ 0, %while.body.i268.i.i ]
  %debug_switch.i.i.i = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %indvars.iv40.i.i.i, i32 1
  %139 = load i8* %debug_switch.i.i.i, align 8, !tbaa !77
  %cmp16.i.i.i = icmp eq i8 %130, %139
  br i1 %cmp16.i.i.i, label %if.then.i273.i.i, label %for.inc21.i.i.i

if.then.i273.i.i:                                 ; preds = %for.body12.i.i.i
  %enabled20.i.i.i = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %indvars.iv40.i.i.i, i32 3
  store i8 1, i8* %enabled20.i.i.i, align 2, !tbaa !37
  br label %for.inc21.i.i.i

for.inc21.i.i.i:                                  ; preds = %if.then.i273.i.i, %for.body12.i.i.i
  %matched.1.i.i.i = phi i32 [ 1, %if.then.i273.i.i ], [ %matched.037.i.i.i, %for.body12.i.i.i ]
  %indvars.iv.next41.i.i.i = add nuw nsw i64 %indvars.iv40.i.i.i, 1
  %exitcond42.i.i.i = icmp eq i64 %indvars.iv.next41.i.i.i, 32
  br i1 %exitcond42.i.i.i, label %for.end23.i.i.i, label %for.body12.i.i.i

for.end23.i.i.i:                                  ; preds = %for.inc21.i.i.i
  %tobool24.i.i.i = icmp eq i32 %matched.1.i.i.i, 0
  br i1 %tobool24.i.i.i, label %if.then25.i.i.i, label %while.cond.backedge.i.i.i

if.then25.i.i.i:                                  ; preds = %for.end23.i.i.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([38 x i8]* @.str573, i64 0, i64 0), i32 %conv.i267.i.i) #6
  br label %while.cond.backedge.i.i.i

while.cond.backedge.i.i.i:                        ; preds = %vector.body, %if.then25.i.i.i, %for.end23.i.i.i, %sw.bb7.i.i.i, %sw.bb6.i.i.i, %sw.bb5.i.i.i, %sw.bb4.i.i.i, %sw.bb3.i.i.i, %sw.bb2.i.i.i, %while.body.i268.i.i, %while.body.i268.i.i
  %140 = load i8* %incdec.ptr.i266.i.i, align 1, !tbaa !5
  %tobool.i274.i.i = icmp eq i8 %140, 0
  br i1 %tobool.i274.i.i, label %sw.epilog.i.i, label %while.body.i268.i.i

sw.bb70.i.i:                                      ; preds = %if.end43.i.i
  %call71.i.i = call i32 @strcmp(i8* %incdec.ptr48.incdec.ptr.i.i, i8* getelementptr inbounds ([9 x i8]* @.str526, i64 0, i64 0)) #6
  %tobool72.i.i = icmp eq i32 %call71.i.i, 0
  br i1 %tobool72.i.i, label %if.then73.i.i, label %if.else74.i.i

if.then73.i.i:                                    ; preds = %sw.bb70.i.i
  store i32 1, i32* @pedantic, align 4, !tbaa !1
  br label %sw.epilog.i.i

if.else74.i.i:                                    ; preds = %sw.bb70.i.i
  %call75.i.i = call i32 @strcmp(i8* %incdec.ptr48.incdec.ptr.i.i, i8* getelementptr inbounds ([16 x i8]* @.str527, i64 0, i64 0)) #6
  %tobool76.i.i = icmp eq i32 %call75.i.i, 0
  br i1 %tobool76.i.i, label %if.then77.i.i, label %if.else78.i.i

if.then77.i.i:                                    ; preds = %if.else74.i.i
  store i32 1, i32* @pedantic, align 4, !tbaa !1
  store i32 1, i32* @flag_pedantic_errors, align 4, !tbaa !1
  br label %sw.epilog.i.i

if.else78.i.i:                                    ; preds = %if.else74.i.i
  %arrayidx79.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 1
  %141 = load i8* %arrayidx79.i.i, align 1, !tbaa !5
  %cmp81.i.i = icmp eq i8 %141, 0
  br i1 %cmp81.i.i, label %if.then83.i.i, label %if.end69.i

if.then83.i.i:                                    ; preds = %if.else78.i.i
  store i32 1, i32* @profile_flag, align 4, !tbaa !1
  br label %sw.epilog.i.i

sw.bb88.i.i:                                      ; preds = %if.end43.i.i
  %call89.i.i = call i32 @strcmp(i8* %incdec.ptr48.incdec.ptr.i.i, i8* getelementptr inbounds ([6 x i8]* @.str528, i64 0, i64 0)) #6
  %tobool90.i.i = icmp eq i32 %call89.i.i, 0
  br i1 %tobool90.i.i, label %if.then91.i.i, label %if.end69.i

if.then91.i.i:                                    ; preds = %sw.bb88.i.i
  store i32 1, i32* @quiet_flag, align 4, !tbaa !1
  br label %sw.epilog.i.i

sw.bb94.i.i:                                      ; preds = %if.end43.i.i
  %call95.i.i = call i32 @strcmp(i8* %incdec.ptr48.incdec.ptr.i.i, i8* getelementptr inbounds ([8 x i8]* @.str529, i64 0, i64 0)) #6
  %tobool96.i.i = icmp eq i32 %call95.i.i, 0
  br i1 %tobool96.i.i, label %if.then97.i.i, label %if.end69.i

if.then97.i.i:                                    ; preds = %sw.bb94.i.i
  store i1 true, i1* @version_flag, align 1
  br label %sw.epilog.i.i

sw.bb100.i.i:                                     ; preds = %if.end43.i.i
  %arrayidx101.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 1
  %142 = load i8* %arrayidx101.i.i, align 1, !tbaa !5
  %cmp103.i.i = icmp eq i8 %142, 0
  br i1 %cmp103.i.i, label %if.then105.i.i, label %if.end69.i

if.then105.i.i:                                   ; preds = %sw.bb100.i.i
  store i32 1, i32* @inhibit_warnings, align 4, !tbaa !1
  br label %sw.epilog.i.i

sw.bb108.i.i:                                     ; preds = %if.end43.i.i
  %arrayidx109.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 1
  %143 = load i8* %arrayidx109.i.i, align 1, !tbaa !5
  %cmp111.i.i = icmp eq i8 %143, 0
  br i1 %cmp111.i.i, label %if.then113.i.i, label %if.else118.i.i

if.then113.i.i:                                   ; preds = %sw.bb108.i.i
  store i32 1, i32* @extra_warnings, align 4, !tbaa !1
  %144 = load i32* @warn_uninitialized, align 4, !tbaa !1
  %cmp114.i.i = icmp eq i32 %144, 1
  br i1 %cmp114.i.i, label %sw.epilog.i.i, label %if.then116.i.i

if.then116.i.i:                                   ; preds = %if.then113.i.i
  store i32 2, i32* @warn_uninitialized, align 4, !tbaa !1
  br label %sw.epilog.i.i

if.else118.i.i:                                   ; preds = %sw.bb108.i.i
  %arrayidx8.i275.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 2
  %arrayidx13.i276.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 3
  %add.ptr.i277.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 4
  %cmp.i286.i.i = icmp eq i8 %143, 110
  br label %for.body.i282.i.i

for.body.i282.i.i:                                ; preds = %for.cond.backedge.i294.i.i, %if.else118.i.i
  %indvars.iv.i278.i.i = phi i64 [ 18, %if.else118.i.i ], [ %indvars.iv.next.i292.i.i, %for.cond.backedge.i294.i.i ]
  %string.i279.i.i = getelementptr inbounds [19 x %struct.lang_independent_options]* @W_options, i64 0, i64 %indvars.iv.i278.i.i, i32 0
  %145 = load i8** %string.i279.i.i, align 16, !tbaa !54
  %call.i280.i.i = call i32 @strcmp(i8* %arrayidx109.i.i, i8* %145) #6
  %tobool1.i281.i.i = icmp eq i32 %call.i280.i.i, 0
  br i1 %tobool1.i281.i.i, label %if.then.i285.i.i, label %if.end.i287.i.i

if.then.i285.i.i:                                 ; preds = %for.body.i282.i.i
  %on_value.i283.i.i = getelementptr inbounds [19 x %struct.lang_independent_options]* @W_options, i64 0, i64 %indvars.iv.i278.i.i, i32 2
  %146 = load i32* %on_value.i283.i.i, align 16, !tbaa !64
  %variable.i284.i.i = getelementptr inbounds [19 x %struct.lang_independent_options]* @W_options, i64 0, i64 %indvars.iv.i278.i.i, i32 1
  %147 = load i32** %variable.i284.i.i, align 8, !tbaa !65
  store i32 %146, i32* %147, align 4, !tbaa !1
  br label %if.end69.i

if.end.i287.i.i:                                  ; preds = %for.body.i282.i.i
  br i1 %cmp.i286.i.i, label %land.lhs.true.i289.i.i, label %for.cond.backedge.i294.i.i

land.lhs.true.i289.i.i:                           ; preds = %if.end.i287.i.i
  %148 = load i8* %arrayidx8.i275.i.i, align 1, !tbaa !5
  %cmp10.i288.i.i = icmp eq i8 %148, 111
  br i1 %cmp10.i288.i.i, label %land.lhs.true12.i291.i.i, label %for.cond.backedge.i294.i.i

land.lhs.true12.i291.i.i:                         ; preds = %land.lhs.true.i289.i.i
  %149 = load i8* %arrayidx13.i276.i.i, align 1, !tbaa !5
  %cmp15.i290.i.i = icmp eq i8 %149, 45
  br i1 %cmp15.i290.i.i, label %land.lhs.true17.i297.i.i, label %for.cond.backedge.i294.i.i

for.cond.backedge.i294.i.i:                       ; preds = %land.lhs.true17.i297.i.i, %land.lhs.true12.i291.i.i, %land.lhs.true.i289.i.i, %if.end.i287.i.i
  %indvars.iv.next.i292.i.i = add nsw i64 %indvars.iv.i278.i.i, -1
  %150 = trunc i64 %indvars.iv.i278.i.i to i32
  %tobool.i293.i.i = icmp eq i32 %150, 0
  br i1 %tobool.i293.i.i, label %for.end.i302.i.i, label %for.body.i282.i.i

land.lhs.true17.i297.i.i:                         ; preds = %land.lhs.true12.i291.i.i
  %call21.i295.i.i = call i32 @strcmp(i8* %add.ptr.i277.i.i, i8* %145) #6
  %tobool22.i296.i.i = icmp eq i32 %call21.i295.i.i, 0
  br i1 %tobool22.i296.i.i, label %if.then23.i299.i.i, label %for.cond.backedge.i294.i.i

if.then23.i299.i.i:                               ; preds = %land.lhs.true17.i297.i.i
  %variable30.i298.i.i = getelementptr inbounds [19 x %struct.lang_independent_options]* @W_options, i64 0, i64 %indvars.iv.i278.i.i, i32 1
  %151 = load i32** %variable30.i298.i.i, align 8, !tbaa !65
  store i32 0, i32* %151, align 4, !tbaa !1
  br label %if.end69.i

for.end.i302.i.i:                                 ; preds = %for.cond.backedge.i294.i.i
  %call32.i300.i.i = call i32 @strncmp(i8* %arrayidx109.i.i, i8* getelementptr inbounds ([10 x i8]* @.str531, i64 0, i64 0), i64 9) #6
  %tobool33.i301.i.i = icmp eq i32 %call32.i300.i.i, 0
  br i1 %tobool33.i301.i.i, label %if.then36.i.i.i, label %if.else.i305.i.i

if.then36.i.i.i:                                  ; preds = %for.end.i302.i.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([38 x i8]* @.str532, i64 0, i64 0)) #6
  br label %if.end69.i

if.else.i305.i.i:                                 ; preds = %for.end.i302.i.i
  %call37.i.i.i = call i32 @strncmp(i8* %arrayidx109.i.i, i8* getelementptr inbounds ([13 x i8]* @.str533, i64 0, i64 0), i64 12) #6
  %tobool38.i303.i.i = icmp eq i32 %call37.i.i.i, 0
  %add.ptr41.i304.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 13
  %add.ptr41..i.i.i = select i1 %tobool38.i303.i.i, i8* %add.ptr41.i304.i.i, i8* null
  %tobool44.i.i.i = icmp eq i8* %add.ptr41..i.i.i, null
  br i1 %tobool44.i.i.i, label %if.else51.i.i.i, label %if.then45.i.i.i

if.then45.i.i.i:                                  ; preds = %if.else.i305.i.i
  %add.ptr46.i.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 -1
  %152 = load i8* %add.ptr41..i.i.i, align 1, !tbaa !5
  %tobool20.i.i306.i.i = icmp eq i8 %152, 0
  br i1 %tobool20.i.i306.i.i, label %if.end11.i.i319.i.i, label %while.body.i.i316.i.i

while.cond.i.i308.i.i:                            ; preds = %while.body.i.i316.i.i
  %153 = load i8* %incdec.ptr.i.i315.i.i, align 1, !tbaa !5
  %tobool.i.i307.i.i = icmp eq i8 %153, 0
  br i1 %tobool.i.i307.i.i, label %if.end11.i.i319.i.i, label %while.body.i.i316.i.i

while.body.i.i316.i.i:                            ; preds = %if.then45.i.i.i, %while.cond.i.i308.i.i
  %.pr.i.i309.i.i = phi i8 [ %153, %while.cond.i.i308.i.i ], [ %152, %if.then45.i.i.i ]
  %endp.021.i.i310.i.i = phi i8* [ %incdec.ptr.i.i315.i.i, %while.cond.i.i308.i.i ], [ %add.ptr41.i304.i.i, %if.then45.i.i.i ]
  %idxprom.i.i311.i.i = zext i8 %.pr.i.i309.i.i to i64
  %arrayidx.i.i312.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i.i311.i.i
  %154 = load i16* %arrayidx.i.i312.i.i, align 2, !tbaa !6
  %and2.i.i313.i.i = and i16 %154, 4
  %tobool3.i.i314.i.i = icmp eq i16 %and2.i.i313.i.i, 0
  %incdec.ptr.i.i315.i.i = getelementptr inbounds i8* %endp.021.i.i310.i.i, i64 1
  br i1 %tobool3.i.i314.i.i, label %if.then6.i.i317.i.i, label %while.cond.i.i308.i.i

if.then6.i.i317.i.i:                              ; preds = %while.body.i.i316.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %add.ptr46.i.i.i) #6
  br label %read_integral_parameter.exit.i321.i.i

if.end11.i.i319.i.i:                              ; preds = %while.cond.i.i308.i.i, %if.then45.i.i.i
  %call.i.i318.i.i = call i32 @atoi(i8* %add.ptr41..i.i.i) #6
  br label %read_integral_parameter.exit.i321.i.i

read_integral_parameter.exit.i321.i.i:            ; preds = %if.end11.i.i319.i.i, %if.then6.i.i317.i.i
  %retval.0.i.i320.i.i = phi i32 [ %call.i.i318.i.i, %if.end11.i.i319.i.i ], [ -1, %if.then6.i.i317.i.i ]
  %conv48.i.i.i = sext i32 %retval.0.i.i320.i.i to i64
  store i64 %conv48.i.i.i, i64* @larger_than_size, align 8, !tbaa !78
  %cmp49.i.i.i = icmp ne i32 %retval.0.i.i320.i.i, -1
  %conv50.i.i.i = zext i1 %cmp49.i.i.i to i32
  store i32 %conv50.i.i.i, i32* @warn_larger_than, align 4, !tbaa !1
  br label %if.end69.i

if.else51.i.i.i:                                  ; preds = %if.else.i305.i.i
  %call52.i.i.i = call i32 @strcmp(i8* %arrayidx109.i.i, i8* getelementptr inbounds ([7 x i8]* @.str534, i64 0, i64 0)) #6
  %tobool53.i.i.i = icmp eq i32 %call52.i.i.i, 0
  br i1 %tobool53.i.i.i, label %if.then54.i.i.i, label %if.else55.i324.i.i

if.then54.i.i.i:                                  ; preds = %if.else51.i.i.i
  store i32 1, i32* @warn_unused_function, align 4, !tbaa !1
  store i32 1, i32* @warn_unused_label, align 4, !tbaa !1
  %155 = load i32* @warn_unused_parameter, align 4, !tbaa !1
  %tobool1.i.i.i.i = icmp eq i32 %155, 0
  br i1 %tobool1.i.i.i.i, label %if.then2.i.i.i.i, label %set_Wunused.exit.i.i.i

if.then2.i.i.i.i:                                 ; preds = %if.then54.i.i.i
  store i32 -1, i32* @warn_unused_parameter, align 4, !tbaa !1
  br label %set_Wunused.exit.i.i.i

set_Wunused.exit.i.i.i:                           ; preds = %if.then2.i.i.i.i, %if.then54.i.i.i
  store i32 1, i32* @warn_unused_variable, align 4, !tbaa !1
  store i32 1, i32* @warn_unused_value, align 4, !tbaa !1
  br label %if.end69.i

if.else55.i324.i.i:                               ; preds = %if.else51.i.i.i
  %call56.i322.i.i = call i32 @strcmp(i8* %arrayidx109.i.i, i8* getelementptr inbounds ([10 x i8]* @.str535, i64 0, i64 0)) #6
  %tobool57.i323.i.i = icmp eq i32 %call56.i322.i.i, 0
  br i1 %tobool57.i323.i.i, label %if.then58.i.i.i, label %if.end69.i

if.then58.i.i.i:                                  ; preds = %if.else55.i324.i.i
  store i32 0, i32* @warn_unused_function, align 4, !tbaa !1
  store i32 0, i32* @warn_unused_label, align 4, !tbaa !1
  store i32 0, i32* @warn_unused_parameter, align 4, !tbaa !1
  store i32 0, i32* @warn_unused_variable, align 4, !tbaa !1
  store i32 0, i32* @warn_unused_value, align 4, !tbaa !1
  br label %if.end69.i

sw.bb122.i.i:                                     ; preds = %if.end43.i.i
  %call123.i.i = call i32 @strncmp(i8* %incdec.ptr48.incdec.ptr.i.i, i8* getelementptr inbounds ([9 x i8]* @.str530, i64 0, i64 0), i64 8) #6
  %tobool124.i.i = icmp eq i32 %call123.i.i, 0
  br i1 %tobool124.i.i, label %if.then125.i.i, label %if.end69.i

if.then125.i.i:                                   ; preds = %sw.bb122.i.i
  %arrayidx126.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 8
  %156 = load i8* %arrayidx126.i.i, align 1, !tbaa !5
  switch i8 %156, label %if.end69.i [
    i8 0, label %if.then130.i.i
    i8 61, label %if.then141.i.i
  ]

if.then130.i.i:                                   ; preds = %if.then125.i.i
  %cmp131.i.i = icmp eq i32 %sub.i, 1
  br i1 %cmp131.i.i, label %if.end69.i, label %if.end134.i.i

if.end134.i.i:                                    ; preds = %if.then130.i.i
  %add.ptr58.sum218.i = add i64 %idx.ext.i, 1
  %arrayidx135.i.i = getelementptr inbounds i8** %argv, i64 %add.ptr58.sum218.i
  %157 = load i8** %arrayidx135.i.i, align 8, !tbaa !8
  store i8* %157, i8** @aux_info_file_name, align 8, !tbaa !8
  store i32 1, i32* @flag_gen_aux_info, align 4, !tbaa !1
  br label %if.end69.i

if.then141.i.i:                                   ; preds = %if.then125.i.i
  %add.ptr142.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 9
  store i8* %add.ptr142.i.i, i8** @aux_info_file_name, align 8, !tbaa !8
  store i32 1, i32* @flag_gen_aux_info, align 4, !tbaa !1
  br label %sw.epilog.i.i

sw.bb148.i.i:                                     ; preds = %if.end43.i.i
  %arrayidx149.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 1
  %158 = load i8* %arrayidx149.i.i, align 1, !tbaa !5
  %cmp151.i.i = icmp ne i8 %158, 0
  %cmp154.i.i = icmp eq i32 %sub.i, 1
  %or.cond.i.i = or i1 %cmp151.i.i, %cmp154.i.i
  br i1 %or.cond.i.i, label %if.end69.i, label %if.end157.i.i

if.end157.i.i:                                    ; preds = %sw.bb148.i.i
  %add.ptr58.sum217.i = add i64 %idx.ext.i, 1
  %arrayidx158.i.i = getelementptr inbounds i8** %argv, i64 %add.ptr58.sum217.i
  %159 = load i8** %arrayidx158.i.i, align 8, !tbaa !8
  store i8* %159, i8** @asm_file_name, align 8, !tbaa !8
  br label %if.end69.i

sw.bb160.i.i:                                     ; preds = %if.end43.i.i
  %arrayidx161.i.i = getelementptr inbounds i8* %incdec.ptr48.incdec.ptr.i.i, i64 1
  %160 = load i8* %arrayidx161.i.i, align 1, !tbaa !5
  %cmp163.i.i = icmp eq i8 %160, 0
  br i1 %cmp163.i.i, label %if.then165.i.i, label %while.body.i352.i.i

if.then165.i.i:                                   ; preds = %sw.bb160.i.i
  %cmp166.i.i = icmp eq i32 %sub.i, 1
  br i1 %cmp166.i.i, label %if.end69.i, label %if.end169.i.i

if.end169.i.i:                                    ; preds = %if.then165.i.i
  %add.ptr58.sum.i = add i64 %idx.ext.i, 1
  %arrayidx170.i.i = getelementptr inbounds i8** %argv, i64 %add.ptr58.sum.i
  %161 = load i8** %arrayidx170.i.i, align 8, !tbaa !8
  %162 = load i8* %161, align 1, !tbaa !5
  %tobool20.i326.i.i = icmp eq i8 %162, 0
  br i1 %tobool20.i326.i.i, label %if.end11.i339.i.i, label %while.body.i336.i.i

while.cond.i328.i.i:                              ; preds = %while.body.i336.i.i
  %163 = load i8* %incdec.ptr.i335.i.i, align 1, !tbaa !5
  %tobool.i327.i.i = icmp eq i8 %163, 0
  br i1 %tobool.i327.i.i, label %if.end11.i339.i.i, label %while.body.i336.i.i

while.body.i336.i.i:                              ; preds = %if.end169.i.i, %while.cond.i328.i.i
  %.pr.i329.i.i = phi i8 [ %163, %while.cond.i328.i.i ], [ %162, %if.end169.i.i ]
  %endp.021.i330.i.i = phi i8* [ %incdec.ptr.i335.i.i, %while.cond.i328.i.i ], [ %161, %if.end169.i.i ]
  %idxprom.i331.i.i = zext i8 %.pr.i329.i.i to i64
  %arrayidx.i332.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i331.i.i
  %164 = load i16* %arrayidx.i332.i.i, align 2, !tbaa !6
  %and2.i333.i.i = and i16 %164, 4
  %tobool3.i334.i.i = icmp eq i16 %and2.i333.i.i, 0
  %incdec.ptr.i335.i.i = getelementptr inbounds i8* %endp.021.i330.i.i, i64 1
  br i1 %tobool3.i334.i.i, label %if.end69.i, label %while.cond.i328.i.i

if.end11.i339.i.i:                                ; preds = %while.cond.i328.i.i, %if.end169.i.i
  %call.i338.i.i = call i32 @atoi(i8* %161) #6
  br label %if.end175.i.i

while.cond.i344.i.i:                              ; preds = %while.body.i352.i.i
  %165 = load i8* %incdec.ptr.i351.i.i, align 1, !tbaa !5
  %tobool.i343.i.i = icmp eq i8 %165, 0
  br i1 %tobool.i343.i.i, label %if.end11.i355.i.i, label %while.body.i352.i.i

while.body.i352.i.i:                              ; preds = %sw.bb160.i.i, %while.cond.i344.i.i
  %.pr.i345.i.i = phi i8 [ %165, %while.cond.i344.i.i ], [ %160, %sw.bb160.i.i ]
  %endp.021.i346.i.i = phi i8* [ %incdec.ptr.i351.i.i, %while.cond.i344.i.i ], [ %arrayidx161.i.i, %sw.bb160.i.i ]
  %idxprom.i347.i.i = zext i8 %.pr.i345.i.i to i64
  %arrayidx.i348.i.i = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom.i347.i.i
  %166 = load i16* %arrayidx.i348.i.i, align 2, !tbaa !6
  %and2.i349.i.i = and i16 %166, 4
  %tobool3.i350.i.i = icmp eq i16 %and2.i349.i.i, 0
  %incdec.ptr.i351.i.i = getelementptr inbounds i8* %endp.021.i346.i.i, i64 1
  br i1 %tobool3.i350.i.i, label %if.end69.i, label %while.cond.i344.i.i

if.end11.i355.i.i:                                ; preds = %while.cond.i344.i.i
  %call.i354.i.i = call i32 @atoi(i8* %arrayidx161.i.i) #6
  br label %if.end175.i.i

if.end175.i.i:                                    ; preds = %if.end11.i355.i.i, %if.end11.i339.i.i
  %g_switch_val.0.i.i = phi i32 [ %call.i338.i.i, %if.end11.i339.i.i ], [ %call.i354.i.i, %if.end11.i355.i.i ]
  %return_val.0.i.i = phi i32 [ 2, %if.end11.i339.i.i ], [ 1, %if.end11.i355.i.i ]
  %cmp176.i.i = icmp eq i32 %g_switch_val.0.i.i, -1
  br i1 %cmp176.i.i, label %if.end69.i, label %if.else179.i.i

if.else179.i.i:                                   ; preds = %if.end175.i.i
  store i32 1, i32* @g_switch_set, align 4, !tbaa !1
  store i32 %g_switch_val.0.i.i, i32* @g_switch_value, align 4, !tbaa !1
  br label %if.end69.i

sw.epilog.i.i:                                    ; preds = %while.cond.backedge.i.i.i, %if.then141.i.i, %if.then116.i.i, %if.then113.i.i, %if.then105.i.i, %if.then97.i.i, %if.then91.i.i, %if.then83.i.i, %if.then77.i.i, %if.then73.i.i, %if.else67.i.i, %sw.bb.i.i, %if.end43.i.i
  br label %if.end69.i

if.else67.i:                                      ; preds = %for.body57.i
  %sub68.i = sub nsw i32 0, %call59.i
  br label %if.end69.i

if.end69.i:                                       ; preds = %while.body.i352.i.i, %while.body.i336.i.i, %if.else67.i, %sw.epilog.i.i, %if.else179.i.i, %if.end175.i.i, %if.then165.i.i, %if.end157.i.i, %sw.bb148.i.i, %if.end134.i.i, %if.then130.i.i, %if.then125.i.i, %sw.bb122.i.i, %if.then58.i.i.i, %if.else55.i324.i.i, %set_Wunused.exit.i.i.i, %read_integral_parameter.exit.i321.i.i, %if.then36.i.i.i, %if.then23.i299.i.i, %if.then.i285.i.i, %sw.bb100.i.i, %sw.bb94.i.i, %sw.bb88.i.i, %if.else78.i.i, %if.end65.i.i, %if.then61.i.i, %decode_g_option.exit.i.i, %if.end238.i.i.i, %if.else217.i.i.i, %if.then23.i.i.i, %if.then.i233.i.i, %if.end43.i.i, %if.else39.i.i, %if.then38.i.i, %if.then34.i.i, %if.then29.i.i, %if.end.i.i, %if.then62.i
  %lang_processed.0.i = phi i32 [ %sub68.i, %if.else67.i ], [ %call59.i, %if.then62.i ], [ %call59.i, %if.end.i.i ], [ %call59.i, %if.then29.i.i ], [ %call59.i, %if.then34.i.i ], [ %call59.i, %if.then38.i.i ], [ %call59.i, %if.else39.i.i ], [ %call59.i, %if.end43.i.i ], [ %call59.i, %if.then.i233.i.i ], [ %call59.i, %if.then23.i.i.i ], [ %call59.i, %if.else217.i.i.i ], [ %call59.i, %if.end238.i.i.i ], [ %call59.i, %decode_g_option.exit.i.i ], [ %call59.i, %if.then61.i.i ], [ %call59.i, %if.end65.i.i ], [ %call59.i, %if.else78.i.i ], [ %call59.i, %sw.bb88.i.i ], [ %call59.i, %sw.bb94.i.i ], [ %call59.i, %sw.bb100.i.i ], [ %call59.i, %if.then.i285.i.i ], [ %call59.i, %if.then23.i299.i.i ], [ %call59.i, %if.then36.i.i.i ], [ %call59.i, %read_integral_parameter.exit.i321.i.i ], [ %call59.i, %set_Wunused.exit.i.i.i ], [ %call59.i, %if.else55.i324.i.i ], [ %call59.i, %if.then58.i.i.i ], [ %call59.i, %sw.bb122.i.i ], [ %call59.i, %if.then125.i.i ], [ %call59.i, %if.then130.i.i ], [ %call59.i, %if.end134.i.i ], [ %call59.i, %sw.bb148.i.i ], [ %call59.i, %if.end157.i.i ], [ %call59.i, %if.then165.i.i ], [ %call59.i, %if.end175.i.i ], [ %call59.i, %if.else179.i.i ], [ %call59.i, %sw.epilog.i.i ], [ %call59.i, %while.body.i336.i.i ], [ %call59.i, %while.body.i352.i.i ]
  %indep_processed.0.i = phi i32 [ 0, %if.else67.i ], [ 0, %if.then62.i ], [ 1, %if.end.i.i ], [ 1, %if.then29.i.i ], [ 2, %if.then34.i.i ], [ 2, %if.then38.i.i ], [ 2, %if.else39.i.i ], [ 0, %if.end43.i.i ], [ 1, %if.then.i233.i.i ], [ 1, %if.then23.i.i.i ], [ 0, %if.else217.i.i.i ], [ 1, %if.end238.i.i.i ], [ %..i.i.i, %decode_g_option.exit.i.i ], [ 0, %if.then61.i.i ], [ 2, %if.end65.i.i ], [ 0, %if.else78.i.i ], [ 0, %sw.bb88.i.i ], [ 0, %sw.bb94.i.i ], [ 0, %sw.bb100.i.i ], [ 1, %if.then.i285.i.i ], [ 1, %if.then23.i299.i.i ], [ 1, %if.then36.i.i.i ], [ 1, %read_integral_parameter.exit.i321.i.i ], [ 1, %set_Wunused.exit.i.i.i ], [ 0, %if.else55.i324.i.i ], [ 1, %if.then58.i.i.i ], [ 0, %sw.bb122.i.i ], [ 0, %if.then125.i.i ], [ 0, %if.then130.i.i ], [ 2, %if.end134.i.i ], [ 0, %sw.bb148.i.i ], [ 2, %if.end157.i.i ], [ 0, %if.then165.i.i ], [ 0, %if.end175.i.i ], [ %return_val.0.i.i, %if.else179.i.i ], [ 1, %sw.epilog.i.i ], [ 0, %while.body.i336.i.i ], [ 0, %while.body.i352.i.i ]
  %167 = or i32 %indep_processed.0.i, %lang_processed.0.i
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %for.cond77.preheader.i, label %if.then73.i

for.cond77.preheader.i:                           ; preds = %if.end69.i
  %169 = load i8** %add.ptr58.i, align 8, !tbaa !8
  br label %for.body81.i

if.then73.i:                                      ; preds = %if.end69.i
  %cmp74.i = icmp sgt i32 %lang_processed.0.i, %indep_processed.0.i
  %cond.i = select i1 %cmp74.i, i32 %lang_processed.0.i, i32 %indep_processed.0.i
  %add.i = add nsw i32 %cond.i, %i.1237.i
  br label %for.cond54.backedge.i

for.cond77.i:                                     ; preds = %for.body81.i
  %170 = trunc i64 %indvars.iv.next.i to i32
  %cmp79.i = icmp ult i32 %170, 108
  br i1 %cmp79.i, label %for.body81.i, label %for.end101.i

for.body81.i:                                     ; preds = %for.cond77.i, %for.cond77.preheader.i
  %indvars.iv.i = phi i64 [ 0, %for.cond77.preheader.i ], [ %indvars.iv.next.i, %for.cond77.i ]
  %j.0235.i = phi i32 [ 0, %for.cond77.preheader.i ], [ %inc100.i, %for.cond77.i ]
  %option84.i = getelementptr inbounds [108 x %struct.lang_opt]* @documented_lang_options, i64 0, i64 %indvars.iv.i, i32 0
  %171 = load i8** %option84.i, align 16, !tbaa !63
  %call93.i = call i64 @strlen(i8* %171) #6
  %call94.i = call i32 @strncmp(i8* %169, i8* %171, i64 %call93.i) #6
  %tobool95.i = icmp eq i32 %call94.i, 0
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %inc100.i = add i32 %j.0235.i, 1
  %172 = trunc i64 %indvars.iv.i to i32
  br i1 %tobool95.i, label %for.end101.i, label %for.cond77.i

for.end101.i:                                     ; preds = %for.body81.i, %for.cond77.i
  %j.0.lcssa.i = phi i32 [ %172, %for.body81.i ], [ %inc100.i, %for.cond77.i ]
  %cmp103.i = icmp eq i32 %j.0.lcssa.i, 108
  br i1 %cmp103.i, label %if.else114.i, label %if.then105.i

if.then105.i:                                     ; preds = %for.end101.i
  %173 = load i32* @extra_warnings, align 4, !tbaa !1
  %tobool106.i = icmp eq i32 %173, 0
  br i1 %tobool106.i, label %if.end136.i, label %if.then107.i

if.then107.i:                                     ; preds = %if.then105.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([34 x i8]* @.str357, i64 0, i64 0), i8* %169) #6
  br label %if.end136.i

if.else114.i:                                     ; preds = %for.end101.i
  %174 = load i8* %169, align 1, !tbaa !5
  %cmp119.i = icmp eq i8 %174, 45
  br i1 %cmp119.i, label %land.lhs.true121.i, label %if.else132.i

land.lhs.true121.i:                               ; preds = %if.else114.i
  %arrayidx124.i = getelementptr inbounds i8* %169, i64 1
  %175 = load i8* %arrayidx124.i, align 1, !tbaa !5
  %cmp126.i = icmp eq i8 %175, 103
  br i1 %cmp126.i, label %if.then128.i, label %if.else132.i

if.then128.i:                                     ; preds = %land.lhs.true121.i
  %arrayidx131.i = getelementptr inbounds i8* %169, i64 2
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([39 x i8]* @.str359, i64 0, i64 0), i8* %arrayidx131.i) #6
  br label %if.end136.i

if.else132.i:                                     ; preds = %land.lhs.true121.i, %if.else114.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([25 x i8]* @.str360, i64 0, i64 0), i8* %169) #6
  br label %if.end136.i

if.end136.i:                                      ; preds = %if.else132.i, %if.then128.i, %if.then107.i, %if.then105.i
  %inc137.i = add nsw i32 %i.1237.i, 1
  br label %for.cond54.backedge.i

for.cond54.backedge.i:                            ; preds = %if.end136.i, %if.then73.i
  %i.1.be.i = phi i32 [ %add.i, %if.then73.i ], [ %inc137.i, %if.end136.i ]
  %cmp55.i = icmp slt i32 %i.1.be.i, %argc
  br i1 %cmp55.i, label %for.body57.i, label %for.end139.i

for.end139.i:                                     ; preds = %for.cond54.backedge.i, %if.end53.i
  %176 = load i32* @flag_no_inline, align 4, !tbaa !1
  %cmp140.i = icmp eq i32 %176, 2
  br i1 %cmp140.i, label %if.then142.i, label %if.else143.i

if.then142.i:                                     ; preds = %for.end139.i
  store i32 0, i32* @flag_no_inline, align 4, !tbaa !1
  br label %if.end144.i

if.else143.i:                                     ; preds = %for.end139.i
  store i32 %176, i32* @flag_really_no_inline, align 4, !tbaa !1
  br label %if.end144.i

if.end144.i:                                      ; preds = %if.else143.i, %if.then142.i
  %177 = load i32* @optimize, align 4, !tbaa !1
  %cmp145.i = icmp eq i32 %177, 0
  br i1 %cmp145.i, label %if.then147.i, label %if.end152.i

if.then147.i:                                     ; preds = %if.end144.i
  store i32 1, i32* @flag_no_inline, align 4, !tbaa !1
  store i32 0, i32* @warn_inline, align 4, !tbaa !1
  %178 = load i32* @warn_uninitialized, align 4, !tbaa !1
  %cmp148.i = icmp eq i32 %178, 1
  br i1 %cmp148.i, label %if.then150.i, label %if.end152.i

if.then150.i:                                     ; preds = %if.then147.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([44 x i8]* @.str361, i64 0, i64 0)) #6
  br label %if.end152.i

if.end152.i:                                      ; preds = %if.then150.i, %if.then147.i, %if.end144.i
  %179 = load i32* @flag_really_no_inline, align 4, !tbaa !1
  %cmp153.i = icmp eq i32 %179, 2
  br i1 %cmp153.i, label %if.then155.i, label %parse_options_and_default_flags.exit

if.then155.i:                                     ; preds = %if.end152.i
  %180 = load i32* @flag_no_inline, align 4, !tbaa !1
  store i32 %180, i32* @flag_really_no_inline, align 4, !tbaa !1
  br label %parse_options_and_default_flags.exit

parse_options_and_default_flags.exit:             ; preds = %if.end152.i, %if.then155.i
  %181 = load void ()** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 4), align 8, !tbaa !79
  call void %181() #6
  %182 = load %struct.diagnostic_context** @global_dc, align 8, !tbaa !8
  %arrayidx1 = getelementptr inbounds %struct.diagnostic_context* %182, i64 0, i32 0, i32 0, i32 9, i64 3
  %183 = load i32* %arrayidx1, align 4, !tbaa !1
  %tobool = icmp ne i32 %183, 0
  %.b = load i1* @exit_after_options, align 1
  %or.cond = or i1 %tobool, %.b
  br i1 %or.cond, label %if.end, label %if.then

if.then:                                          ; preds = %parse_options_and_default_flags.exit
  call void @override_options() #6
  %184 = load i32* @align_loops, align 4, !tbaa !1
  %cmp.i.i = icmp slt i32 %184, 1
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end.i.i18

if.then.i.i:                                      ; preds = %if.then
  store i32 1, i32* @align_loops, align 4, !tbaa !1
  br label %if.end.i.i18

if.end.i.i18:                                     ; preds = %if.then.i.i, %if.then
  %185 = phi i32 [ 1, %if.then.i.i ], [ %184, %if.then ]
  %186 = load i32* @align_loops_max_skip, align 4, !tbaa !1
  %cmp1.i.i = icmp sle i32 %186, %185
  %tobool.i.i16 = icmp ne i32 %185, 0
  %or.cond.i.i17 = and i1 %cmp1.i.i, %tobool.i.i16
  br i1 %or.cond.i.i17, label %if.end3.i.i, label %if.then2.i.i

if.then2.i.i:                                     ; preds = %if.end.i.i18
  %sub.i.i = add nsw i32 %185, -1
  store i32 %sub.i.i, i32* @align_loops_max_skip, align 4, !tbaa !1
  br label %if.end3.i.i

if.end3.i.i:                                      ; preds = %if.then2.i.i, %if.end.i.i18
  %mul.i.i = shl i32 %185, 1
  %sub4.i.i = add nsw i32 %mul.i.i, -1
  %conv.i.i = sext i32 %sub4.i.i to i64
  br label %while.body.i.i.i21

while.body.i.i.i21:                               ; preds = %while.body.i.i.i21, %if.end3.i.i
  %log.04.i.i.i = phi i32 [ %inc.i.i.i19, %while.body.i.i.i21 ], [ -1, %if.end3.i.i ]
  %x.addr.03.i.i.i = phi i64 [ %shr.i.i.i, %while.body.i.i.i21 ], [ %conv.i.i, %if.end3.i.i ]
  %inc.i.i.i19 = add nsw i32 %log.04.i.i.i, 1
  %shr.i.i.i = lshr i64 %x.addr.03.i.i.i, 1
  %cmp.i.i.i20 = icmp eq i64 %shr.i.i.i, 0
  br i1 %cmp.i.i.i20, label %floor_log2_wide.exit.i.i, label %while.body.i.i.i21

floor_log2_wide.exit.i.i:                         ; preds = %while.body.i.i.i21
  store i32 %inc.i.i.i19, i32* @align_loops_log, align 4, !tbaa !1
  %187 = load i32* @align_jumps, align 4, !tbaa !1
  %cmp5.i.i22 = icmp slt i32 %187, 1
  br i1 %cmp5.i.i22, label %if.then7.i.i, label %if.end8.i.i

if.then7.i.i:                                     ; preds = %floor_log2_wide.exit.i.i
  store i32 1, i32* @align_jumps, align 4, !tbaa !1
  br label %if.end8.i.i

if.end8.i.i:                                      ; preds = %if.then7.i.i, %floor_log2_wide.exit.i.i
  %188 = phi i32 [ 1, %if.then7.i.i ], [ %187, %floor_log2_wide.exit.i.i ]
  %189 = load i32* @align_jumps_max_skip, align 4, !tbaa !1
  %cmp9.i.i = icmp sle i32 %189, %188
  %tobool12.i.i = icmp ne i32 %188, 0
  %or.cond139.i.i = and i1 %cmp9.i.i, %tobool12.i.i
  br i1 %or.cond139.i.i, label %if.end15.i.i, label %if.then13.i.i23

if.then13.i.i23:                                  ; preds = %if.end8.i.i
  %sub14.i.i = add nsw i32 %188, -1
  store i32 %sub14.i.i, i32* @align_jumps_max_skip, align 4, !tbaa !1
  br label %if.end15.i.i

if.end15.i.i:                                     ; preds = %if.then13.i.i23, %if.end8.i.i
  %mul16.i.i = shl i32 %188, 1
  %sub17.i.i = add nsw i32 %mul16.i.i, -1
  %conv18.i.i = sext i32 %sub17.i.i to i64
  br label %while.body.i150.i.i

while.body.i150.i.i:                              ; preds = %while.body.i150.i.i, %if.end15.i.i
  %log.04.i145.i.i = phi i32 [ %inc.i147.i.i, %while.body.i150.i.i ], [ -1, %if.end15.i.i ]
  %x.addr.03.i146.i.i = phi i64 [ %shr.i148.i.i, %while.body.i150.i.i ], [ %conv18.i.i, %if.end15.i.i ]
  %inc.i147.i.i = add nsw i32 %log.04.i145.i.i, 1
  %shr.i148.i.i = lshr i64 %x.addr.03.i146.i.i, 1
  %cmp.i149.i.i = icmp eq i64 %shr.i148.i.i, 0
  br i1 %cmp.i149.i.i, label %floor_log2_wide.exit151.i.i, label %while.body.i150.i.i

floor_log2_wide.exit151.i.i:                      ; preds = %while.body.i150.i.i
  store i32 %inc.i147.i.i, i32* @align_jumps_log, align 4, !tbaa !1
  %190 = load i32* @align_labels, align 4, !tbaa !1
  %cmp20.i.i = icmp slt i32 %190, 1
  br i1 %cmp20.i.i, label %if.then22.i.i, label %if.end23.i.i

if.then22.i.i:                                    ; preds = %floor_log2_wide.exit151.i.i
  store i32 1, i32* @align_labels, align 4, !tbaa !1
  br label %if.end23.i.i

if.end23.i.i:                                     ; preds = %if.then22.i.i, %floor_log2_wide.exit151.i.i
  %191 = phi i32 [ 1, %if.then22.i.i ], [ %190, %floor_log2_wide.exit151.i.i ]
  %mul24.i.i = shl i32 %191, 1
  %sub25.i.i = add nsw i32 %mul24.i.i, -1
  %conv26.i.i = sext i32 %sub25.i.i to i64
  br label %while.body.i157.i.i

while.body.i157.i.i:                              ; preds = %while.body.i157.i.i, %if.end23.i.i
  %log.04.i152.i.i = phi i32 [ %inc.i154.i.i, %while.body.i157.i.i ], [ -1, %if.end23.i.i ]
  %x.addr.03.i153.i.i = phi i64 [ %shr.i155.i.i, %while.body.i157.i.i ], [ %conv26.i.i, %if.end23.i.i ]
  %inc.i154.i.i = add nsw i32 %log.04.i152.i.i, 1
  %shr.i155.i.i = lshr i64 %x.addr.03.i153.i.i, 1
  %cmp.i156.i.i = icmp eq i64 %shr.i155.i.i, 0
  br i1 %cmp.i156.i.i, label %floor_log2_wide.exit158.i.i, label %while.body.i157.i.i

floor_log2_wide.exit158.i.i:                      ; preds = %while.body.i157.i.i
  store i32 %inc.i154.i.i, i32* @align_labels_log, align 4, !tbaa !1
  %192 = load i32* @align_labels_max_skip, align 4, !tbaa !1
  %cmp28.i.i = icmp sle i32 %192, %191
  %tobool31.i.i = icmp ne i32 %191, 0
  %or.cond140.i.i = and i1 %cmp28.i.i, %tobool31.i.i
  br i1 %or.cond140.i.i, label %if.end34.i.i, label %if.then32.i.i

if.then32.i.i:                                    ; preds = %floor_log2_wide.exit158.i.i
  %sub33.i.i = add nsw i32 %191, -1
  store i32 %sub33.i.i, i32* @align_labels_max_skip, align 4, !tbaa !1
  br label %if.end34.i.i

if.end34.i.i:                                     ; preds = %if.then32.i.i, %floor_log2_wide.exit158.i.i
  %193 = load i32* @align_functions, align 4, !tbaa !1
  %cmp35.i.i = icmp slt i32 %193, 1
  br i1 %cmp35.i.i, label %if.then37.i.i, label %if.end38.i.i

if.then37.i.i:                                    ; preds = %if.end34.i.i
  store i32 1, i32* @align_functions, align 4, !tbaa !1
  br label %if.end38.i.i

if.end38.i.i:                                     ; preds = %if.then37.i.i, %if.end34.i.i
  %194 = phi i32 [ 1, %if.then37.i.i ], [ %193, %if.end34.i.i ]
  %mul39.i.i = shl i32 %194, 1
  %sub40.i.i = add nsw i32 %mul39.i.i, -1
  %conv41.i.i = sext i32 %sub40.i.i to i64
  br label %while.body.i164.i.i

while.body.i164.i.i:                              ; preds = %while.body.i164.i.i, %if.end38.i.i
  %log.04.i159.i.i = phi i32 [ %inc.i161.i.i, %while.body.i164.i.i ], [ -1, %if.end38.i.i ]
  %x.addr.03.i160.i.i = phi i64 [ %shr.i162.i.i, %while.body.i164.i.i ], [ %conv41.i.i, %if.end38.i.i ]
  %inc.i161.i.i = add nsw i32 %log.04.i159.i.i, 1
  %shr.i162.i.i = lshr i64 %x.addr.03.i160.i.i, 1
  %cmp.i163.i.i = icmp eq i64 %shr.i162.i.i, 0
  br i1 %cmp.i163.i.i, label %floor_log2_wide.exit165.i.i, label %while.body.i164.i.i

floor_log2_wide.exit165.i.i:                      ; preds = %while.body.i164.i.i
  store i32 %inc.i161.i.i, i32* @align_functions_log, align 4, !tbaa !1
  %195 = load i32* @flag_unroll_all_loops, align 4, !tbaa !1
  %tobool43.i.i = icmp eq i32 %195, 0
  br i1 %tobool43.i.i, label %if.end45.i.i, label %if.end45.thread.i.i

if.end45.thread.i.i:                              ; preds = %floor_log2_wide.exit165.i.i
  store i32 1, i32* @flag_unroll_loops, align 4, !tbaa !1
  br label %if.then47.i.i

if.end45.i.i:                                     ; preds = %floor_log2_wide.exit165.i.i
  %.pr.i.i24 = load i32* @flag_unroll_loops, align 4, !tbaa !1
  %tobool46.i.i = icmp eq i32 %.pr.i.i24, 0
  br i1 %tobool46.i.i, label %if.end48.i.i, label %if.then47.i.i

if.then47.i.i:                                    ; preds = %if.end45.i.i, %if.end45.thread.i.i
  store i32 1, i32* @flag_strength_reduce, align 4, !tbaa !1
  store i32 1, i32* @flag_rerun_cse_after_loop, align 4, !tbaa !1
  br label %if.end48.i.i

if.end48.i.i:                                     ; preds = %if.then47.i.i, %if.end45.i.i
  %196 = load i32* @flag_non_call_exceptions, align 4, !tbaa !1
  %tobool49.i.i = icmp eq i32 %196, 0
  br i1 %tobool49.i.i, label %if.end51.i.i, label %if.end51.thread.i.i

if.end51.thread.i.i:                              ; preds = %if.end48.i.i
  store i32 1, i32* @flag_asynchronous_unwind_tables, align 4, !tbaa !1
  br label %if.then53.i.i

if.end51.i.i:                                     ; preds = %if.end48.i.i
  %.pr167.i.i = load i32* @flag_asynchronous_unwind_tables, align 4, !tbaa !1
  %tobool52.i.i = icmp eq i32 %.pr167.i.i, 0
  br i1 %tobool52.i.i, label %if.end54.i.i, label %if.then53.i.i

if.then53.i.i:                                    ; preds = %if.end51.i.i, %if.end51.thread.i.i
  store i32 1, i32* @flag_unwind_tables, align 4, !tbaa !1
  br label %if.end54.i.i

if.end54.i.i:                                     ; preds = %if.then53.i.i, %if.end51.i.i
  %197 = load i32* @flag_delayed_branch, align 4, !tbaa !1
  %tobool55.i.i = icmp eq i32 %197, 0
  br i1 %tobool55.i.i, label %if.end57.i.i, label %if.then56.i.i

if.then56.i.i:                                    ; preds = %if.end54.i.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([51 x i8]* @.str345, i64 0, i64 0)) #6
  br label %if.end57.i.i

if.end57.i.i:                                     ; preds = %if.then56.i.i, %if.end54.i.i
  %198 = load i32* @profile_flag, align 4, !tbaa !1
  %tobool58.i.i = icmp ne i32 %198, 0
  %199 = load i32* @flag_omit_frame_pointer, align 4
  %tobool59.i.i = icmp ne i32 %199, 0
  %or.cond141.i.i = and i1 %tobool58.i.i, %tobool59.i.i
  br i1 %or.cond141.i.i, label %if.then60.i.i, label %if.end61.i.i

if.then60.i.i:                                    ; preds = %if.end57.i.i
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([48 x i8]* @.str346, i64 0, i64 0)) #6
  store i32 0, i32* @flag_omit_frame_pointer, align 4, !tbaa !1
  br label %if.end61.i.i

if.end61.i.i:                                     ; preds = %if.then60.i.i, %if.end57.i.i
  store i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0), i8** @user_label_prefix, align 8, !tbaa !8
  %200 = load i32* @flag_leading_underscore, align 4, !tbaa !1
  %cmp62.i.i25 = icmp eq i32 %200, -1
  br i1 %cmp62.i.i25, label %if.end83.i.i, label %if.then78.i.i

if.then78.i.i:                                    ; preds = %if.end61.i.i
  %tobool79.i.i = icmp ne i32 %200, 0
  %cond.i.i = select i1 %tobool79.i.i, i8* getelementptr inbounds ([2 x i8]* @.str347, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0)
  store i8* %cond.i.i, i8** @user_label_prefix, align 8, !tbaa !8
  br label %if.end83.i.i

if.end83.i.i:                                     ; preds = %if.then78.i.i, %if.end61.i.i
  %.b.i.i = load i1* @version_flag, align 1
  br i1 %.b.i.i, label %if.then85.i.i, label %if.end89.i.i

if.then85.i.i:                                    ; preds = %if.end83.i.i
  %201 = load %struct._IO_FILE** @stderr, align 8, !tbaa !8
  %202 = load i8** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 0), align 8, !tbaa !50
  %203 = load i8** @version_string, align 8, !tbaa !8
  call void (%struct._IO_FILE*, i8*, ...)* @fnotice(%struct._IO_FILE* %201, i8* getelementptr inbounds ([57 x i8]* @.str342, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0), i8* %202, i8* %203, i8* getelementptr inbounds ([7 x i8]* @.str343, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8]* @.str344, i64 0, i64 0)) #6
  %204 = load i32* @quiet_flag, align 4, !tbaa !1
  %tobool86.i.i = icmp eq i32 %204, 0
  br i1 %tobool86.i.i, label %if.then87.i.i, label %if.end92.i.i

if.then87.i.i:                                    ; preds = %if.then85.i.i
  call fastcc void @print_switch_values(%struct._IO_FILE* %201, i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0)) #6
  br label %if.end89.i.i

if.end89.i.i:                                     ; preds = %if.then87.i.i, %if.end83.i.i
  %.pr169.i.i = load i32* @quiet_flag, align 4, !tbaa !1
  %tobool90.i.i26 = icmp eq i32 %.pr169.i.i, 0
  br i1 %tobool90.i.i26, label %if.then91.i.i27, label %if.end92.i.i

if.then91.i.i27:                                  ; preds = %if.end89.i.i
  store i32 1, i32* @time_report, align 4, !tbaa !1
  br label %if.end92.i.i

if.end92.i.i:                                     ; preds = %if.then91.i.i27, %if.end89.i.i, %if.then85.i.i
  %205 = load i32* @flag_syntax_only, align 4, !tbaa !1
  %tobool93.i.i = icmp eq i32 %205, 0
  br i1 %tobool93.i.i, label %if.end95.i.i, label %if.end95.thread.i.i

if.end95.thread.i.i:                              ; preds = %if.end92.i.i
  store i32 0, i32* @write_symbols, align 4, !tbaa !5
  store i32 0, i32* @profile_flag, align 4, !tbaa !1
  br label %if.end103.i.i

if.end95.i.i:                                     ; preds = %if.end92.i.i
  %.pr171.i.i = load i32* @write_symbols, align 4, !tbaa !5
  switch i32 %.pr171.i.i, label %if.end103.i.i [
    i32 1, label %if.then98.i.i
    i32 4, label %if.then102.i.i
  ]

if.then98.i.i:                                    ; preds = %if.end95.i.i
  store %struct.gcc_debug_hooks* @dbx_debug_hooks, %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !8
  br label %if.end103.i.i

if.then102.i.i:                                   ; preds = %if.end95.i.i
  store %struct.gcc_debug_hooks* @dwarf2_debug_hooks, %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !8
  br label %if.end103.i.i

if.end103.i.i:                                    ; preds = %if.then102.i.i, %if.then98.i.i, %if.end95.i.i, %if.end95.thread.i.i
  %206 = load i32* @flag_gen_aux_info, align 4, !tbaa !1
  %tobool104.i.i = icmp eq i32 %206, 0
  br i1 %tobool104.i.i, label %if.end111.i.i, label %if.then105.i.i28

if.then105.i.i28:                                 ; preds = %if.end103.i.i
  %207 = load i8** @aux_info_file_name, align 8, !tbaa !8
  %call106.i.i = call %struct._IO_FILE* @fopen(i8* %207, i8* getelementptr inbounds ([2 x i8]* @.str22, i64 0, i64 0)) #6
  store %struct._IO_FILE* %call106.i.i, %struct._IO_FILE** @aux_info_file, align 8, !tbaa !8
  %cmp107.i.i = icmp eq %struct._IO_FILE* %call106.i.i, null
  br i1 %cmp107.i.i, label %if.then109.i.i, label %if.end111.i.i

if.then109.i.i:                                   ; preds = %if.then105.i.i28
  %208 = load i8** @aux_info_file_name, align 8, !tbaa !8
  call void (i8*, ...)* @fatal_io_error(i8* getelementptr inbounds ([14 x i8]* @.str350, i64 0, i64 0), i8* %208) #10
  unreachable

if.end111.i.i:                                    ; preds = %if.then105.i.i28, %if.end103.i.i
  %209 = load i8* getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 13), align 8, !tbaa !80, !range !85
  %tobool112.i.i = icmp eq i8 %209, 0
  br i1 %tobool112.i.i, label %if.then113.i.i29, label %if.end120.i.i

if.then113.i.i29:                                 ; preds = %if.end111.i.i
  %210 = load i32* @flag_function_sections, align 4, !tbaa !1
  %tobool114.i.i = icmp eq i32 %210, 0
  br i1 %tobool114.i.i, label %if.end116.i.i, label %if.then115.i.i

if.then115.i.i:                                   ; preds = %if.then113.i.i29
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([50 x i8]* @.str351, i64 0, i64 0)) #6
  store i32 0, i32* @flag_function_sections, align 4, !tbaa !1
  br label %if.end116.i.i

if.end116.i.i:                                    ; preds = %if.then115.i.i, %if.then113.i.i29
  %211 = load i32* @flag_data_sections, align 4, !tbaa !1
  %tobool117.i.i = icmp eq i32 %211, 0
  br i1 %tobool117.i.i, label %if.end120.i.i, label %if.then118.i.i

if.then118.i.i:                                   ; preds = %if.end116.i.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([46 x i8]* @.str352, i64 0, i64 0)) #6
  store i32 0, i32* @flag_data_sections, align 4, !tbaa !1
  br label %if.end120.i.i

if.end120.i.i:                                    ; preds = %if.then118.i.i, %if.end116.i.i, %if.end111.i.i
  %212 = load i32* @flag_function_sections, align 4, !tbaa !1
  %tobool121.i.i = icmp ne i32 %212, 0
  %213 = load i32* @profile_flag, align 4
  %tobool123.i.i = icmp ne i32 %213, 0
  %or.cond142.i.i = and i1 %tobool121.i.i, %tobool123.i.i
  br i1 %or.cond142.i.i, label %if.then124.i.i, label %if.end125.i.i

if.then124.i.i:                                   ; preds = %if.end120.i.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([60 x i8]* @.str353, i64 0, i64 0)) #6
  store i32 0, i32* @flag_function_sections, align 4, !tbaa !1
  br label %if.end125.i.i

if.end125.i.i:                                    ; preds = %if.then124.i.i, %if.end120.i.i
  %214 = load i32* @flag_prefetch_loop_arrays, align 4, !tbaa !1
  %tobool126.i.i = icmp eq i32 %214, 0
  %215 = load i32* @x86_prefetch_sse, align 4
  %tobool128.i.i = icmp ne i32 %215, 0
  %or.cond143.i.i = or i1 %tobool126.i.i, %tobool128.i.i
  br i1 %or.cond143.i.i, label %if.end133.i.i, label %lor.lhs.false129.i.i

lor.lhs.false129.i.i:                             ; preds = %if.end125.i.i
  %216 = load i32* @target_flags, align 4, !tbaa !1
  %and.i.i = and i32 %216, 1048576
  %cmp130.i.i = icmp eq i32 %and.i.i, 0
  br i1 %cmp130.i.i, label %if.end133.thread.i.i, label %if.end133.i.i

if.end133.thread.i.i:                             ; preds = %lor.lhs.false129.i.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([75 x i8]* @.str354, i64 0, i64 0)) #6
  store i32 0, i32* @flag_prefetch_loop_arrays, align 4, !tbaa !1
  br label %process_options.exit.i

if.end133.i.i:                                    ; preds = %lor.lhs.false129.i.i, %if.end125.i.i
  %tobool134.i.i = icmp ne i32 %214, 0
  %217 = load i32* @optimize_size, align 4
  %tobool136.i.i = icmp ne i32 %217, 0
  %or.cond144.i.i = and i1 %tobool134.i.i, %tobool136.i.i
  br i1 %or.cond144.i.i, label %if.then137.i.i, label %process_options.exit.i

if.then137.i.i:                                   ; preds = %if.end133.i.i
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([49 x i8]* @.str355, i64 0, i64 0)) #6
  store i32 0, i32* @flag_prefetch_loop_arrays, align 4, !tbaa !1
  br label %process_options.exit.i

process_options.exit.i:                           ; preds = %if.then137.i.i, %if.end133.i.i, %if.end133.thread.i.i
  call void @init_timevar() #6
  call void @timevar_start(i32 0) #6
  store i8* (%union.tree_node*, i32)* @decl_name, i8* (%union.tree_node*, i32)** @decl_printable_name, align 8, !tbaa !8
  store %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, i32, i32)* bitcast (void ()* @do_abort to %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, i32, i32)*), %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, i32, i32)** @lang_expand_expr, align 8, !tbaa !8
  %218 = load i64* getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 1), align 8, !tbaa !86
  %sub1.i.i = add i64 %218, 34359738351
  %div.i.i = lshr i64 %sub1.i.i, 3
  %conv.i1.i = trunc i64 %div.i.i to i32
  store i32 %conv.i1.i, i32* getelementptr inbounds ([256 x i32]* @tree_code_length, i64 0, i64 1), align 4, !tbaa !1
  call void @init_ggc() #6
  call void @ggc_add_rtx_root(%struct.rtx_def** @stack_limit_rtx, i32 1) #6
  call void @ggc_add_tree_root(%union.tree_node** @current_function_decl, i32 1) #6
  call void @ggc_add_tree_root(%union.tree_node** @current_function_func_begin_label, i32 1) #6
  call void @init_stringpool() #6
  call void @init_obstacks() #6
  %219 = load i32* @debug_info_level, align 4, !tbaa !5
  %220 = and i32 %219, -2
  %221 = icmp eq i32 %220, 2
  %222 = load i32* @flag_test_coverage, align 4
  %tobool.i2.i = icmp ne i32 %222, 0
  %or.cond8.i.i = or i1 %221, %tobool.i2.i
  br i1 %or.cond8.i.i, label %lor.end.i.i, label %lor.rhs.i.i

lor.rhs.i.i:                                      ; preds = %process_options.exit.i
  %223 = load i32* @warn_notreached, align 4, !tbaa !1
  %tobool6.i.i = icmp ne i32 %223, 0
  br label %lor.end.i.i

lor.end.i.i:                                      ; preds = %lor.rhs.i.i, %process_options.exit.i
  %224 = phi i1 [ true, %process_options.exit.i ], [ %tobool6.i.i, %lor.rhs.i.i ]
  %lor.ext.i.i = zext i1 %224 to i32
  call void @init_emit_once(i32 %lor.ext.i.i) #6
  call void @init_regs() #6
  call void @init_alias_once() #6
  call void @init_stmt() #6
  call void @init_loop() #6
  call void @init_reload() #6
  call void @init_function_once() #6
  call void @init_stor_layout_once() #6
  call void @init_varasm_once() #6
  call void @init_EXPR_INSN_LIST_cache() #6
  call void @init_dummy_function_start() #6
  call void @init_expmed() #6
  call void @init_expr_once() #6
  %225 = load i32* @flag_caller_saves, align 4, !tbaa !1
  %tobool7.i.i = icmp eq i32 %225, 0
  br i1 %tobool7.i.i, label %lang_independent_init.exit.i, label %if.then.i3.i

if.then.i3.i:                                     ; preds = %lor.end.i.i
  call void @init_caller_save() #6
  br label %lang_independent_init.exit.i

lang_independent_init.exit.i:                     ; preds = %if.then.i3.i, %lor.end.i.i
  call void @expand_dummy_function_end() #6
  %226 = load i8** @filename, align 8, !tbaa !8
  %227 = load i8** @dump_base_name, align 8, !tbaa !8
  %cmp.i5.i = icmp eq i8* %227, null
  br i1 %cmp.i5.i, label %if.then.i8.i, label %if.end.i10.i

if.then.i8.i:                                     ; preds = %lang_independent_init.exit.i
  %tobool.i6.i = icmp ne i8* %226, null
  %cond.i7.i = select i1 %tobool.i6.i, i8* %226, i8* getelementptr inbounds ([8 x i8]* @.str19, i64 0, i64 0)
  store i8* %cond.i7.i, i8** @dump_base_name, align 8, !tbaa !8
  br label %if.end.i10.i

if.end.i10.i:                                     ; preds = %if.then.i8.i, %lang_independent_init.exit.i
  %228 = load i8* (i8*)** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 5), align 8, !tbaa !87
  %call.i.i30 = call i8* %228(i8* %226) #6
  %cmp1.i9.i = icmp eq i8* %call.i.i30, null
  br i1 %cmp1.i9.i, label %if.end.i, label %if.end3.i12.i

if.end3.i12.i:                                    ; preds = %if.end.i10.i
  %call4.i.i = call i8* @ggc_alloc_string(i8* %call.i.i30, i32 -1) #6
  store i8* %call4.i.i, i8** @input_filename, align 8, !tbaa !8
  store i8* %call4.i.i, i8** @main_input_filename, align 8, !tbaa !8
  %cmp.i.i11.i = icmp eq i8* %call4.i.i, null
  %229 = load i8** @asm_file_name, align 8
  %cmp1.i.i.i = icmp eq i8* %229, null
  %or.cond.i.i.i = and i1 %cmp.i.i11.i, %cmp1.i.i.i
  br i1 %or.cond.i.i.i, label %if.then.i.i.i31, label %if.else.i.i.i32

if.then.i.i.i31:                                  ; preds = %if.end3.i12.i
  %230 = load %struct._IO_FILE** @stdout, align 8, !tbaa !8
  store %struct._IO_FILE* %230, %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  br label %if.end18.i.i.i

if.else.i.i.i32:                                  ; preds = %if.end3.i12.i
  br i1 %cmp1.i.i.i, label %if.then3.i.i.i, label %if.end.i.i.i38

if.then3.i.i.i:                                   ; preds = %if.else.i.i.i32
  %231 = load i8** @dump_base_name, align 8, !tbaa !8
  %call.i.i.i33 = call i64 @strlen(i8* %231) #6
  %conv.i.i.i34 = trunc i64 %call.i.i.i33 to i32
  %add.i.i.i = shl i64 %call.i.i.i33, 32
  %sext.i.i.i = add i64 %add.i.i.i, 25769803776
  %conv4.i.i.i = ashr exact i64 %sext.i.i.i, 32
  %call5.i.i.i = call noalias i8* @xmalloc(i64 %conv4.i.i.i) #6
  %232 = load i8** @dump_base_name, align 8, !tbaa !8
  %sext36.i.i.i = add i64 %add.i.i.i, 4294967296
  %conv7.i.i.i = ashr exact i64 %sext36.i.i.i, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call5.i.i.i, i8* %232, i64 %conv7.i.i.i, i32 1, i1 false) #6
  %cmp114.i.i.i.i = icmp sgt i32 %conv.i.i.i34, 2
  br i1 %cmp114.i.i.i.i, label %for.body.i.i.i.i, label %strip_off_ending.exit.i.i.i

for.cond.i.i.i.i:                                 ; preds = %for.body.i.i.i.i
  %233 = trunc i64 %indvars.iv.next.i.i.i.i to i32
  %cmp.i.i.i.i = icmp slt i32 %233, 6
  %cmp1.i.i.i.i = icmp slt i32 %233, %conv.i.i.i34
  %or.cond.i.i.i.i = and i1 %cmp.i.i.i.i, %cmp1.i.i.i.i
  br i1 %or.cond.i.i.i.i, label %for.body.i.i.i.i, label %strip_off_ending.exit.i.i.i

for.body.i.i.i.i:                                 ; preds = %if.then3.i.i.i, %for.cond.i.i.i.i
  %indvars.iv.i.i.i.i = phi i64 [ %indvars.iv.next.i.i.i.i, %for.cond.i.i.i.i ], [ 2, %if.then3.i.i.i ]
  %sub.i.i.i.i = sub i64 %call.i.i.i33, %indvars.iv.i.i.i.i
  %sext37.i.i.i = shl i64 %sub.i.i.i.i, 32
  %idxprom.i.i.i.i35 = ashr exact i64 %sext37.i.i.i, 32
  %arrayidx.i.i.i.i36 = getelementptr inbounds i8* %call5.i.i.i, i64 %idxprom.i.i.i.i35
  %234 = load i8* %arrayidx.i.i.i.i36, align 1, !tbaa !5
  %cmp2.i.i.i.i = icmp eq i8 %234, 46
  %indvars.iv.next.i.i.i.i = add nuw nsw i64 %indvars.iv.i.i.i.i, 1
  br i1 %cmp2.i.i.i.i, label %if.then.i.i.i.i, label %for.cond.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %for.body.i.i.i.i
  store i8 0, i8* %arrayidx.i.i.i.i36, align 1, !tbaa !5
  br label %strip_off_ending.exit.i.i.i

strip_off_ending.exit.i.i.i:                      ; preds = %for.cond.i.i.i.i, %if.then.i.i.i.i, %if.then3.i.i.i
  %strlen.i.i.i = call i64 @strlen(i8* %call5.i.i.i) #6
  %endptr.i.i.i = getelementptr i8* %call5.i.i.i, i64 %strlen.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %endptr.i.i.i, i8* getelementptr inbounds ([3 x i8]* @.str20, i64 0, i64 0), i64 3, i32 1, i1 false) #6
  store i8* %call5.i.i.i, i8** @asm_file_name, align 8, !tbaa !8
  br label %if.end.i.i.i38

if.end.i.i.i38:                                   ; preds = %strip_off_ending.exit.i.i.i, %if.else.i.i.i32
  %235 = phi i8* [ %call5.i.i.i, %strip_off_ending.exit.i.i.i ], [ %229, %if.else.i.i.i32 ]
  %call9.i.i.i = call i32 @strcmp(i8* %235, i8* getelementptr inbounds ([2 x i8]* @.str21, i64 0, i64 0)) #6
  %tobool.i.i.i37 = icmp eq i32 %call9.i.i.i, 0
  br i1 %tobool.i.i.i37, label %if.then10.i.i.i, label %if.else11.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end.i.i.i38
  %236 = load %struct._IO_FILE** @stdout, align 8, !tbaa !8
  br label %if.end13.i.i.i

if.else11.i.i.i:                                  ; preds = %if.end.i.i.i38
  %call12.i.i.i = call %struct._IO_FILE* @fopen(i8* %235, i8* getelementptr inbounds ([2 x i8]* @.str22, i64 0, i64 0)) #6
  br label %if.end13.i.i.i

if.end13.i.i.i:                                   ; preds = %if.else11.i.i.i, %if.then10.i.i.i
  %storemerge.i.i.i = phi %struct._IO_FILE* [ %236, %if.then10.i.i.i ], [ %call12.i.i.i, %if.else11.i.i.i ]
  store %struct._IO_FILE* %storemerge.i.i.i, %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %cmp14.i.i.i = icmp eq %struct._IO_FILE* %storemerge.i.i.i, null
  br i1 %cmp14.i.i.i, label %if.then16.i.i.i, label %if.end18.i.i.i

if.then16.i.i.i:                                  ; preds = %if.end13.i.i.i
  %237 = load i8** @asm_file_name, align 8, !tbaa !8
  call void (i8*, ...)* @fatal_io_error(i8* getelementptr inbounds ([26 x i8]* @.str23, i64 0, i64 0), i8* %237) #10
  unreachable

if.end18.i.i.i:                                   ; preds = %if.end13.i.i.i, %if.then.i.i.i31
  %238 = phi %struct._IO_FILE* [ %storemerge.i.i.i, %if.end13.i.i.i ], [ %230, %if.then.i.i.i31 ]
  %239 = load i32* @flag_syntax_only, align 4, !tbaa !1
  %tobool19.i.i.i = icmp eq i32 %239, 0
  br i1 %tobool19.i.i.i, label %do.body.i.i.i, label %init_asm_output.exit.i.i

do.body.i.i.i:                                    ; preds = %if.end18.i.i.i
  %240 = load i8** @main_input_filename, align 8, !tbaa !8
  call void @output_file_directive(%struct._IO_FILE* %238, i8* %240) #6
  %241 = load i32* @ix86_asm_dialect, align 4, !tbaa !5
  %cmp21.i.i.i39 = icmp eq i32 %241, 1
  br i1 %cmp21.i.i.i39, label %if.then23.i.i.i40, label %do.end.i.i.i

if.then23.i.i.i40:                                ; preds = %do.body.i.i.i
  %242 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %243 = call i64 @fwrite(i8* getelementptr inbounds ([16 x i8]* @.str24, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %242) #6
  br label %do.end.i.i.i

do.end.i.i.i:                                     ; preds = %if.then23.i.i.i40, %do.body.i.i.i
  %244 = load i32* @flag_verbose_asm, align 4, !tbaa !1
  %tobool26.i.i.i = icmp eq i32 %244, 0
  br i1 %tobool26.i.i.i, label %init_asm_output.exit.i.i, label %if.then27.i.i.i

if.then27.i.i.i:                                  ; preds = %do.end.i.i.i
  %245 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %246 = load i8** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 0), align 8, !tbaa !50
  %247 = load i8** @version_string, align 8, !tbaa !8
  call void (%struct._IO_FILE*, i8*, ...)* @fnotice(%struct._IO_FILE* %245, i8* getelementptr inbounds ([57 x i8]* @.str342, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str25, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str26, i64 0, i64 0), i8* %246, i8* %247, i8* getelementptr inbounds ([7 x i8]* @.str343, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str25, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8]* @.str344, i64 0, i64 0)) #6
  %248 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  call fastcc void @print_switch_values(%struct._IO_FILE* %248, i8* getelementptr inbounds ([2 x i8]* @.str25, i64 0, i64 0)) #6
  %249 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %fputc.i.i.i = call i32 @fputc(i32 10, %struct._IO_FILE* %249) #6
  br label %init_asm_output.exit.i.i

init_asm_output.exit.i.i:                         ; preds = %if.then27.i.i.i, %do.end.i.i.i, %if.end18.i.i.i
  call void @init_eh() #6
  call void @init_optabs() #6
  %250 = load i8** @input_filename, align 8, !tbaa !8
  %251 = load %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %tobool.i16.i.i = icmp eq %struct.file_stack* %251, null
  br i1 %tobool.i16.i.i, label %push_srcloc.exit.i.i, label %if.then.i17.i.i

if.then.i17.i.i:                                  ; preds = %init_asm_output.exit.i.i
  %name.i.i.i = getelementptr inbounds %struct.file_stack* %251, i64 0, i32 0
  store i8* %250, i8** %name.i.i.i, align 8, !tbaa !24
  %252 = load i32* @lineno, align 4, !tbaa !1
  %253 = load %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %line1.i.i.i = getelementptr inbounds %struct.file_stack* %253, i64 0, i32 2
  store i32 %252, i32* %line1.i.i.i, align 4, !tbaa !26
  br label %push_srcloc.exit.i.i

push_srcloc.exit.i.i:                             ; preds = %if.then.i17.i.i, %init_asm_output.exit.i.i
  %call.i18.i.i = call noalias i8* @xmalloc(i64 24) #6
  %254 = bitcast i8* %call.i18.i.i to %struct.file_stack*
  store i8* %250, i8** @input_filename, align 8, !tbaa !8
  %name2.i.i.i = bitcast i8* %call.i18.i.i to i8**
  store i8* %250, i8** %name2.i.i.i, align 8, !tbaa !24
  store i32 0, i32* @lineno, align 4, !tbaa !1
  %line3.i.i.i = getelementptr inbounds i8* %call.i18.i.i, i64 16
  %255 = bitcast i8* %line3.i.i.i to i32*
  store i32 0, i32* %255, align 4, !tbaa !26
  %indent_level.i.i.i = getelementptr inbounds i8* %call.i18.i.i, i64 20
  %256 = bitcast i8* %indent_level.i.i.i to i32*
  store i32 0, i32* %256, align 4, !tbaa !27
  %257 = load %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %next.i.i.i = getelementptr inbounds i8* %call.i18.i.i, i64 8
  %258 = bitcast i8* %next.i.i.i to %struct.file_stack**
  store %struct.file_stack* %257, %struct.file_stack** %258, align 8, !tbaa !28
  store %struct.file_stack* %254, %struct.file_stack** @input_file_stack, align 8, !tbaa !8
  %259 = load i32* @input_file_stack_tick, align 4, !tbaa !1
  %inc.i.i13.i = add nsw i32 %259, 1
  store i32 %inc.i.i13.i, i32* @input_file_stack_tick, align 4, !tbaa !1
  call void @timevar_push(i32 43) #6
  %call5.i.i = call i32 @dwarf2out_do_frame() #6
  %tobool6.i14.i = icmp eq i32 %call5.i.i, 0
  br i1 %tobool6.i14.i, label %if.then.i41, label %if.then7.i15.i

if.then7.i15.i:                                   ; preds = %push_srcloc.exit.i.i
  call void @dwarf2out_frame_init() #6
  br label %if.then.i41

if.then.i41:                                      ; preds = %if.then7.i15.i, %push_srcloc.exit.i.i
  %260 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !8
  %init.i.i = getelementptr inbounds %struct.gcc_debug_hooks* %260, i64 0, i32 0
  %261 = load void (i8*)** %init.i.i, align 8, !tbaa !88
  call void %261(i8* %call4.i.i) #6
  call void @timevar_pop(i32 43) #6
  %262 = load i8** @main_input_filename, align 8, !tbaa !8
  call void @init_final(i8* %262) #6
  %263 = load i8** @dump_base_name, align 8, !tbaa !8
  call void @init_branch_prob(i8* %263) #6
  call void @timevar_push(i32 9) #6
  %call.i17.i = call i32 @yyparse() #6
  %264 = load void ()** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 7), align 8, !tbaa !89
  call void %264() #6
  call void @timevar_pop(i32 9) #6
  %265 = load i32* @flag_syntax_only, align 4, !tbaa !1
  %tobool.i18.i = icmp eq i32 %265, 0
  br i1 %tobool.i18.i, label %if.end.i21.i, label %if.end.i

if.end.i21.i:                                     ; preds = %if.then.i41
  %call1.i.i = call %union.tree_node* @getdecls() #6
  %call2.i.i = call i32 @list_length(%union.tree_node* %call1.i.i) #6
  %conv.i19.i = sext i32 %call2.i.i to i64
  %mul.i20.i = shl nsw i64 %conv.i19.i, 3
  %call3.i.i = call noalias i8* @xmalloc(i64 %mul.i20.i) #6
  %266 = bitcast i8* %call3.i.i to %union.tree_node**
  %cmp46.i.i = icmp sgt i32 %call2.i.i, 0
  br i1 %cmp46.i.i, label %for.body.lr.ph.i.i, label %for.end.i.i

for.body.lr.ph.i.i:                               ; preds = %if.end.i21.i
  %sub.i22.i = add i32 %call2.i.i, -1
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i, %for.body.lr.ph.i.i
  %indvars.iv.i.i = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %indvars.iv.next.i.i, %for.body.i.i ]
  %decl.048.i.i = phi %union.tree_node* [ %call1.i.i, %for.body.lr.ph.i.i ], [ %268, %for.body.i.i ]
  %267 = trunc i64 %indvars.iv.i.i to i32
  %sub5.i.i = sub i32 %sub.i22.i, %267
  %idxprom.i.i42 = sext i32 %sub5.i.i to i64
  %arrayidx.i.i43 = getelementptr inbounds %union.tree_node** %266, i64 %idxprom.i.i42
  store %union.tree_node* %decl.048.i.i, %union.tree_node** %arrayidx.i.i43, align 8, !tbaa !8
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %chain.i.i = getelementptr inbounds %union.tree_node* %decl.048.i.i, i64 0, i32 0, i32 0, i32 0
  %268 = load %union.tree_node** %chain.i.i, align 8, !tbaa !29
  %lftr.wideiv = trunc i64 %indvars.iv.next.i.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %call2.i.i
  br i1 %exitcond, label %for.end.i.i, label %for.body.i.i

for.end.i.i:                                      ; preds = %for.body.i.i, %if.end.i21.i
  %call6.i.i = call i32 @wrapup_global_declarations(%union.tree_node** %266, i32 %call2.i.i) #6
  call void @output_func_start_profiler() #6
  call void @check_global_declarations(%union.tree_node** %266, i32 %call2.i.i) #6
  call void @free(i8* %call3.i.i) #6
  call void @weak_finish() #6
  call void @timevar_push(i32 43) #6
  %call7.i.i = call i32 @dwarf2out_do_frame() #6
  %tobool8.i.i = icmp eq i32 %call7.i.i, 0
  br i1 %tobool8.i.i, label %if.end10.i.i, label %if.then9.i.i46

if.then9.i.i46:                                   ; preds = %for.end.i.i
  call void @dwarf2out_frame_finish() #6
  br label %if.end10.i.i

if.end10.i.i:                                     ; preds = %if.then9.i.i46, %for.end.i.i
  %269 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !8
  %finish.i.i = getelementptr inbounds %struct.gcc_debug_hooks* %269, i64 0, i32 1
  %270 = load void (i8*)** %finish.i.i, align 8, !tbaa !90
  %271 = load i8** @main_input_filename, align 8, !tbaa !8
  call void %270(i8* %271) #6
  call void @timevar_pop(i32 43) #6
  call void @dw2_output_indirect_constants() #6
  %272 = load i8** @dump_base_name, align 8, !tbaa !8
  call void @end_final(i8* %272) #6
  %273 = load i32* @profile_arc_flag, align 4, !tbaa !1
  %274 = load i32* @flag_test_coverage, align 4
  %275 = or i32 %274, %273
  %276 = load i32* @flag_branch_probabilities, align 4
  %277 = or i32 %275, %276
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %if.end17.i.i, label %if.then15.i.i

if.then15.i.i:                                    ; preds = %if.end10.i.i
  call void @timevar_push(i32 2) #6
  %call16.i.i = call fastcc i32 @open_dump_file(i32 14, %union.tree_node* null) #6
  call void @end_branch_prob() #6
  %279 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %tobool.i.i23.i = icmp eq %struct._IO_FILE* %279, null
  br i1 %tobool.i.i23.i, label %close_dump_file.exit.i.i, label %if.end.i.i24.i

if.end.i.i24.i:                                   ; preds = %if.then15.i.i
  call void @timevar_push(i32 2) #6
  %280 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call15.i.i.i = call i32 @fflush(%struct._IO_FILE* %280) #6
  %281 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call16.i.i.i = call i32 @fclose(%struct._IO_FILE* %281) #6
  store %struct._IO_FILE* null, %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @timevar_pop(i32 2) #6
  br label %close_dump_file.exit.i.i

close_dump_file.exit.i.i:                         ; preds = %if.end.i.i24.i, %if.then15.i.i
  call void @timevar_pop(i32 2) #6
  br label %if.end17.i.i

if.end17.i.i:                                     ; preds = %close_dump_file.exit.i.i, %if.end10.i.i
  %282 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  call void @ix86_asm_file_end(%struct._IO_FILE* %282) #6
  %283 = load i32* @flag_no_ident, align 4, !tbaa !1
  %tobool18.i.i = icmp eq i32 %283, 0
  br i1 %tobool18.i.i, label %if.then19.i.i, label %if.end21.i.i

if.then19.i.i:                                    ; preds = %if.end17.i.i
  %284 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %285 = load i8** @version_string, align 8, !tbaa !8
  %call20.i.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %284, i8* getelementptr inbounds ([19 x i8]* @.str17, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str18, i64 0, i64 0), i8* %285) #6
  br label %if.end21.i.i

if.end21.i.i:                                     ; preds = %if.then19.i.i, %if.end17.i.i
  %286 = load i32* @optimize, align 4, !tbaa !1
  %cmp22.i.i = icmp sgt i32 %286, 0
  br i1 %cmp22.i.i, label %land.lhs.true.i.i, label %if.end.i

land.lhs.true.i.i:                                ; preds = %if.end21.i.i
  %call24.i.i = call fastcc i32 @open_dump_file(i32 16, %union.tree_node* null) #6
  %tobool25.i.i = icmp eq i32 %call24.i.i, 0
  br i1 %tobool25.i.i, label %if.end.i, label %if.then26.i.i47

if.then26.i.i47:                                  ; preds = %land.lhs.true.i.i
  call void @timevar_push(i32 2) #6
  %287 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @dump_combine_total_stats(%struct._IO_FILE* %287) #6
  %288 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %tobool.i40.i.i = icmp eq %struct._IO_FILE* %288, null
  br i1 %tobool.i40.i.i, label %close_dump_file.exit45.i.i, label %if.end.i42.i.i

if.end.i42.i.i:                                   ; preds = %if.then26.i.i47
  call void @timevar_push(i32 2) #6
  %289 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call15.i43.i.i = call i32 @fflush(%struct._IO_FILE* %289) #6
  %290 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  %call16.i44.i.i = call i32 @fclose(%struct._IO_FILE* %290) #6
  store %struct._IO_FILE* null, %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !8
  call void @timevar_pop(i32 2) #6
  br label %close_dump_file.exit45.i.i

close_dump_file.exit45.i.i:                       ; preds = %if.end.i42.i.i, %if.then26.i.i47
  call void @timevar_pop(i32 2) #6
  br label %if.end.i

if.end.i:                                         ; preds = %close_dump_file.exit45.i.i, %land.lhs.true.i.i, %if.end21.i.i, %if.then.i41, %if.end.i10.i
  %291 = getelementptr inbounds [16 x i8]* %seq.i.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 16, i8* %291) #6
  %292 = load i32* @flag_gen_aux_info, align 4, !tbaa !1
  %tobool.i25.i = icmp eq i32 %292, 0
  br i1 %tobool.i25.i, label %if.end4.i.i, label %if.then.i28.i

if.then.i28.i:                                    ; preds = %if.end.i
  %293 = load %struct._IO_FILE** @aux_info_file, align 8, !tbaa !8
  %call.i26.i = call i32 @fclose(%struct._IO_FILE* %293) #6
  %294 = load %struct.diagnostic_context** @global_dc, align 8, !tbaa !8
  %arrayidx.i27.i = getelementptr inbounds %struct.diagnostic_context* %294, i64 0, i32 0, i32 0, i32 9, i64 3
  %295 = load i32* %arrayidx.i27.i, align 4, !tbaa !1
  %tobool1.i.i = icmp eq i32 %295, 0
  br i1 %tobool1.i.i, label %if.end4.i.i, label %if.then2.i30.i

if.then2.i30.i:                                   ; preds = %if.then.i28.i
  %296 = load i8** @aux_info_file_name, align 8, !tbaa !8
  %call3.i29.i = call i32 @unlink(i8* %296) #6
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.then2.i30.i, %if.then.i28.i, %if.end.i
  %297 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !8
  %tobool5.i.i = icmp eq %struct._IO_FILE* %297, null
  br i1 %tobool5.i.i, label %if.end14.i.i49, label %if.then6.i.i48

if.then6.i.i48:                                   ; preds = %if.end4.i.i
  %call7.i31.i = call i32 @ferror(%struct._IO_FILE* %297) #6
  %cmp.i32.i = icmp eq i32 %call7.i31.i, 0
  br i1 %cmp.i32.i, label %if.end9.i.i, label %if.then8.i.i

if.then8.i.i:                                     ; preds = %if.then6.i.i48
  %298 = load i8** @asm_file_name, align 8, !tbaa !8
  call void (i8*, ...)* @fatal_io_error(i8* getelementptr inbounds ([20 x i8]* @.str14, i64 0, i64 0), i8* %298) #10
  unreachable

if.end9.i.i:                                      ; preds = %if.then6.i.i48
  %call10.i.i = call i32 @fclose(%struct._IO_FILE* %297) #6
  %cmp11.i.i = icmp eq i32 %call10.i.i, 0
  br i1 %cmp11.i.i, label %if.end14.i.i49, label %if.then12.i.i

if.then12.i.i:                                    ; preds = %if.end9.i.i
  %299 = load i8** @asm_file_name, align 8, !tbaa !8
  call void (i8*, ...)* @fatal_io_error(i8* getelementptr inbounds ([17 x i8]* @.str15, i64 0, i64 0), i8* %299) #10
  unreachable

if.end14.i.i49:                                   ; preds = %if.end9.i.i, %if.end4.i.i
  %300 = load i32* @graph_dump_format, align 4, !tbaa !5
  %cmp15.i.i = icmp eq i32 %300, 0
  br i1 %cmp15.i.i, label %if.end31.i.i, label %for.body.i34.i

for.body.i34.i:                                   ; preds = %if.end14.i.i49, %for.inc.i.i
  %indvars.iv.i33.i = phi i64 [ %indvars.iv.next.i36.i, %for.inc.i.i ], [ 0, %if.end14.i.i49 ]
  %initialized.i.i = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %indvars.iv.i33.i, i32 4
  %301 = load i8* %initialized.i.i, align 1, !tbaa !40
  %tobool19.i.i = icmp eq i8 %301, 0
  br i1 %tobool19.i.i, label %for.inc.i.i, label %land.lhs.true.i35.i

land.lhs.true.i35.i:                              ; preds = %for.body.i34.i
  %graph_dump_p.i.i = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %indvars.iv.i33.i, i32 2
  %302 = load i8* %graph_dump_p.i.i, align 1, !tbaa !41
  %tobool23.i.i = icmp eq i8 %302, 0
  br i1 %tobool23.i.i, label %for.inc.i.i, label %if.then24.i.i

if.then24.i.i:                                    ; preds = %land.lhs.true.i35.i
  %303 = trunc i64 %indvars.iv.i33.i to i32
  %call25.i.i = call i32 (i8*, i8*, ...)* @sprintf(i8* %291, i8* getelementptr inbounds ([7 x i8]* @.str16, i64 0, i64 0), i32 %303) #6
  %extension.i.i = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %indvars.iv.i33.i, i32 0
  %304 = load i8** %extension.i.i, align 16, !tbaa !42
  %call29.i.i = call noalias i8* (i8*, ...)* @concat(i8* %291, i8* %304, i8* null) #6
  %305 = load i8** @dump_base_name, align 8, !tbaa !8
  call void @finish_graph_dump_file(i8* %305, i8* %call29.i.i) #6
  call void @free(i8* %call29.i.i) #6
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %if.then24.i.i, %land.lhs.true.i35.i, %for.body.i34.i
  %indvars.iv.next.i36.i = add nuw nsw i64 %indvars.iv.i33.i, 1
  %exitcond.i37.i = icmp eq i64 %indvars.iv.next.i36.i, 32
  br i1 %exitcond.i37.i, label %if.end31.i.i, label %for.body.i34.i

if.end31.i.i:                                     ; preds = %for.inc.i.i, %if.end14.i.i49
  %306 = load i32* @mem_report, align 4, !tbaa !1
  %tobool32.i.i = icmp eq i32 %306, 0
  br i1 %tobool32.i.i, label %do_compile.exit, label %if.then33.i.i

if.then33.i.i:                                    ; preds = %if.end31.i.i
  call void @ggc_print_statistics() #6
  call void @stringpool_statistics() #6
  call void @dump_tree_statistics() #6
  br label %do_compile.exit

do_compile.exit:                                  ; preds = %if.end31.i.i, %if.then33.i.i
  call void @free_reg_info() #6
  %307 = load void ()** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 6), align 8, !tbaa !91
  call void %307() #6
  call void @llvm.lifetime.end(i64 16, i8* %291) #6
  call void @timevar_stop(i32 0) #6
  %308 = load %struct._IO_FILE** @stderr, align 8, !tbaa !8
  call void @timevar_print(%struct._IO_FILE* %308) #6
  %.pre = load %struct.diagnostic_context** @global_dc, align 8, !tbaa !8
  %arrayidx5.phi.trans.insert = getelementptr inbounds %struct.diagnostic_context* %.pre, i64 0, i32 0, i32 0, i32 9, i64 3
  %.pre81 = load i32* %arrayidx5.phi.trans.insert, align 4, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %do_compile.exit, %parse_options_and_default_flags.exit
  %309 = phi i32 [ %.pre81, %do_compile.exit ], [ %183, %parse_options_and_default_flags.exit ]
  %310 = phi %struct.diagnostic_context* [ %.pre, %do_compile.exit ], [ %182, %parse_options_and_default_flags.exit ]
  %tobool6 = icmp eq i32 %309, 0
  br i1 %tobool6, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %if.end
  %arrayidx9 = getelementptr inbounds %struct.diagnostic_context* %310, i64 0, i32 0, i32 0, i32 9, i64 2
  %311 = load i32* %arrayidx9, align 4, !tbaa !1
  %not.tobool10 = icmp ne i32 %311, 0
  %. = zext i1 %not.tobool10 to i32
  ret i32 %.

return:                                           ; preds = %if.end
  ret i32 1
}

declare void @hex_init() #1

declare void @init_timevar() #1

declare void @timevar_start(i32) #1

declare void @timevar_stop(i32) #1

declare void @timevar_print(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) #8

; Function Attrs: nounwind
declare i32 @unlink(i8* nocapture readonly) #8

; Function Attrs: nounwind readonly
declare i32 @ferror(%struct._IO_FILE* nocapture) #2

; Function Attrs: noreturn
declare void @fatal_io_error(i8*, ...) #4

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #8

declare noalias i8* @concat(i8*, ...) #1

declare void @finish_graph_dump_file(i8*, i8*) #1

declare void @ggc_print_statistics() #1

declare void @stringpool_statistics() #1

declare void @dump_tree_statistics() #1

declare void @free_reg_info() #1

declare void @init_final(i8*) #1

declare void @init_branch_prob(i8*) #1

declare i32 @yyparse() #1

declare %union.tree_node* @getdecls() #1

declare i32 @list_length(%union.tree_node*) #1

declare void @output_func_start_profiler() #1

declare void @weak_finish() #1

declare i32 @dwarf2out_do_frame() #1

declare void @dwarf2out_frame_finish() #1

declare void @dw2_output_indirect_constants() #1

declare void @end_final(i8*) #1

declare void @end_branch_prob() #1

declare void @ix86_asm_file_end(%struct._IO_FILE*) #1

declare void @dump_combine_total_stats(%struct._IO_FILE*) #1

declare i8* @ggc_alloc_string(i8*, i32) #1

declare void @init_eh() #1

declare void @init_optabs() #1

declare void @dwarf2out_frame_init() #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #2

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) #8

; Function Attrs: nounwind
declare i32 @fputs(i8* nocapture readonly, %struct._IO_FILE* nocapture) #8

; Function Attrs: nounwind uwtable
define internal fastcc void @print_switch_values(%struct._IO_FILE* nocapture %file, i8* nocapture readonly %indent) #0 {
entry:
  %prefix = alloca [256 x i8], align 16
  %0 = load i8* %indent, align 1, !tbaa !5
  %tobool = icmp ne i8 %0, 0
  %cond = select i1 %tobool, i8* getelementptr inbounds ([2 x i8]* @.str26, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0)
  %call.i = call i64 @strlen(i8* %cond) #6
  %add3.i = add i64 %call.i, 16
  %conv.i = trunc i64 %add3.i to i32
  %fputs.i = call i32 @fputs(i8* %indent, %struct._IO_FILE* %file) #6
  %call13.i = call i64 @strlen(i8* %indent) #6
  %conv14.i = trunc i64 %call13.i to i32
  %call16.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([7 x i8]* @.str341, i64 0, i64 0), i8* %cond, i8* getelementptr inbounds ([17 x i8]* @.str29, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0)) #6
  %add17.i = add nsw i32 %conv14.i, %conv.i
  %1 = load i8*** @save_argv, align 8, !tbaa !8
  %p.02531 = getelementptr inbounds i8** %1, i64 1
  %2 = load i8** %p.02531, align 8, !tbaa !8
  %cmp2732 = icmp eq i8* %2, null
  br i1 %cmp2732, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry, %if.end29
  %3 = phi i8* [ %9, %if.end29 ], [ %2, %entry ]
  %p.02535 = phi i8** [ %p.025, %if.end29 ], [ %p.02531, %entry ]
  %.pn.ph34 = phi i8** [ %p.029, %if.end29 ], [ %1, %entry ]
  %pos.addr.0.ph33 = phi i32 [ %call30, %if.end29 ], [ %add17.i, %entry ]
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %4 = phi i8* [ %3, %for.body.lr.ph ], [ %6, %for.cond.backedge ]
  %p.029 = phi i8** [ %p.02535, %for.body.lr.ph ], [ %p.0, %for.cond.backedge ]
  %.pn28 = phi i8** [ %.pn.ph34, %for.body.lr.ph ], [ %.pn.be, %for.cond.backedge ]
  %5 = load i8* %4, align 1, !tbaa !5
  %cmp3 = icmp eq i8 %5, 45
  br i1 %cmp3, label %if.then, label %for.cond.backedge

for.cond.backedge:                                ; preds = %for.body, %if.end23, %if.end18, %if.end13, %if.then8
  %.pn.be = phi i8** [ %p.029, %if.end13 ], [ %p.029, %if.end18 ], [ %p.029, %if.end23 ], [ %p.029, %for.body ], [ %p.0.incdec.ptr, %if.then8 ]
  %p.0 = getelementptr inbounds i8** %.pn.be, i64 1
  %6 = load i8** %p.0, align 8, !tbaa !8
  %cmp = icmp eq i8* %6, null
  br i1 %cmp, label %for.end, label %for.body

if.then:                                          ; preds = %for.body
  %call5 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8]* @.str30, i64 0, i64 0)) #6
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then8, label %if.end13

if.then8:                                         ; preds = %if.then
  %arrayidx9 = getelementptr inbounds i8** %.pn28, i64 2
  %7 = load i8** %arrayidx9, align 8, !tbaa !8
  %cmp10 = icmp eq i8* %7, null
  %p.0.incdec.ptr = select i1 %cmp10, i8** %p.029, i8** %arrayidx9
  br label %for.cond.backedge

if.end13:                                         ; preds = %if.then
  %call14 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([7 x i8]* @.str31, i64 0, i64 0)) #6
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %for.cond.backedge, label %if.end18

if.end18:                                         ; preds = %if.end13
  %call19 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([9 x i8]* @.str32, i64 0, i64 0)) #6
  %cmp20 = icmp eq i32 %call19, 0
  br i1 %cmp20, label %for.cond.backedge, label %if.end23

if.end23:                                         ; preds = %if.end18
  %arrayidx24 = getelementptr inbounds i8* %4, i64 1
  %8 = load i8* %arrayidx24, align 1, !tbaa !5
  %cmp26 = icmp eq i8 %8, 100
  br i1 %cmp26, label %for.cond.backedge, label %if.end29

if.end29:                                         ; preds = %if.end23
  %call30 = call fastcc i32 @print_single_switch(%struct._IO_FILE* %file, i32 %pos.addr.0.ph33, i8* %indent, i8* getelementptr inbounds ([2 x i8]* @.str26, i64 0, i64 0), i8* %4, i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0))
  %p.025 = getelementptr inbounds i8** %p.029, i64 1
  %9 = load i8** %p.025, align 8, !tbaa !8
  %cmp27 = icmp eq i8* %9, null
  br i1 %cmp27, label %for.end, label %for.body.lr.ph

for.end:                                          ; preds = %if.end29, %for.cond.backedge, %entry
  %pos.addr.0.ph.lcssa = phi i32 [ %add17.i, %entry ], [ %pos.addr.0.ph33, %for.cond.backedge ], [ %call30, %if.end29 ]
  %cmp33 = icmp sgt i32 %pos.addr.0.ph.lcssa, 0
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %for.end
  %fputc4 = call i32 @fputc(i32 10, %struct._IO_FILE* %file) #6
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %for.end
  %10 = load i8* %indent, align 1, !tbaa !5
  %tobool39 = icmp ne i8 %10, 0
  %cond40 = select i1 %tobool39, i8* getelementptr inbounds ([2 x i8]* @.str26, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0)
  %call.i5 = call i64 @strlen(i8* %cond40) #6
  %add3.i9 = add i64 %call.i5, 17
  %conv.i10 = trunc i64 %add3.i9 to i32
  %fputs.i12 = call i32 @fputs(i8* %indent, %struct._IO_FILE* %file) #6
  %call13.i13 = call i64 @strlen(i8* %indent) #6
  %conv14.i14 = trunc i64 %call13.i13 to i32
  %call16.i15 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([7 x i8]* @.str341, i64 0, i64 0), i8* %cond40, i8* getelementptr inbounds ([18 x i8]* @.str33, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0)) #6
  %add17.i16 = add nsw i32 %conv14.i14, %conv.i10
  br label %for.body45

for.body45:                                       ; preds = %for.inc54, %if.end37
  %j.024 = phi i64 [ 0, %if.end37 ], [ %inc, %for.inc54 ]
  %pos.addr.223 = phi i32 [ %add17.i16, %if.end37 ], [ %pos.addr.3, %for.inc54 ]
  %variable = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %j.024, i32 1
  %11 = load i32** %variable, align 8, !tbaa !65
  %12 = load i32* %11, align 4, !tbaa !1
  %on_value = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %j.024, i32 2
  %13 = load i32* %on_value, align 16, !tbaa !64
  %cmp48 = icmp eq i32 %12, %13
  br i1 %cmp48, label %if.then50, label %for.inc54

if.then50:                                        ; preds = %for.body45
  %string = getelementptr inbounds [97 x %struct.lang_independent_options]* @f_options, i64 0, i64 %j.024, i32 0
  %14 = load i8** %string, align 16, !tbaa !54
  %call52 = call fastcc i32 @print_single_switch(%struct._IO_FILE* %file, i32 %pos.addr.223, i8* %indent, i8* getelementptr inbounds ([2 x i8]* @.str26, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str34, i64 0, i64 0), i8* %14)
  br label %for.inc54

for.inc54:                                        ; preds = %for.body45, %if.then50
  %pos.addr.3 = phi i32 [ %call52, %if.then50 ], [ %pos.addr.223, %for.body45 ]
  %inc = add i64 %j.024, 1
  %exitcond41 = icmp eq i64 %inc, 97
  br i1 %exitcond41, label %for.body59, label %for.body45

for.cond83.preheader:                             ; preds = %for.inc80
  %15 = getelementptr inbounds [256 x i8]* %prefix, i64 0, i64 0
  br label %for.body86

for.body59:                                       ; preds = %for.inc54, %for.inc80
  %j.122 = phi i64 [ %inc81, %for.inc80 ], [ 0, %for.inc54 ]
  %pos.addr.421 = phi i32 [ %pos.addr.5, %for.inc80 ], [ %pos.addr.3, %for.inc54 ]
  %name = getelementptr inbounds [56 x %struct.anon.3]* @target_switches, i64 0, i64 %j.122, i32 0
  %16 = load i8** %name, align 8, !tbaa !92
  %17 = load i8* %16, align 1, !tbaa !5
  %cmp63 = icmp eq i8 %17, 0
  br i1 %cmp63, label %for.inc80, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body59
  %value = getelementptr inbounds [56 x %struct.anon.3]* @target_switches, i64 0, i64 %j.122, i32 1
  %18 = load i32* %value, align 8, !tbaa !94
  %19 = lshr i64 57260077759506453, %j.122
  %20 = and i64 %19, 1
  %cmp66 = icmp eq i64 %20, 0
  br i1 %cmp66, label %for.inc80, label %land.lhs.true68

land.lhs.true68:                                  ; preds = %land.lhs.true
  %21 = load i32* @target_flags, align 4, !tbaa !1
  %and = and i32 %21, %18
  %cmp73 = icmp eq i32 %and, %18
  br i1 %cmp73, label %if.then75, label %for.inc80

if.then75:                                        ; preds = %land.lhs.true68
  %call78 = call fastcc i32 @print_single_switch(%struct._IO_FILE* %file, i32 %pos.addr.421, i8* %indent, i8* getelementptr inbounds ([2 x i8]* @.str26, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str35, i64 0, i64 0), i8* %16)
  br label %for.inc80

for.inc80:                                        ; preds = %land.lhs.true, %for.body59, %land.lhs.true68, %if.then75
  %pos.addr.5 = phi i32 [ %call78, %if.then75 ], [ %pos.addr.421, %land.lhs.true68 ], [ %pos.addr.421, %land.lhs.true ], [ %pos.addr.421, %for.body59 ]
  %inc81 = add i64 %j.122, 1
  %exitcond40 = icmp eq i64 %inc81, 56
  br i1 %exitcond40, label %for.cond83.preheader, label %for.body59

for.body86:                                       ; preds = %for.inc100, %for.cond83.preheader
  %j.220 = phi i64 [ 0, %for.cond83.preheader ], [ %inc101, %for.inc100 ]
  %pos.addr.619 = phi i32 [ %pos.addr.5, %for.cond83.preheader ], [ %pos.addr.7, %for.inc100 ]
  %variable88 = getelementptr inbounds [13 x %struct.anon.4]* @target_options, i64 0, i64 %j.220, i32 1
  %22 = load i8*** %variable88, align 8, !tbaa !95
  %23 = load i8** %22, align 8, !tbaa !8
  %cmp89 = icmp eq i8* %23, null
  br i1 %cmp89, label %for.inc100, label %if.then91

if.then91:                                        ; preds = %for.body86
  call void @llvm.lifetime.start(i64 256, i8* %15) #6
  %prefix93 = getelementptr inbounds [13 x %struct.anon.4]* @target_options, i64 0, i64 %j.220, i32 0
  %24 = load i8** %prefix93, align 8, !tbaa !97
  %call94 = call i32 (i8*, i8*, ...)* @sprintf(i8* %15, i8* getelementptr inbounds ([5 x i8]* @.str36, i64 0, i64 0), i8* %24) #6
  %25 = load i8** %22, align 8, !tbaa !8
  %call98 = call fastcc i32 @print_single_switch(%struct._IO_FILE* %file, i32 %pos.addr.619, i8* %indent, i8* getelementptr inbounds ([2 x i8]* @.str26, i64 0, i64 0), i8* %15, i8* %25)
  call void @llvm.lifetime.end(i64 256, i8* %15) #6
  br label %for.inc100

for.inc100:                                       ; preds = %for.body86, %if.then91
  %pos.addr.7 = phi i32 [ %call98, %if.then91 ], [ %pos.addr.619, %for.body86 ]
  %inc101 = add i64 %j.220, 1
  %exitcond = icmp eq i64 %inc101, 13
  br i1 %exitcond, label %for.end102, label %for.body86

for.end102:                                       ; preds = %for.inc100
  %fputc = call i32 @fputc(i32 10, %struct._IO_FILE* %file) #6
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @print_single_switch(%struct._IO_FILE* nocapture %file, i32 %pos, i8* nocapture readonly %indent, i8* %sep, i8* %type, i8* %name) #0 {
entry:
  %call = tail call i64 @strlen(i8* %sep) #6
  %call1 = tail call i64 @strlen(i8* %type) #6
  %add = add i64 %call1, %call
  %call2 = tail call i64 @strlen(i8* %name) #6
  %add3 = add i64 %add, %call2
  %conv = trunc i64 %add3 to i32
  %cmp = icmp ne i32 %pos, 0
  %add5 = add nsw i32 %conv, %pos
  %cmp6 = icmp sgt i32 %add5, 75
  %or.cond = and i1 %cmp, %cmp6
  br i1 %or.cond, label %if.end.thread, label %if.end

if.end.thread:                                    ; preds = %entry
  %fputc = tail call i32 @fputc(i32 10, %struct._IO_FILE* %file) #6
  br label %if.then11

if.end:                                           ; preds = %entry
  %cmp9 = icmp eq i32 %pos, 0
  br i1 %cmp9, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end.thread, %if.end
  %fputs = tail call i32 @fputs(i8* %indent, %struct._IO_FILE* %file) #6
  %call13 = tail call i64 @strlen(i8* %indent) #6
  %conv14 = trunc i64 %call13 to i32
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end
  %pos.addr.1 = phi i32 [ %conv14, %if.then11 ], [ %pos, %if.end ]
  %call16 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([7 x i8]* @.str341, i64 0, i64 0), i8* %sep, i8* %type, i8* %name) #6
  %add17 = add nsw i32 %pos.addr.1, %conv
  ret i32 %add17
}

declare void @fnotice(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind readonly uwtable
define internal i8* @decl_name(%union.tree_node* nocapture readonly %decl, i32 %verbosity) #9 {
entry:
  %name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 8
  %0 = load %union.tree_node** %name, align 8, !tbaa !21
  %id = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 1
  %1 = getelementptr inbounds i8** %id, i64 1
  %2 = load i8** %1, align 8, !tbaa !98
  ret i8* %2
}

declare void @init_ggc() #1

declare void @ggc_add_rtx_root(%struct.rtx_def**, i32) #1

declare void @ggc_add_tree_root(%union.tree_node**, i32) #1

declare void @init_stringpool() #1

declare void @init_obstacks() #1

declare void @init_emit_once(i32) #1

declare void @init_regs() #1

declare void @init_alias_once() #1

declare void @init_stmt() #1

declare void @init_loop() #1

declare void @init_reload() #1

declare void @init_function_once() #1

declare void @init_stor_layout_once() #1

declare void @init_varasm_once() #1

declare void @init_EXPR_INSN_LIST_cache() #1

declare void @init_dummy_function_start() #1

declare void @init_expmed() #1

declare void @init_expr_once() #1

declare void @init_caller_save() #1

declare void @expand_dummy_function_end() #1

declare void @override_options() #1

declare void @init_reg_sets() #1

declare void @add_params(%struct.param_info*, i64) #1

; Function Attrs: nounwind uwtable
define internal fastcc void @set_target_switch(i8* %name) #0 {
entry:
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %j.050 = phi i64 [ 0, %entry ], [ %inc, %for.inc ]
  %valid_target_option.049 = phi i32 [ 0, %entry ], [ %valid_target_option.1, %for.inc ]
  %name1 = getelementptr inbounds [56 x %struct.anon.3]* @target_switches, i64 0, i64 %j.050, i32 0
  %0 = load i8** %name1, align 8, !tbaa !92
  %call = tail call i32 @strcmp(i8* %0, i8* %name) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body
  %value = getelementptr inbounds [56 x %struct.anon.3]* @target_switches, i64 0, i64 %j.050, i32 1
  %1 = load i32* %value, align 8, !tbaa !94
  %2 = lshr i64 14797515875766282, %j.050
  %3 = and i64 %2, 1
  %cmp3 = icmp eq i64 %3, 0
  br i1 %cmp3, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.then
  %neg = add i32 %1, -1
  %4 = load i32* @target_flags, align 4, !tbaa !1
  %and = and i32 %4, %neg
  br label %if.end

if.else:                                          ; preds = %if.then
  %5 = load i32* @target_flags, align 4, !tbaa !1
  %or = or i32 %5, %1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %storemerge = phi i32 [ %or, %if.else ], [ %and, %if.then4 ]
  store i32 %storemerge, i32* @target_flags, align 4, !tbaa !1
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.end
  %valid_target_option.1 = phi i32 [ %valid_target_option.049, %for.body ], [ 1, %if.end ]
  %inc = add i64 %j.050, 1
  %exitcond51 = icmp eq i64 %inc, 56
  br i1 %exitcond51, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  %tobool10 = icmp eq i32 %valid_target_option.1, 0
  br i1 %tobool10, label %for.body14, label %if.end31

for.body14:                                       ; preds = %for.end, %for.inc25
  %j.148 = phi i64 [ %inc26, %for.inc25 ], [ 0, %for.end ]
  %valid_target_option.247 = phi i32 [ %valid_target_option.3, %for.inc25 ], [ 0, %for.end ]
  %prefix = getelementptr inbounds [13 x %struct.anon.4]* @target_options, i64 0, i64 %j.148, i32 0
  %6 = load i8** %prefix, align 8, !tbaa !97
  %call16 = tail call i64 @strlen(i8* %6) #6
  %sext = shl i64 %call16, 32
  %conv19 = ashr exact i64 %sext, 32
  %call20 = tail call i32 @strncmp(i8* %6, i8* %name, i64 %conv19) #6
  %tobool21 = icmp eq i32 %call20, 0
  br i1 %tobool21, label %if.then22, label %for.inc25

if.then22:                                        ; preds = %for.body14
  %add.ptr = getelementptr inbounds i8* %name, i64 %conv19
  %variable = getelementptr inbounds [13 x %struct.anon.4]* @target_options, i64 0, i64 %j.148, i32 1
  %7 = load i8*** %variable, align 8, !tbaa !95
  store i8* %add.ptr, i8** %7, align 8, !tbaa !8
  br label %for.inc25

for.inc25:                                        ; preds = %for.body14, %if.then22
  %valid_target_option.3 = phi i32 [ %valid_target_option.247, %for.body14 ], [ 1, %if.then22 ]
  %inc26 = add i64 %j.148, 1
  %exitcond = icmp eq i64 %inc26, 13
  br i1 %exitcond, label %if.end28, label %for.body14

if.end28:                                         ; preds = %for.inc25
  %tobool29 = icmp eq i32 %valid_target_option.3, 0
  br i1 %tobool29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.end28
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* %name) #6
  br label %if.end31

if.end31:                                         ; preds = %for.end, %if.end28, %if.then30
  ret void
}

declare void @optimization_options(i32, i32) #1

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) #2

; Function Attrs: nounwind uwtable
define internal fastcc void @display_target_options() #0 {
entry:
  %.b = load i1* @display_target_options.displayed, align 1
  br i1 %.b, label %if.end69, label %if.end

if.end:                                           ; preds = %entry
  store i1 true, i1* @display_target_options.displayed, align 1
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([26 x i8]* @str719, i64 0, i64 0))
  br label %for.body.lr.ph.lr.ph

for.body.lr.ph.lr.ph:                             ; preds = %if.end, %if.then19
  %dec107114124 = phi i64 [ 55, %if.end ], [ %dec107114, %if.then19 ]
  %undoc.0.ph123 = phi i32 [ 0, %if.end ], [ %undoc.0.ph91116, %if.then19 ]
  %doc.0.ph122 = phi i32 [ 0, %if.end ], [ %add, %if.then19 ]
  br label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.body.lr.ph.lr.ph, %for.cond.outer89.backedge
  %dec107117 = phi i64 [ %dec107114124, %for.body.lr.ph.lr.ph ], [ %dec107, %for.cond.outer89.backedge ]
  %undoc.0.ph91116 = phi i32 [ %undoc.0.ph123, %for.body.lr.ph.lr.ph ], [ 1, %for.cond.outer89.backedge ]
  %sext = shl i64 %dec107117, 32
  %0 = ashr exact i64 %sext, 32
  br label %for.body

for.cond24.preheader:                             ; preds = %if.then19, %for.cond.outer89.backedge, %for.cond.backedge
  %doc.0.ph.lcssa = phi i32 [ %doc.0.ph122, %for.cond.backedge ], [ %doc.0.ph122, %for.cond.outer89.backedge ], [ %add, %if.then19 ]
  %undoc.0.ph91.lcssa100 = phi i32 [ %undoc.0.ph91116, %for.cond.backedge ], [ 1, %for.cond.outer89.backedge ], [ %undoc.0.ph91116, %if.then19 ]
  br label %for.body27.lr.ph

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv142 = phi i64 [ %0, %for.body.lr.ph ], [ %indvars.iv.next143, %for.cond.backedge ]
  %name = getelementptr inbounds [56 x %struct.anon.3]* @target_switches, i64 0, i64 %indvars.iv142, i32 0
  %1 = load i8** %name, align 8, !tbaa !92
  %description4 = getelementptr inbounds [56 x %struct.anon.3]* @target_switches, i64 0, i64 %indvars.iv142, i32 2
  %2 = load i8** %description4, align 8, !tbaa !101
  %3 = load i8* %1, align 1, !tbaa !5
  %cmp5 = icmp eq i8 %3, 0
  br i1 %cmp5, label %for.cond.backedge, label %if.else

for.cond.backedge:                                ; preds = %for.body, %if.else15
  %indvars.iv.next143 = add nsw i64 %indvars.iv142, -1
  %4 = trunc i64 %indvars.iv142 to i32
  %tobool1 = icmp eq i32 %4, 0
  br i1 %tobool1, label %for.cond24.preheader, label %for.body

if.else:                                          ; preds = %for.body
  %5 = lshr i64 36028797421617152, %indvars.iv142
  %6 = and i64 %5, 1
  %cmp8 = icmp eq i64 %6, 0
  br i1 %cmp8, label %if.else15, label %if.then10

if.then10:                                        ; preds = %if.else
  %7 = trunc i64 %indvars.iv142 to i32
  %8 = load i32* @extra_warnings, align 4, !tbaa !1
  %tobool11 = icmp eq i32 %8, 0
  br i1 %tobool11, label %for.cond.outer89.backedge, label %if.then12

if.then12:                                        ; preds = %if.then10
  %call13 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([29 x i8]* @.str614, i64 0, i64 0), i8* %1) #6
  br label %for.cond.outer89.backedge

for.cond.outer89.backedge:                        ; preds = %if.then12, %if.then10
  %dec107 = add i64 %indvars.iv142, -1
  %tobool1108 = icmp eq i32 %7, 0
  br i1 %tobool1108, label %for.cond24.preheader, label %for.body.lr.ph

if.else15:                                        ; preds = %if.else
  %9 = load i8* %2, align 1, !tbaa !5
  %cmp17 = icmp eq i8 %9, 0
  br i1 %cmp17, label %for.cond.backedge, label %if.then19

if.then19:                                        ; preds = %if.else15
  %10 = trunc i64 %indvars.iv142 to i32
  %call20 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @.str615, i64 0, i64 0), i8* %1, i8* %2) #6
  %add = add nsw i32 %call20, %doc.0.ph122
  %dec107114 = add i64 %indvars.iv142, -1
  %tobool1108115 = icmp eq i32 %10, 0
  br i1 %tobool1108115, label %for.cond24.preheader, label %for.body.lr.ph.lr.ph

for.body27:                                       ; preds = %for.body27.lr.ph, %for.cond24.backedge
  %indvars.iv = phi i64 [ %17, %for.body27.lr.ph ], [ %indvars.iv.next, %for.cond24.backedge ]
  %prefix = getelementptr inbounds [13 x %struct.anon.4]* @target_options, i64 0, i64 %indvars.iv, i32 0
  %11 = load i8** %prefix, align 8, !tbaa !97
  %description34 = getelementptr inbounds [13 x %struct.anon.4]* @target_options, i64 0, i64 %indvars.iv, i32 2
  %12 = load i8** %description34, align 8, !tbaa !102
  %13 = load i8* %11, align 1, !tbaa !5
  %cmp39 = icmp eq i8 %13, 0
  br i1 %cmp39, label %for.cond24.backedge, label %if.else50

for.cond24.backedge:                              ; preds = %for.body27, %if.else50
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %14 = trunc i64 %indvars.iv to i32
  %tobool26 = icmp eq i32 %14, 0
  br i1 %tobool26, label %for.end60, label %for.body27

if.else50:                                        ; preds = %for.body27
  %15 = load i8* %12, align 1, !tbaa !5
  %cmp52 = icmp eq i8 %15, 0
  br i1 %cmp52, label %for.cond24.backedge, label %if.then54

if.then54:                                        ; preds = %if.else50
  %16 = trunc i64 %indvars.iv to i32
  %call55 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @.str615, i64 0, i64 0), i8* %11, i8* %12) #6
  %add56 = add nsw i32 %call55, %doc.1.ph105
  %dec25101 = add i64 %indvars.iv, -1
  %tobool26102 = icmp eq i32 %16, 0
  br i1 %tobool26102, label %for.end60, label %for.body27.lr.ph

for.body27.lr.ph:                                 ; preds = %for.cond24.preheader, %if.then54
  %dec25101106 = phi i64 [ 12, %for.cond24.preheader ], [ %dec25101, %if.then54 ]
  %doc.1.ph105 = phi i32 [ %doc.0.ph.lcssa, %for.cond24.preheader ], [ %add56, %if.then54 ]
  %sext144 = shl i64 %dec25101106, 32
  %17 = ashr exact i64 %sext144, 32
  br label %for.body27

for.end60:                                        ; preds = %if.then54, %for.cond24.backedge
  %doc.1.ph.lcssa = phi i32 [ %doc.1.ph105, %for.cond24.backedge ], [ %add56, %if.then54 ]
  %tobool61 = icmp eq i32 %undoc.0.ph91.lcssa100, 0
  br i1 %tobool61, label %if.end69, label %if.then62

if.then62:                                        ; preds = %for.end60
  %tobool63 = icmp eq i32 %doc.1.ph.lcssa, 0
  br i1 %tobool63, label %if.else66, label %if.then64

if.then64:                                        ; preds = %if.then62
  %puts88 = tail call i32 @puts(i8* getelementptr inbounds ([57 x i8]* @str721, i64 0, i64 0))
  br label %if.end69

if.else66:                                        ; preds = %if.then62
  %puts87 = tail call i32 @puts(i8* getelementptr inbounds ([43 x i8]* @str720, i64 0, i64 0))
  br label %if.end69

if.end69:                                         ; preds = %for.end60, %if.then64, %if.else66, %entry
  ret void
}

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #2

declare void @set_param_value(i8*, i32) #1

declare void @fix_sched_param(i8*, i8*) #1

declare void @fix_register(i8*, i32, i32) #1

declare %struct.rtx_def* @gen_rtx_REG(i32, i32) #1

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #1

declare void @output_set_maximum_length(%struct.output_buffer*, i32) #1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #8

declare void @xmalloc_set_program_name(i8*) #1

declare void (i32)* @signal(i32, void (i32)*) #1

; Function Attrs: noreturn nounwind uwtable
define internal void @float_signal(i32 %signo) #3 {
entry:
  %0 = load i32* @float_handled, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @crash_signal(i32 %signo) #12
  unreachable

if.end:                                           ; preds = %entry
  store i32 0, i32* @float_handled, align 4, !tbaa !1
  %call = tail call void (i32)* (i32, void (i32)*)* @signal(i32 8, void (i32)* @float_signal) #6
  tail call void @longjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag]* @float_handler, i64 0, i64 0), i32 1) #10
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define internal void @crash_signal(i32 %signo) #3 {
entry:
  tail call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([19 x i8]* @.str664, i64 0, i64 0), i32 %signo) #10
  unreachable
}

declare void @diagnostic_initialize(%struct.diagnostic_context*) #1

; Function Attrs: noreturn
declare void @internal_error(i8*, ...) #4

; Function Attrs: noreturn
declare void @longjmp(%struct.__jmp_buf_tag*, i32) #4

declare void @print_rtl_graph_with_bb(i8*, i8*, %struct.rtx_def*) #1

declare void @clean_graph_dump_file(i8*, i8*) #1

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #6

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) #6

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { returns_twice "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind returns_twice }
attributes #12 = { noreturn }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"int", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !3, metadata !3, i64 0}
!6 = metadata !{metadata !7, metadata !7, i64 0}
!7 = metadata !{metadata !"short", metadata !3, i64 0}
!8 = metadata !{metadata !9, metadata !9, i64 0}
!9 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!10 = metadata !{metadata !11, metadata !9, i64 120}
!11 = metadata !{metadata !"tree_decl", metadata !12, i64 0, metadata !9, i64 24, metadata !2, i64 32, metadata !2, i64 36, metadata !9, i64 40, metadata !3, i64 48, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 49, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 50, metadata !2, i64 51, metadata !2, i64 51, metadata !2, i64 51, metadata !2, i64 51, metadata !2, i64 51, metadata !3, i64 51, metadata !2, i64 51, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 52, metadata !2, i64 53, metadata !2, i64 53, metadata !2, i64 53, metadata !2, i64 53, metadata !2, i64 53, metadata !3, i64 56, metadata !9, i64 64, metadata !9, i64 72, metadata !9, i64 80, metadata !9, i64 88, metadata !9, i64 96, metadata !9, i64 104, metadata !9, i64 112, metadata !9, i64 120, metadata !9, i64 128, metadata !9, i64 136, metadata !9, i64 144, metadata !9, i64 152, metadata !3, i64 160, metadata !9, i64 168, metadata !9, i64 176, metadata !9, i64 184, metadata !13, i64 192, metadata !9, i64 200}
!12 = metadata !{metadata !"tree_common", metadata !9, i64 0, metadata !9, i64 8, metadata !3, i64 16, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 17, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 18, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19, metadata !2, i64 19}
!13 = metadata !{metadata !"long long", metadata !3, i64 0}
!14 = metadata !{metadata !11, metadata !9, i64 104}
!15 = metadata !{metadata !11, metadata !9, i64 40}
!16 = metadata !{metadata !11, metadata !9, i64 136}
!17 = metadata !{metadata !18, metadata !9, i64 32}
!18 = metadata !{metadata !"tree_list", metadata !12, i64 0, metadata !9, i64 24, metadata !9, i64 32}
!19 = metadata !{metadata !11, metadata !9, i64 144}
!20 = metadata !{metadata !12, metadata !9, i64 8}
!21 = metadata !{metadata !11, metadata !9, i64 72}
!22 = metadata !{metadata !23, metadata !9, i64 128}
!23 = metadata !{metadata !"gcc_debug_hooks", metadata !9, i64 0, metadata !9, i64 8, metadata !9, i64 16, metadata !9, i64 24, metadata !9, i64 32, metadata !9, i64 40, metadata !9, i64 48, metadata !9, i64 56, metadata !9, i64 64, metadata !9, i64 72, metadata !9, i64 80, metadata !9, i64 88, metadata !9, i64 96, metadata !9, i64 104, metadata !9, i64 112, metadata !9, i64 120, metadata !9, i64 128, metadata !9, i64 136, metadata !9, i64 144, metadata !9, i64 152}
!24 = metadata !{metadata !25, metadata !9, i64 0}
!25 = metadata !{metadata !"file_stack", metadata !9, i64 0, metadata !9, i64 8, metadata !2, i64 16, metadata !2, i64 20}
!26 = metadata !{metadata !25, metadata !2, i64 16}
!27 = metadata !{metadata !25, metadata !2, i64 20}
!28 = metadata !{metadata !25, metadata !9, i64 8}
!29 = metadata !{metadata !12, metadata !9, i64 0}
!30 = metadata !{metadata !11, metadata !9, i64 80}
!31 = metadata !{metadata !11, metadata !9, i64 112}
!32 = metadata !{metadata !23, metadata !9, i64 136}
!33 = metadata !{metadata !34, metadata !2, i64 352}
!34 = metadata !{metadata !"function", metadata !9, i64 0, metadata !9, i64 8, metadata !9, i64 16, metadata !9, i64 24, metadata !9, i64 32, metadata !9, i64 40, metadata !9, i64 48, metadata !9, i64 56, metadata !2, i64 64, metadata !2, i64 68, metadata !2, i64 72, metadata !2, i64 76, metadata !9, i64 80, metadata !35, i64 88, metadata !9, i64 120, metadata !9, i64 128, metadata !9, i64 136, metadata !9, i64 144, metadata !2, i64 152, metadata !9, i64 160, metadata !9, i64 168, metadata !9, i64 176, metadata !9, i64 184, metadata !9, i64 192, metadata !9, i64 200, metadata !9, i64 208, metadata !9, i64 216, metadata !9, i64 224, metadata !9, i64 232, metadata !9, i64 240, metadata !9, i64 248, metadata !9, i64 256, metadata !13, i64 264, metadata !9, i64 272, metadata !9, i64 280, metadata !9, i64 288, metadata !9, i64 296, metadata !2, i64 304, metadata !9, i64 312, metadata !9, i64 320, metadata !2, i64 328, metadata !2, i64 332, metadata !2, i64 336, metadata !9, i64 344, metadata !2, i64 352, metadata !2, i64 356, metadata !9, i64 360, metadata !9, i64 368, metadata !9, i64 376, metadata !2, i64 384, metadata !2, i64 388, metadata !9, i64 392, metadata !2, i64 400, metadata !2, i64 404, metadata !9, i64 408, metadata !9, i64 416, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 424, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 425, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426, metadata !2, i64 426}
!35 = metadata !{metadata !"ix86_args", metadata !2, i64 0, metadata !2, i64 4, metadata !2, i64 8, metadata !2, i64 12, metadata !2, i64 16, metadata !2, i64 20, metadata !2, i64 24}
!36 = metadata !{metadata !23, metadata !9, i64 144}
!37 = metadata !{metadata !38, metadata !3, i64 10}
!38 = metadata !{metadata !"dump_file_info", metadata !9, i64 0, metadata !3, i64 8, metadata !3, i64 9, metadata !3, i64 10, metadata !3, i64 11}
!39 = metadata !{metadata !23, metadata !9, i64 120}
!40 = metadata !{metadata !38, metadata !3, i64 11}
!41 = metadata !{metadata !38, metadata !3, i64 9}
!42 = metadata !{metadata !38, metadata !9, i64 0}
!43 = metadata !{metadata !44, metadata !9, i64 16}
!44 = metadata !{metadata !"lang_hooks", metadata !9, i64 0, metadata !45, i64 8, metadata !9, i64 16, metadata !9, i64 24, metadata !9, i64 32, metadata !9, i64 40, metadata !9, i64 48, metadata !9, i64 56, metadata !9, i64 64, metadata !9, i64 72, metadata !9, i64 80, metadata !9, i64 88, metadata !46, i64 96, metadata !9, i64 104, metadata !9, i64 112, metadata !9, i64 120, metadata !9, i64 128, metadata !9, i64 136, metadata !9, i64 144, metadata !47, i64 152, metadata !48, i64 240}
!45 = metadata !{metadata !"long", metadata !3, i64 0}
!46 = metadata !{metadata !"_Bool", metadata !3, i64 0}
!47 = metadata !{metadata !"lang_hooks_for_tree_inlining", metadata !9, i64 0, metadata !9, i64 8, metadata !9, i64 16, metadata !9, i64 24, metadata !9, i64 32, metadata !9, i64 40, metadata !9, i64 48, metadata !9, i64 56, metadata !9, i64 64, metadata !9, i64 72, metadata !9, i64 80}
!48 = metadata !{metadata !"lang_hooks_for_tree_dump", metadata !9, i64 0, metadata !9, i64 8}
!49 = metadata !{metadata !44, metadata !9, i64 24}
!50 = metadata !{metadata !44, metadata !9, i64 0}
!51 = metadata !{metadata !44, metadata !9, i64 144}
!52 = metadata !{metadata !53, metadata !9, i64 24}
!53 = metadata !{metadata !"", metadata !9, i64 0, metadata !9, i64 8, metadata !2, i64 16, metadata !9, i64 24}
!54 = metadata !{metadata !53, metadata !9, i64 0}
!55 = metadata !{metadata !56, metadata !9, i64 16}
!56 = metadata !{metadata !"param_info", metadata !9, i64 0, metadata !2, i64 8, metadata !9, i64 16}
!57 = metadata !{metadata !56, metadata !9, i64 0}
!58 = metadata !{metadata !59, metadata !9, i64 16}
!59 = metadata !{metadata !"", metadata !9, i64 0, metadata !3, i64 8, metadata !2, i64 12, metadata !9, i64 16}
!60 = metadata !{metadata !59, metadata !9, i64 0}
!61 = metadata !{metadata !62, metadata !9, i64 8}
!62 = metadata !{metadata !"lang_opt", metadata !9, i64 0, metadata !9, i64 8}
!63 = metadata !{metadata !62, metadata !9, i64 0}
!64 = metadata !{metadata !53, metadata !2, i64 16}
!65 = metadata !{metadata !53, metadata !9, i64 8}
!66 = metadata !{metadata !56, metadata !2, i64 8}
!67 = metadata !{metadata !68, metadata !2, i64 12}
!68 = metadata !{metadata !"output_buffer", metadata !69, i64 0, metadata !9, i64 80, metadata !70, i64 88, metadata !2, i64 176, metadata !3, i64 180, metadata !9, i64 312}
!69 = metadata !{metadata !"", metadata !9, i64 0, metadata !2, i64 8, metadata !2, i64 12, metadata !2, i64 16, metadata !46, i64 20, metadata !46, i64 21, metadata !3, i64 24, metadata !9, i64 32, metadata !9, i64 40, metadata !3, i64 48}
!70 = metadata !{metadata !"obstack", metadata !45, i64 0, metadata !9, i64 8, metadata !9, i64 16, metadata !9, i64 24, metadata !9, i64 32, metadata !45, i64 40, metadata !2, i64 48, metadata !9, i64 56, metadata !9, i64 64, metadata !9, i64 72, metadata !2, i64 80, metadata !2, i64 80, metadata !2, i64 80}
!71 = metadata !{metadata !68, metadata !3, i64 24}
!72 = metadata !{metadata !59, metadata !3, i64 8}
!73 = metadata !{metadata !59, metadata !2, i64 12}
!74 = metadata !{metadata !74, metadata !75, metadata !76}
!75 = metadata !{metadata !"llvm.vectorizer.width", i32 1}
!76 = metadata !{metadata !"llvm.vectorizer.unroll", i32 1}
!77 = metadata !{metadata !38, metadata !3, i64 8}
!78 = metadata !{metadata !13, metadata !13, i64 0}
!79 = metadata !{metadata !44, metadata !9, i64 32}
!80 = metadata !{metadata !81, metadata !46, i64 328}
!81 = metadata !{metadata !"gcc_target", metadata !82, i64 0, metadata !84, i64 168, metadata !9, i64 240, metadata !9, i64 248, metadata !9, i64 256, metadata !9, i64 264, metadata !9, i64 272, metadata !9, i64 280, metadata !9, i64 288, metadata !9, i64 296, metadata !9, i64 304, metadata !9, i64 312, metadata !9, i64 320, metadata !46, i64 328, metadata !46, i64 329, metadata !9, i64 336}
!82 = metadata !{metadata !"asm_out", metadata !9, i64 0, metadata !9, i64 8, metadata !9, i64 16, metadata !83, i64 24, metadata !83, i64 56, metadata !9, i64 88, metadata !9, i64 96, metadata !9, i64 104, metadata !9, i64 112, metadata !9, i64 120, metadata !9, i64 128, metadata !9, i64 136, metadata !9, i64 144, metadata !9, i64 152, metadata !9, i64 160}
!83 = metadata !{metadata !"asm_int_op", metadata !9, i64 0, metadata !9, i64 8, metadata !9, i64 16, metadata !9, i64 24}
!84 = metadata !{metadata !"sched", metadata !9, i64 0, metadata !9, i64 8, metadata !9, i64 16, metadata !9, i64 24, metadata !9, i64 32, metadata !9, i64 40, metadata !9, i64 48, metadata !9, i64 56, metadata !9, i64 64}
!85 = metadata !{i8 0, i8 2}
!86 = metadata !{metadata !44, metadata !45, i64 8}
!87 = metadata !{metadata !44, metadata !9, i64 40}
!88 = metadata !{metadata !23, metadata !9, i64 0}
!89 = metadata !{metadata !44, metadata !9, i64 56}
!90 = metadata !{metadata !23, metadata !9, i64 8}
!91 = metadata !{metadata !44, metadata !9, i64 48}
!92 = metadata !{metadata !93, metadata !9, i64 0}
!93 = metadata !{metadata !"", metadata !9, i64 0, metadata !2, i64 8, metadata !9, i64 16}
!94 = metadata !{metadata !93, metadata !2, i64 8}
!95 = metadata !{metadata !96, metadata !9, i64 8}
!96 = metadata !{metadata !"", metadata !9, i64 0, metadata !9, i64 8, metadata !9, i64 16}
!97 = metadata !{metadata !96, metadata !9, i64 0}
!98 = metadata !{metadata !99, metadata !9, i64 32}
!99 = metadata !{metadata !"tree_identifier", metadata !12, i64 0, metadata !100, i64 24}
!100 = metadata !{metadata !"ht_identifier", metadata !2, i64 0, metadata !9, i64 8}
!101 = metadata !{metadata !93, metadata !9, i64 16}
!102 = metadata !{metadata !96, metadata !9, i64 16}
