; ModuleID = 'final.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct._IO_FILE = type opaque
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.label_alignment = type { i16, i16 }
%struct.basic_block_def = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %union.tree_node*, %struct.edge_def*, %struct.edge_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i8*, i32, i32, i64, i32, i32 }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type opaque
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.lang_decl = type opaque
%struct.edge_def = type { %struct.edge_def*, %struct.edge_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, i8*, i32, i32, i64 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32 }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i1 (%union.tree_node*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void ()*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.insn_data = type { i8*, i8*, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.recog_data = type { [30 x %struct.rtx_def*], [30 x %struct.rtx_def**], [30 x i8*], [30 x i32], [30 x i32], [4 x %struct.rtx_def**], [4 x i8], i8, i8, i8, %struct.rtx_def* }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.realvaluetype = type { [3 x i64] }
%struct.mem_attrs = type { i64, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32 }

@app_on = internal unnamed_addr global i1 false
@final_sequence = common global %struct.rtx_def* null, align 8
@ix86_asm_dialect = external global i32
@dialect_number = internal unnamed_addr global i32 0, align 4
@profile_arc_flag = external global i32
@target_flags = external global i32
@count_instrumented_edges = external global i32
@.str = private unnamed_addr constant [8 x i8] c"final.c\00", align 1
@asm_out_file = external global %struct._IO_FILE*
@.str1 = private unnamed_addr constant [12 x i8] c"\09.align %d\0A\00", align 1
@.str2 = private unnamed_addr constant [8 x i8] c".%s%u:\0A\00", align 1
@.str3 = private unnamed_addr constant [5 x i8] c"LPBX\00", align 1
@const_int_rtx = external global [129 x %struct.rtx_def*]
@.str4 = private unnamed_addr constant [7 x i8] c"*.%s%u\00", align 1
@.str7 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str8 = private unnamed_addr constant [9 x i8] c"\09.local\09\00", align 1
@.str10 = private unnamed_addr constant [8 x i8] c"\09.comm\09\00", align 1
@.str11 = private unnamed_addr constant [8 x i8] c",%u,%u\0A\00", align 1
@.str12 = private unnamed_addr constant [6 x i8] c"/APP\0A\00", align 1
@.str13 = private unnamed_addr constant [9 x i8] c"/NO_APP\0A\00", align 1
@uid_shuid = internal unnamed_addr global i32* null, align 8
@insn_lengths = internal unnamed_addr global i32* null, align 8
@insn_lengths_max_uid = internal unnamed_addr global i32 0, align 4
@insn_addresses_ = common global %struct.varray_head_tag* null, align 8
@uid_align = internal unnamed_addr global %struct.rtx_def** null, align 8
@min_labelno = internal unnamed_addr global i32 0, align 4
@label_align = internal unnamed_addr global %struct.label_alignment* null, align 8
@insn_current_address = common global i32 0, align 4
@insn_last_address = common global i32 0, align 4
@length_unit_log = external global i32
@max_labelno = internal unnamed_addr global i32 0, align 4
@optimize = external global i32
@optimize_size = external global i32
@n_basic_blocks = external global i32
@basic_block_info = external global %struct.varray_head_tag*
@align_labels_log = external global i32
@align_labels_max_skip = external global i32
@entry_exit_blocks = external global [2 x %struct.basic_block_def]
@align_jumps_log = external global i32
@align_jumps_max_skip = external global i32
@align_loops_log = external global i32
@align_loops_max_skip = external global i32
@__FUNCTION__.shorten_branches = private unnamed_addr constant [17 x i8] c"shorten_branches\00", align 1
@rtx_class = external constant [153 x i8]
@flag_pic = external global i32
@.str14 = private unnamed_addr constant [15 x i8] c"insn_addresses\00", align 1
@mode_size = external constant [59 x i8]
@insn_current_align = common global i32 0, align 4
@block_depth = internal unnamed_addr global i32 0, align 4
@this_is_asm_operands = internal unnamed_addr global %struct.rtx_def* null, align 8
@last_linenum = internal unnamed_addr global i32 0, align 4
@high_function_linenum = internal unnamed_addr global i32 0, align 4
@high_block_linenum = internal unnamed_addr global i32 0, align 4
@debug_hooks = external global %struct.gcc_debug_hooks*
@last_filename = internal unnamed_addr global i8* null, align 8
@write_symbols = external global i32
@current_function_decl = external global %union.tree_node*
@targetm = external global %struct.gcc_target
@line_note_exists = internal unnamed_addr global i8* null, align 8
@insn_data = external constant [0 x %struct.insn_data]
@which_alternative = external global i32
@__FUNCTION__.get_insn_template = private unnamed_addr constant [18 x i8] c"get_insn_template\00", align 1
@recog_data = external global %struct.recog_data
@insn_counter = internal unnamed_addr global i32 0, align 4
@flag_debug_asm = external global i32
@.str15 = private unnamed_addr constant [20 x i8] c"\09%s basic block %d\0A\00", align 1
@.str16 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str17 = private unnamed_addr constant [5 x i8] c"LEHB\00", align 1
@.str18 = private unnamed_addr constant [5 x i8] c"LEHE\00", align 1
@debug_info_level = external global i32
@__FUNCTION__.final_scan_insn = private unnamed_addr constant [16 x i8] c"final_scan_insn\00", align 1
@.str19 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str20 = private unnamed_addr constant [14 x i8] c"\09.p2align %d\0A\00", align 1
@.str21 = private unnamed_addr constant [18 x i8] c"\09.p2align %d,,%d\0A\00", align 1
@.str22 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str23 = private unnamed_addr constant [5 x i8] c"\09%s\0A\00", align 1
@insn_noperands = internal unnamed_addr global i32 0, align 4
@flag_dump_rtl_in_asm = external global i32
@print_rtx_head = external global i8*
@.str24 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@debug_insn = internal unnamed_addr global %struct.rtx_def* null, align 8
@current_output_insn = common global %struct.rtx_def* null, align 8
@.str25 = private unnamed_addr constant [21 x i8] c"could not split insn\00", align 1
@__FUNCTION__.alter_subreg = private unnamed_addr constant [13 x i8] c"alter_subreg\00", align 1
@.str26 = private unnamed_addr constant [16 x i8] c"invalid `asm': \00", align 1
@.str27 = private unnamed_addr constant [17 x i8] c"output_operand: \00", align 1
@.str28 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@flag_verbose_asm = external global i32
@flag_print_asm_name = external global i32
@.str29 = private unnamed_addr constant [37 x i8] c"nested assembly dialect alternatives\00", align 1
@.str30 = private unnamed_addr constant [42 x i8] c"unterminated assembly dialect alternative\00", align 1
@.str31 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@_sch_istable = external constant [256 x i16]
@.str32 = private unnamed_addr constant [39 x i8] c"operand number missing after %%-letter\00", align 1
@.str33 = private unnamed_addr constant [28 x i8] c"operand number out of range\00", align 1
@.str34 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@.str35 = private unnamed_addr constant [16 x i8] c"invalid %%-code\00", align 1
@.str36 = private unnamed_addr constant [28 x i8] c"`%%l' operand isn't a label\00", align 1
@.str37 = private unnamed_addr constant [14 x i8] c"0x%llx%016llx\00", align 1
@.str38 = private unnamed_addr constant [7 x i8] c"0x%llx\00", align 1
@.str39 = private unnamed_addr constant [26 x i8] c"floating constant misused\00", align 1
@.str42 = private unnamed_addr constant [30 x i8] c"invalid expression as operand\00", align 1
@.str43 = private unnamed_addr constant [3 x i8] c"%%\00", align 1
@user_label_prefix = external global i8*
@__FUNCTION__.asm_fprintf = private unnamed_addr constant [12 x i8] c"asm_fprintf\00", align 1
@mode_class = external constant [59 x i32]
@cfun = external global %struct.function*
@__FUNCTION__.final_forward_branch_p = private unnamed_addr constant [23 x i8] c"final_forward_branch_p\00", align 1
@regs_ever_live = common global [53 x i8] zeroinitializer, align 16
@frame_pointer_needed = common global i32 0, align 4
@__FUNCTION__.output_operand = private unnamed_addr constant [15 x i8] c"output_operand\00", align 1
@.str45 = private unnamed_addr constant [10 x i8] c"\09%s %d\09%s\00", align 1
@.str46 = private unnamed_addr constant [4 x i8] c"/%d\00", align 1
@.str47 = private unnamed_addr constant [15 x i8] c"\09[length = %d]\00", align 1
@.str48 = private unnamed_addr constant [8 x i8] c"%c%s %s\00", align 1
@.str49 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str50 = private unnamed_addr constant [16 x i8] c"\09push{l}\09%%e%s\0A\00", align 1
@reg_names = external global [53 x i8*]
@.str51 = private unnamed_addr constant [19 x i8] c"\09call\09*mcount@PLT\0A\00", align 1
@.str52 = private unnamed_addr constant [26 x i8] c"\09call\09*mcount@GOT(%%ebx)\0A\00", align 1
@.str53 = private unnamed_addr constant [14 x i8] c"\09call\09mcount\0A\00", align 1
@.str54 = private unnamed_addr constant [15 x i8] c"\09pop{l}\09%%e%s\0A\00", align 1

; Function Attrs: nounwind uwtable
define void @init_final(i8* nocapture readnone %filename) #0 {
entry:
  store i1 false, i1* @app_on, align 1
  store %struct.rtx_def* null, %struct.rtx_def** @final_sequence, align 8, !tbaa !1
  %0 = load i32* @ix86_asm_dialect, align 4, !tbaa !5
  store i32 %0, i32* @dialect_number, align 4, !tbaa !6
  ret void
}

; Function Attrs: nounwind uwtable
define void @end_final(i8* nocapture readonly %filename) #0 {
entry:
  %name = alloca [20 x i8], align 16
  %0 = load i32* @profile_arc_flag, align 4, !tbaa !6
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end104, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 @exact_log2_wide(i64 16) #7
  %1 = load i32* @target_flags, align 4, !tbaa !6
  %and = lshr i32 %1, 20
  %2 = and i32 %and, 32
  %3 = add i32 %2, 32
  %div = sdiv i32 %3, 8
  %4 = load i32* @count_instrumented_edges, align 4, !tbaa !6
  %mul = shl nsw i32 %4, 3
  call void @data_section() #7
  %cmp12 = icmp ne i32 %call, 0
  br i1 %cmp12, label %if.then13, label %do.body

if.then13:                                        ; preds = %if.then
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %shl = shl i32 1, %call
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([12 x i8]* @.str1, i64 0, i64 0), i32 %shl) #7
  br label %do.body

do.body:                                          ; preds = %if.then, %if.then13
  %6 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str3, i64 0, i64 0), i32 0) #7
  %7 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %call17 = call zeroext i1 @assemble_integer(%struct.rtx_def* %7, i32 %div, i32 %3, i32 1) #7
  %arraydecay = getelementptr inbounds [20 x i8]* %name, i64 0, i64 0
  %call19 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str3, i64 0, i64 0), i32 1) #7
  %8 = load i32* @target_flags, align 4, !tbaa !6
  %and21 = lshr i32 %8, 25
  %9 = and i32 %and21, 1
  %10 = or i32 %9, 4
  %call25 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %10, i8* %arraydecay) #7
  %call26 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call25, i32 %div, i32 %3, i32 1) #7
  %call29 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str3, i64 0, i64 0), i32 2) #7
  %11 = load i32* @target_flags, align 4, !tbaa !6
  %and31 = lshr i32 %11, 25
  %12 = and i32 %and31, 1
  %13 = or i32 %12, 4
  %call35 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %13, i8* %arraydecay) #7
  %call36 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call35, i32 %div, i32 %3, i32 1) #7
  %14 = load i32* @count_instrumented_edges, align 4, !tbaa !6
  %conv = sext i32 %14 to i64
  %call37 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv) #7
  %call38 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call37, i32 %div, i32 %3, i32 1) #7
  %15 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %call39 = call zeroext i1 @assemble_integer(%struct.rtx_def* %15, i32 %div, i32 %3, i32 1) #7
  %16 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %call40 = call zeroext i1 @assemble_integer(%struct.rtx_def* %16, i32 %div, i32 %3, i32 1) #7
  %17 = load i32* @target_flags, align 4, !tbaa !6
  %and41 = lshr i32 %17, 23
  %18 = and i32 %and41, 4
  %19 = mul i32 %18, 11
  %mul44 = add i32 %19, 44
  %conv45142 = zext i32 %mul44 to i64
  %call46 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv45142) #7
  %call47 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call46, i32 %div, i32 %3, i32 1) #7
  %20 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %call48 = call zeroext i1 @assemble_integer(%struct.rtx_def* %20, i32 %div, i32 %3, i32 1) #7
  %21 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %call49 = call zeroext i1 @assemble_integer(%struct.rtx_def* %21, i32 %div, i32 %3, i32 1) #7
  %22 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %call50 = call zeroext i1 @assemble_integer(%struct.rtx_def* %22, i32 %div, i32 %3, i32 1) #7
  %23 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %24 = load i32* @target_flags, align 4, !tbaa !6
  %and51 = lshr i32 %24, 23
  %25 = and i32 %and51, 4
  %26 = add i32 %25, 4
  %call54 = call zeroext i1 @assemble_integer(%struct.rtx_def* %23, i32 %26, i32 %3, i32 1) #7
  %27 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str3, i64 0, i64 0), i32 1) #7
  %call58 = call i8* @getpwd() #7
  %call59 = call i64 @strlen(i8* %filename) #7
  %call60 = call i64 @strlen(i8* %call58) #7
  %add61 = add i64 %call59, 1
  %add62 = add i64 %add61, %call60
  %conv63 = trunc i64 %add62 to i32
  %add64 = shl i64 %add62, 32
  %sext = add i64 %add64, 17179869184
  %conv65 = ashr exact i64 %sext, 32
  %28 = alloca i8, i64 %conv65, align 1
  %call66 = call i8* @strcpy(i8* %28, i8* %call58) #7
  %strlen = call i64 @strlen(i8* %28) #7
  %endptr = getelementptr i8* %28, i64 %strlen
  %29 = bitcast i8* %endptr to i16*
  store i16 47, i16* %29, align 1
  %call68 = call i8* @strcat(i8* %28, i8* %filename) #7
  call void @strip_off_ending(i8* %28, i32 %conv63) #7
  %strlen143 = call i64 @strlen(i8* %28) #7
  %endptr144 = getelementptr i8* %28, i64 %strlen143
  %30 = bitcast i8* %endptr144 to i32*
  store i32 6382638, i32* %30, align 1
  %call70 = call i64 @strlen(i8* %28) #7
  %add71 = add i64 %call70, 1
  %conv72 = trunc i64 %add71 to i32
  call void @assemble_string(i8* %28, i32 %conv72) #7
  %cmp73 = icmp eq i32 %4, 0
  br i1 %cmp73, label %if.then75, label %do.body89

if.then75:                                        ; preds = %do.body
  br i1 %cmp12, label %if.then78, label %do.body82

if.then78:                                        ; preds = %if.then75
  %31 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %shl79 = shl i32 1, %call
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([12 x i8]* @.str1, i64 0, i64 0), i32 %shl79) #7
  br label %do.body82

do.body82:                                        ; preds = %if.then75, %if.then78
  %32 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str3, i64 0, i64 0), i32 2) #7
  br label %if.end104

do.body89:                                        ; preds = %do.body
  %call91 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str3, i64 0, i64 0), i32 2) #7
  %33 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %34 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str8, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %33)
  %35 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @assemble_name(%struct._IO_FILE* %35, i8* %arraydecay) #7
  %36 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %fputc = call i32 @fputc(i32 10, %struct._IO_FILE* %36) #7
  %37 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %38 = call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str10, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %37)
  %39 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @assemble_name(%struct._IO_FILE* %39, i8* %arraydecay) #7
  %40 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call100 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([8 x i8]* @.str11, i64 0, i64 0), i32 %mul, i32 16) #7
  br label %if.end104

if.end104:                                        ; preds = %do.body82, %entry, %do.body89
  ret void
}

declare i32 @exact_log2_wide(i64) #1

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #2

declare void @data_section() #1

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #3

declare zeroext i1 @assemble_integer(%struct.rtx_def*, i32, i32, i32) #1

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #3

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #1

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

declare i8* @getpwd() #1

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #4

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8* nocapture readonly) #3

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8* nocapture readonly) #3

declare void @strip_off_ending(i8*, i32) #1

declare void @assemble_string(i8*, i32) #1

declare void @assemble_name(%struct._IO_FILE*, i8*) #1

; Function Attrs: nounwind readnone uwtable
define void @default_function_pro_epilogue(%struct._IO_FILE* nocapture %file, i64 %size) #5 {
entry:
  ret void
}

; Function Attrs: nounwind readnone uwtable
define void @no_asm_to_stream(%struct._IO_FILE* nocapture %file) #5 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable
define void @app_enable() #0 {
entry:
  %.b = load i1* @app_on, align 1
  br i1 %.b, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([6 x i8]* @.str12, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %0)
  store i1 true, i1* @app_on, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare i32 @fputs(i8* nocapture readonly, %struct._IO_FILE* nocapture) #3

; Function Attrs: nounwind uwtable
define void @app_disable() #0 {
entry:
  %.b = load i1* @app_on, align 1
  br i1 %.b, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str13, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %0)
  store i1 false, i1* @app_on, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_insn_lengths() #0 {
entry:
  %0 = load i32** @uid_shuid, align 8, !tbaa !1
  %tobool = icmp eq i32* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = bitcast i32* %0 to i8*
  tail call void @free(i8* %1)
  store i32* null, i32** @uid_shuid, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %2 = load i32** @insn_lengths, align 8, !tbaa !1
  %tobool1 = icmp eq i32* %2, null
  br i1 %tobool1, label %do.body, label %if.then2

if.then2:                                         ; preds = %if.end
  %3 = bitcast i32* %2 to i8*
  tail call void @free(i8* %3)
  store i32* null, i32** @insn_lengths, align 8, !tbaa !1
  store i32 0, i32* @insn_lengths_max_uid, align 4, !tbaa !6
  br label %do.body

do.body:                                          ; preds = %if.end, %if.then2
  %4 = load %struct.varray_head_tag** @insn_addresses_, align 8, !tbaa !1
  %tobool4 = icmp eq %struct.varray_head_tag* %4, null
  br i1 %tobool4, label %do.end, label %if.then5

if.then5:                                         ; preds = %do.body
  %5 = bitcast %struct.varray_head_tag* %4 to i8*
  tail call void @free(i8* %5)
  store %struct.varray_head_tag* null, %struct.varray_head_tag** @insn_addresses_, align 8, !tbaa !1
  br label %do.end

do.end:                                           ; preds = %do.body, %if.then5
  %6 = load %struct.rtx_def*** @uid_align, align 8, !tbaa !1
  %tobool7 = icmp eq %struct.rtx_def** %6, null
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %do.end
  %7 = bitcast %struct.rtx_def** %6 to i8*
  tail call void @free(i8* %7)
  store %struct.rtx_def** null, %struct.rtx_def*** @uid_align, align 8, !tbaa !1
  br label %if.end9

if.end9:                                          ; preds = %do.end, %if.then8
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #3

; Function Attrs: nounwind uwtable
define i32 @get_attr_length(%struct.rtx_def* %insn) #0 {
entry:
  %0 = load i32* @insn_lengths_max_uid, align 4, !tbaa !6
  %fld = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  %1 = load i32* %rtint, align 4, !tbaa !6
  %cmp = icmp sgt i32 %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %idxprom = sext i32 %1 to i64
  %2 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx4 = getelementptr inbounds i32* %2, i64 %idxprom
  %3 = load i32* %arrayidx4, align 4, !tbaa !6
  br label %return

if.else:                                          ; preds = %entry
  %4 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %return [
    i32 32, label %sw.bb18
    i32 33, label %sw.bb6
    i32 34, label %sw.bb5
  ]

sw.bb5:                                           ; preds = %if.else
  %call = tail call i32 @insn_default_length(%struct.rtx_def* %insn) #7
  br label %return

sw.bb6:                                           ; preds = %if.else
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load9 = load i32* %6, align 8
  %7 = and i32 %bf.load9, 65534
  %switch = icmp eq i32 %7, 44
  br i1 %switch, label %return, label %if.else16

if.else16:                                        ; preds = %sw.bb6
  %call17 = tail call i32 @insn_default_length(%struct.rtx_def* %insn) #7
  br label %return

sw.bb18:                                          ; preds = %if.else
  %arrayidx20 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx21, align 8, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load22 = load i32* %9, align 8
  %bf.clear23 = and i32 %bf.load22, 65535
  switch i32 %bf.clear23, label %lor.lhs.false34 [
    i32 48, label %return
    i32 49, label %return
    i32 40, label %if.then37
  ]

lor.lhs.false34:                                  ; preds = %sw.bb18
  %call35 = tail call i32 @asm_noperands(%struct.rtx_def* %8) #7
  %cmp36 = icmp sgt i32 %call35, -1
  %bf.load.i.pre = load i32* %9, align 8
  br i1 %cmp36, label %if.then37, label %if.else40

if.then37:                                        ; preds = %lor.lhs.false34, %sw.bb18
  %bf.load.i = phi i32 [ %bf.load22, %sw.bb18 ], [ %bf.load.i.pre, %lor.lhs.false34 ]
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 40
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then37
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 0
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %10 = load i8** %rtstr.i, align 8, !tbaa !1
  br label %for.cond.i

if.else.i:                                        ; preds = %if.then37
  %call.i = tail call i8* @decode_asm_operands(%struct.rtx_def* %8, %struct.rtx_def** null, %struct.rtx_def*** null, i8** null, i32* null) #7
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.else.i, %if.then.i, %for.inc.i
  %template.0.i = phi i8* [ %incdec.ptr.i, %for.inc.i ], [ %call.i, %if.else.i ], [ %10, %if.then.i ]
  %count.0.i = phi i32 [ %count.1.i, %for.inc.i ], [ 1, %if.then.i ], [ 1, %if.else.i ]
  %11 = load i8* %template.0.i, align 1, !tbaa !5
  switch i8 %11, label %for.inc.i [
    i8 0, label %asm_insn_count.exit
    i8 59, label %if.then6.i
    i8 10, label %if.then6.i
  ]

if.then6.i:                                       ; preds = %for.cond.i, %for.cond.i
  %inc.i = add nsw i32 %count.0.i, 1
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then6.i, %for.cond.i
  %count.1.i = phi i32 [ %inc.i, %if.then6.i ], [ %count.0.i, %for.cond.i ]
  %incdec.ptr.i = getelementptr inbounds i8* %template.0.i, i64 1
  br label %for.cond.i

asm_insn_count.exit:                              ; preds = %for.cond.i
  %call39 = tail call i32 @insn_default_length(%struct.rtx_def* %insn) #7
  %mul = mul nsw i32 %call39, %count.0.i
  br label %return

if.else40:                                        ; preds = %lor.lhs.false34
  %bf.clear42 = and i32 %bf.load.i.pre, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 24
  br i1 %cmp43, label %for.cond.preheader, label %if.else54

for.cond.preheader:                               ; preds = %if.else40
  %arrayidx46 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtvec_def**
  %12 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem79 = getelementptr inbounds %struct.rtvec_def* %12, i64 0, i32 0
  %13 = load i32* %num_elem79, align 4, !tbaa !8
  %cmp4780 = icmp sgt i32 %13, 0
  br i1 %cmp4780, label %for.body, label %return

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.cond.preheader ]
  %14 = phi %struct.rtvec_def* [ %16, %for.body ], [ %12, %for.cond.preheader ]
  %length.082 = phi i32 [ %add, %for.body ], [ 0, %for.cond.preheader ]
  %arrayidx52 = getelementptr inbounds %struct.rtvec_def* %14, i64 0, i32 1, i64 %indvars.iv
  %15 = load %struct.rtx_def** %arrayidx52, align 8, !tbaa !1
  %call53 = tail call i32 @get_attr_length(%struct.rtx_def* %15)
  %add = add nsw i32 %call53, %length.082
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %16 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 0
  %17 = load i32* %num_elem, align 4, !tbaa !8
  %18 = trunc i64 %indvars.iv.next to i32
  %cmp47 = icmp slt i32 %18, %17
  br i1 %cmp47, label %for.body, label %return

if.else54:                                        ; preds = %if.else40
  %call55 = tail call i32 @insn_default_length(%struct.rtx_def* %insn) #7
  br label %return

return:                                           ; preds = %for.body, %for.cond.preheader, %sw.bb6, %if.else, %if.else54, %asm_insn_count.exit, %if.else16, %sw.bb5, %sw.bb18, %sw.bb18, %if.then
  %retval.0 = phi i32 [ %3, %if.then ], [ 0, %sw.bb18 ], [ 0, %sw.bb18 ], [ 0, %if.else ], [ %mul, %asm_insn_count.exit ], [ %call55, %if.else54 ], [ %call17, %if.else16 ], [ %call, %sw.bb5 ], [ 0, %sw.bb6 ], [ 0, %for.cond.preheader ], [ %add, %for.body ]
  ret i32 %retval.0
}

declare i32 @insn_default_length(%struct.rtx_def*) #1

declare i32 @asm_noperands(%struct.rtx_def*) #1

; Function Attrs: nounwind readonly uwtable
define i32 @label_to_alignment(%struct.rtx_def* nocapture readonly %label) #6 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %label, i64 0, i32 1, i64 5
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %0 = load i32* %rtint, align 4, !tbaa !6
  %1 = load i32* @min_labelno, align 4, !tbaa !6
  %sub = sub nsw i32 %0, %1
  %idxprom = sext i32 %sub to i64
  %2 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  %alignment = getelementptr inbounds %struct.label_alignment* %2, i64 %idxprom, i32 0
  %3 = load i16* %alignment, align 2, !tbaa !10
  %conv = sext i16 %3 to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly uwtable
define i32 @insn_current_reference_address(%struct.rtx_def* nocapture readonly %branch) #6 {
entry:
  %0 = load %struct.varray_head_tag** @insn_addresses_, align 8, !tbaa !1
  %cmp = icmp eq %struct.varray_head_tag* %0, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = getelementptr inbounds %struct.rtx_def* %branch, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp6 = icmp eq i32 %bf.clear, 33
  br i1 %cmp6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end
  %2 = load i32* @insn_current_address, align 4, !tbaa !6
  br label %return

if.end8:                                          ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %branch, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 2
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx3, align 8, !tbaa !1
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx5 to i32*
  %5 = load i32* %rtint, align 4, !tbaa !6
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %branch, i64 0, i32 1, i64 7
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx11, align 8, !tbaa !1
  %idxprom = sext i32 %5 to i64
  %7 = load i32** @uid_shuid, align 8, !tbaa !1
  %arrayidx15 = getelementptr inbounds i32* %7, i64 %idxprom
  %8 = load i32* %arrayidx15, align 4, !tbaa !6
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0
  %rtint18 = bitcast %union.rtunion_def* %arrayidx17 to i32*
  %9 = load i32* %rtint18, align 4, !tbaa !6
  %idxprom19 = sext i32 %9 to i64
  %arrayidx20 = getelementptr inbounds i32* %7, i64 %idxprom19
  %10 = load i32* %arrayidx20, align 4, !tbaa !6
  %cmp21 = icmp slt i32 %8, %10
  br i1 %cmp21, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.end8
  %11 = load i32* @insn_last_address, align 4, !tbaa !6
  %12 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx24 = getelementptr inbounds i32* %12, i64 %idxprom
  %13 = load i32* %arrayidx24, align 4, !tbaa !6
  %add = add nsw i32 %13, %11
  %14 = load %struct.rtx_def*** @uid_align, align 8, !tbaa !1
  %arrayidx6.i = getelementptr inbounds %struct.rtx_def** %14, i64 %idxprom
  %align_label.02.i = load %struct.rtx_def** %arrayidx6.i, align 8
  %tobool3.i = icmp eq %struct.rtx_def* %align_label.02.i, null
  br i1 %tobool3.i, label %align_fuzz.exit, label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %if.then22
  %15 = load i32* @length_unit_log, align 4, !tbaa !6
  %shl.i = shl i32 1, %15
  %data.i = getelementptr inbounds %struct.varray_head_tag* %0, i64 0, i32 4
  %i.i = bitcast %union.varray_data_tag* %data.i to [1 x i32]*
  %16 = load i32* @min_labelno, align 4, !tbaa !6
  %17 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %align_label.06.i = phi %struct.rtx_def* [ %align_label.02.i, %for.body.lr.ph.i ], [ %align_label.0.i, %for.inc.i ]
  %fuzz.05.i = phi i32 [ 0, %for.body.lr.ph.i ], [ %fuzz.1.i, %for.inc.i ]
  %known_align.04.i = phi i32 [ %shl.i, %for.body.lr.ph.i ], [ %known_align.1.i, %for.inc.i ]
  %fld7.i = getelementptr inbounds %struct.rtx_def* %align_label.06.i, i64 0, i32 1
  %rtint9.i = bitcast [1 x %union.rtunion_def]* %fld7.i to i32*
  %18 = load i32* %rtint9.i, align 4, !tbaa !6
  %idxprom10.i = sext i32 %18 to i64
  %arrayidx11.i = getelementptr inbounds [1 x i32]* %i.i, i64 0, i64 %idxprom10.i
  %19 = load i32* %arrayidx11.i, align 4, !tbaa !6
  %arrayidx13.i = getelementptr inbounds i32* %12, i64 %idxprom10.i
  %20 = load i32* %arrayidx13.i, align 4, !tbaa !6
  %arrayidx15.i = getelementptr inbounds i32* %7, i64 %idxprom10.i
  %21 = load i32* %arrayidx15.i, align 4, !tbaa !6
  %cmp.i = icmp sgt i32 %21, %10
  br i1 %cmp.i, label %align_fuzz.exit, label %if.end.i

if.end.i:                                         ; preds = %for.body.i
  %arrayidx17.i = getelementptr inbounds %struct.rtx_def* %align_label.06.i, i64 0, i32 1, i64 5
  %rtint18.i = bitcast %union.rtunion_def* %arrayidx17.i to i32*
  %22 = load i32* %rtint18.i, align 4, !tbaa !6
  %sub19.i = sub nsw i32 %22, %16
  %idxprom20.i = sext i32 %sub19.i to i64
  %alignment.i = getelementptr inbounds %struct.label_alignment* %17, i64 %idxprom20.i, i32 0
  %23 = load i16* %alignment.i, align 2, !tbaa !10
  %conv.i = sext i16 %23 to i32
  %shl22.i = shl i32 1, %conv.i
  %cmp23.i = icmp slt i32 %shl22.i, %known_align.04.i
  br i1 %cmp23.i, label %for.inc.i, label %if.end26.i

if.end26.i:                                       ; preds = %if.end.i
  %sub1.i = sub i32 %20, %19
  %xor.i = xor i32 %sub1.i, -1
  %sub28.i = sub nsw i32 %shl22.i, %known_align.04.i
  %and.i = and i32 %sub28.i, %xor.i
  %add.i = add i32 %and.i, %fuzz.05.i
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.end26.i, %if.end.i
  %known_align.1.i = phi i32 [ %known_align.04.i, %if.end.i ], [ %shl22.i, %if.end26.i ]
  %fuzz.1.i = phi i32 [ %fuzz.05.i, %if.end.i ], [ %add.i, %if.end26.i ]
  %arrayidx30.i = getelementptr inbounds %struct.rtx_def** %14, i64 %idxprom10.i
  %align_label.0.i = load %struct.rtx_def** %arrayidx30.i, align 8
  %tobool.i = icmp eq %struct.rtx_def* %align_label.0.i, null
  br i1 %tobool.i, label %align_fuzz.exit, label %for.body.i

align_fuzz.exit:                                  ; preds = %for.body.i, %for.inc.i, %if.then22
  %fuzz.0.lcssa.i = phi i32 [ 0, %if.then22 ], [ %fuzz.05.i, %for.body.i ], [ %fuzz.1.i, %for.inc.i ]
  %sub = sub i32 %add, %fuzz.0.lcssa.i
  br label %return

if.else:                                          ; preds = %if.end8
  %24 = load i32* @insn_current_address, align 4, !tbaa !6
  %25 = load %struct.rtx_def*** @uid_align, align 8, !tbaa !1
  %arrayidx6.i41 = getelementptr inbounds %struct.rtx_def** %25, i64 %idxprom19
  %align_label.02.i42 = load %struct.rtx_def** %arrayidx6.i41, align 8
  %tobool3.i43 = icmp eq %struct.rtx_def* %align_label.02.i42, null
  br i1 %tobool3.i43, label %align_fuzz.exit81, label %for.body.lr.ph.i47

for.body.lr.ph.i47:                               ; preds = %if.else
  %26 = load i32* @length_unit_log, align 4, !tbaa !6
  %shl.i44 = shl i32 1, %26
  %data.i45 = getelementptr inbounds %struct.varray_head_tag* %0, i64 0, i32 4
  %i.i46 = bitcast %union.varray_data_tag* %data.i45 to [1 x i32]*
  %27 = load i32** @insn_lengths, align 8, !tbaa !1
  %28 = load i32* @min_labelno, align 4, !tbaa !6
  %29 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  br label %for.body.i58

for.body.i58:                                     ; preds = %for.inc.i79, %for.body.lr.ph.i47
  %align_label.06.i48 = phi %struct.rtx_def* [ %align_label.02.i42, %for.body.lr.ph.i47 ], [ %align_label.0.i77, %for.inc.i79 ]
  %fuzz.05.i49 = phi i32 [ 0, %for.body.lr.ph.i47 ], [ %fuzz.1.i75, %for.inc.i79 ]
  %known_align.04.i50 = phi i32 [ %shl.i44, %for.body.lr.ph.i47 ], [ %known_align.1.i74, %for.inc.i79 ]
  %fld7.i51 = getelementptr inbounds %struct.rtx_def* %align_label.06.i48, i64 0, i32 1
  %rtint9.i52 = bitcast [1 x %union.rtunion_def]* %fld7.i51 to i32*
  %30 = load i32* %rtint9.i52, align 4, !tbaa !6
  %idxprom10.i53 = sext i32 %30 to i64
  %arrayidx11.i54 = getelementptr inbounds [1 x i32]* %i.i46, i64 0, i64 %idxprom10.i53
  %31 = load i32* %arrayidx11.i54, align 4, !tbaa !6
  %arrayidx13.i55 = getelementptr inbounds i32* %27, i64 %idxprom10.i53
  %32 = load i32* %arrayidx13.i55, align 4, !tbaa !6
  %arrayidx15.i56 = getelementptr inbounds i32* %7, i64 %idxprom10.i53
  %33 = load i32* %arrayidx15.i56, align 4, !tbaa !6
  %cmp.i57 = icmp sgt i32 %33, %8
  br i1 %cmp.i57, label %align_fuzz.exit81, label %if.end.i67

if.end.i67:                                       ; preds = %for.body.i58
  %arrayidx17.i59 = getelementptr inbounds %struct.rtx_def* %align_label.06.i48, i64 0, i32 1, i64 5
  %rtint18.i60 = bitcast %union.rtunion_def* %arrayidx17.i59 to i32*
  %34 = load i32* %rtint18.i60, align 4, !tbaa !6
  %sub19.i61 = sub nsw i32 %34, %28
  %idxprom20.i62 = sext i32 %sub19.i61 to i64
  %alignment.i63 = getelementptr inbounds %struct.label_alignment* %29, i64 %idxprom20.i62, i32 0
  %35 = load i16* %alignment.i63, align 2, !tbaa !10
  %conv.i64 = sext i16 %35 to i32
  %shl22.i65 = shl i32 1, %conv.i64
  %cmp23.i66 = icmp slt i32 %shl22.i65, %known_align.04.i50
  br i1 %cmp23.i66, label %for.inc.i79, label %if.end26.i73

if.end26.i73:                                     ; preds = %if.end.i67
  %sub1.i68 = sub i32 %32, %31
  %xor.i69 = xor i32 %sub1.i68, -1
  %sub28.i70 = sub nsw i32 %shl22.i65, %known_align.04.i50
  %and.i71 = and i32 %sub28.i70, %xor.i69
  %add.i72 = add i32 %and.i71, %fuzz.05.i49
  br label %for.inc.i79

for.inc.i79:                                      ; preds = %if.end26.i73, %if.end.i67
  %known_align.1.i74 = phi i32 [ %known_align.04.i50, %if.end.i67 ], [ %shl22.i65, %if.end26.i73 ]
  %fuzz.1.i75 = phi i32 [ %fuzz.05.i49, %if.end.i67 ], [ %add.i72, %if.end26.i73 ]
  %arrayidx30.i76 = getelementptr inbounds %struct.rtx_def** %25, i64 %idxprom10.i53
  %align_label.0.i77 = load %struct.rtx_def** %arrayidx30.i76, align 8
  %tobool.i78 = icmp eq %struct.rtx_def* %align_label.0.i77, null
  br i1 %tobool.i78, label %align_fuzz.exit81, label %for.body.i58

align_fuzz.exit81:                                ; preds = %for.body.i58, %for.inc.i79, %if.else
  %fuzz.0.lcssa.i80 = phi i32 [ 0, %if.else ], [ %fuzz.05.i49, %for.body.i58 ], [ %fuzz.1.i75, %for.inc.i79 ]
  %add26 = add nsw i32 %fuzz.0.lcssa.i80, %24
  br label %return

return:                                           ; preds = %entry, %align_fuzz.exit81, %align_fuzz.exit, %if.then7
  %retval.0 = phi i32 [ %2, %if.then7 ], [ %sub, %align_fuzz.exit ], [ %add26, %align_fuzz.exit81 ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @compute_alignments() #0 {
entry:
  %0 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  %tobool = icmp eq %struct.label_alignment* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.label_alignment* %0 to i8*
  tail call void @free(i8* %1)
  store %struct.label_alignment* null, %struct.label_alignment** @label_align, align 8, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %call = tail call i32 @max_label_num() #7
  store i32 %call, i32* @max_labelno, align 4, !tbaa !6
  %call1 = tail call i32 @get_first_label_num() #7
  store i32 %call1, i32* @min_labelno, align 4, !tbaa !6
  %2 = load i32* @max_labelno, align 4, !tbaa !6
  %sub = sub i32 1, %call1
  %add = add i32 %sub, %2
  %conv = sext i32 %add to i64
  %call2 = tail call noalias i8* @xcalloc(i64 %conv, i64 4) #7
  %3 = bitcast i8* %call2 to %struct.label_alignment*
  store %struct.label_alignment* %3, %struct.label_alignment** @label_align, align 8, !tbaa !1
  %4 = load i32* @optimize, align 4, !tbaa !6
  %tobool3 = icmp eq i32 %4, 0
  %5 = load i32* @optimize_size, align 4
  %tobool4 = icmp ne i32 %5, 0
  %or.cond = or i1 %tobool3, %tobool4
  br i1 %or.cond, label %for.end87, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end
  %6 = load i32* @n_basic_blocks, align 4, !tbaa !6
  %cmp130 = icmp sgt i32 %6, 0
  br i1 %cmp130, label %for.body.lr.ph, label %for.end87

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %.pre = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc86
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc86 ]
  %data = getelementptr inbounds %struct.varray_head_tag* %.pre, i64 0, i32 4
  %bb8 = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb8, i64 0, i64 %indvars.iv
  %7 = load %struct.basic_block_def** %arrayidx, align 8, !tbaa !1
  %head = getelementptr inbounds %struct.basic_block_def* %7, i64 0, i32 0
  %8 = load %struct.rtx_def** %head, align 8, !tbaa !13
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load = load i32* %9, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp9 = icmp eq i32 %bf.clear, 36
  br i1 %cmp9, label %if.end12, label %for.inc86

if.end12:                                         ; preds = %for.body
  %10 = load i32* @align_labels_log, align 4, !tbaa !6
  %11 = load i32* @align_labels_max_skip, align 4, !tbaa !6
  %pred = getelementptr inbounds %struct.basic_block_def* %7, i64 0, i32 4
  %e.0122 = load %struct.edge_def** %pred, align 8
  %tobool14123 = icmp eq %struct.edge_def* %e.0122, null
  br i1 %tobool14123, label %lor.lhs.false31, label %for.body15

for.body15:                                       ; preds = %if.end12, %for.body15
  %e.0127 = phi %struct.edge_def* [ %e.0, %for.body15 ], [ %e.0122, %if.end12 ]
  %has_fallthru.0126 = phi i32 [ %has_fallthru.1, %for.body15 ], [ 0, %if.end12 ]
  %branch_frequency.0125 = phi i32 [ %branch_frequency.1, %for.body15 ], [ 0, %if.end12 ]
  %fallthru_frequency.0124 = phi i32 [ %fallthru_frequency.1, %for.body15 ], [ 0, %if.end12 ]
  %flags = getelementptr inbounds %struct.edge_def* %e.0127, i64 0, i32 6
  %12 = load i32* %flags, align 4, !tbaa !16
  %and = and i32 %12, 1
  %tobool16 = icmp eq i32 %and, 0
  %src20 = getelementptr inbounds %struct.edge_def* %e.0127, i64 0, i32 2
  %13 = load %struct.basic_block_def** %src20, align 8, !tbaa !18
  %frequency21 = getelementptr inbounds %struct.basic_block_def* %13, i64 0, i32 14
  %14 = load i32* %frequency21, align 4, !tbaa !19
  %probability22 = getelementptr inbounds %struct.edge_def* %e.0127, i64 0, i32 7
  %15 = load i32* %probability22, align 4, !tbaa !20
  %mul23 = mul nsw i32 %15, %14
  %add24 = add nsw i32 %mul23, 5000
  %div25 = sdiv i32 %add24, 10000
  %add19 = select i1 %tobool16, i32 0, i32 %div25
  %fallthru_frequency.1 = add nsw i32 %add19, %fallthru_frequency.0124
  %add26 = select i1 %tobool16, i32 %div25, i32 0
  %branch_frequency.1 = add nsw i32 %add26, %branch_frequency.0125
  %has_fallthru.1 = select i1 %tobool16, i32 %has_fallthru.0126, i32 1
  %pred_next = getelementptr inbounds %struct.edge_def* %e.0127, i64 0, i32 0
  %e.0 = load %struct.edge_def** %pred_next, align 8
  %tobool14 = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool14, label %for.end, label %for.body15

for.end:                                          ; preds = %for.body15
  %phitmp = icmp eq i32 %has_fallthru.1, 0
  br i1 %phitmp, label %land.lhs.true, label %if.end57

land.lhs.true:                                    ; preds = %for.end
  %cmp29 = icmp sgt i32 %branch_frequency.1, 1000
  br i1 %cmp29, label %if.then52, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %if.end12, %land.lhs.true
  %branch_frequency.0.lcssa136143 = phi i32 [ %branch_frequency.1, %land.lhs.true ], [ 0, %if.end12 ]
  %fallthru_frequency.0.lcssa138141 = phi i32 [ %fallthru_frequency.1, %land.lhs.true ], [ 0, %if.end12 ]
  %frequency32 = getelementptr inbounds %struct.basic_block_def* %7, i64 0, i32 14
  %16 = load i32* %frequency32, align 4, !tbaa !19
  %17 = add nsw i64 %indvars.iv, -1
  %arrayidx37 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb8, i64 0, i64 %17
  %18 = load %struct.basic_block_def** %arrayidx37, align 8, !tbaa !1
  %frequency38 = getelementptr inbounds %struct.basic_block_def* %18, i64 0, i32 14
  %19 = load i32* %frequency38, align 4, !tbaa !19
  %mul39 = mul nsw i32 %19, 10
  %cmp40 = icmp sgt i32 %16, %mul39
  br i1 %cmp40, label %land.lhs.true42, label %if.end72

land.lhs.true42:                                  ; preds = %lor.lhs.false31
  %20 = load i32* getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 14), align 8, !tbaa !19
  %div49 = sdiv i32 %20, 2
  %cmp50 = icmp sgt i32 %19, %div49
  br i1 %cmp50, label %if.end57, label %if.then52

if.then52:                                        ; preds = %land.lhs.true42, %land.lhs.true
  %branch_frequency.0.lcssa136144 = phi i32 [ %branch_frequency.0.lcssa136143, %land.lhs.true42 ], [ %branch_frequency.1, %land.lhs.true ]
  %fallthru_frequency.0.lcssa138142 = phi i32 [ %fallthru_frequency.0.lcssa138141, %land.lhs.true42 ], [ %fallthru_frequency.1, %land.lhs.true ]
  %21 = load i32* @align_jumps_log, align 4, !tbaa !6
  %cmp53 = icmp slt i32 %10, %21
  %22 = load i32* @align_jumps_max_skip, align 4, !tbaa !6
  %. = select i1 %cmp53, i32 %22, i32 %11
  %.113 = select i1 %cmp53, i32 %21, i32 %10
  br label %if.end57

if.end57:                                         ; preds = %for.end, %if.then52, %land.lhs.true42
  %fallthru_frequency.0.lcssa139 = phi i32 [ %fallthru_frequency.1, %for.end ], [ %fallthru_frequency.0.lcssa138141, %land.lhs.true42 ], [ %fallthru_frequency.0.lcssa138142, %if.then52 ]
  %branch_frequency.0.lcssa137 = phi i32 [ %branch_frequency.1, %for.end ], [ %branch_frequency.0.lcssa136143, %land.lhs.true42 ], [ %branch_frequency.0.lcssa136144, %if.then52 ]
  %has_fallthru.0.lcssa135 = phi i1 [ true, %for.end ], [ false, %land.lhs.true42 ], [ false, %if.then52 ]
  %max_skip.0 = phi i32 [ %11, %for.end ], [ %11, %land.lhs.true42 ], [ %., %if.then52 ]
  %max_log.0 = phi i32 [ %10, %for.end ], [ %10, %land.lhs.true42 ], [ %.113, %if.then52 ]
  %add60 = add nsw i32 %branch_frequency.0.lcssa137, %fallthru_frequency.0.lcssa139
  %cmp61 = icmp sgt i32 %add60, 1000
  %or.cond114 = and i1 %has_fallthru.0.lcssa135, %cmp61
  %mul64 = mul nsw i32 %fallthru_frequency.0.lcssa139, 5
  %cmp65 = icmp sgt i32 %branch_frequency.0.lcssa137, %mul64
  %or.cond115 = and i1 %or.cond114, %cmp65
  br i1 %or.cond115, label %if.then67, label %if.end72

if.then67:                                        ; preds = %if.end57
  %23 = load i32* @align_loops_log, align 4, !tbaa !6
  %cmp68 = icmp slt i32 %max_log.0, %23
  %24 = load i32* @align_loops_max_skip, align 4, !tbaa !6
  %.max_skip.0 = select i1 %cmp68, i32 %24, i32 %max_skip.0
  %.max_log.0 = select i1 %cmp68, i32 %23, i32 %max_log.0
  br label %if.end72

if.end72:                                         ; preds = %lor.lhs.false31, %if.then67, %if.end57
  %max_skip.1 = phi i32 [ %max_skip.0, %if.end57 ], [ %.max_skip.0, %if.then67 ], [ %11, %lor.lhs.false31 ]
  %max_log.1 = phi i32 [ %max_log.0, %if.end57 ], [ %.max_log.0, %if.then67 ], [ %10, %lor.lhs.false31 ]
  %conv73 = trunc i32 %max_log.1 to i16
  %arrayidx74 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 5
  %rtint = bitcast %union.rtunion_def* %arrayidx74 to i32*
  %25 = load i32* %rtint, align 4, !tbaa !6
  %26 = load i32* @min_labelno, align 4, !tbaa !6
  %sub75 = sub nsw i32 %25, %26
  %idxprom76 = sext i32 %sub75 to i64
  %alignment = getelementptr inbounds %struct.label_alignment* %3, i64 %idxprom76, i32 0
  store i16 %conv73, i16* %alignment, align 2, !tbaa !10
  %conv78 = trunc i32 %max_skip.1 to i16
  %max_skip85 = getelementptr inbounds %struct.label_alignment* %3, i64 %idxprom76, i32 1
  store i16 %conv78, i16* %max_skip85, align 2, !tbaa !21
  br label %for.inc86

for.inc86:                                        ; preds = %for.body, %if.end72
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %27 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %27, %6
  br i1 %cmp, label %for.body, label %for.end87

for.end87:                                        ; preds = %for.inc86, %for.cond.preheader, %if.end
  ret void
}

declare i32 @max_label_num() #1

declare i32 @get_first_label_num() #1

declare noalias i8* @xcalloc(i64, i64) #1

; Function Attrs: nounwind uwtable
define void @shorten_branches(%struct.rtx_def* %first) #0 {
entry:
  %align_tab = alloca [16 x %struct.rtx_def*], align 16
  %0 = bitcast [16 x %struct.rtx_def*]* %align_tab to i8*
  call void @llvm.lifetime.start(i64 128, i8* %0) #7
  %call = tail call i32 @get_max_uid() #7
  %conv = sext i32 %call to i64
  %mul = shl nsw i64 %conv, 2
  %call1 = tail call noalias i8* @xmalloc(i64 %mul) #7
  %1 = bitcast i8* %call1 to i32*
  store i32* %1, i32** @uid_shuid, align 8, !tbaa !1
  %2 = load i32* @max_labelno, align 4, !tbaa !6
  %call2 = tail call i32 @max_label_num() #7
  %cmp = icmp eq i32 %2, %call2
  br i1 %cmp, label %if.end16, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i32* @max_labelno, align 4, !tbaa !6
  %call4 = tail call i32 @max_label_num() #7
  store i32 %call4, i32* @max_labelno, align 4, !tbaa !6
  %4 = load i32* @min_labelno, align 4, !tbaa !6
  %sub = sub nsw i32 %call4, %4
  %add = add nsw i32 %sub, 1
  %sub5 = sub nsw i32 %3, %4
  %add6 = add nsw i32 %sub5, 1
  %5 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  %6 = bitcast %struct.label_alignment* %5 to i8*
  %conv7 = sext i32 %add to i64
  %mul8 = shl nsw i64 %conv7, 2
  %call9 = tail call i8* @xrealloc(i8* %6, i64 %mul8) #7
  %7 = bitcast i8* %call9 to %struct.label_alignment*
  store %struct.label_alignment* %7, %struct.label_alignment** @label_align, align 8, !tbaa !1
  %cmp10 = icmp slt i32 %add, %add6
  br i1 %cmp10, label %if.then12, label %if.end

if.then12:                                        ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 928, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.shorten_branches, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %if.then
  %idx.ext = sext i32 %add6 to i64
  %add.ptr = getelementptr inbounds %struct.label_alignment* %7, i64 %idx.ext
  %8 = bitcast %struct.label_alignment* %add.ptr to i8*
  %sub13 = sub nsw i32 %add, %add6
  %conv14 = sext i32 %sub13 to i64
  %mul15 = shl nsw i64 %conv14, 2
  tail call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 %mul15, i32 2, i1 false)
  br label %if.end16

if.end16:                                         ; preds = %entry, %if.end
  %call17 = tail call %struct.rtx_def* @get_insns() #7
  %tobool828 = icmp eq %struct.rtx_def* %call17, null
  br i1 %tobool828, label %for.end137, label %for.body

for.body:                                         ; preds = %if.end16, %for.inc133
  %insn.0830 = phi %struct.rtx_def* [ %35, %for.inc133 ], [ %call17, %if.end16 ]
  %i.0829 = phi i32 [ %inc, %for.inc133 ], [ 1, %if.end16 ]
  %inc = add nsw i32 %i.0829, 1
  %fld = getelementptr inbounds %struct.rtx_def* %insn.0830, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  %9 = load i32* %rtint, align 4, !tbaa !6
  %idxprom = sext i32 %9 to i64
  %10 = load i32** @uid_shuid, align 8, !tbaa !1
  %arrayidx18 = getelementptr inbounds i32* %10, i64 %idxprom
  store i32 %i.0829, i32* %arrayidx18, align 4, !tbaa !6
  %11 = getelementptr inbounds %struct.rtx_def* %insn.0830, i64 0, i32 0
  %bf.load = load i32* %11, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom19774 = zext i32 %bf.clear to i64
  %arrayidx20 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom19774
  %12 = load i8* %arrayidx20, align 1, !tbaa !5
  %cmp22 = icmp eq i8 %12, 105
  br i1 %cmp22, label %for.inc133, label %if.else

if.else:                                          ; preds = %for.body
  switch i32 %bf.clear, label %for.inc133 [
    i32 36, label %if.then29
    i32 35, label %for.cond107.preheader
  ]

for.cond107.preheader:                            ; preds = %if.else
  %tobool108826 = icmp eq %struct.rtx_def* %insn.0830, null
  br i1 %tobool108826, label %for.inc133, label %land.rhs

if.then29:                                        ; preds = %if.else
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %insn.0830, i64 0, i32 1, i64 5
  %rtint32 = bitcast %union.rtunion_def* %arrayidx31 to i32*
  %13 = load i32* %rtint32, align 4, !tbaa !6
  %14 = load i32* @min_labelno, align 4, !tbaa !6
  %sub33 = sub nsw i32 %13, %14
  %idxprom34 = sext i32 %sub33 to i64
  %15 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  %alignment = getelementptr inbounds %struct.label_alignment* %15, i64 %idxprom34, i32 0
  %16 = load i16* %alignment, align 2, !tbaa !10
  %cmp37 = icmp sgt i16 %16, 0
  br i1 %cmp37, label %if.then39, label %if.end48

if.then39:                                        ; preds = %if.then29
  %conv36 = sext i16 %16 to i32
  %max_skip46 = getelementptr inbounds %struct.label_alignment* %15, i64 %idxprom34, i32 1
  %17 = load i16* %max_skip46, align 2, !tbaa !21
  %conv47 = sext i16 %17 to i32
  br label %if.end48

if.end48:                                         ; preds = %if.then39, %if.then29
  %max_skip.1 = phi i32 [ %conv47, %if.then39 ], [ 0, %if.then29 ]
  %max_log.1 = phi i32 [ %conv36, %if.then39 ], [ 0, %if.then29 ]
  %18 = load i32* @align_labels_log, align 4, !tbaa !6
  %cmp49 = icmp slt i32 %max_log.1, %18
  %19 = load i32* @align_labels_max_skip, align 4, !tbaa !6
  %.max_skip.1 = select i1 %cmp49, i32 %19, i32 %max_skip.1
  %.max_log.1 = select i1 %cmp49, i32 %18, i32 %max_log.1
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %insn.0830, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %20 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %21 = load i32* @target_flags, align 4, !tbaa !6
  %and = and i32 %21, 33554432
  %tobool55 = icmp eq i32 %and, 0
  %22 = load i32* @flag_pic, align 4
  %tobool56 = icmp ne i32 %22, 0
  %or.cond = and i1 %tobool55, %tobool56
  %tobool58 = icmp ne %struct.rtx_def* %20, null
  %or.cond618 = and i1 %or.cond, %tobool58
  br i1 %or.cond618, label %land.lhs.true59, label %if.end84

land.lhs.true59:                                  ; preds = %if.end48
  %23 = getelementptr inbounds %struct.rtx_def* %20, i64 0, i32 0
  %bf.load60 = load i32* %23, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 33
  br i1 %cmp62, label %if.then64, label %if.end84

if.then64:                                        ; preds = %land.lhs.true59
  %arrayidx66 = getelementptr inbounds %struct.rtx_def* %20, i64 0, i32 1, i64 3
  %rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %24 = load %struct.rtx_def** %rtx67, align 8, !tbaa !1
  %25 = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 0
  %bf.load68 = load i32* %25, align 8
  %26 = and i32 %bf.load68, 65534
  %switch = icmp eq i32 %26, 44
  br i1 %switch, label %if.then76, label %if.end84

if.then76:                                        ; preds = %if.then64
  %bf.lshr.i = lshr i32 %bf.load68, 16
  %bf.clear.i = and i32 %bf.lshr.i, 255
  %idxprom5.i = zext i32 %bf.clear.i to i64
  %arrayidx1.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom5.i
  %27 = load i8* %arrayidx1.i, align 1, !tbaa !5
  %cmp.i = icmp ugt i8 %27, 16
  %28 = zext i8 %27 to i64
  %conv3.i = select i1 %cmp.i, i64 16, i64 %28
  %call.i = tail call i32 @exact_log2_wide(i64 %conv3.i) #7
  %cmp78 = icmp slt i32 %.max_log.1, %call.i
  %29 = load i32* @align_labels_max_skip, align 4, !tbaa !6
  %..max_skip.1 = select i1 %cmp78, i32 %29, i32 %.max_skip.1
  %call77..max_log.1 = select i1 %cmp78, i32 %call.i, i32 %.max_log.1
  %.pre848 = load i32* %rtint32, align 4, !tbaa !6
  %.pre849 = load i32* @min_labelno, align 4, !tbaa !6
  %.pre850 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  br label %if.end84

if.end84:                                         ; preds = %if.then76, %if.then64, %land.lhs.true59, %if.end48
  %30 = phi %struct.label_alignment* [ %15, %land.lhs.true59 ], [ %15, %if.end48 ], [ %15, %if.then64 ], [ %.pre850, %if.then76 ]
  %31 = phi i32 [ %14, %land.lhs.true59 ], [ %14, %if.end48 ], [ %14, %if.then64 ], [ %.pre849, %if.then76 ]
  %32 = phi i32 [ %13, %land.lhs.true59 ], [ %13, %if.end48 ], [ %13, %if.then64 ], [ %.pre848, %if.then76 ]
  %max_skip.3 = phi i32 [ %.max_skip.1, %land.lhs.true59 ], [ %.max_skip.1, %if.end48 ], [ %.max_skip.1, %if.then64 ], [ %..max_skip.1, %if.then76 ]
  %max_log.3 = phi i32 [ %.max_log.1, %land.lhs.true59 ], [ %.max_log.1, %if.end48 ], [ %.max_log.1, %if.then64 ], [ %call77..max_log.1, %if.then76 ]
  %conv85 = trunc i32 %max_log.3 to i16
  %sub89 = sub nsw i32 %32, %31
  %idxprom90 = sext i32 %sub89 to i64
  %alignment92 = getelementptr inbounds %struct.label_alignment* %30, i64 %idxprom90, i32 0
  store i16 %conv85, i16* %alignment92, align 2, !tbaa !10
  %conv93 = trunc i32 %max_skip.3 to i16
  %max_skip100 = getelementptr inbounds %struct.label_alignment* %30, i64 %idxprom90, i32 1
  store i16 %conv93, i16* %max_skip100, align 2, !tbaa !21
  br label %for.inc133

land.rhs:                                         ; preds = %for.cond107.preheader, %for.inc.land.rhs_crit_edge
  %bf.load109 = phi i32 [ %bf.load109.pre, %for.inc.land.rhs_crit_edge ], [ %bf.load, %for.cond107.preheader ]
  %label.0827 = phi %struct.rtx_def* [ %34, %for.inc.land.rhs_crit_edge ], [ %insn.0830, %for.cond107.preheader ]
  %bf.clear110 = and i32 %bf.load109, 65535
  %idxprom111775 = zext i32 %bf.clear110 to i64
  %arrayidx112 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom111775
  %33 = load i8* %arrayidx112, align 1, !tbaa !5
  %lnot = icmp eq i8 %33, 105
  %cmp119 = icmp eq i32 %bf.clear110, 36
  %or.cond776 = or i1 %lnot, %cmp119
  br i1 %or.cond776, label %for.inc133, label %for.inc

for.inc:                                          ; preds = %land.rhs
  %arrayidx128 = getelementptr inbounds %struct.rtx_def* %label.0827, i64 0, i32 1, i64 2
  %rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**
  %34 = load %struct.rtx_def** %rtx129, align 8, !tbaa !1
  %tobool108 = icmp eq %struct.rtx_def* %34, null
  br i1 %tobool108, label %for.inc133, label %for.inc.land.rhs_crit_edge

for.inc.land.rhs_crit_edge:                       ; preds = %for.inc
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %34, i64 0, i32 0
  %bf.load109.pre = load i32* %.phi.trans.insert, align 8
  br label %land.rhs

for.inc133:                                       ; preds = %for.inc, %land.rhs, %for.cond107.preheader, %if.else, %for.body, %if.end84
  %arrayidx135 = getelementptr inbounds %struct.rtx_def* %insn.0830, i64 0, i32 1, i64 2
  %rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**
  %35 = load %struct.rtx_def** %rtx136, align 8, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %35, null
  br i1 %tobool, label %for.end137, label %for.body

for.end137:                                       ; preds = %for.inc133, %if.end16
  %call140 = tail call noalias i8* @xmalloc(i64 %mul) #7
  %36 = bitcast i8* %call140 to i32*
  store i32* %36, i32** @insn_lengths, align 8, !tbaa !1
  store i32 %call, i32* @insn_lengths_max_uid, align 4, !tbaa !6
  %call142 = tail call %struct.varray_head_tag* @varray_init(i64 %conv, i64 4, i8* getelementptr inbounds ([15 x i8]* @.str14, i64 0, i64 0)) #7
  store %struct.varray_head_tag* %call142, %struct.varray_head_tag** @insn_addresses_, align 8, !tbaa !1
  %call144 = tail call noalias i8* @xcalloc(i64 %conv, i64 1) #7
  %call146 = tail call noalias i8* @xcalloc(i64 %conv, i64 8) #7
  %37 = bitcast i8* %call146 to %struct.rtx_def**
  store %struct.rtx_def** %37, %struct.rtx_def*** @uid_align, align 8, !tbaa !1
  %arrayidx152.15 = getelementptr inbounds [16 x %struct.rtx_def*]* %align_tab, i64 0, i64 0
  %38 = bitcast [16 x %struct.rtx_def*]* %align_tab to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 128, i32 16, i1 false)
  %call154 = tail call %struct.rtx_def* @get_last_insn() #7
  %tobool156823 = icmp eq %struct.rtx_def* %call154, null
  br i1 %tobool156823, label %for.end199, label %for.body157

for.body157:                                      ; preds = %for.end137, %for.inc195
  %seq.0824 = phi %struct.rtx_def* [ %52, %for.inc195 ], [ %call154, %for.end137 ]
  %fld159 = getelementptr inbounds %struct.rtx_def* %seq.0824, i64 0, i32 1
  %rtint161 = bitcast [1 x %union.rtunion_def]* %fld159 to i32*
  %39 = load i32* %rtint161, align 4, !tbaa !6
  %40 = getelementptr inbounds %struct.rtx_def* %seq.0824, i64 0, i32 0
  %bf.load163 = load i32* %40, align 8
  %bf.clear164 = and i32 %bf.load163, 65535
  %cmp165 = icmp eq i32 %bf.clear164, 36
  br i1 %cmp165, label %cond.end, label %cond.end.thread

cond.end.thread:                                  ; preds = %for.body157
  %41 = load %struct.rtx_def** %arrayidx152.15, align 16, !tbaa !1
  %idxprom176852 = sext i32 %39 to i64
  %42 = load %struct.rtx_def*** @uid_align, align 8, !tbaa !1
  %arrayidx177853 = getelementptr inbounds %struct.rtx_def** %42, i64 %idxprom176852
  store %struct.rtx_def* %41, %struct.rtx_def** %arrayidx177853, align 8, !tbaa !1
  br label %for.inc195

cond.end:                                         ; preds = %for.body157
  %arrayidx168 = getelementptr inbounds %struct.rtx_def* %seq.0824, i64 0, i32 1, i64 5
  %rtint169 = bitcast %union.rtunion_def* %arrayidx168 to i32*
  %43 = load i32* %rtint169, align 4, !tbaa !6
  %44 = load i32* @min_labelno, align 4, !tbaa !6
  %sub170 = sub nsw i32 %43, %44
  %idxprom171 = sext i32 %sub170 to i64
  %45 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  %alignment173 = getelementptr inbounds %struct.label_alignment* %45, i64 %idxprom171, i32 0
  %46 = load i16* %alignment173, align 2, !tbaa !10
  %47 = load %struct.rtx_def** %arrayidx152.15, align 16, !tbaa !1
  %idxprom176 = sext i32 %39 to i64
  %48 = load %struct.rtx_def*** @uid_align, align 8, !tbaa !1
  %arrayidx177 = getelementptr inbounds %struct.rtx_def** %48, i64 %idxprom176
  store %struct.rtx_def* %47, %struct.rtx_def** %arrayidx177, align 8, !tbaa !1
  %tobool178 = icmp eq i16 %46, 0
  br i1 %tobool178, label %for.inc195, label %if.then179

if.then179:                                       ; preds = %cond.end
  %idxprom180 = sext i16 %46 to i64
  %arrayidx181 = getelementptr inbounds [16 x %struct.rtx_def*]* %align_tab, i64 0, i64 %idxprom180
  %49 = load %struct.rtx_def** %arrayidx181, align 8, !tbaa !1
  %50 = load %struct.rtx_def*** @uid_align, align 8, !tbaa !1
  %arrayidx183 = getelementptr inbounds %struct.rtx_def** %50, i64 %idxprom176
  store %struct.rtx_def* %49, %struct.rtx_def** %arrayidx183, align 8, !tbaa !1
  %cmp186821 = icmp sgt i16 %46, 0
  br i1 %cmp186821, label %for.body188, label %for.inc195

for.body188:                                      ; preds = %if.then179, %for.body188
  %indvars.iv836 = phi i64 [ %indvars.iv.next837, %for.body188 ], [ %idxprom180, %if.then179 ]
  %indvars.iv.next837 = add nsw i64 %indvars.iv836, -1
  %arrayidx190 = getelementptr inbounds [16 x %struct.rtx_def*]* %align_tab, i64 0, i64 %indvars.iv.next837
  store %struct.rtx_def* %seq.0824, %struct.rtx_def** %arrayidx190, align 8, !tbaa !1
  %51 = trunc i64 %indvars.iv.next837 to i32
  %cmp186 = icmp sgt i32 %51, 0
  br i1 %cmp186, label %for.body188, label %for.inc195

for.inc195:                                       ; preds = %for.body188, %if.then179, %cond.end.thread, %cond.end
  %arrayidx197 = getelementptr inbounds %struct.rtx_def* %seq.0824, i64 0, i32 1, i64 1
  %rtx198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtx_def**
  %52 = load %struct.rtx_def** %rtx198, align 8, !tbaa !1
  %tobool156 = icmp eq %struct.rtx_def* %52, null
  br i1 %tobool156, label %for.end199, label %for.body157

for.end199:                                       ; preds = %for.inc195, %for.end137
  store i32 0, i32* @insn_current_address, align 4, !tbaa !6
  %cmp201818 = icmp eq %struct.rtx_def* %first, null
  br i1 %cmp201818, label %while.end.critedge, label %for.body203.lr.ph

for.body203.lr.ph:                                ; preds = %for.end199
  %.pre845 = load i32** @insn_lengths, align 8, !tbaa !1
  br label %for.body203

for.body203:                                      ; preds = %for.body203.lr.ph, %for.inc412
  %53 = phi i32* [ %.pre845, %for.body203.lr.ph ], [ %89, %for.inc412 ]
  %insn.1819 = phi %struct.rtx_def* [ %first, %for.body203.lr.ph ], [ %92, %for.inc412 ]
  %fld204 = getelementptr inbounds %struct.rtx_def* %insn.1819, i64 0, i32 1
  %rtint206 = bitcast [1 x %union.rtunion_def]* %fld204 to i32*
  %54 = load i32* %rtint206, align 4, !tbaa !6
  %idxprom207 = sext i32 %54 to i64
  %arrayidx208 = getelementptr inbounds i32* %53, i64 %idxprom207
  store i32 0, i32* %arrayidx208, align 4, !tbaa !6
  %55 = getelementptr inbounds %struct.rtx_def* %insn.1819, i64 0, i32 0
  %bf.load209 = load i32* %55, align 8
  %bf.clear210 = and i32 %bf.load209, 65535
  %cmp211 = icmp eq i32 %bf.clear210, 36
  br i1 %cmp211, label %if.then213, label %if.end233

if.then213:                                       ; preds = %for.body203
  %arrayidx216 = getelementptr inbounds %struct.rtx_def* %insn.1819, i64 0, i32 1, i64 5
  %rtint217 = bitcast %union.rtunion_def* %arrayidx216 to i32*
  %56 = load i32* %rtint217, align 4, !tbaa !6
  %57 = load i32* @min_labelno, align 4, !tbaa !6
  %sub218 = sub nsw i32 %56, %57
  %idxprom219 = sext i32 %sub218 to i64
  %58 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  %alignment221 = getelementptr inbounds %struct.label_alignment* %58, i64 %idxprom219, i32 0
  %59 = load i16* %alignment221, align 2, !tbaa !10
  %tobool223 = icmp eq i16 %59, 0
  br i1 %tobool223, label %if.end233, label %if.then224

if.then224:                                       ; preds = %if.then213
  %conv222 = sext i16 %59 to i32
  %shl = shl i32 1, %conv222
  %60 = load i32* @insn_current_address, align 4, !tbaa !6
  %add225 = add i32 %shl, -1
  %sub226 = add i32 %add225, %60
  %sub227 = sub nsw i32 0, %shl
  %and228 = and i32 %sub226, %sub227
  %sub229 = sub nsw i32 %and228, %60
  store i32 %sub229, i32* %arrayidx208, align 4, !tbaa !6
  br label %if.end233

if.end233:                                        ; preds = %if.then213, %if.then224, %for.body203
  %61 = load i32* @insn_current_address, align 4, !tbaa !6
  %62 = load %struct.varray_head_tag** @insn_addresses_, align 8, !tbaa !1
  %data = getelementptr inbounds %struct.varray_head_tag* %62, i64 0, i32 4
  %i235 = bitcast %union.varray_data_tag* %data to [1 x i32]*
  %arrayidx236 = getelementptr inbounds [1 x i32]* %i235, i64 0, i64 %idxprom207
  store i32 %61, i32* %arrayidx236, align 4, !tbaa !6
  %bf.load237 = load i32* %55, align 8
  %bf.clear238 = and i32 %bf.load237, 65535
  %bf.clear238.off = add i32 %bf.clear238, -35
  %switch777 = icmp ugt i32 %bf.clear238.off, 2
  %bf.clear254 = and i32 %bf.load237, 134217728
  %tobool255 = icmp eq i32 %bf.clear254, 0
  %or.cond778 = and i1 %switch777, %tobool255
  br i1 %or.cond778, label %if.end257, label %for.inc412

if.end257:                                        ; preds = %if.end233
  %arrayidx259 = getelementptr inbounds %struct.rtx_def* %insn.1819, i64 0, i32 1, i64 3
  %rtx260 = bitcast %union.rtunion_def* %arrayidx259 to %struct.rtx_def**
  %63 = load %struct.rtx_def** %rtx260, align 8, !tbaa !1
  %64 = getelementptr inbounds %struct.rtx_def* %63, i64 0, i32 0
  %bf.load261 = load i32* %64, align 8
  %bf.clear262 = and i32 %bf.load261, 65535
  switch i32 %bf.clear262, label %lor.lhs.false298 [
    i32 44, label %if.then270
    i32 45, label %if.then270
    i32 40, label %if.then302
  ]

if.then270:                                       ; preds = %if.end257, %if.end257
  %65 = load i32* @target_flags, align 4, !tbaa !6
  %and271 = and i32 %65, 33554432
  %tobool272 = icmp eq i32 %and271, 0
  %66 = load i32* @flag_pic, align 4
  %tobool274 = icmp ne i32 %66, 0
  %or.cond617 = and i1 %tobool272, %tobool274
  br i1 %or.cond617, label %if.then275, label %for.inc412

if.then275:                                       ; preds = %if.then270
  %cmp278 = icmp eq i32 %bf.clear262, 45
  %idxprom280 = zext i1 %cmp278 to i64
  %arrayidx282 = getelementptr inbounds %struct.rtx_def* %63, i64 0, i32 1, i64 %idxprom280
  %rtvec = bitcast %union.rtunion_def* %arrayidx282 to %struct.rtvec_def**
  %67 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %67, i64 0, i32 0
  %68 = load i32* %num_elem, align 4, !tbaa !8
  %bf.lshr284 = lshr i32 %bf.load261, 16
  %bf.clear285 = and i32 %bf.lshr284, 255
  %idxprom286773 = zext i32 %bf.clear285 to i64
  %arrayidx287 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom286773
  %69 = load i8* %arrayidx287, align 1, !tbaa !5
  %conv288 = zext i8 %69 to i32
  %mul289 = mul nsw i32 %conv288, %68
  store i32 %mul289, i32* %arrayidx208, align 4, !tbaa !6
  br label %for.inc412

lor.lhs.false298:                                 ; preds = %if.end257
  %call299 = tail call i32 @asm_noperands(%struct.rtx_def* %63) #7
  %cmp300 = icmp sgt i32 %call299, -1
  %bf.load.i779.pre = load i32* %64, align 8
  br i1 %cmp300, label %if.then302, label %if.else308

if.then302:                                       ; preds = %lor.lhs.false298, %if.end257
  %bf.load.i779 = phi i32 [ %bf.load261, %if.end257 ], [ %bf.load.i779.pre, %lor.lhs.false298 ]
  %bf.clear.i780 = and i32 %bf.load.i779, 65535
  %cmp.i781 = icmp eq i32 %bf.clear.i780, 40
  br i1 %cmp.i781, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then302
  %arrayidx.i782 = getelementptr inbounds %struct.rtx_def* %63, i64 0, i32 1, i64 0
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i782 to i8**
  %70 = load i8** %rtstr.i, align 8, !tbaa !1
  br label %for.cond.i

if.else.i:                                        ; preds = %if.then302
  %call.i783 = tail call i8* @decode_asm_operands(%struct.rtx_def* %63, %struct.rtx_def** null, %struct.rtx_def*** null, i8** null, i32* null) #7
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.else.i, %if.then.i, %for.inc.i
  %template.0.i = phi i8* [ %incdec.ptr.i, %for.inc.i ], [ %call.i783, %if.else.i ], [ %70, %if.then.i ]
  %count.0.i = phi i32 [ %count.1.i, %for.inc.i ], [ 1, %if.then.i ], [ 1, %if.else.i ]
  %71 = load i8* %template.0.i, align 1, !tbaa !5
  switch i8 %71, label %for.inc.i [
    i8 0, label %asm_insn_count.exit
    i8 59, label %if.then6.i
    i8 10, label %if.then6.i
  ]

if.then6.i:                                       ; preds = %for.cond.i, %for.cond.i
  %inc.i = add nsw i32 %count.0.i, 1
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then6.i, %for.cond.i
  %count.1.i = phi i32 [ %inc.i, %if.then6.i ], [ %count.0.i, %for.cond.i ]
  %incdec.ptr.i = getelementptr inbounds i8* %template.0.i, i64 1
  br label %for.cond.i

asm_insn_count.exit:                              ; preds = %for.cond.i
  %call304 = tail call i32 @insn_default_length(%struct.rtx_def* %insn.1819) #7
  %mul305 = mul nsw i32 %call304, %count.0.i
  %72 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx307 = getelementptr inbounds i32* %72, i64 %idxprom207
  store i32 %mul305, i32* %arrayidx307, align 4, !tbaa !6
  br label %for.inc412

if.else308:                                       ; preds = %lor.lhs.false298
  %bf.clear310 = and i32 %bf.load.i779.pre, 65535
  switch i32 %bf.clear310, label %if.then400 [
    i32 24, label %for.cond315.preheader
    i32 48, label %for.inc412
    i32 49, label %for.inc412
  ]

for.cond315.preheader:                            ; preds = %if.else308
  %arrayidx317 = getelementptr inbounds %struct.rtx_def* %63, i64 0, i32 1, i64 0
  %rtvec318 = bitcast %union.rtunion_def* %arrayidx317 to %struct.rtvec_def**
  %73 = load %struct.rtvec_def** %rtvec318, align 8, !tbaa !1
  %num_elem319815 = getelementptr inbounds %struct.rtvec_def* %73, i64 0, i32 0
  %74 = load i32* %num_elem319815, align 4, !tbaa !8
  %cmp320816 = icmp sgt i32 %74, 0
  br i1 %cmp320816, label %for.body322, label %for.inc412

for.body322:                                      ; preds = %for.cond315.preheader, %if.end357.for.body322_crit_edge
  %bf.load331 = phi i32 [ %bf.load331.pre, %if.end357.for.body322_crit_edge ], [ %bf.load.i779.pre, %for.cond315.preheader ]
  %indvars.iv834 = phi i64 [ %indvars.iv.next835, %if.end357.for.body322_crit_edge ], [ 0, %for.cond315.preheader ]
  %75 = phi %struct.rtvec_def* [ %85, %if.end357.for.body322_crit_edge ], [ %73, %for.cond315.preheader ]
  %arrayidx327 = getelementptr inbounds %struct.rtvec_def* %75, i64 0, i32 1, i64 %indvars.iv834
  %76 = load %struct.rtx_def** %arrayidx327, align 8, !tbaa !1
  %fld328 = getelementptr inbounds %struct.rtx_def* %76, i64 0, i32 1
  %rtint330 = bitcast [1 x %union.rtunion_def]* %fld328 to i32*
  %77 = load i32* %rtint330, align 4, !tbaa !6
  %bf.clear332 = and i32 %bf.load331, 65535
  %cmp333 = icmp eq i32 %bf.clear332, 40
  %arrayidx350.pre = getelementptr inbounds %struct.rtx_def* %76, i64 0, i32 1, i64 3
  %rtx351.pre = bitcast %union.rtunion_def* %arrayidx350.pre to %struct.rtx_def**
  br i1 %cmp333, label %if.then348, label %lor.lhs.false335

lor.lhs.false335:                                 ; preds = %for.body322
  %78 = load %struct.rtx_def** %rtx351.pre, align 8, !tbaa !1
  %call345 = tail call i32 @asm_noperands(%struct.rtx_def* %78) #7
  %cmp346 = icmp sgt i32 %call345, -1
  br i1 %cmp346, label %if.then348, label %if.else355

if.then348:                                       ; preds = %for.body322, %lor.lhs.false335
  %79 = load %struct.rtx_def** %rtx351.pre, align 8, !tbaa !1
  %80 = getelementptr inbounds %struct.rtx_def* %79, i64 0, i32 0
  %bf.load.i784 = load i32* %80, align 8
  %bf.clear.i785 = and i32 %bf.load.i784, 65535
  %cmp.i786 = icmp eq i32 %bf.clear.i785, 40
  br i1 %cmp.i786, label %if.then.i789, label %if.else.i791

if.then.i789:                                     ; preds = %if.then348
  %arrayidx.i787 = getelementptr inbounds %struct.rtx_def* %79, i64 0, i32 1, i64 0
  %rtstr.i788 = bitcast %union.rtunion_def* %arrayidx.i787 to i8**
  %81 = load i8** %rtstr.i788, align 8, !tbaa !1
  br label %for.cond.i794

if.else.i791:                                     ; preds = %if.then348
  %call.i790 = tail call i8* @decode_asm_operands(%struct.rtx_def* %79, %struct.rtx_def** null, %struct.rtx_def*** null, i8** null, i32* null) #7
  br label %for.cond.i794

for.cond.i794:                                    ; preds = %if.else.i791, %if.then.i789, %for.inc.i799
  %template.0.i792 = phi i8* [ %incdec.ptr.i798, %for.inc.i799 ], [ %call.i790, %if.else.i791 ], [ %81, %if.then.i789 ]
  %count.0.i793 = phi i32 [ %count.1.i797, %for.inc.i799 ], [ 1, %if.then.i789 ], [ 1, %if.else.i791 ]
  %82 = load i8* %template.0.i792, align 1, !tbaa !5
  switch i8 %82, label %for.inc.i799 [
    i8 0, label %asm_insn_count.exit800
    i8 59, label %if.then6.i796
    i8 10, label %if.then6.i796
  ]

if.then6.i796:                                    ; preds = %for.cond.i794, %for.cond.i794
  %inc.i795 = add nsw i32 %count.0.i793, 1
  br label %for.inc.i799

for.inc.i799:                                     ; preds = %if.then6.i796, %for.cond.i794
  %count.1.i797 = phi i32 [ %inc.i795, %if.then6.i796 ], [ %count.0.i793, %for.cond.i794 ]
  %incdec.ptr.i798 = getelementptr inbounds i8* %template.0.i792, i64 1
  br label %for.cond.i794

asm_insn_count.exit800:                           ; preds = %for.cond.i794
  %call353 = tail call i32 @insn_default_length(%struct.rtx_def* %76) #7
  %mul354 = mul nsw i32 %call353, %count.0.i793
  br label %if.end357

if.else355:                                       ; preds = %lor.lhs.false335
  %call356 = tail call i32 @insn_default_length(%struct.rtx_def* %76) #7
  br label %if.end357

if.end357:                                        ; preds = %if.else355, %asm_insn_count.exit800
  %inner_length.0 = phi i32 [ %mul354, %asm_insn_count.exit800 ], [ %call356, %if.else355 ]
  %idxprom358 = sext i32 %77 to i64
  %83 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx359 = getelementptr inbounds i32* %83, i64 %idxprom358
  store i32 %inner_length.0, i32* %arrayidx359, align 4, !tbaa !6
  %arrayidx382 = getelementptr inbounds i8* %call144, i64 %idxprom358
  store i8 0, i8* %arrayidx382, align 1, !tbaa !5
  %arrayidx385 = getelementptr inbounds i32* %83, i64 %idxprom207
  %84 = load i32* %arrayidx385, align 4, !tbaa !6
  %add386 = add nsw i32 %84, %inner_length.0
  store i32 %add386, i32* %arrayidx385, align 4, !tbaa !6
  %indvars.iv.next835 = add nuw nsw i64 %indvars.iv834, 1
  %85 = load %struct.rtvec_def** %rtvec318, align 8, !tbaa !1
  %num_elem319 = getelementptr inbounds %struct.rtvec_def* %85, i64 0, i32 0
  %86 = load i32* %num_elem319, align 4, !tbaa !8
  %87 = trunc i64 %indvars.iv.next835 to i32
  %cmp320 = icmp slt i32 %87, %86
  br i1 %cmp320, label %if.end357.for.body322_crit_edge, label %for.inc412

if.end357.for.body322_crit_edge:                  ; preds = %if.end357
  %bf.load331.pre = load i32* %64, align 8
  br label %for.body322

if.then400:                                       ; preds = %if.else308
  %call401 = tail call i32 @insn_default_length(%struct.rtx_def* %insn.1819) #7
  %88 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx403 = getelementptr inbounds i32* %88, i64 %idxprom207
  store i32 %call401, i32* %arrayidx403, align 4, !tbaa !6
  %call404 = tail call i32 @insn_variable_length_p(%struct.rtx_def* %insn.1819) #7
  %conv405 = trunc i32 %call404 to i8
  %arrayidx407 = getelementptr inbounds i8* %call144, i64 %idxprom207
  store i8 %conv405, i8* %arrayidx407, align 1, !tbaa !5
  br label %for.inc412

for.inc412:                                       ; preds = %if.end357, %for.cond315.preheader, %if.end233, %if.else308, %if.else308, %if.then270, %if.then275, %if.then400, %asm_insn_count.exit
  %89 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx414 = getelementptr inbounds i32* %89, i64 %idxprom207
  %90 = load i32* %arrayidx414, align 4, !tbaa !6
  %91 = load i32* @insn_current_address, align 4, !tbaa !6
  %add415 = add nsw i32 %91, %90
  store i32 %add415, i32* @insn_current_address, align 4, !tbaa !6
  %arrayidx417 = getelementptr inbounds %struct.rtx_def* %insn.1819, i64 0, i32 1, i64 2
  %rtx418 = bitcast %union.rtunion_def* %arrayidx417 to %struct.rtx_def**
  %92 = load %struct.rtx_def** %rtx418, align 8, !tbaa !1
  %cmp201 = icmp eq %struct.rtx_def* %92, null
  br i1 %cmp201, label %while.body, label %for.body203

while.body:                                       ; preds = %for.inc412, %for.end613
  store i32 15, i32* @insn_current_align, align 4, !tbaa !6
  store i32 0, i32* @insn_current_address, align 4, !tbaa !6
  br i1 %cmp201818, label %while.end, label %for.body424

for.body424:                                      ; preds = %while.body, %for.inc609
  %insn.2812 = phi %struct.rtx_def* [ %146, %for.inc609 ], [ %first, %while.body ]
  %something_changed.0811 = phi i32 [ %something_changed.4, %for.inc609 ], [ 0, %while.body ]
  %fld425 = getelementptr inbounds %struct.rtx_def* %insn.2812, i64 0, i32 1
  %rtint427 = bitcast [1 x %union.rtunion_def]* %fld425 to i32*
  %93 = load i32* %rtint427, align 4, !tbaa !6
  %94 = getelementptr inbounds %struct.rtx_def* %insn.2812, i64 0, i32 0
  %bf.load428 = load i32* %94, align 8
  %bf.clear429 = and i32 %bf.load428, 65535
  %cmp430 = icmp eq i32 %bf.clear429, 36
  br i1 %cmp430, label %if.then432, label %if.end463

if.then432:                                       ; preds = %for.body424
  %arrayidx435 = getelementptr inbounds %struct.rtx_def* %insn.2812, i64 0, i32 1, i64 5
  %rtint436 = bitcast %union.rtunion_def* %arrayidx435 to i32*
  %95 = load i32* %rtint436, align 4, !tbaa !6
  %96 = load i32* @min_labelno, align 4, !tbaa !6
  %sub437 = sub nsw i32 %95, %96
  %idxprom438 = sext i32 %sub437 to i64
  %97 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  %alignment440 = getelementptr inbounds %struct.label_alignment* %97, i64 %idxprom438, i32 0
  %98 = load i16* %alignment440, align 2, !tbaa !10
  %conv441 = sext i16 %98 to i32
  %99 = load i32* @insn_current_align, align 4, !tbaa !6
  %cmp442 = icmp sgt i32 %conv441, %99
  br i1 %cmp442, label %if.then444, label %if.else455

if.then444:                                       ; preds = %if.then432
  %shl446 = shl i32 1, %conv441
  %100 = load i32* @insn_current_address, align 4, !tbaa !6
  %add448 = add i32 %shl446, -1
  %sub449 = add i32 %add448, %100
  %sub450 = sub nsw i32 0, %shl446
  %and451 = and i32 %sub449, %sub450
  %sub452 = sub nsw i32 %and451, %100
  %idxprom453 = sext i32 %93 to i64
  %101 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx454 = getelementptr inbounds i32* %101, i64 %idxprom453
  store i32 %sub452, i32* %arrayidx454, align 4, !tbaa !6
  store i32 %conv441, i32* @insn_current_align, align 4, !tbaa !6
  store i32 %and451, i32* @insn_current_address, align 4, !tbaa !6
  br label %if.end458

if.else455:                                       ; preds = %if.then432
  %idxprom456 = sext i32 %93 to i64
  %102 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx457 = getelementptr inbounds i32* %102, i64 %idxprom456
  store i32 0, i32* %arrayidx457, align 4, !tbaa !6
  %.pre = load i32* @insn_current_address, align 4, !tbaa !6
  br label %if.end458

if.end458:                                        ; preds = %if.else455, %if.then444
  %103 = phi i32 [ %.pre, %if.else455 ], [ %and451, %if.then444 ]
  %idxprom459 = sext i32 %93 to i64
  %104 = load %struct.varray_head_tag** @insn_addresses_, align 8, !tbaa !1
  %data460 = getelementptr inbounds %struct.varray_head_tag* %104, i64 0, i32 4
  %i461 = bitcast %union.varray_data_tag* %data460 to [1 x i32]*
  %arrayidx462 = getelementptr inbounds [1 x i32]* %i461, i64 0, i64 %idxprom459
  store i32 %103, i32* %arrayidx462, align 4, !tbaa !6
  br label %for.inc609

if.end463:                                        ; preds = %for.body424
  %105 = load i32* @length_unit_log, align 4, !tbaa !6
  %106 = load i32* @insn_current_align, align 4, !tbaa !6
  %cmp464 = icmp slt i32 %105, %106
  br i1 %cmp464, label %if.then466, label %if.end467

if.then466:                                       ; preds = %if.end463
  store i32 %105, i32* @insn_current_align, align 4, !tbaa !6
  br label %if.end467

if.end467:                                        ; preds = %if.then466, %if.end463
  %idxprom468 = sext i32 %93 to i64
  %107 = load %struct.varray_head_tag** @insn_addresses_, align 8, !tbaa !1
  %data469 = getelementptr inbounds %struct.varray_head_tag* %107, i64 0, i32 4
  %i470 = bitcast %union.varray_data_tag* %data469 to [1 x i32]*
  %arrayidx471 = getelementptr inbounds [1 x i32]* %i470, i64 0, i64 %idxprom468
  %108 = load i32* %arrayidx471, align 4, !tbaa !6
  store i32 %108, i32* @insn_last_address, align 4, !tbaa !6
  %109 = load i32* @insn_current_address, align 4, !tbaa !6
  store i32 %109, i32* %arrayidx471, align 4, !tbaa !6
  %arrayidx477 = getelementptr inbounds i8* %call144, i64 %idxprom468
  %110 = load i8* %arrayidx477, align 1, !tbaa !5
  %tobool478 = icmp eq i8 %110, 0
  %bf.load532 = load i32* %94, align 8
  %bf.clear533 = and i32 %bf.load532, 65535
  %cmp534 = icmp eq i32 %bf.clear533, 32
  br i1 %tobool478, label %if.then479, label %if.end531

if.then479:                                       ; preds = %if.end467
  br i1 %cmp534, label %land.lhs.true484, label %if.else526

land.lhs.true484:                                 ; preds = %if.then479
  %arrayidx486 = getelementptr inbounds %struct.rtx_def* %insn.2812, i64 0, i32 1, i64 3
  %rtx487 = bitcast %union.rtunion_def* %arrayidx486 to %struct.rtx_def**
  %111 = load %struct.rtx_def** %rtx487, align 8, !tbaa !1
  %112 = getelementptr inbounds %struct.rtx_def* %111, i64 0, i32 0
  %bf.load488 = load i32* %112, align 8
  %bf.clear489 = and i32 %bf.load488, 65535
  %cmp490 = icmp eq i32 %bf.clear489, 24
  br i1 %cmp490, label %for.cond497.preheader, label %if.else526

for.cond497.preheader:                            ; preds = %land.lhs.true484
  %arrayidx499 = getelementptr inbounds %struct.rtx_def* %111, i64 0, i32 1, i64 0
  %rtvec500 = bitcast %union.rtunion_def* %arrayidx499 to %struct.rtvec_def**
  %113 = load %struct.rtvec_def** %rtvec500, align 8, !tbaa !1
  %num_elem501807 = getelementptr inbounds %struct.rtvec_def* %113, i64 0, i32 0
  %114 = load i32* %num_elem501807, align 4, !tbaa !8
  %cmp502808 = icmp sgt i32 %114, 0
  br i1 %cmp502808, label %for.body504.lr.ph, label %for.inc609

for.body504.lr.ph:                                ; preds = %for.cond497.preheader
  %115 = load i32** @insn_lengths, align 8, !tbaa !1
  %.pre840 = load i32* @insn_current_address, align 4, !tbaa !6
  br label %for.body504

for.body504:                                      ; preds = %for.body504.lr.ph, %for.body504
  %116 = phi i32 [ %.pre840, %for.body504.lr.ph ], [ %add522, %for.body504 ]
  %indvars.iv832 = phi i64 [ 0, %for.body504.lr.ph ], [ %indvars.iv.next833, %for.body504 ]
  %arrayidx511 = getelementptr inbounds %struct.rtvec_def* %113, i64 0, i32 1, i64 %indvars.iv832
  %117 = load %struct.rtx_def** %arrayidx511, align 8, !tbaa !1
  %arrayidx514 = getelementptr inbounds %struct.rtx_def* %117, i64 0, i32 1, i64 0
  %rtint515 = bitcast %union.rtunion_def* %arrayidx514 to i32*
  %118 = load i32* %rtint515, align 4, !tbaa !6
  %idxprom516 = sext i32 %118 to i64
  %arrayidx519 = getelementptr inbounds [1 x i32]* %i470, i64 0, i64 %idxprom516
  store i32 %116, i32* %arrayidx519, align 4, !tbaa !6
  %arrayidx521 = getelementptr inbounds i32* %115, i64 %idxprom516
  %119 = load i32* %arrayidx521, align 4, !tbaa !6
  %120 = load i32* @insn_current_address, align 4, !tbaa !6
  %add522 = add nsw i32 %120, %119
  store i32 %add522, i32* @insn_current_address, align 4, !tbaa !6
  %indvars.iv.next833 = add nuw nsw i64 %indvars.iv832, 1
  %121 = load i32* %num_elem501807, align 4, !tbaa !8
  %122 = trunc i64 %indvars.iv.next833 to i32
  %cmp502 = icmp slt i32 %122, %121
  br i1 %cmp502, label %for.body504, label %for.inc609

if.else526:                                       ; preds = %land.lhs.true484, %if.then479
  %123 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx528 = getelementptr inbounds i32* %123, i64 %idxprom468
  %124 = load i32* %arrayidx528, align 4, !tbaa !6
  %125 = load i32* @insn_current_address, align 4, !tbaa !6
  %add529 = add nsw i32 %125, %124
  store i32 %add529, i32* @insn_current_address, align 4, !tbaa !6
  br label %for.inc609

if.end531:                                        ; preds = %if.end467
  br i1 %cmp534, label %land.lhs.true536, label %if.else597

land.lhs.true536:                                 ; preds = %if.end531
  %arrayidx538 = getelementptr inbounds %struct.rtx_def* %insn.2812, i64 0, i32 1, i64 3
  %rtx539 = bitcast %union.rtunion_def* %arrayidx538 to %struct.rtx_def**
  %126 = load %struct.rtx_def** %rtx539, align 8, !tbaa !1
  %127 = getelementptr inbounds %struct.rtx_def* %126, i64 0, i32 0
  %bf.load540 = load i32* %127, align 8
  %bf.clear541 = and i32 %bf.load540, 65535
  %cmp542 = icmp eq i32 %bf.clear541, 24
  br i1 %cmp542, label %for.cond549.preheader, label %if.else597

for.cond549.preheader:                            ; preds = %land.lhs.true536
  %arrayidx551 = getelementptr inbounds %struct.rtx_def* %126, i64 0, i32 1, i64 0
  %rtvec552 = bitcast %union.rtunion_def* %arrayidx551 to %struct.rtvec_def**
  %128 = load %struct.rtvec_def** %rtvec552, align 8, !tbaa !1
  %num_elem553801 = getelementptr inbounds %struct.rtvec_def* %128, i64 0, i32 0
  %129 = load i32* %num_elem553801, align 4, !tbaa !8
  %cmp554802 = icmp sgt i32 %129, 0
  br i1 %cmp554802, label %for.body556.lr.ph, label %if.end600

for.body556.lr.ph:                                ; preds = %for.cond549.preheader
  %.pre841 = load i32* @insn_current_address, align 4, !tbaa !6
  br label %for.body556

for.body556:                                      ; preds = %if.end589.for.body556_crit_edge, %for.body556.lr.ph
  %130 = phi %struct.varray_head_tag* [ %107, %for.body556.lr.ph ], [ %.pre842, %if.end589.for.body556_crit_edge ]
  %131 = phi i32 [ %.pre841, %for.body556.lr.ph ], [ %add592, %if.end589.for.body556_crit_edge ]
  %indvars.iv = phi i64 [ 0, %for.body556.lr.ph ], [ %indvars.iv.next, %if.end589.for.body556_crit_edge ]
  %132 = phi %struct.rtvec_def* [ %128, %for.body556.lr.ph ], [ %140, %if.end589.for.body556_crit_edge ]
  %something_changed.1804 = phi i32 [ %something_changed.0811, %for.body556.lr.ph ], [ %something_changed.2, %if.end589.for.body556_crit_edge ]
  %new_length.0803 = phi i32 [ 0, %for.body556.lr.ph ], [ %add593, %if.end589.for.body556_crit_edge ]
  %arrayidx563 = getelementptr inbounds %struct.rtvec_def* %132, i64 0, i32 1, i64 %indvars.iv
  %133 = load %struct.rtx_def** %arrayidx563, align 8, !tbaa !1
  %arrayidx566 = getelementptr inbounds %struct.rtx_def* %133, i64 0, i32 1, i64 0
  %rtint567 = bitcast %union.rtunion_def* %arrayidx566 to i32*
  %134 = load i32* %rtint567, align 4, !tbaa !6
  %idxprom569 = sext i32 %134 to i64
  %data570 = getelementptr inbounds %struct.varray_head_tag* %130, i64 0, i32 4
  %i571 = bitcast %union.varray_data_tag* %data570 to [1 x i32]*
  %arrayidx572 = getelementptr inbounds [1 x i32]* %i571, i64 0, i64 %idxprom569
  store i32 %131, i32* %arrayidx572, align 4, !tbaa !6
  %arrayidx574 = getelementptr inbounds i8* %call144, i64 %idxprom569
  %135 = load i8* %arrayidx574, align 1, !tbaa !5
  %tobool575 = icmp eq i8 %135, 0
  br i1 %tobool575, label %if.end581.thread, label %if.end581

if.end581.thread:                                 ; preds = %for.body556
  %136 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx578 = getelementptr inbounds i32* %136, i64 %idxprom569
  %137 = load i32* %arrayidx578, align 4, !tbaa !6
  br label %if.end589

if.end581:                                        ; preds = %for.body556
  %call580 = tail call i32 @insn_current_length(%struct.rtx_def* %133) #7
  %.pre843 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx583.phi.trans.insert = getelementptr inbounds i32* %.pre843, i64 %idxprom569
  %.pre844 = load i32* %arrayidx583.phi.trans.insert, align 4, !tbaa !6
  %cmp584 = icmp eq i32 %call580, %.pre844
  br i1 %cmp584, label %if.end589, label %if.then586

if.then586:                                       ; preds = %if.end581
  %arrayidx583 = getelementptr inbounds i32* %.pre843, i64 %idxprom569
  store i32 %call580, i32* %arrayidx583, align 4, !tbaa !6
  br label %if.end589

if.end589:                                        ; preds = %if.end581.thread, %if.end581, %if.then586
  %inner_length568.0856 = phi i32 [ %call580, %if.then586 ], [ %call580, %if.end581 ], [ %137, %if.end581.thread ]
  %138 = phi i32 [ %call580, %if.then586 ], [ %.pre844, %if.end581 ], [ %137, %if.end581.thread ]
  %something_changed.2 = phi i32 [ 1, %if.then586 ], [ %something_changed.1804, %if.end581 ], [ %something_changed.1804, %if.end581.thread ]
  %139 = load i32* @insn_current_address, align 4, !tbaa !6
  %add592 = add nsw i32 %139, %138
  store i32 %add592, i32* @insn_current_address, align 4, !tbaa !6
  %add593 = add nsw i32 %inner_length568.0856, %new_length.0803
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %140 = load %struct.rtvec_def** %rtvec552, align 8, !tbaa !1
  %num_elem553 = getelementptr inbounds %struct.rtvec_def* %140, i64 0, i32 0
  %141 = load i32* %num_elem553, align 4, !tbaa !8
  %142 = trunc i64 %indvars.iv.next to i32
  %cmp554 = icmp slt i32 %142, %141
  br i1 %cmp554, label %if.end589.for.body556_crit_edge, label %if.end600

if.end589.for.body556_crit_edge:                  ; preds = %if.end589
  %.pre842 = load %struct.varray_head_tag** @insn_addresses_, align 8, !tbaa !1
  br label %for.body556

if.else597:                                       ; preds = %land.lhs.true536, %if.end531
  %call598 = tail call i32 @insn_current_length(%struct.rtx_def* %insn.2812) #7
  %143 = load i32* @insn_current_address, align 4, !tbaa !6
  %add599 = add nsw i32 %143, %call598
  store i32 %add599, i32* @insn_current_address, align 4, !tbaa !6
  br label %if.end600

if.end600:                                        ; preds = %if.end589, %for.cond549.preheader, %if.else597
  %new_length.1 = phi i32 [ %call598, %if.else597 ], [ 0, %for.cond549.preheader ], [ %add593, %if.end589 ]
  %something_changed.3 = phi i32 [ %something_changed.0811, %if.else597 ], [ %something_changed.0811, %for.cond549.preheader ], [ %something_changed.2, %if.end589 ]
  %144 = load i32** @insn_lengths, align 8, !tbaa !1
  %arrayidx602 = getelementptr inbounds i32* %144, i64 %idxprom468
  %145 = load i32* %arrayidx602, align 4, !tbaa !6
  %cmp603 = icmp eq i32 %new_length.1, %145
  br i1 %cmp603, label %for.inc609, label %if.then605

if.then605:                                       ; preds = %if.end600
  store i32 %new_length.1, i32* %arrayidx602, align 4, !tbaa !6
  br label %for.inc609

for.inc609:                                       ; preds = %for.body504, %for.cond497.preheader, %if.end600, %if.then605, %if.else526, %if.end458
  %something_changed.4 = phi i32 [ %something_changed.0811, %if.end458 ], [ 1, %if.then605 ], [ %something_changed.3, %if.end600 ], [ %something_changed.0811, %if.else526 ], [ %something_changed.0811, %for.cond497.preheader ], [ %something_changed.0811, %for.body504 ]
  %arrayidx611 = getelementptr inbounds %struct.rtx_def* %insn.2812, i64 0, i32 1, i64 2
  %rtx612 = bitcast %union.rtunion_def* %arrayidx611 to %struct.rtx_def**
  %146 = load %struct.rtx_def** %rtx612, align 8, !tbaa !1
  %cmp422 = icmp eq %struct.rtx_def* %146, null
  br i1 %cmp422, label %for.end613, label %for.body424

for.end613:                                       ; preds = %for.inc609
  %147 = load i32* @optimize, align 4, !tbaa !6
  %tobool614 = icmp ne i32 %147, 0
  %tobool420 = icmp ne i32 %something_changed.4, 0
  %or.cond619 = and i1 %tobool614, %tobool420
  br i1 %or.cond619, label %while.body, label %while.end

while.end.critedge:                               ; preds = %for.end199
  store i32 15, i32* @insn_current_align, align 4, !tbaa !6
  store i32 0, i32* @insn_current_address, align 4, !tbaa !6
  br label %while.end

while.end:                                        ; preds = %while.body, %for.end613, %while.end.critedge
  tail call void @free(i8* %call144)
  call void @llvm.lifetime.end(i64 128, i8* %0) #7
  ret void
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #7

declare i32 @get_max_uid() #1

declare noalias i8* @xmalloc(i64) #1

declare i8* @xrealloc(i8*, i64) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #7

declare %struct.rtx_def* @get_insns() #1

declare %struct.varray_head_tag* @varray_init(i64, i64, i8*) #1

declare %struct.rtx_def* @get_last_insn() #1

declare i32 @insn_variable_length_p(%struct.rtx_def*) #1

declare i32 @insn_current_length(%struct.rtx_def*) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #7

; Function Attrs: nounwind uwtable
define void @final_start_function(%struct.rtx_def* nocapture readonly %first, %struct._IO_FILE* %file, i32 %optimize) #0 {
entry:
  store i32 0, i32* @block_depth, align 4, !tbaa !6
  store %struct.rtx_def* null, %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds %struct.rtx_def* %first, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %0 = load i32* %rtint, align 4, !tbaa !6
  %cmp = icmp eq i32 %0, -99
  br i1 %cmp, label %entry.if.end_crit_edge, label %if.then

entry.if.end_crit_edge:                           ; preds = %entry
  %.pre = load i32* @last_linenum, align 4, !tbaa !6
  %.pre12 = load i8** @last_filename, align 8, !tbaa !1
  br label %if.end

if.then:                                          ; preds = %entry
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %first, i64 0, i32 1, i64 3
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %1 = load i8** %rtstr.i, align 8, !tbaa !1
  store i8* %1, i8** @last_filename, align 8, !tbaa !1
  store i32 %0, i32* @last_linenum, align 4, !tbaa !6
  %2 = load i32* @high_block_linenum, align 4, !tbaa !6
  %cmp.i = icmp sgt i32 %0, %2
  %cond.i = select i1 %cmp.i, i32 %0, i32 %2
  store i32 %cond.i, i32* @high_block_linenum, align 4, !tbaa !6
  %3 = load i32* @high_function_linenum, align 4, !tbaa !6
  %cmp3.i = icmp sgt i32 %0, %3
  %cond7.i = select i1 %cmp3.i, i32 %0, i32 %3
  store i32 %cond7.i, i32* @high_function_linenum, align 4, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %4 = phi i8* [ %.pre12, %entry.if.end_crit_edge ], [ %1, %if.then ]
  %5 = phi i32 [ %.pre, %entry.if.end_crit_edge ], [ %0, %if.then ]
  store i32 %5, i32* @high_function_linenum, align 4, !tbaa !6
  store i32 %5, i32* @high_block_linenum, align 4, !tbaa !6
  %6 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !1
  %begin_prologue = getelementptr inbounds %struct.gcc_debug_hooks* %6, i64 0, i32 10
  %7 = load void (i32, i8*)** %begin_prologue, align 8, !tbaa !22
  tail call void %7(i32 %5, i8* %4) #7
  %8 = load i32* @write_symbols, align 4, !tbaa !5
  switch i32 %8, label %if.then3 [
    i32 7, label %if.end4
    i32 4, label %if.end4
  ]

if.then3:                                         ; preds = %if.end
  tail call void @dwarf2out_begin_prologue(i32 0, i8* null) #7
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.end, %if.then3
  %call = tail call i32 @dwarf2out_do_frame() #7
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end4
  tail call void @dwarf2out_frame_debug(%struct.rtx_def* null) #7
  br label %if.end6

if.end6:                                          ; preds = %if.end4, %if.then5
  %9 = load i32* @write_symbols, align 4, !tbaa !5
  %tobool7 = icmp eq i32 %9, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end6
  tail call void @remove_unnecessary_notes() #7
  tail call void @reorder_blocks() #7
  %10 = load %union.tree_node** @current_function_decl, align 8, !tbaa !1
  tail call void @number_blocks(%union.tree_node* %10) #7
  %11 = load %union.tree_node** @current_function_decl, align 8, !tbaa !1
  %initial = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 12
  %12 = load %union.tree_node** %initial, align 8, !tbaa !24
  %asm_written_flag = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %asm_written_flag, align 8
  %bf.set = or i32 %bf.load, 16384
  store i32 %bf.set, i32* %asm_written_flag, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.end6, %if.then8
  %13 = load void (%struct._IO_FILE*, i64)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 6), align 8, !tbaa !27
  %call10 = tail call i64 @get_frame_size() #7
  tail call void %13(%struct._IO_FILE* %file, i64 %call10) #7
  ret void
}

declare void @dwarf2out_begin_prologue(i32, i8*) #1

declare i32 @dwarf2out_do_frame() #1

declare void @dwarf2out_frame_debug(%struct.rtx_def*) #1

declare void @remove_unnecessary_notes() #1

declare void @reorder_blocks() #1

declare void @number_blocks(%union.tree_node*) #1

declare i64 @get_frame_size() #1

; Function Attrs: nounwind uwtable
define void @final_end_function() #0 {
entry:
  %.b.i = load i1* @app_on, align 1
  br i1 %.b.i, label %if.then.i, label %app_disable.exit

if.then.i:                                        ; preds = %entry
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str13, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %0) #7
  store i1 false, i1* @app_on, align 1
  br label %app_disable.exit

app_disable.exit:                                 ; preds = %entry, %if.then.i
  %2 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !1
  %end_function = getelementptr inbounds %struct.gcc_debug_hooks* %2, i64 0, i32 14
  %3 = load void (i32)** %end_function, align 8, !tbaa !33
  %4 = load i32* @high_function_linenum, align 4, !tbaa !6
  tail call void %3(i32 %4) #7
  %5 = load void (%struct._IO_FILE*, i64)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 9), align 8, !tbaa !34
  %6 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call = tail call i64 @get_frame_size() #7
  tail call void %5(%struct._IO_FILE* %6, i64 %call) #7
  %7 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !1
  %end_epilogue = getelementptr inbounds %struct.gcc_debug_hooks* %7, i64 0, i32 12
  %8 = load void ()** %end_epilogue, align 8, !tbaa !35
  tail call void %8() #7
  %9 = load i32* @write_symbols, align 4, !tbaa !5
  switch i32 %9, label %land.lhs.true2 [
    i32 7, label %if.end
    i32 4, label %if.end
  ]

land.lhs.true2:                                   ; preds = %app_disable.exit
  %call3 = tail call i32 @dwarf2out_do_frame() #7
  %tobool = icmp eq i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true2
  tail call void @dwarf2out_end_epilogue() #7
  br label %if.end

if.end:                                           ; preds = %app_disable.exit, %app_disable.exit, %land.lhs.true2, %if.then
  ret void
}

declare void @dwarf2out_end_epilogue() #1

; Function Attrs: nounwind uwtable
define void @final(%struct.rtx_def* readonly %first, %struct._IO_FILE* %file, i32 %optimize, i32 %prescan) #0 {
entry:
  %tobool85 = icmp eq %struct.rtx_def* %first, null
  br i1 %tobool85, label %for.end40.critedge, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %max_line.087 = phi i32 [ %max_line.1, %for.inc ], [ 0, %entry ]
  %insn.086 = phi %struct.rtx_def* [ %2, %for.inc ], [ %first, %entry ]
  %0 = getelementptr inbounds %struct.rtx_def* %insn.086, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 37
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.086, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtint, align 4, !tbaa !6
  %cmp1 = icmp sgt i32 %1, %max_line.087
  %.max_line.0 = select i1 %cmp1, i32 %1, i32 %max_line.087
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %max_line.1 = phi i32 [ %max_line.087, %for.body ], [ %.max_line.0, %land.lhs.true ]
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %insn.086, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  %add = add nsw i32 %max_line.1, 1
  %conv = sext i32 %add to i64
  %call = tail call noalias i8* @xcalloc(i64 %conv, i64 1) #7
  store i8* %call, i8** @line_note_exists, align 8, !tbaa !1
  br i1 %tobool85, label %for.end40, label %for.body9

for.body9:                                        ; preds = %for.end, %for.inc36
  %insn.183 = phi %struct.rtx_def* [ %6, %for.inc36 ], [ %first, %for.end ]
  %3 = getelementptr inbounds %struct.rtx_def* %insn.183, i64 0, i32 0
  %bf.load20 = load i32* %3, align 8
  %bf.clear21 = and i32 %bf.load20, 65535
  %cmp22 = icmp eq i32 %bf.clear21, 37
  br i1 %cmp22, label %land.lhs.true24, label %for.inc36

land.lhs.true24:                                  ; preds = %for.body9
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %insn.183, i64 0, i32 1, i64 4
  %rtint27 = bitcast %union.rtunion_def* %arrayidx26 to i32*
  %4 = load i32* %rtint27, align 4, !tbaa !6
  %cmp28 = icmp sgt i32 %4, 0
  br i1 %cmp28, label %if.then30, label %for.inc36

if.then30:                                        ; preds = %land.lhs.true24
  %idxprom = sext i32 %4 to i64
  %5 = load i8** @line_note_exists, align 8, !tbaa !1
  %arrayidx34 = getelementptr inbounds i8* %5, i64 %idxprom
  store i8 1, i8* %arrayidx34, align 1, !tbaa !5
  br label %for.inc36

for.inc36:                                        ; preds = %for.body9, %land.lhs.true24, %if.then30
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %insn.183, i64 0, i32 1, i64 2
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx39, align 8, !tbaa !1
  %tobool8 = icmp eq %struct.rtx_def* %6, null
  br i1 %tobool8, label %for.end40, label %for.body9

for.end40.critedge:                               ; preds = %entry
  %call.c = tail call noalias i8* @xcalloc(i64 1, i64 1) #7
  store i8* %call.c, i8** @line_note_exists, align 8, !tbaa !1
  br label %for.end40

for.end40:                                        ; preds = %for.inc36, %for.end40.critedge, %for.end
  tail call void @init_recog() #7
  %arrayidx42 = getelementptr inbounds %struct.rtx_def* %first, i64 0, i32 1, i64 2
  %rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx43, align 8, !tbaa !1
  %tobool4580 = icmp eq %struct.rtx_def* %7, null
  br i1 %tobool4580, label %for.end61, label %for.body46

for.body46:                                       ; preds = %for.end40, %if.end59
  %insn.281 = phi %struct.rtx_def* [ %call60, %if.end59 ], [ %7, %for.end40 ]
  %arrayidx48 = getelementptr inbounds %struct.rtx_def* %insn.281, i64 0, i32 1, i64 0
  %rtint49 = bitcast %union.rtunion_def* %arrayidx48 to i32*
  %8 = load i32* %rtint49, align 4, !tbaa !6
  %conv50 = zext i32 %8 to i64
  %9 = load %struct.varray_head_tag** @insn_addresses_, align 8, !tbaa !1
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %9, i64 0, i32 0
  %10 = load i64* %num_elements, align 8, !tbaa !36
  %cmp51 = icmp ult i64 %conv50, %10
  br i1 %cmp51, label %if.else, label %if.end59

if.else:                                          ; preds = %for.body46
  %idxprom57 = sext i32 %8 to i64
  %data = getelementptr inbounds %struct.varray_head_tag* %9, i64 0, i32 4
  %i = bitcast %union.varray_data_tag* %data to [1 x i32]*
  %arrayidx58 = getelementptr inbounds [1 x i32]* %i, i64 0, i64 %idxprom57
  %11 = load i32* %arrayidx58, align 4, !tbaa !6
  br label %if.end59

if.end59:                                         ; preds = %for.body46, %if.else
  %storemerge = phi i32 [ %11, %if.else ], [ -1, %for.body46 ]
  store i32 %storemerge, i32* @insn_current_address, align 4, !tbaa !6
  %call60 = tail call %struct.rtx_def* @final_scan_insn(%struct.rtx_def* %insn.281, %struct._IO_FILE* %file, i32 undef, i32 %prescan, i32 undef)
  %tobool45 = icmp eq %struct.rtx_def* %call60, null
  br i1 %tobool45, label %for.end61, label %for.body46

for.end61:                                        ; preds = %if.end59, %for.end40
  %12 = load i8** @line_note_exists, align 8, !tbaa !1
  tail call void @free(i8* %12)
  store i8* null, i8** @line_note_exists, align 8, !tbaa !1
  ret void
}

declare void @init_recog() #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @final_scan_insn(%struct.rtx_def* %insn, %struct._IO_FILE* %file, i32 %optimize, i32 %prescan, i32 %nopeepholes) #0 {
entry:
  %0 = load i32* @insn_counter, align 4, !tbaa !6
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @insn_counter, align 4, !tbaa !6
  %1 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 134217728
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  br label %return

if.end:                                           ; preds = %entry
  %bf.clear2 = and i32 %bf.load, 65535
  switch i32 %bf.clear2, label %sw.default295 [
    i32 37, label %sw.bb
    i32 35, label %sw.bb161
    i32 36, label %sw.bb166
  ]

sw.bb:                                            ; preds = %if.end
  %cmp = icmp sgt i32 %prescan, 0
  br i1 %cmp, label %sw.epilog604, label %if.end4

if.end4:                                          ; preds = %sw.bb
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx6 to i32*
  %3 = load i32* %rtint, align 4, !tbaa !6
  switch i32 %3, label %sw.default [
    i32 -99, label %sw.epilog604
    i32 -96, label %sw.epilog604
    i32 -95, label %sw.epilog604
    i32 -92, label %sw.epilog604
    i32 -94, label %sw.epilog604
    i32 -93, label %sw.epilog604
    i32 -91, label %sw.epilog604
    i32 -84, label %sw.epilog604
    i32 -83, label %sw.epilog604
    i32 -82, label %sw.epilog604
    i32 -81, label %sw.epilog604
    i32 -79, label %sw.epilog604
    i32 -80, label %sw.bb8
    i32 -86, label %do.body
    i32 -85, label %do.body20
    i32 -90, label %sw.bb26
    i32 -89, label %sw.bb27
    i32 -87, label %sw.bb28
    i32 -98, label %sw.bb29
    i32 -97, label %sw.bb52
    i32 -88, label %do.body78
    i32 0, label %sw.epilog604
  ]

sw.bb8:                                           ; preds = %if.end4
  %4 = load i32* @flag_debug_asm, align 4, !tbaa !6
  %tobool9 = icmp eq i32 %4, 0
  br i1 %tobool9, label %sw.epilog604, label %if.then10

if.then10:                                        ; preds = %sw.bb8
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %bb = bitcast %union.rtunion_def* %arrayidx12 to %struct.basic_block_def**
  %6 = load %struct.basic_block_def** %bb, align 8, !tbaa !1
  %index = getelementptr inbounds %struct.basic_block_def* %6, i64 0, i32 11
  %7 = load i32* %index, align 4, !tbaa !39
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([20 x i8]* @.str15, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str16, i64 0, i64 0), i32 %7) #7
  br label %sw.epilog604

do.body:                                          ; preds = %if.end4
  %8 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtint17 = bitcast %union.rtunion_def* %arrayidx16 to i32*
  %9 = load i32* %rtint17, align 4, !tbaa !6
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str17, i64 0, i64 0), i32 %9) #7
  br label %sw.epilog604

do.body20:                                        ; preds = %if.end4
  %10 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %arrayidx22 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtint23 = bitcast %union.rtunion_def* %arrayidx22 to i32*
  %11 = load i32* %rtint23, align 4, !tbaa !6
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str18, i64 0, i64 0), i32 %11) #7
  br label %sw.epilog604

sw.bb26:                                          ; preds = %if.end4
  %12 = load void (%struct._IO_FILE*)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 7), align 8, !tbaa !40
  call void %12(%struct._IO_FILE* %file) #7
  %13 = load %struct.function** @cfun, align 8, !tbaa !1
  %profile.i = getelementptr inbounds %struct.function* %13, i64 0, i32 56
  %14 = bitcast i24* %profile.i to i32*
  %bf.load.i = load i32* %14, align 8
  %bf.clear.i = and i32 %bf.load.i, 16384
  %tobool.i = icmp eq i32 %bf.clear.i, 0
  br i1 %tobool.i, label %sw.epilog604, label %if.then.i

if.then.i:                                        ; preds = %sw.bb26
  %bf.clear.i.i = and i32 %bf.load.i, 8
  %15 = load %union.tree_node** @current_function_decl, align 8, !tbaa !1
  call void @function_section(%union.tree_node* %15) #7
  %tobool.i.i = icmp ne i32 %bf.clear.i.i, 0
  br i1 %tobool.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %16 = load i32* @target_flags, align 4, !tbaa !6
  %and.i.i = and i32 %16, 33554432
  %tobool1.i.i = icmp ne i32 %and.i.i, 0
  %idxprom.i.i = select i1 %tobool1.i.i, i64 39, i64 2
  %arrayidx.i.i = getelementptr inbounds [53 x i8*]* @reg_names, i64 0, i64 %idxprom.i.i
  %17 = load i8** %arrayidx.i.i, align 8, !tbaa !1
  call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([16 x i8]* @.str50, i64 0, i64 0), i8* %17) #7
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %if.then.i
  %18 = load i32* @target_flags, align 4, !tbaa !6
  %and2.i.i = and i32 %18, 33554432
  %tobool3.i.i = icmp ne i32 %and2.i.i, 0
  %19 = load i32* @flag_pic, align 4
  %tobool4.i.i = icmp ne i32 %19, 0
  %or.cond.i.i = and i1 %tobool3.i.i, %tobool4.i.i
  br i1 %or.cond.i.i, label %if.then5.i.i, label %if.else.i.i

if.then5.i.i:                                     ; preds = %if.end.i.i
  %20 = call i64 @fwrite(i8* getelementptr inbounds ([19 x i8]* @.str51, i64 0, i64 0), i64 18, i64 1, %struct._IO_FILE* %file) #7
  br label %if.end12.i.i

if.else.i.i:                                      ; preds = %if.end.i.i
  br i1 %tobool4.i.i, label %if.then7.i.i, label %if.else9.i.i

if.then7.i.i:                                     ; preds = %if.else.i.i
  %call8.i.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([26 x i8]* @.str52, i64 0, i64 0)) #7
  br label %if.end12.i.i

if.else9.i.i:                                     ; preds = %if.else.i.i
  %21 = call i64 @fwrite(i8* getelementptr inbounds ([14 x i8]* @.str53, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %file) #7
  br label %if.end12.i.i

if.end12.i.i:                                     ; preds = %if.else9.i.i, %if.then7.i.i, %if.then5.i.i
  br i1 %tobool.i.i, label %if.then14.i.i, label %sw.epilog604

if.then14.i.i:                                    ; preds = %if.end12.i.i
  %22 = load i32* @target_flags, align 4, !tbaa !6
  %and15.i.i = and i32 %22, 33554432
  %tobool16.i.i = icmp ne i32 %and15.i.i, 0
  %idxprom18.i.i = select i1 %tobool16.i.i, i64 39, i64 2
  %arrayidx19.i.i = getelementptr inbounds [53 x i8*]* @reg_names, i64 0, i64 %idxprom18.i.i
  %23 = load i8** %arrayidx19.i.i, align 8, !tbaa !1
  call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([15 x i8]* @.str54, i64 0, i64 0), i8* %23) #7
  br label %sw.epilog604

sw.bb27:                                          ; preds = %if.end4
  %24 = load void (%struct._IO_FILE*)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 8), align 8, !tbaa !41
  call void %24(%struct._IO_FILE* %file) #7
  br label %sw.epilog604

sw.bb28:                                          ; preds = %if.end4
  %.b.i = load i1* @app_on, align 1
  br i1 %.b.i, label %if.then.i760, label %app_disable.exit

if.then.i760:                                     ; preds = %sw.bb28
  %25 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %26 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str13, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %25) #7
  store i1 false, i1* @app_on, align 1
  br label %app_disable.exit

app_disable.exit:                                 ; preds = %sw.bb28, %if.then.i760
  %27 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !1
  %end_prologue = getelementptr inbounds %struct.gcc_debug_hooks* %27, i64 0, i32 11
  %28 = load void (i32)** %end_prologue, align 8, !tbaa !42
  %29 = load i32* @last_linenum, align 4, !tbaa !6
  call void %28(i32 %29) #7
  br label %sw.epilog604

sw.bb29:                                          ; preds = %if.end4
  %30 = load i32* @debug_info_level, align 4, !tbaa !5
  %31 = and i32 %30, -2
  %32 = icmp eq i32 %31, 2
  %33 = load i32* @write_symbols, align 4
  %cmp33 = icmp eq i32 %33, 3
  %or.cond608 = or i1 %32, %cmp33
  %cmp35 = icmp eq i32 %33, 4
  %or.cond609 = or i1 %or.cond608, %cmp35
  %cmp37 = icmp eq i32 %33, 7
  %or.cond610 = or i1 %or.cond609, %cmp37
  %cmp39 = icmp eq i32 %33, 6
  %or.cond611 = or i1 %or.cond610, %cmp39
  br i1 %or.cond611, label %if.then40, label %sw.epilog604

if.then40:                                        ; preds = %sw.bb29
  %arrayidx42 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rttree = bitcast %union.rtunion_def* %arrayidx42 to %union.tree_node**
  %34 = load %union.tree_node** %rttree, align 8, !tbaa !1
  %block_num = getelementptr inbounds %union.tree_node* %34, i64 0, i32 0, i32 1
  %35 = bitcast i8** %block_num to i32*
  %bf.load43 = load i32* %35, align 8
  %bf.lshr44 = lshr i32 %bf.load43, 2
  %.b.i761 = load i1* @app_on, align 1
  br i1 %.b.i761, label %if.then.i762, label %app_disable.exit763

if.then.i762:                                     ; preds = %if.then40
  %36 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %37 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str13, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %36) #7
  store i1 false, i1* @app_on, align 1
  br label %app_disable.exit763

app_disable.exit763:                              ; preds = %if.then40, %if.then.i762
  %38 = load i32* @block_depth, align 4, !tbaa !6
  %inc45 = add nsw i32 %38, 1
  store i32 %inc45, i32* @block_depth, align 4, !tbaa !6
  %39 = load i32* @last_linenum, align 4, !tbaa !6
  store i32 %39, i32* @high_block_linenum, align 4, !tbaa !6
  %40 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !1
  %begin_block = getelementptr inbounds %struct.gcc_debug_hooks* %40, i64 0, i32 6
  %41 = load void (i32, i32)** %begin_block, align 8, !tbaa !43
  call void %41(i32 %39, i32 %bf.lshr44) #7
  %42 = load %union.tree_node** %rttree, align 8, !tbaa !1
  %asm_written_flag = getelementptr inbounds %union.tree_node* %42, i64 0, i32 0, i32 0, i32 2
  %bf.load49 = load i32* %asm_written_flag, align 8
  %bf.set = or i32 %bf.load49, 16384
  store i32 %bf.set, i32* %asm_written_flag, align 8
  br label %sw.epilog604

sw.bb52:                                          ; preds = %if.end4
  %43 = load i32* @debug_info_level, align 4, !tbaa !5
  %44 = and i32 %43, -2
  %45 = icmp eq i32 %44, 2
  %46 = load i32* @write_symbols, align 4
  %cmp57 = icmp eq i32 %46, 3
  %or.cond613 = or i1 %45, %cmp57
  %cmp59 = icmp eq i32 %46, 4
  %or.cond614 = or i1 %or.cond613, %cmp59
  %cmp61 = icmp eq i32 %46, 7
  %or.cond615 = or i1 %or.cond614, %cmp61
  %cmp63 = icmp eq i32 %46, 6
  %or.cond616 = or i1 %or.cond615, %cmp63
  br i1 %or.cond616, label %if.then64, label %sw.epilog604

if.then64:                                        ; preds = %sw.bb52
  %arrayidx67 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rttree68 = bitcast %union.rtunion_def* %arrayidx67 to %union.tree_node**
  %47 = load %union.tree_node** %rttree68, align 8, !tbaa !1
  %block_num70 = getelementptr inbounds %union.tree_node* %47, i64 0, i32 0, i32 1
  %48 = bitcast i8** %block_num70 to i32*
  %bf.load71 = load i32* %48, align 8
  %.b.i764 = load i1* @app_on, align 1
  br i1 %.b.i764, label %if.then.i765, label %app_disable.exit766

if.then.i765:                                     ; preds = %if.then64
  %49 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %50 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str13, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %49) #7
  store i1 false, i1* @app_on, align 1
  br label %app_disable.exit766

app_disable.exit766:                              ; preds = %if.then64, %if.then.i765
  %51 = load i32* @block_depth, align 4, !tbaa !6
  %dec = add nsw i32 %51, -1
  store i32 %dec, i32* @block_depth, align 4, !tbaa !6
  %cmp73 = icmp slt i32 %51, 1
  br i1 %cmp73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %app_disable.exit766
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 1929, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.final_scan_insn, i64 0, i64 0)) #8
  unreachable

if.end75:                                         ; preds = %app_disable.exit766
  %bf.lshr72 = lshr i32 %bf.load71, 2
  %52 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !1
  %end_block = getelementptr inbounds %struct.gcc_debug_hooks* %52, i64 0, i32 7
  %53 = load void (i32, i32)** %end_block, align 8, !tbaa !44
  %54 = load i32* @high_block_linenum, align 4, !tbaa !6
  call void %53(i32 %54, i32 %bf.lshr72) #7
  br label %sw.epilog604

do.body78:                                        ; preds = %if.end4
  %arrayidx80 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 5
  %rtint81 = bitcast %union.rtunion_def* %arrayidx80 to i32*
  %55 = load i32* %rtint81, align 4, !tbaa !6
  %call82 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str19, i64 0, i64 0), i32 %55) #7
  br label %sw.epilog604

sw.default:                                       ; preds = %if.end4
  %cmp87 = icmp slt i32 %3, 1
  br i1 %cmp87, label %if.then88, label %for.cond.preheader

for.cond.preheader:                               ; preds = %sw.default
  %note.0.in.in782 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %note.0.in783 = bitcast %union.rtunion_def* %note.0.in.in782 to %struct.rtx_def**
  %note.0784 = load %struct.rtx_def** %note.0.in783, align 8
  %tobool93785 = icmp eq %struct.rtx_def* %note.0784, null
  br i1 %tobool93785, label %if.then159, label %for.body

if.then88:                                        ; preds = %sw.default
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 1947, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.final_scan_insn, i64 0, i64 0)) #8
  unreachable

for.body:                                         ; preds = %for.cond.preheader, %for.cond.backedge
  %note.0786 = phi %struct.rtx_def* [ %note.0, %for.cond.backedge ], [ %note.0784, %for.cond.preheader ]
  %56 = getelementptr inbounds %struct.rtx_def* %note.0786, i64 0, i32 0
  %bf.load94 = load i32* %56, align 8
  %57 = and i32 %bf.load94, 65534
  %switch = icmp eq i32 %57, 36
  br i1 %switch, label %if.else, label %if.then159

if.else:                                          ; preds = %for.body
  %bf.clear95 = and i32 %bf.load94, 65535
  %cmp103 = icmp eq i32 %bf.clear95, 37
  br i1 %cmp103, label %land.lhs.true104, label %for.cond.backedge

land.lhs.true104:                                 ; preds = %if.else
  %arrayidx106 = getelementptr inbounds %struct.rtx_def* %note.0786, i64 0, i32 1, i64 4
  %rtint107 = bitcast %union.rtunion_def* %arrayidx106 to i32*
  %58 = load i32* %rtint107, align 4, !tbaa !6
  switch i32 %58, label %land.lhs.true124 [
    i32 -98, label %if.then159
    i32 -97, label %if.then159
    i32 -87, label %if.then159
  ]

for.cond.backedge:                                ; preds = %if.else, %land.lhs.true124
  %note.0.in.in = getelementptr inbounds %struct.rtx_def* %note.0786, i64 0, i32 1, i64 2
  %note.0.in = bitcast %union.rtunion_def* %note.0.in.in to %struct.rtx_def**
  %note.0 = load %struct.rtx_def** %note.0.in, align 8
  %tobool93 = icmp eq %struct.rtx_def* %note.0, null
  br i1 %tobool93, label %if.then159, label %for.body

land.lhs.true124:                                 ; preds = %land.lhs.true104
  %arrayidx126 = getelementptr inbounds %struct.rtx_def* %note.0786, i64 0, i32 1, i64 4
  %rtint127 = bitcast %union.rtunion_def* %arrayidx126 to i32*
  %59 = load i32* %rtint127, align 4, !tbaa !6
  %cmp128 = icmp sgt i32 %59, 0
  br i1 %cmp128, label %if.then129, label %for.cond.backedge

if.then129:                                       ; preds = %land.lhs.true124
  %60 = load i8** @line_note_exists, align 8, !tbaa !1
  %61 = sext i32 %3 to i64
  br label %for.cond133

for.cond133:                                      ; preds = %for.body138, %if.then129
  %indvars.iv791 = phi i64 [ %indvars.iv.next792, %for.body138 ], [ %61, %if.then129 ]
  %indvars.iv.next792 = add nsw i64 %indvars.iv791, 1
  %62 = trunc i64 %indvars.iv.next792 to i32
  %cmp137 = icmp slt i32 %62, %59
  br i1 %cmp137, label %for.body138, label %sw.epilog604

for.body138:                                      ; preds = %for.cond133
  %arrayidx139 = getelementptr inbounds i8* %60, i64 %indvars.iv.next792
  %63 = load i8* %arrayidx139, align 1, !tbaa !5
  %tobool140 = icmp eq i8 %63, 0
  br i1 %tobool140, label %for.cond133, label %if.then159

if.then159:                                       ; preds = %land.lhs.true104, %land.lhs.true104, %land.lhs.true104, %for.cond.backedge, %for.body, %for.body138, %for.cond.preheader
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %64 = load i8** %rtstr.i, align 8, !tbaa !1
  store i8* %64, i8** @last_filename, align 8, !tbaa !1
  store i32 %3, i32* @last_linenum, align 4, !tbaa !6
  %65 = load i32* @high_block_linenum, align 4, !tbaa !6
  %cmp.i = icmp sgt i32 %3, %65
  %cond.i = select i1 %cmp.i, i32 %3, i32 %65
  store i32 %cond.i, i32* @high_block_linenum, align 4, !tbaa !6
  %66 = load i32* @high_function_linenum, align 4, !tbaa !6
  %cmp3.i = icmp sgt i32 %3, %66
  %cond7.i = select i1 %cmp3.i, i32 %3, i32 %66
  store i32 %cond7.i, i32* @high_function_linenum, align 4, !tbaa !6
  %67 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !1
  %source_line = getelementptr inbounds %struct.gcc_debug_hooks* %67, i64 0, i32 9
  %68 = load void (i32, i8*)** %source_line, align 8, !tbaa !45
  call void %68(i32 %3, i8* %64) #7
  br label %sw.epilog604

sw.bb161:                                         ; preds = %if.end
  %call162 = call i32 @dwarf2out_do_frame() #7
  %tobool163 = icmp eq i32 %call162, 0
  br i1 %tobool163, label %sw.epilog604, label %if.then164

if.then164:                                       ; preds = %sw.bb161
  call void @dwarf2out_frame_debug(%struct.rtx_def* %insn) #7
  br label %sw.epilog604

sw.bb166:                                         ; preds = %if.end
  %arrayidx168 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 5
  %rtint169 = bitcast %union.rtunion_def* %arrayidx168 to i32*
  %69 = load i32* %rtint169, align 4, !tbaa !6
  %70 = load i32* @max_labelno, align 4, !tbaa !6
  %cmp170 = icmp sgt i32 %69, %70
  br i1 %cmp170, label %if.end206, label %if.then171

if.then171:                                       ; preds = %sw.bb166
  %71 = load i32* @min_labelno, align 4, !tbaa !6
  %sub = sub nsw i32 %69, %71
  %idxprom175 = sext i32 %sub to i64
  %72 = load %struct.label_alignment** @label_align, align 8, !tbaa !1
  %alignment = getelementptr inbounds %struct.label_alignment* %72, i64 %idxprom175, i32 0
  %73 = load i16* %alignment, align 2, !tbaa !10
  %conv = sext i16 %73 to i32
  %max_skip183 = getelementptr inbounds %struct.label_alignment* %72, i64 %idxprom175, i32 1
  %74 = load i16* %max_skip183, align 2, !tbaa !21
  %conv184 = sext i16 %74 to i32
  %tobool185 = icmp eq i16 %73, 0
  br i1 %tobool185, label %if.end206, label %land.lhs.true186

land.lhs.true186:                                 ; preds = %if.then171
  %arrayidx188 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx189 = bitcast %union.rtunion_def* %arrayidx188 to %struct.rtx_def**
  %75 = load %struct.rtx_def** %rtx189, align 8, !tbaa !1
  %tobool190 = icmp eq %struct.rtx_def* %75, null
  br i1 %tobool190, label %if.end206, label %if.then195

if.then195:                                       ; preds = %land.lhs.true186
  %cmp196 = icmp eq i16 %74, 0
  br i1 %cmp196, label %if.then198, label %if.else200

if.then198:                                       ; preds = %if.then195
  %call199 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([14 x i8]* @.str20, i64 0, i64 0), i32 %conv) #7
  br label %if.end206

if.else200:                                       ; preds = %if.then195
  %call201 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([18 x i8]* @.str21, i64 0, i64 0), i32 %conv, i32 %conv184) #7
  br label %if.end206

if.end206:                                        ; preds = %land.lhs.true186, %if.then171, %sw.bb166, %if.else200, %if.then198
  %cmp207 = icmp sgt i32 %prescan, 0
  br i1 %cmp207, label %sw.epilog604, label %if.end210

if.end210:                                        ; preds = %if.end206
  %arrayidx212 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %rtstr = bitcast %union.rtunion_def* %arrayidx212 to i8**
  %76 = load i8** %rtstr, align 8, !tbaa !1
  %tobool213 = icmp eq i8* %76, null
  br i1 %tobool213, label %if.end215, label %if.then214

if.then214:                                       ; preds = %if.end210
  %77 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !1
  %label = getelementptr inbounds %struct.gcc_debug_hooks* %77, i64 0, i32 19
  %78 = load void (%struct.rtx_def*)** %label, align 8, !tbaa !46
  call void %78(%struct.rtx_def* %insn) #7
  br label %if.end215

if.end215:                                        ; preds = %if.end210, %if.then214
  %.b756 = load i1* @app_on, align 1
  br i1 %.b756, label %if.then217, label %if.end219

if.then217:                                       ; preds = %if.end215
  %79 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str13, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %file)
  store i1 false, i1* @app_on, align 1
  br label %if.end219

if.end219:                                        ; preds = %if.then217, %if.end215
  %arrayidx221 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx222 = bitcast %union.rtunion_def* %arrayidx221 to %struct.rtx_def**
  %80 = load %struct.rtx_def** %rtx222, align 8, !tbaa !1
  %cmp223 = icmp eq %struct.rtx_def* %80, null
  br i1 %cmp223, label %if.end275, label %land.lhs.true225

land.lhs.true225:                                 ; preds = %if.end219
  %81 = getelementptr inbounds %struct.rtx_def* %80, i64 0, i32 0
  %bf.load229 = load i32* %81, align 8
  %bf.clear230 = and i32 %bf.load229, 65535
  %cmp231 = icmp eq i32 %bf.clear230, 33
  br i1 %cmp231, label %if.then233, label %if.end275

if.then233:                                       ; preds = %land.lhs.true225
  %arrayidx238 = getelementptr inbounds %struct.rtx_def* %80, i64 0, i32 1, i64 3
  %rtx239 = bitcast %union.rtunion_def* %arrayidx238 to %struct.rtx_def**
  %82 = load %struct.rtx_def** %rtx239, align 8, !tbaa !1
  %83 = getelementptr inbounds %struct.rtx_def* %82, i64 0, i32 0
  %bf.load240 = load i32* %83, align 8
  %84 = and i32 %bf.load240, 65534
  %switch759 = icmp eq i32 %84, 44
  br i1 %switch759, label %if.then249, label %if.end275

if.then249:                                       ; preds = %if.then233
  %85 = load i32* @target_flags, align 4, !tbaa !6
  %and = and i32 %85, 33554432
  %tobool250 = icmp eq i32 %and, 0
  %86 = load i32* @flag_pic, align 4
  %tobool252 = icmp ne i32 %86, 0
  %or.cond617 = and i1 %tobool250, %tobool252
  br i1 %or.cond617, label %if.else263, label %if.then253

if.then253:                                       ; preds = %if.then249
  call void @readonly_data_section() #7
  %87 = load %struct.rtx_def** %rtx222, align 8, !tbaa !1
  %arrayidx.i767 = getelementptr inbounds %struct.rtx_def* %87, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i767 to %struct.rtx_def**
  %88 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  %89 = getelementptr inbounds %struct.rtx_def* %88, i64 0, i32 0
  %bf.load.i768 = load i32* %89, align 8
  %bf.lshr.i = lshr i32 %bf.load.i768, 16
  %bf.clear.i769 = and i32 %bf.lshr.i, 255
  %idxprom5.i = zext i32 %bf.clear.i769 to i64
  %arrayidx1.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom5.i
  %90 = load i8* %arrayidx1.i, align 1, !tbaa !5
  %cmp.i770 = icmp ugt i8 %90, 16
  %91 = zext i8 %90 to i64
  %conv3.i = select i1 %cmp.i770, i64 16, i64 %91
  %call.i = call i32 @exact_log2_wide(i64 %conv3.i) #7
  %cmp258 = icmp eq i32 %call.i, 0
  br i1 %cmp258, label %do.body265, label %if.then260

if.then260:                                       ; preds = %if.then253
  %shl = shl i32 1, %call.i
  %call261 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([12 x i8]* @.str1, i64 0, i64 0), i32 %shl) #7
  br label %do.body265

if.else263:                                       ; preds = %if.then249
  %92 = load %union.tree_node** @current_function_decl, align 8, !tbaa !1
  call void @function_section(%union.tree_node* %92) #7
  br label %do.body265

do.body265:                                       ; preds = %if.then253, %if.else263, %if.then260
  %call266 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([12 x i8]* @.str1, i64 0, i64 0), i32 4) #7
  %93 = load i32* %rtint169, align 4, !tbaa !6
  %call271 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str19, i64 0, i64 0), i32 %93) #7
  br label %sw.epilog604

if.end275:                                        ; preds = %if.then233, %if.end219, %land.lhs.true225
  %arrayidx277 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 7
  %rtstr278 = bitcast %union.rtunion_def* %arrayidx277 to i8**
  %94 = load i8** %rtstr278, align 8, !tbaa !1
  %tobool279 = icmp eq i8* %94, null
  br i1 %tobool279, label %do.body288, label %do.body281

do.body281:                                       ; preds = %if.end275
  call void @assemble_name(%struct._IO_FILE* %file, i8* %94) #7
  %95 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str22, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %file)
  br label %sw.epilog604

do.body288:                                       ; preds = %if.end275
  %96 = load i32* %rtint169, align 4, !tbaa !6
  %call292 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str19, i64 0, i64 0), i32 %96) #7
  br label %sw.epilog604

sw.default295:                                    ; preds = %if.end
  %arrayidx297 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx298 = bitcast %union.rtunion_def* %arrayidx297 to %struct.rtx_def**
  %97 = load %struct.rtx_def** %rtx298, align 8, !tbaa !1
  %98 = getelementptr inbounds %struct.rtx_def* %97, i64 0, i32 0
  %bf.load300 = load i32* %98, align 8
  %bf.clear301 = and i32 %bf.load300, 65535
  switch i32 %bf.clear301, label %if.end404 [
    i32 48, label %sw.epilog604
    i32 49, label %sw.epilog604
    i32 44, label %if.then320
    i32 45, label %if.then320
    i32 40, label %if.then387
  ]

if.then320:                                       ; preds = %sw.default295, %sw.default295
  %cmp321 = icmp sgt i32 %prescan, 0
  br i1 %cmp321, label %sw.epilog604, label %if.end324

if.end324:                                        ; preds = %if.then320
  %.b755 = load i1* @app_on, align 1
  br i1 %.b755, label %if.then326, label %if.end328

if.then326:                                       ; preds = %if.end324
  %99 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str13, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %file)
  store i1 false, i1* @app_on, align 1
  %bf.load329.pre = load i32* %98, align 8
  br label %if.end328

if.end328:                                        ; preds = %if.then326, %if.end324
  %bf.load329 = phi i32 [ %bf.load329.pre, %if.then326 ], [ %bf.load300, %if.end324 ]
  %bf.clear330 = and i32 %bf.load329, 65535
  %cmp331 = icmp eq i32 %bf.clear330, 45
  %idxprom333 = zext i1 %cmp331 to i64
  %fld334 = getelementptr inbounds %struct.rtx_def* %97, i64 0, i32 1
  %arrayidx335 = getelementptr inbounds %struct.rtx_def* %97, i64 0, i32 1, i64 %idxprom333
  %rtvec = bitcast %union.rtunion_def* %arrayidx335 to %struct.rtvec_def**
  %100 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %num_elem = getelementptr inbounds %struct.rtvec_def* %100, i64 0, i32 0
  %101 = load i32* %num_elem, align 4, !tbaa !8
  %cmp337780 = icmp sgt i32 %101, 0
  br i1 %cmp337780, label %for.body339.lr.ph, label %for.end381

for.body339.lr.ph:                                ; preds = %if.end328
  %rtvec348 = bitcast [1 x %union.rtunion_def]* %fld334 to %struct.rtvec_def**
  %arrayidx359 = getelementptr inbounds %struct.rtx_def* %97, i64 0, i32 1, i64 1
  %rtvec360 = bitcast %union.rtunion_def* %arrayidx359 to %struct.rtvec_def**
  %rtx371 = bitcast [1 x %union.rtunion_def]* %fld334 to %struct.rtx_def**
  br label %for.body339

for.body339:                                      ; preds = %for.inc379.for.body339_crit_edge, %for.body339.lr.ph
  %bf.load340 = phi i32 [ %bf.load329, %for.body339.lr.ph ], [ %bf.load340.pre, %for.inc379.for.body339_crit_edge ]
  %indvars.iv789 = phi i64 [ 0, %for.body339.lr.ph ], [ %indvars.iv.next790, %for.inc379.for.body339_crit_edge ]
  %bf.clear341 = and i32 %bf.load340, 65535
  %cmp342 = icmp eq i32 %bf.clear341, 44
  br i1 %cmp342, label %if.then344, label %if.else356

if.then344:                                       ; preds = %for.body339
  %102 = load %struct.rtvec_def** %rtvec348, align 8, !tbaa !1
  %arrayidx349 = getelementptr inbounds %struct.rtvec_def* %102, i64 0, i32 1, i64 %indvars.iv789
  %103 = load %struct.rtx_def** %arrayidx349, align 8, !tbaa !1
  %arrayidx351 = getelementptr inbounds %struct.rtx_def* %103, i64 0, i32 1, i64 0
  %rtx352 = bitcast %union.rtunion_def* %arrayidx351 to %struct.rtx_def**
  %104 = load %struct.rtx_def** %rtx352, align 8, !tbaa !1
  %arrayidx354 = getelementptr inbounds %struct.rtx_def* %104, i64 0, i32 1, i64 5
  %rtint355 = bitcast %union.rtunion_def* %arrayidx354 to i32*
  %105 = load i32* %rtint355, align 4, !tbaa !6
  call void @ix86_output_addr_vec_elt(%struct._IO_FILE* %file, i32 %105) #7
  br label %for.inc379

if.else356:                                       ; preds = %for.body339
  %106 = load %struct.rtvec_def** %rtvec360, align 8, !tbaa !1
  %arrayidx362 = getelementptr inbounds %struct.rtvec_def* %106, i64 0, i32 1, i64 %indvars.iv789
  %107 = load %struct.rtx_def** %arrayidx362, align 8, !tbaa !1
  %arrayidx364 = getelementptr inbounds %struct.rtx_def* %107, i64 0, i32 1, i64 0
  %rtx365 = bitcast %union.rtunion_def* %arrayidx364 to %struct.rtx_def**
  %108 = load %struct.rtx_def** %rtx365, align 8, !tbaa !1
  %arrayidx367 = getelementptr inbounds %struct.rtx_def* %108, i64 0, i32 1, i64 5
  %rtint368 = bitcast %union.rtunion_def* %arrayidx367 to i32*
  %109 = load i32* %rtint368, align 4, !tbaa !6
  %110 = load %struct.rtx_def** %rtx371, align 8, !tbaa !1
  %arrayidx373 = getelementptr inbounds %struct.rtx_def* %110, i64 0, i32 1, i64 0
  %rtx374 = bitcast %union.rtunion_def* %arrayidx373 to %struct.rtx_def**
  %111 = load %struct.rtx_def** %rtx374, align 8, !tbaa !1
  %arrayidx376 = getelementptr inbounds %struct.rtx_def* %111, i64 0, i32 1, i64 5
  %rtint377 = bitcast %union.rtunion_def* %arrayidx376 to i32*
  %112 = load i32* %rtint377, align 4, !tbaa !6
  call void @ix86_output_addr_diff_elt(%struct._IO_FILE* %file, i32 %109, i32 %112) #7
  br label %for.inc379

for.inc379:                                       ; preds = %if.then344, %if.else356
  %indvars.iv.next790 = add nuw nsw i64 %indvars.iv789, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next790 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %101
  br i1 %exitcond, label %for.end381, label %for.inc379.for.body339_crit_edge

for.inc379.for.body339_crit_edge:                 ; preds = %for.inc379
  %bf.load340.pre = load i32* %98, align 8
  br label %for.body339

for.end381:                                       ; preds = %for.inc379, %if.end328
  %113 = load %union.tree_node** @current_function_decl, align 8, !tbaa !1
  call void @function_section(%union.tree_node* %113) #7
  br label %sw.epilog604

if.then387:                                       ; preds = %sw.default295
  %arrayidx389 = getelementptr inbounds %struct.rtx_def* %97, i64 0, i32 1, i64 0
  %rtstr390 = bitcast %union.rtunion_def* %arrayidx389 to i8**
  %114 = load i8** %rtstr390, align 8, !tbaa !1
  %cmp391 = icmp sgt i32 %prescan, 0
  br i1 %cmp391, label %sw.epilog604, label %if.end394

if.end394:                                        ; preds = %if.then387
  %115 = load i8* %114, align 1, !tbaa !5
  %tobool396 = icmp eq i8 %115, 0
  br i1 %tobool396, label %sw.epilog604, label %if.then397

if.then397:                                       ; preds = %if.end394
  %.b754 = load i1* @app_on, align 1
  br i1 %.b754, label %if.end401, label %if.then399

if.then399:                                       ; preds = %if.then397
  %116 = call i64 @fwrite(i8* getelementptr inbounds ([6 x i8]* @.str12, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %file)
  store i1 true, i1* @app_on, align 1
  br label %if.end401

if.end401:                                        ; preds = %if.then399, %if.then397
  %117 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call402 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %117, i8* getelementptr inbounds ([5 x i8]* @.str23, i64 0, i64 0), i8* %114) #7
  br label %sw.epilog604

if.end404:                                        ; preds = %sw.default295
  %call405 = call i32 @asm_noperands(%struct.rtx_def* %97) #7
  %cmp406 = icmp sgt i32 %call405, -1
  br i1 %cmp406, label %if.then408, label %if.end425

if.then408:                                       ; preds = %if.end404
  %call409 = call i32 @asm_noperands(%struct.rtx_def* %97) #7
  %conv410 = zext i32 %call409 to i64
  %118 = alloca %struct.rtx_def*, i64 %conv410, align 1
  %cmp412 = icmp sgt i32 %prescan, 0
  br i1 %cmp412, label %sw.epilog604, label %if.end415

if.end415:                                        ; preds = %if.then408
  %call416 = call i8* @decode_asm_operands(%struct.rtx_def* %97, %struct.rtx_def** %118, %struct.rtx_def*** null, i8** null, i32* null) #7
  store i32 %call409, i32* @insn_noperands, align 4, !tbaa !6
  store %struct.rtx_def* %insn, %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !1
  %119 = load i8* %call416, align 1, !tbaa !5
  %tobool418 = icmp eq i8 %119, 0
  br i1 %tobool418, label %if.end424, label %if.then419

if.then419:                                       ; preds = %if.end415
  %.b753 = load i1* @app_on, align 1
  br i1 %.b753, label %if.end423, label %if.then421

if.then421:                                       ; preds = %if.then419
  %120 = call i64 @fwrite(i8* getelementptr inbounds ([6 x i8]* @.str12, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %file)
  store i1 true, i1* @app_on, align 1
  br label %if.end423

if.end423:                                        ; preds = %if.then421, %if.then419
  call void @output_asm_insn(i8* %call416, %struct.rtx_def** %118)
  br label %if.end424

if.end424:                                        ; preds = %if.end415, %if.end423
  store %struct.rtx_def* null, %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !1
  br label %sw.epilog604

if.end425:                                        ; preds = %if.end404
  %cmp426 = icmp slt i32 %prescan, 1
  %.b = load i1* @app_on, align 1
  %or.cond618 = and i1 %cmp426, %.b
  br i1 %or.cond618, label %if.then430, label %if.end432

if.then430:                                       ; preds = %if.end425
  %121 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str13, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %file)
  store i1 false, i1* @app_on, align 1
  br label %if.end432

if.end432:                                        ; preds = %if.then430, %if.end425
  %bf.load433 = load i32* %98, align 8
  %bf.clear434 = and i32 %bf.load433, 65535
  %cmp435 = icmp eq i32 %bf.clear434, 24
  br i1 %cmp435, label %if.then437, label %if.end495

if.then437:                                       ; preds = %if.end432
  %cmp438 = icmp sgt i32 %prescan, 0
  br i1 %cmp438, label %sw.epilog604, label %if.end441

if.end441:                                        ; preds = %if.then437
  store %struct.rtx_def* %97, %struct.rtx_def** @final_sequence, align 8, !tbaa !1
  %arrayidx443 = getelementptr inbounds %struct.rtx_def* %97, i64 0, i32 1, i64 0
  %rtvec444 = bitcast %union.rtunion_def* %arrayidx443 to %struct.rtvec_def**
  %122 = load %struct.rtvec_def** %rtvec444, align 8, !tbaa !1
  %arrayidx446 = getelementptr inbounds %struct.rtvec_def* %122, i64 0, i32 1, i64 0
  %123 = load %struct.rtx_def** %arrayidx446, align 8, !tbaa !1
  %call447 = call %struct.rtx_def* @final_scan_insn(%struct.rtx_def* %123, %struct._IO_FILE* %file, i32 undef, i32 %prescan, i32 undef)
  %124 = load %struct.rtvec_def** %rtvec444, align 8, !tbaa !1
  %arrayidx452 = getelementptr inbounds %struct.rtvec_def* %124, i64 0, i32 1, i64 1
  %125 = load %struct.rtx_def** %arrayidx452, align 8, !tbaa !1
  %cmp453 = icmp eq %struct.rtx_def* %call447, %125
  br i1 %cmp453, label %for.cond457.preheader, label %if.then455

for.cond457.preheader:                            ; preds = %if.end441
  %num_elem461775 = getelementptr inbounds %struct.rtvec_def* %124, i64 0, i32 0
  %126 = load i32* %num_elem461775, align 4, !tbaa !8
  %cmp462776 = icmp sgt i32 %126, 1
  br i1 %cmp462776, label %for.body464, label %for.end483

if.then455:                                       ; preds = %if.end441
  store %struct.rtx_def* null, %struct.rtx_def** @final_sequence, align 8, !tbaa !1
  br label %return

for.body464:                                      ; preds = %for.cond457.preheader, %for.inc481.for.body464_crit_edge
  %127 = phi %struct.rtx_def* [ %.pre, %for.inc481.for.body464_crit_edge ], [ %call447, %for.cond457.preheader ]
  %indvars.iv = phi i64 [ %phitmp, %for.inc481.for.body464_crit_edge ], [ 2, %for.cond457.preheader ]
  %arrayidx474 = getelementptr inbounds %struct.rtx_def* %127, i64 0, i32 1, i64 2
  %rtx475 = bitcast %union.rtunion_def* %arrayidx474 to %struct.rtx_def**
  %128 = load %struct.rtx_def** %rtx475, align 8, !tbaa !1
  br label %do.body476

do.body476:                                       ; preds = %do.body476, %for.body464
  %insn465.0 = phi %struct.rtx_def* [ %127, %for.body464 ], [ %call477, %do.body476 ]
  %call477 = call %struct.rtx_def* @final_scan_insn(%struct.rtx_def* %insn465.0, %struct._IO_FILE* %file, i32 undef, i32 %prescan, i32 undef)
  %cmp478 = icmp eq %struct.rtx_def* %call477, %128
  br i1 %cmp478, label %for.inc481, label %do.body476

for.inc481:                                       ; preds = %do.body476
  %129 = load %struct.rtvec_def** %rtvec444, align 8, !tbaa !1
  %num_elem461 = getelementptr inbounds %struct.rtvec_def* %129, i64 0, i32 0
  %130 = load i32* %num_elem461, align 4, !tbaa !8
  %131 = trunc i64 %indvars.iv to i32
  %cmp462 = icmp slt i32 %131, %130
  br i1 %cmp462, label %for.inc481.for.body464_crit_edge, label %for.end483

for.inc481.for.body464_crit_edge:                 ; preds = %for.inc481
  %arrayidx471.phi.trans.insert = getelementptr inbounds %struct.rtvec_def* %129, i64 0, i32 1, i64 %indvars.iv
  %.pre = load %struct.rtx_def** %arrayidx471.phi.trans.insert, align 8, !tbaa !1
  %phitmp = add i64 %indvars.iv, 1
  br label %for.body464

for.end483:                                       ; preds = %for.inc481, %for.cond457.preheader
  store %struct.rtx_def* null, %struct.rtx_def** @final_sequence, align 8, !tbaa !1
  br label %sw.epilog604

if.end495:                                        ; preds = %if.end432
  %132 = load %struct.rtx_def** %rtx298, align 8, !tbaa !1
  %arrayidx500 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 4
  %rtint501 = bitcast %union.rtunion_def* %arrayidx500 to i32*
  %133 = load i32* %rtint501, align 4, !tbaa !6
  %cmp502 = icmp sgt i32 %133, -1
  br i1 %cmp502, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.end495
  %call507 = call i32 @recog_memoized_1(%struct.rtx_def* %insn) #7
  br label %cond.end

cond.end:                                         ; preds = %if.end495, %cond.false
  %cond = phi i32 [ %call507, %cond.false ], [ %133, %if.end495 ]
  call void @cleanup_subreg_operands(%struct.rtx_def* %insn)
  %134 = load i32* @flag_dump_rtl_in_asm, align 4, !tbaa !6
  %tobool508 = icmp eq i32 %134, 0
  br i1 %tobool508, label %if.end511, label %if.then509

if.then509:                                       ; preds = %cond.end
  store i8* getelementptr inbounds ([2 x i8]* @.str16, i64 0, i64 0), i8** @print_rtx_head, align 8, !tbaa !1
  %135 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call510 = call i32 @print_rtl_single(%struct._IO_FILE* %135, %struct.rtx_def* %insn) #7
  store i8* getelementptr inbounds ([1 x i8]* @.str24, i64 0, i64 0), i8** @print_rtx_head, align 8, !tbaa !1
  br label %if.end511

if.end511:                                        ; preds = %cond.end, %if.then509
  %call512 = call i32 @constrain_operands_cached(i32 1) #7
  %tobool513 = icmp eq i32 %call512, 0
  br i1 %tobool513, label %if.then514, label %if.end515

if.then514:                                       ; preds = %if.end511
  call void @_fatal_insn_not_found(%struct.rtx_def* %insn, i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2551, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.final_scan_insn, i64 0, i64 0)) #8
  unreachable

if.end515:                                        ; preds = %if.end511
  store %struct.rtx_def* %insn, %struct.rtx_def** @debug_insn, align 8, !tbaa !1
  store %struct.rtx_def* %insn, %struct.rtx_def** @current_output_insn, align 8, !tbaa !1
  %bf.load516 = load i32* %1, align 8
  %bf.clear517 = and i32 %bf.load516, 65535
  %cmp518 = icmp eq i32 %bf.clear517, 34
  br i1 %cmp518, label %land.lhs.true520, label %if.end524

land.lhs.true520:                                 ; preds = %if.end515
  %call521 = call i32 @dwarf2out_do_frame() #7
  %tobool522 = icmp eq i32 %call521, 0
  br i1 %tobool522, label %if.end524, label %if.then523

if.then523:                                       ; preds = %land.lhs.true520
  call void @dwarf2out_frame_debug(%struct.rtx_def* %insn) #7
  br label %if.end524

if.end524:                                        ; preds = %land.lhs.true520, %if.then523, %if.end515
  %idxprom.i = sext i32 %cond to i64
  %output1.i = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom.i, i32 1
  %136 = load i8** %output1.i, align 8, !tbaa !47
  %output_format.i = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom.i, i32 7
  %137 = load i8* %output_format.i, align 1, !tbaa !49
  %conv.i = sext i8 %137 to i32
  switch i32 %conv.i, label %sw.default.i [
    i32 1, label %get_insn_template.exit
    i32 2, label %sw.bb4.i
    i32 3, label %sw.bb7.i
  ]

sw.bb4.i:                                         ; preds = %if.end524
  %138 = load i32* @which_alternative, align 4, !tbaa !6
  %idxprom5.i771 = sext i32 %138 to i64
  %139 = bitcast i8* %136 to i8**
  %arrayidx6.i = getelementptr inbounds i8** %139, i64 %idxprom5.i771
  %140 = load i8** %arrayidx6.i, align 8, !tbaa !1
  br label %get_insn_template.exit

sw.bb7.i:                                         ; preds = %if.end524
  %cmp.i772 = icmp eq %struct.rtx_def* %insn, null
  br i1 %cmp.i772, label %if.then.i773, label %if.end.i

if.then.i773:                                     ; preds = %sw.bb7.i
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 1802, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.get_insn_template, i64 0, i64 0)) #8
  unreachable

if.end.i:                                         ; preds = %sw.bb7.i
  %141 = bitcast i8* %136 to i8* (%struct.rtx_def**, %struct.rtx_def*)*
  %call.i774 = call i8* %141(%struct.rtx_def** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 0, i64 0), %struct.rtx_def* %insn) #7
  br label %get_insn_template.exit

sw.default.i:                                     ; preds = %if.end524
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 1806, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.get_insn_template, i64 0, i64 0)) #8
  unreachable

get_insn_template.exit:                           ; preds = %if.end524, %sw.bb4.i, %if.end.i
  %retval.0.i = phi i8* [ %call.i774, %if.end.i ], [ %140, %sw.bb4.i ], [ %136, %if.end524 ]
  %cmp526 = icmp eq i8* %retval.0.i, null
  br i1 %cmp526, label %if.then528, label %if.end550

if.then528:                                       ; preds = %get_insn_template.exit
  %call529 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %insn) #7
  %cmp530 = icmp eq %struct.rtx_def* %call529, null
  br i1 %cmp530, label %for.cond534.preheader, label %if.then532

for.cond534.preheader:                            ; preds = %if.then528
  %cmp535778 = icmp eq %struct.rtx_def* %insn, null
  br i1 %cmp535778, label %return, label %for.body537

if.then532:                                       ; preds = %if.then528
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2596, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.final_scan_insn, i64 0, i64 0)) #8
  unreachable

for.body537:                                      ; preds = %for.cond534.preheader, %for.inc545
  %prev.0779 = phi %struct.rtx_def* [ %143, %for.inc545 ], [ %insn, %for.cond534.preheader ]
  %142 = getelementptr inbounds %struct.rtx_def* %prev.0779, i64 0, i32 0
  %bf.load538 = load i32* %142, align 8
  %bf.clear539 = and i32 %bf.load538, 65535
  %cmp540 = icmp eq i32 %bf.clear539, 37
  br i1 %cmp540, label %if.then542, label %for.inc545

if.then542:                                       ; preds = %for.body537
  %call543 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %prev.0779) #7
  br label %for.inc545

for.inc545:                                       ; preds = %for.body537, %if.then542
  %arrayidx547 = getelementptr inbounds %struct.rtx_def* %prev.0779, i64 0, i32 1, i64 1
  %rtx548 = bitcast %union.rtunion_def* %arrayidx547 to %struct.rtx_def**
  %143 = load %struct.rtx_def** %rtx548, align 8, !tbaa !1
  %cmp535 = icmp eq %struct.rtx_def* %143, null
  br i1 %cmp535, label %return, label %for.body537

if.end550:                                        ; preds = %get_insn_template.exit
  %144 = load i8* %retval.0.i, align 1, !tbaa !5
  %cmp553 = icmp eq i8 %144, 35
  br i1 %cmp553, label %land.lhs.true555, label %if.end572

land.lhs.true555:                                 ; preds = %if.end550
  %arrayidx556 = getelementptr inbounds i8* %retval.0.i, i64 1
  %145 = load i8* %arrayidx556, align 1, !tbaa !5
  %cmp558 = icmp eq i8 %145, 0
  br i1 %cmp558, label %if.then560, label %if.end572

if.then560:                                       ; preds = %land.lhs.true555
  %call561 = call %struct.rtx_def* @try_split(%struct.rtx_def* %132, %struct.rtx_def* %insn, i32 0) #7
  %cmp562 = icmp eq %struct.rtx_def* %call561, %insn
  br i1 %cmp562, label %land.lhs.true564, label %if.end571

land.lhs.true564:                                 ; preds = %if.then560
  %146 = load %struct.rtx_def** %rtx298, align 8, !tbaa !1
  %cmp568 = icmp eq %struct.rtx_def* %146, %132
  br i1 %cmp568, label %if.then570, label %if.end571

if.then570:                                       ; preds = %land.lhs.true564
  call void @_fatal_insn(i8* getelementptr inbounds ([21 x i8]* @.str25, i64 0, i64 0), %struct.rtx_def* %insn, i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2622, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.final_scan_insn, i64 0, i64 0)) #8
  unreachable

if.end571:                                        ; preds = %land.lhs.true564, %if.then560
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2628, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.final_scan_insn, i64 0, i64 0)) #8
  unreachable

if.end572:                                        ; preds = %land.lhs.true555, %if.end550
  %cmp573 = icmp sgt i32 %prescan, 0
  br i1 %cmp573, label %sw.epilog604, label %if.end576

if.end576:                                        ; preds = %if.end572
  call void @output_asm_insn(i8* %retval.0.i, %struct.rtx_def** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 0, i64 0))
  %bf.load577 = load i32* %1, align 8
  %bf.clear578 = and i32 %bf.load577, 65535
  %cmp579 = icmp eq i32 %bf.clear578, 32
  br i1 %cmp579, label %land.lhs.true581, label %if.end585

land.lhs.true581:                                 ; preds = %if.end576
  %call582 = call i32 @dwarf2out_do_frame() #7
  %tobool583 = icmp eq i32 %call582, 0
  br i1 %tobool583, label %if.end585, label %if.then584

if.then584:                                       ; preds = %land.lhs.true581
  call void @dwarf2out_frame_debug(%struct.rtx_def* %insn) #7
  br label %if.end585

if.end585:                                        ; preds = %land.lhs.true581, %if.then584, %if.end576
  %call586 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %insn, i32 30, %struct.rtx_def* null) #7
  %tobool587 = icmp eq %struct.rtx_def* %call586, null
  br i1 %tobool587, label %if.end603, label %if.then588

if.then588:                                       ; preds = %if.end585
  %arrayidx590 = getelementptr inbounds %struct.rtx_def* %call586, i64 0, i32 1, i64 0
  %rtx591 = bitcast %union.rtunion_def* %arrayidx590 to %struct.rtx_def**
  %147 = load %struct.rtx_def** %rtx591, align 8, !tbaa !1
  %fld592 = getelementptr inbounds %struct.rtx_def* %147, i64 0, i32 1
  %rtx594 = bitcast [1 x %union.rtunion_def]* %fld592 to %struct.rtx_def**
  %148 = load %struct.rtx_def** %rtx594, align 8, !tbaa !1
  %arrayidx599 = getelementptr inbounds %struct.rtx_def* %147, i64 0, i32 1, i64 1
  %rtx600 = bitcast %union.rtunion_def* %arrayidx599 to %struct.rtx_def**
  %149 = load %struct.rtx_def** %rtx600, align 8, !tbaa !1
  %rtwint = getelementptr inbounds %struct.rtx_def* %149, i64 0, i32 1, i64 0, i32 0
  %150 = load i64* %rtwint, align 8, !tbaa !50
  call void @assemble_vtable_entry(%struct.rtx_def* %148, i64 %150) #7
  br label %if.end603

if.end603:                                        ; preds = %if.end585, %if.then588
  store %struct.rtx_def* null, %struct.rtx_def** @debug_insn, align 8, !tbaa !1
  store %struct.rtx_def* null, %struct.rtx_def** @current_output_insn, align 8, !tbaa !1
  br label %sw.epilog604

sw.epilog604:                                     ; preds = %for.cond133, %if.then14.i.i, %if.end12.i.i, %sw.bb26, %sw.default295, %sw.default295, %if.end394, %sw.bb8, %sw.bb161, %if.end572, %if.then437, %if.then408, %if.end401, %if.then387, %if.then320, %do.body281, %do.body288, %if.end206, %if.then164, %do.body, %do.body20, %sw.bb27, %app_disable.exit, %do.body78, %if.end4, %if.end4, %if.end4, %if.end4, %if.end4, %if.end4, %if.end4, %if.end4, %if.end4, %if.end4, %if.end4, %if.end4, %if.end4, %if.then10, %sw.bb29, %app_disable.exit763, %sw.bb52, %if.end75, %if.then159, %sw.bb, %if.end603, %for.end483, %if.end424, %for.end381, %do.body265
  %arrayidx606 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx607 = bitcast %union.rtunion_def* %arrayidx606 to %struct.rtx_def**
  %151 = load %struct.rtx_def** %rtx607, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %for.inc545, %for.cond534.preheader, %sw.epilog604, %if.then455, %if.then
  %retval.0 = phi %struct.rtx_def* [ %2, %if.then ], [ %151, %sw.epilog604 ], [ %call447, %if.then455 ], [ null, %for.cond534.preheader ], [ null, %for.inc545 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define i8* @get_insn_template(i32 %code, %struct.rtx_def* %insn) #0 {
entry:
  %idxprom = sext i32 %code to i64
  %output1 = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, i32 1
  %0 = load i8** %output1, align 8, !tbaa !47
  %output_format = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, i32 7
  %1 = load i8* %output_format, align 1, !tbaa !49
  %conv = sext i8 %1 to i32
  switch i32 %conv, label %sw.default [
    i32 1, label %return
    i32 2, label %sw.bb4
    i32 3, label %sw.bb7
  ]

sw.bb4:                                           ; preds = %entry
  %2 = load i32* @which_alternative, align 4, !tbaa !6
  %idxprom5 = sext i32 %2 to i64
  %3 = bitcast i8* %0 to i8**
  %arrayidx6 = getelementptr inbounds i8** %3, i64 %idxprom5
  %4 = load i8** %arrayidx6, align 8, !tbaa !1
  br label %return

sw.bb7:                                           ; preds = %entry
  %cmp = icmp eq %struct.rtx_def* %insn, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb7
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 1802, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.get_insn_template, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %sw.bb7
  %5 = bitcast i8* %0 to i8* (%struct.rtx_def**, %struct.rtx_def*)*
  %call = tail call i8* %5(%struct.rtx_def** getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 0, i64 0), %struct.rtx_def* %insn) #7
  br label %return

sw.default:                                       ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 1806, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.get_insn_template, i64 0, i64 0)) #8
  unreachable

return:                                           ; preds = %entry, %if.end, %sw.bb4
  %retval.0 = phi i8* [ %call, %if.end ], [ %4, %sw.bb4 ], [ %0, %entry ]
  ret i8* %retval.0
}

declare void @readonly_data_section() #1

declare void @function_section(%union.tree_node*) #1

declare void @ix86_output_addr_vec_elt(%struct._IO_FILE*, i32) #1

declare void @ix86_output_addr_diff_elt(%struct._IO_FILE*, i32, i32) #1

declare i8* @decode_asm_operands(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def***, i8**, i32*) #1

; Function Attrs: nounwind uwtable
define void @output_asm_insn(i8* nocapture readonly %template, %struct.rtx_def** nocapture readonly %operands) #0 {
entry:
  %addressp.i410 = alloca i32, align 4
  %x.addr.i390 = alloca %struct.rtx_def*, align 8
  %x.addr.i371 = alloca %struct.rtx_def*, align 8
  %x.addr.i362 = alloca %struct.rtx_def*, align 8
  %x.addr.i = alloca %struct.rtx_def*, align 8
  %buf.i = alloca [256 x i8], align 16
  %addressp.i = alloca i32, align 4
  %oporder = alloca [30 x i32], align 16
  %opoutput = alloca [30 x i8], align 16
  %0 = bitcast [30 x i32]* %oporder to i8*
  call void @llvm.lifetime.start(i64 120, i8* %0) #7
  %1 = load i8* %template, align 1, !tbaa !5
  %cmp = icmp eq i8 %1, 0
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %2 = getelementptr inbounds [30 x i8]* %opoutput, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 30, i32 16, i1 false)
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call = call i32 @putc(i32 9, %struct._IO_FILE* %3) #7
  %4 = load i8* %template, align 1, !tbaa !5
  %tobool446 = icmp eq i8 %4, 0
  br i1 %tobool446, label %while.end268, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end
  %5 = bitcast i32* %addressp.i to i8*
  %6 = bitcast %struct.rtx_def** %x.addr.i390 to i8*
  %7 = bitcast %struct.rtx_def** %x.addr.i371 to i8*
  %8 = getelementptr inbounds [256 x i8]* %buf.i, i64 0, i64 0
  %9 = bitcast %struct.rtx_def** %x.addr.i to i8*
  %10 = bitcast %struct.rtx_def** %x.addr.i362 to i8*
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %conv2451.in = phi i8 [ %4, %while.body.lr.ph ], [ %28, %while.cond.backedge ]
  %template.pn = phi i8* [ %template, %while.body.lr.ph ], [ %p.0.be, %while.cond.backedge ]
  %ops.0448 = phi i32 [ 0, %while.body.lr.ph ], [ %ops.0.be, %while.cond.backedge ]
  %dialect.0447 = phi i32 [ 0, %while.body.lr.ph ], [ %dialect.0.be, %while.cond.backedge ]
  %incdec.ptr450 = getelementptr inbounds i8* %template.pn, i64 1
  %conv2451 = sext i8 %conv2451.in to i32
  switch i32 %conv2451, label %sw.default [
    i32 10, label %sw.bb
    i32 123, label %sw.bb10
    i32 124, label %sw.bb43
    i32 125, label %sw.bb58
    i32 37, label %sw.bb63
  ]

sw.bb:                                            ; preds = %while.body
  %11 = load i32* @flag_verbose_asm, align 4, !tbaa !6
  %tobool3 = icmp eq i32 %11, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %sw.bb
  call void @llvm.lifetime.start(i64 4, i8* %5) #7
  %cmp13.i = icmp sgt i32 %ops.0448, 0
  br i1 %cmp13.i, label %for.body.i, label %if.end5

for.body.i:                                       ; preds = %if.then4, %for.inc.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.inc.i ], [ 0, %if.then4 ]
  %wrote.015.i = phi i32 [ %wrote.1.i, %for.inc.i ], [ 0, %if.then4 ]
  %arrayidx.i = getelementptr inbounds [30 x i32]* %oporder, i64 0, i64 %indvars.iv.i
  %12 = load i32* %arrayidx.i, align 4, !tbaa !6
  %idxprom1.i = sext i32 %12 to i64
  %arrayidx2.i = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom1.i
  %13 = load %struct.rtx_def** %arrayidx2.i, align 8, !tbaa !1
  %call.i = call fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* %13, i32* %addressp.i) #7
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %for.inc.i, label %if.then.i

if.then.i:                                        ; preds = %for.body.i
  %14 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %tobool3.i = icmp ne i32 %wrote.015.i, 0
  %cond.i = select i1 %tobool3.i, i32 44, i32 9
  %cond5.i = select i1 %tobool3.i, i8* getelementptr inbounds ([1 x i8]* @.str24, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str16, i64 0, i64 0)
  %15 = load i32* %addressp.i, align 4, !tbaa !6
  %tobool6.i = icmp ne i32 %15, 0
  %cond7.i = select i1 %tobool6.i, i8* getelementptr inbounds ([2 x i8]* @.str49, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str24, i64 0, i64 0)
  %call8.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([8 x i8]* @.str48, i64 0, i64 0), i32 %cond.i, i8* %cond5.i, i8* %cond7.i) #7
  %16 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @print_mem_expr(%struct._IO_FILE* %16, %union.tree_node* %call.i) #7
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i, %for.body.i
  %wrote.1.i = phi i32 [ 1, %if.then.i ], [ %wrote.015.i, %for.body.i ]
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv455 = trunc i64 %indvars.iv.next.i to i32
  %exitcond456 = icmp eq i32 %lftr.wideiv455, %ops.0448
  br i1 %exitcond456, label %if.end5, label %for.body.i

if.end5:                                          ; preds = %for.inc.i, %if.then4, %sw.bb
  %17 = load i32* @flag_print_asm_name, align 4, !tbaa !6
  %tobool6 = icmp eq i32 %17, 0
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end5
  call fastcc void @output_asm_name()
  br label %if.end8

if.end8:                                          ; preds = %if.end5, %if.then7
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 30, i32 16, i1 false)
  %18 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call9 = call i32 @putc(i32 10, %struct._IO_FILE* %18) #7
  br label %while.cond.backedge

sw.bb10:                                          ; preds = %while.body
  %tobool11 = icmp eq i32 %dialect.0447, 0
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb10
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([37 x i8]* @.str29, i64 0, i64 0))
  br label %if.end13

if.end13:                                         ; preds = %sw.bb10, %if.then12
  %dialect.1 = phi i32 [ %dialect.0447, %if.then12 ], [ 1, %sw.bb10 ]
  %19 = load i32* @dialect_number, align 4, !tbaa !6
  %cmp14440 = icmp sgt i32 %19, 0
  br i1 %cmp14440, label %while.cond16.preheader, label %for.end

while.cond16.preheader:                           ; preds = %if.end13, %for.inc
  %p.1442 = phi i8* [ %p.4, %for.inc ], [ %incdec.ptr450, %if.end13 ]
  %i.0441 = phi i32 [ %inc, %for.inc ], [ 0, %if.end13 ]
  br label %while.cond16

while.cond16:                                     ; preds = %while.cond16.preheader, %land.rhs
  %p.2 = phi i8* [ %incdec.ptr22, %land.rhs ], [ %p.1442, %while.cond16.preheader ]
  %20 = load i8* %p.2, align 1, !tbaa !5
  switch i8 %20, label %land.rhs [
    i8 0, label %while.end
    i8 125, label %while.end
  ]

land.rhs:                                         ; preds = %while.cond16
  %incdec.ptr22 = getelementptr inbounds i8* %p.2, i64 1
  %cmp24 = icmp eq i8 %20, 124
  br i1 %cmp24, label %land.rhs.while.end_crit_edge, label %while.cond16

land.rhs.while.end_crit_edge:                     ; preds = %land.rhs
  %.pre = load i8* %incdec.ptr22, align 1, !tbaa !5
  br label %while.end

while.end:                                        ; preds = %while.cond16, %while.cond16, %land.rhs.while.end_crit_edge
  %21 = phi i8 [ %.pre, %land.rhs.while.end_crit_edge ], [ %20, %while.cond16 ], [ %20, %while.cond16 ]
  %p.3 = phi i8* [ %incdec.ptr22, %land.rhs.while.end_crit_edge ], [ %p.2, %while.cond16 ], [ %p.2, %while.cond16 ]
  switch i8 %21, label %for.inc [
    i8 125, label %for.end
    i8 124, label %if.then35
  ]

if.then35:                                        ; preds = %while.end
  %incdec.ptr36 = getelementptr inbounds i8* %p.3, i64 1
  br label %for.inc

for.inc:                                          ; preds = %while.end, %if.then35
  %p.4 = phi i8* [ %incdec.ptr36, %if.then35 ], [ %p.3, %while.end ]
  %inc = add nsw i32 %i.0441, 1
  %cmp14 = icmp slt i32 %inc, %19
  br i1 %cmp14, label %while.cond16.preheader, label %for.end

for.end:                                          ; preds = %for.inc, %while.end, %if.end13
  %p.5 = phi i8* [ %incdec.ptr450, %if.end13 ], [ %p.4, %for.inc ], [ %p.3, %while.end ]
  %22 = load i8* %p.5, align 1, !tbaa !5
  %cmp39 = icmp eq i8 %22, 0
  br i1 %cmp39, label %if.then41, label %while.cond.backedge

if.then41:                                        ; preds = %for.end
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([42 x i8]* @.str30, i64 0, i64 0))
  br label %while.cond.backedge

sw.bb43:                                          ; preds = %while.body
  %tobool44 = icmp eq i32 %dialect.0447, 0
  br i1 %tobool44, label %if.else55, label %do.body

do.body:                                          ; preds = %sw.bb43, %do.cond
  %p.6 = phi i8* [ %incdec.ptr51, %do.cond ], [ %incdec.ptr450, %sw.bb43 ]
  %23 = load i8* %p.6, align 1, !tbaa !5
  %cmp47 = icmp eq i8 %23, 0
  br i1 %cmp47, label %if.then49, label %do.cond

if.then49:                                        ; preds = %do.body
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([42 x i8]* @.str30, i64 0, i64 0))
  br label %while.cond.backedge

do.cond:                                          ; preds = %do.body
  %incdec.ptr51 = getelementptr inbounds i8* %p.6, i64 1
  %cmp53 = icmp eq i8 %23, 125
  br i1 %cmp53, label %while.cond.backedge, label %do.body

if.else55:                                        ; preds = %sw.bb43
  %24 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call56 = call i32 @putc(i32 124, %struct._IO_FILE* %24) #7
  br label %while.cond.backedge

sw.bb58:                                          ; preds = %while.body
  %tobool59 = icmp eq i32 %dialect.0447, 0
  br i1 %tobool59, label %if.then60, label %while.cond.backedge

if.then60:                                        ; preds = %sw.bb58
  %25 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call61 = call i32 @putc(i32 125, %struct._IO_FILE* %25) #7
  br label %while.cond.backedge

sw.bb63:                                          ; preds = %while.body
  %26 = load i8* %incdec.ptr450, align 1, !tbaa !5
  %conv64 = sext i8 %26 to i32
  switch i8 %26, label %if.else77 [
    i8 37, label %if.then67
    i8 61, label %if.then74
  ]

if.then67:                                        ; preds = %sw.bb63
  %incdec.ptr68 = getelementptr inbounds i8* %template.pn, i64 2
  %27 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call69 = call i32 @putc(i32 37, %struct._IO_FILE* %27) #7
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %while.cond196, %while.cond239, %do.cond, %if.then67, %if.then258, %if.else261, %if.then74, %if.else55, %for.end, %if.then41, %sw.default, %if.end8, %if.then49, %sw.bb58, %if.then60
  %dialect.0.be = phi i32 [ %dialect.0447, %sw.default ], [ %dialect.0447, %if.then67 ], [ %dialect.0447, %if.then74 ], [ %dialect.0447, %if.then258 ], [ %dialect.0447, %if.else261 ], [ 0, %if.else55 ], [ %dialect.1, %if.then41 ], [ %dialect.1, %for.end ], [ %dialect.0447, %if.end8 ], [ 0, %if.then49 ], [ 0, %sw.bb58 ], [ 0, %if.then60 ], [ 0, %do.cond ], [ %dialect.0447, %while.cond239 ], [ %dialect.0447, %while.cond196 ]
  %ops.0.be = phi i32 [ %ops.0448, %sw.default ], [ %ops.0448, %if.then67 ], [ %ops.0448, %if.then74 ], [ %ops.0448, %if.then258 ], [ %ops.0448, %if.else261 ], [ %ops.0448, %if.else55 ], [ %ops.0448, %if.then41 ], [ %ops.0448, %for.end ], [ 0, %if.end8 ], [ %ops.0448, %if.then49 ], [ %ops.0448, %sw.bb58 ], [ %ops.0448, %if.then60 ], [ %ops.0448, %do.cond ], [ %ops.2, %while.cond239 ], [ %ops.1, %while.cond196 ]
  %p.0.be = phi i8* [ %incdec.ptr450, %sw.default ], [ %incdec.ptr68, %if.then67 ], [ %incdec.ptr75, %if.then74 ], [ %incdec.ptr259, %if.then258 ], [ %incdec.ptr450, %if.else261 ], [ %incdec.ptr450, %if.else55 ], [ %p.5, %if.then41 ], [ %p.5, %for.end ], [ %incdec.ptr450, %if.end8 ], [ %p.6, %if.then49 ], [ %incdec.ptr450, %sw.bb58 ], [ %incdec.ptr450, %if.then60 ], [ %incdec.ptr51, %do.cond ], [ %p.9, %while.cond239 ], [ %p.8, %while.cond196 ]
  %28 = load i8* %p.0.be, align 1, !tbaa !5
  %tobool = icmp eq i8 %28, 0
  br i1 %tobool, label %while.end268, label %while.body

if.then74:                                        ; preds = %sw.bb63
  %incdec.ptr75 = getelementptr inbounds i8* %template.pn, i64 2
  %29 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %30 = load i32* @insn_counter, align 4, !tbaa !6
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([3 x i8]* @.str31, i64 0, i64 0), i32 %30) #7
  br label %while.cond.backedge

if.else77:                                        ; preds = %sw.bb63
  %and = and i32 %conv64, 255
  %idxprom353 = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom353
  %31 = load i16* %arrayidx, align 2, !tbaa !51
  %conv79 = zext i16 %31 to i32
  %and80 = and i32 %conv79, 136
  %tobool81 = icmp eq i32 %and80, 0
  br i1 %tobool81, label %if.else207, label %if.then82

if.then82:                                        ; preds = %if.else77
  %incdec.ptr83 = getelementptr inbounds i8* %template.pn, i64 2
  %call85 = call i32 @atoi(i8* %incdec.ptr83) #7
  %32 = load i8* %incdec.ptr83, align 1, !tbaa !5
  %idxprom88 = zext i8 %32 to i64
  %arrayidx89 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom88
  %33 = load i16* %arrayidx89, align 2, !tbaa !51
  %and91 = and i16 %33, 4
  %tobool92 = icmp eq i16 %and91, 0
  br i1 %tobool92, label %if.then93, label %if.else94

if.then93:                                        ; preds = %if.then82
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([39 x i8]* @.str32, i64 0, i64 0))
  br label %if.end185

if.else94:                                        ; preds = %if.then82
  %34 = load %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !1
  %tobool95 = icmp eq %struct.rtx_def* %34, null
  br i1 %tobool95, label %if.else102, label %land.lhs.true96

land.lhs.true96:                                  ; preds = %if.else94
  %cmp97 = icmp sgt i32 %call85, -1
  %35 = load i32* @insn_noperands, align 4
  %cmp99 = icmp ult i32 %call85, %35
  %or.cond = and i1 %cmp97, %cmp99
  br i1 %or.cond, label %if.else102, label %if.then101

if.then101:                                       ; preds = %land.lhs.true96
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([28 x i8]* @.str33, i64 0, i64 0))
  br label %if.end185

if.else102:                                       ; preds = %land.lhs.true96, %if.else94
  switch i8 %26, label %if.else157 [
    i8 108, label %if.then105
    i8 97, label %if.then111
    i8 99, label %if.then117
  ]

if.then105:                                       ; preds = %if.else102
  %idxprom106 = sext i32 %call85 to i64
  %arrayidx107 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom106
  %36 = load %struct.rtx_def** %arrayidx107, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 256, i8* %8) #7
  %37 = getelementptr inbounds %struct.rtx_def* %36, i64 0, i32 0
  %bf.load.i = load i32* %37, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 67
  br i1 %cmp.i, label %if.then.i359, label %if.end.i

if.then.i359:                                     ; preds = %if.then105
  %arrayidx.i358 = getelementptr inbounds %struct.rtx_def* %36, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i358 to %struct.rtx_def**
  %38 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !1
  %.phi.trans.insert.i = getelementptr inbounds %struct.rtx_def* %38, i64 0, i32 0
  %bf.load1.pre.i = load i32* %.phi.trans.insert.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i359, %if.then105
  %bf.load1.i = phi i32 [ %bf.load1.pre.i, %if.then.i359 ], [ %bf.load.i, %if.then105 ]
  %x.addr.0.i = phi %struct.rtx_def* [ %38, %if.then.i359 ], [ %36, %if.then105 ]
  %bf.clear2.i = and i32 %bf.load1.i, 65535
  switch i32 %bf.clear2.i, label %if.else.i [
    i32 36, label %do.body.i
    i32 37, label %land.lhs.true.i
  ]

land.lhs.true.i:                                  ; preds = %if.end.i
  %arrayidx8.i = getelementptr inbounds %struct.rtx_def* %x.addr.0.i, i64 0, i32 1, i64 4
  %rtint.i = bitcast %union.rtunion_def* %arrayidx8.i to i32*
  %39 = load i32* %rtint.i, align 4, !tbaa !6
  %cmp9.i = icmp eq i32 %39, -88
  br i1 %cmp9.i, label %do.body.i, label %if.else.i

do.body.i:                                        ; preds = %land.lhs.true.i, %if.end.i
  %arrayidx12.i = getelementptr inbounds %struct.rtx_def* %x.addr.0.i, i64 0, i32 1, i64 5
  %rtint13.i = bitcast %union.rtunion_def* %arrayidx12.i to i32*
  %40 = load i32* %rtint13.i, align 4, !tbaa !6
  %call.i360 = call i32 (i8*, i8*, ...)* @sprintf(i8* %8, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str19, i64 0, i64 0), i32 %40) #7
  br label %output_asm_label.exit

if.else.i:                                        ; preds = %land.lhs.true.i, %if.end.i
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([28 x i8]* @.str36, i64 0, i64 0)) #7
  br label %output_asm_label.exit

output_asm_label.exit:                            ; preds = %do.body.i, %if.else.i
  %41 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @assemble_name(%struct._IO_FILE* %41, i8* %8) #7
  call void @llvm.lifetime.end(i64 256, i8* %8) #7
  br label %if.end185

if.then111:                                       ; preds = %if.else102
  %idxprom112 = sext i32 %call85 to i64
  %arrayidx113 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom112
  %42 = load %struct.rtx_def** %arrayidx113, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %9) #7
  store %struct.rtx_def* %42, %struct.rtx_def** %x.addr.i, align 8, !tbaa !1
  %call.i361 = call fastcc %struct.rtx_def* @walk_alter_subreg(%struct.rtx_def** %x.addr.i) #7
  %43 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %44 = load %struct.rtx_def** %x.addr.i, align 8, !tbaa !1
  call void @print_operand_address(%struct._IO_FILE* %43, %struct.rtx_def* %44) #7
  call void @llvm.lifetime.end(i64 8, i8* %9) #7
  br label %if.end185

if.then117:                                       ; preds = %if.else102
  %idxprom118 = sext i32 %call85 to i64
  %arrayidx119 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom118
  %45 = load %struct.rtx_def** %arrayidx119, align 8, !tbaa !1
  %46 = getelementptr inbounds %struct.rtx_def* %45, i64 0, i32 0
  %bf.load = load i32* %46, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.else153 [
    i32 67, label %if.then150
    i32 68, label %if.then150
    i32 54, label %if.then150
    i32 58, label %if.then150
    i32 55, label %if.then150
  ]

if.then150:                                       ; preds = %if.then117, %if.then117, %if.then117, %if.then117, %if.then117
  %47 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @output_addr_const(%struct._IO_FILE* %47, %struct.rtx_def* %45)
  br label %if.end185

if.else153:                                       ; preds = %if.then117
  call void @llvm.lifetime.start(i64 8, i8* %10) #7
  store %struct.rtx_def* %45, %struct.rtx_def** %x.addr.i362, align 8, !tbaa !1
  %tobool.i363 = icmp eq %struct.rtx_def* %45, null
  br i1 %tobool.i363, label %output_operand.exit, label %land.lhs.true.i367

land.lhs.true.i367:                               ; preds = %if.else153
  %cmp.i366 = icmp eq i32 %bf.clear, 63
  br i1 %cmp.i366, label %if.end.i369, label %land.lhs.true2.i

if.end.i369:                                      ; preds = %land.lhs.true.i367
  %call.i368 = call %struct.rtx_def* @alter_subreg(%struct.rtx_def** %x.addr.i362) #7
  store %struct.rtx_def* %call.i368, %struct.rtx_def** %x.addr.i362, align 8, !tbaa !1
  %tobool1.i = icmp eq %struct.rtx_def* %call.i368, null
  br i1 %tobool1.i, label %output_operand.exit, label %if.end.i369.land.lhs.true2.i_crit_edge

if.end.i369.land.lhs.true2.i_crit_edge:           ; preds = %if.end.i369
  %.phi.trans.insert460 = getelementptr inbounds %struct.rtx_def* %call.i368, i64 0, i32 0
  %bf.load3.i.pre = load i32* %.phi.trans.insert460, align 8
  br label %land.lhs.true2.i

land.lhs.true2.i:                                 ; preds = %if.end.i369.land.lhs.true2.i_crit_edge, %land.lhs.true.i367
  %bf.load3.i = phi i32 [ %bf.load3.i.pre, %if.end.i369.land.lhs.true2.i_crit_edge ], [ %bf.load, %land.lhs.true.i367 ]
  %48 = phi %struct.rtx_def* [ %call.i368, %if.end.i369.land.lhs.true2.i_crit_edge ], [ %45, %land.lhs.true.i367 ]
  %bf.clear4.i = and i32 %bf.load3.i, 65535
  %cmp5.i = icmp eq i32 %bf.clear4.i, 61
  br i1 %cmp5.i, label %land.lhs.true6.i, label %output_operand.exit

land.lhs.true6.i:                                 ; preds = %land.lhs.true2.i
  %arrayidx.i370 = getelementptr inbounds %struct.rtx_def* %48, i64 0, i32 1, i64 0
  %rtuint.i = bitcast %union.rtunion_def* %arrayidx.i370 to i32*
  %49 = load i32* %rtuint.i, align 4, !tbaa !6
  %cmp7.i = icmp ugt i32 %49, 52
  br i1 %cmp7.i, label %if.then8.i, label %output_operand.exit

if.then8.i:                                       ; preds = %land.lhs.true6.i
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 3349, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.output_operand, i64 0, i64 0)) #8
  unreachable

output_operand.exit:                              ; preds = %if.else153, %if.end.i369, %land.lhs.true2.i, %land.lhs.true6.i
  %50 = phi %struct.rtx_def* [ null, %if.else153 ], [ null, %if.end.i369 ], [ %48, %land.lhs.true6.i ], [ %48, %land.lhs.true2.i ]
  %51 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @print_operand(%struct._IO_FILE* %51, %struct.rtx_def* %50, i32 99) #7
  call void @llvm.lifetime.end(i64 8, i8* %10) #7
  br label %if.end185

if.else157:                                       ; preds = %if.else102
  %cmp158 = icmp eq i8 %26, 110
  %idxprom161 = sext i32 %call85 to i64
  %arrayidx162 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom161
  %52 = load %struct.rtx_def** %arrayidx162, align 8, !tbaa !1
  br i1 %cmp158, label %if.then160, label %if.else177

if.then160:                                       ; preds = %if.else157
  %53 = getelementptr inbounds %struct.rtx_def* %52, i64 0, i32 0
  %bf.load163 = load i32* %53, align 8
  %bf.clear164 = and i32 %bf.load163, 65535
  %cmp165 = icmp eq i32 %bf.clear164, 54
  %54 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  br i1 %cmp165, label %if.then167, label %if.else172

if.then167:                                       ; preds = %if.then160
  %rtwint = getelementptr inbounds %struct.rtx_def* %52, i64 0, i32 1, i64 0, i32 0
  %55 = load i64* %rtwint, align 8, !tbaa !50
  %sub = sub nsw i64 0, %55
  %call171 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([5 x i8]* @.str34, i64 0, i64 0), i64 %sub) #7
  br label %if.end185

if.else172:                                       ; preds = %if.then160
  %call173 = call i32 @putc(i32 45, %struct._IO_FILE* %54) #7
  %56 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %57 = load %struct.rtx_def** %arrayidx162, align 8, !tbaa !1
  call void @output_addr_const(%struct._IO_FILE* %56, %struct.rtx_def* %57)
  br label %if.end185

if.else177:                                       ; preds = %if.else157
  call void @llvm.lifetime.start(i64 8, i8* %7) #7
  store %struct.rtx_def* %52, %struct.rtx_def** %x.addr.i371, align 8, !tbaa !1
  %tobool.i372 = icmp eq %struct.rtx_def* %52, null
  br i1 %tobool.i372, label %output_operand.exit389, label %land.lhs.true.i376

land.lhs.true.i376:                               ; preds = %if.else177
  %58 = getelementptr inbounds %struct.rtx_def* %52, i64 0, i32 0
  %bf.load.i373 = load i32* %58, align 8
  %bf.clear.i374 = and i32 %bf.load.i373, 65535
  %cmp.i375 = icmp eq i32 %bf.clear.i374, 63
  br i1 %cmp.i375, label %if.end.i379, label %land.lhs.true2.i383

if.end.i379:                                      ; preds = %land.lhs.true.i376
  %call.i377 = call %struct.rtx_def* @alter_subreg(%struct.rtx_def** %x.addr.i371) #7
  store %struct.rtx_def* %call.i377, %struct.rtx_def** %x.addr.i371, align 8, !tbaa !1
  %tobool1.i378 = icmp eq %struct.rtx_def* %call.i377, null
  br i1 %tobool1.i378, label %output_operand.exit389, label %if.end.i379.land.lhs.true2.i383_crit_edge

if.end.i379.land.lhs.true2.i383_crit_edge:        ; preds = %if.end.i379
  %.phi.trans.insert458 = getelementptr inbounds %struct.rtx_def* %call.i377, i64 0, i32 0
  %bf.load3.i380.pre = load i32* %.phi.trans.insert458, align 8
  br label %land.lhs.true2.i383

land.lhs.true2.i383:                              ; preds = %if.end.i379.land.lhs.true2.i383_crit_edge, %land.lhs.true.i376
  %bf.load3.i380 = phi i32 [ %bf.load3.i380.pre, %if.end.i379.land.lhs.true2.i383_crit_edge ], [ %bf.load.i373, %land.lhs.true.i376 ]
  %59 = phi %struct.rtx_def* [ %call.i377, %if.end.i379.land.lhs.true2.i383_crit_edge ], [ %52, %land.lhs.true.i376 ]
  %bf.clear4.i381 = and i32 %bf.load3.i380, 65535
  %cmp5.i382 = icmp eq i32 %bf.clear4.i381, 61
  br i1 %cmp5.i382, label %land.lhs.true6.i387, label %output_operand.exit389

land.lhs.true6.i387:                              ; preds = %land.lhs.true2.i383
  %arrayidx.i384 = getelementptr inbounds %struct.rtx_def* %59, i64 0, i32 1, i64 0
  %rtuint.i385 = bitcast %union.rtunion_def* %arrayidx.i384 to i32*
  %60 = load i32* %rtuint.i385, align 4, !tbaa !6
  %cmp7.i386 = icmp ugt i32 %60, 52
  br i1 %cmp7.i386, label %if.then8.i388, label %output_operand.exit389

if.then8.i388:                                    ; preds = %land.lhs.true6.i387
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 3349, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.output_operand, i64 0, i64 0)) #8
  unreachable

output_operand.exit389:                           ; preds = %if.else177, %if.end.i379, %land.lhs.true2.i383, %land.lhs.true6.i387
  %61 = phi %struct.rtx_def* [ null, %if.else177 ], [ null, %if.end.i379 ], [ %59, %land.lhs.true6.i387 ], [ %59, %land.lhs.true2.i383 ]
  %62 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @print_operand(%struct._IO_FILE* %62, %struct.rtx_def* %61, i32 %conv64) #7
  call void @llvm.lifetime.end(i64 8, i8* %7) #7
  br label %if.end185

if.end185:                                        ; preds = %if.then101, %if.then111, %output_operand.exit389, %if.else172, %if.then167, %if.then150, %output_operand.exit, %output_asm_label.exit, %if.then93
  %idxprom186 = sext i32 %call85 to i64
  %arrayidx187 = getelementptr inbounds [30 x i8]* %opoutput, i64 0, i64 %idxprom186
  %63 = load i8* %arrayidx187, align 1, !tbaa !5
  %tobool188 = icmp eq i8 %63, 0
  br i1 %tobool188, label %if.then189, label %if.end193

if.then189:                                       ; preds = %if.end185
  %inc190 = add nsw i32 %ops.0448, 1
  %idxprom191 = sext i32 %ops.0448 to i64
  %arrayidx192 = getelementptr inbounds [30 x i32]* %oporder, i64 0, i64 %idxprom191
  store i32 %call85, i32* %arrayidx192, align 4, !tbaa !6
  br label %if.end193

if.end193:                                        ; preds = %if.end185, %if.then189
  %ops.1 = phi i32 [ %ops.0448, %if.end185 ], [ %inc190, %if.then189 ]
  store i8 1, i8* %arrayidx187, align 1, !tbaa !5
  br label %while.cond196

while.cond196:                                    ; preds = %while.cond196, %if.end193
  %p.8 = phi i8* [ %incdec.ptr83, %if.end193 ], [ %incdec.ptr205, %while.cond196 ]
  %64 = load i8* %p.8, align 1, !tbaa !5
  %idxprom199 = zext i8 %64 to i64
  %arrayidx200 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom199
  %65 = load i16* %arrayidx200, align 2, !tbaa !51
  %and202 = and i16 %65, 4
  %tobool203 = icmp eq i16 %and202, 0
  %incdec.ptr205 = getelementptr inbounds i8* %p.8, i64 1
  br i1 %tobool203, label %while.cond.backedge, label %while.cond196

if.else207:                                       ; preds = %if.else77
  %and213 = and i32 %conv79, 4
  %tobool214 = icmp eq i32 %and213, 0
  br i1 %tobool214, label %if.else250, label %if.then215

if.then215:                                       ; preds = %if.else207
  %call216 = call i32 @atoi(i8* %incdec.ptr450) #7
  %66 = load %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !1
  %tobool217 = icmp eq %struct.rtx_def* %66, null
  br i1 %tobool217, label %if.else225, label %land.lhs.true218

land.lhs.true218:                                 ; preds = %if.then215
  %cmp219 = icmp sgt i32 %call216, -1
  %67 = load i32* @insn_noperands, align 4
  %cmp222 = icmp ult i32 %call216, %67
  %or.cond357 = and i1 %cmp219, %cmp222
  br i1 %or.cond357, label %if.else225, label %if.then224

if.then224:                                       ; preds = %land.lhs.true218
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([28 x i8]* @.str33, i64 0, i64 0))
  %idxprom229.pre = sext i32 %call216 to i64
  br label %if.end228

if.else225:                                       ; preds = %land.lhs.true218, %if.then215
  %idxprom226 = sext i32 %call216 to i64
  %arrayidx227 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom226
  %68 = load %struct.rtx_def** %arrayidx227, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %6) #7
  store %struct.rtx_def* %68, %struct.rtx_def** %x.addr.i390, align 8, !tbaa !1
  %tobool.i391 = icmp eq %struct.rtx_def* %68, null
  br i1 %tobool.i391, label %output_operand.exit408, label %land.lhs.true.i395

land.lhs.true.i395:                               ; preds = %if.else225
  %69 = getelementptr inbounds %struct.rtx_def* %68, i64 0, i32 0
  %bf.load.i392 = load i32* %69, align 8
  %bf.clear.i393 = and i32 %bf.load.i392, 65535
  %cmp.i394 = icmp eq i32 %bf.clear.i393, 63
  br i1 %cmp.i394, label %if.end.i398, label %land.lhs.true2.i402

if.end.i398:                                      ; preds = %land.lhs.true.i395
  %call.i396 = call %struct.rtx_def* @alter_subreg(%struct.rtx_def** %x.addr.i390) #7
  store %struct.rtx_def* %call.i396, %struct.rtx_def** %x.addr.i390, align 8, !tbaa !1
  %tobool1.i397 = icmp eq %struct.rtx_def* %call.i396, null
  br i1 %tobool1.i397, label %output_operand.exit408, label %if.end.i398.land.lhs.true2.i402_crit_edge

if.end.i398.land.lhs.true2.i402_crit_edge:        ; preds = %if.end.i398
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %call.i396, i64 0, i32 0
  %bf.load3.i399.pre = load i32* %.phi.trans.insert, align 8
  br label %land.lhs.true2.i402

land.lhs.true2.i402:                              ; preds = %if.end.i398.land.lhs.true2.i402_crit_edge, %land.lhs.true.i395
  %bf.load3.i399 = phi i32 [ %bf.load3.i399.pre, %if.end.i398.land.lhs.true2.i402_crit_edge ], [ %bf.load.i392, %land.lhs.true.i395 ]
  %70 = phi %struct.rtx_def* [ %call.i396, %if.end.i398.land.lhs.true2.i402_crit_edge ], [ %68, %land.lhs.true.i395 ]
  %bf.clear4.i400 = and i32 %bf.load3.i399, 65535
  %cmp5.i401 = icmp eq i32 %bf.clear4.i400, 61
  br i1 %cmp5.i401, label %land.lhs.true6.i406, label %output_operand.exit408

land.lhs.true6.i406:                              ; preds = %land.lhs.true2.i402
  %arrayidx.i403 = getelementptr inbounds %struct.rtx_def* %70, i64 0, i32 1, i64 0
  %rtuint.i404 = bitcast %union.rtunion_def* %arrayidx.i403 to i32*
  %71 = load i32* %rtuint.i404, align 4, !tbaa !6
  %cmp7.i405 = icmp ugt i32 %71, 52
  br i1 %cmp7.i405, label %if.then8.i407, label %output_operand.exit408

if.then8.i407:                                    ; preds = %land.lhs.true6.i406
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 3349, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.output_operand, i64 0, i64 0)) #8
  unreachable

output_operand.exit408:                           ; preds = %if.else225, %if.end.i398, %land.lhs.true2.i402, %land.lhs.true6.i406
  %72 = phi %struct.rtx_def* [ null, %if.else225 ], [ null, %if.end.i398 ], [ %70, %land.lhs.true6.i406 ], [ %70, %land.lhs.true2.i402 ]
  %73 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @print_operand(%struct._IO_FILE* %73, %struct.rtx_def* %72, i32 0) #7
  call void @llvm.lifetime.end(i64 8, i8* %6) #7
  br label %if.end228

if.end228:                                        ; preds = %output_operand.exit408, %if.then224
  %idxprom229.pre-phi = phi i64 [ %idxprom226, %output_operand.exit408 ], [ %idxprom229.pre, %if.then224 ]
  %arrayidx230 = getelementptr inbounds [30 x i8]* %opoutput, i64 0, i64 %idxprom229.pre-phi
  %74 = load i8* %arrayidx230, align 1, !tbaa !5
  %tobool231 = icmp eq i8 %74, 0
  br i1 %tobool231, label %if.then232, label %if.end236

if.then232:                                       ; preds = %if.end228
  %inc233 = add nsw i32 %ops.0448, 1
  %idxprom234 = sext i32 %ops.0448 to i64
  %arrayidx235 = getelementptr inbounds [30 x i32]* %oporder, i64 0, i64 %idxprom234
  store i32 %call216, i32* %arrayidx235, align 4, !tbaa !6
  br label %if.end236

if.end236:                                        ; preds = %if.end228, %if.then232
  %ops.2 = phi i32 [ %ops.0448, %if.end228 ], [ %inc233, %if.then232 ]
  store i8 1, i8* %arrayidx230, align 1, !tbaa !5
  br label %while.cond239

while.cond239:                                    ; preds = %while.cond239, %if.end236
  %p.9 = phi i8* [ %incdec.ptr450, %if.end236 ], [ %incdec.ptr248, %while.cond239 ]
  %75 = load i8* %p.9, align 1, !tbaa !5
  %idxprom242 = zext i8 %75 to i64
  %arrayidx243 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom242
  %76 = load i16* %arrayidx243, align 2, !tbaa !51
  %and245 = and i16 %76, 4
  %tobool246 = icmp eq i16 %and245, 0
  %incdec.ptr248 = getelementptr inbounds i8* %p.9, i64 1
  br i1 %tobool246, label %while.cond.backedge, label %while.cond239

if.else250:                                       ; preds = %if.else207
  %77 = and i8 %26, -2
  %switch = icmp eq i8 %77, 42
  br i1 %switch, label %if.then258, label %if.else261

if.then258:                                       ; preds = %if.else250
  %incdec.ptr259 = getelementptr inbounds i8* %template.pn, i64 2
  %78 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @print_operand(%struct._IO_FILE* %78, %struct.rtx_def* null, i32 %conv64) #7
  br label %while.cond.backedge

if.else261:                                       ; preds = %if.else250
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([16 x i8]* @.str35, i64 0, i64 0))
  br label %while.cond.backedge

sw.default:                                       ; preds = %while.body
  %79 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call267 = call i32 @putc(i32 %conv2451, %struct._IO_FILE* %79) #7
  br label %while.cond.backedge

while.end268:                                     ; preds = %while.cond.backedge, %if.end
  %ops.0.lcssa = phi i32 [ 0, %if.end ], [ %ops.0.be, %while.cond.backedge ]
  %80 = load i32* @flag_verbose_asm, align 4, !tbaa !6
  %tobool269 = icmp eq i32 %80, 0
  br i1 %tobool269, label %if.end272, label %if.then270

if.then270:                                       ; preds = %while.end268
  %81 = bitcast i32* %addressp.i410 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %81) #7
  %cmp13.i411 = icmp sgt i32 %ops.0.lcssa, 0
  br i1 %cmp13.i411, label %for.body.i419, label %if.end272

for.body.i419:                                    ; preds = %if.then270, %for.inc.i431
  %indvars.iv.i412 = phi i64 [ %indvars.iv.next.i428, %for.inc.i431 ], [ 0, %if.then270 ]
  %wrote.015.i413 = phi i32 [ %wrote.1.i427, %for.inc.i431 ], [ 0, %if.then270 ]
  %arrayidx.i414 = getelementptr inbounds [30 x i32]* %oporder, i64 0, i64 %indvars.iv.i412
  %82 = load i32* %arrayidx.i414, align 4, !tbaa !6
  %idxprom1.i415 = sext i32 %82 to i64
  %arrayidx2.i416 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom1.i415
  %83 = load %struct.rtx_def** %arrayidx2.i416, align 8, !tbaa !1
  %call.i417 = call fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* %83, i32* %addressp.i410) #7
  %tobool.i418 = icmp eq %union.tree_node* %call.i417, null
  br i1 %tobool.i418, label %for.inc.i431, label %if.then.i426

if.then.i426:                                     ; preds = %for.body.i419
  %84 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %tobool3.i420 = icmp ne i32 %wrote.015.i413, 0
  %cond.i421 = select i1 %tobool3.i420, i32 44, i32 9
  %cond5.i422 = select i1 %tobool3.i420, i8* getelementptr inbounds ([1 x i8]* @.str24, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str16, i64 0, i64 0)
  %85 = load i32* %addressp.i410, align 4, !tbaa !6
  %tobool6.i423 = icmp ne i32 %85, 0
  %cond7.i424 = select i1 %tobool6.i423, i8* getelementptr inbounds ([2 x i8]* @.str49, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str24, i64 0, i64 0)
  %call8.i425 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([8 x i8]* @.str48, i64 0, i64 0), i32 %cond.i421, i8* %cond5.i422, i8* %cond7.i424) #7
  %86 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @print_mem_expr(%struct._IO_FILE* %86, %union.tree_node* %call.i417) #7
  br label %for.inc.i431

for.inc.i431:                                     ; preds = %if.then.i426, %for.body.i419
  %wrote.1.i427 = phi i32 [ 1, %if.then.i426 ], [ %wrote.015.i413, %for.body.i419 ]
  %indvars.iv.next.i428 = add nuw nsw i64 %indvars.iv.i412, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i428 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %ops.0.lcssa
  br i1 %exitcond, label %if.end272, label %for.body.i419

if.end272:                                        ; preds = %for.inc.i431, %if.then270, %while.end268
  %87 = load i32* @flag_print_asm_name, align 4, !tbaa !6
  %tobool273 = icmp eq i32 %87, 0
  br i1 %tobool273, label %if.end275, label %if.then274

if.then274:                                       ; preds = %if.end272
  call fastcc void @output_asm_name()
  br label %if.end275

if.end275:                                        ; preds = %if.end272, %if.then274
  %88 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %call276 = call i32 @putc(i32 10, %struct._IO_FILE* %88) #7
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end275
  call void @llvm.lifetime.end(i64 120, i8* %0) #7
  ret void
}

declare i32 @recog_memoized_1(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @cleanup_subreg_operands(%struct.rtx_def* %insn) #0 {
entry:
  tail call void @extract_insn_cached(%struct.rtx_def* %insn) #7
  %0 = load i16* bitcast (i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7) to i16*), align 4
  %1 = trunc i16 %0 to i8
  %cmp104 = icmp sgt i8 %1, 0
  br i1 %cmp104, label %for.body, label %for.cond34.preheader

for.cond34.preheader:                             ; preds = %for.inc, %entry
  %.in.in = phi i16 [ %0, %entry ], [ %8, %for.inc ]
  %.in = lshr i16 %.in.in, 8
  %2 = trunc i16 %.in to i8
  %cmp36101 = icmp sgt i8 %2, 0
  br i1 %cmp36101, label %for.body38, label %for.end82

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv106 = phi i64 [ %indvars.iv.next107, %for.inc ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 1, i64 %indvars.iv106
  %3 = load %struct.rtx_def*** %arrayidx, align 8, !tbaa !1
  %4 = load %struct.rtx_def** %3, align 8, !tbaa !1
  %5 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load = load i32* %5, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 63
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call = tail call %struct.rtx_def* @alter_subreg(%struct.rtx_def** %3)
  %arrayidx7 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %indvars.iv106
  store %struct.rtx_def* %call, %struct.rtx_def** %arrayidx7, align 8, !tbaa !1
  br label %for.inc

if.else:                                          ; preds = %for.body
  %arrayidx9 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %indvars.iv106
  %6 = load %struct.rtx_def** %arrayidx9, align 8, !tbaa !1
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load10 = load i32* %7, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  switch i32 %bf.clear11, label %for.inc [
    i32 75, label %if.then27
    i32 78, label %if.then27
    i32 66, label %if.then27
  ]

if.then27:                                        ; preds = %if.else, %if.else, %if.else
  %call30 = tail call fastcc %struct.rtx_def* @walk_alter_subreg(%struct.rtx_def** %3)
  store %struct.rtx_def* %call30, %struct.rtx_def** %arrayidx9, align 8, !tbaa !1
  br label %for.inc

for.inc:                                          ; preds = %if.else, %if.then, %if.then27
  %indvars.iv.next107 = add nuw nsw i64 %indvars.iv106, 1
  %8 = load i16* bitcast (i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7) to i16*), align 4
  %9 = zext i16 %8 to i32
  %sext = shl i32 %9, 24
  %conv = ashr exact i32 %sext, 24
  %10 = trunc i64 %indvars.iv.next107 to i32
  %cmp = icmp slt i32 %10, %conv
  br i1 %cmp, label %for.body, label %for.cond34.preheader

for.body38:                                       ; preds = %for.cond34.preheader, %for.inc80
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc80 ], [ 0, %for.cond34.preheader ]
  %arrayidx40 = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 5, i64 %indvars.iv
  %11 = load %struct.rtx_def*** %arrayidx40, align 8, !tbaa !1
  %12 = load %struct.rtx_def** %11, align 8, !tbaa !1
  %13 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 0
  %bf.load41 = load i32* %13, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  switch i32 %bf.clear42, label %for.inc80 [
    i32 63, label %if.then45
    i32 75, label %if.then72
    i32 78, label %if.then72
    i32 66, label %if.then72
  ]

if.then45:                                        ; preds = %for.body38
  %call48 = tail call %struct.rtx_def* @alter_subreg(%struct.rtx_def** %11)
  %14 = load %struct.rtx_def*** %arrayidx40, align 8, !tbaa !1
  store %struct.rtx_def* %call48, %struct.rtx_def** %14, align 8, !tbaa !1
  br label %for.inc80

if.then72:                                        ; preds = %for.body38, %for.body38, %for.body38
  %call75 = tail call fastcc %struct.rtx_def* @walk_alter_subreg(%struct.rtx_def** %11)
  %15 = load %struct.rtx_def*** %arrayidx40, align 8, !tbaa !1
  store %struct.rtx_def* %call75, %struct.rtx_def** %15, align 8, !tbaa !1
  br label %for.inc80

for.inc80:                                        ; preds = %for.body38, %if.then45, %if.then72
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %16 = load i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 8), align 1, !tbaa !52
  %conv35 = sext i8 %16 to i32
  %17 = trunc i64 %indvars.iv.next to i32
  %cmp36 = icmp slt i32 %17, %conv35
  br i1 %cmp36, label %for.body38, label %for.end82

for.end82:                                        ; preds = %for.inc80, %for.cond34.preheader
  ret void
}

declare i32 @print_rtl_single(%struct._IO_FILE*, %struct.rtx_def*) #1

declare i32 @constrain_operands_cached(i32) #1

; Function Attrs: noreturn
declare void @_fatal_insn_not_found(%struct.rtx_def*, i8*, i32, i8*) #2

declare %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @delete_insn(%struct.rtx_def*) #1

declare %struct.rtx_def* @try_split(%struct.rtx_def*, %struct.rtx_def*, i32) #1

; Function Attrs: noreturn
declare void @_fatal_insn(i8*, %struct.rtx_def*, i8*, i32, i8*) #2

declare %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

declare void @assemble_vtable_entry(%struct.rtx_def*, i64) #1

declare void @extract_insn_cached(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @alter_subreg(%struct.rtx_def** nocapture %xp) #0 {
entry:
  %0 = load %struct.rtx_def** %xp, align 8, !tbaa !1
  %fld = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  %3 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load1 = load i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %4 = load i32* %rtuint, align 4, !tbaa !6
  %conv = zext i32 %4 to i64
  %call = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %1, i32 %bf.clear2, i64 %conv, i32 1, i32 1) #7
  store %struct.rtx_def* %call, %struct.rtx_def** %xp, align 8, !tbaa !1
  br label %if.end40

if.else:                                          ; preds = %entry
  %bf.lshr9 = lshr i32 %bf.load, 16
  %bf.clear10 = and i32 %bf.lshr9, 255
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtuint13 = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %5 = load i32* %rtuint13, align 4, !tbaa !6
  %call14 = tail call %struct.rtx_def* @simplify_subreg(i32 %bf.clear2, %struct.rtx_def* %1, i32 %bf.clear10, i32 %5) #7
  %cmp15 = icmp eq %struct.rtx_def* %call14, null
  br i1 %cmp15, label %if.else18, label %if.then17

if.then17:                                        ; preds = %if.else
  store %struct.rtx_def* %call14, %struct.rtx_def** %xp, align 8, !tbaa !1
  br label %if.end40

if.else18:                                        ; preds = %if.else
  %bf.load19 = load i32* %2, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 61
  br i1 %cmp21, label %if.then23, label %if.else38

if.then23:                                        ; preds = %if.else18
  %call24 = tail call i32 @subreg_hard_regno(%struct.rtx_def* %0, i32 1) #7
  %bf.load25 = load i32* %3, align 8
  %bf.clear26 = and i32 %bf.load25, -65536
  %bf.set = or i32 %bf.clear26, 61
  store i32 %bf.set, i32* %3, align 8
  %rtuint29 = bitcast [1 x %union.rtunion_def]* %fld to i32*
  store i32 %call24, i32* %rtuint29, align 4, !tbaa !6
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtuint32 = bitcast %union.rtunion_def* %arrayidx31 to i32*
  %6 = load i32* %rtuint32, align 4, !tbaa !6
  store i32 %6, i32* %rtuint13, align 4, !tbaa !6
  %bf.clear37 = and i32 %bf.set, -536936387
  store i32 %bf.clear37, i32* %3, align 8
  %.pre = load %struct.rtx_def** %xp, align 8, !tbaa !1
  br label %if.end40

if.else38:                                        ; preds = %if.else18
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 2761, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.alter_subreg, i64 0, i64 0)) #8
  unreachable

if.end40:                                         ; preds = %if.then17, %if.then23, %if.then
  %7 = phi %struct.rtx_def* [ %call14, %if.then17 ], [ %.pre, %if.then23 ], [ %call, %if.then ]
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.rtx_def* @walk_alter_subreg(%struct.rtx_def** nocapture %xp) #0 {
entry:
  %0 = load %struct.rtx_def** %xp, align 8, !tbaa !1
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 75, label %sw.bb
    i32 78, label %sw.bb
    i32 66, label %sw.bb11
    i32 63, label %sw.bb19
  ]

sw.bb:                                            ; preds = %entry, %entry
  %fld = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %call = tail call fastcc %struct.rtx_def* @walk_alter_subreg(%struct.rtx_def** %rtx)
  %2 = getelementptr inbounds [1 x %union.rtunion_def]* %fld, i64 0, i64 0, i32 0
  %call.c = ptrtoint %struct.rtx_def* %call to i64
  store i64 %call.c, i64* %2, align 8, !tbaa !1
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %call7 = tail call fastcc %struct.rtx_def* @walk_alter_subreg(%struct.rtx_def** %rtx6)
  %3 = getelementptr inbounds %union.rtunion_def* %arrayidx5, i64 0, i32 0
  %call7.c = ptrtoint %struct.rtx_def* %call7 to i64
  store i64 %call7.c, i64* %3, align 8, !tbaa !1
  br label %sw.epilog

sw.bb11:                                          ; preds = %entry
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %call15 = tail call fastcc %struct.rtx_def* @walk_alter_subreg(%struct.rtx_def** %rtx14)
  %4 = getelementptr inbounds %union.rtunion_def* %arrayidx13, i64 0, i32 0
  %call15.c = ptrtoint %struct.rtx_def* %call15 to i64
  store i64 %call15.c, i64* %4, align 8, !tbaa !1
  br label %sw.epilog

sw.bb19:                                          ; preds = %entry
  %call20 = tail call %struct.rtx_def* @alter_subreg(%struct.rtx_def** %xp)
  br label %return

sw.epilog:                                        ; preds = %entry, %sw.bb11, %sw.bb
  %5 = load %struct.rtx_def** %xp, align 8, !tbaa !1
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb19
  %retval.0 = phi %struct.rtx_def* [ %5, %sw.epilog ], [ %call20, %sw.bb19 ]
  ret %struct.rtx_def* %retval.0
}

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #1

declare %struct.rtx_def* @simplify_subreg(i32, %struct.rtx_def*, i32, i32) #1

declare i32 @subreg_hard_regno(%struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define void @output_operand_lossage(i8* %msgid, ...) #0 {
entry:
  %fmt_string = alloca i8*, align 8
  %new_message = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !1
  %tobool = icmp ne %struct.rtx_def* %0, null
  %cond = select i1 %tobool, i8* getelementptr inbounds ([16 x i8]* @.str26, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8]* @.str27, i64 0, i64 0)
  %call = call i32 (i8**, i8*, ...)* @asprintf(i8** %fmt_string, i8* getelementptr inbounds ([5 x i8]* @.str28, i64 0, i64 0), i8* %cond, i8* %msgid) #7
  %1 = load i8** %fmt_string, align 8, !tbaa !1
  %call3 = call i32 @vasprintf(i8** %new_message, i8* %1, %struct.__va_list_tag* %arraydecay) #7
  %2 = load %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !1
  %tobool4 = icmp eq %struct.rtx_def* %2, null
  %3 = load i8** %new_message, align 8, !tbaa !1
  br i1 %tobool4, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void (%struct.rtx_def*, i8*, ...)* @error_for_asm(%struct.rtx_def* %2, i8* getelementptr inbounds ([3 x i8]* @.str7, i64 0, i64 0), i8* %3) #7
  %4 = load i8** %fmt_string, align 8, !tbaa !1
  call void @free(i8* %4)
  %5 = load i8** %new_message, align 8, !tbaa !1
  call void @free(i8* %5)
  call void @llvm.va_end(i8* %arraydecay1)
  ret void

if.else:                                          ; preds = %entry
  call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([3 x i8]* @.str7, i64 0, i64 0), i8* %3) #8
  unreachable
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #7

declare i32 @asprintf(i8**, i8*, ...) #1

declare i32 @vasprintf(i8**, i8*, %struct.__va_list_tag*) #1

declare void @error_for_asm(%struct.rtx_def*, i8*, ...) #1

; Function Attrs: noreturn
declare void @internal_error(i8*, ...) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #7

; Function Attrs: nounwind
declare i32 @putc(i32, %struct._IO_FILE* nocapture) #3

; Function Attrs: nounwind uwtable
define internal fastcc void @output_asm_name() #0 {
entry:
  %0 = load %struct.rtx_def** @debug_insn, align 8, !tbaa !1
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %if.end12, label %if.then

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtint, align 4, !tbaa !6
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtint3 = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %3 = load i32* %rtint3, align 4, !tbaa !6
  %idxprom = sext i32 %1 to i64
  %name = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, i32 0
  %4 = load i8** %name, align 8, !tbaa !54
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([10 x i8]* @.str45, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str16, i64 0, i64 0), i32 %3, i8* %4) #7
  %n_alternatives = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, i32 6
  %5 = load i8* %n_alternatives, align 2, !tbaa !55
  %cmp = icmp sgt i8 %5, 1
  br i1 %cmp, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  %6 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %7 = load i32* @which_alternative, align 4, !tbaa !6
  %add = add nsw i32 %7, 1
  %call9 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([4 x i8]* @.str46, i64 0, i64 0), i32 %add) #7
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.then
  %8 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %9 = load %struct.rtx_def** @debug_insn, align 8, !tbaa !1
  %call10 = tail call i32 @get_attr_length(%struct.rtx_def* %9)
  %call11 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([15 x i8]* @.str47, i64 0, i64 0), i32 %call10) #7
  store %struct.rtx_def* null, %struct.rtx_def** @debug_insn, align 8, !tbaa !1
  br label %if.end12

if.end12:                                         ; preds = %entry, %if.end
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @atoi(i8* nocapture) #4

; Function Attrs: nounwind uwtable
define void @output_asm_label(%struct.rtx_def* nocapture readonly %x) #0 {
entry:
  %buf = alloca [256 x i8], align 16
  %0 = getelementptr inbounds [256 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %0) #7
  %1 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 67
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load1.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %bf.load1 = phi i32 [ %bf.load1.pre, %if.then ], [ %bf.load, %entry ]
  %x.addr.0 = phi %struct.rtx_def* [ %2, %if.then ], [ %x, %entry ]
  %bf.clear2 = and i32 %bf.load1, 65535
  switch i32 %bf.clear2, label %if.else [
    i32 36, label %do.body
    i32 37, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %if.end
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx8 to i32*
  %3 = load i32* %rtint, align 4, !tbaa !6
  %cmp9 = icmp eq i32 %3, -88
  br i1 %cmp9, label %do.body, label %if.else

do.body:                                          ; preds = %if.end, %land.lhs.true
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 5
  %rtint13 = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %4 = load i32* %rtint13, align 4, !tbaa !6
  %call = call i32 (i8*, i8*, ...)* @sprintf(i8* %0, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str19, i64 0, i64 0), i32 %4) #7
  br label %if.end14

if.else:                                          ; preds = %if.end, %land.lhs.true
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([28 x i8]* @.str36, i64 0, i64 0))
  br label %if.end14

if.end14:                                         ; preds = %if.else, %do.body
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  call void @assemble_name(%struct._IO_FILE* %5, i8* %0) #7
  call void @llvm.lifetime.end(i64 256, i8* %0) #7
  ret void
}

; Function Attrs: nounwind uwtable
define void @output_address(%struct.rtx_def* %x) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8, !tbaa !1
  %call = call fastcc %struct.rtx_def* @walk_alter_subreg(%struct.rtx_def** %x.addr)
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !1
  %1 = load %struct.rtx_def** %x.addr, align 8, !tbaa !1
  tail call void @print_operand_address(%struct._IO_FILE* %0, %struct.rtx_def* %1) #7
  ret void
}

; Function Attrs: nounwind uwtable
define void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %x) #0 {
entry:
  %buf = alloca [256 x i8], align 16
  %0 = getelementptr inbounds [256 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %0) #7
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load.pre = load i32* %.phi.trans.insert, align 8
  br label %restart

restart:                                          ; preds = %sw.bb97, %entry
  %bf.load = phi i32 [ %bf.load.pre, %entry ], [ %bf.load99, %sw.bb97 ]
  %x.addr.0 = phi %struct.rtx_def* [ %x, %entry ], [ %call98, %sw.bb97 ]
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 59, label %sw.bb
    i32 68, label %sw.bb1
    i32 67, label %sw.bb2
    i32 36, label %do.body
    i32 54, label %sw.bb10
    i32 58, label %sw.bb14
    i32 55, label %sw.bb18
    i32 75, label %sw.bb49
    i32 76, label %sw.bb97
    i32 121, label %sw.bb146
    i32 120, label %sw.bb146
    i32 63, label %sw.bb146
  ]

sw.bb:                                            ; preds = %restart
  %call = call i32 @putc(i32 46, %struct._IO_FILE* %file) #7
  br label %sw.epilog

sw.bb1:                                           ; preds = %restart
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  %1 = load i8** %rtstr, align 8, !tbaa !1
  call void @assemble_name(%struct._IO_FILE* %file, i8* %1) #7
  br label %sw.epilog

sw.bb2:                                           ; preds = %restart
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  br label %do.body

do.body:                                          ; preds = %restart, %sw.bb2
  %x.addr.1 = phi %struct.rtx_def* [ %2, %sw.bb2 ], [ %x.addr.0, %restart ]
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %x.addr.1, i64 0, i32 1, i64 5
  %rtint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %3 = load i32* %rtint, align 4, !tbaa !6
  %call8 = call i32 (i8*, i8*, ...)* @sprintf(i8* %0, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str19, i64 0, i64 0), i32 %3) #7
  call void @assemble_name(%struct._IO_FILE* %file, i8* %0) #7
  br label %sw.epilog

sw.bb10:                                          ; preds = %restart
  %rtwint = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0, i32 0
  %4 = load i64* %rtwint, align 8, !tbaa !50
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([5 x i8]* @.str34, i64 0, i64 0), i64 %4) #7
  br label %sw.epilog

sw.bb14:                                          ; preds = %restart
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx17, align 8, !tbaa !1
  call void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %5)
  br label %sw.epilog

sw.bb18:                                          ; preds = %restart
  %bf.clear20 = and i32 %bf.load, 16711680
  %cmp = icmp eq i32 %bf.clear20, 0
  br i1 %cmp, label %if.then, label %if.else47

if.then:                                          ; preds = %sw.bb18
  %rtwint23 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 2, i32 0
  %6 = load i64* %rtwint23, align 8, !tbaa !50
  %tobool = icmp eq i64 %6, 0
  %rtwint34 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 1, i32 0
  %7 = load i64* %rtwint34, align 8, !tbaa !50
  br i1 %tobool, label %if.else, label %if.then24

if.then24:                                        ; preds = %if.then
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([14 x i8]* @.str37, i64 0, i64 0), i64 %6, i64 %7) #7
  br label %sw.epilog

if.else:                                          ; preds = %if.then
  %cmp35 = icmp slt i64 %7, 0
  br i1 %cmp35, label %if.then36, label %if.else41

if.then36:                                        ; preds = %if.else
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([7 x i8]* @.str38, i64 0, i64 0), i64 %7) #7
  br label %sw.epilog

if.else41:                                        ; preds = %if.else
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([5 x i8]* @.str34, i64 0, i64 0), i64 %7) #7
  br label %sw.epilog

if.else47:                                        ; preds = %sw.bb18
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([26 x i8]* @.str39, i64 0, i64 0))
  br label %sw.epilog

sw.bb49:                                          ; preds = %restart
  %fld50 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1
  %rtx52 = bitcast [1 x %union.rtunion_def]* %fld50 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx52, align 8, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load53 = load i32* %9, align 8
  %bf.clear54 = and i32 %bf.load53, 65535
  %cmp55 = icmp eq i32 %bf.clear54, 54
  br i1 %cmp55, label %if.then56, label %if.else73

if.then56:                                        ; preds = %sw.bb49
  %arrayidx58 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 1
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx59, align 8, !tbaa !1
  call void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %10)
  %11 = load %struct.rtx_def** %rtx52, align 8, !tbaa !1
  %rtwint65 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 0, i32 0
  %12 = load i64* %rtwint65, align 8, !tbaa !50
  %cmp66 = icmp sgt i64 %12, -1
  br i1 %cmp66, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.then56
  %fputc201 = call i32 @fputc(i32 43, %struct._IO_FILE* %file) #7
  %.pre = load %struct.rtx_def** %rtx52, align 8, !tbaa !1
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %if.then56
  %13 = phi %struct.rtx_def* [ %.pre, %if.then67 ], [ %11, %if.then56 ]
  call void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %13)
  br label %sw.epilog

if.else73:                                        ; preds = %sw.bb49
  call void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %8)
  %arrayidx78 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 1
  %rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx79, align 8, !tbaa !1
  %15 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 0
  %bf.load80 = load i32* %15, align 8
  %bf.clear81 = and i32 %bf.load80, 65535
  %cmp82 = icmp eq i32 %bf.clear81, 54
  br i1 %cmp82, label %lor.lhs.false, label %if.then90

lor.lhs.false:                                    ; preds = %if.else73
  %rtwint88 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 0, i32 0
  %16 = load i64* %rtwint88, align 8, !tbaa !50
  %cmp89 = icmp sgt i64 %16, -1
  br i1 %cmp89, label %if.then90, label %if.end92

if.then90:                                        ; preds = %if.else73, %lor.lhs.false
  %fputc198 = call i32 @fputc(i32 43, %struct._IO_FILE* %file) #7
  %.pre243 = load %struct.rtx_def** %rtx79, align 8, !tbaa !1
  br label %if.end92

if.end92:                                         ; preds = %if.then90, %lor.lhs.false
  %17 = phi %struct.rtx_def* [ %.pre243, %if.then90 ], [ %14, %lor.lhs.false ]
  call void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %17)
  br label %sw.epilog

sw.bb97:                                          ; preds = %restart
  %call98 = call %struct.rtx_def* @simplify_subtraction(%struct.rtx_def* %x.addr.0) #7
  %18 = getelementptr inbounds %struct.rtx_def* %call98, i64 0, i32 0
  %bf.load99 = load i32* %18, align 8
  %bf.clear100 = and i32 %bf.load99, 65535
  %cmp101 = icmp eq i32 %bf.clear100, 76
  br i1 %cmp101, label %if.end103, label %restart

if.end103:                                        ; preds = %sw.bb97
  %fld104 = getelementptr inbounds %struct.rtx_def* %call98, i64 0, i32 1
  %rtx106 = bitcast [1 x %union.rtunion_def]* %fld104 to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx106, align 8, !tbaa !1
  call void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %19)
  %fputc = call i32 @fputc(i32 45, %struct._IO_FILE* %file) #7
  %arrayidx109 = getelementptr inbounds %struct.rtx_def* %call98, i64 0, i32 1, i64 1
  %rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**
  %20 = load %struct.rtx_def** %rtx110, align 8, !tbaa !1
  %21 = getelementptr inbounds %struct.rtx_def* %20, i64 0, i32 0
  %bf.load111 = load i32* %21, align 8
  %bf.clear112 = and i32 %bf.load111, 65535
  switch i32 %bf.clear112, label %if.else139 [
    i32 54, label %land.lhs.true
    i32 59, label %if.then135
    i32 68, label %if.then135
  ]

land.lhs.true:                                    ; preds = %if.end103
  %rtwint119 = getelementptr inbounds %struct.rtx_def* %20, i64 0, i32 1, i64 0, i32 0
  %22 = load i64* %rtwint119, align 8, !tbaa !50
  %cmp120 = icmp sgt i64 %22, -1
  br i1 %cmp120, label %if.then135, label %if.else139

if.then135:                                       ; preds = %if.end103, %if.end103, %land.lhs.true
  call void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %20)
  br label %sw.epilog

if.else139:                                       ; preds = %if.end103, %land.lhs.true
  %23 = load i8** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 0), align 8, !tbaa !56
  %call140 = call i32 @fputs(i8* %23, %struct._IO_FILE* %file) #7
  %24 = load %struct.rtx_def** %rtx110, align 8, !tbaa !1
  call void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %24)
  %25 = load i8** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 1), align 8, !tbaa !57
  %call144 = call i32 @fputs(i8* %25, %struct._IO_FILE* %file) #7
  br label %sw.epilog

sw.bb146:                                         ; preds = %restart, %restart, %restart
  %arrayidx148 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtx149 = bitcast %union.rtunion_def* %arrayidx148 to %struct.rtx_def**
  %26 = load %struct.rtx_def** %rtx149, align 8, !tbaa !1
  call void @output_addr_const(%struct._IO_FILE* %file, %struct.rtx_def* %26)
  br label %sw.epilog

sw.default:                                       ; preds = %restart
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([30 x i8]* @.str42, i64 0, i64 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then135, %if.else139, %if.end69, %if.end92, %if.else47, %if.then36, %if.else41, %if.then24, %sw.default, %sw.bb146, %sw.bb14, %sw.bb10, %do.body, %sw.bb1, %sw.bb
  call void @llvm.lifetime.end(i64 256, i8* %0) #7
  ret void
}

declare void @print_operand_address(%struct._IO_FILE*, %struct.rtx_def*) #1

declare %struct.rtx_def* @simplify_subtraction(%struct.rtx_def*) #1

; Function Attrs: nounwind uwtable
define void @asm_fprintf(%struct._IO_FILE* nocapture %file, i8* nocapture readonly %p, ...) #0 {
entry:
  %buf = alloca [10 x i8], align 1
  %argptr = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %argptr to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %arrayidx = getelementptr inbounds [10 x i8]* %buf, i64 0, i64 0
  store i8 37, i8* %arrayidx, align 1, !tbaa !5
  %0 = load i8* %p, align 1, !tbaa !5
  %tobool189 = icmp eq i8 %0, 0
  br i1 %tobool189, label %while.end124, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %arrayidx29 = getelementptr inbounds [10 x i8]* %buf, i64 0, i64 1
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %argptr, i64 0, i64 0, i32 0
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag]* %argptr, i64 0, i64 0, i32 3
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %argptr, i64 0, i64 0, i32 2
  %fp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %argptr, i64 0, i64 0, i32 1
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %2 = phi i8 [ %0, %while.body.lr.ph ], [ %9, %while.cond.backedge ]
  %p.pn = phi i8* [ %p, %while.body.lr.ph ], [ %p.addr.0.be, %while.cond.backedge ]
  %incdec.ptr191 = getelementptr inbounds i8* %p.pn, i64 1
  %conv = sext i8 %2 to i32
  switch i32 %conv, label %sw.default120 [
    i32 123, label %for.cond.preheader
    i32 124, label %while.cond16
    i32 125, label %while.cond.backedge
    i32 37, label %sw.bb27
  ]

for.cond.preheader:                               ; preds = %while.body
  %3 = load i32* @dialect_number, align 4, !tbaa !6
  %cmp184 = icmp sgt i32 %3, 0
  br i1 %cmp184, label %while.cond3.preheader, label %while.cond.backedge

while.cond3.preheader:                            ; preds = %for.cond.preheader, %while.end
  %i.0186 = phi i32 [ %inc, %while.end ], [ 0, %for.cond.preheader ]
  %p.addr.1185 = phi i8* [ %incdec.ptr14.p.addr.3, %while.end ], [ %incdec.ptr191, %for.cond.preheader ]
  br label %while.cond3

while.cond3:                                      ; preds = %while.cond3.preheader, %land.rhs
  %p.addr.2 = phi i8* [ %incdec.ptr6, %land.rhs ], [ %p.addr.1185, %while.cond3.preheader ]
  %4 = load i8* %p.addr.2, align 1, !tbaa !5
  %tobool5 = icmp eq i8 %4, 0
  br i1 %tobool5, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond3
  %incdec.ptr6 = getelementptr inbounds i8* %p.addr.2, i64 1
  %cmp8 = icmp eq i8 %4, 124
  br i1 %cmp8, label %land.rhs.while.end_crit_edge, label %while.cond3

land.rhs.while.end_crit_edge:                     ; preds = %land.rhs
  %.pre = load i8* %incdec.ptr6, align 1, !tbaa !5
  %phitmp = icmp eq i8 %.pre, 124
  br label %while.end

while.end:                                        ; preds = %while.cond3, %land.rhs.while.end_crit_edge
  %5 = phi i1 [ %phitmp, %land.rhs.while.end_crit_edge ], [ false, %while.cond3 ]
  %p.addr.3 = phi i8* [ %incdec.ptr6, %land.rhs.while.end_crit_edge ], [ %p.addr.2, %while.cond3 ]
  %incdec.ptr14 = getelementptr inbounds i8* %p.addr.3, i64 1
  %incdec.ptr14.p.addr.3 = select i1 %5, i8* %incdec.ptr14, i8* %p.addr.3
  %inc = add nsw i32 %i.0186, 1
  %cmp = icmp slt i32 %inc, %3
  br i1 %cmp, label %while.cond3.preheader, label %while.cond.backedge

while.cond16:                                     ; preds = %while.body, %land.rhs19
  %p.addr.5 = phi i8* [ %incdec.ptr20, %land.rhs19 ], [ %incdec.ptr191, %while.body ]
  %6 = load i8* %p.addr.5, align 1, !tbaa !5
  %tobool18 = icmp eq i8 %6, 0
  br i1 %tobool18, label %while.cond.backedge, label %land.rhs19

land.rhs19:                                       ; preds = %while.cond16
  %incdec.ptr20 = getelementptr inbounds i8* %p.addr.5, i64 1
  %cmp22 = icmp eq i8 %6, 125
  br i1 %cmp22, label %while.cond.backedge, label %while.cond16

sw.bb27:                                          ; preds = %while.body
  %incdec.ptr28 = getelementptr inbounds i8* %p.pn, i64 2
  %c.0169 = load i8* %incdec.ptr191, align 1
  %conv31170 = sext i8 %c.0169 to i32
  %and171 = and i32 %conv31170, 255
  %idxprom167172 = zext i32 %and171 to i64
  %arrayidx32173 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom167172
  %7 = load i16* %arrayidx32173, align 2, !tbaa !51
  %and34174 = and i16 %7, 4
  %cmp37175 = icmp eq i8 %c.0169, 46
  %not.tobool35176 = icmp ne i16 %and34174, 0
  %cmp37.177 = or i1 %cmp37175, %not.tobool35176
  br i1 %cmp37.177, label %while.body39, label %while.end42

while.body39:                                     ; preds = %sw.bb27, %while.body39
  %c.0180 = phi i8 [ %c.0, %while.body39 ], [ %c.0169, %sw.bb27 ]
  %q.0179 = phi i8* [ %incdec.ptr40, %while.body39 ], [ %arrayidx29, %sw.bb27 ]
  %p.addr.6178 = phi i8* [ %incdec.ptr41, %while.body39 ], [ %incdec.ptr28, %sw.bb27 ]
  %incdec.ptr40 = getelementptr inbounds i8* %q.0179, i64 1
  store i8 %c.0180, i8* %q.0179, align 1, !tbaa !5
  %incdec.ptr41 = getelementptr inbounds i8* %p.addr.6178, i64 1
  %c.0 = load i8* %p.addr.6178, align 1
  %conv31 = sext i8 %c.0 to i32
  %and = and i32 %conv31, 255
  %idxprom167 = zext i32 %and to i64
  %arrayidx32 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom167
  %8 = load i16* %arrayidx32, align 2, !tbaa !51
  %and34 = and i16 %8, 4
  %cmp37 = icmp eq i8 %c.0, 46
  %not.tobool35 = icmp ne i16 %and34, 0
  %cmp37. = or i1 %cmp37, %not.tobool35
  br i1 %cmp37., label %while.body39, label %while.end42

while.end42:                                      ; preds = %while.body39, %sw.bb27
  %conv31.lcssa = phi i32 [ %conv31170, %sw.bb27 ], [ %conv31, %while.body39 ]
  %c.0.lcssa = phi i8 [ %c.0169, %sw.bb27 ], [ %c.0, %while.body39 ]
  %q.0.lcssa = phi i8* [ %arrayidx29, %sw.bb27 ], [ %incdec.ptr40, %while.body39 ]
  %p.addr.6.lcssa = phi i8* [ %incdec.ptr28, %sw.bb27 ], [ %incdec.ptr41, %while.body39 ]
  switch i32 %conv31.lcssa, label %sw.default [
    i32 37, label %sw.bb44
    i32 100, label %sw.bb45
    i32 105, label %sw.bb45
    i32 117, label %sw.bb45
    i32 120, label %sw.bb45
    i32 112, label %sw.bb45
    i32 88, label %sw.bb45
    i32 111, label %sw.bb45
    i32 119, label %sw.bb50
    i32 108, label %sw.bb69
    i32 101, label %sw.bb87
    i32 102, label %sw.bb87
    i32 103, label %sw.bb87
    i32 115, label %sw.bb100
    i32 79, label %while.cond.backedge
    i32 82, label %while.cond.backedge
    i32 73, label %while.cond.backedge
    i32 76, label %sw.bb116
    i32 85, label %sw.bb118
  ]

sw.bb44:                                          ; preds = %while.end42
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([3 x i8]* @.str43, i64 0, i64 0)) #7
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %land.rhs19, %while.cond16, %while.end, %for.cond.preheader, %sw.bb44, %vaarg.end, %vaarg.end66, %vaarg.end84, %vaarg.end97, %vaarg.end113, %while.end42, %while.end42, %while.end42, %sw.bb116, %sw.bb118, %sw.default120, %while.body
  %p.addr.0.be = phi i8* [ %incdec.ptr191, %sw.default120 ], [ %p.addr.6.lcssa, %sw.bb118 ], [ %p.addr.6.lcssa, %sw.bb116 ], [ %p.addr.6.lcssa, %while.end42 ], [ %p.addr.6.lcssa, %while.end42 ], [ %p.addr.6.lcssa, %while.end42 ], [ %p.addr.6.lcssa, %vaarg.end113 ], [ %p.addr.6.lcssa, %vaarg.end97 ], [ %incdec.ptr71, %vaarg.end84 ], [ %incdec.ptr53, %vaarg.end66 ], [ %p.addr.6.lcssa, %vaarg.end ], [ %p.addr.6.lcssa, %sw.bb44 ], [ %incdec.ptr191, %while.body ], [ %incdec.ptr191, %for.cond.preheader ], [ %incdec.ptr14.p.addr.3, %while.end ], [ %incdec.ptr20, %land.rhs19 ], [ %p.addr.5, %while.cond16 ]
  %9 = load i8* %p.addr.0.be, align 1, !tbaa !5
  %tobool = icmp eq i8 %9, 0
  br i1 %tobool, label %while.end124, label %while.body

sw.bb45:                                          ; preds = %while.end42, %while.end42, %while.end42, %while.end42, %while.end42, %while.end42, %while.end42
  %incdec.ptr46 = getelementptr inbounds i8* %q.0.lcssa, i64 1
  store i8 %c.0.lcssa, i8* %q.0.lcssa, align 1, !tbaa !5
  store i8 0, i8* %incdec.ptr46, align 1, !tbaa !5
  %gp_offset = load i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %sw.bb45
  %reg_save_area = load i8** %1, align 16
  %10 = sext i32 %gp_offset to i64
  %11 = getelementptr i8* %reg_save_area, i64 %10
  %12 = add i32 %gp_offset, 8
  store i32 %12, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %sw.bb45
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %11, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to i32*
  %13 = load i32* %vaarg.addr, align 4
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* %arrayidx, i32 %13) #7
  br label %while.cond.backedge

sw.bb50:                                          ; preds = %while.end42
  %incdec.ptr51 = getelementptr inbounds i8* %q.0.lcssa, i64 1
  store i8 108, i8* %q.0.lcssa, align 1, !tbaa !5
  %incdec.ptr52 = getelementptr inbounds i8* %q.0.lcssa, i64 2
  store i8 108, i8* %incdec.ptr51, align 1, !tbaa !5
  %incdec.ptr53 = getelementptr inbounds i8* %p.addr.6.lcssa, i64 1
  %14 = load i8* %p.addr.6.lcssa, align 1, !tbaa !5
  %incdec.ptr54 = getelementptr inbounds i8* %q.0.lcssa, i64 3
  store i8 %14, i8* %incdec.ptr52, align 1, !tbaa !5
  store i8 0, i8* %incdec.ptr54, align 1, !tbaa !5
  %gp_offset58 = load i32* %gp_offset_p, align 16
  %fits_in_gp59 = icmp ult i32 %gp_offset58, 41
  br i1 %fits_in_gp59, label %vaarg.in_reg60, label %vaarg.in_mem62

vaarg.in_reg60:                                   ; preds = %sw.bb50
  %reg_save_area61 = load i8** %1, align 16
  %15 = sext i32 %gp_offset58 to i64
  %16 = getelementptr i8* %reg_save_area61, i64 %15
  %17 = add i32 %gp_offset58, 8
  store i32 %17, i32* %gp_offset_p, align 16
  br label %vaarg.end66

vaarg.in_mem62:                                   ; preds = %sw.bb50
  %overflow_arg_area64 = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next65 = getelementptr i8* %overflow_arg_area64, i64 8
  store i8* %overflow_arg_area.next65, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end66

vaarg.end66:                                      ; preds = %vaarg.in_mem62, %vaarg.in_reg60
  %vaarg.addr67.in = phi i8* [ %16, %vaarg.in_reg60 ], [ %overflow_arg_area64, %vaarg.in_mem62 ]
  %vaarg.addr67 = bitcast i8* %vaarg.addr67.in to i64*
  %18 = load i64* %vaarg.addr67, align 8
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* %arrayidx, i64 %18) #7
  br label %while.cond.backedge

sw.bb69:                                          ; preds = %while.end42
  %incdec.ptr70 = getelementptr inbounds i8* %q.0.lcssa, i64 1
  store i8 %c.0.lcssa, i8* %q.0.lcssa, align 1, !tbaa !5
  %incdec.ptr71 = getelementptr inbounds i8* %p.addr.6.lcssa, i64 1
  %19 = load i8* %p.addr.6.lcssa, align 1, !tbaa !5
  %incdec.ptr72 = getelementptr inbounds i8* %q.0.lcssa, i64 2
  store i8 %19, i8* %incdec.ptr70, align 1, !tbaa !5
  store i8 0, i8* %incdec.ptr72, align 1, !tbaa !5
  %gp_offset76 = load i32* %gp_offset_p, align 16
  %fits_in_gp77 = icmp ult i32 %gp_offset76, 41
  br i1 %fits_in_gp77, label %vaarg.in_reg78, label %vaarg.in_mem80

vaarg.in_reg78:                                   ; preds = %sw.bb69
  %reg_save_area79 = load i8** %1, align 16
  %20 = sext i32 %gp_offset76 to i64
  %21 = getelementptr i8* %reg_save_area79, i64 %20
  %22 = add i32 %gp_offset76, 8
  store i32 %22, i32* %gp_offset_p, align 16
  br label %vaarg.end84

vaarg.in_mem80:                                   ; preds = %sw.bb69
  %overflow_arg_area82 = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next83 = getelementptr i8* %overflow_arg_area82, i64 8
  store i8* %overflow_arg_area.next83, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end84

vaarg.end84:                                      ; preds = %vaarg.in_mem80, %vaarg.in_reg78
  %vaarg.addr85.in = phi i8* [ %21, %vaarg.in_reg78 ], [ %overflow_arg_area82, %vaarg.in_mem80 ]
  %vaarg.addr85 = bitcast i8* %vaarg.addr85.in to i64*
  %23 = load i64* %vaarg.addr85, align 8
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* %arrayidx, i64 %23) #7
  br label %while.cond.backedge

sw.bb87:                                          ; preds = %while.end42, %while.end42, %while.end42
  %incdec.ptr88 = getelementptr inbounds i8* %q.0.lcssa, i64 1
  store i8 %c.0.lcssa, i8* %q.0.lcssa, align 1, !tbaa !5
  store i8 0, i8* %incdec.ptr88, align 1, !tbaa !5
  %fp_offset = load i32* %fp_offset_p, align 4
  %fits_in_fp = icmp ult i32 %fp_offset, 161
  br i1 %fits_in_fp, label %vaarg.in_reg91, label %vaarg.in_mem93

vaarg.in_reg91:                                   ; preds = %sw.bb87
  %reg_save_area92 = load i8** %1, align 16
  %24 = sext i32 %fp_offset to i64
  %25 = getelementptr i8* %reg_save_area92, i64 %24
  %26 = add i32 %fp_offset, 16
  store i32 %26, i32* %fp_offset_p, align 4
  br label %vaarg.end97

vaarg.in_mem93:                                   ; preds = %sw.bb87
  %overflow_arg_area95 = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next96 = getelementptr i8* %overflow_arg_area95, i64 8
  store i8* %overflow_arg_area.next96, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end97

vaarg.end97:                                      ; preds = %vaarg.in_mem93, %vaarg.in_reg91
  %vaarg.addr98.in = phi i8* [ %25, %vaarg.in_reg91 ], [ %overflow_arg_area95, %vaarg.in_mem93 ]
  %vaarg.addr98 = bitcast i8* %vaarg.addr98.in to double*
  %27 = load double* %vaarg.addr98, align 8
  %call99 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* %arrayidx, double %27) #7
  br label %while.cond.backedge

sw.bb100:                                         ; preds = %while.end42
  %incdec.ptr101 = getelementptr inbounds i8* %q.0.lcssa, i64 1
  store i8 %c.0.lcssa, i8* %q.0.lcssa, align 1, !tbaa !5
  store i8 0, i8* %incdec.ptr101, align 1, !tbaa !5
  %gp_offset105 = load i32* %gp_offset_p, align 16
  %fits_in_gp106 = icmp ult i32 %gp_offset105, 41
  br i1 %fits_in_gp106, label %vaarg.in_reg107, label %vaarg.in_mem109

vaarg.in_reg107:                                  ; preds = %sw.bb100
  %reg_save_area108 = load i8** %1, align 16
  %28 = sext i32 %gp_offset105 to i64
  %29 = getelementptr i8* %reg_save_area108, i64 %28
  %30 = add i32 %gp_offset105, 8
  store i32 %30, i32* %gp_offset_p, align 16
  br label %vaarg.end113

vaarg.in_mem109:                                  ; preds = %sw.bb100
  %overflow_arg_area111 = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next112 = getelementptr i8* %overflow_arg_area111, i64 8
  store i8* %overflow_arg_area.next112, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end113

vaarg.end113:                                     ; preds = %vaarg.in_mem109, %vaarg.in_reg107
  %vaarg.addr114.in = phi i8* [ %29, %vaarg.in_reg107 ], [ %overflow_arg_area111, %vaarg.in_mem109 ]
  %vaarg.addr114 = bitcast i8* %vaarg.addr114.in to i8**
  %31 = load i8** %vaarg.addr114, align 8
  %call115 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %file, i8* %arrayidx, i8* %31) #7
  br label %while.cond.backedge

sw.bb116:                                         ; preds = %while.end42
  %fputc = call i32 @fputc(i32 46, %struct._IO_FILE* %file) #7
  br label %while.cond.backedge

sw.bb118:                                         ; preds = %while.end42
  %32 = load i8** @user_label_prefix, align 8, !tbaa !1
  %call119 = call i32 @fputs(i8* %32, %struct._IO_FILE* %file) #7
  br label %while.cond.backedge

sw.default:                                       ; preds = %while.end42
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 3648, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.asm_fprintf, i64 0, i64 0)) #8
  unreachable

sw.default120:                                    ; preds = %while.body
  %call122 = call i32 @fputc(i32 %conv, %struct._IO_FILE* %file) #7
  br label %while.cond.backedge

while.end124:                                     ; preds = %while.cond.backedge, %entry
  call void @llvm.va_end(i8* %arraydecay1)
  ret void
}

; Function Attrs: nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) #3

; Function Attrs: nounwind uwtable
define void @split_double(%struct.rtx_def* %value, %struct.rtx_def** nocapture %first, %struct.rtx_def** nocapture %second) #0 {
entry:
  %l = alloca [2 x i64], align 16
  %0 = getelementptr inbounds %struct.rtx_def* %value, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.then38 [
    i32 54, label %if.then
    i32 55, label %if.else39
  ]

if.then:                                          ; preds = %entry
  %1 = load i32* @target_flags, align 4, !tbaa !6
  %and = lshr i32 %1, 20
  %2 = and i32 %and, 32
  %3 = shl nuw nsw i32 %2, 1
  %mul = add i32 %3, 64
  %cmp1 = icmp ult i32 %mul, 65
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %sub105 = or i32 %2, 31
  %sh_prom = zext i32 %sub105 to i64
  %shl = shl i64 1, %sh_prom
  %shl6 = shl i64 %shl, 1
  %dec = add i64 %shl6, -1
  %neg = sub i64 0, %shl6
  %rtwint = getelementptr inbounds %struct.rtx_def* %value, i64 0, i32 1, i64 0, i32 0
  %4 = load i64* %rtwint, align 8, !tbaa !50
  %and7 = and i64 %4, %dec
  %and8 = and i64 %and7, %shl
  %tobool9 = icmp eq i64 %and8, 0
  %or = select i1 %tobool9, i64 0, i64 %neg
  %and7.or = or i64 %or, %and7
  %shr = lshr i64 %4, %sh_prom
  %shr19 = lshr i64 %shr, 1
  %and20 = and i64 %shr19, %dec
  %and21 = and i64 %and20, %shl
  %tobool22 = icmp eq i64 %and21, 0
  %or24 = select i1 %tobool22, i64 0, i64 %neg
  %high.0 = or i64 %or24, %and20
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %and7.or) #7
  store %struct.rtx_def* %call, %struct.rtx_def** %first, align 8, !tbaa !1
  %call26 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %high.0) #7
  store %struct.rtx_def* %call26, %struct.rtx_def** %second, align 8, !tbaa !1
  br label %if.end67

if.else:                                          ; preds = %if.then
  %rtwint30 = getelementptr inbounds %struct.rtx_def* %value, i64 0, i32 1, i64 0, i32 0
  %5 = load i64* %rtwint30, align 8, !tbaa !50
  %cmp31 = icmp slt i64 %5, 0
  %6 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !tbaa !1
  %7 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  %cond32 = select i1 %cmp31, %struct.rtx_def* %6, %struct.rtx_def* %7
  store %struct.rtx_def* %value, %struct.rtx_def** %first, align 8, !tbaa !1
  store %struct.rtx_def* %cond32, %struct.rtx_def** %second, align 8, !tbaa !1
  br label %if.end67

if.then38:                                        ; preds = %entry
  store %struct.rtx_def* %value, %struct.rtx_def** %first, align 8, !tbaa !1
  %8 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !1
  store %struct.rtx_def* %8, %struct.rtx_def** %second, align 8, !tbaa !1
  br label %if.end67

if.else39:                                        ; preds = %entry
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear41 = and i32 %bf.lshr, 255
  %cmp42 = icmp eq i32 %bf.clear41, 0
  br i1 %cmp42, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else39
  %idxprom104 = zext i32 %bf.clear41 to i64
  %arrayidx46 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom104
  %9 = load i32* %arrayidx46, align 4, !tbaa !5
  %cmp47 = icmp eq i32 %9, 1
  br i1 %cmp47, label %if.then48, label %do.body

if.then48:                                        ; preds = %lor.lhs.false, %if.else39
  %rtwint51 = getelementptr inbounds %struct.rtx_def* %value, i64 0, i32 1, i64 1, i32 0
  %10 = load i64* %rtwint51, align 8, !tbaa !50
  %call52 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %10) #7
  store %struct.rtx_def* %call52, %struct.rtx_def** %first, align 8, !tbaa !1
  %rtwint55 = getelementptr inbounds %struct.rtx_def* %value, i64 0, i32 1, i64 2, i32 0
  %11 = load i64* %rtwint55, align 8, !tbaa !50
  %call56 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %11) #7
  store %struct.rtx_def* %call56, %struct.rtx_def** %second, align 8, !tbaa !1
  br label %if.end67

do.body:                                          ; preds = %lor.lhs.false
  %rtwint60 = getelementptr inbounds %struct.rtx_def* %value, i64 0, i32 1, i64 1, i32 0
  %arraydecay = getelementptr inbounds [2 x i64]* %l, i64 0, i64 0
  %tmpcast = bitcast i64* %rtwint60 to %struct.realvaluetype*
  call void @etardouble(%struct.realvaluetype* byval align 8 %tmpcast, i64* %arraydecay) #7
  %12 = load i64* %arraydecay, align 16, !tbaa !58
  %call62 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %12) #7
  store %struct.rtx_def* %call62, %struct.rtx_def** %first, align 8, !tbaa !1
  %arrayidx63 = getelementptr inbounds [2 x i64]* %l, i64 0, i64 1
  %13 = load i64* %arrayidx63, align 8, !tbaa !58
  %call64 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %13) #7
  store %struct.rtx_def* %call64, %struct.rtx_def** %second, align 8, !tbaa !1
  br label %if.end67

if.end67:                                         ; preds = %if.then38, %do.body, %if.then48, %if.then2, %if.else
  ret void
}

declare void @etardouble(%struct.realvaluetype* byval align 8, i64*) #1

; Function Attrs: nounwind uwtable
define i32 @leaf_function_p() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !1
  %profile = getelementptr inbounds %struct.function* %0, i64 0, i32 56
  %1 = bitcast i24* %profile to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 16384
  %2 = load i32* @profile_arc_flag, align 4
  %3 = or i32 %bf.clear, %2
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %if.end, label %return

if.end:                                           ; preds = %entry
  %call = tail call %struct.rtx_def* @get_insns() #7
  %tobool2128 = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool2128, label %for.end, label %for.body

for.body:                                         ; preds = %if.end, %for.inc
  %insn.0129 = phi %struct.rtx_def* [ %15, %for.inc ], [ %call, %if.end ]
  %5 = getelementptr inbounds %struct.rtx_def* %insn.0129, i64 0, i32 0
  %bf.load3 = load i32* %5, align 8
  %6 = and i32 %bf.load3, 16842751
  %7 = icmp eq i32 %6, 34
  br i1 %7, label %return, label %if.end10

if.end10:                                         ; preds = %for.body
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp13 = icmp eq i32 %bf.clear4, 32
  br i1 %cmp13, label %land.lhs.true14, label %for.inc

land.lhs.true14:                                  ; preds = %if.end10
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.0129, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %9 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load15 = load i32* %9, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 24
  br i1 %cmp17, label %land.lhs.true18, label %for.inc

land.lhs.true18:                                  ; preds = %land.lhs.true14
  %arrayidx23 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtvec_def**
  %10 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !1
  %arrayidx24 = getelementptr inbounds %struct.rtvec_def* %10, i64 0, i32 1, i64 0
  %11 = load %struct.rtx_def** %arrayidx24, align 8, !tbaa !1
  %12 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 0
  %bf.load25 = load i32* %12, align 8
  %13 = and i32 %bf.load25, 16842751
  %14 = icmp eq i32 %13, 34
  br i1 %14, label %return, label %for.inc

for.inc:                                          ; preds = %if.end10, %land.lhs.true14, %land.lhs.true18
  %arrayidx44 = getelementptr inbounds %struct.rtx_def* %insn.0129, i64 0, i32 1, i64 2
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx45, align 8, !tbaa !1
  %tobool2 = icmp eq %struct.rtx_def* %15, null
  br i1 %tobool2, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.end
  %16 = load %struct.function** @cfun, align 8, !tbaa !1
  %epilogue_delay_list = getelementptr inbounds %struct.function* %16, i64 0, i32 55
  %link.0123 = load %struct.rtx_def** %epilogue_delay_list, align 8
  %tobool47124 = icmp eq %struct.rtx_def* %link.0123, null
  br i1 %tobool47124, label %return, label %for.body48

for.body48:                                       ; preds = %for.end, %for.inc99
  %link.0125 = phi %struct.rtx_def* [ %link.0, %for.inc99 ], [ %link.0123, %for.end ]
  %fld49 = getelementptr inbounds %struct.rtx_def* %link.0125, i64 0, i32 1
  %rtx51 = bitcast [1 x %union.rtunion_def]* %fld49 to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx51, align 8, !tbaa !1
  %18 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 0
  %bf.load52 = load i32* %18, align 8
  %19 = and i32 %bf.load52, 16842751
  %20 = icmp eq i32 %19, 34
  br i1 %20, label %return, label %if.end61

if.end61:                                         ; preds = %for.body48
  %bf.clear53 = and i32 %bf.load52, 65535
  %cmp64 = icmp eq i32 %bf.clear53, 32
  br i1 %cmp64, label %land.lhs.true65, label %for.inc99

land.lhs.true65:                                  ; preds = %if.end61
  %arrayidx67 = getelementptr inbounds %struct.rtx_def* %17, i64 0, i32 1, i64 3
  %rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**
  %21 = load %struct.rtx_def** %rtx68, align 8, !tbaa !1
  %22 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 0
  %bf.load69 = load i32* %22, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %cmp71 = icmp eq i32 %bf.clear70, 24
  br i1 %cmp71, label %land.lhs.true72, label %for.inc99

land.lhs.true72:                                  ; preds = %land.lhs.true65
  %arrayidx77 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 1, i64 0
  %rtvec78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtvec_def**
  %23 = load %struct.rtvec_def** %rtvec78, align 8, !tbaa !1
  %arrayidx80 = getelementptr inbounds %struct.rtvec_def* %23, i64 0, i32 1, i64 0
  %24 = load %struct.rtx_def** %arrayidx80, align 8, !tbaa !1
  %25 = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 0
  %bf.load81 = load i32* %25, align 8
  %26 = and i32 %bf.load81, 16842751
  %27 = icmp eq i32 %26, 34
  br i1 %27, label %return, label %for.inc99

for.inc99:                                        ; preds = %if.end61, %land.lhs.true65, %land.lhs.true72
  %arrayidx101 = getelementptr inbounds %struct.rtx_def* %link.0125, i64 0, i32 1, i64 1
  %rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**
  %link.0 = load %struct.rtx_def** %rtx102, align 8
  %tobool47 = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool47, label %return, label %for.body48

return:                                           ; preds = %land.lhs.true18, %for.body, %for.body48, %land.lhs.true72, %for.inc99, %for.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %for.end ], [ 0, %for.body48 ], [ 0, %land.lhs.true72 ], [ 1, %for.inc99 ], [ 0, %for.body ], [ 0, %land.lhs.true18 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @final_forward_branch_p(%struct.rtx_def* nocapture readonly %insn) #0 {
entry:
  %0 = load i32** @uid_shuid, align 8, !tbaa !1
  %tobool = icmp eq i32* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 3878, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.final_forward_branch_p, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %fld = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1
  %rtint = bitcast [1 x %union.rtunion_def]* %fld to i32*
  %1 = load i32* %rtint, align 4, !tbaa !6
  %idxprom = sext i32 %1 to i64
  %arrayidx1 = getelementptr inbounds i32* %0, i64 %idxprom
  %2 = load i32* %arrayidx1, align 4, !tbaa !6
  %arrayidx3 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 7
  %rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtint6 = bitcast %union.rtunion_def* %arrayidx5 to i32*
  %4 = load i32* %rtint6, align 4, !tbaa !6
  %idxprom7 = sext i32 %4 to i64
  %arrayidx8 = getelementptr inbounds i32* %0, i64 %idxprom7
  %5 = load i32* %arrayidx8, align 4, !tbaa !6
  %tobool9 = icmp ne i32 %2, 0
  %tobool10 = icmp ne i32 %5, 0
  %or.cond = and i1 %tobool9, %tobool10
  br i1 %or.cond, label %if.end12, label %if.then11

if.then11:                                        ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i32 3883, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.final_forward_branch_p, i64 0, i64 0)) #8
  unreachable

if.end12:                                         ; preds = %if.end
  %cmp = icmp slt i32 %2, %5
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare void @print_operand(%struct._IO_FILE*, %struct.rtx_def*, i32) #1

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* readonly %op, i32* nocapture %paddressp) #0 {
entry:
  %inner_addressp = alloca i32, align 4
  store i32 0, i32* %paddressp, align 4, !tbaa !6
  %cmp = icmp eq %struct.rtx_def* %op, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %return [
    i32 61, label %land.lhs.true
    i32 66, label %if.end13
  ]

land.lhs.true:                                    ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !6
  %cmp2 = icmp ugt i32 %1, 52
  br i1 %cmp2, label %if.then3, label %return

if.then3:                                         ; preds = %land.lhs.true
  %idxprom = zext i32 %1 to i64
  %2 = load %struct.function** @cfun, align 8, !tbaa !1
  %emit = getelementptr inbounds %struct.function* %2, i64 0, i32 3
  %3 = load %struct.emit_status** %emit, align 8, !tbaa !59
  %regno_decl = getelementptr inbounds %struct.emit_status* %3, i64 0, i32 11
  %4 = load %union.tree_node*** %regno_decl, align 8, !tbaa !62
  %arrayidx7 = getelementptr inbounds %union.tree_node** %4, i64 %idxprom
  %5 = load %union.tree_node** %arrayidx7, align 8, !tbaa !1
  br label %return

if.end13:                                         ; preds = %if.end
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx15 to %struct.mem_attrs**
  %6 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !1
  %cmp16 = icmp eq %struct.mem_attrs* %6, null
  br i1 %cmp16, label %if.end35, label %cond.false

cond.false:                                       ; preds = %if.end13
  %expr20 = getelementptr inbounds %struct.mem_attrs* %6, i64 0, i32 1
  %7 = load %union.tree_node** %expr20, align 8, !tbaa !64
  %phitmp = icmp eq %union.tree_node* %7, null
  br i1 %phitmp, label %if.end35, label %return

if.end35:                                         ; preds = %cond.false, %if.end13
  store i32 1, i32* %paddressp, align 4, !tbaa !6
  %arrayidx37 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !1
  %call = call fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* %8, i32* %inner_addressp)
  %tobool = icmp eq %union.tree_node* %call, null
  %9 = load i32* %inner_addressp, align 4
  %tobool39 = icmp ne i32 %9, 0
  %or.cond = or i1 %tobool, %tobool39
  br i1 %or.cond, label %if.else41, label %return

if.else41:                                        ; preds = %if.end35
  %10 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 0
  %bf.load42 = load i32* %10, align 8
  %bf.clear43 = and i32 %bf.load42, 65535
  %cmp44 = icmp eq i32 %bf.clear43, 75
  br i1 %cmp44, label %land.lhs.true45, label %while.cond.preheader

land.lhs.true45:                                  ; preds = %if.else41
  %arrayidx47 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 1
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx48, align 8, !tbaa !1
  %call49 = call fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* %11, i32* %inner_addressp)
  %tobool50 = icmp eq %union.tree_node* %call49, null
  br i1 %tobool50, label %land.lhs.true45.while.cond.preheader_crit_edge, label %return

land.lhs.true45.while.cond.preheader_crit_edge:   ; preds = %land.lhs.true45
  %bf.load5495.pre = load i32* %10, align 8
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %land.lhs.true45.while.cond.preheader_crit_edge, %if.else41
  %bf.load5495 = phi i32 [ %bf.load5495.pre, %land.lhs.true45.while.cond.preheader_crit_edge ], [ %bf.load42, %if.else41 ]
  %bf.clear5596 = and i32 %bf.load5495, 65535
  %idxprom569497 = zext i32 %bf.clear5596 to i64
  %arrayidx5798 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom569497
  %12 = load i8* %arrayidx5798, align 1, !tbaa !5
  %.off99 = add i8 %12, -49
  %13 = icmp ult i8 %.off99, 2
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %op.addr.0100 = phi %struct.rtx_def* [ %14, %while.body ], [ %8, %while.cond.preheader ]
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %op.addr.0100, i64 0, i32 1, i64 0
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx69, align 8, !tbaa !1
  %15 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 0
  %bf.load54 = load i32* %15, align 8
  %bf.clear55 = and i32 %bf.load54, 65535
  %idxprom5694 = zext i32 %bf.clear55 to i64
  %arrayidx57 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom5694
  %16 = load i8* %arrayidx57, align 1, !tbaa !5
  %.off = add i8 %16, -49
  %17 = icmp ult i8 %.off, 2
  br i1 %17, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %while.cond.preheader
  %op.addr.0.lcssa = phi %struct.rtx_def* [ %8, %while.cond.preheader ], [ %14, %while.body ]
  %call70 = call fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* %op.addr.0.lcssa, i32* %inner_addressp)
  %18 = load i32* %inner_addressp, align 4, !tbaa !6
  %tobool71 = icmp ne i32 %18, 0
  %cond75 = select i1 %tobool71, %union.tree_node* null, %union.tree_node* %call70
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true, %cond.false, %land.lhs.true45, %if.end35, %entry, %while.end, %if.then3
  %retval.0 = phi %union.tree_node* [ %5, %if.then3 ], [ %cond75, %while.end ], [ null, %entry ], [ %call, %if.end35 ], [ %call49, %land.lhs.true45 ], [ %7, %cond.false ], [ null, %land.lhs.true ], [ null, %if.end ]
  ret %union.tree_node* %retval.0
}

declare void @print_mem_expr(%struct._IO_FILE*, %union.tree_node*) #1

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #7

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !3, metadata !3, i64 0}
!6 = metadata !{metadata !7, metadata !7, i64 0}
!7 = metadata !{metadata !"int", metadata !3, i64 0}
!8 = metadata !{metadata !9, metadata !7, i64 0}
!9 = metadata !{metadata !"rtvec_def", metadata !7, i64 0, metadata !3, i64 8}
!10 = metadata !{metadata !11, metadata !12, i64 0}
!11 = metadata !{metadata !"label_alignment", metadata !12, i64 0, metadata !12, i64 2}
!12 = metadata !{metadata !"short", metadata !3, i64 0}
!13 = metadata !{metadata !14, metadata !2, i64 0}
!14 = metadata !{metadata !"basic_block_def", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !7, i64 88, metadata !7, i64 92, metadata !15, i64 96, metadata !7, i64 104, metadata !7, i64 108}
!15 = metadata !{metadata !"long long", metadata !3, i64 0}
!16 = metadata !{metadata !17, metadata !7, i64 48}
!17 = metadata !{metadata !"edge_def", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !7, i64 48, metadata !7, i64 52, metadata !15, i64 56}
!18 = metadata !{metadata !17, metadata !2, i64 16}
!19 = metadata !{metadata !14, metadata !7, i64 104}
!20 = metadata !{metadata !17, metadata !7, i64 52}
!21 = metadata !{metadata !11, metadata !12, i64 2}
!22 = metadata !{metadata !23, metadata !2, i64 80}
!23 = metadata !{metadata !"gcc_debug_hooks", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !2, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !2, i64 152}
!24 = metadata !{metadata !25, metadata !2, i64 104}
!25 = metadata !{metadata !"tree_decl", metadata !26, i64 0, metadata !2, i64 24, metadata !7, i64 32, metadata !7, i64 36, metadata !2, i64 40, metadata !3, i64 48, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 49, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 50, metadata !7, i64 51, metadata !7, i64 51, metadata !7, i64 51, metadata !7, i64 51, metadata !7, i64 51, metadata !3, i64 51, metadata !7, i64 51, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 52, metadata !7, i64 53, metadata !7, i64 53, metadata !7, i64 53, metadata !7, i64 53, metadata !7, i64 53, metadata !3, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80, metadata !2, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !2, i64 152, metadata !3, i64 160, metadata !2, i64 168, metadata !2, i64 176, metadata !2, i64 184, metadata !15, i64 192, metadata !2, i64 200}
!26 = metadata !{metadata !"tree_common", metadata !2, i64 0, metadata !2, i64 8, metadata !3, i64 16, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 17, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 18, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19, metadata !7, i64 19}
!27 = metadata !{metadata !28, metadata !2, i64 96}
!28 = metadata !{metadata !"gcc_target", metadata !29, i64 0, metadata !31, i64 168, metadata !2, i64 240, metadata !2, i64 248, metadata !2, i64 256, metadata !2, i64 264, metadata !2, i64 272, metadata !2, i64 280, metadata !2, i64 288, metadata !2, i64 296, metadata !2, i64 304, metadata !2, i64 312, metadata !2, i64 320, metadata !32, i64 328, metadata !32, i64 329, metadata !2, i64 336}
!29 = metadata !{metadata !"asm_out", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !30, i64 24, metadata !30, i64 56, metadata !2, i64 88, metadata !2, i64 96, metadata !2, i64 104, metadata !2, i64 112, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !2, i64 152, metadata !2, i64 160}
!30 = metadata !{metadata !"asm_int_op", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24}
!31 = metadata !{metadata !"sched", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !2, i64 64}
!32 = metadata !{metadata !"_Bool", metadata !3, i64 0}
!33 = metadata !{metadata !23, metadata !2, i64 112}
!34 = metadata !{metadata !28, metadata !2, i64 120}
!35 = metadata !{metadata !23, metadata !2, i64 96}
!36 = metadata !{metadata !37, metadata !38, i64 0}
!37 = metadata !{metadata !"varray_head_tag", metadata !38, i64 0, metadata !38, i64 8, metadata !38, i64 16, metadata !2, i64 24, metadata !3, i64 32}
!38 = metadata !{metadata !"long", metadata !3, i64 0}
!39 = metadata !{metadata !14, metadata !7, i64 88}
!40 = metadata !{metadata !28, metadata !2, i64 104}
!41 = metadata !{metadata !28, metadata !2, i64 112}
!42 = metadata !{metadata !23, metadata !2, i64 88}
!43 = metadata !{metadata !23, metadata !2, i64 48}
!44 = metadata !{metadata !23, metadata !2, i64 56}
!45 = metadata !{metadata !23, metadata !2, i64 72}
!46 = metadata !{metadata !23, metadata !2, i64 152}
!47 = metadata !{metadata !48, metadata !2, i64 8}
!48 = metadata !{metadata !"insn_data", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !3, i64 32, metadata !3, i64 33, metadata !3, i64 34, metadata !3, i64 35}
!49 = metadata !{metadata !48, metadata !3, i64 35}
!50 = metadata !{metadata !15, metadata !15, i64 0}
!51 = metadata !{metadata !12, metadata !12, i64 0}
!52 = metadata !{metadata !53, metadata !3, i64 997}
!53 = metadata !{metadata !"recog_data", metadata !3, i64 0, metadata !3, i64 240, metadata !3, i64 480, metadata !3, i64 720, metadata !3, i64 840, metadata !3, i64 960, metadata !3, i64 992, metadata !3, i64 996, metadata !3, i64 997, metadata !3, i64 998, metadata !2, i64 1000}
!54 = metadata !{metadata !48, metadata !2, i64 0}
!55 = metadata !{metadata !48, metadata !3, i64 34}
!56 = metadata !{metadata !28, metadata !2, i64 0}
!57 = metadata !{metadata !28, metadata !2, i64 8}
!58 = metadata !{metadata !38, metadata !38, i64 0}
!59 = metadata !{metadata !60, metadata !2, i64 24}
!60 = metadata !{metadata !"function", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !7, i64 64, metadata !7, i64 68, metadata !7, i64 72, metadata !7, i64 76, metadata !2, i64 80, metadata !61, i64 88, metadata !2, i64 120, metadata !2, i64 128, metadata !2, i64 136, metadata !2, i64 144, metadata !7, i64 152, metadata !2, i64 160, metadata !2, i64 168, metadata !2, i64 176, metadata !2, i64 184, metadata !2, i64 192, metadata !2, i64 200, metadata !2, i64 208, metadata !2, i64 216, metadata !2, i64 224, metadata !2, i64 232, metadata !2, i64 240, metadata !2, i64 248, metadata !2, i64 256, metadata !15, i64 264, metadata !2, i64 272, metadata !2, i64 280, metadata !2, i64 288, metadata !2, i64 296, metadata !7, i64 304, metadata !2, i64 312, metadata !2, i64 320, metadata !7, i64 328, metadata !7, i64 332, metadata !7, i64 336, metadata !2, i64 344, metadata !7, i64 352, metadata !7, i64 356, metadata !2, i64 360, metadata !2, i64 368, metadata !2, i64 376, metadata !7, i64 384, metadata !7, i64 388, metadata !2, i64 392, metadata !7, i64 400, metadata !7, i64 404, metadata !2, i64 408, metadata !2, i64 416, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 424, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 425, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426, metadata !7, i64 426}
!61 = metadata !{metadata !"ix86_args", metadata !7, i64 0, metadata !7, i64 4, metadata !7, i64 8, metadata !7, i64 12, metadata !7, i64 16, metadata !7, i64 20, metadata !7, i64 24}
!62 = metadata !{metadata !63, metadata !2, i64 72}
!63 = metadata !{metadata !"emit_status", metadata !7, i64 0, metadata !7, i64 4, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !2, i64 32, metadata !7, i64 40, metadata !7, i64 44, metadata !2, i64 48, metadata !7, i64 56, metadata !2, i64 64, metadata !2, i64 72, metadata !2, i64 80}
!64 = metadata !{metadata !65, metadata !2, i64 8}
!65 = metadata !{metadata !"", metadata !15, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !2, i64 24, metadata !7, i64 32}
