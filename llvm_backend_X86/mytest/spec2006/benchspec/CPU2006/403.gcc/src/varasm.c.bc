; ModuleID = 'varasm.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i1 (%union.tree_node*)*, i1 (%union.tree_node*)*, void ()*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, i32 (%union.tree_node*, i8*, i32)*, i8, i8, i1 ()* }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i1 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void (i8*, i32)*, void ()*, void ()*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.rtx_def = type { i32, [1 x %union.rtunion_def] }
%union.rtunion_def = type { i64 }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, %struct.rtx_def* (i32, %struct.rtx_def*)* }
%union.tree_node = type { %struct.tree_decl }
%struct.tree_decl = type { %struct.tree_common, i8*, i32, i32, %union.tree_node*, i48, %union.anon, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %union.anon.1, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_decl* }
%struct.tree_common = type { %union.tree_node*, %union.tree_node*, i32 }
%union.anon = type { i64 }
%union.anon.1 = type { %struct.function* }
%struct.function = type { %struct.eh_status*, %struct.stmt_status*, %struct.expr_status*, %struct.emit_status*, %struct.varasm_status*, i8*, %union.tree_node*, %struct.function*, i32, i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def*, %struct.rtx_def*, i8*, %struct.initial_value_struct*, i32, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.temp_slot*, i32, i32, i32, %struct.var_refs_queue*, i32, i32, i8*, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.machine_function*, i32, i32, %struct.language_function*, %struct.rtx_def*, i24 }
%struct.eh_status = type opaque
%struct.stmt_status = type opaque
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack*, i32, i32, i8*, i32, i8*, %union.tree_node**, %struct.rtx_def** }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.constant_descriptor**, %struct.pool_constant**, %struct.pool_constant*, %struct.pool_constant*, i64, %struct.rtx_def* }
%struct.constant_descriptor = type { %struct.constant_descriptor*, i8*, %struct.rtx_def*, %union.anon.4 }
%union.anon.4 = type { x86_fp80 }
%struct.pool_constant = type { %struct.constant_descriptor*, %struct.pool_constant*, %struct.pool_constant*, %struct.rtx_def*, i32, i32, i32, i64, i32 }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.initial_value_struct = type opaque
%struct.temp_slot = type opaque
%struct.var_refs_queue = type { %struct.rtx_def*, i32, i32, %struct.var_refs_queue* }
%struct.machine_function = type opaque
%struct.language_function = type opaque
%struct.lang_decl = type opaque
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i1 (%union.tree_node*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void ()*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)* }
%struct.realvaluetype = type { [3 x i64] }
%struct.deferred_constant = type { %struct.deferred_constant*, %union.tree_node*, i32, i32 }
%struct.lang_hooks = type { i8*, i64, void ()*, i32 (i32, i8**)*, void ()*, i8* (i8*)*, void ()*, void ()*, i64 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (%struct.rtx_def*, %union.tree_node*)*, i32 (%union.tree_node*)*, i8, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (i32)*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_tree_dump }
%struct.lang_hooks_for_tree_inlining = type { %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, i8*)*, i32 (%union.tree_node**)*, i32 (%union.tree_node*)*, %union.tree_node* (i8*, %union.tree_node*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8*, i32*, i8*)*, i32 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_tree_dump = type { i32 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.varray_head_tag = type { i64, i64, i64, i8*, %union.varray_data_tag }
%union.varray_data_tag = type { [1 x %struct.const_equiv_data] }
%struct.const_equiv_data = type { %struct.rtx_def*, i32 }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.anon.2, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, %struct.lang_type* }
%union.anon.2 = type { i8* }
%struct.lang_type = type opaque
%struct.anon.3 = type { i8*, i32 }
%union.real_extract = type { %struct.realvaluetype }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.addr_const = type { %struct.rtx_def*, i64 }
%struct.rtx_const = type { i32, %union.anon.5 }
%union.anon.5 = type { [16 x i64] }

@in_section = internal unnamed_addr global i32 0, align 4
@asm_out_file = external global %struct._IO_FILE*
@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str1 = private unnamed_addr constant [18 x i8] c"\09.section\09.rodata\00", align 1
@.str2 = private unnamed_addr constant [7 x i8] c"\09.text\00", align 1
@.str3 = private unnamed_addr constant [7 x i8] c"\09.data\00", align 1
@in_named_htab = internal unnamed_addr global %struct.htab* null, align 8
@in_named_name = internal unnamed_addr global i8* null, align 8
@.str4 = private unnamed_addr constant [9 x i8] c"varasm.c\00", align 1
@__FUNCTION__.named_section_flags = private unnamed_addr constant [20 x i8] c"named_section_flags\00", align 1
@targetm = external global %struct.gcc_target
@tree_code_type = external global [256 x i8]
@__FUNCTION__.named_section = private unnamed_addr constant [14 x i8] c"named_section\00", align 1
@.str5 = private unnamed_addr constant [34 x i8] c"%s causes a section type conflict\00", align 1
@.str6 = private unnamed_addr constant [6 x i8] c"\09.bss\00", align 1
@flag_writable_strings = external global i32
@global_trees = external global [51 x %union.tree_node*]
@flag_pic = external global i32
@.str7 = private unnamed_addr constant [10 x i8] c".data.rel\00", align 1
@.str8 = private unnamed_addr constant [16 x i8] c".data.rel.local\00", align 1
@.str9 = private unnamed_addr constant [13 x i8] c".data.rel.ro\00", align 1
@.str10 = private unnamed_addr constant [19 x i8] c".data.rel.ro.local\00", align 1
@flag_merge_constants = external global i32
@.str11 = private unnamed_addr constant [18 x i8] c".gcc_except_table\00", align 1
@mode_bitsize = external constant [59 x i16]
@mode_size = external constant [59 x i8]
@.str12 = private unnamed_addr constant [17 x i8] c".rodata.str%d.%d\00", align 1
@.str13 = private unnamed_addr constant [16 x i8] c"\09.subsection\09-1\00", align 1
@.str14 = private unnamed_addr constant [14 x i8] c".rodata.cst%d\00", align 1
@_sch_istable = external constant [256 x i16]
@reg_names = external global [53 x i8*]
@decode_reg_name.table = internal unnamed_addr constant <{ { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] } }> <{ { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str15, i32 0, i32 0), i32 0, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str16, i32 0, i32 0), i32 1, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str17, i32 0, i32 0), i32 2, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str18, i32 0, i32 0), i32 3, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str19, i32 0, i32 0), i32 4, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str20, i32 0, i32 0), i32 5, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str21, i32 0, i32 0), i32 6, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str22, i32 0, i32 0), i32 7, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str23, i32 0, i32 0), i32 0, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str24, i32 0, i32 0), i32 1, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str25, i32 0, i32 0), i32 2, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str26, i32 0, i32 0), i32 3, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str27, i32 0, i32 0), i32 4, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str28, i32 0, i32 0), i32 5, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str29, i32 0, i32 0), i32 6, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str30, i32 0, i32 0), i32 7, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str31, i32 0, i32 0), i32 0, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str32, i32 0, i32 0), i32 1, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str33, i32 0, i32 0), i32 2, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str34, i32 0, i32 0), i32 3, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str35, i32 0, i32 0), i32 0, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str36, i32 0, i32 0), i32 1, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str37, i32 0, i32 0), i32 2, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([3 x i8]* @.str38, i32 0, i32 0), i32 3, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str39, i32 0, i32 0), i32 8, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str40, i32 0, i32 0), i32 9, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i32 10, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str42, i32 0, i32 0), i32 11, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str43, i32 0, i32 0), i32 12, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str44, i32 0, i32 0), i32 13, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str45, i32 0, i32 0), i32 14, [4 x i8] undef }, { i8*, i32, [4 x i8] } { i8* getelementptr inbounds ([4 x i8]* @.str46, i32 0, i32 0), i32 15, [4 x i8] undef } }>, align 16
@.str15 = private unnamed_addr constant [4 x i8] c"eax\00", align 1
@.str16 = private unnamed_addr constant [4 x i8] c"edx\00", align 1
@.str17 = private unnamed_addr constant [4 x i8] c"ecx\00", align 1
@.str18 = private unnamed_addr constant [4 x i8] c"ebx\00", align 1
@.str19 = private unnamed_addr constant [4 x i8] c"esi\00", align 1
@.str20 = private unnamed_addr constant [4 x i8] c"edi\00", align 1
@.str21 = private unnamed_addr constant [4 x i8] c"ebp\00", align 1
@.str22 = private unnamed_addr constant [4 x i8] c"esp\00", align 1
@.str23 = private unnamed_addr constant [4 x i8] c"rax\00", align 1
@.str24 = private unnamed_addr constant [4 x i8] c"rdx\00", align 1
@.str25 = private unnamed_addr constant [4 x i8] c"rcx\00", align 1
@.str26 = private unnamed_addr constant [4 x i8] c"rbx\00", align 1
@.str27 = private unnamed_addr constant [4 x i8] c"rsi\00", align 1
@.str28 = private unnamed_addr constant [4 x i8] c"rdi\00", align 1
@.str29 = private unnamed_addr constant [4 x i8] c"rbp\00", align 1
@.str30 = private unnamed_addr constant [4 x i8] c"rsp\00", align 1
@.str31 = private unnamed_addr constant [3 x i8] c"al\00", align 1
@.str32 = private unnamed_addr constant [3 x i8] c"dl\00", align 1
@.str33 = private unnamed_addr constant [3 x i8] c"cl\00", align 1
@.str34 = private unnamed_addr constant [3 x i8] c"bl\00", align 1
@.str35 = private unnamed_addr constant [3 x i8] c"ah\00", align 1
@.str36 = private unnamed_addr constant [3 x i8] c"dh\00", align 1
@.str37 = private unnamed_addr constant [3 x i8] c"ch\00", align 1
@.str38 = private unnamed_addr constant [3 x i8] c"bh\00", align 1
@.str39 = private unnamed_addr constant [4 x i8] c"mm0\00", align 1
@.str40 = private unnamed_addr constant [4 x i8] c"mm1\00", align 1
@.str41 = private unnamed_addr constant [4 x i8] c"mm2\00", align 1
@.str42 = private unnamed_addr constant [4 x i8] c"mm3\00", align 1
@.str43 = private unnamed_addr constant [4 x i8] c"mm4\00", align 1
@.str44 = private unnamed_addr constant [4 x i8] c"mm5\00", align 1
@.str45 = private unnamed_addr constant [4 x i8] c"mm6\00", align 1
@.str46 = private unnamed_addr constant [4 x i8] c"mm7\00", align 1
@.str47 = private unnamed_addr constant [7 x i8] c"memory\00", align 1
@.str48 = private unnamed_addr constant [3 x i8] c"cc\00", align 1
@__FUNCTION__.make_decl_rtl = private unnamed_addr constant [14 x i8] c"make_decl_rtl\00", align 1
@lang_set_decl_assembler_name = external global void (%union.tree_node*)*
@.str49 = private unnamed_addr constant [37 x i8] c"register name not specified for `%s'\00", align 1
@.str50 = private unnamed_addr constant [31 x i8] c"invalid register name for `%s'\00", align 1
@.str51 = private unnamed_addr constant [48 x i8] c"data type of `%s' isn't suitable for a register\00", align 1
@.str52 = private unnamed_addr constant [57 x i8] c"register specified for `%s' isn't suitable for data type\00", align 1
@.str53 = private unnamed_addr constant [43 x i8] c"global register variable has initial value\00", align 1
@.str54 = private unnamed_addr constant [57 x i8] c"volatile register variables don't work as you might wish\00", align 1
@mode_class = external constant [59 x i32]
@target_flags = external global i32
@.str55 = private unnamed_addr constant [51 x i8] c"register name given for non-register variable `%s'\00", align 1
@.str56 = private unnamed_addr constant [6 x i8] c"%s.%d\00", align 1
@var_labelno = common global i32 0, align 4
@flag_volatile_global = external global i32
@flag_volatile_static = external global i32
@ix86_debug_addr_string = external global i8*
@stderr = external constant %struct._IO_FILE*
@.str57 = private unnamed_addr constant [24 x i8] c"Encode %s, public = %d\0A\00", align 1
@__FUNCTION__.make_var_volatile = private unnamed_addr constant [18 x i8] c"make_var_volatile\00", align 1
@.str58 = private unnamed_addr constant [12 x i8] c"\09.align %d\0A\00", align 1
@.str59 = private unnamed_addr constant [5 x i8] c"\09%s\0A\00", align 1
@.str60 = private unnamed_addr constant [27 x i8] c"%s\22___DTOR_LIST__\22,22,0,0,\00", align 1
@.str61 = private unnamed_addr constant [9 x i8] c"\09.stabs\09\00", align 1
@.str62 = private unnamed_addr constant [7 x i8] c".dtors\00", align 1
@.str63 = private unnamed_addr constant [12 x i8] c".dtors.%.5u\00", align 1
@.str64 = private unnamed_addr constant [27 x i8] c"%s\22___CTOR_LIST__\22,22,0,0,\00", align 1
@.str65 = private unnamed_addr constant [7 x i8] c".ctors\00", align 1
@.str66 = private unnamed_addr constant [12 x i8] c".ctors.%.5u\00", align 1
@flag_function_sections = external global i32
@align_functions_log = external global i32
@align_functions = external global i32
@.str67 = private unnamed_addr constant [14 x i8] c"\09.p2align %d\0A\00", align 1
@.str68 = private unnamed_addr constant [18 x i8] c"\09.p2align %d,,%d\0A\00", align 1
@debug_hooks = external global %struct.gcc_debug_hooks*
@first_global_object_name = common global i8* null, align 8
@weak_global_object_name = common global i8* null, align 8
@.str70 = private unnamed_addr constant [8 x i8] c"\09.type\09\00", align 1
@.str71 = private unnamed_addr constant [4 x i8] c"@%s\00", align 1
@.str72 = private unnamed_addr constant [9 x i8] c"function\00", align 1
@.str73 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@flag_inhibit_size_directive = external global i32
@assemble_end_function.labelno = internal unnamed_addr global i32 0, align 4
@.str74 = private unnamed_addr constant [7 x i8] c"*.%s%u\00", align 1
@.str75 = private unnamed_addr constant [4 x i8] c"Lfe\00", align 1
@.str76 = private unnamed_addr constant [8 x i8] c".%s%u:\0A\00", align 1
@.str77 = private unnamed_addr constant [8 x i8] c"\09.size\09\00", align 1
@flag_syntax_only = external global i32
@const_int_rtx = external global [129 x %struct.rtx_def*]
@.str80 = private unnamed_addr constant [6 x i8] c"%s%u\0A\00", align 1
@.str81 = private unnamed_addr constant [8 x i8] c"\09.zero\09\00", align 1
@.str82 = private unnamed_addr constant [3 x i8] c"\22\0A\00", align 1
@.str83 = private unnamed_addr constant [4 x i8] c"%s\22\00", align 1
@.str84 = private unnamed_addr constant [10 x i8] c"\09.string\09\00", align 1
@.str85 = private unnamed_addr constant [257 x i8] c"\01\01\01\01\01\01\01\01btn\01fralign 1
@.str86 = private unnamed_addr constant [6 x i8] c"\5C%03o\00", align 1
@.str87 = private unnamed_addr constant [9 x i8] c"\09.ascii\09\00", align 1
@last_assemble_variable_decl = common global %union.tree_node* null, align 8
@.str88 = private unnamed_addr constant [33 x i8] c"storage size of `%s' isn't known\00", align 1
@.str89 = private unnamed_addr constant [35 x i8] c"size of variable `%s' is too large\00", align 1
@.str90 = private unnamed_addr constant [74 x i8] c"alignment of `%s' is greater than maximum object file alignment. Using %d\00", align 1
@flag_data_sections = external global i32
@.str91 = private unnamed_addr constant [7 x i8] c"object\00", align 1
@size_directive_output = common global i32 0, align 4
@.str92 = private unnamed_addr constant [5 x i8] c"%lld\00", align 1
@__FUNCTION__.assemble_external = private unnamed_addr constant [18 x i8] c"assemble_external\00", align 1
@.str93 = private unnamed_addr constant [8 x i8] c".globl \00", align 1
@.str95 = private unnamed_addr constant [5 x i8] c"%U%s\00", align 1
@.str96 = private unnamed_addr constant [3 x i8] c"LF\00", align 1
@const_labelno = common global i32 0, align 4
@.str97 = private unnamed_addr constant [9 x i8] c"\09.local\09\00", align 1
@.str98 = private unnamed_addr constant [8 x i8] c"\09.comm\09\00", align 1
@.str99 = private unnamed_addr constant [8 x i8] c",%u,%u\0A\00", align 1
@__FUNCTION__.assemble_integer = private unnamed_addr constant [17 x i8] c"assemble_integer\00", align 1
@__FUNCTION__.assemble_real = private unnamed_addr constant [14 x i8] c"assemble_real\00", align 1
@__FUNCTION__.immed_double_const = private unnamed_addr constant [19 x i8] c"immed_double_const\00", align 1
@cfun = external global %struct.function*
@current_function_decl = external global %union.tree_node*
@dconst0 = external global %struct.realvaluetype
@const_tiny_rtx = external global [3 x [59 x %struct.rtx_def*]]
@dconst1 = external global %struct.realvaluetype
@dconst2 = external global %struct.realvaluetype
@defer_addressed_constants_flag = internal unnamed_addr global i32 0, align 4
@deferred_constants = internal unnamed_addr global %struct.deferred_constant* null, align 8
@const_hash_table = internal global [1009 x %struct.constant_descriptor*] zeroinitializer, align 16
@.str100 = private unnamed_addr constant [3 x i8] c"LC\00", align 1
@const_alias_set = internal unnamed_addr global i64 0, align 8
@const_str_htab = internal global %struct.htab* null, align 8
@word_mode = external global i32
@__FUNCTION__.output_constant_pool = private unnamed_addr constant [21 x i8] c"output_constant_pool\00", align 1
@inner_mode_array = external constant [59 x i32]
@mode_unit_size = external constant [59 x i8]
@lang_hooks = external constant %struct.lang_hooks
@__FUNCTION__.output_constant = private unnamed_addr constant [16 x i8] c"output_constant\00", align 1
@.str101 = private unnamed_addr constant [49 x i8] c"initializer for integer value is too complicated\00", align 1
@.str102 = private unnamed_addr constant [58 x i8] c"initializer for floating value is not a floating constant\00", align 1
@.str103 = private unnamed_addr constant [29 x i8] c"unknown set constructor type\00", align 1
@.str104 = private unnamed_addr constant [49 x i8] c"weak declaration of `%s' must precede definition\00", align 1
@.str105 = private unnamed_addr constant [73 x i8] c"weak declaration of `%s' after first use results in unspecified behavior\00", align 1
@weak_decls = internal global %union.tree_node* null, align 8
@.str106 = private unnamed_addr constant [40 x i8] c"weak declaration of `%s' must be public\00", align 1
@.str107 = private unnamed_addr constant [8 x i8] c"\09.weak\09\00", align 1
@.str108 = private unnamed_addr constant [7 x i8] c"\09.set\09\00", align 1
@__FUNCTION__.make_decl_one_only = private unnamed_addr constant [19 x i8] c"make_decl_one_only\00", align 1
@.str109 = private unnamed_addr constant [5 x i8] c".bss\00", align 1
@.str110 = private unnamed_addr constant [6 x i8] c".bss.\00", align 1
@.str111 = private unnamed_addr constant [17 x i8] c".gnu.linkonce.b.\00", align 1
@.str112 = private unnamed_addr constant [6 x i8] c".sbss\00", align 1
@.str113 = private unnamed_addr constant [7 x i8] c".sbss.\00", align 1
@.str114 = private unnamed_addr constant [18 x i8] c".gnu.linkonce.sb.\00", align 1
@__FUNCTION__.default_no_named_section = private unnamed_addr constant [25 x i8] c"default_no_named_section\00", align 1
@.str115 = private unnamed_addr constant [14 x i8] c"\09.section\09%s\0A\00", align 1
@.str116 = private unnamed_addr constant [7 x i8] c"nobits\00", align 1
@.str117 = private unnamed_addr constant [9 x i8] c"progbits\00", align 1
@.str118 = private unnamed_addr constant [26 x i8] c"\09.section\09%s,\22%s\22,@%s,%d\0A\00", align 1
@.str119 = private unnamed_addr constant [23 x i8] c"\09.section\09%s,\22%s\22,@%s\0A\00", align 1
@.str120 = private unnamed_addr constant [19 x i8] c"\09.section\09%s,\22%s\22\0A\00", align 1
@.str121 = private unnamed_addr constant [15 x i8] c"\09.linkonce %s\0A\00", align 1
@.str122 = private unnamed_addr constant [8 x i8] c"discard\00", align 1
@.str123 = private unnamed_addr constant [10 x i8] c"same_size\00", align 1
@.str124 = private unnamed_addr constant [16 x i8] c"\09.vtable_entry \00", align 1
@.str125 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str126 = private unnamed_addr constant [18 x i8] c"\09.vtable_inherit \00", align 1
@ggc_pending_trees = external global %struct.varray_head_tag*
@__FUNCTION__.output_constructor = private unnamed_addr constant [19 x i8] c"output_constructor\00", align 1
@.str127 = private unnamed_addr constant [38 x i8] c"invalid initial value for member `%s'\00", align 1
@sizetype_tab = external global [6 x %union.tree_node*]
@rtx_class = external constant [153 x i8]
@rtx_format = external constant [153 x i8*]
@rtx_length = external constant [153 x i8]
@__FUNCTION__.mark_constants = private unnamed_addr constant [15 x i8] c"mark_constants\00", align 1
@__FUNCTION__.find_pool_constant = private unnamed_addr constant [19 x i8] c"find_pool_constant\00", align 1
@__FUNCTION__.decode_rtx_const = private unnamed_addr constant [17 x i8] c"decode_rtx_const\00", align 1
@__FUNCTION__.copy_constant = private unnamed_addr constant [14 x i8] c"copy_constant\00", align 1
@permanent_obstack = external global %struct.obstack
@__FUNCTION__.record_constant_1 = private unnamed_addr constant [18 x i8] c"record_constant_1\00", align 1
@__FUNCTION__.decode_addr_const = private unnamed_addr constant [18 x i8] c"decode_addr_const\00", align 1
@__FUNCTION__.const_hash = private unnamed_addr constant [11 x i8] c"const_hash\00", align 1
@resolve_unique_section.prefixes = internal unnamed_addr constant [4 x [2 x i8*]] [[2 x i8*] [i8* getelementptr inbounds ([7 x i8]* @.str128, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str129, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8]* @.str130, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str131, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8]* @.str132, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str133, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8]* @.str110, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8]* @.str111, i32 0, i32 0)]], align 16
@.str128 = private unnamed_addr constant [7 x i8] c".text.\00", align 1
@.str129 = private unnamed_addr constant [17 x i8] c".gnu.linkonce.t.\00", align 1
@.str130 = private unnamed_addr constant [9 x i8] c".rodata.\00", align 1
@.str131 = private unnamed_addr constant [17 x i8] c".gnu.linkonce.r.\00", align 1
@.str132 = private unnamed_addr constant [7 x i8] c".data.\00", align 1
@.str133 = private unnamed_addr constant [17 x i8] c".gnu.linkonce.d.\00", align 1
@.str134 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

; Function Attrs: nounwind uwtable
define void @const_section() #0 {
entry:
  %0 = load i32* @in_section, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 5
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #1

; Function Attrs: nounwind uwtable
define void @text_section() #0 {
entry:
  %0 = load i32* @in_section, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0)) #6
  store i32 1, i32* @in_section, align 4, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @data_section() #0 {
entry:
  %0 = load i32* @in_section, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %if.end3, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str3, i64 0, i64 0)) #6
  store i32 2, i32* @in_section, align 4, !tbaa !1
  br label %if.end3

if.end3:                                          ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @force_data_section() #0 {
data_section.exit:
  store i32 0, i32* @in_section, align 4, !tbaa !1
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str3, i64 0, i64 0)) #6
  store i32 2, i32* @in_section, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind uwtable
define void @readonly_data_section() #0 {
entry:
  %0 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i = icmp eq i32 %0, 5
  br i1 %cmp.i, label %const_section.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %const_section.exit

const_section.exit:                               ; preds = %entry, %if.then.i
  ret void
}

; Function Attrs: nounwind readonly uwtable
define i32 @in_text_section() #2 {
entry:
  %0 = load i32* @in_section, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 1
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly uwtable
define i32 @in_data_section() #2 {
entry:
  %0 = load i32* @in_section, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 2
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define i32 @get_named_section_flags(i8* %section) #0 {
entry:
  %0 = load %struct.htab** @in_named_htab, align 8, !tbaa !4
  %call = tail call i32 @htab_hash_string(i8* %section) #6
  %call1 = tail call i8** @htab_find_slot_with_hash(%struct.htab* %0, i8* %section, i32 %call, i32 0) #6
  %tobool = icmp eq i8** %call1, null
  br i1 %tobool, label %cond.end, label %cond.true

cond.true:                                        ; preds = %entry
  %1 = load i8** %call1, align 8
  %flags = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %flags to i32*
  %3 = load i32* %2, align 4, !tbaa !6
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ 0, %entry ]
  ret i32 %cond
}

declare i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #3

declare i32 @htab_hash_string(i8*) #3

; Function Attrs: nounwind uwtable
define zeroext i1 @named_section_first_declaration(i8* %name) #0 {
entry:
  %0 = load %struct.htab** @in_named_htab, align 8, !tbaa !4
  %call = tail call i32 @htab_hash_string(i8* %name) #6
  %call1 = tail call i8** @htab_find_slot_with_hash(%struct.htab* %0, i8* %name, i32 %call, i32 0) #6
  %1 = load i8** %call1, align 8
  %2 = getelementptr inbounds i8* %1, i64 12
  %3 = load i8* %2, align 1, !tbaa !10, !range !11
  %tobool = icmp eq i8 %3, 0
  br i1 %tobool, label %if.then, label %return

if.then:                                          ; preds = %entry
  store i8 1, i8* %2, align 1, !tbaa !10
  br label %return

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi i1 [ true, %if.then ], [ false, %entry ]
  ret i1 %retval.0
}

; Function Attrs: nounwind uwtable
define zeroext i1 @set_named_section_flags(i8* %section, i32 %flags) #0 {
entry:
  %0 = load %struct.htab** @in_named_htab, align 8, !tbaa !4
  %call = tail call i32 @htab_hash_string(i8* %section) #6
  %call2 = tail call i8** @htab_find_slot_with_hash(%struct.htab* %0, i8* %section, i32 %call, i32 1) #6
  %1 = load i8** %call2, align 8
  %tobool = icmp eq i8* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call3 = tail call noalias i8* @xmalloc(i64 16) #6
  store i8* %call3, i8** %call2, align 8, !tbaa !4
  %call4 = tail call i8* @ggc_alloc_string(i8* %section, i32 -1) #6
  %name = bitcast i8* %call3 to i8**
  store i8* %call4, i8** %name, align 8, !tbaa !12
  %flags5 = getelementptr inbounds i8* %call3, i64 8
  %2 = bitcast i8* %flags5 to i32*
  store i32 %flags, i32* %2, align 4, !tbaa !6
  %3 = getelementptr inbounds i8* %call3, i64 12
  store i8 0, i8* %3, align 1, !tbaa !10
  br label %if.end8

if.else:                                          ; preds = %entry
  %flags6 = getelementptr inbounds i8* %1, i64 8
  %4 = bitcast i8* %flags6 to i32*
  %5 = load i32* %4, align 4, !tbaa !6
  %cmp = icmp eq i32 %5, %flags
  br i1 %cmp, label %if.end8, label %return

if.end8:                                          ; preds = %if.else, %if.then
  br label %return

return:                                           ; preds = %if.else, %if.end8
  %retval.0 = phi i1 [ true, %if.end8 ], [ false, %if.else ]
  ret i1 %retval.0
}

declare noalias i8* @xmalloc(i64) #3

declare i8* @ggc_alloc_string(i8*, i32) #3

; Function Attrs: nounwind uwtable
define void @named_section_flags(i8* %name, i32 %flags) #0 {
entry:
  %0 = load i32* @in_section, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 3
  br i1 %cmp, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8** @in_named_name, align 8, !tbaa !4
  %call = tail call i32 @strcmp(i8* %name, i8* %1) #6
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.end7, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.htab** @in_named_htab, align 8, !tbaa !4
  %call.i = tail call i32 @htab_hash_string(i8* %name) #6
  %call2.i = tail call i8** @htab_find_slot_with_hash(%struct.htab* %2, i8* %name, i32 %call.i, i32 1) #6
  %3 = load i8** %call2.i, align 8
  %tobool.i = icmp eq i8* %3, null
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call3.i = tail call noalias i8* @xmalloc(i64 16) #6
  store i8* %call3.i, i8** %call2.i, align 8, !tbaa !4
  %call4.i = tail call i8* @ggc_alloc_string(i8* %name, i32 -1) #6
  %name.i = bitcast i8* %call3.i to i8**
  store i8* %call4.i, i8** %name.i, align 8, !tbaa !12
  %flags5.i = getelementptr inbounds i8* %call3.i, i64 8
  %4 = bitcast i8* %flags5.i to i32*
  store i32 %flags, i32* %4, align 4, !tbaa !6
  %5 = getelementptr inbounds i8* %call3.i, i64 12
  store i8 0, i8* %5, align 1, !tbaa !10
  br label %if.end

if.else.i:                                        ; preds = %if.then
  %flags6.i = getelementptr inbounds i8* %3, i64 8
  %6 = bitcast i8* %flags6.i to i32*
  %7 = load i32* %6, align 4, !tbaa !6
  %cmp.i = icmp eq i32 %7, %flags
  br i1 %cmp.i, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.else.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 412, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.named_section_flags, i64 0, i64 0)) #9
  unreachable

if.end:                                           ; preds = %if.then.i, %if.else.i
  %8 = load void (i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 10), align 8, !tbaa !13
  tail call void %8(i8* %name, i32 %flags) #6
  %and = and i32 %flags, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.end
  store i32 0, i32* @in_section, align 4, !tbaa !1
  br label %if.end7

if.else:                                          ; preds = %if.end
  %call5 = tail call i8* @ggc_alloc_string(i8* %name, i32 -1) #6
  store i8* %call5, i8** @in_named_name, align 8, !tbaa !4
  store i32 3, i32* @in_section, align 4, !tbaa !1
  br label %if.end7

if.end7:                                          ; preds = %lor.lhs.false, %if.then4, %if.else
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #4

; Function Attrs: noreturn
declare void @fancy_abort(i8*, i32, i8*) #5

; Function Attrs: nounwind uwtable
define void @named_section(%union.tree_node* %decl, i8* %name, i32 %reloc) #0 {
entry:
  %cmp = icmp ne %union.tree_node* %decl, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom28 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom28
  %0 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp1 = icmp eq i8 %0, 100
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 440, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.named_section, i64 0, i64 0)) #9
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %cmp3 = icmp eq i8* %name, null
  br i1 %cmp3, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %section_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 15
  %1 = load %union.tree_node** %section_name, align 8, !tbaa !18
  %pointer = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 4
  %2 = load %union.tree_node** %pointer, align 8
  %3 = bitcast %union.tree_node* %2 to i8*
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  %name.addr.0 = phi i8* [ %3, %if.then5 ], [ %name, %if.end ]
  %4 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call = tail call i32 %4(%union.tree_node* %decl, i8* %name.addr.0, i32 %reloc) #6
  br i1 %cmp, label %land.lhs.true8, label %if.end16

land.lhs.true8:                                   ; preds = %if.end7
  %5 = load %struct.htab** @in_named_htab, align 8, !tbaa !4
  %call.i = tail call i32 @htab_hash_string(i8* %name.addr.0) #6
  %call2.i = tail call i8** @htab_find_slot_with_hash(%struct.htab* %5, i8* %name.addr.0, i32 %call.i, i32 1) #6
  %6 = load i8** %call2.i, align 8
  %tobool.i = icmp eq i8* %6, null
  br i1 %tobool.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %land.lhs.true8
  %call3.i = tail call noalias i8* @xmalloc(i64 16) #6
  store i8* %call3.i, i8** %call2.i, align 8, !tbaa !4
  %call4.i = tail call i8* @ggc_alloc_string(i8* %name.addr.0, i32 -1) #6
  %name.i = bitcast i8* %call3.i to i8**
  store i8* %call4.i, i8** %name.i, align 8, !tbaa !12
  %flags5.i = getelementptr inbounds i8* %call3.i, i64 8
  %7 = bitcast i8* %flags5.i to i32*
  store i32 %call, i32* %7, align 4, !tbaa !6
  %8 = getelementptr inbounds i8* %call3.i, i64 12
  store i8 0, i8* %8, align 1, !tbaa !10
  br label %if.end16

if.else.i:                                        ; preds = %land.lhs.true8
  %flags6.i = getelementptr inbounds i8* %6, i64 8
  %9 = bitcast i8* %flags6.i to i32*
  %10 = load i32* %9, align 4, !tbaa !6
  %cmp.i = icmp eq i32 %10, %call
  br i1 %cmp.i, label %if.end16, label %if.then10

if.then10:                                        ; preds = %if.else.i
  %11 = load %struct.htab** @in_named_htab, align 8, !tbaa !4
  %call.i29 = tail call i32 @htab_hash_string(i8* %name.addr.0) #6
  %call1.i = tail call i8** @htab_find_slot_with_hash(%struct.htab* %11, i8* %name.addr.0, i32 %call.i29, i32 0) #6
  %tobool.i30 = icmp eq i8** %call1.i, null
  br i1 %tobool.i30, label %if.then14, label %get_named_section_flags.exit

get_named_section_flags.exit:                     ; preds = %if.then10
  %12 = load i8** %call1.i, align 8
  %flags.i = getelementptr inbounds i8* %12, i64 8
  %13 = bitcast i8* %flags.i to i32*
  %14 = load i32* %13, align 4, !tbaa !6
  %and = and i32 %14, 131072
  %cmp12 = icmp eq i32 %and, 0
  br i1 %cmp12, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.then10, %get_named_section_flags.exit
  %cond.i33 = phi i32 [ %14, %get_named_section_flags.exit ], [ 0, %if.then10 ]
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([34 x i8]* @.str5, i64 0, i64 0)) #6
  br label %if.end16

if.end16:                                         ; preds = %if.else.i, %if.then.i, %get_named_section_flags.exit, %if.then14, %if.end7
  %flags.0 = phi i32 [ %cond.i33, %if.then14 ], [ %14, %get_named_section_flags.exit ], [ %call, %if.end7 ], [ %call, %if.then.i ], [ %call, %if.else.i ]
  tail call void @named_section_flags(i8* %name.addr.0, i32 %flags.0)
  ret void
}

declare void @error_with_decl(%union.tree_node*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define void @bss_section() #0 {
entry:
  %0 = load i32* @in_section, align 4, !tbaa !1
  %cmp = icmp eq i32 %0, 4
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @.str6, i64 0, i64 0)) #6
  store i32 4, i32* @in_section, align 4, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @function_section(%union.tree_node* %decl) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %decl, null
  br i1 %cmp, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %section_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 15
  %0 = load %union.tree_node** %section_name, align 8, !tbaa !18
  %cmp2 = icmp eq %union.tree_node* %0, null
  br i1 %cmp2, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @named_section(%union.tree_node* %decl, i8* null, i32 0)
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %1 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i = icmp eq i32 %1, 1
  br i1 %cmp.i, label %if.end, label %if.then.i

if.then.i:                                        ; preds = %if.else
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0)) #6
  store i32 1, i32* @in_section, align 4, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %if.then.i, %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @variable_section(%union.tree_node* %decl, i32 %reloc) #0 {
entry:
  %name.i = alloca [24 x i8], align 16
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else142 [
    i32 30, label %land.lhs.true
    i32 34, label %land.lhs.true
    i32 29, label %if.then13
    i32 46, label %if.then121
  ]

land.lhs.true:                                    ; preds = %entry, %entry
  %section_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 15
  %0 = load %union.tree_node** %section_name, align 8, !tbaa !18
  %cmp7 = icmp eq %union.tree_node* %0, null
  br i1 %cmp7, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  call void @named_section(%union.tree_node* %decl, i8* null, i32 %reloc)
  br label %if.end146

if.else:                                          ; preds = %land.lhs.true
  switch i32 %bf.clear, label %if.else142 [
    i32 29, label %if.then13
    i32 34, label %if.then26
    i32 46, label %if.then121
  ]

if.then13:                                        ; preds = %entry, %if.else
  %1 = load i32* @flag_writable_strings, align 4, !tbaa !23
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.then14, label %if.else18

if.then14:                                        ; preds = %if.then13
  %u1 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %2 = bitcast %union.anon* %u1 to i32*
  %bf.load16 = load i32* %2, align 4
  %bf.clear17 = and i32 %bf.load16, 16777215
  %conv = zext i32 %bf.clear17 to i64
  call void @mergeable_string_section(%union.tree_node* %decl, i64 %conv, i32 0)
  br label %if.end146

if.else18:                                        ; preds = %if.then13
  %3 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i = icmp eq i32 %3, 2
  br i1 %cmp.i, label %if.end146, label %if.then.i

if.then.i:                                        ; preds = %if.else18
  %4 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str3, i64 0, i64 0)) #6
  store i32 2, i32* @in_section, align 4, !tbaa !1
  br label %if.end146

if.then26:                                        ; preds = %if.else
  %5 = and i32 %bf.load, 4352
  %6 = icmp eq i32 %5, 4096
  br i1 %6, label %lor.lhs.false37, label %if.then53

lor.lhs.false37:                                  ; preds = %if.then26
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %7 = load %union.tree_node** %initial, align 8, !tbaa !24
  %tobool39 = icmp eq %union.tree_node* %7, null
  br i1 %tobool39, label %if.then53, label %lor.lhs.false40

lor.lhs.false40:                                  ; preds = %lor.lhs.false37
  %8 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !4
  %cmp43 = icmp eq %union.tree_node* %7, %8
  br i1 %cmp43, label %if.else66, label %land.lhs.true45

land.lhs.true45:                                  ; preds = %lor.lhs.false40
  %constant_flag = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load49 = load i32* %constant_flag, align 8
  %bf.clear51 = and i32 %bf.load49, 512
  %tobool52 = icmp eq i32 %bf.clear51, 0
  br i1 %tobool52, label %if.then53, label %if.else66

if.then53:                                        ; preds = %if.then26, %land.lhs.true45, %lor.lhs.false37
  %9 = load i32* @flag_pic, align 4, !tbaa !23
  %tobool54 = icmp eq i32 %9, 0
  %and = and i32 %reloc, 2
  %tobool56 = icmp eq i32 %and, 0
  %or.cond177 = or i1 %tobool54, %tobool56
  br i1 %or.cond177, label %if.else58, label %if.then57

if.then57:                                        ; preds = %if.then53
  %10 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call.i181 = call i32 %10(%union.tree_node* null, i8* getelementptr inbounds ([10 x i8]* @.str7, i64 0, i64 0), i32 %reloc) #6
  call void @named_section_flags(i8* getelementptr inbounds ([10 x i8]* @.str7, i64 0, i64 0), i32 %call.i181) #6
  br label %if.end146

if.else58:                                        ; preds = %if.then53
  %tobool59 = icmp ne i32 %9, 0
  %tobool61 = icmp ne i32 %reloc, 0
  %or.cond = and i1 %tobool59, %tobool61
  br i1 %or.cond, label %if.then62, label %if.else63

if.then62:                                        ; preds = %if.else58
  %11 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call.i182 = call i32 %11(%union.tree_node* null, i8* getelementptr inbounds ([16 x i8]* @.str8, i64 0, i64 0), i32 %reloc) #6
  call void @named_section_flags(i8* getelementptr inbounds ([16 x i8]* @.str8, i64 0, i64 0), i32 %call.i182) #6
  br label %if.end146

if.else63:                                        ; preds = %if.else58
  %12 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i183 = icmp eq i32 %12, 2
  br i1 %cmp.i183, label %if.end146, label %if.then.i185

if.then.i185:                                     ; preds = %if.else63
  %13 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i184 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str3, i64 0, i64 0)) #6
  store i32 2, i32* @in_section, align 4, !tbaa !1
  br label %if.end146

if.else66:                                        ; preds = %land.lhs.true45, %lor.lhs.false40
  %14 = load i32* @flag_pic, align 4, !tbaa !23
  %tobool67 = icmp eq i32 %14, 0
  %and69 = and i32 %reloc, 2
  %tobool70 = icmp eq i32 %and69, 0
  %or.cond178 = or i1 %tobool67, %tobool70
  br i1 %or.cond178, label %if.else72, label %if.then71

if.then71:                                        ; preds = %if.else66
  %15 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call.i187 = call i32 %15(%union.tree_node* null, i8* getelementptr inbounds ([13 x i8]* @.str9, i64 0, i64 0), i32 %reloc) #6
  call void @named_section_flags(i8* getelementptr inbounds ([13 x i8]* @.str9, i64 0, i64 0), i32 %call.i187) #6
  br label %if.end146

if.else72:                                        ; preds = %if.else66
  %tobool73 = icmp ne i32 %14, 0
  %tobool75 = icmp ne i32 %reloc, 0
  %or.cond147 = and i1 %tobool73, %tobool75
  br i1 %or.cond147, label %if.then76, label %if.else77

if.then76:                                        ; preds = %if.else72
  %16 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call.i188 = call i32 %16(%union.tree_node* null, i8* getelementptr inbounds ([19 x i8]* @.str10, i64 0, i64 0), i32 %reloc) #6
  call void @named_section_flags(i8* getelementptr inbounds ([19 x i8]* @.str10, i64 0, i64 0), i32 %call.i188) #6
  br label %if.end146

if.else77:                                        ; preds = %if.else72
  %17 = load i32* @flag_merge_constants, align 4, !tbaa !23
  %cmp78 = icmp slt i32 %17, 2
  br i1 %cmp78, label %if.then80, label %if.else81

if.then80:                                        ; preds = %if.else77
  %18 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i189 = icmp eq i32 %18, 5
  br i1 %cmp.i189, label %if.end146, label %if.then.i191

if.then.i191:                                     ; preds = %if.then80
  %19 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i190 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end146

if.else81:                                        ; preds = %if.else77
  %code85 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %bf.load86 = load i32* %code85, align 8
  %bf.clear87 = and i32 %bf.load86, 255
  %cmp88 = icmp eq i32 %bf.clear87, 29
  br i1 %cmp88, label %if.then90, label %if.else99

if.then90:                                        ; preds = %if.else81
  %u194 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %20 = bitcast %union.anon* %u194 to i32*
  %bf.load96 = load i32* %20, align 4
  %bf.clear97 = and i32 %bf.load96, 16777215
  %conv98 = zext i32 %bf.clear97 to i64
  call void @mergeable_string_section(%union.tree_node* %7, i64 %conv98, i32 0)
  br label %if.end146

if.else99:                                        ; preds = %if.else81
  %mode = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %21 = bitcast i48* %mode to i64*
  %bf.load101 = load i64* %21, align 8
  %bf.load101.tr = trunc i64 %bf.load101 to i32
  %bf.cast = and i32 %bf.load101.tr, 255
  %u1104 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %22 = bitcast %union.anon* %u1104 to i32*
  %bf.load106 = load i32* %22, align 4
  %bf.clear107 = and i32 %bf.load106, 16777215
  %conv108 = zext i32 %bf.clear107 to i64
  %23 = getelementptr inbounds [24 x i8]* %name.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 24, i8* %23) #6
  switch i32 %bf.cast, label %land.lhs.true5.i [
    i32 51, label %if.end.i
    i32 0, label %if.end.i
  ]

land.lhs.true5.i:                                 ; preds = %if.else99
  %idxprom.i209 = zext i32 %bf.cast to i64
  %arrayidx.i = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom.i209
  %24 = load i16* %arrayidx.i, align 2, !tbaa !25
  %conv6.i = zext i16 %24 to i64
  %cmp7.i = icmp ule i64 %conv6.i, %conv108
  %cmp10.i = icmp ugt i32 %bf.clear107, 7
  %or.cond25.i = and i1 %cmp7.i, %cmp10.i
  %cmp13.i = icmp ult i32 %bf.clear107, 257
  %or.cond26.i = and i1 %or.cond25.i, %cmp13.i
  br i1 %or.cond26.i, label %land.lhs.true15.i, label %if.end.i

land.lhs.true15.i:                                ; preds = %land.lhs.true5.i
  %sub.i = add i64 %conv108, 16777215
  %and.i = and i64 %sub.i, %conv108
  %cmp16.i = icmp eq i64 %and.i, 0
  br i1 %cmp16.i, label %if.then.i194, label %if.end.i

if.then.i194:                                     ; preds = %land.lhs.true15.i
  %div.i = lshr i64 %conv108, 3
  %conv18.i = trunc i64 %div.i to i32
  %call.i193 = call i32 (i8*, i8*, ...)* @sprintf(i8* %23, i8* getelementptr inbounds ([14 x i8]* @.str14, i64 0, i64 0), i32 %conv18.i) #6
  %or21.i = or i64 %div.i, 32768
  %conv22.i = trunc i64 %or21.i to i32
  call void @named_section_flags(i8* %23, i32 %conv22.i) #6
  br label %if.end146

if.end.i:                                         ; preds = %if.else99, %if.else99, %land.lhs.true15.i, %land.lhs.true5.i
  %25 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i.i = icmp eq i32 %25, 5
  br i1 %cmp.i.i.i, label %if.end146, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.end.i
  %26 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i.i.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end146

if.then121:                                       ; preds = %entry, %if.else
  %27 = load i32* @flag_pic, align 4, !tbaa !23
  %notlhs = icmp eq i32 %27, 0
  %notrhs = icmp eq i32 %reloc, 0
  %or.cond148.not = or i1 %notrhs, %notlhs
  %bf.clear130 = and i32 %bf.load, 256
  %tobool131 = icmp eq i32 %bf.clear130, 0
  %or.cond179 = and i1 %or.cond148.not, %tobool131
  %or.cond179.not = xor i1 %or.cond179, true
  %bf.clear137 = and i32 %bf.load, 512
  %tobool138 = icmp eq i32 %bf.clear137, 0
  %or.cond180 = or i1 %tobool138, %or.cond179.not
  %28 = load i32* @in_section, align 4, !tbaa !1
  br i1 %or.cond180, label %if.then139, label %if.else140

if.then139:                                       ; preds = %if.then121
  %cmp.i195 = icmp eq i32 %28, 2
  br i1 %cmp.i195, label %if.end146, label %if.then.i197

if.then.i197:                                     ; preds = %if.then139
  %29 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i196 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str3, i64 0, i64 0)) #6
  store i32 2, i32* @in_section, align 4, !tbaa !1
  br label %if.end146

if.else140:                                       ; preds = %if.then121
  %cmp.i199 = icmp eq i32 %28, 5
  br i1 %cmp.i199, label %if.end146, label %if.then.i201

if.then.i201:                                     ; preds = %if.else140
  %30 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i200 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end146

if.else142:                                       ; preds = %entry, %if.else
  %31 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i204 = icmp eq i32 %31, 5
  br i1 %cmp.i204, label %if.end146, label %if.then.i206

if.then.i206:                                     ; preds = %if.else142
  %32 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i205 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end146

if.end146:                                        ; preds = %if.then.i.i.i, %if.end.i, %if.then.i194, %if.then.i206, %if.else142, %if.then.i201, %if.else140, %if.then.i197, %if.then139, %if.then.i191, %if.then80, %if.then.i185, %if.else63, %if.then.i, %if.else18, %if.then14, %if.then62, %if.then57, %if.then76, %if.then90, %if.then71, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @mergeable_string_section(%union.tree_node* nocapture readonly %decl, i64 %align, i32 %flags) #0 {
entry:
  %name = alloca [30 x i8], align 16
  %0 = load i32* @flag_merge_constants, align 4, !tbaa !23
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end86, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 29
  br i1 %cmp, label %land.lhs.true1, label %if.end86

land.lhs.true1:                                   ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !27
  %code4 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load5 = load i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 18
  %cmp9 = icmp ult i64 %align, 257
  %or.cond = and i1 %cmp7, %cmp9
  br i1 %or.cond, label %land.lhs.true10, label %if.end86

land.lhs.true10:                                  ; preds = %land.lhs.true1
  %2 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 2
  %3 = load i32* %2, align 4, !tbaa !28
  %conv = sext i32 %3 to i64
  %call = call i64 @int_size_in_bytes(%union.tree_node* %1) #6
  %cmp13 = icmp slt i64 %conv, %call
  br i1 %cmp13, label %if.end86, label %if.then

if.then:                                          ; preds = %land.lhs.true10
  %4 = load %union.tree_node** %type, align 8, !tbaa !27
  %type18 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 1
  %5 = load %union.tree_node** %type18, align 8, !tbaa !27
  %type19 = bitcast %union.tree_node* %5 to %struct.tree_type*
  %mode20 = getelementptr inbounds %struct.tree_type* %type19, i64 0, i32 6
  %bf.load21 = load i32* %mode20, align 4
  %bf.lshr = lshr i32 %bf.load21, 9
  %bf.clear22 = and i32 %bf.lshr, 127
  %idxprom119 = zext i32 %bf.clear22 to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom119
  %6 = load i16* %arrayidx, align 2, !tbaa !25
  %conv23 = zext i16 %6 to i32
  %.off = add i16 %6, -8
  %7 = icmp ult i16 %.off, 249
  br i1 %7, label %land.lhs.true29, label %if.end86

land.lhs.true29:                                  ; preds = %if.then
  %sub = add i32 %conv23, 65535
  %and = and i32 %sub, %conv23
  %cmp30 = icmp eq i32 %and, 0
  br i1 %cmp30, label %if.then32, label %if.end86

if.then32:                                        ; preds = %land.lhs.true29
  %conv33 = zext i16 %6 to i64
  %cmp34 = icmp ugt i64 %conv33, %align
  %conv33.align = select i1 %cmp34, i64 %conv33, i64 %align
  %pointer = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 4
  %8 = load %union.tree_node** %pointer, align 8
  %9 = bitcast %union.tree_node* %8 to i8*
  %10 = load i32* %2, align 4, !tbaa !28
  %arrayidx42 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom119
  %11 = load i8* %arrayidx42, align 1, !tbaa !1
  %conv43 = zext i8 %11 to i32
  %cmp44125 = icmp slt i32 %10, 1
  %cmp47122 = icmp eq i8 %11, 0
  %or.cond138 = or i1 %cmp44125, %cmp47122
  br i1 %or.cond138, label %for.end63, label %for.cond46.preheader.lr.ph.split.us

for.cond46.preheader.lr.ph.split.us:              ; preds = %if.then32
  %12 = zext i8 %11 to i64
  br label %for.body49.lr.ph.us

for.cond46.us:                                    ; preds = %for.body49.us
  %13 = trunc i64 %indvars.iv.next to i32
  %cmp47.us = icmp slt i32 %13, %conv43
  br i1 %cmp47.us, label %for.body49.us, label %for.end.us

for.body49.us:                                    ; preds = %for.body49.lr.ph.us, %for.cond46.us
  %indvars.iv = phi i64 [ 0, %for.body49.lr.ph.us ], [ %indvars.iv.next, %for.cond46.us ]
  %14 = add nsw i64 %indvars.iv, %indvars.iv136
  %arrayidx51.us = getelementptr inbounds i8* %9, i64 %14
  %15 = load i8* %arrayidx51.us, align 1, !tbaa !1
  %cmp53.us = icmp eq i8 %15, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp53.us, label %for.cond46.us, label %for.body49.for.end_crit_edge.us

for.end.us:                                       ; preds = %for.cond46.us, %for.body49.for.end_crit_edge.us
  %j.0.lcssa.us = phi i32 [ %17, %for.body49.for.end_crit_edge.us ], [ %13, %for.cond46.us ]
  %cmp57.us = icmp eq i32 %j.0.lcssa.us, %conv43
  %indvars.iv.next137 = add nuw nsw i64 %indvars.iv136, %12
  br i1 %cmp57.us, label %for.end.for.end63_crit_edge.us-lcssa.us, label %for.cond.us

for.cond.us:                                      ; preds = %for.end.us
  %16 = trunc i64 %indvars.iv.next137 to i32
  %cmp44.us = icmp slt i32 %16, %10
  br i1 %cmp44.us, label %for.body49.lr.ph.us, label %for.end63

for.body49.lr.ph.us:                              ; preds = %for.cond46.preheader.lr.ph.split.us, %for.cond.us
  %indvars.iv136 = phi i64 [ %indvars.iv.next137, %for.cond.us ], [ 0, %for.cond46.preheader.lr.ph.split.us ]
  br label %for.body49.us

for.body49.for.end_crit_edge.us:                  ; preds = %for.body49.us
  %17 = trunc i64 %indvars.iv to i32
  br label %for.end.us

for.end.for.end63_crit_edge.us-lcssa.us:          ; preds = %for.end.us
  %18 = trunc i64 %indvars.iv136 to i32
  br label %for.end63

for.end63:                                        ; preds = %for.cond.us, %if.then32, %for.end.for.end63_crit_edge.us-lcssa.us
  %i.0.lcssa = phi i32 [ 0, %if.then32 ], [ %18, %for.end.for.end63_crit_edge.us-lcssa.us ], [ %16, %for.cond.us ]
  %sub64 = sub nsw i32 %10, %conv43
  %cmp65 = icmp eq i32 %i.0.lcssa, %sub64
  br i1 %cmp65, label %if.then67, label %if.end86

if.then67:                                        ; preds = %for.end63
  %arraydecay = getelementptr inbounds [30 x i8]* %name, i64 0, i64 0
  %div120 = lshr i16 %6, 3
  %div = zext i16 %div120 to i32
  %div68 = lshr i64 %conv33.align, 3
  %conv69 = trunc i64 %div68 to i32
  %call70 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([17 x i8]* @.str12, i64 0, i64 0), i32 %div, i32 %conv69) #6
  %or72 = or i32 %div, %flags
  %or73 = or i32 %or72, 98304
  %tobool74 = icmp eq i32 %i.0.lcssa, 0
  %cmp77 = icmp ult i64 %conv33, %conv33.align
  %or.cond121 = and i1 %tobool74, %cmp77
  call void @named_section_flags(i8* %arraydecay, i32 %or73)
  br i1 %or.cond121, label %if.then79, label %return

if.then79:                                        ; preds = %if.then67
  %19 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call81 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8]* @.str13, i64 0, i64 0)) #6
  br label %return

if.end86:                                         ; preds = %land.lhs.true10, %entry, %if.then, %land.lhs.true29, %for.end63, %land.lhs.true1, %land.lhs.true
  %20 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i = icmp eq i32 %20, 5
  br i1 %cmp.i.i, label %return, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end86
  %21 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %return

return:                                           ; preds = %if.then.i.i, %if.end86, %if.then67, %if.then79
  ret void
}

; Function Attrs: nounwind uwtable
define void @mergeable_constant_section(i32 %mode, i64 %align, i32 %flags) #0 {
entry:
  %name = alloca [24 x i8], align 16
  %0 = load i32* @flag_merge_constants, align 4, !tbaa !23
  %tobool = icmp ne i32 %0, 0
  %cmp = icmp ne i32 %mode, 0
  %or.cond = and i1 %tobool, %cmp
  %cmp3 = icmp ne i32 %mode, 51
  %or.cond24 = and i1 %or.cond, %cmp3
  br i1 %or.cond24, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %entry
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %1 = load i16* %arrayidx, align 2, !tbaa !25
  %conv6 = zext i16 %1 to i64
  %cmp7 = icmp ule i64 %conv6, %align
  %cmp10 = icmp ugt i64 %align, 7
  %or.cond25 = and i1 %cmp7, %cmp10
  %cmp13 = icmp ult i64 %align, 257
  %or.cond26 = and i1 %or.cond25, %cmp13
  br i1 %or.cond26, label %land.lhs.true15, label %if.end

land.lhs.true15:                                  ; preds = %land.lhs.true5
  %sub = add i64 %align, -1
  %and = and i64 %sub, %align
  %cmp16 = icmp eq i64 %and, 0
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true15
  %arraydecay = getelementptr inbounds [24 x i8]* %name, i64 0, i64 0
  %div = lshr i64 %align, 3
  %conv18 = trunc i64 %div to i32
  %call = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([14 x i8]* @.str14, i64 0, i64 0), i32 %conv18) #6
  %conv20 = zext i32 %flags to i64
  %or = or i64 %div, %conv20
  %or21 = or i64 %or, 32768
  %conv22 = trunc i64 %or21 to i32
  call void @named_section_flags(i8* %arraydecay, i32 %conv22)
  br label %return

if.end:                                           ; preds = %land.lhs.true15, %land.lhs.true5, %entry
  %2 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i = icmp eq i32 %2, 5
  br i1 %cmp.i.i, label %return, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.end
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %return

return:                                           ; preds = %if.then.i.i, %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @default_exception_section() #0 {
entry:
  %0 = load i8* getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 13), align 8, !tbaa !30, !range !11
  %tobool = icmp eq i8 %0, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call.i = tail call i32 %1(%union.tree_node* null, i8* getelementptr inbounds ([18 x i8]* @.str11, i64 0, i64 0), i32 0) #6
  tail call void @named_section_flags(i8* getelementptr inbounds ([18 x i8]* @.str11, i64 0, i64 0), i32 %call.i) #6
  br label %if.end4

if.else:                                          ; preds = %entry
  %2 = load i32* @flag_pic, align 4, !tbaa !23
  %tobool1 = icmp eq i32 %2, 0
  %3 = load i32* @in_section, align 4, !tbaa !1
  br i1 %tobool1, label %if.else3, label %if.then2

if.then2:                                         ; preds = %if.else
  %cmp.i = icmp eq i32 %3, 2
  br i1 %cmp.i, label %if.end4, label %if.then.i

if.then.i:                                        ; preds = %if.then2
  %4 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i5 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str3, i64 0, i64 0)) #6
  store i32 2, i32* @in_section, align 4, !tbaa !1
  br label %if.end4

if.else3:                                         ; preds = %if.else
  %cmp.i.i = icmp eq i32 %3, 5
  br i1 %cmp.i.i, label %if.end4, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.else3
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end4

if.end4:                                          ; preds = %if.then.i.i, %if.else3, %if.then.i, %if.then2, %if.then
  ret void
}

declare i64 @int_size_in_bytes(%union.tree_node*) #3

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #1

; Function Attrs: nounwind readonly uwtable
define i32 @decode_reg_name(i8* readonly %asmspec) #2 {
entry:
  %cmp = icmp eq i8* %asmspec, null
  br i1 %cmp, label %return, label %if.then

if.then:                                          ; preds = %entry
  %0 = load i8* %asmspec, align 1, !tbaa !1
  switch i8 %0, label %strip_reg_name.exit [
    i8 37, label %if.then.i
    i8 35, label %if.then.i
  ]

if.then.i:                                        ; preds = %if.then, %if.then
  %incdec.ptr.i = getelementptr inbounds i8* %asmspec, i64 1
  br label %strip_reg_name.exit

strip_reg_name.exit:                              ; preds = %if.then, %if.then.i
  %name.addr.0.i = phi i8* [ %incdec.ptr.i, %if.then.i ], [ %asmspec, %if.then ]
  %call1 = tail call i64 @strlen(i8* %name.addr.0.i) #6
  %sub = add i64 %call1, 4294967295
  %conv = trunc i64 %sub to i32
  %cmp2100 = icmp sgt i32 %conv, -1
  br i1 %cmp2100, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %strip_reg_name.exit
  %sext = shl i64 %sub, 32
  %1 = ashr exact i64 %sext, 32
  br label %for.body

for.cond:                                         ; preds = %for.body
  %cmp2 = icmp sgt i32 %4, 0
  br i1 %cmp2, label %for.body, label %for.cond.for.end_crit_edge

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv109 = phi i64 [ %1, %for.body.lr.ph ], [ %indvars.iv.next110, %for.cond ]
  %arrayidx = getelementptr inbounds i8* %name.addr.0.i, i64 %indvars.iv109
  %2 = load i8* %arrayidx, align 1, !tbaa !1
  %idxprom5 = zext i8 %2 to i64
  %arrayidx6 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom5
  %3 = load i16* %arrayidx6, align 2, !tbaa !25
  %and8 = and i16 %3, 4
  %tobool = icmp eq i16 %and8, 0
  %indvars.iv.next110 = add nsw i64 %indvars.iv109, -1
  %4 = trunc i64 %indvars.iv109 to i32
  br i1 %tobool, label %for.end, label %for.cond

for.cond.for.end_crit_edge:                       ; preds = %for.cond
  %5 = trunc i64 %indvars.iv.next110 to i32
  br label %for.end

for.end:                                          ; preds = %for.body, %for.cond.for.end_crit_edge, %strip_reg_name.exit
  %i.0.lcssa = phi i32 [ %5, %for.cond.for.end_crit_edge ], [ %conv, %strip_reg_name.exit ], [ %4, %for.body ]
  %6 = load i8* %name.addr.0.i, align 1, !tbaa !1
  %cmp12 = icmp ne i8 %6, 0
  %cmp14 = icmp slt i32 %i.0.lcssa, 0
  %or.cond = and i1 %cmp12, %cmp14
  br i1 %or.cond, label %if.then16, label %for.body28

if.then16:                                        ; preds = %for.end
  %call17 = tail call i32 @atoi(i8* %name.addr.0.i) #6
  %7 = icmp ult i32 %call17, 53
  %call17. = select i1 %7, i32 %call17, i32 -2
  br label %return

for.body28:                                       ; preds = %for.end, %for.inc42
  %indvars.iv107 = phi i64 [ %indvars.iv.next108, %for.inc42 ], [ 0, %for.end ]
  %arrayidx30 = getelementptr inbounds [53 x i8*]* @reg_names, i64 0, i64 %indvars.iv107
  %8 = load i8** %arrayidx30, align 8, !tbaa !4
  %9 = load i8* %8, align 1, !tbaa !1
  switch i8 %9, label %strip_reg_name.exit95 [
    i8 0, label %for.inc42
    i8 37, label %if.then.i93
    i8 35, label %if.then.i93
  ]

if.then.i93:                                      ; preds = %for.body28, %for.body28
  %incdec.ptr.i92 = getelementptr inbounds i8* %8, i64 1
  br label %strip_reg_name.exit95

strip_reg_name.exit95:                            ; preds = %for.body28, %if.then.i93
  %name.addr.0.i94 = phi i8* [ %incdec.ptr.i92, %if.then.i93 ], [ %8, %for.body28 ]
  %call38 = tail call i32 @strcmp(i8* %name.addr.0.i, i8* %name.addr.0.i94) #6
  %tobool39 = icmp eq i32 %call38, 0
  br i1 %tobool39, label %return.loopexit, label %for.inc42

for.inc42:                                        ; preds = %for.body28, %strip_reg_name.exit95
  %indvars.iv.next108 = add nuw nsw i64 %indvars.iv107, 1
  %10 = trunc i64 %indvars.iv.next108 to i32
  %cmp26 = icmp slt i32 %10, 53
  br i1 %cmp26, label %for.body28, label %for.body47

for.cond44:                                       ; preds = %for.body47
  %11 = trunc i64 %indvars.iv.next to i32
  %cmp45 = icmp slt i32 %11, 32
  br i1 %cmp45, label %for.body47, label %for.end58

for.body47:                                       ; preds = %for.inc42, %for.cond44
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond44 ], [ 0, %for.inc42 ]
  %name = getelementptr inbounds [32 x %struct.anon.3]* bitcast (<{ { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] } }>* @decode_reg_name.table to [32 x %struct.anon.3]*), i64 0, i64 %indvars.iv, i32 0
  %12 = load i8** %name, align 16, !tbaa !31
  %call50 = tail call i32 @strcmp(i8* %name.addr.0.i, i8* %12) #6
  %tobool51 = icmp eq i32 %call50, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool51, label %if.then52, label %for.cond44

if.then52:                                        ; preds = %for.body47
  %number = getelementptr inbounds [32 x %struct.anon.3]* bitcast (<{ { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] }, { i8*, i32, [4 x i8] } }>* @decode_reg_name.table to [32 x %struct.anon.3]*), i64 0, i64 %indvars.iv, i32 1
  %13 = load i32* %number, align 8, !tbaa !33
  br label %return

for.end58:                                        ; preds = %for.cond44
  %call59 = tail call i32 @strcmp(i8* %name.addr.0.i, i8* getelementptr inbounds ([7 x i8]* @.str47, i64 0, i64 0)) #6
  %tobool60 = icmp eq i32 %call59, 0
  br i1 %tobool60, label %return, label %if.end62

if.end62:                                         ; preds = %for.end58
  %call63 = tail call i32 @strcmp(i8* %name.addr.0.i, i8* getelementptr inbounds ([3 x i8]* @.str48, i64 0, i64 0)) #6
  %tobool64 = icmp eq i32 %call63, 0
  %. = select i1 %tobool64, i32 -3, i32 -2
  br label %return

return.loopexit:                                  ; preds = %strip_reg_name.exit95
  %14 = trunc i64 %indvars.iv107 to i32
  br label %return

return:                                           ; preds = %return.loopexit, %entry, %if.end62, %for.end58, %if.then16, %if.then52
  %retval.0 = phi i32 [ %13, %if.then52 ], [ %call17., %if.then16 ], [ -4, %for.end58 ], [ %., %if.end62 ], [ -1, %entry ], [ %14, %return.loopexit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8* nocapture) #4

; Function Attrs: nounwind readonly
declare i32 @atoi(i8* nocapture) #4

; Function Attrs: nounwind uwtable
define void @make_decl_rtl(%union.tree_node* %decl, i8* readonly %asmspec) #0 {
entry:
  %context = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 9
  %0 = load %union.tree_node** %context, align 8, !tbaa !34
  %cmp = icmp ne %union.tree_node* %0, null
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.end53 [
    i32 35, label %if.then
    i32 36, label %if.then
    i32 34, label %land.lhs.true
    i32 33, label %if.then52
    i32 31, label %if.then52
  ]

land.lhs.true:                                    ; preds = %entry
  %1 = and i32 %bf.load, 786432
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %land.lhs.true26, label %if.end53

land.lhs.true26:                                  ; preds = %land.lhs.true
  %external_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %3 = bitcast i48* %external_flag to i64*
  %bf.load28 = load i64* %3, align 8
  %4 = and i64 %bf.load28, 1280
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %if.then, label %if.else

if.then:                                          ; preds = %entry, %entry, %land.lhs.true26
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 835, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.make_decl_rtl, i64 0, i64 0)) #9
  unreachable

if.else:                                          ; preds = %land.lhs.true26
  switch i32 %bf.clear, label %if.end53 [
    i32 33, label %if.then52
    i32 31, label %if.then52
  ]

if.then52:                                        ; preds = %entry, %entry, %if.else, %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 839, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.make_decl_rtl, i64 0, i64 0)) #9
  unreachable

if.end53:                                         ; preds = %entry, %land.lhs.true, %if.else
  %rtl = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  %6 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  %cmp55 = icmp eq %struct.rtx_def* %6, null
  br i1 %cmp55, label %if.end94, label %cond.end

cond.end:                                         ; preds = %if.end53
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 0
  %bf.load65 = load i32* %7, align 8
  %bf.lshr66 = lshr i32 %bf.load65, 16
  %mode = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %8 = bitcast i48* %mode to i64*
  %bf.load69 = load i64* %8, align 8
  %bf.load69.tr = trunc i64 %bf.load69 to i32
  %9 = xor i32 %bf.load69.tr, %bf.lshr66
  %10 = and i32 %9, 255
  %cmp72 = icmp eq i32 %10, 0
  br i1 %cmp72, label %do.end, label %cond.end84

cond.end84:                                       ; preds = %cond.end
  %bf.cast90 = and i32 %bf.load69.tr, 255
  %call = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %6, i32 %bf.cast90, i64 0, i32 0, i32 1) #6
  store %struct.rtx_def* %call, %struct.rtx_def** %rtl, align 8, !tbaa !35
  br label %do.end

if.end94:                                         ; preds = %if.end53
  %assembler_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 14
  %11 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  %cmp96 = icmp eq %union.tree_node* %11, null
  br i1 %cmp96, label %cond.false99, label %cond.end100

cond.false99:                                     ; preds = %if.end94
  %12 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !4
  call void %12(%union.tree_node* %decl) #6
  %.pre = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  br label %cond.end100

cond.end100:                                      ; preds = %if.end94, %cond.false99
  %13 = phi %union.tree_node* [ %11, %if.end94 ], [ %.pre, %cond.false99 ]
  %id = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 1
  %14 = getelementptr inbounds i8** %id, i64 1
  %15 = load i8** %14, align 8, !tbaa !37
  %call103 = call i32 @decode_reg_name(i8* %asmspec)
  %cmp104 = icmp eq i32 %call103, -2
  br i1 %cmp104, label %if.then106, label %if.end109

if.then106:                                       ; preds = %cond.end100
  %call107 = call i64 @strlen(i8* %asmspec) #6
  %add = add i64 %call107, 2
  %16 = alloca i8, i64 %add, align 1
  store i8 42, i8* %16, align 1, !tbaa !1
  %add.ptr = getelementptr inbounds i8* %16, i64 1
  %call108 = call i8* @strcpy(i8* %add.ptr, i8* %asmspec) #6
  br label %if.end109

if.end109:                                        ; preds = %if.then106, %cond.end100
  %new_name.0 = phi i8* [ %16, %if.then106 ], [ %15, %cond.end100 ]
  %bf.load112 = load i32* %code, align 8
  %bf.clear113 = and i32 %bf.load112, 255
  %cmp114 = icmp eq i32 %bf.clear113, 30
  br i1 %cmp114, label %if.end310, label %land.lhs.true116

land.lhs.true116:                                 ; preds = %if.end109
  %regdecl_flag118 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %17 = bitcast i48* %regdecl_flag118 to i64*
  %bf.load119 = load i64* %17, align 8
  %bf.cast122 = and i64 %bf.load119, 1024
  %tobool123 = icmp eq i64 %bf.cast122, 0
  br i1 %tobool123, label %if.end310, label %if.then124

if.then124:                                       ; preds = %land.lhs.true116
  %cmp125 = icmp eq i32 %call103, -1
  br i1 %cmp125, label %if.then127, label %if.else128

if.then127:                                       ; preds = %if.then124
  call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([37 x i8]* @.str49, i64 0, i64 0)) #6
  br label %if.end310

if.else128:                                       ; preds = %if.then124
  %cmp129 = icmp slt i32 %call103, 0
  br i1 %cmp129, label %if.then131, label %if.else132

if.then131:                                       ; preds = %if.else128
  call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([31 x i8]* @.str50, i64 0, i64 0)) #6
  br label %if.end310

if.else132:                                       ; preds = %if.else128
  %type = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %18 = load %union.tree_node** %type, align 8, !tbaa !27
  %type134 = bitcast %union.tree_node* %18 to %struct.tree_type*
  %mode135 = getelementptr inbounds %struct.tree_type* %type134, i64 0, i32 6
  %bf.load136 = load i32* %mode135, align 4
  %bf.lshr137 = lshr i32 %bf.load136, 9
  %bf.clear138 = and i32 %bf.lshr137, 127
  %cmp139 = icmp eq i32 %bf.clear138, 51
  br i1 %cmp139, label %if.then141, label %if.else142

if.then141:                                       ; preds = %if.else132
  call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([48 x i8]* @.str51, i64 0, i64 0)) #6
  br label %if.end310

if.else142:                                       ; preds = %if.else132
  %call150 = call i32 @ix86_hard_regno_mode_ok(i32 %call103, i32 %bf.clear138) #6
  %tobool151 = icmp eq i32 %call150, 0
  br i1 %tobool151, label %if.then152, label %if.else153

if.then152:                                       ; preds = %if.else142
  call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([57 x i8]* @.str52, i64 0, i64 0)) #6
  br label %if.end310

if.else153:                                       ; preds = %if.else142
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %19 = load %union.tree_node** %initial, align 8, !tbaa !24
  %cmp155 = icmp eq %union.tree_node* %19, null
  br i1 %cmp155, label %if.end167, label %land.lhs.true157

land.lhs.true157:                                 ; preds = %if.else153
  %bf.load160 = load i32* %code, align 8
  %bf.clear162 = and i32 %bf.load160, 262144
  %tobool163 = icmp eq i32 %bf.clear162, 0
  br i1 %tobool163, label %if.end167, label %if.then164

if.then164:                                       ; preds = %land.lhs.true157
  store %union.tree_node* null, %union.tree_node** %initial, align 8, !tbaa !24
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([43 x i8]* @.str53, i64 0, i64 0)) #6
  br label %if.end167

if.end167:                                        ; preds = %land.lhs.true157, %if.else153, %if.then164
  %bf.load169 = load i32* %code, align 8
  %bf.clear171 = and i32 %bf.load169, 2048
  %tobool172 = icmp eq i32 %bf.clear171, 0
  br i1 %tobool172, label %if.end174, label %if.then173

if.then173:                                       ; preds = %if.end167
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([57 x i8]* @.str54, i64 0, i64 0)) #6
  br label %if.end174

if.end174:                                        ; preds = %if.end167, %if.then173
  %bf.load177 = load i64* %17, align 8
  %bf.load177.tr = trunc i64 %bf.load177 to i32
  %bf.cast179 = and i32 %bf.load177.tr, 255
  %call180 = call %struct.rtx_def* @gen_rtx_fmt_i0(i32 61, i32 %bf.cast179, i32 %call103) #6
  store %struct.rtx_def* %call180, %struct.rtx_def** %rtl, align 8, !tbaa !35
  %tobool185 = icmp eq %struct.rtx_def* %call180, null
  br i1 %tobool185, label %cond.end192, label %cond.end192.thread

cond.end192.thread:                               ; preds = %if.end174
  %arrayidx194703 = getelementptr inbounds %struct.rtx_def* %call180, i64 0, i32 1, i64 1
  %rtuint704 = bitcast %union.rtunion_def* %arrayidx194703 to i32*
  store i32 %call103, i32* %rtuint704, align 4, !tbaa !23
  br label %cond.end204

cond.end192:                                      ; preds = %if.end174
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null)
  %20 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  %arrayidx194 = getelementptr inbounds %struct.rtx_def* %20, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx194 to i32*
  store i32 %call103, i32* %rtuint, align 4, !tbaa !23
  %tobool197 = icmp eq %struct.rtx_def* %20, null
  br i1 %tobool197, label %cond.false201, label %cond.end204

cond.false201:                                    ; preds = %cond.end192
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null)
  %21 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  br label %cond.end204

cond.end204:                                      ; preds = %cond.end192.thread, %cond.end192, %cond.false201
  %cond205 = phi %struct.rtx_def* [ %21, %cond.false201 ], [ %20, %cond.end192 ], [ %call180, %cond.end192.thread ]
  %22 = getelementptr inbounds %struct.rtx_def* %cond205, i64 0, i32 0
  %bf.load206 = load i32* %22, align 8
  %bf.set = or i32 %bf.load206, 134217728
  store i32 %bf.set, i32* %22, align 8
  %bf.load210 = load i32* %code, align 8
  %bf.clear212 = and i32 %bf.load210, 262144
  %tobool213 = icmp eq i32 %bf.clear212, 0
  br i1 %tobool213, label %do.end, label %if.then214

if.then214:                                       ; preds = %cond.end204
  %23 = and i32 %call103, -8
  %24 = icmp eq i32 %23, 8
  %call103.off = add i32 %call103, -21
  %25 = icmp ult i32 %call103.off, 8
  %or.cond691 = or i1 %24, %25
  %call103.off685 = add i32 %call103, -45
  %26 = icmp ult i32 %call103.off685, 8
  %or.cond693 = or i1 %or.cond691, %26
  %call103.off686 = add i32 %call103, -29
  %27 = icmp ult i32 %call103.off686, 8
  %or.cond695 = or i1 %or.cond693, %27
  %bf.load241 = load i64* %17, align 8
  br i1 %or.cond695, label %cond.true238, label %cond.false257

cond.true238:                                     ; preds = %if.then214
  %bf.cast243 = and i64 %bf.load241, 255
  %arrayidx244 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %bf.cast243
  %28 = load i32* %arrayidx244, align 4, !tbaa !1
  %cmp245 = icmp eq i32 %28, 5
  br i1 %cmp245, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true238
  %cmp254 = icmp eq i32 %28, 6
  %phitmp = select i1 %cmp254, i32 2, i32 1
  br label %while.body

cond.false257:                                    ; preds = %if.then214
  %bf.load260.tr = trunc i64 %bf.load241 to i32
  %bf.cast262 = and i32 %bf.load260.tr, 255
  switch i32 %bf.cast262, label %while.cond.preheader [
    i32 18, label %cond.true265
    i32 24, label %cond.true276
  ]

cond.true265:                                     ; preds = %cond.false257
  %29 = load i32* @target_flags, align 4, !tbaa !23
  %and = lshr i32 %29, 25
  %30 = and i32 %and, 1
  %31 = xor i32 %30, 3
  br label %while.body

cond.true276:                                     ; preds = %cond.false257
  %32 = load i32* @target_flags, align 4, !tbaa !23
  %and277 = lshr i32 %32, 24
  %33 = and i32 %and277, 2
  %34 = xor i32 %33, 6
  br label %while.body

while.cond.preheader:                             ; preds = %cond.false257
  %idxprom286687 = zext i32 %bf.cast262 to i64
  %arrayidx287 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom286687
  %35 = load i8* %arrayidx287, align 1, !tbaa !1
  %conv288 = zext i8 %35 to i32
  %36 = load i32* @target_flags, align 4, !tbaa !23
  %and289 = lshr i32 %36, 23
  %37 = and i32 %and289, 4
  %38 = add i32 %37, 4
  %add292 = add i32 %conv288, -1
  %sub = add i32 %add292, %38
  %div = sdiv i32 %sub, %38
  %cmp302699 = icmp sgt i32 %div, 0
  br i1 %cmp302699, label %while.body, label %do.end

while.body:                                       ; preds = %cond.true238, %lor.rhs, %cond.true265, %cond.true276, %while.cond.preheader, %while.body
  %nregs.0700 = phi i32 [ %dec, %while.body ], [ 2, %cond.true238 ], [ %phitmp, %lor.rhs ], [ %31, %cond.true265 ], [ %34, %cond.true276 ], [ %div, %while.cond.preheader ]
  %dec = add nsw i32 %nregs.0700, -1
  %add304 = add nsw i32 %dec, %call103
  call void @globalize_reg(i32 %add304) #6
  %cmp302 = icmp sgt i32 %dec, 0
  br i1 %cmp302, label %while.body, label %do.end

if.end310:                                        ; preds = %land.lhs.true116, %if.end109, %if.then127, %if.then141, %if.then152, %if.then131
  %cmp311 = icmp sgt i32 %call103, -1
  %cmp314 = icmp eq i32 %call103, -3
  %or.cond567 = or i1 %cmp311, %cmp314
  br i1 %or.cond567, label %if.then316, label %if.end317

if.then316:                                       ; preds = %if.end310
  call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([51 x i8]* @.str55, i64 0, i64 0)) #6
  br label %if.end317

if.end317:                                        ; preds = %if.end310, %if.then316
  %bf.load320 = load i32* %code, align 8
  %bf.clear321 = and i32 %bf.load320, 255
  %cmp322 = icmp eq i32 %bf.clear321, 34
  br i1 %cmp322, label %land.lhs.true324, label %if.end345

land.lhs.true324:                                 ; preds = %if.end317
  %section_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 15
  %39 = load %union.tree_node** %section_name, align 8, !tbaa !18
  %cmp326 = icmp eq %union.tree_node* %39, null
  br i1 %cmp326, label %if.end345, label %land.lhs.true328

land.lhs.true328:                                 ; preds = %land.lhs.true324
  %initial330 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %40 = load %union.tree_node** %initial330, align 8, !tbaa !24
  %cmp331 = icmp eq %union.tree_node* %40, null
  br i1 %cmp331, label %land.lhs.true333, label %if.end345

land.lhs.true333:                                 ; preds = %land.lhs.true328
  %common_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %41 = bitcast i48* %common_flag to i64*
  %bf.load335 = load i64* %41, align 8
  %bf.cast338 = and i64 %bf.load335, 131072
  %tobool339 = icmp eq i64 %bf.cast338, 0
  br i1 %tobool339, label %if.end345, label %if.then340

if.then340:                                       ; preds = %land.lhs.true333
  %bf.clear344 = and i64 %bf.load335, -131073
  store i64 %bf.clear344, i64* %41, align 8
  br label %if.end345

if.end345:                                        ; preds = %land.lhs.true333, %land.lhs.true324, %if.then340, %land.lhs.true328, %if.end317
  %bf.clear352 = and i32 %bf.load320, 524288
  %tobool353 = icmp eq i32 %bf.clear352, 0
  %or.cond708 = and i1 %cmp, %tobool353
  br i1 %or.cond708, label %land.lhs.true354, label %if.end385

land.lhs.true354:                                 ; preds = %if.end345
  %42 = load %union.tree_node** %context, align 8, !tbaa !34
  %tobool357 = icmp eq %union.tree_node* %42, null
  br i1 %tobool357, label %land.lhs.true370, label %land.lhs.true358

land.lhs.true358:                                 ; preds = %land.lhs.true354
  %code362 = getelementptr inbounds %union.tree_node* %42, i64 0, i32 0, i32 0, i32 2
  %bf.load363 = load i32* %code362, align 8
  %bf.clear364 = and i32 %bf.load363, 255
  %idxprom365684 = zext i32 %bf.clear364 to i64
  %arrayidx366 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom365684
  %43 = load i8* %arrayidx366, align 1, !tbaa !1
  %cmp368 = icmp ne i8 %43, 116
  %cmp371 = icmp eq i8* %asmspec, null
  %or.cond568 = and i1 %cmp368, %cmp371
  br i1 %or.cond568, label %land.lhs.true373, label %if.end385

land.lhs.true370:                                 ; preds = %land.lhs.true354
  %cmp371.old = icmp eq i8* %asmspec, null
  br i1 %cmp371.old, label %land.lhs.true373, label %if.end385

land.lhs.true373:                                 ; preds = %land.lhs.true358, %land.lhs.true370
  %name375 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 8
  %44 = load %union.tree_node** %name375, align 8, !tbaa !40
  %id377 = getelementptr inbounds %union.tree_node* %44, i64 0, i32 0, i32 1
  %45 = getelementptr inbounds i8** %id377, i64 1
  %46 = load i8** %45, align 8, !tbaa !37
  %cmp379 = icmp eq i8* %15, %46
  br i1 %cmp379, label %if.then381, label %if.end385

if.then381:                                       ; preds = %land.lhs.true373
  %call382 = call i64 @strlen(i8* %15) #6
  %add383 = add i64 %call382, 10
  %47 = alloca i8, i64 %add383, align 1
  %48 = load i32* @var_labelno, align 4, !tbaa !23
  %call384 = call i32 (i8*, i8*, ...)* @sprintf(i8* %47, i8* getelementptr inbounds ([6 x i8]* @.str56, i64 0, i64 0), i8* %15, i32 %48) #6
  %49 = load i32* @var_labelno, align 4, !tbaa !23
  %inc = add nsw i32 %49, 1
  store i32 %inc, i32* @var_labelno, align 4, !tbaa !23
  br label %if.end385

if.end385:                                        ; preds = %if.end345, %land.lhs.true358, %if.then381, %land.lhs.true373, %land.lhs.true370
  %new_name.1 = phi i8* [ %new_name.0, %if.end345 ], [ %47, %if.then381 ], [ %new_name.0, %land.lhs.true373 ], [ %new_name.0, %land.lhs.true358 ], [ %new_name.0, %land.lhs.true370 ]
  %cmp386 = icmp eq i8* %15, %new_name.1
  br i1 %cmp386, label %if.end404, label %if.then388

if.then388:                                       ; preds = %if.end385
  %call389 = call %union.tree_node* @get_identifier(i8* %new_name.1) #6
  store %union.tree_node* %call389, %union.tree_node** %assembler_name, align 8, !tbaa !36
  %cmp394 = icmp eq %union.tree_node* %call389, null
  br i1 %cmp394, label %cond.false397, label %cond.end398

cond.false397:                                    ; preds = %if.then388
  %50 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !4
  call void %50(%union.tree_node* %decl) #6
  %.pre702 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  br label %cond.end398

cond.end398:                                      ; preds = %if.then388, %cond.false397
  %51 = phi %union.tree_node* [ %call389, %if.then388 ], [ %.pre702, %cond.false397 ]
  %id402 = getelementptr inbounds %union.tree_node* %51, i64 0, i32 0, i32 1
  %52 = getelementptr inbounds i8** %id402, i64 1
  %53 = load i8** %52, align 8, !tbaa !37
  br label %if.end404

if.end404:                                        ; preds = %if.end385, %cond.end398
  %name.0 = phi i8* [ %53, %cond.end398 ], [ %15, %if.end385 ]
  %54 = load i32* @flag_volatile_global, align 4, !tbaa !23
  %tobool405 = icmp eq i32 %54, 0
  br i1 %tobool405, label %lor.lhs.false420, label %land.lhs.true406

land.lhs.true406:                                 ; preds = %if.end404
  %bf.load409 = load i32* %code, align 8
  %55 = and i32 %bf.load409, 524543
  %56 = icmp eq i32 %55, 524322
  br i1 %56, label %if.then443, label %lor.lhs.false420

lor.lhs.false420:                                 ; preds = %land.lhs.true406, %if.end404
  %57 = load i32* @flag_volatile_static, align 4, !tbaa !23
  %tobool421 = icmp eq i32 %57, 0
  br i1 %tobool421, label %if.end448, label %land.lhs.true422

land.lhs.true422:                                 ; preds = %lor.lhs.false420
  %bf.load425 = load i32* %code, align 8
  %bf.clear426 = and i32 %bf.load425, 255
  %cmp427 = icmp ne i32 %bf.clear426, 34
  %58 = and i32 %bf.load425, 786432
  %59 = icmp eq i32 %58, 0
  %or.cond = or i1 %cmp427, %59
  br i1 %or.cond, label %if.end448, label %if.then443

if.then443:                                       ; preds = %land.lhs.true422, %land.lhs.true406
  %bf.load445 = phi i32 [ %bf.load425, %land.lhs.true422 ], [ %bf.load409, %land.lhs.true406 ]
  %bf.set447 = or i32 %bf.load445, 256
  store i32 %bf.set447, i32* %code, align 8
  br label %if.end448

if.end448:                                        ; preds = %land.lhs.true422, %lor.lhs.false420, %if.then443
  %mode450 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %60 = bitcast i48* %mode450 to i64*
  %bf.load451 = load i64* %60, align 8
  %bf.load451.tr = trunc i64 %bf.load451 to i32
  %bf.cast453 = and i32 %bf.load451.tr, 255
  %61 = load i32* @target_flags, align 4, !tbaa !23
  %and454 = lshr i32 %61, 25
  %62 = and i32 %and454, 1
  %63 = or i32 %62, 4
  %call457 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %63, i8* %name.0) #6
  %call458 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast453, %struct.rtx_def* %call457) #6
  %bf.load460 = load i64* %60, align 8
  %arrayidx465 = getelementptr inbounds %struct.rtx_def* %call458, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx465 to %struct.rtx_def**
  %64 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %65 = getelementptr inbounds %struct.rtx_def* %64, i64 0, i32 0
  %bf.load466 = load i32* %65, align 8
  %66 = shl i64 %bf.load460, 7
  %bf.value = trunc i64 %66 to i32
  %bf.shl = and i32 %bf.value, 1073741824
  %bf.clear467 = and i32 %bf.load466, -1073741825
  %bf.set468 = or i32 %bf.clear467, %bf.shl
  store i32 %bf.set468, i32* %65, align 8
  %bf.load471 = load i32* %code, align 8
  %bf.clear472 = and i32 %bf.load471, 255
  %cmp473 = icmp eq i32 %bf.clear472, 30
  br i1 %cmp473, label %if.end476, label %if.then475

if.then475:                                       ; preds = %if.end448
  call void @set_mem_attributes(%struct.rtx_def* %call458, %union.tree_node* %decl, i32 1) #6
  br label %if.end476

if.end476:                                        ; preds = %if.end448, %if.then475
  store %struct.rtx_def* %call458, %struct.rtx_def** %rtl, align 8, !tbaa !35
  %67 = load i32* @flag_pic, align 4, !tbaa !23
  %tobool479 = icmp eq i32 %67, 0
  br i1 %tobool479, label %do.end, label %if.then480

if.then480:                                       ; preds = %if.end476
  %bf.load484 = load i32* %code, align 8
  %bf.clear485 = and i32 %bf.load484, 255
  %idxprom486681 = zext i32 %bf.clear485 to i64
  %arrayidx487 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom486681
  %68 = load i8* %arrayidx487, align 1, !tbaa !1
  %cmp489 = icmp eq i8 %68, 100
  br i1 %cmp489, label %cond.false493, label %cond.true491

cond.true491:                                     ; preds = %if.then480
  %rtl492 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 1
  %69 = load i8** %rtl492, align 8
  %70 = bitcast i8* %69 to %struct.rtx_def*
  br label %cond.end505

cond.false493:                                    ; preds = %if.then480
  %tobool496 = icmp eq %struct.rtx_def* %call458, null
  br i1 %tobool496, label %cond.false500, label %cond.end505

cond.false500:                                    ; preds = %cond.false493
  call void @make_decl_rtl(%union.tree_node* %decl, i8* null)
  %71 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  br label %cond.end505

cond.end505:                                      ; preds = %cond.false493, %cond.false500, %cond.true491
  %cond506 = phi %struct.rtx_def* [ %70, %cond.true491 ], [ %71, %cond.false500 ], [ %call458, %cond.false493 ]
  %72 = getelementptr inbounds %struct.rtx_def* %cond506, i64 0, i32 0
  %bf.load507 = load i32* %72, align 8
  %bf.clear508 = and i32 %bf.load507, 65535
  %cmp509 = icmp eq i32 %bf.clear508, 66
  br i1 %cmp509, label %if.then511, label %do.end

if.then511:                                       ; preds = %cond.end505
  %73 = load i8** @ix86_debug_addr_string, align 8, !tbaa !4
  %cmp512 = icmp eq i8* %73, null
  br i1 %cmp512, label %if.end536, label %land.lhs.true514

land.lhs.true514:                                 ; preds = %if.then511
  %bf.load517 = load i32* %code, align 8
  %bf.clear518 = and i32 %bf.load517, 255
  %idxprom519683 = zext i32 %bf.clear518 to i64
  %arrayidx520 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom519683
  %74 = load i8* %arrayidx520, align 1, !tbaa !1
  %cmp522 = icmp eq i8 %74, 100
  br i1 %cmp522, label %if.then524, label %if.end536

if.then524:                                       ; preds = %land.lhs.true514
  %75 = load %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %name526 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 8
  %76 = load %union.tree_node** %name526, align 8, !tbaa !40
  %id528 = getelementptr inbounds %union.tree_node* %76, i64 0, i32 0, i32 1
  %77 = getelementptr inbounds i8** %id528, i64 1
  %78 = load i8** %77, align 8, !tbaa !37
  %bf.lshr533 = lshr i32 %bf.load517, 19
  %bf.clear534 = and i32 %bf.lshr533, 1
  %call535 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([24 x i8]* @.str57, i64 0, i64 0), i8* %78, i32 %bf.clear534) #10
  br label %if.end536

if.end536:                                        ; preds = %if.then511, %if.then524, %land.lhs.true514
  %bf.load539 = load i32* %code, align 8
  %bf.clear540 = and i32 %bf.load539, 255
  %idxprom541682 = zext i32 %bf.clear540 to i64
  %arrayidx542 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom541682
  %79 = load i8* %arrayidx542, align 1, !tbaa !1
  %cmp544 = icmp eq i8 %79, 100
  br i1 %cmp544, label %lor.rhs546, label %lor.end553

lor.rhs546:                                       ; preds = %if.end536
  %bf.clear551 = and i32 %bf.load539, 524288
  %lnot = icmp eq i32 %bf.clear551, 0
  br label %lor.end553

lor.end553:                                       ; preds = %if.end536, %lor.rhs546
  %80 = phi i1 [ true, %if.end536 ], [ %lnot, %lor.rhs546 ]
  %lor.ext = zext i1 %80 to i32
  %arrayidx555 = getelementptr inbounds %struct.rtx_def* %cond506, i64 0, i32 1, i64 0
  %rtx556 = bitcast %union.rtunion_def* %arrayidx555 to %struct.rtx_def**
  %81 = load %struct.rtx_def** %rtx556, align 8, !tbaa !4
  %82 = getelementptr inbounds %struct.rtx_def* %81, i64 0, i32 0
  %bf.load557 = load i32* %82, align 8
  %bf.shl559 = shl nuw nsw i32 %lor.ext, 27
  %bf.clear560 = and i32 %bf.load557, -134217729
  %bf.set561 = or i32 %bf.clear560, %bf.shl559
  store i32 %bf.set561, i32* %82, align 8
  br label %do.end

do.end:                                           ; preds = %while.body, %while.cond.preheader, %cond.end, %cond.end204, %if.end476, %lor.end553, %cond.end505, %cond.end84
  ret void
}

declare %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #3

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8* nocapture readonly) #1

declare i32 @ix86_hard_regno_mode_ok(i32, i32) #3

declare void @error(i8*, ...) #3

declare void @warning(i8*, ...) #3

declare %struct.rtx_def* @gen_rtx_fmt_i0(i32, i32, i32) #3

declare void @globalize_reg(i32) #3

declare %union.tree_node* @get_identifier(i8*) #3

declare %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #3

declare %struct.rtx_def* @gen_rtx_fmt_s(i32, i32, i8*) #3

declare void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #3

; Function Attrs: nounwind uwtable
define void @make_var_volatile(%union.tree_node* %var) #0 {
entry:
  %rtl = getelementptr inbounds %union.tree_node* %var, i64 0, i32 0, i32 17
  %0 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %cond.false, label %cond.end

cond.false:                                       ; preds = %entry
  tail call void @make_decl_rtl(%union.tree_node* %var, i8* null)
  %1 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.false
  %2 = phi %struct.rtx_def* [ %1, %cond.false ], [ %0, %entry ]
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 997, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.make_var_volatile, i64 0, i64 0)) #9
  unreachable

if.end:                                           ; preds = %cond.end
  %tobool7 = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool7, label %cond.false11, label %cond.end14

cond.false11:                                     ; preds = %if.end
  tail call void @make_decl_rtl(%union.tree_node* %var, i8* null)
  %4 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 0
  %bf.load16.pre = load i32* %.phi.trans.insert, align 8
  br label %cond.end14

cond.end14:                                       ; preds = %if.end, %cond.false11
  %bf.load16 = phi i32 [ %bf.load16.pre, %cond.false11 ], [ %bf.load, %if.end ]
  %cond15 = phi %struct.rtx_def* [ %4, %cond.false11 ], [ %2, %if.end ]
  %5 = getelementptr inbounds %struct.rtx_def* %cond15, i64 0, i32 0
  %bf.set = or i32 %bf.load16, 134217728
  store i32 %bf.set, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_constant_align(%union.tree_node* %exp) #0 {
entry:
  %type = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !27
  %align2 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %1 = bitcast %union.tree_node** %align2 to i32*
  %2 = load i32* %1, align 4, !tbaa !41
  %call = tail call i32 @ix86_constant_alignment(%union.tree_node* %exp, i32 %2) #6
  %cmp = icmp sgt i32 %call, 8
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %entry
  %div = sdiv i32 %call, 8
  %conv = sext i32 %div to i64
  %call3 = tail call i32 @floor_log2_wide(i64 %conv) #6
  %cmp4 = icmp eq i32 %call3, 0
  br i1 %cmp4, label %if.end11, label %if.then6

if.then6:                                         ; preds = %if.then
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call9 = tail call i32 @floor_log2_wide(i64 %conv) #6
  %shl = shl i32 1, %call9
  %call10 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([12 x i8]* @.str58, i64 0, i64 0), i32 %shl) #6
  br label %if.end11

if.end11:                                         ; preds = %if.then, %if.then6, %entry
  ret void
}

declare i32 @ix86_constant_alignment(%union.tree_node*, i32) #3

declare i32 @floor_log2_wide(i64) #3

; Function Attrs: nounwind uwtable
define void @assemble_asm(%union.tree_node* nocapture readonly %string) #0 {
entry:
  tail call void @app_enable() #6
  %code = getelementptr inbounds %union.tree_node* %string, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 121
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node* %string, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %string.addr.0 = phi %union.tree_node* [ %0, %if.then ], [ %string, %entry ]
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %pointer = getelementptr inbounds %union.tree_node* %string.addr.0, i64 0, i32 0, i32 4
  %2 = load %union.tree_node** %pointer, align 8
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([5 x i8]* @.str59, i64 0, i64 0), %union.tree_node* %2) #6
  ret void
}

declare void @app_enable() #3

; Function Attrs: nounwind uwtable
define void @default_stabs_asm_out_destructor(%struct.rtx_def* nocapture readonly %symbol, i32 %priority) #0 {
entry:
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([27 x i8]* @.str60, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str61, i64 0, i64 0)) #6
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %arrayidx = getelementptr inbounds %struct.rtx_def* %symbol, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  %2 = load i8** %rtstr, align 8, !tbaa !4
  %3 = load i8* %2, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %3, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds i8* %2, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %4 = load i8* %2, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %4, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %2, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %1) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %2) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call1 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %5) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_name(%struct._IO_FILE* %file, i8* %name) #0 {
entry:
  %0 = load i8* %name, align 1, !tbaa !1
  %cmp = icmp eq i8 %0, 42
  %idx.ext = zext i1 %cmp to i64
  %add.ptr = getelementptr inbounds i8* %name, i64 %idx.ext
  %call = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr) #6
  %tobool = icmp eq %union.tree_node* %call, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %static_flag = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %static_flag, align 8
  %bf.set = or i32 %bf.load, 262144
  store i32 %bf.set, i32* %static_flag, align 8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %1 = load i8* %name, align 1, !tbaa !1
  %cmp4 = icmp eq i8 %1, 42
  br i1 %cmp4, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %arrayidx7 = getelementptr inbounds i8* %name, i64 1
  %call8 = tail call i32 @fputs(i8* %arrayidx7, %struct._IO_FILE* %file) #6
  br label %if.end9

if.else:                                          ; preds = %if.end
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %name) #6
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then6
  ret void
}

; Function Attrs: nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) #1

; Function Attrs: nounwind uwtable
define void @default_named_section_asm_out_destructor(%struct.rtx_def* %symbol, i32 %priority) #0 {
entry:
  %buf = alloca [16 x i8], align 16
  %cmp = icmp eq i32 %priority, 65535
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [16 x i8]* %buf, i64 0, i64 0
  %sub = sub nsw i32 65535, %priority
  %call = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([12 x i8]* @.str63, i64 0, i64 0), i32 %sub) #6
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %section.0 = phi i8* [ %arraydecay, %if.then ], [ getelementptr inbounds ([7 x i8]* @.str62, i64 0, i64 0), %entry ]
  call void @named_section_flags(i8* %section.0, i32 512)
  %0 = load i32* @target_flags, align 4, !tbaa !23
  %and = lshr i32 %0, 20
  %1 = and i32 %and, 32
  %2 = add i32 %1, 32
  %cmp.i = icmp ugt i32 %2, 8
  br i1 %cmp.i, label %if.then.i, label %assemble_align.exit

if.then.i:                                        ; preds = %if.end
  %div.i = sdiv i32 %2, 8
  %conv.i = sext i32 %div.i to i64
  %call.i = call i32 @floor_log2_wide(i64 %conv.i) #6
  %cmp1.i = icmp eq i32 %call.i, 0
  br i1 %cmp1.i, label %assemble_align.exit, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i = call i32 @floor_log2_wide(i64 %conv.i) #6
  %shl.i = shl i32 1, %call6.i
  %call7.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([12 x i8]* @.str58, i64 0, i64 0), i32 %shl.i) #6
  br label %assemble_align.exit

assemble_align.exit:                              ; preds = %if.end, %if.then.i, %if.then3.i
  %4 = load i32* @target_flags, align 4, !tbaa !23
  %and2 = lshr i32 %4, 20
  %5 = and i32 %and2, 32
  %6 = add i32 %5, 32
  %div = sdiv i32 %6, 8
  %call8 = call zeroext i1 @assemble_integer(%struct.rtx_def* %symbol, i32 %div, i32 %6, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_align(i32 %align) #0 {
entry:
  %cmp = icmp sgt i32 %align, 8
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %div = sdiv i32 %align, 8
  %conv = sext i32 %div to i64
  %call = tail call i32 @floor_log2_wide(i64 %conv) #6
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.end8, label %if.then3

if.then3:                                         ; preds = %if.then
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6 = tail call i32 @floor_log2_wide(i64 %conv) #6
  %shl = shl i32 1, %call6
  %call7 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([12 x i8]* @.str58, i64 0, i64 0), i32 %shl) #6
  br label %if.end8

if.end8:                                          ; preds = %if.then, %if.then3, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define zeroext i1 @assemble_integer(%struct.rtx_def* %x, i32 %size, i32 %align, i32 %force) #0 {
entry:
  %mul = shl i32 %size, 3
  %cmp = icmp ult i32 %mul, 128
  %mul. = select i1 %cmp, i32 %mul, i32 128
  %cmp2 = icmp ule i32 %mul., %align
  %conv = zext i1 %cmp2 to i32
  %0 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call = tail call zeroext i1 %0(%struct.rtx_def* %x, i32 %size, i32 %conv) #6
  br i1 %call, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp3 = icmp ugt i32 %size, 1
  br i1 %cmp3, label %for.body.lr.ph, label %if.end43

for.body.lr.ph:                                   ; preds = %if.end
  %1 = load i32* @target_flags, align 4, !tbaa !23
  %and = lshr i32 %1, 23
  %2 = and i32 %and, 4
  %3 = add i32 %2, 4
  %cmp7 = icmp ult i32 %3, %size
  %. = select i1 %cmp7, i32 %3, i32 1
  %mul16 = shl nsw i32 %., 3
  %cmp17 = icmp ugt i32 %mul16, %align
  %cond23 = select i1 %cmp17, i32 %align, i32 %mul16
  %call25 = tail call i32 @mode_for_size(i32 %mul16, i32 1, i32 0) #6
  %call27 = tail call i32 @mode_for_size(i32 %mul, i32 1, i32 0) #6
  br label %for.body

for.cond:                                         ; preds = %lor.lhs.false
  %cmp28 = icmp ult i32 %add, %size
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %i.067 = phi i32 [ 0, %for.body.lr.ph ], [ %add, %for.cond ]
  %call30 = tail call %struct.rtx_def* @simplify_subreg(i32 %call25, %struct.rtx_def* %x, i32 %call27, i32 %i.067) #6
  %tobool31 = icmp eq %struct.rtx_def* %call30, null
  br i1 %tobool31, label %for.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %call32 = tail call zeroext i1 @assemble_integer(%struct.rtx_def* %call30, i32 %., i32 %cond23, i32 0)
  %add = add i32 %i.067, %.
  br i1 %call32, label %for.cond, label %for.end

for.end:                                          ; preds = %for.cond, %lor.lhs.false, %for.body
  %i.0.lcssa = phi i32 [ %i.067, %for.body ], [ %i.067, %lor.lhs.false ], [ %add, %for.cond ]
  %cmp35 = icmp eq i32 %i.0.lcssa, %size
  br i1 %cmp35, label %return, label %if.end38

if.end38:                                         ; preds = %for.end
  %cmp39 = icmp eq i32 %i.0.lcssa, 0
  br i1 %cmp39, label %if.end43, label %if.then41

if.then41:                                        ; preds = %if.end38
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2008, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.end43:                                         ; preds = %if.end38, %if.end
  %tobool44 = icmp eq i32 %force, 0
  br i1 %tobool44, label %return, label %if.then45

if.then45:                                        ; preds = %if.end43
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

return:                                           ; preds = %if.end43, %for.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ true, %for.end ], [ false, %if.end43 ]
  ret i1 %retval.0
}

; Function Attrs: nounwind uwtable
define void @default_stabs_asm_out_constructor(%struct.rtx_def* nocapture readonly %symbol, i32 %priority) #0 {
entry:
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([27 x i8]* @.str64, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str61, i64 0, i64 0)) #6
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %arrayidx = getelementptr inbounds %struct.rtx_def* %symbol, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  %2 = load i8** %rtstr, align 8, !tbaa !4
  %3 = load i8* %2, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %3, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds i8* %2, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %4 = load i8* %2, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %4, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %2, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %1) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %2) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call1 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %5) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @default_named_section_asm_out_constructor(%struct.rtx_def* %symbol, i32 %priority) #0 {
entry:
  %buf = alloca [16 x i8], align 16
  %cmp = icmp eq i32 %priority, 65535
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [16 x i8]* %buf, i64 0, i64 0
  %sub = sub nsw i32 65535, %priority
  %call = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([12 x i8]* @.str66, i64 0, i64 0), i32 %sub) #6
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %section.0 = phi i8* [ %arraydecay, %if.then ], [ getelementptr inbounds ([7 x i8]* @.str65, i64 0, i64 0), %entry ]
  call void @named_section_flags(i8* %section.0, i32 512)
  %0 = load i32* @target_flags, align 4, !tbaa !23
  %and = lshr i32 %0, 20
  %1 = and i32 %and, 32
  %2 = add i32 %1, 32
  %cmp.i = icmp ugt i32 %2, 8
  br i1 %cmp.i, label %if.then.i, label %assemble_align.exit

if.then.i:                                        ; preds = %if.end
  %div.i = sdiv i32 %2, 8
  %conv.i = sext i32 %div.i to i64
  %call.i = call i32 @floor_log2_wide(i64 %conv.i) #6
  %cmp1.i = icmp eq i32 %call.i, 0
  br i1 %cmp1.i, label %assemble_align.exit, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i = call i32 @floor_log2_wide(i64 %conv.i) #6
  %shl.i = shl i32 1, %call6.i
  %call7.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([12 x i8]* @.str58, i64 0, i64 0), i32 %shl.i) #6
  br label %assemble_align.exit

assemble_align.exit:                              ; preds = %if.end, %if.then.i, %if.then3.i
  %4 = load i32* @target_flags, align 4, !tbaa !23
  %and2 = lshr i32 %4, 20
  %5 = and i32 %and2, 32
  %6 = add i32 %5, 32
  %div = sdiv i32 %6, 8
  %call8 = call zeroext i1 @assemble_integer(%struct.rtx_def* %symbol, i32 %div, i32 %6, i32 1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_start_function(%union.tree_node* %decl, i8* %fnname) #0 {
entry:
  tail call void @app_disable() #6
  tail call void @output_constant_pool(i8* undef, %union.tree_node* undef)
  %0 = load i32* @flag_function_sections, align 4, !tbaa !23
  tail call fastcc void @resolve_unique_section(%union.tree_node* %decl, i32 0, i32 %0)
  %cmp.i = icmp eq %union.tree_node* %decl, null
  br i1 %cmp.i, label %if.else.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %entry
  %section_name.i = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 15
  %1 = load %union.tree_node** %section_name.i, align 8, !tbaa !18
  %cmp2.i = icmp eq %union.tree_node* %1, null
  br i1 %cmp2.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %land.lhs.true.i
  tail call void @named_section(%union.tree_node* %decl, i8* null, i32 0) #6
  br label %function_section.exit

if.else.i:                                        ; preds = %land.lhs.true.i, %entry
  %2 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i = icmp eq i32 %2, 1
  br i1 %cmp.i.i, label %function_section.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.else.i
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0)) #6
  store i32 1, i32* @in_section, align 4, !tbaa !1
  br label %function_section.exit

function_section.exit:                            ; preds = %if.then.i, %if.else.i, %if.then.i.i
  %call = tail call i32 @floor_log2_wide(i64 2) #6
  %4 = icmp sgt i32 %call, 0
  br i1 %4, label %if.then2, label %if.end4

if.then2:                                         ; preds = %function_section.exit
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %shl = shl i32 1, %call
  %call3 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([12 x i8]* @.str58, i64 0, i64 0), i32 %shl) #6
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %function_section.exit
  %6 = load i32* @align_functions_log, align 4, !tbaa !23
  %cmp5 = icmp sgt i32 %6, %call
  %cmp7 = icmp ne i32 %6, 0
  %or.cond49 = and i1 %cmp5, %cmp7
  br i1 %or.cond49, label %if.then8, label %if.end16

if.then8:                                         ; preds = %if.end4
  %7 = load i32* @align_functions, align 4, !tbaa !23
  %sub = add nsw i32 %7, -1
  %cmp9 = icmp eq i32 %sub, 0
  %8 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.then8
  %call11 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([14 x i8]* @.str67, i64 0, i64 0), i32 %6) #6
  br label %if.end16

if.else:                                          ; preds = %if.then8
  %call13 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([18 x i8]* @.str68, i64 0, i64 0), i32 %6, i32 %sub) #6
  br label %if.end16

if.end16:                                         ; preds = %if.then10, %if.else, %if.end4
  %9 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !4
  %begin_function = getelementptr inbounds %struct.gcc_debug_hooks* %9, i64 0, i32 13
  %10 = load void (%union.tree_node*)** %begin_function, align 8, !tbaa !44
  tail call void %10(%union.tree_node* %decl) #6
  %public_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %public_flag, align 8
  %bf.clear = and i32 %bf.load, 524288
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %do.body42, label %if.then17

if.then17:                                        ; preds = %if.end16
  %11 = load i8** @first_global_object_name, align 8, !tbaa !4
  %tobool18 = icmp eq i8* %11, null
  br i1 %tobool18, label %if.then19, label %if.end40

if.then19:                                        ; preds = %if.then17
  %12 = load i8* %fnname, align 1, !tbaa !1
  %cmp20 = icmp eq i8 %12, 42
  %idx.ext = zext i1 %cmp20 to i64
  %add.ptr = getelementptr inbounds i8* %fnname, i64 %idx.ext
  %call22 = tail call i64 @strlen(i8* %add.ptr) #6
  %add = add i64 %call22, 1
  %conv23 = trunc i64 %add to i32
  %call24 = tail call i8* @permalloc(i32 %conv23) #6
  %call25 = tail call i8* @strcpy(i8* %call24, i8* %add.ptr) #6
  %weak_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %13 = bitcast i48* %weak_flag to i64*
  %bf.load27 = load i64* %13, align 8
  %14 = and i64 %bf.load27, 8912896
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %if.then37, label %if.else38

if.then37:                                        ; preds = %if.then19
  store i8* %call24, i8** @first_global_object_name, align 8, !tbaa !4
  br label %if.end40

if.else38:                                        ; preds = %if.then19
  store i8* %call24, i8** @weak_global_object_name, align 8, !tbaa !4
  br label %if.end40

if.end40:                                         ; preds = %if.then17, %if.then37, %if.else38
  tail call fastcc void @globalize_decl(%union.tree_node* %decl)
  br label %do.body42

do.body42:                                        ; preds = %if.end16, %if.end40
  %16 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %17 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str70, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %16)
  %18 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %19 = load i8* %fnname, align 1, !tbaa !1
  %cmp.i67 = icmp eq i8 %19, 42
  %idx.ext.i = zext i1 %cmp.i67 to i64
  %add.ptr.i = getelementptr inbounds i8* %fnname, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i68

if.then.i68:                                      ; preds = %do.body42
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i68, %do.body42
  %20 = load i8* %fnname, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %20, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i69

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %fnname, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %18) #6
  br label %assemble_name.exit

if.else.i69:                                      ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %fnname) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i69
  %21 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call44 = tail call i32 @putc(i32 44, %struct._IO_FILE* %21) #6
  %22 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call45 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([4 x i8]* @.str71, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str72, i64 0, i64 0)) #6
  %23 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call46 = tail call i32 @putc(i32 10, %struct._IO_FILE* %23) #6
  %24 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %25 = load i8* %fnname, align 1, !tbaa !1
  %cmp.i70 = icmp eq i8 %25, 42
  %idx.ext.i71 = zext i1 %cmp.i70 to i64
  %add.ptr.i72 = getelementptr inbounds i8* %fnname, i64 %idx.ext.i71
  %call.i73 = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i72) #6
  %tobool.i74 = icmp eq %union.tree_node* %call.i73, null
  br i1 %tobool.i74, label %if.end.i80, label %if.then.i78

if.then.i78:                                      ; preds = %assemble_name.exit
  %static_flag.i75 = getelementptr inbounds %union.tree_node* %call.i73, i64 0, i32 0, i32 0, i32 2
  %bf.load.i76 = load i32* %static_flag.i75, align 8
  %bf.set.i77 = or i32 %bf.load.i76, 262144
  store i32 %bf.set.i77, i32* %static_flag.i75, align 8
  br label %if.end.i80

if.end.i80:                                       ; preds = %if.then.i78, %assemble_name.exit
  %26 = load i8* %fnname, align 1, !tbaa !1
  %cmp4.i79 = icmp eq i8 %26, 42
  br i1 %cmp4.i79, label %if.then6.i83, label %if.else.i84

if.then6.i83:                                     ; preds = %if.end.i80
  %arrayidx7.i81 = getelementptr inbounds i8* %fnname, i64 1
  %call8.i82 = tail call i32 @fputs(i8* %arrayidx7.i81, %struct._IO_FILE* %24) #6
  br label %assemble_name.exit85

if.else.i84:                                      ; preds = %if.end.i80
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %fnname) #6
  br label %assemble_name.exit85

assemble_name.exit85:                             ; preds = %if.then6.i83, %if.else.i84
  %27 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %28 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str73, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %27)
  ret void
}

declare void @app_disable() #3

; Function Attrs: nounwind uwtable
define void @output_constant_pool(i8* nocapture readnone %fnname, %union.tree_node* nocapture readnone %fndecl) #0 {
entry:
  %name.i = alloca [24 x i8], align 16
  %u = alloca %union.real_extract, align 8
  %0 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm.i = getelementptr inbounds %struct.function* %0, i64 0, i32 4
  %1 = load %struct.varasm_status** %varasm.i, align 8, !tbaa !46
  %x_first_pool.i = getelementptr inbounds %struct.varasm_status* %1, i64 0, i32 2
  %2 = load %struct.pool_constant** %x_first_pool.i, align 8, !tbaa !49
  %cmp.i = icmp eq %struct.pool_constant* %2, null
  br i1 %cmp.i, label %land.lhs.true.i, label %for.body.i

land.lhs.true.i:                                  ; preds = %entry
  %3 = load %struct.htab** @const_str_htab, align 8, !tbaa !4
  %call.i = call i64 @htab_elements(%struct.htab* %3) #6
  %cmp1.i = icmp eq i64 %call.i, 0
  br i1 %cmp1.i, label %mark_constant_pool.exit, label %if.end.i

if.end.i:                                         ; preds = %land.lhs.true.i
  %.pre.i = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm2.phi.trans.insert.i = getelementptr inbounds %struct.function* %.pre.i, i64 0, i32 4
  %.pre57.i = load %struct.varasm_status** %varasm2.phi.trans.insert.i, align 8, !tbaa !46
  %x_first_pool3.phi.trans.insert.i = getelementptr inbounds %struct.varasm_status* %.pre57.i, i64 0, i32 2
  %pool.054.pre.i = load %struct.pool_constant** %x_first_pool3.phi.trans.insert.i, align 8
  %tobool55.i = icmp eq %struct.pool_constant* %pool.054.pre.i, null
  br i1 %tobool55.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %if.end.i, %entry, %for.body.i
  %pool.056.i = phi %struct.pool_constant* [ %pool.0.i, %for.body.i ], [ %pool.054.pre.i, %if.end.i ], [ %2, %entry ]
  %mark.i = getelementptr inbounds %struct.pool_constant* %pool.056.i, i64 0, i32 8
  store i32 0, i32* %mark.i, align 4, !tbaa !51
  %next.i = getelementptr inbounds %struct.pool_constant* %pool.056.i, i64 0, i32 1
  %pool.0.i = load %struct.pool_constant** %next.i, align 8
  %tobool.i = icmp eq %struct.pool_constant* %pool.0.i, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.end.i:                                        ; preds = %for.body.i, %if.end.i
  %call4.i = call %struct.rtx_def* @get_insns() #6
  %tobool652.i = icmp eq %struct.rtx_def* %call4.i, null
  br i1 %tobool652.i, label %for.end17.i, label %for.body7.i

for.body7.i:                                      ; preds = %for.end.i, %for.inc13.i
  %insn.053.i = phi %struct.rtx_def* [ %7, %for.inc13.i ], [ %call4.i, %for.end.i ]
  %4 = getelementptr inbounds %struct.rtx_def* %insn.053.i, i64 0, i32 0
  %bf.load.i = load i32* %4, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %idxprom48.i = zext i32 %bf.clear.i to i64
  %arrayidx.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom48.i
  %5 = load i8* %arrayidx.i, align 1, !tbaa !1
  %cmp8.i = icmp eq i8 %5, 105
  br i1 %cmp8.i, label %if.then10.i, label %for.inc13.i

if.then10.i:                                      ; preds = %for.body7.i
  %arrayidx11.i = getelementptr inbounds %struct.rtx_def* %insn.053.i, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx11.i to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  call fastcc void @mark_constants(%struct.rtx_def* %6) #6
  br label %for.inc13.i

for.inc13.i:                                      ; preds = %if.then10.i, %for.body7.i
  %arrayidx15.i = getelementptr inbounds %struct.rtx_def* %insn.053.i, i64 0, i32 1, i64 2
  %rtx16.i = bitcast %union.rtunion_def* %arrayidx15.i to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx16.i, align 8, !tbaa !4
  %tobool6.i = icmp eq %struct.rtx_def* %7, null
  br i1 %tobool6.i, label %for.end17.i, label %for.body7.i

for.end17.i:                                      ; preds = %for.inc13.i, %for.end.i
  %8 = load %struct.function** @cfun, align 8, !tbaa !4
  %epilogue_delay_list.i = getelementptr inbounds %struct.function* %8, i64 0, i32 55
  %insn.149.i = load %struct.rtx_def** %epilogue_delay_list.i, align 8
  %tobool1950.i = icmp eq %struct.rtx_def* %insn.149.i, null
  br i1 %tobool1950.i, label %mark_constant_pool.exit, label %for.body20.i

for.body20.i:                                     ; preds = %for.end17.i, %for.inc33.i
  %insn.151.i = phi %struct.rtx_def* [ %insn.1.i, %for.inc33.i ], [ %insn.149.i, %for.end17.i ]
  %9 = getelementptr inbounds %struct.rtx_def* %insn.151.i, i64 0, i32 0
  %bf.load21.i = load i32* %9, align 8
  %bf.clear22.i = and i32 %bf.load21.i, 65535
  %idxprom2347.i = zext i32 %bf.clear22.i to i64
  %arrayidx24.i = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom2347.i
  %10 = load i8* %arrayidx24.i, align 1, !tbaa !1
  %cmp26.i = icmp eq i8 %10, 105
  br i1 %cmp26.i, label %if.then28.i, label %for.inc33.i

if.then28.i:                                      ; preds = %for.body20.i
  %arrayidx30.i = getelementptr inbounds %struct.rtx_def* %insn.151.i, i64 0, i32 1, i64 3
  %rtx31.i = bitcast %union.rtunion_def* %arrayidx30.i to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx31.i, align 8, !tbaa !4
  call fastcc void @mark_constants(%struct.rtx_def* %11) #6
  br label %for.inc33.i

for.inc33.i:                                      ; preds = %if.then28.i, %for.body20.i
  %arrayidx35.i = getelementptr inbounds %struct.rtx_def* %insn.151.i, i64 0, i32 1, i64 1
  %rtx36.i = bitcast %union.rtunion_def* %arrayidx35.i to %struct.rtx_def**
  %insn.1.i = load %struct.rtx_def** %rtx36.i, align 8
  %tobool19.i = icmp eq %struct.rtx_def* %insn.1.i, null
  br i1 %tobool19.i, label %mark_constant_pool.exit, label %for.body20.i

mark_constant_pool.exit:                          ; preds = %for.inc33.i, %land.lhs.true.i, %for.end17.i
  %12 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm = getelementptr inbounds %struct.function* %12, i64 0, i32 4
  %13 = load %struct.varasm_status** %varasm, align 8, !tbaa !46
  %x_first_pool = getelementptr inbounds %struct.varasm_status* %13, i64 0, i32 2
  %pool.0181 = load %struct.pool_constant** %x_first_pool, align 8
  %tobool182 = icmp eq %struct.pool_constant* %pool.0181, null
  br i1 %tobool182, label %for.end126, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %mark_constant_pool.exit
  %14 = getelementptr inbounds [24 x i8]* %name.i, i64 0, i64 0
  %15 = bitcast %union.real_extract* %u to i8*
  %d = getelementptr inbounds %union.real_extract* %u, i64 0, i32 0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc125
  %pool.0183 = phi %struct.pool_constant* [ %pool.0181, %for.body.lr.ph ], [ %pool.0, %for.inc125 ]
  %constant = getelementptr inbounds %struct.pool_constant* %pool.0183, i64 0, i32 3
  %16 = load %struct.rtx_def** %constant, align 8, !tbaa !53
  %mark = getelementptr inbounds %struct.pool_constant* %pool.0183, i64 0, i32 8
  %17 = load i32* %mark, align 4, !tbaa !51
  %tobool1 = icmp eq i32 %17, 0
  br i1 %tobool1, label %for.inc125, label %if.end

if.end:                                           ; preds = %for.body
  %18 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 0
  %bf.load = load i32* %18, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 58, label %sw.bb
    i32 67, label %if.end.sw.bb21_crit_edge
  ]

if.end.sw.bb21_crit_edge:                         ; preds = %if.end
  %arrayidx23.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 0
  %rtx24.phi.trans.insert = bitcast %union.rtunion_def* %arrayidx23.phi.trans.insert to %struct.rtx_def**
  %.pre193 = load %struct.rtx_def** %rtx24.phi.trans.insert, align 8, !tbaa !4
  %.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %.pre193, i64 0, i32 0
  %bf.load25.pre = load i32* %.phi.trans.insert, align 8
  br label %sw.bb21

sw.bb:                                            ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %20 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 0
  %bf.load2 = load i32* %20, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp = icmp eq i32 %bf.clear3, 75
  br i1 %cmp, label %lor.lhs.false, label %sw.epilog

lor.lhs.false:                                    ; preds = %sw.bb
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 0
  %rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %21 = load %struct.rtx_def** %rtx9, align 8, !tbaa !4
  %22 = getelementptr inbounds %struct.rtx_def* %21, i64 0, i32 0
  %bf.load10 = load i32* %22, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 67
  br i1 %cmp12, label %sw.bb21, label %sw.epilog

sw.bb21:                                          ; preds = %if.end.sw.bb21_crit_edge, %lor.lhs.false
  %bf.load25 = phi i32 [ %bf.load25.pre, %if.end.sw.bb21_crit_edge ], [ %bf.load2, %lor.lhs.false ]
  %23 = phi %struct.rtx_def* [ %.pre193, %if.end.sw.bb21_crit_edge ], [ %19, %lor.lhs.false ]
  %bf.clear26 = and i32 %bf.load25, 134217728
  %tobool27 = icmp eq i32 %bf.clear26, 0
  br i1 %tobool27, label %lor.lhs.false28, label %if.then35

lor.lhs.false28:                                  ; preds = %sw.bb21
  %bf.clear30 = and i32 %bf.load25, 65535
  %cmp31 = icmp eq i32 %bf.clear30, 37
  br i1 %cmp31, label %land.lhs.true, label %sw.epilog

land.lhs.true:                                    ; preds = %lor.lhs.false28
  %arrayidx33 = getelementptr inbounds %struct.rtx_def* %23, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx33 to i32*
  %24 = load i32* %rtint, align 4, !tbaa !23
  %cmp34 = icmp eq i32 %24, -99
  br i1 %cmp34, label %if.then35, label %sw.epilog

if.then35:                                        ; preds = %sw.bb21, %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3998, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.output_constant_pool, i64 0, i64 0)) #9
  unreachable

sw.epilog:                                        ; preds = %lor.lhs.false, %sw.bb, %if.end, %lor.lhs.false28, %land.lhs.true
  %mode = getelementptr inbounds %struct.pool_constant* %pool.0183, i64 0, i32 4
  %25 = load i32* %mode, align 4, !tbaa !54
  %align = getelementptr inbounds %struct.pool_constant* %pool.0183, i64 0, i32 6
  %26 = load i32* %align, align 4, !tbaa !55
  %conv = zext i32 %26 to i64
  call void @llvm.lifetime.start(i64 24, i8* %14) #6
  %27 = load i32* @flag_merge_constants, align 4, !tbaa !23
  %tobool.i166 = icmp ne i32 %27, 0
  %cmp.i167 = icmp ne i32 %25, 0
  %or.cond.i = and i1 %tobool.i166, %cmp.i167
  %cmp3.i = icmp ne i32 %25, 51
  %or.cond24.i = and i1 %or.cond.i, %cmp3.i
  br i1 %or.cond24.i, label %land.lhs.true5.i, label %if.end.i170

land.lhs.true5.i:                                 ; preds = %sw.epilog
  %idxprom.i = sext i32 %25 to i64
  %arrayidx.i168 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom.i
  %28 = load i16* %arrayidx.i168, align 2, !tbaa !25
  %conv6.i = zext i16 %28 to i64
  %cmp7.i = icmp ule i64 %conv6.i, %conv
  %cmp10.i = icmp ugt i32 %26, 7
  %or.cond25.i = and i1 %cmp7.i, %cmp10.i
  %cmp13.i = icmp ult i32 %26, 257
  %or.cond26.i = and i1 %or.cond25.i, %cmp13.i
  br i1 %or.cond26.i, label %land.lhs.true15.i, label %if.end.i170

land.lhs.true15.i:                                ; preds = %land.lhs.true5.i
  %sub.i = add i64 %conv, 4294967295
  %and.i = and i64 %sub.i, %conv
  %cmp16.i = icmp eq i64 %and.i, 0
  br i1 %cmp16.i, label %if.then.i, label %if.end.i170

if.then.i:                                        ; preds = %land.lhs.true15.i
  %div.i = lshr i64 %conv, 3
  %conv18.i = trunc i64 %div.i to i32
  %call.i169 = call i32 (i8*, i8*, ...)* @sprintf(i8* %14, i8* getelementptr inbounds ([14 x i8]* @.str14, i64 0, i64 0), i32 %conv18.i) #6
  %or21.i = or i64 %div.i, 32768
  %conv22.i = trunc i64 %or21.i to i32
  call void @named_section_flags(i8* %14, i32 %conv22.i) #6
  br label %mergeable_constant_section.exit

if.end.i170:                                      ; preds = %land.lhs.true15.i, %land.lhs.true5.i, %sw.epilog
  %29 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i.i = icmp eq i32 %29, 5
  br i1 %cmp.i.i.i, label %mergeable_constant_section.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.end.i170
  %30 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i.i.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %mergeable_constant_section.exit

mergeable_constant_section.exit:                  ; preds = %if.then.i, %if.end.i170, %if.then.i.i.i
  call void @llvm.lifetime.end(i64 24, i8* %14) #6
  %31 = load i32* %align, align 4, !tbaa !55
  %cmp.i171 = icmp sgt i32 %31, 8
  br i1 %cmp.i171, label %if.then.i175, label %assemble_align.exit

if.then.i175:                                     ; preds = %mergeable_constant_section.exit
  %div.i172 = sdiv i32 %31, 8
  %conv.i = sext i32 %div.i172 to i64
  %call.i173 = call i32 @floor_log2_wide(i64 %conv.i) #6
  %cmp1.i174 = icmp eq i32 %call.i173, 0
  br i1 %cmp1.i174, label %assemble_align.exit, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i175
  %32 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i = call i32 @floor_log2_wide(i64 %conv.i) #6
  %shl.i = shl i32 1, %call6.i
  %call7.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([12 x i8]* @.str58, i64 0, i64 0), i32 %shl.i) #6
  br label %assemble_align.exit

assemble_align.exit:                              ; preds = %mergeable_constant_section.exit, %if.then.i175, %if.then3.i
  %33 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %labelno = getelementptr inbounds %struct.pool_constant* %pool.0183, i64 0, i32 5
  %34 = load i32* %labelno, align 4, !tbaa !56
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([8 x i8]* @.str76, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str100, i64 0, i64 0), i32 %34) #6
  %35 = load i32* %mode, align 4, !tbaa !54
  %idxprom = sext i32 %35 to i64
  %arrayidx39 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %36 = load i32* %arrayidx39, align 4, !tbaa !1
  switch i32 %36, label %sw.default123 [
    i32 2, label %sw.bb40
    i32 1, label %sw.bb51
    i32 3, label %sw.bb51
    i32 8, label %sw.bb58
    i32 7, label %sw.bb87
  ]

sw.bb40:                                          ; preds = %assemble_align.exit
  %bf.load41 = load i32* %18, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 55
  br i1 %cmp43, label %if.end46, label %if.then45

if.then45:                                        ; preds = %sw.bb40
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4029, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.output_constant_pool, i64 0, i64 0)) #9
  unreachable

if.end46:                                         ; preds = %sw.bb40
  %rtwint = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 1, i32 0
  %37 = bitcast i64* %rtwint to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %37, i64 24, i32 1, i1 false)
  %38 = load i32* %mode, align 4, !tbaa !54
  %39 = load i32* %align, align 4, !tbaa !55
  call void @assemble_real(%struct.realvaluetype* byval align 8 %d, i32 %38, i32 %39)
  br label %for.inc125

sw.bb51:                                          ; preds = %assemble_align.exit, %assemble_align.exit
  %arrayidx54 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %40 = load i8* %arrayidx54, align 1, !tbaa !1
  %conv55 = zext i8 %40 to i32
  %41 = load i32* %align, align 4, !tbaa !55
  %call57 = call zeroext i1 @assemble_integer(%struct.rtx_def* %16, i32 %conv55, i32 %41, i32 1)
  br label %for.inc125

sw.bb58:                                          ; preds = %assemble_align.exit
  %bf.load62 = load i32* %18, align 8
  %bf.clear63 = and i32 %bf.load62, 65535
  %cmp64 = icmp eq i32 %bf.clear63, 56
  br i1 %cmp64, label %if.end67, label %if.then66

if.then66:                                        ; preds = %sw.bb58
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4046, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.output_constant_pool, i64 0, i64 0)) #9
  unreachable

if.end67:                                         ; preds = %sw.bb58
  %arrayidx69 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtvec_def**
  %42 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !4
  %num_elem = getelementptr inbounds %struct.rtvec_def* %42, i64 0, i32 0
  %43 = load i32* %num_elem, align 4, !tbaa !57
  %cmp71179 = icmp sgt i32 %43, 0
  br i1 %cmp71179, label %for.body73, label %for.inc125

for.body73:                                       ; preds = %if.end67, %for.body73.for.body73_crit_edge
  %44 = phi %struct.rtvec_def* [ %.pre190, %for.body73.for.body73_crit_edge ], [ %42, %if.end67 ]
  %indvars.iv185 = phi i64 [ %indvars.iv.next186, %for.body73.for.body73_crit_edge ], [ 0, %if.end67 ]
  %arrayidx78 = getelementptr inbounds %struct.rtvec_def* %44, i64 0, i32 1, i64 %indvars.iv185
  %45 = load %struct.rtx_def** %arrayidx78, align 8, !tbaa !4
  %rtwint81 = getelementptr inbounds %struct.rtx_def* %45, i64 0, i32 1, i64 1, i32 0
  %46 = bitcast i64* %rtwint81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %46, i64 24, i32 1, i1 false)
  %47 = load i32* %mode, align 4, !tbaa !54
  %idxprom84 = sext i32 %47 to i64
  %arrayidx85 = getelementptr inbounds [59 x i32]* @inner_mode_array, i64 0, i64 %idxprom84
  %48 = load i32* %arrayidx85, align 4, !tbaa !1
  %49 = load i32* %align, align 4, !tbaa !55
  call void @assemble_real(%struct.realvaluetype* byval align 8 %d, i32 %48, i32 %49)
  %indvars.iv.next186 = add nuw nsw i64 %indvars.iv185, 1
  %lftr.wideiv187 = trunc i64 %indvars.iv.next186 to i32
  %exitcond188 = icmp eq i32 %lftr.wideiv187, %43
  br i1 %exitcond188, label %for.inc125, label %for.body73.for.body73_crit_edge

for.body73.for.body73_crit_edge:                  ; preds = %for.body73
  %.pre190 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !4
  br label %for.body73

sw.bb87:                                          ; preds = %assemble_align.exit
  %bf.load94 = load i32* %18, align 8
  %bf.clear95 = and i32 %bf.load94, 65535
  %cmp96 = icmp eq i32 %bf.clear95, 56
  br i1 %cmp96, label %if.end99, label %if.then98

if.then98:                                        ; preds = %sw.bb87
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4067, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.output_constant_pool, i64 0, i64 0)) #9
  unreachable

if.end99:                                         ; preds = %sw.bb87
  %arrayidx101 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 0
  %rtvec102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtvec_def**
  %50 = load %struct.rtvec_def** %rtvec102, align 8, !tbaa !4
  %num_elem103 = getelementptr inbounds %struct.rtvec_def* %50, i64 0, i32 0
  %51 = load i32* %num_elem103, align 4, !tbaa !57
  %cmp105177 = icmp sgt i32 %51, 0
  br i1 %cmp105177, label %for.body107, label %for.inc125

for.body107:                                      ; preds = %if.end99, %for.body107.for.body107_crit_edge
  %52 = phi i32 [ %.pre192, %for.body107.for.body107_crit_edge ], [ %35, %if.end99 ]
  %53 = phi %struct.rtvec_def* [ %.pre191, %for.body107.for.body107_crit_edge ], [ %50, %if.end99 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body107.for.body107_crit_edge ], [ 0, %if.end99 ]
  %arrayidx113 = getelementptr inbounds %struct.rtvec_def* %53, i64 0, i32 1, i64 %indvars.iv
  %54 = load %struct.rtx_def** %arrayidx113, align 8, !tbaa !4
  %idxprom115 = sext i32 %52 to i64
  %arrayidx116 = getelementptr inbounds [59 x i8]* @mode_unit_size, i64 0, i64 %idxprom115
  %55 = load i8* %arrayidx116, align 1, !tbaa !1
  %conv117 = zext i8 %55 to i32
  %56 = load i32* %align, align 4, !tbaa !55
  %call119 = call zeroext i1 @assemble_integer(%struct.rtx_def* %54, i32 %conv117, i32 %56, i32 1)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %51
  br i1 %exitcond, label %for.inc125, label %for.body107.for.body107_crit_edge

for.body107.for.body107_crit_edge:                ; preds = %for.body107
  %.pre191 = load %struct.rtvec_def** %rtvec102, align 8, !tbaa !4
  %.pre192 = load i32* %mode, align 4, !tbaa !54
  br label %for.body107

sw.default123:                                    ; preds = %assemble_align.exit
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4081, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.output_constant_pool, i64 0, i64 0)) #9
  unreachable

for.inc125:                                       ; preds = %for.body107, %for.body73, %if.end99, %if.end67, %for.body, %if.end46, %sw.bb51
  %next = getelementptr inbounds %struct.pool_constant* %pool.0183, i64 0, i32 1
  %pool.0 = load %struct.pool_constant** %next, align 8
  %tobool = icmp eq %struct.pool_constant* %pool.0, null
  br i1 %tobool, label %for.cond.for.end126_crit_edge, label %for.body

for.cond.for.end126_crit_edge:                    ; preds = %for.inc125
  %.pre = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm127.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 4
  %.pre189 = load %struct.varasm_status** %varasm127.phi.trans.insert, align 8, !tbaa !46
  br label %for.end126

for.end126:                                       ; preds = %for.cond.for.end126_crit_edge, %mark_constant_pool.exit
  %57 = phi %struct.varasm_status* [ %.pre189, %for.cond.for.end126_crit_edge ], [ %13, %mark_constant_pool.exit ]
  %x_last_pool = getelementptr inbounds %struct.varasm_status* %57, i64 0, i32 3
  store %struct.pool_constant* null, %struct.pool_constant** %x_last_pool, align 8, !tbaa !59
  %58 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm128 = getelementptr inbounds %struct.function* %58, i64 0, i32 4
  %59 = load %struct.varasm_status** %varasm128, align 8, !tbaa !46
  %x_first_pool129 = getelementptr inbounds %struct.varasm_status* %59, i64 0, i32 2
  store %struct.pool_constant* null, %struct.pool_constant** %x_first_pool129, align 8, !tbaa !49
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @resolve_unique_section(%union.tree_node* %decl, i32 %reloc, i32 %flag_function_or_data_sections) #0 {
entry:
  %section_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 15
  %0 = load %union.tree_node** %section_name, align 8, !tbaa !18
  %cmp = icmp eq %union.tree_node* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.end84

land.lhs.true:                                    ; preds = %entry
  %tobool = icmp eq i32 %flag_function_or_data_sections, 0
  br i1 %tobool, label %lor.lhs.false, label %do.body

lor.lhs.false:                                    ; preds = %land.lhs.true
  %1 = load i8* getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 13), align 8, !tbaa !30, !range !11
  %tobool2 = icmp eq i8 %1, 0
  br i1 %tobool2, label %if.end84, label %land.lhs.true3

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %transparent_union = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %2 = bitcast i48* %transparent_union to i64*
  %bf.load = load i64* %2, align 8
  %bf.cast = and i64 %bf.load, 524288
  %tobool5 = icmp eq i64 %bf.cast, 0
  br i1 %tobool5, label %if.end84, label %do.body

do.body:                                          ; preds = %land.lhs.true3, %land.lhs.true
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load6 = load i32* %code, align 8
  %bf.clear7 = and i32 %bf.load6, 255
  %cmp8 = icmp eq i32 %bf.clear7, 30
  br i1 %cmp8, label %if.end60, label %if.else

if.else:                                          ; preds = %do.body
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %3 = load %union.tree_node** %initial, align 8, !tbaa !24
  %cmp11 = icmp eq %union.tree_node* %3, null
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp15 = icmp eq %union.tree_node* %3, %4
  %or.cond107 = or i1 %cmp11, %cmp15
  br i1 %or.cond107, label %if.end60, label %if.else17

if.else17:                                        ; preds = %if.else
  %5 = and i32 %bf.load6, 6144
  %or.cond.not = icmp eq i32 %5, 4096
  br i1 %or.cond.not, label %lor.lhs.false37, label %if.else58

lor.lhs.false37:                                  ; preds = %if.else17
  %constant_flag = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load41 = load i32* %constant_flag, align 8
  %bf.clear43 = and i32 %bf.load41, 512
  %tobool44 = icmp eq i32 %bf.clear43, 0
  br i1 %tobool44, label %if.else58, label %land.lhs.true45

land.lhs.true45:                                  ; preds = %lor.lhs.false37
  %tobool46 = icmp eq i32 %reloc, 0
  br i1 %tobool46, label %if.end60, label %land.lhs.true47

land.lhs.true47:                                  ; preds = %land.lhs.true45
  %6 = load i32* @flag_pic, align 4, !tbaa !23
  %tobool48 = icmp eq i32 %6, 0
  br i1 %tobool48, label %lor.lhs.false49, label %if.else58

lor.lhs.false49:                                  ; preds = %land.lhs.true47
  %transparent_union51 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %7 = bitcast i48* %transparent_union51 to i64*
  %bf.load52 = load i64* %7, align 8
  %bf.cast55 = and i64 %bf.load52, 524288
  %tobool56 = icmp eq i64 %bf.cast55, 0
  br i1 %tobool56, label %if.end60, label %if.else58

if.else58:                                        ; preds = %if.else17, %lor.lhs.false49, %land.lhs.true47, %lor.lhs.false37
  br label %if.end60

if.end60:                                         ; preds = %land.lhs.true45, %lor.lhs.false49, %if.else, %do.body, %if.else58
  %sec.0 = phi i64 [ 2, %if.else58 ], [ 0, %do.body ], [ 3, %if.else ], [ 1, %lor.lhs.false49 ], [ 1, %land.lhs.true45 ]
  %assembler_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 14
  %8 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  %cmp62 = icmp eq %union.tree_node* %8, null
  br i1 %cmp62, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.end60
  %9 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !4
  call void %9(%union.tree_node* %decl) #6
  %.pre = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  br label %cond.end

cond.end:                                         ; preds = %if.end60, %cond.false
  %10 = phi %union.tree_node* [ %8, %if.end60 ], [ %.pre, %cond.false ]
  %id = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 1
  %11 = getelementptr inbounds i8** %id, i64 1
  %12 = load i8** %11, align 8, !tbaa !37
  %13 = load i8* %12, align 1, !tbaa !1
  %cmp65 = icmp eq i8 %13, 42
  %idx.ext = zext i1 %cmp65 to i64
  %add.ptr = getelementptr inbounds i8* %12, i64 %idx.ext
  %transparent_union68 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %14 = bitcast i48* %transparent_union68 to i64*
  %bf.load69 = load i64* %14, align 8
  %bf.lshr70 = lshr i64 %bf.load69, 19
  %bf.cast72 = and i64 %bf.lshr70, 1
  %arrayidx75 = getelementptr inbounds [4 x [2 x i8*]]* @resolve_unique_section.prefixes, i64 0, i64 %sec.0, i64 %bf.cast72
  %15 = load i8** %arrayidx75, align 8, !tbaa !4
  %call = call i64 @strlen(i8* %add.ptr) #6
  %call76 = call i64 @strlen(i8* %15) #6
  %add = add i64 %call76, %call
  %conv77 = trunc i64 %add to i32
  %add78 = shl i64 %add, 32
  %sext = add i64 %add78, 4294967296
  %conv79 = ashr exact i64 %sext, 32
  %16 = alloca i8, i64 %conv79, align 1
  %call80 = call i32 (i8*, i8*, ...)* @sprintf(i8* %16, i8* getelementptr inbounds ([5 x i8]* @.str134, i64 0, i64 0), i8* %15, i8* %add.ptr) #6
  %call81 = call %union.tree_node* @build_string(i32 %conv77, i8* %16) #6
  store %union.tree_node* %call81, %union.tree_node** %section_name, align 8, !tbaa !18
  br label %if.end84

if.end84:                                         ; preds = %land.lhs.true3, %lor.lhs.false, %cond.end, %entry
  ret void
}

declare i8* @permalloc(i32) #3

; Function Attrs: nounwind uwtable
define internal fastcc void @globalize_decl(%union.tree_node* %decl) #0 {
entry:
  %rtl = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  %0 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %cond.false, label %cond.end

cond.false:                                       ; preds = %entry
  tail call void @make_decl_rtl(%union.tree_node* %decl, i8* null)
  %1 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.false
  %cond = phi %struct.rtx_def* [ %1, %cond.false ], [ %0, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %cond, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx7 to i8**
  %3 = load i8** %rtstr, align 8, !tbaa !4
  %weak_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %4 = bitcast i48* %weak_flag to i64*
  %bf.load = load i64* %4, align 8
  %bf.cast = and i64 %bf.load, 8388608
  %tobool9 = icmp eq i64 %bf.cast, 0
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  br i1 %tobool9, label %if.end34, label %do.body

do.body:                                          ; preds = %cond.end
  %6 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str107, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %5)
  %7 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %8 = load i8* %3, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %8, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds i8* %3, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %do.body
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %do.body
  %9 = load i8* %3, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %9, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %3, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %7) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %3) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %10 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call10 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %10) #6
  %11 = load %union.tree_node** @weak_decls, align 8, !tbaa !4
  %tobool116465 = icmp eq %union.tree_node* %11, null
  br i1 %tobool116465, label %return, label %for.body.lr.ph.lr.ph

for.body.lr.ph.lr.ph:                             ; preds = %assemble_name.exit
  %assembler_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 14
  br label %for.body.lr.ph

for.cond.outer.loopexit:                          ; preds = %cond.end25
  %tobool1164 = icmp eq %union.tree_node* %22, null
  br i1 %tobool1164, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.body.lr.ph.lr.ph, %for.cond.outer.loopexit
  %12 = phi %union.tree_node* [ %11, %for.body.lr.ph.lr.ph ], [ %22, %for.cond.outer.loopexit ]
  %p.0.ph66 = phi %union.tree_node** [ @weak_decls, %for.body.lr.ph.lr.ph ], [ %chain, %for.cond.outer.loopexit ]
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %if.then31
  %13 = phi %union.tree_node* [ %12, %for.body.lr.ph ], [ %22, %if.then31 ]
  %14 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  %cmp = icmp eq %union.tree_node* %14, null
  br i1 %cmp, label %cond.false14, label %cond.end15

cond.false14:                                     ; preds = %for.body
  %15 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !4
  tail call void %15(%union.tree_node* %decl) #6
  %.pre = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  br label %cond.end15

cond.end15:                                       ; preds = %for.body, %cond.false14
  %16 = phi %union.tree_node* [ %14, %for.body ], [ %.pre, %cond.false14 ]
  %value = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 2
  %17 = bitcast i32* %value to %union.tree_node**
  %18 = load %union.tree_node** %17, align 8, !tbaa !60
  %assembler_name19 = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 14
  %19 = load %union.tree_node** %assembler_name19, align 8, !tbaa !36
  %cmp20 = icmp eq %union.tree_node* %19, null
  br i1 %cmp20, label %cond.false22, label %cond.end25

cond.false22:                                     ; preds = %cond.end15
  %20 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !4
  tail call void %20(%union.tree_node* %18) #6
  %.pre68 = load %union.tree_node** %17, align 8, !tbaa !60
  %assembler_name29.phi.trans.insert = getelementptr inbounds %union.tree_node* %.pre68, i64 0, i32 0, i32 14
  %.pre69 = load %union.tree_node** %assembler_name29.phi.trans.insert, align 8, !tbaa !36
  br label %cond.end25

cond.end25:                                       ; preds = %cond.end15, %cond.false22
  %21 = phi %union.tree_node* [ %19, %cond.end15 ], [ %.pre69, %cond.false22 ]
  %cmp30 = icmp eq %union.tree_node* %16, %21
  %chain = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 0
  %22 = load %union.tree_node** %chain, align 8, !tbaa !62
  br i1 %cmp30, label %if.then31, label %for.cond.outer.loopexit

if.then31:                                        ; preds = %cond.end25
  store %union.tree_node* %22, %union.tree_node** %p.0.ph66, align 8, !tbaa !4
  %tobool11 = icmp eq %union.tree_node* %22, null
  br i1 %tobool11, label %return, label %for.body

if.end34:                                         ; preds = %cond.end
  %23 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str93, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %5)
  %24 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %25 = load i8* %3, align 1, !tbaa !1
  %cmp.i48 = icmp eq i8 %25, 42
  %idx.ext.i49 = zext i1 %cmp.i48 to i64
  %add.ptr.i50 = getelementptr inbounds i8* %3, i64 %idx.ext.i49
  %call.i51 = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i50) #6
  %tobool.i52 = icmp eq %union.tree_node* %call.i51, null
  br i1 %tobool.i52, label %if.end.i58, label %if.then.i56

if.then.i56:                                      ; preds = %if.end34
  %static_flag.i53 = getelementptr inbounds %union.tree_node* %call.i51, i64 0, i32 0, i32 0, i32 2
  %bf.load.i54 = load i32* %static_flag.i53, align 8
  %bf.set.i55 = or i32 %bf.load.i54, 262144
  store i32 %bf.set.i55, i32* %static_flag.i53, align 8
  br label %if.end.i58

if.end.i58:                                       ; preds = %if.then.i56, %if.end34
  %26 = load i8* %3, align 1, !tbaa !1
  %cmp4.i57 = icmp eq i8 %26, 42
  br i1 %cmp4.i57, label %if.then6.i61, label %if.else.i62

if.then6.i61:                                     ; preds = %if.end.i58
  %arrayidx7.i59 = getelementptr inbounds i8* %3, i64 1
  %call8.i60 = tail call i32 @fputs(i8* %arrayidx7.i59, %struct._IO_FILE* %24) #6
  br label %assemble_name.exit63

if.else.i62:                                      ; preds = %if.end.i58
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %3) #6
  br label %assemble_name.exit63

assemble_name.exit63:                             ; preds = %if.then6.i61, %if.else.i62
  %27 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %fputc = tail call i32 @fputc(i32 10, %struct._IO_FILE* %27) #6
  br label %return

return:                                           ; preds = %for.cond.outer.loopexit, %if.then31, %assemble_name.exit, %assemble_name.exit63
  ret void
}

; Function Attrs: nounwind
declare i32 @putc(i32, %struct._IO_FILE* nocapture) #1

; Function Attrs: nounwind
declare i32 @fputs(i8* nocapture readonly, %struct._IO_FILE* nocapture) #1

; Function Attrs: nounwind uwtable
define void @assemble_end_function(%union.tree_node* nocapture readnone %decl, i8* %fnname) #0 {
entry:
  %label = alloca [256 x i8], align 16
  %0 = load i32* @flag_inhibit_size_directive, align 4, !tbaa !23
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.then, label %do.end12

if.then:                                          ; preds = %entry
  %1 = getelementptr inbounds [256 x i8]* %label, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %1) #6
  %2 = load i32* @assemble_end_function.labelno, align 4, !tbaa !23
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @assemble_end_function.labelno, align 4, !tbaa !23
  %call = call i32 (i8*, i8*, ...)* @sprintf(i8* %1, i8* getelementptr inbounds ([7 x i8]* @.str74, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8]* @.str75, i64 0, i64 0), i32 %inc) #6
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %4 = load i32* @assemble_end_function.labelno, align 4, !tbaa !23
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([8 x i8]* @.str76, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8]* @.str75, i64 0, i64 0), i32 %4) #6
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %6 = call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str77, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %5)
  %7 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %8 = load i8* %fnname, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %8, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds i8* %fnname, i64 %idx.ext.i
  %call.i = call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %9 = load i8* %fnname, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %9, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %fnname, i64 1
  %call8.i = call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %7) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %fnname) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %10 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %fputc = call i32 @fputc(i32 44, %struct._IO_FILE* %10) #6
  %11 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %12 = load i8* %1, align 16, !tbaa !1
  %cmp.i17 = icmp eq i8 %12, 42
  %idx.ext.i18 = zext i1 %cmp.i17 to i64
  %add.ptr.i19 = getelementptr inbounds [256 x i8]* %label, i64 0, i64 %idx.ext.i18
  %call.i20 = call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i19) #6
  %tobool.i21 = icmp eq %union.tree_node* %call.i20, null
  br i1 %tobool.i21, label %if.end.i27, label %if.then.i25

if.then.i25:                                      ; preds = %assemble_name.exit
  %static_flag.i22 = getelementptr inbounds %union.tree_node* %call.i20, i64 0, i32 0, i32 0, i32 2
  %bf.load.i23 = load i32* %static_flag.i22, align 8
  %bf.set.i24 = or i32 %bf.load.i23, 262144
  store i32 %bf.set.i24, i32* %static_flag.i22, align 8
  br label %if.end.i27

if.end.i27:                                       ; preds = %if.then.i25, %assemble_name.exit
  %13 = load i8* %1, align 16, !tbaa !1
  %cmp4.i26 = icmp eq i8 %13, 42
  br i1 %cmp4.i26, label %if.then6.i30, label %if.else.i31

if.then6.i30:                                     ; preds = %if.end.i27
  %arrayidx7.i28 = getelementptr inbounds [256 x i8]* %label, i64 0, i64 1
  %call8.i29 = call i32 @fputs(i8* %arrayidx7.i28, %struct._IO_FILE* %11) #6
  br label %assemble_name.exit32

if.else.i31:                                      ; preds = %if.end.i27
  call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %1) #6
  br label %assemble_name.exit32

assemble_name.exit32:                             ; preds = %if.then6.i30, %if.else.i31
  %14 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %fputc16 = call i32 @fputc(i32 45, %struct._IO_FILE* %14) #6
  %15 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %16 = load i8* %fnname, align 1, !tbaa !1
  %cmp.i33 = icmp eq i8 %16, 42
  %idx.ext.i34 = zext i1 %cmp.i33 to i64
  %add.ptr.i35 = getelementptr inbounds i8* %fnname, i64 %idx.ext.i34
  %call.i36 = call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i35) #6
  %tobool.i37 = icmp eq %union.tree_node* %call.i36, null
  br i1 %tobool.i37, label %if.end.i43, label %if.then.i41

if.then.i41:                                      ; preds = %assemble_name.exit32
  %static_flag.i38 = getelementptr inbounds %union.tree_node* %call.i36, i64 0, i32 0, i32 0, i32 2
  %bf.load.i39 = load i32* %static_flag.i38, align 8
  %bf.set.i40 = or i32 %bf.load.i39, 262144
  store i32 %bf.set.i40, i32* %static_flag.i38, align 8
  br label %if.end.i43

if.end.i43:                                       ; preds = %if.then.i41, %assemble_name.exit32
  %17 = load i8* %fnname, align 1, !tbaa !1
  %cmp4.i42 = icmp eq i8 %17, 42
  br i1 %cmp4.i42, label %if.then6.i46, label %if.else.i47

if.then6.i46:                                     ; preds = %if.end.i43
  %arrayidx7.i44 = getelementptr inbounds i8* %fnname, i64 1
  %call8.i45 = call i32 @fputs(i8* %arrayidx7.i44, %struct._IO_FILE* %15) #6
  br label %assemble_name.exit48

if.else.i47:                                      ; preds = %if.end.i43
  call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %fnname) #6
  br label %assemble_name.exit48

assemble_name.exit48:                             ; preds = %if.then6.i46, %if.else.i47
  %18 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call10 = call i32 @putc(i32 10, %struct._IO_FILE* %18) #6
  call void @llvm.lifetime.end(i64 256, i8* %1) #6
  br label %do.end12

do.end12:                                         ; preds = %entry, %assemble_name.exit48
  ret void
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #6

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #6

; Function Attrs: nounwind uwtable
define void @assemble_zeros(i32 %size) #0 {
entry:
  %0 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end, label %if.end8

if.end:                                           ; preds = %entry
  %1 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i = icmp eq i32 %1, 1
  %cmp12 = icmp sgt i32 %size, 0
  br i1 %cmp.i, label %for.cond.preheader, label %if.else

for.cond.preheader:                               ; preds = %if.end
  br i1 %cmp12, label %for.body, label %if.end8

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %size
  br i1 %cmp, label %for.body, label %if.end8

for.body:                                         ; preds = %for.cond.preheader, %for.cond
  %i.013 = phi i32 [ %inc, %for.cond ], [ 0, %for.cond.preheader ]
  %2 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !4
  %3 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i = tail call zeroext i1 %3(%struct.rtx_def* %2, i32 1, i32 1) #6
  %inc = add nsw i32 %i.013, 1
  br i1 %call.i, label %for.cond, label %if.end.i

if.end.i:                                         ; preds = %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.else:                                          ; preds = %if.end
  br i1 %cmp12, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.else
  %4 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %size) #6
  br label %if.end8

if.end8:                                          ; preds = %for.cond, %for.cond.preheader, %entry, %if.else, %if.then5
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_string(i8* %p, i32 %size) #0 {
entry:
  %cmp112 = icmp sgt i32 %size, 0
  br i1 %cmp112, label %while.body, label %while.end

while.body:                                       ; preds = %entry, %do.end66
  %p.addr.0114 = phi i8* [ %add.ptr, %do.end66 ], [ %p, %entry ]
  %pos.0113 = phi i32 [ %add67, %do.end66 ], [ 0, %entry ]
  %sub = sub nsw i32 %size, %pos.0113
  %cmp1 = icmp sgt i32 %sub, 2000
  %.sub = select i1 %cmp1, i32 2000, i32 %sub
  %idx.ext = sext i32 %.sub to i64
  %add.ptr = getelementptr inbounds i8* %p.addr.0114, i64 %idx.ext
  %cmp2107 = icmp sgt i32 %.sub, 0
  br i1 %cmp2107, label %for.body, label %do.end66

for.body:                                         ; preds = %while.body, %for.inc58
  %_ascii_bytes.0109 = phi i8* [ %incdec.ptr59, %for.inc58 ], [ %p.addr.0114, %while.body ]
  %bytes_in_chunk.0108 = phi i32 [ %bytes_in_chunk.3, %for.inc58 ], [ 0, %while.body ]
  %cmp4 = icmp ugt i32 %bytes_in_chunk.0108, 59
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str82, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %0)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  %bytes_in_chunk.1 = phi i32 [ 0, %if.then5 ], [ %bytes_in_chunk.0108, %for.body ]
  %cmp8101 = icmp ult i8* %_ascii_bytes.0109, %add.ptr
  br i1 %cmp8101, label %land.rhs, label %if.else

for.cond7:                                        ; preds = %land.rhs
  %cmp8 = icmp ult i8* %incdec.ptr, %add.ptr
  br i1 %cmp8, label %land.rhs, label %if.else

land.rhs:                                         ; preds = %if.end6, %for.cond7
  %p3.0102 = phi i8* [ %incdec.ptr, %for.cond7 ], [ %_ascii_bytes.0109, %if.end6 ]
  %2 = load i8* %p3.0102, align 1, !tbaa !1
  %cmp9 = icmp eq i8 %2, 0
  %incdec.ptr = getelementptr inbounds i8* %p3.0102, i64 1
  br i1 %cmp9, label %land.lhs.true, label %for.cond7

land.lhs.true:                                    ; preds = %land.rhs
  %sub.ptr.lhs.cast = ptrtoint i8* %p3.0102 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %_ascii_bytes.0109 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp14 = icmp slt i64 %sub.ptr.sub, 257
  br i1 %cmp14, label %if.then16, label %if.else

if.then16:                                        ; preds = %land.lhs.true
  %cmp17 = icmp eq i32 %bytes_in_chunk.1, 0
  br i1 %cmp17, label %do.body22, label %if.then19

if.then19:                                        ; preds = %if.then16
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str82, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %3)
  br label %do.body22

do.body22:                                        ; preds = %if.then16, %if.then19
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call23 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([4 x i8]* @.str83, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @.str84, i64 0, i64 0)) #6
  %6 = load i8* %_ascii_bytes.0109, align 1, !tbaa !1
  %tobool104 = icmp eq i8 %6, 0
  br i1 %tobool104, label %for.end35, label %for.body26

for.body26:                                       ; preds = %do.body22, %for.inc33
  %conv25106.in = phi i8 [ %12, %for.inc33 ], [ %6, %do.body22 ]
  %_limited_str.0105 = phi i8* [ %incdec.ptr34, %for.inc33 ], [ %_ascii_bytes.0109, %do.body22 ]
  %conv25106 = zext i8 %conv25106.in to i32
  %idxprom = zext i8 %conv25106.in to i64
  %arrayidx = getelementptr inbounds [257 x i8]* @.str85, i64 0, i64 %idxprom
  %7 = load i8* %arrayidx, align 1, !tbaa !1
  %conv27 = sext i8 %7 to i32
  switch i32 %conv27, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb29
  ]

sw.bb:                                            ; preds = %for.body26
  %8 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call28 = tail call i32 @putc(i32 %conv25106, %struct._IO_FILE* %8) #6
  br label %for.inc33

sw.bb29:                                          ; preds = %for.body26
  %9 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call30 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([6 x i8]* @.str86, i64 0, i64 0), i32 %conv25106) #6
  br label %for.inc33

sw.default:                                       ; preds = %for.body26
  %10 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call31 = tail call i32 @putc(i32 92, %struct._IO_FILE* %10) #6
  %11 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call32 = tail call i32 @putc(i32 %conv27, %struct._IO_FILE* %11) #6
  br label %for.inc33

for.inc33:                                        ; preds = %sw.bb, %sw.bb29, %sw.default
  %incdec.ptr34 = getelementptr inbounds i8* %_limited_str.0105, i64 1
  %12 = load i8* %incdec.ptr34, align 1, !tbaa !1
  %tobool = icmp eq i8 %12, 0
  br i1 %tobool, label %for.end35, label %for.body26

for.end35:                                        ; preds = %for.inc33, %do.body22
  %13 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %14 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str82, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %13)
  br label %for.inc58

if.else:                                          ; preds = %for.cond7, %if.end6, %land.lhs.true
  %cmp39 = icmp eq i32 %bytes_in_chunk.1, 0
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.else
  %15 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call42 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([4 x i8]* @.str83, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str87, i64 0, i64 0)) #6
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %if.else
  %16 = load i8* %_ascii_bytes.0109, align 1, !tbaa !1
  %conv44 = zext i8 %16 to i32
  %idxprom45 = zext i8 %16 to i64
  %arrayidx46 = getelementptr inbounds [257 x i8]* @.str85, i64 0, i64 %idxprom45
  %17 = load i8* %arrayidx46, align 1, !tbaa !1
  %conv47 = sext i8 %17 to i32
  switch i32 %conv47, label %sw.default52 [
    i32 0, label %sw.bb48
    i32 1, label %sw.bb50
  ]

sw.bb48:                                          ; preds = %if.end43
  %18 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call49 = tail call i32 @putc(i32 %conv44, %struct._IO_FILE* %18) #6
  %inc = add i32 %bytes_in_chunk.1, 1
  br label %for.inc58

sw.bb50:                                          ; preds = %if.end43
  %19 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call51 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([6 x i8]* @.str86, i64 0, i64 0), i32 %conv44) #6
  %add = add i32 %bytes_in_chunk.1, 4
  br label %for.inc58

sw.default52:                                     ; preds = %if.end43
  %20 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call53 = tail call i32 @putc(i32 92, %struct._IO_FILE* %20) #6
  %21 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call54 = tail call i32 @putc(i32 %conv47, %struct._IO_FILE* %21) #6
  %add55 = add i32 %bytes_in_chunk.1, 2
  br label %for.inc58

for.inc58:                                        ; preds = %for.end35, %sw.default52, %sw.bb50, %sw.bb48
  %bytes_in_chunk.3 = phi i32 [ 0, %for.end35 ], [ %add55, %sw.default52 ], [ %add, %sw.bb50 ], [ %inc, %sw.bb48 ]
  %_ascii_bytes.1 = phi i8* [ %p3.0102, %for.end35 ], [ %_ascii_bytes.0109, %sw.default52 ], [ %_ascii_bytes.0109, %sw.bb50 ], [ %_ascii_bytes.0109, %sw.bb48 ]
  %incdec.ptr59 = getelementptr inbounds i8* %_ascii_bytes.1, i64 1
  %cmp2 = icmp ult i8* %incdec.ptr59, %add.ptr
  br i1 %cmp2, label %for.body, label %for.end60

for.end60:                                        ; preds = %for.inc58
  %cmp61 = icmp eq i32 %bytes_in_chunk.3, 0
  br i1 %cmp61, label %do.end66, label %if.then63

if.then63:                                        ; preds = %for.end60
  %22 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %23 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str82, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %22)
  br label %do.end66

do.end66:                                         ; preds = %while.body, %for.end60, %if.then63
  %add67 = add nsw i32 %.sub, %pos.0113
  %cmp = icmp slt i32 %add67, %size
  br i1 %cmp, label %while.body, label %while.end

while.end:                                        ; preds = %do.end66, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_variable(%union.tree_node* %decl, i32 %top_level, i32 %at_end, i32 %dont_output_data) #0 {
entry:
  store %union.tree_node* null, %union.tree_node** @last_assemble_variable_decl, align 8, !tbaa !4
  %external_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %0 = bitcast i48* %external_flag to i64*
  %bf.load = load i64* %0, align 8
  %bf.cast = and i64 %bf.load, 256
  %tobool = icmp eq i64 %bf.cast, 0
  br i1 %tobool, label %if.end, label %if.end332

if.end:                                           ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load2 = load i32* %code, align 8
  %bf.clear3 = and i32 %bf.load2, 255
  %cmp = icmp eq i32 %bf.clear3, 30
  br i1 %cmp, label %if.end332, label %if.end5

if.end5:                                          ; preds = %if.end
  %rtl = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  %1 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  %cmp7 = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp7, label %if.end22, label %cond.end

cond.end:                                         ; preds = %if.end5
  %2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 0
  %bf.load15 = load i32* %2, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 61
  br i1 %cmp17, label %if.then18, label %if.end22

if.then18:                                        ; preds = %cond.end
  %bf.set = or i32 %bf.load2, 16384
  store i32 %bf.set, i32* %code, align 8
  br label %if.end332

if.end22:                                         ; preds = %if.end5, %cond.end
  %size = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 4
  %3 = load %union.tree_node** %size, align 8, !tbaa !63
  %cmp24 = icmp eq %union.tree_node* %3, null
  br i1 %cmp24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end22
  tail call void @layout_decl(%union.tree_node* %decl, i32 0) #6
  br label %if.end26

if.end26:                                         ; preds = %if.then25, %if.end22
  %tobool27 = icmp ne i32 %dont_output_data, 0
  br i1 %tobool27, label %if.end42, label %land.lhs.true28

land.lhs.true28:                                  ; preds = %if.end26
  %4 = load %union.tree_node** %size, align 8, !tbaa !63
  %cmp31 = icmp eq %union.tree_node* %4, null
  br i1 %cmp31, label %if.then32, label %if.end42

if.then32:                                        ; preds = %land.lhs.true28
  %filename = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 1
  %5 = load i8** %filename, align 8, !tbaa !64
  %linenum = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 2
  %6 = load i32* %linenum, align 4, !tbaa !65
  %name36 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 8
  %7 = load %union.tree_node** %name36, align 8, !tbaa !40
  %id = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds i8** %id, i64 1
  %9 = load i8** %8, align 8, !tbaa !37
  tail call void (i8*, i32, i8*, ...)* @error_with_file_and_line(i8* %5, i32 %6, i8* getelementptr inbounds ([33 x i8]* @.str88, i64 0, i64 0), i8* %9) #6
  %bf.load39 = load i32* %code, align 8
  %bf.set41 = or i32 %bf.load39, 16384
  store i32 %bf.set41, i32* %code, align 8
  br label %if.end332

if.end42:                                         ; preds = %land.lhs.true28, %if.end26
  %bf.load45 = load i32* %code, align 8
  %bf.clear47 = and i32 %bf.load45, 16384
  %tobool48 = icmp eq i32 %bf.clear47, 0
  br i1 %tobool48, label %if.end50, label %if.end332

if.end50:                                         ; preds = %if.end42
  %10 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  %tobool53 = icmp eq %struct.rtx_def* %10, null
  br i1 %tobool53, label %cond.false57, label %cond.end60

cond.false57:                                     ; preds = %if.end50
  tail call void @make_decl_rtl(%union.tree_node* %decl, i8* null)
  %11 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  %bf.load64.pre = load i32* %code, align 8
  br label %cond.end60

cond.end60:                                       ; preds = %if.end50, %cond.false57
  %bf.load64 = phi i32 [ %bf.load64.pre, %cond.false57 ], [ %bf.load45, %if.end50 ]
  %cond61 = phi %struct.rtx_def* [ %11, %cond.false57 ], [ %10, %if.end50 ]
  %bf.set66 = or i32 %bf.load64, 16384
  store i32 %bf.set66, i32* %code, align 8
  %12 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool67 = icmp eq i32 %12, 0
  br i1 %tobool67, label %if.end69, label %if.end332

if.end69:                                         ; preds = %cond.end60
  tail call void @app_disable() #6
  br i1 %tobool27, label %if.end75, label %land.lhs.true71

land.lhs.true71:                                  ; preds = %if.end69
  %size_unit = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 7
  %13 = load %union.tree_node** %size_unit, align 8, !tbaa !66
  %call = tail call i32 @host_integerp(%union.tree_node* %13, i32 1) #6
  %tobool73 = icmp eq i32 %call, 0
  br i1 %tobool73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %land.lhs.true71
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([35 x i8]* @.str89, i64 0, i64 0)) #6
  br label %if.end332

if.end75:                                         ; preds = %land.lhs.true71, %if.end69
  %arrayidx = getelementptr inbounds %struct.rtx_def* %cond61, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %arrayidx77 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx77 to i8**
  %15 = load i8** %rtstr, align 8, !tbaa !4
  %bf.load79 = load i32* %code, align 8
  %bf.clear81 = and i32 %bf.load79, 524288
  %tobool82 = icmp eq i32 %bf.clear81, 0
  br i1 %tobool82, label %if.end124, label %land.lhs.true83

land.lhs.true83:                                  ; preds = %if.end75
  %name85 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 8
  %16 = load %union.tree_node** %name85, align 8, !tbaa !40
  %tobool86 = icmp eq %union.tree_node* %16, null
  %17 = load i8** @first_global_object_name, align 8
  %tobool88 = icmp ne i8* %17, null
  %or.cond = or i1 %tobool86, %tobool88
  br i1 %or.cond, label %if.end124, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %land.lhs.true83
  %bf.load91 = load i64* %0, align 8
  %bf.cast94 = and i64 %bf.load91, 131072
  %tobool95 = icmp eq i64 %bf.cast94, 0
  br i1 %tobool95, label %land.lhs.true102, label %land.lhs.true96

land.lhs.true96:                                  ; preds = %land.lhs.true89
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %18 = load %union.tree_node** %initial, align 8, !tbaa !24
  %19 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %notlhs = icmp ne %union.tree_node* %18, null
  %notrhs = icmp ne %union.tree_node* %18, %19
  %or.cond427.not = and i1 %notrhs, %notlhs
  %20 = and i64 %bf.load91, 8912896
  %21 = icmp eq i64 %20, 0
  %or.cond478 = and i1 %or.cond427.not, %21
  br i1 %or.cond478, label %if.then116, label %if.end124

land.lhs.true102:                                 ; preds = %land.lhs.true89
  %.old = and i64 %bf.load91, 8912896
  %.old477 = icmp eq i64 %.old, 0
  br i1 %.old477, label %if.then116, label %if.end124

if.then116:                                       ; preds = %land.lhs.true96, %land.lhs.true102
  %22 = load i8* %15, align 1, !tbaa !1
  %cmp118 = icmp eq i8 %22, 42
  %idx.ext = zext i1 %cmp118 to i64
  %add.ptr = getelementptr inbounds i8* %15, i64 %idx.ext
  %call120 = tail call i64 @strlen(i8* %add.ptr) #6
  %add = add i64 %call120, 1
  %conv121 = trunc i64 %add to i32
  %call122 = tail call i8* @permalloc(i32 %conv121) #6
  %call123 = tail call i8* @strcpy(i8* %call122, i8* %add.ptr) #6
  store i8* %call122, i8** @first_global_object_name, align 8, !tbaa !4
  br label %if.end124

if.end124:                                        ; preds = %land.lhs.true96, %land.lhs.true102, %if.end75, %land.lhs.true83, %if.then116
  %u1 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 6
  %23 = bitcast %union.anon* %u1 to i32*
  %bf.load126 = load i32* %23, align 4
  %bf.clear127 = and i32 %bf.load126, 16777215
  br i1 %tobool27, label %land.lhs.true129, label %if.end161

land.lhs.true129:                                 ; preds = %if.end124
  %24 = load %union.tree_node** %size, align 8, !tbaa !63
  %cmp132 = icmp eq %union.tree_node* %24, null
  br i1 %cmp132, label %land.lhs.true134, label %if.end161

land.lhs.true134:                                 ; preds = %land.lhs.true129
  %type = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %25 = load %union.tree_node** %type, align 8, !tbaa !27
  %code137 = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 2
  %bf.load138 = load i32* %code137, align 8
  %bf.clear139 = and i32 %bf.load138, 255
  %cmp140 = icmp eq i32 %bf.clear139, 18
  br i1 %cmp140, label %if.then142, label %if.end161

if.then142:                                       ; preds = %land.lhs.true134
  %type146 = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 1
  %26 = load %union.tree_node** %type146, align 8, !tbaa !27
  %align148 = getelementptr inbounds %union.tree_node* %26, i64 0, i32 0, i32 7
  %27 = bitcast %union.tree_node** %align148 to i32*
  %28 = load i32* %27, align 4, !tbaa !41
  %cmp149 = icmp ugt i32 %bf.clear127, %28
  %bf.clear127. = select i1 %cmp149, i32 %bf.clear127, i32 %28
  br label %if.end161

if.end161:                                        ; preds = %if.then142, %land.lhs.true134, %land.lhs.true129, %if.end124
  %align.0 = phi i32 [ %bf.clear127., %if.then142 ], [ %bf.clear127, %land.lhs.true134 ], [ %bf.clear127, %land.lhs.true129 ], [ %bf.clear127, %if.end124 ]
  %cmp162 = icmp ugt i32 %align.0, 262144
  br i1 %cmp162, label %if.then164, label %if.end165

if.then164:                                       ; preds = %if.end161
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([74 x i8]* @.str90, i64 0, i64 0), i32 32768) #6
  br label %if.end165

if.end165:                                        ; preds = %if.then164, %if.end161
  %align.1 = phi i32 [ 262144, %if.then164 ], [ %align.0, %if.end161 ]
  %bf.load167 = load i64* %0, align 8
  %bf.cast170 = and i64 %bf.load167, 34359738368
  %tobool171 = icmp eq i64 %bf.cast170, 0
  br i1 %tobool171, label %if.then172, label %if.end165.if.end190_crit_edge

if.end165.if.end190_crit_edge:                    ; preds = %if.end165
  %initial198.pre = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  br label %if.end190

if.then172:                                       ; preds = %if.end165
  %type174 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %29 = load %union.tree_node** %type174, align 8, !tbaa !27
  %call175 = tail call i32 @ix86_data_alignment(%union.tree_node* %29, i32 %align.1) #6
  %initial177 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %30 = load %union.tree_node** %initial177, align 8, !tbaa !24
  %cmp178 = icmp eq %union.tree_node* %30, null
  %31 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp183 = icmp eq %union.tree_node* %30, %31
  %or.cond429 = or i1 %cmp178, %cmp183
  br i1 %or.cond429, label %if.end190, label %if.then185

if.then185:                                       ; preds = %if.then172
  %call188 = tail call i32 @ix86_constant_alignment(%union.tree_node* %30, i32 %call175) #6
  br label %if.end190

if.end190:                                        ; preds = %if.end165.if.end190_crit_edge, %if.then172, %if.then185
  %initial198.pre-phi = phi %union.tree_node** [ %initial198.pre, %if.end165.if.end190_crit_edge ], [ %initial177, %if.then172 ], [ %initial177, %if.then185 ]
  %align.2 = phi i32 [ %align.1, %if.end165.if.end190_crit_edge ], [ %call175, %if.then172 ], [ %call188, %if.then185 ]
  %bf.load194 = load i32* %23, align 4
  %bf.value = and i32 %align.2, 16777215
  %bf.clear195 = and i32 %bf.load194, -16777216
  %bf.set196 = or i32 %bf.clear195, %bf.value
  store i32 %bf.set196, i32* %23, align 4
  tail call void @set_mem_align(%struct.rtx_def* %cond61, i32 %align.2) #6
  %32 = load %union.tree_node** %initial198.pre-phi, align 8, !tbaa !24
  %cmp199 = icmp eq %union.tree_node* %32, null
  %33 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp204 = icmp eq %union.tree_node* %32, %33
  %or.cond430 = or i1 %cmp199, %cmp204
  br i1 %or.cond430, label %land.lhs.true206, label %if.end224

land.lhs.true206:                                 ; preds = %if.end190
  %section_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 15
  %34 = load %union.tree_node** %section_name, align 8, !tbaa !18
  %cmp208 = icmp ne %union.tree_node* %34, null
  %or.cond333 = or i1 %cmp208, %tobool27
  br i1 %or.cond333, label %if.end224, label %if.then212

if.then212:                                       ; preds = %land.lhs.true206
  %size_unit215 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 7
  %35 = load %union.tree_node** %size_unit215, align 8, !tbaa !66
  %call216 = tail call i64 @tree_low_cst(%union.tree_node* %35, i32 1) #6
  %conv222 = trunc i64 %call216 to i32
  %bf.load.i = load i32* %code, align 8
  %bf.clear.i = and i32 %bf.load.i, 524288
  %tobool.i = icmp eq i32 %bf.clear.i, 0
  br i1 %tobool.i, label %do.body24.i, label %if.then.i

if.then.i:                                        ; preds = %if.then212
  %bf.load2.i = load i64* %0, align 8
  %bf.cast.i = and i64 %bf.load2.i, 131072
  %tobool5.i = icmp eq i64 %bf.cast.i, 0
  br i1 %tobool5.i, label %sw.bb.i, label %do.body.i

sw.bb.i:                                          ; preds = %if.then.i
  tail call fastcc void @globalize_decl(%union.tree_node* %decl) #6
  %36 = load i32* @flag_data_sections, align 4, !tbaa !23
  tail call fastcc void @resolve_unique_section(%union.tree_node* %decl, i32 0, i32 %36) #6
  %37 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %bf.load14.i = load i32* %23, align 4
  %38 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str93, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %37) #6
  %39 = load i8* %15, align 1, !tbaa !1
  %cmp.i.i.i = icmp eq i8 %39, 42
  %idx.ext.i.i.i = zext i1 %cmp.i.i.i to i64
  %add.ptr.i.i.i = getelementptr inbounds i8* %15, i64 %idx.ext.i.i.i
  %call.i.i.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i.i.i) #6
  %tobool.i.i.i = icmp eq %union.tree_node* %call.i.i.i, null
  br i1 %tobool.i.i.i, label %if.end.i.i.i, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %sw.bb.i
  %static_flag.i.i.i = getelementptr inbounds %union.tree_node* %call.i.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i.i = load i32* %static_flag.i.i.i, align 8
  %bf.set.i.i.i = or i32 %bf.load.i.i.i, 262144
  store i32 %bf.set.i.i.i, i32* %static_flag.i.i.i, align 8
  br label %if.end.i.i.i

if.end.i.i.i:                                     ; preds = %if.then.i.i.i, %sw.bb.i
  %40 = load i8* %15, align 1, !tbaa !1
  %cmp4.i.i.i = icmp eq i8 %40, 42
  br i1 %cmp4.i.i.i, label %if.then6.i.i.i, label %if.else.i.i.i

if.then6.i.i.i:                                   ; preds = %if.end.i.i.i
  %arrayidx7.i.i.i = getelementptr inbounds i8* %15, i64 1
  %call8.i.i.i = tail call i32 @fputs(i8* %arrayidx7.i.i.i, %struct._IO_FILE* %37) #6
  br label %assemble_name.exit.i.i

if.else.i.i.i:                                    ; preds = %if.end.i.i.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %assemble_name.exit.i.i

assemble_name.exit.i.i:                           ; preds = %if.else.i.i.i, %if.then6.i.i.i
  %fputc.i.i = tail call i32 @fputc(i32 10, %struct._IO_FILE* %37) #6
  %41 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i52.i.i = icmp eq i32 %41, 4
  br i1 %cmp.i52.i.i, label %bss_section.exit.i.i, label %if.then.i54.i.i

if.then.i54.i.i:                                  ; preds = %assemble_name.exit.i.i
  %42 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i53.i.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8]* @.str6, i64 0, i64 0)) #6
  store i32 4, i32* @in_section, align 4, !tbaa !1
  br label %bss_section.exit.i.i

bss_section.exit.i.i:                             ; preds = %if.then.i54.i.i, %assemble_name.exit.i.i
  %bf.clear15.i = lshr i32 %bf.load14.i, 3
  %div.i.i = and i32 %bf.clear15.i, 2097151
  %conv.i42.i = zext i32 %div.i.i to i64
  %call2.i.i = tail call i32 @floor_log2_wide(i64 %conv.i42.i) #6
  %cmp.i.i = icmp eq i32 %call2.i.i, 0
  br i1 %cmp.i.i, label %if.end.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %bss_section.exit.i.i
  %call6.i.i = tail call i32 @floor_log2_wide(i64 %conv.i42.i) #6
  %shl.i.i = shl i32 1, %call6.i.i
  %call7.i.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([12 x i8]* @.str58, i64 0, i64 0), i32 %shl.i.i) #6
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %bss_section.exit.i.i
  store %union.tree_node* %decl, %union.tree_node** @last_assemble_variable_decl, align 8, !tbaa !4
  %43 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str70, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %37) #6
  %44 = load i8* %15, align 1, !tbaa !1
  %cmp.i56.i.i = icmp eq i8 %44, 42
  %idx.ext.i57.i.i = zext i1 %cmp.i56.i.i to i64
  %add.ptr.i58.i.i = getelementptr inbounds i8* %15, i64 %idx.ext.i57.i.i
  %call.i59.i.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i58.i.i) #6
  %tobool.i60.i.i = icmp eq %union.tree_node* %call.i59.i.i, null
  br i1 %tobool.i60.i.i, label %if.end.i66.i.i, label %if.then.i64.i.i

if.then.i64.i.i:                                  ; preds = %if.end.i.i
  %static_flag.i61.i.i = getelementptr inbounds %union.tree_node* %call.i59.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i62.i.i = load i32* %static_flag.i61.i.i, align 8
  %bf.set.i63.i.i = or i32 %bf.load.i62.i.i, 262144
  store i32 %bf.set.i63.i.i, i32* %static_flag.i61.i.i, align 8
  br label %if.end.i66.i.i

if.end.i66.i.i:                                   ; preds = %if.then.i64.i.i, %if.end.i.i
  %45 = load i8* %15, align 1, !tbaa !1
  %cmp4.i65.i.i = icmp eq i8 %45, 42
  br i1 %cmp4.i65.i.i, label %if.then6.i69.i.i, label %if.else.i70.i.i

if.then6.i69.i.i:                                 ; preds = %if.end.i66.i.i
  %arrayidx7.i67.i.i = getelementptr inbounds i8* %15, i64 1
  %call8.i68.i.i = tail call i32 @fputs(i8* %arrayidx7.i67.i.i, %struct._IO_FILE* %37) #6
  br label %assemble_name.exit71.i.i

if.else.i70.i.i:                                  ; preds = %if.end.i66.i.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %assemble_name.exit71.i.i

assemble_name.exit71.i.i:                         ; preds = %if.else.i70.i.i, %if.then6.i69.i.i
  %call9.i.i = tail call i32 @putc(i32 44, %struct._IO_FILE* %37) #6
  %call10.i.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([4 x i8]* @.str71, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str91, i64 0, i64 0)) #6
  %call11.i.i = tail call i32 @putc(i32 10, %struct._IO_FILE* %37) #6
  store i32 0, i32* @size_directive_output, align 4, !tbaa !23
  %46 = load i32* @flag_inhibit_size_directive, align 4, !tbaa !23
  %tobool.i.i = icmp eq i32 %46, 0
  %tobool12.i.i = icmp ne %union.tree_node* %decl, null
  %or.cond.i.i = and i1 %tobool.i.i, %tobool12.i.i
  br i1 %or.cond.i.i, label %land.lhs.true13.i.i, label %if.end23.i.i

land.lhs.true13.i.i:                              ; preds = %assemble_name.exit71.i.i
  %47 = load %union.tree_node** %size, align 8, !tbaa !63
  %tobool16.i.i = icmp eq %union.tree_node* %47, null
  br i1 %tobool16.i.i, label %if.end23.i.i, label %if.then17.i.i

if.then17.i.i:                                    ; preds = %land.lhs.true13.i.i
  store i32 1, i32* @size_directive_output, align 4, !tbaa !23
  %48 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str77, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %37) #6
  %49 = load i8* %15, align 1, !tbaa !1
  %cmp.i72.i.i = icmp eq i8 %49, 42
  %idx.ext.i73.i.i = zext i1 %cmp.i72.i.i to i64
  %add.ptr.i74.i.i = getelementptr inbounds i8* %15, i64 %idx.ext.i73.i.i
  %call.i75.i.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i74.i.i) #6
  %tobool.i76.i.i = icmp eq %union.tree_node* %call.i75.i.i, null
  br i1 %tobool.i76.i.i, label %if.end.i82.i.i, label %if.then.i80.i.i

if.then.i80.i.i:                                  ; preds = %if.then17.i.i
  %static_flag.i77.i.i = getelementptr inbounds %union.tree_node* %call.i75.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i78.i.i = load i32* %static_flag.i77.i.i, align 8
  %bf.set.i79.i.i = or i32 %bf.load.i78.i.i, 262144
  store i32 %bf.set.i79.i.i, i32* %static_flag.i77.i.i, align 8
  br label %if.end.i82.i.i

if.end.i82.i.i:                                   ; preds = %if.then.i80.i.i, %if.then17.i.i
  %50 = load i8* %15, align 1, !tbaa !1
  %cmp4.i81.i.i = icmp eq i8 %50, 42
  br i1 %cmp4.i81.i.i, label %if.then6.i85.i.i, label %if.else.i86.i.i

if.then6.i85.i.i:                                 ; preds = %if.end.i82.i.i
  %arrayidx7.i83.i.i = getelementptr inbounds i8* %15, i64 1
  %call8.i84.i.i = tail call i32 @fputs(i8* %arrayidx7.i83.i.i, %struct._IO_FILE* %37) #6
  br label %assemble_name.exit87.i.i

if.else.i86.i.i:                                  ; preds = %if.end.i82.i.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %assemble_name.exit87.i.i

assemble_name.exit87.i.i:                         ; preds = %if.else.i86.i.i, %if.then6.i85.i.i
  %call19.i.i = tail call i32 @putc(i32 44, %struct._IO_FILE* %37) #6
  %type.i.i = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %51 = load %union.tree_node** %type.i.i, align 8, !tbaa !27
  %call20.i.i = tail call i64 @int_size_in_bytes(%union.tree_node* %51) #6
  %call21.i.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([5 x i8]* @.str92, i64 0, i64 0), i64 %call20.i.i) #6
  %call22.i.i = tail call i32 @fputc(i32 10, %struct._IO_FILE* %37) #6
  br label %if.end23.i.i

if.end23.i.i:                                     ; preds = %assemble_name.exit87.i.i, %land.lhs.true13.i.i, %assemble_name.exit71.i.i
  %52 = load i8* %15, align 1, !tbaa !1
  %cmp.i88.i.i = icmp eq i8 %52, 42
  %idx.ext.i89.i.i = zext i1 %cmp.i88.i.i to i64
  %add.ptr.i90.i.i = getelementptr inbounds i8* %15, i64 %idx.ext.i89.i.i
  %call.i91.i.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i90.i.i) #6
  %tobool.i92.i.i = icmp eq %union.tree_node* %call.i91.i.i, null
  br i1 %tobool.i92.i.i, label %if.end.i98.i.i, label %if.then.i96.i.i

if.then.i96.i.i:                                  ; preds = %if.end23.i.i
  %static_flag.i93.i.i = getelementptr inbounds %union.tree_node* %call.i91.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i94.i.i = load i32* %static_flag.i93.i.i, align 8
  %bf.set.i95.i.i = or i32 %bf.load.i94.i.i, 262144
  store i32 %bf.set.i95.i.i, i32* %static_flag.i93.i.i, align 8
  br label %if.end.i98.i.i

if.end.i98.i.i:                                   ; preds = %if.then.i96.i.i, %if.end23.i.i
  %53 = load i8* %15, align 1, !tbaa !1
  %cmp4.i97.i.i = icmp eq i8 %53, 42
  br i1 %cmp4.i97.i.i, label %if.then6.i101.i.i, label %if.else.i102.i.i

if.then6.i101.i.i:                                ; preds = %if.end.i98.i.i
  %arrayidx7.i99.i.i = getelementptr inbounds i8* %15, i64 1
  %call8.i100.i.i = tail call i32 @fputs(i8* %arrayidx7.i99.i.i, %struct._IO_FILE* %37) #6
  br label %asm_output_aligned_bss.exit.i

if.else.i102.i.i:                                 ; preds = %if.end.i98.i.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %asm_output_aligned_bss.exit.i

asm_output_aligned_bss.exit.i:                    ; preds = %if.else.i102.i.i, %if.then6.i101.i.i
  %54 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str73, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %37) #6
  %tobool25.i.i = icmp ne i32 %conv222, 0
  %cond.i.i = select i1 %tobool25.i.i, i32 %conv222, i32 1
  %call26.i.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %cond.i.i) #6
  br label %if.end332

do.body.i:                                        ; preds = %if.then.i
  %55 = load i32* @flag_data_sections, align 4, !tbaa !23
  tail call fastcc void @resolve_unique_section(%union.tree_node* %decl, i32 0, i32 %55) #6
  %56 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %57 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str98, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %56) #6
  %58 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %59 = load i8* %15, align 1, !tbaa !1
  %cmp.i3.i = icmp eq i8 %59, 42
  %idx.ext.i.i = zext i1 %cmp.i3.i to i64
  %add.ptr.i.i = getelementptr inbounds i8* %15, i64 %idx.ext.i.i
  %call.i.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i.i) #6
  %tobool.i4.i = icmp eq %union.tree_node* %call.i.i, null
  br i1 %tobool.i4.i, label %if.end.i6.i, label %if.then.i5.i

if.then.i5.i:                                     ; preds = %do.body.i
  %static_flag.i.i = getelementptr inbounds %union.tree_node* %call.i.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i.i = load i32* %static_flag.i.i, align 8
  %bf.set.i.i = or i32 %bf.load.i.i, 262144
  store i32 %bf.set.i.i, i32* %static_flag.i.i, align 8
  br label %if.end.i6.i

if.end.i6.i:                                      ; preds = %if.then.i5.i, %do.body.i
  %60 = load i8* %15, align 1, !tbaa !1
  %cmp4.i.i = icmp eq i8 %60, 42
  br i1 %cmp4.i.i, label %if.then6.i.i, label %if.else.i.i

if.then6.i.i:                                     ; preds = %if.end.i6.i
  %arrayidx7.i.i = getelementptr inbounds i8* %15, i64 1
  %call8.i.i = tail call i32 @fputs(i8* %arrayidx7.i.i, %struct._IO_FILE* %58) #6
  br label %assemble_name.exit.i

if.else.i.i:                                      ; preds = %if.end.i6.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %assemble_name.exit.i

assemble_name.exit.i:                             ; preds = %if.else.i.i, %if.then6.i.i
  %61 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %bf.load20.i = load i32* %23, align 4
  %bf.clear21.i = lshr i32 %bf.load20.i, 3
  %div.i = and i32 %bf.clear21.i, 2097151
  %call22.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([8 x i8]* @.str99, i64 0, i64 0), i32 %conv222, i32 %div.i) #6
  br label %if.end332

do.body24.i:                                      ; preds = %if.then212
  %62 = load i32* @flag_data_sections, align 4, !tbaa !23
  tail call fastcc void @resolve_unique_section(%union.tree_node* %decl, i32 0, i32 %62) #6
  %63 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %64 = tail call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str97, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %63) #6
  %65 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %66 = load i8* %15, align 1, !tbaa !1
  %cmp.i7.i = icmp eq i8 %66, 42
  %idx.ext.i8.i = zext i1 %cmp.i7.i to i64
  %add.ptr.i9.i = getelementptr inbounds i8* %15, i64 %idx.ext.i8.i
  %call.i10.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i9.i) #6
  %tobool.i11.i = icmp eq %union.tree_node* %call.i10.i, null
  br i1 %tobool.i11.i, label %if.end.i17.i, label %if.then.i15.i

if.then.i15.i:                                    ; preds = %do.body24.i
  %static_flag.i12.i = getelementptr inbounds %union.tree_node* %call.i10.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i13.i = load i32* %static_flag.i12.i, align 8
  %bf.set.i14.i = or i32 %bf.load.i13.i, 262144
  store i32 %bf.set.i14.i, i32* %static_flag.i12.i, align 8
  br label %if.end.i17.i

if.end.i17.i:                                     ; preds = %if.then.i15.i, %do.body24.i
  %67 = load i8* %15, align 1, !tbaa !1
  %cmp4.i16.i = icmp eq i8 %67, 42
  br i1 %cmp4.i16.i, label %if.then6.i20.i, label %if.else.i21.i

if.then6.i20.i:                                   ; preds = %if.end.i17.i
  %arrayidx7.i18.i = getelementptr inbounds i8* %15, i64 1
  %call8.i19.i = tail call i32 @fputs(i8* %arrayidx7.i18.i, %struct._IO_FILE* %65) #6
  br label %assemble_name.exit22.i

if.else.i21.i:                                    ; preds = %if.end.i17.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %assemble_name.exit22.i

assemble_name.exit22.i:                           ; preds = %if.else.i21.i, %if.then6.i20.i
  %68 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %fputc.i = tail call i32 @fputc(i32 10, %struct._IO_FILE* %68) #6
  %69 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %70 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str98, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %69) #6
  %71 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %72 = load i8* %15, align 1, !tbaa !1
  %cmp.i23.i = icmp eq i8 %72, 42
  %idx.ext.i24.i = zext i1 %cmp.i23.i to i64
  %add.ptr.i25.i = getelementptr inbounds i8* %15, i64 %idx.ext.i24.i
  %call.i26.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i25.i) #6
  %tobool.i27.i = icmp eq %union.tree_node* %call.i26.i, null
  br i1 %tobool.i27.i, label %if.end.i33.i, label %if.then.i31.i

if.then.i31.i:                                    ; preds = %assemble_name.exit22.i
  %static_flag.i28.i = getelementptr inbounds %union.tree_node* %call.i26.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i29.i = load i32* %static_flag.i28.i, align 8
  %bf.set.i30.i = or i32 %bf.load.i29.i, 262144
  store i32 %bf.set.i30.i, i32* %static_flag.i28.i, align 8
  br label %if.end.i33.i

if.end.i33.i:                                     ; preds = %if.then.i31.i, %assemble_name.exit22.i
  %73 = load i8* %15, align 1, !tbaa !1
  %cmp4.i32.i = icmp eq i8 %73, 42
  br i1 %cmp4.i32.i, label %if.then6.i36.i, label %if.else.i37.i

if.then6.i36.i:                                   ; preds = %if.end.i33.i
  %arrayidx7.i34.i = getelementptr inbounds i8* %15, i64 1
  %call8.i35.i = tail call i32 @fputs(i8* %arrayidx7.i34.i, %struct._IO_FILE* %71) #6
  br label %assemble_name.exit38.i

if.else.i37.i:                                    ; preds = %if.end.i33.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %assemble_name.exit38.i

assemble_name.exit38.i:                           ; preds = %if.else.i37.i, %if.then6.i36.i
  %74 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %bf.load32.i = load i32* %23, align 4
  %bf.clear33.i = lshr i32 %bf.load32.i, 3
  %div34.i = and i32 %bf.clear33.i, 2097151
  %call35.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([8 x i8]* @.str99, i64 0, i64 0), i32 %conv222, i32 %div34.i) #6
  br label %if.end332

if.end224:                                        ; preds = %if.end190, %land.lhs.true206
  %bf.load227 = load i32* %code, align 8
  %bf.clear229 = and i32 %bf.load227, 524288
  %tobool230 = icmp eq i32 %bf.clear229, 0
  br i1 %tobool230, label %if.end236, label %land.lhs.true231

land.lhs.true231:                                 ; preds = %if.end224
  %name233 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 8
  %75 = load %union.tree_node** %name233, align 8, !tbaa !40
  %tobool234 = icmp eq %union.tree_node* %75, null
  br i1 %tobool234, label %if.end236, label %if.then235

if.then235:                                       ; preds = %land.lhs.true231
  tail call fastcc void @globalize_decl(%union.tree_node* %decl)
  %.pre = load %union.tree_node** %initial198.pre-phi, align 8, !tbaa !24
  %.pre476 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !4
  br label %if.end236

if.end236:                                        ; preds = %land.lhs.true231, %if.end224, %if.then235
  %76 = phi %union.tree_node* [ %33, %land.lhs.true231 ], [ %33, %if.end224 ], [ %.pre476, %if.then235 ]
  %77 = phi %union.tree_node* [ %32, %land.lhs.true231 ], [ %32, %if.end224 ], [ %.pre, %if.then235 ]
  %cmp239 = icmp eq %union.tree_node* %77, %76
  br i1 %cmp239, label %if.then241, label %if.else

if.then241:                                       ; preds = %if.end236
  %type243 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %78 = load %union.tree_node** %type243, align 8, !tbaa !27
  %call244 = tail call fastcc i32 @contains_pointers_p(%union.tree_node* %78)
  %tobool245 = icmp ne i32 %call244, 0
  %cond246 = select i1 %tobool245, i32 3, i32 0
  br label %if.end255

if.else:                                          ; preds = %if.end236
  %tobool249 = icmp eq %union.tree_node* %77, null
  br i1 %tobool249, label %if.end255, label %if.then250

if.then250:                                       ; preds = %if.else
  %call253 = tail call fastcc i32 @output_addressed_constants(%union.tree_node* %77)
  br label %if.end255

if.end255:                                        ; preds = %if.else, %if.then250, %if.then241
  %reloc.0 = phi i32 [ %cond246, %if.then241 ], [ %call253, %if.then250 ], [ 0, %if.else ]
  %79 = load i32* @flag_data_sections, align 4, !tbaa !23
  tail call fastcc void @resolve_unique_section(%union.tree_node* %decl, i32 %reloc.0, i32 %79)
  tail call void @variable_section(%union.tree_node* %decl, i32 %reloc.0)
  %80 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i = icmp eq i32 %80, 1
  br i1 %cmp.i, label %if.then258, label %if.end263

if.then258:                                       ; preds = %if.end255
  %bf.load260 = load i64* %0, align 8
  %bf.set262 = or i64 %bf.load260, 4096
  store i64 %bf.set262, i64* %0, align 8
  br label %if.end263

if.end263:                                        ; preds = %if.end255, %if.then258
  %cmp264 = icmp ugt i32 %align.2, 8
  br i1 %cmp264, label %if.then266, label %if.end288

if.then266:                                       ; preds = %if.end263
  %bf.load270 = load i32* %23, align 4
  %bf.clear271 = lshr i32 %bf.load270, 3
  %div272 = and i32 %bf.clear271, 2097151
  %conv273425 = zext i32 %div272 to i64
  %call274 = tail call i32 @floor_log2_wide(i64 %conv273425) #6
  %cmp275 = icmp eq i32 %call274, 0
  br i1 %cmp275, label %if.end288, label %if.then277

if.then277:                                       ; preds = %if.then266
  %81 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %bf.load281 = load i32* %23, align 4
  %bf.clear282 = lshr i32 %bf.load281, 3
  %div283 = and i32 %bf.clear282, 2097151
  %conv284426 = zext i32 %div283 to i64
  %call285 = tail call i32 @floor_log2_wide(i64 %conv284426) #6
  %shl = shl i32 1, %call285
  %call286 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %81, i8* getelementptr inbounds ([12 x i8]* @.str58, i64 0, i64 0), i32 %shl) #6
  br label %if.end288

if.end288:                                        ; preds = %if.then266, %if.then277, %if.end263
  store %union.tree_node* %decl, %union.tree_node** @last_assemble_variable_decl, align 8, !tbaa !4
  %82 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %83 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str70, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %82)
  %84 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %85 = load i8* %15, align 1, !tbaa !1
  %cmp.i432 = icmp eq i8 %85, 42
  %idx.ext.i = zext i1 %cmp.i432 to i64
  %add.ptr.i = getelementptr inbounds i8* %15, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i433 = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i433, label %if.end.i, label %if.then.i435

if.then.i435:                                     ; preds = %if.end288
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i434 = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i434, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i435, %if.end288
  %86 = load i8* %15, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %86, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %15, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %84) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %87 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call290 = tail call i32 @putc(i32 44, %struct._IO_FILE* %87) #6
  %88 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call291 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %88, i8* getelementptr inbounds ([4 x i8]* @.str71, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str91, i64 0, i64 0)) #6
  %89 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call292 = tail call i32 @putc(i32 10, %struct._IO_FILE* %89) #6
  store i32 0, i32* @size_directive_output, align 4, !tbaa !23
  %90 = load i32* @flag_inhibit_size_directive, align 4, !tbaa !23
  %tobool293 = icmp eq i32 %90, 0
  %tobool295 = icmp ne %union.tree_node* %decl, null
  %or.cond334 = and i1 %tobool293, %tobool295
  br i1 %or.cond334, label %land.lhs.true296, label %if.end308

land.lhs.true296:                                 ; preds = %assemble_name.exit
  %91 = load %union.tree_node** %size, align 8, !tbaa !63
  %tobool299 = icmp eq %union.tree_node* %91, null
  br i1 %tobool299, label %if.end308, label %if.then300

if.then300:                                       ; preds = %land.lhs.true296
  store i32 1, i32* @size_directive_output, align 4, !tbaa !23
  %92 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %93 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str77, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %92)
  %94 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %95 = load i8* %15, align 1, !tbaa !1
  %cmp.i436 = icmp eq i8 %95, 42
  %idx.ext.i437 = zext i1 %cmp.i436 to i64
  %add.ptr.i438 = getelementptr inbounds i8* %15, i64 %idx.ext.i437
  %call.i439 = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i438) #6
  %tobool.i440 = icmp eq %union.tree_node* %call.i439, null
  br i1 %tobool.i440, label %if.end.i446, label %if.then.i444

if.then.i444:                                     ; preds = %if.then300
  %static_flag.i441 = getelementptr inbounds %union.tree_node* %call.i439, i64 0, i32 0, i32 0, i32 2
  %bf.load.i442 = load i32* %static_flag.i441, align 8
  %bf.set.i443 = or i32 %bf.load.i442, 262144
  store i32 %bf.set.i443, i32* %static_flag.i441, align 8
  br label %if.end.i446

if.end.i446:                                      ; preds = %if.then.i444, %if.then300
  %96 = load i8* %15, align 1, !tbaa !1
  %cmp4.i445 = icmp eq i8 %96, 42
  br i1 %cmp4.i445, label %if.then6.i449, label %if.else.i450

if.then6.i449:                                    ; preds = %if.end.i446
  %arrayidx7.i447 = getelementptr inbounds i8* %15, i64 1
  %call8.i448 = tail call i32 @fputs(i8* %arrayidx7.i447, %struct._IO_FILE* %94) #6
  br label %assemble_name.exit451

if.else.i450:                                     ; preds = %if.end.i446
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %94, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %assemble_name.exit451

assemble_name.exit451:                            ; preds = %if.then6.i449, %if.else.i450
  %97 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call302 = tail call i32 @putc(i32 44, %struct._IO_FILE* %97) #6
  %98 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %type304 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %99 = load %union.tree_node** %type304, align 8, !tbaa !27
  %call305 = tail call i64 @int_size_in_bytes(%union.tree_node* %99) #6
  %call306 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %98, i8* getelementptr inbounds ([5 x i8]* @.str92, i64 0, i64 0), i64 %call305) #6
  %100 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call307 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %100) #6
  br label %if.end308

if.end308:                                        ; preds = %land.lhs.true296, %assemble_name.exit, %assemble_name.exit451
  %101 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %102 = load i8* %15, align 1, !tbaa !1
  %cmp.i452 = icmp eq i8 %102, 42
  %idx.ext.i453 = zext i1 %cmp.i452 to i64
  %add.ptr.i454 = getelementptr inbounds i8* %15, i64 %idx.ext.i453
  %call.i455 = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i454) #6
  %tobool.i456 = icmp eq %union.tree_node* %call.i455, null
  br i1 %tobool.i456, label %if.end.i462, label %if.then.i460

if.then.i460:                                     ; preds = %if.end308
  %static_flag.i457 = getelementptr inbounds %union.tree_node* %call.i455, i64 0, i32 0, i32 0, i32 2
  %bf.load.i458 = load i32* %static_flag.i457, align 8
  %bf.set.i459 = or i32 %bf.load.i458, 262144
  store i32 %bf.set.i459, i32* %static_flag.i457, align 8
  br label %if.end.i462

if.end.i462:                                      ; preds = %if.then.i460, %if.end308
  %103 = load i8* %15, align 1, !tbaa !1
  %cmp4.i461 = icmp eq i8 %103, 42
  br i1 %cmp4.i461, label %if.then6.i465, label %if.else.i466

if.then6.i465:                                    ; preds = %if.end.i462
  %arrayidx7.i463 = getelementptr inbounds i8* %15, i64 1
  %call8.i464 = tail call i32 @fputs(i8* %arrayidx7.i463, %struct._IO_FILE* %101) #6
  br label %assemble_name.exit467

if.else.i466:                                     ; preds = %if.end.i462
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %15) #6
  br label %assemble_name.exit467

assemble_name.exit467:                            ; preds = %if.then6.i465, %if.else.i466
  %104 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %105 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str73, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %104)
  br i1 %tobool27, label %if.end332, label %if.then311

if.then311:                                       ; preds = %assemble_name.exit467
  %106 = load %union.tree_node** %initial198.pre-phi, align 8, !tbaa !24
  %tobool314 = icmp eq %union.tree_node* %106, null
  %107 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp318 = icmp eq %union.tree_node* %106, %107
  %or.cond431 = or i1 %tobool314, %cmp318
  %size_unit328 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 7
  %108 = load %union.tree_node** %size_unit328, align 8, !tbaa !66
  %call329 = tail call i64 @tree_low_cst(%union.tree_node* %108, i32 1) #6
  br i1 %or.cond431, label %if.else326, label %if.then320

if.then320:                                       ; preds = %if.then311
  tail call void @output_constant(%union.tree_node* %106, i64 %call329, i32 %align.2)
  br label %if.end332

if.else326:                                       ; preds = %if.then311
  %conv330 = trunc i64 %call329 to i32
  %109 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool.i468 = icmp eq i32 %109, 0
  br i1 %tobool.i468, label %if.end.i470, label %if.end332

if.end.i470:                                      ; preds = %if.else326
  %110 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i469 = icmp eq i32 %110, 1
  %cmp12.i = icmp sgt i32 %conv330, 0
  br i1 %cmp.i.i469, label %for.cond.preheader.i, label %if.else.i474

for.cond.preheader.i:                             ; preds = %if.end.i470
  br i1 %cmp12.i, label %for.body.i, label %if.end332

for.cond.i:                                       ; preds = %for.body.i
  %cmp.i471 = icmp slt i32 %inc.i, %conv330
  br i1 %cmp.i471, label %for.body.i, label %if.end332

for.body.i:                                       ; preds = %for.cond.preheader.i, %for.cond.i
  %i.013.i = phi i32 [ %inc.i, %for.cond.i ], [ 0, %for.cond.preheader.i ]
  %111 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !4
  %112 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i.i472 = tail call zeroext i1 %112(%struct.rtx_def* %111, i32 1, i32 1) #6
  %inc.i = add nsw i32 %i.013.i, 1
  br i1 %call.i.i472, label %for.cond.i, label %if.end.i.i473

if.end.i.i473:                                    ; preds = %for.body.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.else.i474:                                     ; preds = %if.end.i470
  br i1 %cmp12.i, label %if.then5.i, label %if.end332

if.then5.i:                                       ; preds = %if.else.i474
  %113 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %113, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %conv330) #6
  br label %if.end332

if.end332:                                        ; preds = %for.cond.i, %if.then5.i, %if.else.i474, %for.cond.preheader.i, %if.else326, %assemble_name.exit38.i, %assemble_name.exit.i, %asm_output_aligned_bss.exit.i, %cond.end60, %if.end42, %entry, %if.then320, %if.end, %if.then18, %if.then32, %if.then74, %assemble_name.exit467
  ret void
}

declare void @layout_decl(%union.tree_node*, i32) #3

declare void @error_with_file_and_line(i8*, i32, i8*, ...) #3

declare i32 @host_integerp(%union.tree_node*, i32) #3

declare void @warning_with_decl(%union.tree_node*, i8*, ...) #3

declare i32 @ix86_data_alignment(%union.tree_node*, i32) #3

declare void @set_mem_align(%struct.rtx_def*, i32) #3

declare i64 @tree_low_cst(%union.tree_node*, i32) #3

; Function Attrs: nounwind readonly uwtable
define internal fastcc i32 @contains_pointers_p(%union.tree_node* nocapture readonly %type) #2 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %sw.bb11, %entry
  %type.tr = phi %union.tree_node* [ %type, %entry ], [ %4, %sw.bb11 ]
  %code = getelementptr inbounds %union.tree_node* %type.tr, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return.loopexit28 [
    i32 13, label %return
    i32 15, label %return
    i32 14, label %return
    i32 20, label %sw.bb1
    i32 21, label %sw.bb1
    i32 22, label %sw.bb1
    i32 18, label %sw.bb11
  ]

sw.bb1:                                           ; preds = %tailrecurse, %tailrecurse, %tailrecurse
  %values = getelementptr inbounds %union.tree_node* %type.tr, i64 0, i32 0, i32 1
  %0 = load i8** %values, align 8
  %tobool23 = icmp eq i8* %0, null
  br i1 %tobool23, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.bb1
  %1 = bitcast i8* %0 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %fields.024 = phi %union.tree_node* [ %1, %for.body.lr.ph ], [ %3, %for.inc ]
  %code4 = getelementptr inbounds %union.tree_node* %fields.024, i64 0, i32 0, i32 0, i32 2
  %bf.load5 = load i32* %code4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp = icmp eq i32 %bf.clear6, 37
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %type8 = getelementptr inbounds %union.tree_node* %fields.024, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type8, align 8, !tbaa !27
  %call = tail call fastcc i32 @contains_pointers_p(%union.tree_node* %2)
  %tobool9 = icmp eq i32 %call, 0
  br i1 %tobool9, label %for.inc, label %return

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %chain = getelementptr inbounds %union.tree_node* %fields.024, i64 0, i32 0, i32 0, i32 0
  %3 = load %union.tree_node** %chain, align 8, !tbaa !62
  %tobool = icmp eq %union.tree_node* %3, null
  br i1 %tobool, label %return, label %for.body

sw.bb11:                                          ; preds = %tailrecurse
  %type13 = getelementptr inbounds %union.tree_node* %type.tr, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type13, align 8, !tbaa !27
  br label %tailrecurse

return.loopexit28:                                ; preds = %tailrecurse
  br label %return

return:                                           ; preds = %land.lhs.true, %for.inc, %tailrecurse, %tailrecurse, %tailrecurse, %return.loopexit28, %sw.bb1
  %retval.0 = phi i32 [ 0, %sw.bb1 ], [ 0, %return.loopexit28 ], [ 1, %tailrecurse ], [ 1, %tailrecurse ], [ 1, %tailrecurse ], [ 1, %land.lhs.true ], [ 0, %for.inc ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @output_addressed_constants(%union.tree_node* %exp) #0 {
entry:
  %0 = load %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 9), align 8, !tbaa !67
  br label %tailrecurse

tailrecurse:                                      ; preds = %sw.bb36, %entry
  %exp.tr = phi %union.tree_node* [ %exp, %entry ], [ %7, %sw.bb36 ]
  %call = tail call %union.tree_node* %0(%union.tree_node* %exp.tr) #6
  %code = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.epilog [
    i32 121, label %for.cond
    i32 124, label %for.cond
    i32 59, label %sw.bb26
    i32 60, label %sw.bb26
    i32 115, label %sw.bb36
    i32 114, label %sw.bb36
    i32 116, label %sw.bb36
    i32 46, label %sw.bb41
  ]

for.cond:                                         ; preds = %tailrecurse, %tailrecurse, %for.cond
  %call.pn = phi %union.tree_node* [ %tem.0, %for.cond ], [ %call, %tailrecurse ], [ %call, %tailrecurse ]
  %tem.0.in.in = getelementptr inbounds %union.tree_node* %call.pn, i64 0, i32 0, i32 2
  %tem.0.in = bitcast i32* %tem.0.in.in to %union.tree_node**
  %tem.0 = load %union.tree_node** %tem.0.in, align 8
  %call2 = tail call i32 @handled_component_p(%union.tree_node* %tem.0) #6
  %tobool = icmp eq i32 %call2, 0
  br i1 %tobool, label %for.end, label %for.cond

for.end:                                          ; preds = %for.cond
  %code7 = getelementptr inbounds %union.tree_node* %tem.0, i64 0, i32 0, i32 0, i32 2
  %bf.load8 = load i32* %code7, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %idxprom76 = zext i32 %bf.clear9 to i64
  %arrayidx10 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom76
  %1 = load i8* %arrayidx10, align 1, !tbaa !1
  %cmp = icmp eq i8 %1, 99
  %cmp16 = icmp eq i32 %bf.clear9, 46
  %or.cond = or i1 %cmp, %cmp16
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %call18 = tail call %struct.rtx_def* @output_constant_def(%union.tree_node* %tem.0, i32 0)
  %bf.load20.pre = load i32* %code7, align 8
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  %bf.load20 = phi i32 [ %bf.load8, %for.end ], [ %bf.load20.pre, %if.then ]
  %bf.clear21 = lshr i32 %bf.load20, 19
  %2 = and i32 %bf.clear21, 1
  %3 = add i32 %2, 1
  br label %sw.epilog

sw.bb26:                                          ; preds = %tailrecurse, %tailrecurse
  %operands28 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx29 = bitcast i32* %operands28 to %union.tree_node**
  %4 = load %union.tree_node** %arrayidx29, align 8, !tbaa !4
  %call30 = tail call fastcc i32 @output_addressed_constants(%union.tree_node* %4)
  %arrayidx33 = getelementptr inbounds i32* %operands28, i64 2
  %5 = bitcast i32* %arrayidx33 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !4
  %call34 = tail call fastcc i32 @output_addressed_constants(%union.tree_node* %6)
  %or35 = or i32 %call34, %call30
  ret i32 %or35

sw.bb36:                                          ; preds = %tailrecurse, %tailrecurse, %tailrecurse
  %operands38 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx39 = bitcast i32* %operands38 to %union.tree_node**
  %7 = load %union.tree_node** %arrayidx39, align 8, !tbaa !4
  br label %tailrecurse

sw.bb41:                                          ; preds = %tailrecurse
  %operands43 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx44 = getelementptr inbounds i32* %operands43, i64 2
  %8 = bitcast i32* %arrayidx44 to %union.tree_node**
  %tem.181 = load %union.tree_node** %8, align 8
  %tobool4682 = icmp eq %union.tree_node* %tem.181, null
  br i1 %tobool4682, label %sw.epilog, label %for.body47

for.body47:                                       ; preds = %sw.bb41, %for.inc56
  %tem.184 = phi %union.tree_node* [ %tem.1, %for.inc56 ], [ %tem.181, %sw.bb41 ]
  %reloc.083 = phi i32 [ %reloc.1, %for.inc56 ], [ 0, %sw.bb41 ]
  %value = getelementptr inbounds %union.tree_node* %tem.184, i64 0, i32 0, i32 2
  %9 = bitcast i32* %value to %union.tree_node**
  %10 = load %union.tree_node** %9, align 8, !tbaa !60
  %cmp48 = icmp eq %union.tree_node* %10, null
  br i1 %cmp48, label %for.inc56, label %if.then50

if.then50:                                        ; preds = %for.body47
  %call53 = tail call fastcc i32 @output_addressed_constants(%union.tree_node* %10)
  %or54 = or i32 %call53, %reloc.083
  br label %for.inc56

for.inc56:                                        ; preds = %for.body47, %if.then50
  %reloc.1 = phi i32 [ %or54, %if.then50 ], [ %reloc.083, %for.body47 ]
  %chain = getelementptr inbounds %union.tree_node* %tem.184, i64 0, i32 0, i32 0, i32 0
  %tem.1 = load %union.tree_node** %chain, align 8
  %tobool46 = icmp eq %union.tree_node* %tem.1, null
  br i1 %tobool46, label %sw.epilog, label %for.body47

sw.epilog:                                        ; preds = %tailrecurse, %for.inc56, %sw.bb41, %if.end
  %reloc.2 = phi i32 [ %3, %if.end ], [ 0, %sw.bb41 ], [ %reloc.1, %for.inc56 ], [ 0, %tailrecurse ]
  ret i32 %reloc.2
}

; Function Attrs: nounwind uwtable
define void @output_constant(%union.tree_node* %exp, i64 %size, i32 %align) #0 {
entry:
  %0 = load %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 9), align 8, !tbaa !67
  %call = call %union.tree_node* %0(%union.tree_node* %exp) #6
  %cmp = icmp eq i64 %size, 0
  %1 = load i32* @flag_syntax_only, align 4
  %tobool = icmp ne i32 %1, 0
  %or.cond = or i1 %cmp, %tobool
  br i1 %or.cond, label %if.end141, label %while.cond.preheader

while.cond.preheader:                             ; preds = %entry
  %code1208 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load209 = load i32* %code1208, align 8
  %bf.clear210 = and i32 %bf.load209, 255
  %bf.clear.off211 = add i32 %bf.clear210, -114
  %switch212 = icmp ult i32 %bf.clear.off211, 4
  br i1 %switch212, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %while.body, %while.cond.preheader
  %code1.lcssa = phi i32* [ %code1208, %while.cond.preheader ], [ %code1, %while.body ]
  %exp.addr.0.lcssa = phi %union.tree_node* [ %call, %while.cond.preheader ], [ %3, %while.body ]
  %type = getelementptr inbounds %union.tree_node* %exp.addr.0.lcssa, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !27
  %code23 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load24 = load i32* %code23, align 8
  %bf.clear25 = and i32 %bf.load24, 255
  %call28 = call i64 @int_size_in_bytes(%union.tree_node* %2) #6
  %bf.load31 = load i32* %code1.lcssa, align 8
  %bf.clear32 = and i32 %bf.load31, 255
  %cmp33 = icmp eq i32 %bf.clear32, 46
  br i1 %cmp33, label %land.lhs.true, label %if.end39

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %exp.addr.0213 = phi %union.tree_node* [ %3, %while.body ], [ %call, %while.cond.preheader ]
  %operands = getelementptr inbounds %union.tree_node* %exp.addr.0213, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %3 = load %union.tree_node** %arrayidx, align 8, !tbaa !4
  %code1 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %bf.clear.off = add i32 %bf.clear, -114
  %switch = icmp ult i32 %bf.clear.off, 4
  br i1 %switch, label %while.body, label %lor.rhs

land.lhs.true:                                    ; preds = %lor.rhs
  %operands35 = getelementptr inbounds %union.tree_node* %exp.addr.0.lcssa, i64 0, i32 0, i32 2
  %arrayidx36 = getelementptr inbounds i32* %operands35, i64 2
  %4 = bitcast i32* %arrayidx36 to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !4
  %cmp37 = icmp eq %union.tree_node* %5, null
  br i1 %cmp37, label %if.then38, label %if.end47

if.then38:                                        ; preds = %land.lhs.true
  %conv = trunc i64 %size to i32
  %6 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool.i191 = icmp eq i32 %6, 0
  br i1 %tobool.i191, label %if.end.i194, label %if.end141

if.end.i194:                                      ; preds = %if.then38
  %7 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i192 = icmp eq i32 %7, 1
  %cmp12.i193 = icmp sgt i32 %conv, 0
  br i1 %cmp.i.i192, label %for.cond.preheader.i195, label %if.else.i203

for.cond.preheader.i195:                          ; preds = %if.end.i194
  br i1 %cmp12.i193, label %for.body.i201, label %if.end141

for.cond.i197:                                    ; preds = %for.body.i201
  %cmp.i196 = icmp slt i32 %inc.i200, %conv
  br i1 %cmp.i196, label %for.body.i201, label %if.end141

for.body.i201:                                    ; preds = %for.cond.preheader.i195, %for.cond.i197
  %i.013.i198 = phi i32 [ %inc.i200, %for.cond.i197 ], [ 0, %for.cond.preheader.i195 ]
  %8 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !4
  %9 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i.i199 = call zeroext i1 %9(%struct.rtx_def* %8, i32 1, i32 1) #6
  %inc.i200 = add nsw i32 %i.013.i198, 1
  br i1 %call.i.i199, label %for.cond.i197, label %if.end.i.i202

if.end.i.i202:                                    ; preds = %for.body.i201
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.else.i203:                                     ; preds = %if.end.i194
  br i1 %cmp12.i193, label %if.then5.i205, label %if.end141

if.then5.i205:                                    ; preds = %if.else.i203
  %10 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i204 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %conv) #6
  br label %if.end141

if.end39:                                         ; preds = %lor.rhs
  %cmp44 = icmp eq i32 %bf.clear32, 124
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end39
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4557, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.output_constant, i64 0, i64 0)) #9
  unreachable

if.end47:                                         ; preds = %land.lhs.true, %if.end39
  switch i32 %bf.clear25, label %sw.default [
    i32 12, label %sw.bb
    i32 11, label %sw.bb
    i32 6, label %sw.bb
    i32 10, label %sw.bb
    i32 13, label %sw.bb
    i32 15, label %sw.bb
    i32 7, label %sw.bb53
    i32 8, label %sw.bb65
    i32 18, label %sw.bb72
    i32 9, label %sw.bb72
    i32 20, label %sw.bb98
    i32 21, label %sw.bb98
    i32 19, label %sw.bb108
    i32 0, label %if.end141
  ]

sw.bb:                                            ; preds = %if.end47, %if.end47, %if.end47, %if.end47, %if.end47, %if.end47
  %call48 = call %struct.rtx_def* @expand_expr(%union.tree_node* %exp.addr.0.lcssa, %struct.rtx_def* null, i32 0, i32 3) #6
  %conv49 = trunc i64 %size to i32
  %call50 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call48, i32 %conv49, i32 %align, i32 0)
  br i1 %call50, label %sw.epilog, label %if.then51

if.then51:                                        ; preds = %sw.bb
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([49 x i8]* @.str101, i64 0, i64 0)) #6
  br label %sw.epilog

sw.bb53:                                          ; preds = %if.end47
  %cmp58 = icmp eq i32 %bf.clear32, 26
  br i1 %cmp58, label %if.end61, label %if.then60

if.then60:                                        ; preds = %sw.bb53
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([58 x i8]* @.str102, i64 0, i64 0)) #6
  br label %if.end61

if.end61:                                         ; preds = %sw.bb53, %if.then60
  %real_cst62 = getelementptr inbounds %union.tree_node* %exp.addr.0.lcssa, i64 0, i32 0, i32 2
  %11 = bitcast i32* %real_cst62 to %struct.realvaluetype*
  %mul = shl nsw i64 %size, 3
  %conv63 = trunc i64 %mul to i32
  %call64 = call i32 @mode_for_size(i32 %conv63, i32 2, i32 0) #6
  call void @assemble_real(%struct.realvaluetype* byval align 8 %11, i32 %call64, i32 %align)
  br label %sw.epilog

sw.bb65:                                          ; preds = %if.end47
  %real = getelementptr inbounds %union.tree_node* %exp.addr.0.lcssa, i64 0, i32 0, i32 2
  %12 = bitcast i32* %real to %union.tree_node**
  %13 = load %union.tree_node** %12, align 8, !tbaa !72
  %div = sdiv i64 %call28, 2
  call void @output_constant(%union.tree_node* %13, i64 %div, i32 %align)
  %14 = getelementptr inbounds %union.tree_node* %exp.addr.0.lcssa, i64 0, i32 0, i32 4
  %15 = load %union.tree_node** %14, align 8, !tbaa !74
  %mul69 = shl nsw i64 %div, 3
  %conv70 = trunc i64 %mul69 to i32
  %or.i = or i32 %conv70, %align
  %sub.i = sub i32 0, %or.i
  %and.i = and i32 %or.i, %sub.i
  call void @output_constant(%union.tree_node* %15, i64 %div, i32 %and.i)
  br label %sw.epilog

sw.bb72:                                          ; preds = %if.end47, %if.end47
  switch i32 %bf.clear32, label %if.else95 [
    i32 46, label %if.then79
    i32 29, label %if.then86
  ]

if.then79:                                        ; preds = %sw.bb72
  call fastcc void @output_constructor(%union.tree_node* %exp.addr.0.lcssa, i64 %size, i32 %align)
  br label %if.end141

if.then86:                                        ; preds = %sw.bb72
  %16 = getelementptr inbounds %union.tree_node* %exp.addr.0.lcssa, i64 0, i32 0, i32 2
  %17 = load i32* %16, align 4, !tbaa !28
  %conv87 = sext i32 %17 to i64
  %cmp88 = icmp slt i64 %conv87, %size
  %conv87.size = select i1 %cmp88, i64 %conv87, i64 %size
  %pointer = getelementptr inbounds %union.tree_node* %exp.addr.0.lcssa, i64 0, i32 0, i32 4
  %18 = load %union.tree_node** %pointer, align 8
  %19 = bitcast %union.tree_node* %18 to i8*
  %conv94 = trunc i64 %conv87.size to i32
  call void @assemble_string(i8* %19, i32 %conv94)
  br label %sw.epilog

if.else95:                                        ; preds = %sw.bb72
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4606, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.output_constant, i64 0, i64 0)) #9
  unreachable

sw.bb98:                                          ; preds = %if.end47, %if.end47
  br i1 %cmp33, label %if.then105, label %if.else106

if.then105:                                       ; preds = %sw.bb98
  call fastcc void @output_constructor(%union.tree_node* %exp.addr.0.lcssa, i64 %size, i32 %align)
  br label %if.end141

if.else106:                                       ; preds = %sw.bb98
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4614, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.output_constant, i64 0, i64 0)) #9
  unreachable

sw.bb108:                                         ; preds = %if.end47
  switch i32 %bf.clear32, label %if.else133 [
    i32 25, label %if.then115
    i32 46, label %if.then126
  ]

if.then115:                                       ; preds = %sw.bb108
  %call116 = call %struct.rtx_def* @expand_expr(%union.tree_node* %exp.addr.0.lcssa, %struct.rtx_def* null, i32 0, i32 3) #6
  %conv117 = trunc i64 %call28 to i32
  %call118 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call116, i32 %conv117, i32 %align, i32 1)
  br label %if.end141

if.then126:                                       ; preds = %sw.bb108
  %20 = alloca i8, i64 %call28, align 1
  %conv127 = trunc i64 %call28 to i32
  %call128 = call %union.tree_node* @get_set_constructor_bytes(%union.tree_node* %exp.addr.0.lcssa, i8* %20, i32 %conv127) #6
  %tobool129 = icmp eq %union.tree_node* %call128, null
  br i1 %tobool129, label %if.end131, label %if.then130

if.then130:                                       ; preds = %if.then126
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4626, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.output_constant, i64 0, i64 0)) #9
  unreachable

if.end131:                                        ; preds = %if.then126
  call void @assemble_string(i8* %20, i32 %conv127)
  br label %if.end141

if.else133:                                       ; preds = %sw.bb108
  call void (i8*, ...)* @error(i8* getelementptr inbounds ([29 x i8]* @.str103, i64 0, i64 0)) #6
  br label %if.end141

sw.default:                                       ; preds = %if.end47
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4637, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.output_constant, i64 0, i64 0)) #9
  unreachable

sw.epilog:                                        ; preds = %sw.bb, %if.then51, %if.then86, %sw.bb65, %if.end61
  %thissize.0 = phi i64 [ %conv87.size, %if.then86 ], [ %call28, %sw.bb65 ], [ %call28, %if.end61 ], [ %call28, %sw.bb ], [ %call28, %if.then51 ]
  %sub = sub nsw i64 %size, %thissize.0
  %cmp137 = icmp sgt i64 %sub, 0
  br i1 %cmp137, label %if.then139, label %if.end141

if.then139:                                       ; preds = %sw.epilog
  %conv140 = trunc i64 %sub to i32
  %21 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool.i = icmp eq i32 %21, 0
  br i1 %tobool.i, label %if.end.i, label %if.end141

if.end.i:                                         ; preds = %if.then139
  %22 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i = icmp eq i32 %22, 1
  %cmp12.i = icmp sgt i32 %conv140, 0
  br i1 %cmp.i.i, label %for.cond.preheader.i, label %if.else.i

for.cond.preheader.i:                             ; preds = %if.end.i
  br i1 %cmp12.i, label %for.body.i, label %if.end141

for.cond.i:                                       ; preds = %for.body.i
  %cmp.i = icmp slt i32 %inc.i, %conv140
  br i1 %cmp.i, label %for.body.i, label %if.end141

for.body.i:                                       ; preds = %for.cond.preheader.i, %for.cond.i
  %i.013.i = phi i32 [ %inc.i, %for.cond.i ], [ 0, %for.cond.preheader.i ]
  %23 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !4
  %24 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i.i = call zeroext i1 %24(%struct.rtx_def* %23, i32 1, i32 1) #6
  %inc.i = add nsw i32 %i.013.i, 1
  br i1 %call.i.i, label %for.cond.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %for.body.i
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.else.i:                                        ; preds = %if.end.i
  br i1 %cmp12.i, label %if.then5.i, label %if.end141

if.then5.i:                                       ; preds = %if.else.i
  %25 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %conv140) #6
  br label %if.end141

if.end141:                                        ; preds = %for.cond.i, %for.cond.i197, %if.then5.i, %if.else.i, %for.cond.preheader.i, %if.then139, %if.then5.i205, %if.else.i203, %for.cond.preheader.i195, %if.then38, %if.end47, %if.then115, %if.else133, %if.end131, %entry, %if.then79, %if.then105, %sw.epilog
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_external(%union.tree_node* nocapture readnone %decl) #0 {
entry:
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %tobool = icmp eq %struct._IO_FILE* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 1732, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.assemble_external, i64 0, i64 0)) #9
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_external_libcall(%struct.rtx_def* nocapture %fun) #0 {
entry:
  %0 = getelementptr inbounds %struct.rtx_def* %fun, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 536870912
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %bf.set = or i32 %bf.load, 536870912
  store i32 %bf.set, i32* %0, align 8
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %2 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str93, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %1)
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %arrayidx = getelementptr inbounds %struct.rtx_def* %fun, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  %4 = load i8** %rtstr, align 8, !tbaa !4
  %5 = load i8* %4, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %5, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds i8* %4, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %6 = load i8* %4, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %6, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %4, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %3) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %4) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %7 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %fputc = tail call i32 @fputc(i32 10, %struct._IO_FILE* %7) #6
  br label %if.end

if.end:                                           ; preds = %entry, %assemble_name.exit
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_global(i8* %name) #0 {
entry:
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str93, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %0)
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %3 = load i8* %name, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %3, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds i8* %name, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %4 = load i8* %name, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %4, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %name, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %2) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %name) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %fputc = tail call i32 @fputc(i32 10, %struct._IO_FILE* %5) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_label(i8* %name) #0 {
entry:
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %1 = load i8* %name, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %1, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds i8* %name, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %2 = load i8* %name, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %2, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %name, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %0) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %name) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str73, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %3)
  ret void
}

declare %union.tree_node* @maybe_get_identifier(i8*) #3

declare void @asm_fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @assemble_static_space(i32 %size) #0 {
entry:
  %name = alloca [12 x i8], align 1
  %arraydecay = getelementptr inbounds [12 x i8]* %name, i64 0, i64 0
  %0 = load i32* @const_labelno, align 4, !tbaa !23
  %call = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8]* @.str74, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str96, i64 0, i64 0), i32 %0) #6
  %1 = load i32* @const_labelno, align 4, !tbaa !23
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* @const_labelno, align 4, !tbaa !23
  %call2 = call i8* @ggc_alloc_string(i8* %arraydecay, i32 -1) #6
  %2 = load i32* @target_flags, align 4, !tbaa !23
  %and = lshr i32 %2, 25
  %3 = and i32 %and, 1
  %4 = or i32 %3, 4
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %4, i8* %call2) #6
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %6 = call i64 @fwrite(i8* getelementptr inbounds ([9 x i8]* @.str97, i64 0, i64 0), i64 8, i64 1, %struct._IO_FILE* %5)
  %7 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %8 = load i8* %arraydecay, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %8, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds [12 x i8]* %name, i64 0, i64 %idx.ext.i
  %call.i = call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %9 = load i8* %arraydecay, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %9, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds [12 x i8]* %name, i64 0, i64 1
  %call8.i = call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %7) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %arraydecay) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %10 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %fputc = call i32 @fputc(i32 10, %struct._IO_FILE* %10) #6
  %11 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %12 = call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str98, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %11)
  %13 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %14 = load i8* %arraydecay, align 1, !tbaa !1
  %cmp.i15 = icmp eq i8 %14, 42
  %idx.ext.i16 = zext i1 %cmp.i15 to i64
  %add.ptr.i17 = getelementptr inbounds [12 x i8]* %name, i64 0, i64 %idx.ext.i16
  %call.i18 = call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i17) #6
  %tobool.i19 = icmp eq %union.tree_node* %call.i18, null
  br i1 %tobool.i19, label %if.end.i25, label %if.then.i23

if.then.i23:                                      ; preds = %assemble_name.exit
  %static_flag.i20 = getelementptr inbounds %union.tree_node* %call.i18, i64 0, i32 0, i32 0, i32 2
  %bf.load.i21 = load i32* %static_flag.i20, align 8
  %bf.set.i22 = or i32 %bf.load.i21, 262144
  store i32 %bf.set.i22, i32* %static_flag.i20, align 8
  br label %if.end.i25

if.end.i25:                                       ; preds = %if.then.i23, %assemble_name.exit
  %15 = load i8* %arraydecay, align 1, !tbaa !1
  %cmp4.i24 = icmp eq i8 %15, 42
  br i1 %cmp4.i24, label %if.then6.i28, label %if.else.i29

if.then6.i28:                                     ; preds = %if.end.i25
  %arrayidx7.i26 = getelementptr inbounds [12 x i8]* %name, i64 0, i64 1
  %call8.i27 = call i32 @fputs(i8* %arrayidx7.i26, %struct._IO_FILE* %13) #6
  br label %assemble_name.exit30

if.else.i29:                                      ; preds = %if.end.i25
  call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %arraydecay) #6
  br label %assemble_name.exit30

assemble_name.exit30:                             ; preds = %if.then6.i28, %if.else.i29
  %16 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([8 x i8]* @.str99, i64 0, i64 0), i32 %size, i32 16) #6
  ret %struct.rtx_def* %call3
}

; Function Attrs: nounwind readonly uwtable
define i8* @integer_asm_op(i32 %size, i32 %aligned_p) #2 {
entry:
  %tobool = icmp eq i32 %aligned_p, 0
  %. = select i1 %tobool, %struct.asm_int_op* getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 4), %struct.asm_int_op* getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 3)
  switch i32 %size, label %return [
    i32 1, label %sw.bb
    i32 2, label %sw.bb1
    i32 4, label %sw.bb2
    i32 8, label %sw.bb3
    i32 16, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry
  %0 = load i8** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 2), align 8, !tbaa !75
  br label %return

sw.bb1:                                           ; preds = %entry
  %hi = getelementptr inbounds %struct.asm_int_op* %., i64 0, i32 0
  %1 = load i8** %hi, align 8, !tbaa !76
  br label %return

sw.bb2:                                           ; preds = %entry
  %si = getelementptr inbounds %struct.asm_int_op* %., i64 0, i32 1
  %2 = load i8** %si, align 8, !tbaa !77
  br label %return

sw.bb3:                                           ; preds = %entry
  %di = getelementptr inbounds %struct.asm_int_op* %., i64 0, i32 2
  %3 = load i8** %di, align 8, !tbaa !78
  br label %return

sw.bb4:                                           ; preds = %entry
  %ti = getelementptr inbounds %struct.asm_int_op* %., i64 0, i32 3
  %4 = load i8** %ti, align 8, !tbaa !79
  br label %return

return:                                           ; preds = %entry, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %retval.0 = phi i8* [ %4, %sw.bb4 ], [ %3, %sw.bb3 ], [ %2, %sw.bb2 ], [ %1, %sw.bb1 ], [ %0, %sw.bb ], [ null, %entry ]
  ret i8* %retval.0
}

; Function Attrs: nounwind uwtable
define void @assemble_integer_with_op(i8* nocapture readonly %op, %struct.rtx_def* %x) #0 {
entry:
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call = tail call i32 @fputs(i8* %op, %struct._IO_FILE* %0) #6
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  tail call void @output_addr_const(%struct._IO_FILE* %1, %struct.rtx_def* %x) #6
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call1 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %2) #6
  ret void
}

declare void @output_addr_const(%struct._IO_FILE*, %struct.rtx_def*) #3

; Function Attrs: nounwind uwtable
define zeroext i1 @default_assemble_integer(%struct.rtx_def* %x, i32 %size, i32 %aligned_p) #0 {
entry:
  %tobool.i = icmp eq i32 %aligned_p, 0
  %..i = select i1 %tobool.i, %struct.asm_int_op* getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 4), %struct.asm_int_op* getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 3)
  switch i32 %size, label %land.end [
    i32 1, label %integer_asm_op.exit
    i32 2, label %sw.bb1.i
    i32 4, label %sw.bb2.i
    i32 8, label %sw.bb3.i
    i32 16, label %sw.bb4.i
  ]

sw.bb1.i:                                         ; preds = %entry
  %hi.i = getelementptr inbounds %struct.asm_int_op* %..i, i64 0, i32 0
  br label %integer_asm_op.exit

sw.bb2.i:                                         ; preds = %entry
  %si.i = getelementptr inbounds %struct.asm_int_op* %..i, i64 0, i32 1
  br label %integer_asm_op.exit

sw.bb3.i:                                         ; preds = %entry
  %di.i = getelementptr inbounds %struct.asm_int_op* %..i, i64 0, i32 2
  br label %integer_asm_op.exit

sw.bb4.i:                                         ; preds = %entry
  %ti.i = getelementptr inbounds %struct.asm_int_op* %..i, i64 0, i32 3
  br label %integer_asm_op.exit

integer_asm_op.exit:                              ; preds = %entry, %sw.bb1.i, %sw.bb2.i, %sw.bb3.i, %sw.bb4.i
  %retval.0.i.in = phi i8** [ %ti.i, %sw.bb4.i ], [ %di.i, %sw.bb3.i ], [ %si.i, %sw.bb2.i ], [ %hi.i, %sw.bb1.i ], [ getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 2), %entry ]
  %retval.0.i = load i8** %retval.0.i.in, align 8
  %tobool = icmp eq i8* %retval.0.i, null
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %integer_asm_op.exit
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i = tail call i32 @fputs(i8* %retval.0.i, %struct._IO_FILE* %0) #6
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  tail call void @output_addr_const(%struct._IO_FILE* %1, %struct.rtx_def* %x) #6
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call1.i = tail call i32 @fputc(i32 10, %struct._IO_FILE* %2) #6
  br label %land.end

land.end:                                         ; preds = %entry, %integer_asm_op.exit, %land.rhs
  %3 = phi i1 [ false, %integer_asm_op.exit ], [ true, %land.rhs ], [ false, %entry ]
  ret i1 %3
}

declare i32 @mode_for_size(i32, i32, i32) #3

declare %struct.rtx_def* @simplify_subreg(i32, %struct.rtx_def*, i32, i32) #3

; Function Attrs: nounwind uwtable
define void @assemble_real(%struct.realvaluetype* byval align 8 %d, i32 %mode, i32 %align) #0 {
entry:
  %data = alloca [4 x i64], align 16
  %or.i = or i32 %align, 32
  %sub.i = sub i32 0, %or.i
  %and.i = and i32 %or.i, %sub.i
  switch i32 %mode, label %sw.default [
    i32 15, label %sw.bb
    i32 16, label %sw.bb4
    i32 17, label %sw.bb10
    i32 18, label %sw.bb37
  ]

sw.bb:                                            ; preds = %entry
  %call1 = call i64 @etarsingle(%struct.realvaluetype* byval align 8 %d) #6
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call1) #6
  %call3 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call2, i32 4, i32 %align, i32 1)
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [4 x i64]* %data, i64 0, i64 0
  call void @etardouble(%struct.realvaluetype* byval align 8 %d, i64* %arraydecay) #6
  %0 = load i64* %arraydecay, align 16, !tbaa !80
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %0) #6
  %call6 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call5, i32 4, i32 %align, i32 1)
  %arrayidx7 = getelementptr inbounds [4 x i64]* %data, i64 0, i64 1
  %1 = load i64* %arrayidx7, align 8, !tbaa !80
  %call8 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %1) #6
  %call9 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call8, i32 4, i32 %and.i, i32 1)
  br label %sw.epilog

sw.bb10:                                          ; preds = %entry
  %2 = load i32* @target_flags, align 4, !tbaa !23
  %and = and i32 %2, 16777216
  %cmp15 = icmp eq i32 %and, 0
  %arraydecay17 = getelementptr inbounds [4 x i64]* %data, i64 0, i64 0
  br i1 %cmp15, label %cond.true16, label %cond.true23

cond.true16:                                      ; preds = %sw.bb10
  call void @etarldouble(%struct.realvaluetype* byval align 8 %d, i64* %arraydecay17) #6
  br label %cond.end27

cond.true23:                                      ; preds = %sw.bb10
  call void @etartdouble(%struct.realvaluetype* byval align 8 %d, i64* %arraydecay17) #6
  br label %cond.end27

cond.end27:                                       ; preds = %cond.true16, %cond.true23
  %3 = load i64* %arraydecay17, align 16, !tbaa !80
  %call29 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %3) #6
  %call30 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call29, i32 4, i32 %align, i32 1)
  %arrayidx31 = getelementptr inbounds [4 x i64]* %data, i64 0, i64 1
  %4 = load i64* %arrayidx31, align 8, !tbaa !80
  %call32 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %4) #6
  %call33 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call32, i32 4, i32 %and.i, i32 1)
  %arrayidx34 = getelementptr inbounds [4 x i64]* %data, i64 0, i64 2
  %5 = load i64* %arrayidx34, align 16, !tbaa !80
  %call35 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %5) #6
  %call36 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call35, i32 4, i32 %and.i, i32 1)
  br label %sw.epilog

sw.bb37:                                          ; preds = %entry
  %6 = load i32* @target_flags, align 4, !tbaa !23
  %and38 = and i32 %6, 16777216
  %cmp48 = icmp eq i32 %and38, 0
  %arraydecay50 = getelementptr inbounds [4 x i64]* %data, i64 0, i64 0
  br i1 %cmp48, label %cond.true49, label %cond.true56

cond.true49:                                      ; preds = %sw.bb37
  call void @etarldouble(%struct.realvaluetype* byval align 8 %d, i64* %arraydecay50) #6
  br label %cond.end61

cond.true56:                                      ; preds = %sw.bb37
  call void @etartdouble(%struct.realvaluetype* byval align 8 %d, i64* %arraydecay50) #6
  br label %cond.end61

cond.end61:                                       ; preds = %cond.true49, %cond.true56
  %7 = load i64* %arraydecay50, align 16, !tbaa !80
  %call63 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %7) #6
  %call64 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call63, i32 4, i32 %align, i32 1)
  %arrayidx65 = getelementptr inbounds [4 x i64]* %data, i64 0, i64 1
  %8 = load i64* %arrayidx65, align 8, !tbaa !80
  %call66 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %8) #6
  %call67 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call66, i32 4, i32 %and.i, i32 1)
  %arrayidx68 = getelementptr inbounds [4 x i64]* %data, i64 0, i64 2
  %9 = load i64* %arrayidx68, align 16, !tbaa !80
  %call69 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %9) #6
  %call70 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call69, i32 4, i32 %and.i, i32 1)
  %arrayidx71 = getelementptr inbounds [4 x i64]* %data, i64 0, i64 3
  %10 = load i64* %arrayidx71, align 8, !tbaa !80
  %call72 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %10) #6
  %call73 = call zeroext i1 @assemble_integer(%struct.rtx_def* %call72, i32 4, i32 %and.i, i32 1)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2055, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.assemble_real, i64 0, i64 0)) #9
  unreachable

sw.epilog:                                        ; preds = %cond.end61, %cond.end27, %sw.bb4, %sw.bb
  ret void
}

declare i64 @etarsingle(%struct.realvaluetype* byval align 8) #3

declare %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #3

declare void @etardouble(%struct.realvaluetype* byval align 8, i64*) #3

declare void @etarldouble(%struct.realvaluetype* byval align 8, i64*) #3

declare void @etartdouble(%struct.realvaluetype* byval align 8, i64*) #3

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @immed_double_const(i64 %i0, i64 %i1, i32 %mode) #0 {
entry:
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !1
  switch i32 %0, label %if.end63 [
    i32 1, label %if.then
    i32 3, label %if.then
  ]

if.then:                                          ; preds = %entry, %entry
  %arrayidx5 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %1 = load i16* %arrayidx5, align 2, !tbaa !25
  %conv = zext i16 %1 to i32
  %cmp6 = icmp ult i16 %1, 64
  br i1 %cmp6, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %sub = add nsw i32 %conv, -1
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 -1, %sh_prom
  %and = and i64 %shl, %i0
  %cmp11 = icmp eq i64 %and, %shl
  br i1 %cmp11, label %if.else27.thread, label %if.end32.thread

if.end32.thread:                                  ; preds = %land.lhs.true
  %sh_prom14 = zext i16 %1 to i64
  %shl15 = shl i64 1, %sh_prom14
  %sub16 = add nsw i64 %shl15, -1
  %and17 = and i64 %sub16, %i0
  br label %land.lhs.true35

if.else:                                          ; preds = %if.then
  %cmp18 = icmp eq i16 %1, 64
  br i1 %cmp18, label %land.lhs.true20, label %if.else27

land.lhs.true20:                                  ; preds = %if.else
  %cmp21 = icmp eq i64 %i1, -1
  %cmp24 = icmp slt i64 %i0, 0
  %or.cond = and i1 %cmp21, %cmp24
  br i1 %or.cond, label %if.else27.thread, label %if.end32

if.else27.thread:                                 ; preds = %land.lhs.true20, %land.lhs.true
  br label %if.end32

if.else27:                                        ; preds = %if.else
  %cmp28 = icmp ugt i16 %1, 128
  br i1 %cmp28, label %if.then30, label %if.end43

if.then30:                                        ; preds = %if.else27
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2129, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.immed_double_const, i64 0, i64 0)) #9
  unreachable

if.end32:                                         ; preds = %if.else27.thread, %land.lhs.true20
  %i1.addr.0 = phi i64 [ 0, %land.lhs.true20 ], [ %i1, %if.else27.thread ]
  br i1 %cmp6, label %if.end32.land.lhs.true35_crit_edge, label %if.end43

if.end32.land.lhs.true35_crit_edge:               ; preds = %if.end32
  %sub36.pre = add nsw i32 %conv, -1
  %sh_prom37.pre = zext i32 %sub36.pre to i64
  br label %land.lhs.true35

land.lhs.true35:                                  ; preds = %if.end32.land.lhs.true35_crit_edge, %if.end32.thread
  %sh_prom37.pre-phi = phi i64 [ %sh_prom37.pre, %if.end32.land.lhs.true35_crit_edge ], [ %sh_prom, %if.end32.thread ]
  %i1.addr.0138 = phi i64 [ %i1.addr.0, %if.end32.land.lhs.true35_crit_edge ], [ 0, %if.end32.thread ]
  %i0.addr.0136 = phi i64 [ %i0, %if.end32.land.lhs.true35_crit_edge ], [ %and17, %if.end32.thread ]
  %shl38 = shl i64 1, %sh_prom37.pre-phi
  %and39 = and i64 %i0.addr.0136, %shl38
  %tobool = icmp eq i64 %and39, 0
  br i1 %tobool, label %if.end43, label %if.then40

if.then40:                                        ; preds = %land.lhs.true35
  %sh_prom41 = zext i16 %1 to i64
  %shl42 = shl i64 -1, %sh_prom41
  %or = or i64 %i0.addr.0136, %shl42
  br label %if.end43

if.end43:                                         ; preds = %if.else27, %land.lhs.true35, %if.then40, %if.end32
  %i1.addr.0137 = phi i64 [ %i1.addr.0138, %if.then40 ], [ %i1.addr.0138, %land.lhs.true35 ], [ %i1.addr.0, %if.end32 ], [ %i1, %if.else27 ]
  %i0.addr.1 = phi i64 [ %or, %if.then40 ], [ %i0.addr.0136, %land.lhs.true35 ], [ %i0, %if.end32 ], [ %i0, %if.else27 ]
  %cmp44 = icmp ult i16 %1, 65
  %i0.addr.1.lobit = ashr i64 %i0.addr.1, 63
  %i0.addr.1.lobit.i1.addr.0 = select i1 %cmp44, i64 %i0.addr.1.lobit, i64 %i1.addr.0137
  %cmp50 = icmp eq i64 %i0.addr.1.lobit.i1.addr.0, 0
  %cmp53 = icmp sgt i64 %i0.addr.1, -1
  %or.cond97 = and i1 %cmp50, %cmp53
  br i1 %or.cond97, label %if.then61, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %if.end43
  %cmp56 = icmp eq i64 %i0.addr.1.lobit.i1.addr.0, -1
  %cmp59 = icmp slt i64 %i0.addr.1, 0
  %or.cond98 = and i1 %cmp56, %cmp59
  br i1 %or.cond98, label %if.then61, label %if.end63

if.then61:                                        ; preds = %lor.lhs.false55, %if.end43
  %call = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %i0.addr.1) #6
  br label %return

if.end63:                                         ; preds = %lor.lhs.false55, %entry
  %i0.addr.2 = phi i64 [ %i0, %entry ], [ %i0.addr.1, %lor.lhs.false55 ]
  %i1.addr.2 = phi i64 [ %i1, %entry ], [ %i0.addr.1.lobit.i1.addr.0, %lor.lhs.false55 ]
  %mode.addr.0 = phi i32 [ %mode, %entry ], [ 0, %lor.lhs.false55 ]
  %2 = load %struct.function** @cfun, align 8, !tbaa !4
  %cmp64 = icmp eq %struct.function* %2, null
  br i1 %cmp64, label %if.end84, label %if.then66

if.then66:                                        ; preds = %if.end63
  %varasm = getelementptr inbounds %struct.function* %2, i64 0, i32 4
  %3 = load %struct.varasm_status** %varasm, align 8, !tbaa !46
  %x_const_double_chain = getelementptr inbounds %struct.varasm_status* %3, i64 0, i32 5
  %r.0141 = load %struct.rtx_def** %x_const_double_chain, align 8
  %tobool67142 = icmp eq %struct.rtx_def* %r.0141, null
  br i1 %tobool67142, label %if.end84, label %for.body

for.body:                                         ; preds = %if.then66, %for.inc
  %r.0143 = phi %struct.rtx_def* [ %r.0, %for.inc ], [ %r.0141, %if.then66 ]
  %fld = getelementptr inbounds %struct.rtx_def* %r.0143, i64 0, i32 1
  %rtwint = getelementptr inbounds %struct.rtx_def* %r.0143, i64 0, i32 1, i64 1, i32 0
  %4 = load i64* %rtwint, align 8, !tbaa !81
  %cmp69 = icmp eq i64 %4, %i0.addr.2
  br i1 %cmp69, label %land.lhs.true71, label %for.inc

land.lhs.true71:                                  ; preds = %for.body
  %rtwint74 = getelementptr inbounds %struct.rtx_def* %r.0143, i64 0, i32 1, i64 2, i32 0
  %5 = load i64* %rtwint74, align 8, !tbaa !81
  %cmp75 = icmp eq i64 %5, %i1.addr.2
  br i1 %cmp75, label %land.lhs.true77, label %for.inc

land.lhs.true77:                                  ; preds = %land.lhs.true71
  %6 = getelementptr inbounds %struct.rtx_def* %r.0143, i64 0, i32 0
  %bf.load = load i32* %6, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp78 = icmp eq i32 %bf.clear, %mode.addr.0
  br i1 %cmp78, label %return, label %for.inc

for.inc:                                          ; preds = %for.body, %land.lhs.true71, %land.lhs.true77
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %r.0 = load %struct.rtx_def** %rtx, align 8
  %tobool67 = icmp eq %struct.rtx_def* %r.0, null
  br i1 %tobool67, label %if.end84, label %for.body

if.end84:                                         ; preds = %for.inc, %if.then66, %if.end63
  %call85 = tail call %struct.rtx_def* @gen_rtx_CONST_DOUBLE(i32 %mode.addr.0, i64 %i0.addr.2, i64 %i1.addr.2) #6
  %7 = load %union.tree_node** @current_function_decl, align 8, !tbaa !4
  %cmp86 = icmp eq %union.tree_node* %7, null
  br i1 %cmp86, label %return, label %if.then88

if.then88:                                        ; preds = %if.end84
  %8 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm89 = getelementptr inbounds %struct.function* %8, i64 0, i32 4
  %9 = load %struct.varasm_status** %varasm89, align 8, !tbaa !46
  %x_const_double_chain90 = getelementptr inbounds %struct.varasm_status* %9, i64 0, i32 5
  %10 = load %struct.rtx_def** %x_const_double_chain90, align 8, !tbaa !82
  %11 = getelementptr inbounds %struct.rtx_def* %call85, i64 0, i32 1, i64 0, i32 0
  %.c = ptrtoint %struct.rtx_def* %10 to i64
  store i64 %.c, i64* %11, align 8, !tbaa !4
  %12 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm94 = getelementptr inbounds %struct.function* %12, i64 0, i32 4
  %13 = load %struct.varasm_status** %varasm94, align 8, !tbaa !46
  %x_const_double_chain95 = getelementptr inbounds %struct.varasm_status* %13, i64 0, i32 5
  store %struct.rtx_def* %call85, %struct.rtx_def** %x_const_double_chain95, align 8, !tbaa !82
  br label %return

return:                                           ; preds = %land.lhs.true77, %if.then88, %if.end84, %if.then61
  %retval.0 = phi %struct.rtx_def* [ %call, %if.then61 ], [ %call85, %if.end84 ], [ %call85, %if.then88 ], [ %r.0143, %land.lhs.true77 ]
  ret %struct.rtx_def* %retval.0
}

declare %struct.rtx_def* @gen_rtx_CONST_DOUBLE(i32, i64, i64) #3

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @immed_real_const_1(%struct.realvaluetype* byval align 8 %d, i32 %mode) #0 {
entry:
  %u = alloca %union.real_extract, align 8
  %0 = bitcast %union.real_extract* %u to i8*
  %1 = bitcast %struct.realvaluetype* %d to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 24, i32 8, i1 false), !tbaa.struct !83
  %call = tail call i32 @target_isnan(%struct.realvaluetype* byval align 8 %d) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %call2 = tail call i32 @memcmp(i8* bitcast (%struct.realvaluetype* @dconst0 to i8*), i8* %1, i64 24) #6
  %tobool3 = icmp eq i32 %call2, 0
  br i1 %tobool3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 %idxprom
  %2 = load %struct.rtx_def** %arrayidx, align 8, !tbaa !4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %call4 = tail call i32 @target_isnan(%struct.realvaluetype* byval align 8 %d) #6
  %tobool5 = icmp eq i32 %call4, 0
  br i1 %tobool5, label %land.lhs.true6, label %if.else11

land.lhs.true6:                                   ; preds = %if.else
  %call7 = tail call i32 @ereal_cmp(%struct.realvaluetype* byval align 8 @dconst1, %struct.realvaluetype* byval align 8 %d) #6
  %cmp = icmp eq i32 %call7, 0
  br i1 %cmp, label %if.then8, label %if.else11

if.then8:                                         ; preds = %land.lhs.true6
  %idxprom9 = sext i32 %mode to i64
  %arrayidx10 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 1, i64 %idxprom9
  %3 = load %struct.rtx_def** %arrayidx10, align 8, !tbaa !4
  br label %return

if.else11:                                        ; preds = %if.else, %land.lhs.true6
  %call12 = tail call i32 @target_isnan(%struct.realvaluetype* byval align 8 %d) #6
  %tobool13 = icmp eq i32 %call12, 0
  br i1 %tobool13, label %land.lhs.true14, label %if.end21

land.lhs.true14:                                  ; preds = %if.else11
  %call15 = tail call i32 @ereal_cmp(%struct.realvaluetype* byval align 8 @dconst2, %struct.realvaluetype* byval align 8 %d) #6
  %cmp16 = icmp eq i32 %call15, 0
  br i1 %cmp16, label %if.then17, label %if.end21

if.then17:                                        ; preds = %land.lhs.true14
  %idxprom18 = sext i32 %mode to i64
  %arrayidx19 = getelementptr inbounds [3 x [59 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 2, i64 %idxprom18
  %4 = load %struct.rtx_def** %arrayidx19, align 8, !tbaa !4
  br label %return

if.end21:                                         ; preds = %if.else11, %land.lhs.true14
  %5 = load %struct.function** @cfun, align 8, !tbaa !4
  %cmp22 = icmp eq %struct.function* %5, null
  br i1 %cmp22, label %if.end34, label %if.then23

if.then23:                                        ; preds = %if.end21
  %varasm = getelementptr inbounds %struct.function* %5, i64 0, i32 4
  %6 = load %struct.varasm_status** %varasm, align 8, !tbaa !46
  %x_const_double_chain = getelementptr inbounds %struct.varasm_status* %6, i64 0, i32 5
  %r.070 = load %struct.rtx_def** %x_const_double_chain, align 8
  %tobool2471 = icmp eq %struct.rtx_def* %r.070, null
  br i1 %tobool2471, label %if.end34, label %for.body

for.body:                                         ; preds = %if.then23, %for.inc
  %r.072 = phi %struct.rtx_def* [ %r.0, %for.inc ], [ %r.070, %if.then23 ]
  %rtwint = getelementptr inbounds %struct.rtx_def* %r.072, i64 0, i32 1, i64 1, i32 0
  %7 = bitcast i64* %rtwint to i8*
  %call26 = call i32 @memcmp(i8* %7, i8* %0, i64 24) #6
  %tobool27 = icmp eq i32 %call26, 0
  br i1 %tobool27, label %land.lhs.true28, label %for.inc

land.lhs.true28:                                  ; preds = %for.body
  %8 = getelementptr inbounds %struct.rtx_def* %r.072, i64 0, i32 0
  %bf.load = load i32* %8, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp29 = icmp eq i32 %bf.clear, %mode
  br i1 %cmp29, label %return, label %for.inc

for.inc:                                          ; preds = %for.body, %land.lhs.true28
  %arrayidx33 = getelementptr inbounds %struct.rtx_def* %r.072, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**
  %r.0 = load %struct.rtx_def** %rtx, align 8
  %tobool24 = icmp eq %struct.rtx_def* %r.0, null
  br i1 %tobool24, label %if.end34, label %for.body

if.end34:                                         ; preds = %for.inc, %if.then23, %if.end21
  %call35 = tail call %struct.rtx_def* @rtx_alloc(i32 55) #6
  %9 = getelementptr inbounds %struct.rtx_def* %call35, i64 0, i32 0
  %bf.load36 = load i32* %9, align 8
  %bf.value = shl i32 %mode, 16
  %bf.shl = and i32 %bf.value, 16711680
  %bf.clear37 = and i32 %bf.load36, -16711681
  %bf.set = or i32 %bf.clear37, %bf.shl
  store i32 %bf.set, i32* %9, align 8
  %fld38 = getelementptr inbounds %struct.rtx_def* %call35, i64 0, i32 1
  %rtwint40 = getelementptr inbounds %struct.rtx_def* %call35, i64 0, i32 1, i64 1, i32 0
  %10 = bitcast i64* %rtwint40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %0, i64 24, i32 1, i1 false)
  %11 = load %union.tree_node** @current_function_decl, align 8, !tbaa !4
  %cmp41 = icmp eq %union.tree_node* %11, null
  br i1 %cmp41, label %if.else50, label %if.then42

if.then42:                                        ; preds = %if.end34
  %12 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm43 = getelementptr inbounds %struct.function* %12, i64 0, i32 4
  %13 = load %struct.varasm_status** %varasm43, align 8, !tbaa !46
  %x_const_double_chain44 = getelementptr inbounds %struct.varasm_status* %13, i64 0, i32 5
  %14 = load %struct.rtx_def** %x_const_double_chain44, align 8, !tbaa !82
  %15 = getelementptr inbounds [1 x %union.rtunion_def]* %fld38, i64 0, i64 0, i32 0
  %.c = ptrtoint %struct.rtx_def* %14 to i64
  store i64 %.c, i64* %15, align 8, !tbaa !4
  %16 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm48 = getelementptr inbounds %struct.function* %16, i64 0, i32 4
  %17 = load %struct.varasm_status** %varasm48, align 8, !tbaa !46
  %x_const_double_chain49 = getelementptr inbounds %struct.varasm_status* %17, i64 0, i32 5
  store %struct.rtx_def* %call35, %struct.rtx_def** %x_const_double_chain49, align 8, !tbaa !82
  br label %return

if.else50:                                        ; preds = %if.end34
  %18 = getelementptr inbounds [1 x %union.rtunion_def]* %fld38, i64 0, i64 0, i32 0
  store i64 0, i64* %18, align 8, !tbaa !4
  br label %return

return:                                           ; preds = %land.lhs.true28, %if.then42, %if.else50, %if.then17, %if.then8, %if.then
  %retval.0 = phi %struct.rtx_def* [ %4, %if.then17 ], [ %3, %if.then8 ], [ %2, %if.then ], [ %call35, %if.else50 ], [ %call35, %if.then42 ], [ %r.072, %land.lhs.true28 ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

declare i32 @target_isnan(%struct.realvaluetype* byval align 8) #3

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) #4

declare i32 @ereal_cmp(%struct.realvaluetype* byval align 8, %struct.realvaluetype* byval align 8) #3

declare %struct.rtx_def* @rtx_alloc(i32) #3

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @immed_real_const(%union.tree_node* %exp) #0 {
entry:
  %real_cst1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %0 = bitcast i32* %real_cst1 to %struct.realvaluetype*
  %type = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !27
  %type2 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type2, i64 0, i32 6
  %bf.load = load i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  %call = tail call %struct.rtx_def* @immed_real_const_1(%struct.realvaluetype* byval align 8 %0, i32 %bf.clear)
  ret %struct.rtx_def* %call
}

; Function Attrs: nounwind uwtable
define void @clear_const_double_mem() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm = getelementptr inbounds %struct.function* %0, i64 0, i32 4
  %1 = load %struct.varasm_status** %varasm, align 8, !tbaa !46
  %x_const_double_chain = getelementptr inbounds %struct.varasm_status* %1, i64 0, i32 5
  %2 = load %struct.rtx_def** %x_const_double_chain, align 8, !tbaa !82
  %tobool8 = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool8, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %r.09 = phi %struct.rtx_def* [ %3, %for.body ], [ %2, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %r.09, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %4 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  store i64 0, i64* %4, align 8, !tbaa !4
  %tobool = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %.pre = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm4.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 4
  %.pre10 = load %struct.varasm_status** %varasm4.phi.trans.insert, align 8, !tbaa !46
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  %5 = phi %struct.varasm_status* [ %.pre10, %for.cond.for.end_crit_edge ], [ %1, %entry ]
  %x_const_double_chain5 = getelementptr inbounds %struct.varasm_status* %5, i64 0, i32 5
  store %struct.rtx_def* null, %struct.rtx_def** %x_const_double_chain5, align 8, !tbaa !82
  ret void
}

; Function Attrs: nounwind uwtable
define void @defer_addressed_constants() #0 {
entry:
  %0 = load i32* @defer_addressed_constants_flag, align 4, !tbaa !23
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* @defer_addressed_constants_flag, align 4, !tbaa !23
  ret void
}

; Function Attrs: nounwind uwtable
define void @output_deferred_addressed_constants() #0 {
entry:
  %0 = load i32* @defer_addressed_constants_flag, align 4, !tbaa !23
  %dec = add nsw i32 %0, -1
  store i32 %dec, i32* @defer_addressed_constants_flag, align 4, !tbaa !23
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = load %struct.deferred_constant** @deferred_constants, align 8, !tbaa !4
  %tobool7 = icmp eq %struct.deferred_constant* %1, null
  br i1 %tobool7, label %for.end, label %for.body

for.body:                                         ; preds = %if.end, %for.body
  %p.08 = phi %struct.deferred_constant* [ %5, %for.body ], [ %1, %if.end ]
  %exp = getelementptr inbounds %struct.deferred_constant* %p.08, i64 0, i32 1
  %2 = load %union.tree_node** %exp, align 8, !tbaa !84
  %reloc = getelementptr inbounds %struct.deferred_constant* %p.08, i64 0, i32 2
  %3 = load i32* %reloc, align 4, !tbaa !86
  %labelno = getelementptr inbounds %struct.deferred_constant* %p.08, i64 0, i32 3
  %4 = load i32* %labelno, align 4, !tbaa !87
  tail call fastcc void @output_constant_def_contents(%union.tree_node* %2, i32 %3, i32 %4)
  %next1 = getelementptr inbounds %struct.deferred_constant* %p.08, i64 0, i32 0
  %5 = load %struct.deferred_constant** %next1, align 8, !tbaa !88
  %6 = bitcast %struct.deferred_constant* %p.08 to i8*
  tail call void @free(i8* %6)
  %tobool = icmp eq %struct.deferred_constant* %5, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.end
  store %struct.deferred_constant* null, %struct.deferred_constant** @deferred_constants, align 8, !tbaa !4
  br label %return

return:                                           ; preds = %entry, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @output_constant_def_contents(%union.tree_node* %exp, i32 %reloc, i32 %labelno) #0 {
entry:
  %name.i = alloca [24 x i8], align 16
  %type = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !27
  %align2 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 7
  %1 = bitcast %union.tree_node** %align2 to i32*
  %2 = load i32* %1, align 4, !tbaa !41
  %call = call i32 @ix86_constant_alignment(%union.tree_node* %exp, i32 %2) #6
  %code = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.else131 [
    i32 30, label %land.lhs.true
    i32 34, label %land.lhs.true
    i32 29, label %if.then15
    i32 46, label %if.then110
  ]

land.lhs.true:                                    ; preds = %entry, %entry
  %section_name = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 15
  %3 = load %union.tree_node** %section_name, align 8, !tbaa !18
  %cmp9 = icmp eq %union.tree_node* %3, null
  br i1 %cmp9, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  call void @named_section(%union.tree_node* %exp, i8* null, i32 %reloc)
  br label %if.end135

if.else:                                          ; preds = %land.lhs.true
  switch i32 %bf.clear, label %if.else131 [
    i32 29, label %if.then15
    i32 34, label %if.then25
    i32 46, label %if.then110
  ]

if.then15:                                        ; preds = %entry, %if.else
  %4 = load i32* @flag_writable_strings, align 4, !tbaa !23
  %tobool = icmp eq i32 %4, 0
  br i1 %tobool, label %if.then16, label %if.else17

if.then16:                                        ; preds = %if.then15
  %conv = sext i32 %call to i64
  call void @mergeable_string_section(%union.tree_node* %exp, i64 %conv, i32 0)
  br label %if.end135

if.else17:                                        ; preds = %if.then15
  %5 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i = icmp eq i32 %5, 2
  br i1 %cmp.i, label %if.end135, label %if.then.i

if.then.i:                                        ; preds = %if.else17
  %6 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str3, i64 0, i64 0)) #6
  store i32 2, i32* @in_section, align 4, !tbaa !1
  br label %if.end135

if.then25:                                        ; preds = %if.else
  %7 = and i32 %bf.load, 4352
  %8 = icmp eq i32 %7, 4096
  br i1 %8, label %lor.lhs.false36, label %if.then52

lor.lhs.false36:                                  ; preds = %if.then25
  %initial = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 12
  %9 = load %union.tree_node** %initial, align 8, !tbaa !24
  %tobool38 = icmp eq %union.tree_node* %9, null
  br i1 %tobool38, label %if.then52, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false36
  %10 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !4
  %cmp42 = icmp eq %union.tree_node* %9, %10
  br i1 %cmp42, label %if.else65, label %land.lhs.true44

land.lhs.true44:                                  ; preds = %lor.lhs.false39
  %constant_flag = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 2
  %bf.load48 = load i32* %constant_flag, align 8
  %bf.clear50 = and i32 %bf.load48, 512
  %tobool51 = icmp eq i32 %bf.clear50, 0
  br i1 %tobool51, label %if.then52, label %if.else65

if.then52:                                        ; preds = %if.then25, %land.lhs.true44, %lor.lhs.false36
  %11 = load i32* @flag_pic, align 4, !tbaa !23
  %tobool53 = icmp eq i32 %11, 0
  %and = and i32 %reloc, 2
  %tobool55 = icmp eq i32 %and, 0
  %or.cond217 = or i1 %tobool53, %tobool55
  br i1 %or.cond217, label %if.else57, label %if.then56

if.then56:                                        ; preds = %if.then52
  %12 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call.i221 = call i32 %12(%union.tree_node* null, i8* getelementptr inbounds ([10 x i8]* @.str7, i64 0, i64 0), i32 %reloc) #6
  call void @named_section_flags(i8* getelementptr inbounds ([10 x i8]* @.str7, i64 0, i64 0), i32 %call.i221) #6
  br label %if.end135

if.else57:                                        ; preds = %if.then52
  %tobool58 = icmp ne i32 %11, 0
  %tobool60 = icmp ne i32 %reloc, 0
  %or.cond = and i1 %tobool58, %tobool60
  br i1 %or.cond, label %if.then61, label %if.else62

if.then61:                                        ; preds = %if.else57
  %13 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call.i222 = call i32 %13(%union.tree_node* null, i8* getelementptr inbounds ([16 x i8]* @.str8, i64 0, i64 0), i32 %reloc) #6
  call void @named_section_flags(i8* getelementptr inbounds ([16 x i8]* @.str8, i64 0, i64 0), i32 %call.i222) #6
  br label %if.end135

if.else62:                                        ; preds = %if.else57
  %14 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i223 = icmp eq i32 %14, 2
  br i1 %cmp.i223, label %if.end135, label %if.then.i225

if.then.i225:                                     ; preds = %if.else62
  %15 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i224 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str3, i64 0, i64 0)) #6
  store i32 2, i32* @in_section, align 4, !tbaa !1
  br label %if.end135

if.else65:                                        ; preds = %land.lhs.true44, %lor.lhs.false39
  %16 = load i32* @flag_pic, align 4, !tbaa !23
  %tobool66 = icmp eq i32 %16, 0
  %and68 = and i32 %reloc, 2
  %tobool69 = icmp eq i32 %and68, 0
  %or.cond218 = or i1 %tobool66, %tobool69
  br i1 %or.cond218, label %if.else71, label %if.then70

if.then70:                                        ; preds = %if.else65
  %17 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call.i227 = call i32 %17(%union.tree_node* null, i8* getelementptr inbounds ([13 x i8]* @.str9, i64 0, i64 0), i32 %reloc) #6
  call void @named_section_flags(i8* getelementptr inbounds ([13 x i8]* @.str9, i64 0, i64 0), i32 %call.i227) #6
  br label %if.end135

if.else71:                                        ; preds = %if.else65
  %tobool72 = icmp ne i32 %16, 0
  %tobool74 = icmp ne i32 %reloc, 0
  %or.cond176 = and i1 %tobool72, %tobool74
  br i1 %or.cond176, label %if.then75, label %if.else76

if.then75:                                        ; preds = %if.else71
  %18 = load i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 12), align 8, !tbaa !22
  %call.i228 = call i32 %18(%union.tree_node* null, i8* getelementptr inbounds ([19 x i8]* @.str10, i64 0, i64 0), i32 %reloc) #6
  call void @named_section_flags(i8* getelementptr inbounds ([19 x i8]* @.str10, i64 0, i64 0), i32 %call.i228) #6
  br label %if.end135

if.else76:                                        ; preds = %if.else71
  %19 = load i32* @flag_merge_constants, align 4, !tbaa !23
  %cmp77 = icmp slt i32 %19, 2
  br i1 %cmp77, label %if.then79, label %if.else80

if.then79:                                        ; preds = %if.else76
  %20 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i229 = icmp eq i32 %20, 5
  br i1 %cmp.i229, label %if.end135, label %if.then.i231

if.then.i231:                                     ; preds = %if.then79
  %21 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i230 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end135

if.else80:                                        ; preds = %if.else76
  %code84 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 2
  %bf.load85 = load i32* %code84, align 8
  %bf.clear86 = and i32 %bf.load85, 255
  %cmp87 = icmp eq i32 %bf.clear86, 29
  br i1 %cmp87, label %if.then89, label %if.else93

if.then89:                                        ; preds = %if.else80
  %conv92 = sext i32 %call to i64
  call void @mergeable_string_section(%union.tree_node* %9, i64 %conv92, i32 0)
  br label %if.end135

if.else93:                                        ; preds = %if.else80
  %mode = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 5
  %22 = bitcast i48* %mode to i64*
  %bf.load95 = load i64* %22, align 8
  %bf.load95.tr = trunc i64 %bf.load95 to i32
  %bf.cast = and i32 %bf.load95.tr, 255
  %conv97 = sext i32 %call to i64
  %23 = getelementptr inbounds [24 x i8]* %name.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 24, i8* %23) #6
  switch i32 %bf.cast, label %land.lhs.true5.i [
    i32 51, label %if.end.i
    i32 0, label %if.end.i
  ]

land.lhs.true5.i:                                 ; preds = %if.else93
  %idxprom.i249 = zext i32 %bf.cast to i64
  %arrayidx.i = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom.i249
  %24 = load i16* %arrayidx.i, align 2, !tbaa !25
  %conv6.i = zext i16 %24 to i64
  %cmp7.i = icmp ule i64 %conv6.i, %conv97
  %cmp10.i = icmp ugt i32 %call, 7
  %or.cond25.i = and i1 %cmp7.i, %cmp10.i
  %cmp13.i = icmp ult i32 %call, 257
  %or.cond26.i = and i1 %or.cond25.i, %cmp13.i
  br i1 %or.cond26.i, label %land.lhs.true15.i, label %if.end.i

land.lhs.true15.i:                                ; preds = %land.lhs.true5.i
  %sub.i = add i64 %conv97, -1
  %and.i = and i64 %sub.i, %conv97
  %cmp16.i = icmp eq i64 %and.i, 0
  br i1 %cmp16.i, label %if.then.i234, label %if.end.i

if.then.i234:                                     ; preds = %land.lhs.true15.i
  %div.i = lshr i64 %conv97, 3
  %conv18.i = trunc i64 %div.i to i32
  %call.i233 = call i32 (i8*, i8*, ...)* @sprintf(i8* %23, i8* getelementptr inbounds ([14 x i8]* @.str14, i64 0, i64 0), i32 %conv18.i) #6
  %or21.i = or i64 %div.i, 32768
  %conv22.i = trunc i64 %or21.i to i32
  call void @named_section_flags(i8* %23, i32 %conv22.i) #6
  br label %if.end135

if.end.i:                                         ; preds = %if.else93, %if.else93, %land.lhs.true15.i, %land.lhs.true5.i
  %25 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i.i = icmp eq i32 %25, 5
  br i1 %cmp.i.i.i, label %if.end135, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %if.end.i
  %26 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i.i.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end135

if.then110:                                       ; preds = %entry, %if.else
  %27 = load i32* @flag_pic, align 4, !tbaa !23
  %notlhs = icmp eq i32 %27, 0
  %notrhs = icmp eq i32 %reloc, 0
  %or.cond177.not = or i1 %notrhs, %notlhs
  %bf.clear119 = and i32 %bf.load, 256
  %tobool120 = icmp eq i32 %bf.clear119, 0
  %or.cond219 = and i1 %or.cond177.not, %tobool120
  %or.cond219.not = xor i1 %or.cond219, true
  %bf.clear126 = and i32 %bf.load, 512
  %tobool127 = icmp eq i32 %bf.clear126, 0
  %or.cond220 = or i1 %tobool127, %or.cond219.not
  %28 = load i32* @in_section, align 4, !tbaa !1
  br i1 %or.cond220, label %if.then128, label %if.else129

if.then128:                                       ; preds = %if.then110
  %cmp.i235 = icmp eq i32 %28, 2
  br i1 %cmp.i235, label %if.end135, label %if.then.i237

if.then.i237:                                     ; preds = %if.then128
  %29 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i236 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str3, i64 0, i64 0)) #6
  store i32 2, i32* @in_section, align 4, !tbaa !1
  br label %if.end135

if.else129:                                       ; preds = %if.then110
  %cmp.i239 = icmp eq i32 %28, 5
  br i1 %cmp.i239, label %if.end135, label %if.then.i241

if.then.i241:                                     ; preds = %if.else129
  %30 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i240 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end135

if.else131:                                       ; preds = %entry, %if.else
  %31 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i244 = icmp eq i32 %31, 5
  br i1 %cmp.i244, label %if.end135, label %if.then.i246

if.then.i246:                                     ; preds = %if.else131
  %32 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i245 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8]* @.str1, i64 0, i64 0)) #6
  store i32 5, i32* @in_section, align 4, !tbaa !1
  br label %if.end135

if.end135:                                        ; preds = %if.then.i.i.i, %if.end.i, %if.then.i234, %if.then.i246, %if.else131, %if.then.i241, %if.else129, %if.then.i237, %if.then128, %if.then.i231, %if.then79, %if.then.i225, %if.else62, %if.then.i, %if.else17, %if.then16, %if.then61, %if.then56, %if.then75, %if.then89, %if.then70, %if.then
  %cmp136 = icmp sgt i32 %call, 8
  br i1 %cmp136, label %if.then138, label %do.body

if.then138:                                       ; preds = %if.end135
  %div = sdiv i32 %call, 8
  %conv139 = sext i32 %div to i64
  %call140 = call i32 @floor_log2_wide(i64 %conv139) #6
  %cmp141 = icmp eq i32 %call140, 0
  br i1 %cmp141, label %do.body, label %if.then143

if.then143:                                       ; preds = %if.then138
  %33 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call146 = call i32 @floor_log2_wide(i64 %conv139) #6
  %shl = shl i32 1, %call146
  %call147 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([12 x i8]* @.str58, i64 0, i64 0), i32 %shl) #6
  br label %do.body

do.body:                                          ; preds = %if.then138, %if.end135, %if.then143
  %34 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call150 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([8 x i8]* @.str76, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str100, i64 0, i64 0), i32 %labelno) #6
  %bf.load153 = load i32* %code, align 8
  %bf.clear154 = and i32 %bf.load153, 255
  %cmp155 = icmp eq i32 %bf.clear154, 29
  br i1 %cmp155, label %cond.true, label %cond.false170

cond.true:                                        ; preds = %do.body
  %35 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %36 = load i32* %35, align 4, !tbaa !28
  %conv157 = sext i32 %36 to i64
  %37 = load %union.tree_node** %type, align 8, !tbaa !27
  %call160 = call i64 @int_size_in_bytes(%union.tree_node* %37) #6
  %cmp161 = icmp sgt i64 %conv157, %call160
  br i1 %cmp161, label %cond.true163, label %cond.false

cond.true163:                                     ; preds = %cond.true
  %38 = load i32* %35, align 4, !tbaa !28
  %conv166 = sext i32 %38 to i64
  br label %cond.end174

cond.false:                                       ; preds = %cond.true
  %39 = load %union.tree_node** %type, align 8, !tbaa !27
  %call169 = call i64 @int_size_in_bytes(%union.tree_node* %39) #6
  br label %cond.end174

cond.false170:                                    ; preds = %do.body
  %40 = load %union.tree_node** %type, align 8, !tbaa !27
  %call173 = call i64 @int_size_in_bytes(%union.tree_node* %40) #6
  br label %cond.end174

cond.end174:                                      ; preds = %cond.true163, %cond.false, %cond.false170
  %cond175 = phi i64 [ %call173, %cond.false170 ], [ %conv166, %cond.true163 ], [ %call169, %cond.false ]
  call void @output_constant(%union.tree_node* %exp, i64 %cond175, i32 %call)
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #1

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @output_constant_def(%union.tree_node* %exp, i32 %defer) #0 {
entry:
  %label = alloca [256 x i8], align 16
  %0 = getelementptr inbounds [256 x i8]* %label, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %0) #6
  %code = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 25
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %rtl1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 1
  %1 = load i8** %rtl1, align 8
  %tobool = icmp eq i8* %1, null
  br i1 %tobool, label %if.end, label %land.lhs.true2

land.lhs.true2:                                   ; preds = %land.lhs.true
  %tobool3 = icmp eq i32 %defer, 0
  br i1 %tobool3, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true2
  %fld = getelementptr inbounds i8* %1, i64 8
  %rtx = bitcast i8* %fld to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %3 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 0
  %bf.load6 = load i32* %3, align 8
  %tobool7 = icmp slt i32 %bf.load6, 0
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true2, %lor.lhs.false
  %4 = bitcast i8* %1 to %struct.rtx_def*
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %entry, %lor.lhs.false
  %call = call fastcc i32 @output_addressed_constants(%union.tree_node* %exp)
  %call10 = call fastcc i32 @const_hash(%union.tree_node* %exp)
  %rem = srem i32 %call10, 1009
  %idxprom = sext i32 %rem to i64
  %arrayidx11 = getelementptr inbounds [1009 x %struct.constant_descriptor*]* @const_hash_table, i64 0, i64 %idxprom
  %desc.0320 = load %struct.constant_descriptor** %arrayidx11, align 8
  %cond321 = icmp eq %struct.constant_descriptor* %desc.0320, null
  br i1 %cond321, label %if.then18, label %for.body

for.cond:                                         ; preds = %for.body
  %next = getelementptr inbounds %struct.constant_descriptor* %desc.0322, i64 0, i32 0
  %desc.0 = load %struct.constant_descriptor** %next, align 8
  %cond = icmp eq %struct.constant_descriptor* %desc.0, null
  br i1 %cond, label %if.then18, label %for.body

for.body:                                         ; preds = %if.end, %for.cond
  %desc.0322 = phi %struct.constant_descriptor* [ %desc.0, %for.cond ], [ %desc.0320, %if.end ]
  %u.i = getelementptr inbounds %struct.constant_descriptor* %desc.0322, i64 0, i32 3
  %arraydecay.i = bitcast %union.anon.4* %u.i to i8*
  %call.i = call fastcc i8* @compare_constant_1(%union.tree_node* %exp, i8* %arraydecay.i) #6
  %cmp.i = icmp eq i8* %call.i, null
  br i1 %cmp.i, label %for.cond, label %if.else

if.then18:                                        ; preds = %for.cond, %if.end
  %5 = load i32* @const_labelno, align 4, !tbaa !23
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @const_labelno, align 4, !tbaa !23
  %call19 = call i32 (i8*, i8*, ...)* @sprintf(i8* %0, i8* getelementptr inbounds ([7 x i8]* @.str74, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str100, i64 0, i64 0), i32 %5) #6
  %6 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr.i = getelementptr inbounds i8* %6, i64 8
  %7 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp.i313 = icmp ugt i8* %add.ptr.i, %7
  br i1 %cmp.i313, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %if.then18
  call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then18
  %8 = phi i8* [ %.pre, %if.then.i ], [ %6, %if.then18 ]
  %9 = bitcast i8* %8 to i64*
  store i64 0, i64* %9, align 1
  %10 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr4.i = getelementptr inbounds i8* %10, i64 8
  store i8* %add.ptr4.i, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr9.i = getelementptr inbounds i8* %10, i64 16
  %11 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp11.i = icmp ugt i8* %add.ptr9.i, %11
  br i1 %cmp11.i, label %if.then13.i, label %if.end14.i

if.then13.i:                                      ; preds = %if.end.i
  call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre324 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end14.i

if.end14.i:                                       ; preds = %if.then13.i, %if.end.i
  %12 = phi i8* [ %.pre324, %if.then13.i ], [ %add.ptr4.i, %if.end.i ]
  %13 = bitcast i8* %12 to i64*
  store i64 0, i64* %13, align 1
  %14 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr19.i = getelementptr inbounds i8* %14, i64 8
  store i8* %add.ptr19.i, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr24.i = getelementptr inbounds i8* %14, i64 16
  %15 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp26.i = icmp ugt i8* %add.ptr24.i, %15
  br i1 %cmp26.i, label %if.then28.i, label %if.end29.i

if.then28.i:                                      ; preds = %if.end14.i
  call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre325 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end29.i

if.end29.i:                                       ; preds = %if.then28.i, %if.end14.i
  %16 = phi i8* [ %.pre325, %if.then28.i ], [ %add.ptr19.i, %if.end14.i ]
  %17 = bitcast i8* %16 to i64*
  store i64 0, i64* %17, align 1
  %18 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr34.i = getelementptr inbounds i8* %18, i64 8
  store i8* %add.ptr34.i, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %19 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %sub.ptr.lhs.cast.i = ptrtoint i8* %19 to i64
  %sub.ptr.rhs.cast.i = ptrtoint i8* %add.ptr34.i to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %cmp43.i = icmp slt i64 %sub.ptr.sub.i, 8
  br i1 %cmp43.i, label %if.then45.i, label %if.end46.i

if.then45.i:                                      ; preds = %if.end29.i
  call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre326 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end46.i

if.end46.i:                                       ; preds = %if.then45.i, %if.end29.i
  %20 = phi i8* [ %.pre326, %if.then45.i ], [ %add.ptr34.i, %if.end29.i ]
  %add.ptr49.i = getelementptr inbounds i8* %20, i64 8
  store i8* %add.ptr49.i, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  call fastcc void @record_constant_1(%union.tree_node* %exp) #6
  %21 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 2), align 8, !tbaa !92
  %22 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %cmp52.i = icmp eq i8* %22, %21
  br i1 %cmp52.i, label %if.then54.i, label %if.end55.i

if.then54.i:                                      ; preds = %if.end46.i
  %bf.load.i = load i8* getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 10), align 8
  %bf.set.i = or i8 %bf.load.i, 2
  store i8 %bf.set.i, i8* getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 10), align 8
  br label %if.end55.i

if.end55.i:                                       ; preds = %if.then54.i, %if.end46.i
  %sub.ptr.lhs.cast57.i = ptrtoint i8* %22 to i64
  %23 = load i32* getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 6), align 8, !tbaa !93
  %conv59.i = sext i32 %23 to i64
  %add.i = add nsw i64 %conv59.i, %sub.ptr.lhs.cast57.i
  %neg.i = xor i32 %23, -1
  %conv61.i = sext i32 %neg.i to i64
  %and.i = and i64 %add.i, %conv61.i
  %add.ptr62.i = getelementptr inbounds i8* null, i64 %and.i
  store i8* %add.ptr62.i, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %24 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 1), align 8, !tbaa !94
  %sub.ptr.lhs.cast65.i = ptrtoint i8* %add.ptr62.i to i64
  %sub.ptr.rhs.cast66.i = ptrtoint %struct._obstack_chunk* %24 to i64
  %sub.ptr.sub67.i = sub i64 %sub.ptr.lhs.cast65.i, %sub.ptr.rhs.cast66.i
  %25 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %sub.ptr.lhs.cast70.i = ptrtoint i8* %25 to i64
  %sub.ptr.sub72.i = sub i64 %sub.ptr.lhs.cast70.i, %sub.ptr.rhs.cast66.i
  %cmp73.i = icmp sgt i64 %sub.ptr.sub67.i, %sub.ptr.sub72.i
  br i1 %cmp73.i, label %if.then75.i, label %record_constant.exit

if.then75.i:                                      ; preds = %if.end55.i
  store i8* %25, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %record_constant.exit

record_constant.exit:                             ; preds = %if.end55.i, %if.then75.i
  %26 = phi i8* [ %add.ptr62.i, %if.end55.i ], [ %25, %if.then75.i ]
  store i8* %26, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 2), align 8, !tbaa !92
  %27 = bitcast i8* %21 to %struct.constant_descriptor*
  %28 = load %struct.constant_descriptor** %arrayidx11, align 8, !tbaa !4
  %next23 = bitcast i8* %21 to %struct.constant_descriptor**
  store %struct.constant_descriptor* %28, %struct.constant_descriptor** %next23, align 8, !tbaa !95
  %call25 = call i8* @ggc_alloc_string(i8* %0, i32 -1) #6
  %label26 = getelementptr inbounds i8* %21, i64 8
  %29 = bitcast i8* %label26 to i8**
  store i8* %call25, i8** %29, align 8, !tbaa !97
  store %struct.constant_descriptor* %27, %struct.constant_descriptor** %arrayidx11, align 8, !tbaa !4
  %type = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %30 = load %union.tree_node** %type, align 8, !tbaa !27
  %type30 = bitcast %union.tree_node* %30 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type30, i64 0, i32 6
  %bf.load31 = load i32* %mode, align 4
  %bf.lshr32 = lshr i32 %bf.load31, 9
  %bf.clear33 = and i32 %bf.lshr32, 127
  %31 = load i32* @target_flags, align 4, !tbaa !23
  %and = lshr i32 %31, 25
  %32 = and i32 %and, 1
  %33 = or i32 %32, 4
  %34 = load i8** %29, align 8, !tbaa !97
  %call36 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %33, i8* %34) #6
  %call37 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear33, %struct.rtx_def* %call36) #6
  %rtl38 = getelementptr inbounds i8* %21, i64 16
  %35 = bitcast i8* %rtl38 to %struct.rtx_def**
  store %struct.rtx_def* %call37, %struct.rtx_def** %35, align 8, !tbaa !98
  call void @set_mem_attributes(%struct.rtx_def* %call37, %union.tree_node* %exp, i32 1) #6
  call void @set_mem_alias_set(%struct.rtx_def* %call37, i64 0) #6
  %36 = load i64* @const_alias_set, align 8, !tbaa !81
  call void @set_mem_alias_set(%struct.rtx_def* %call37, i64 %36) #6
  br label %if.end40

if.else:                                          ; preds = %for.body
  %rtl39 = getelementptr inbounds %struct.constant_descriptor* %desc.0322, i64 0, i32 2
  %37 = load %struct.rtx_def** %rtl39, align 8, !tbaa !98
  br label %if.end40

if.end40:                                         ; preds = %if.else, %record_constant.exit
  %found.0 = phi i32 [ 0, %record_constant.exit ], [ 1, %if.else ]
  %labelno.0 = phi i32 [ %5, %record_constant.exit ], [ -1, %if.else ]
  %rtl.0 = phi %struct.rtx_def* [ %call37, %record_constant.exit ], [ %37, %if.else ]
  %desc.1 = phi %struct.constant_descriptor* [ %27, %record_constant.exit ], [ %desc.0322, %if.else ]
  %bf.load43 = load i32* %code, align 8
  %bf.clear44 = and i32 %bf.load43, 255
  %cmp45 = icmp eq i32 %bf.clear44, 25
  br i1 %cmp45, label %if.end49, label %if.then46

if.then46:                                        ; preds = %if.end40
  %rtl48 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 1
  %rtl.0.c = bitcast %struct.rtx_def* %rtl.0 to i8*
  store i8* %rtl.0.c, i8** %rtl48, align 8, !tbaa !99
  br label %if.end49

if.end49:                                         ; preds = %if.end40, %if.then46
  %tobool50 = icmp eq i32 %found.0, 0
  br i1 %tobool50, label %if.then51, label %land.lhs.true143

if.then51:                                        ; preds = %if.end49
  %cmp56 = icmp ne i32 %bf.clear44, 25
  %38 = load i32* @flag_pic, align 4
  %tobool59 = icmp ne i32 %38, 0
  %or.cond232 = and i1 %cmp56, %tobool59
  br i1 %or.cond232, label %if.then60, label %if.end132

if.then60:                                        ; preds = %if.then51
  %idxprom66310 = zext i32 %bf.clear44 to i64
  %arrayidx67 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom66310
  %39 = load i8* %arrayidx67, align 1, !tbaa !1
  %cmp68 = icmp eq i8 %39, 100
  br i1 %cmp68, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then60
  %rtl71 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 1
  %40 = load i8** %rtl71, align 8
  %41 = bitcast i8* %40 to %struct.rtx_def*
  br label %cond.end81

cond.false:                                       ; preds = %if.then60
  %rtl72 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 17
  %42 = load %struct.rtx_def** %rtl72, align 8, !tbaa !35
  %tobool73 = icmp eq %struct.rtx_def* %42, null
  br i1 %tobool73, label %cond.false77, label %cond.end81

cond.false77:                                     ; preds = %cond.false
  call void @make_decl_rtl(%union.tree_node* %exp, i8* null)
  %43 = load %struct.rtx_def** %rtl72, align 8, !tbaa !35
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false, %cond.false77, %cond.true
  %cond82 = phi %struct.rtx_def* [ %41, %cond.true ], [ %43, %cond.false77 ], [ %42, %cond.false ]
  %44 = getelementptr inbounds %struct.rtx_def* %cond82, i64 0, i32 0
  %bf.load83 = load i32* %44, align 8
  %bf.clear84 = and i32 %bf.load83, 65535
  %cmp85 = icmp eq i32 %bf.clear84, 66
  br i1 %cmp85, label %if.then87, label %if.end132

if.then87:                                        ; preds = %cond.end81
  %45 = load i8** @ix86_debug_addr_string, align 8, !tbaa !4
  %cmp88 = icmp eq i8* %45, null
  br i1 %cmp88, label %if.end107, label %land.lhs.true90

land.lhs.true90:                                  ; preds = %if.then87
  %bf.load93 = load i32* %code, align 8
  %bf.clear94 = and i32 %bf.load93, 255
  %idxprom95312 = zext i32 %bf.clear94 to i64
  %arrayidx96 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom95312
  %46 = load i8* %arrayidx96, align 1, !tbaa !1
  %cmp98 = icmp eq i8 %46, 100
  br i1 %cmp98, label %if.then100, label %if.end107

if.then100:                                       ; preds = %land.lhs.true90
  %47 = load %struct._IO_FILE** @stderr, align 8, !tbaa !4
  %name = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 8
  %48 = load %union.tree_node** %name, align 8, !tbaa !40
  %id = getelementptr inbounds %union.tree_node* %48, i64 0, i32 0, i32 1
  %49 = getelementptr inbounds i8** %id, i64 1
  %50 = load i8** %49, align 8, !tbaa !37
  %bf.lshr104 = lshr i32 %bf.load93, 19
  %bf.clear105 = and i32 %bf.lshr104, 1
  %call106 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([24 x i8]* @.str57, i64 0, i64 0), i8* %50, i32 %bf.clear105) #10
  br label %if.end107

if.end107:                                        ; preds = %if.then87, %if.then100, %land.lhs.true90
  %bf.load110 = load i32* %code, align 8
  %bf.clear111 = and i32 %bf.load110, 255
  %idxprom112311 = zext i32 %bf.clear111 to i64
  %arrayidx113 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom112311
  %51 = load i8* %arrayidx113, align 1, !tbaa !1
  %cmp115 = icmp eq i8 %51, 100
  br i1 %cmp115, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end107
  %bf.clear121 = and i32 %bf.load110, 524288
  %lnot = icmp eq i32 %bf.clear121, 0
  br label %lor.end

lor.end:                                          ; preds = %if.end107, %lor.rhs
  %52 = phi i1 [ true, %if.end107 ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %52 to i32
  %arrayidx124 = getelementptr inbounds %struct.rtx_def* %cond82, i64 0, i32 1, i64 0
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %53 = load %struct.rtx_def** %rtx125, align 8, !tbaa !4
  %54 = getelementptr inbounds %struct.rtx_def* %53, i64 0, i32 0
  %bf.load126 = load i32* %54, align 8
  %bf.shl = shl nuw nsw i32 %lor.ext, 27
  %bf.clear127 = and i32 %bf.load126, -134217729
  %bf.set = or i32 %bf.clear127, %bf.shl
  store i32 %bf.set, i32* %54, align 8
  br label %if.end132

if.end132:                                        ; preds = %lor.end, %cond.end81, %if.then51
  %rtl133 = getelementptr inbounds %struct.constant_descriptor* %desc.1, i64 0, i32 2
  store %struct.rtx_def* %rtl.0, %struct.rtx_def** %rtl133, align 8, !tbaa !98
  %arrayidx136 = getelementptr inbounds %struct.rtx_def* %rtl.0, i64 0, i32 1, i64 0
  %rtx137 = bitcast %union.rtunion_def* %arrayidx136 to %struct.rtx_def**
  %55 = load %struct.rtx_def** %rtx137, align 8, !tbaa !4
  %arrayidx139 = getelementptr inbounds %struct.rtx_def* %55, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx139 to i8**
  %56 = load i8** %rtstr, align 8, !tbaa !4
  %label140 = getelementptr inbounds %struct.constant_descriptor* %desc.1, i64 0, i32 1
  store i8* %56, i8** %label140, align 8, !tbaa !97
  br label %if.then172

land.lhs.true143:                                 ; preds = %if.end49
  %arrayidx145.pre = getelementptr inbounds %struct.rtx_def* %rtl.0, i64 0, i32 1, i64 0
  %rtx146.pre = bitcast %union.rtunion_def* %arrayidx145.pre to %struct.rtx_def**
  %57 = load %struct.rtx_def** %rtx146.pre, align 8, !tbaa !4
  %58 = getelementptr inbounds %struct.rtx_def* %57, i64 0, i32 0
  %bf.load147 = load i32* %58, align 8
  %tobool149 = icmp slt i32 %bf.load147, 0
  br i1 %tobool149, label %land.lhs.true150, label %if.end170

land.lhs.true150:                                 ; preds = %land.lhs.true143
  %tobool151 = icmp eq i32 %defer, 0
  %59 = load i32* @defer_addressed_constants_flag, align 4
  %tobool153 = icmp ne i32 %59, 0
  %or.cond = or i1 %tobool151, %tobool153
  br i1 %or.cond, label %if.then156, label %if.end170

if.then156:                                       ; preds = %land.lhs.true150
  %60 = load %struct.htab** @const_str_htab, align 8, !tbaa !4
  %label157 = getelementptr inbounds %struct.constant_descriptor* %desc.1, i64 0, i32 1
  %61 = load i8** %label157, align 8, !tbaa !97
  %62 = ptrtoint i8* %61 to i64
  %shr309 = lshr i64 %62, 3
  %conv159 = trunc i64 %shr309 to i32
  %call160 = call i8** @htab_find_slot_with_hash(%struct.htab* %60, i8* %61, i32 %conv159, i32 0) #6
  %tobool161 = icmp eq i8** %call160, null
  br i1 %tobool161, label %if.end170, label %if.then162

if.then162:                                       ; preds = %if.then156
  %63 = load i8** %call160, align 8
  %labelno163 = getelementptr inbounds i8* %63, i64 16
  %64 = bitcast i8* %labelno163 to i32*
  %65 = load i32* %64, align 4, !tbaa !102
  %66 = load %struct.rtx_def** %rtx146.pre, align 8, !tbaa !4
  %67 = getelementptr inbounds %struct.rtx_def* %66, i64 0, i32 0
  %bf.load167 = load i32* %67, align 8
  %bf.clear168 = and i32 %bf.load167, 2147483647
  store i32 %bf.clear168, i32* %67, align 8
  %68 = load %struct.htab** @const_str_htab, align 8, !tbaa !4
  call void @htab_clear_slot(%struct.htab* %68, i8** %call160) #6
  br label %if.then172

if.end170:                                        ; preds = %if.then156, %land.lhs.true150, %land.lhs.true143
  %tobool171 = icmp eq i32 %found.0, 0
  br i1 %tobool171, label %if.then172, label %cleanup

if.then172:                                       ; preds = %if.end132, %if.then162, %if.end170
  %labelno.1318 = phi i32 [ %labelno.0, %if.end170 ], [ %65, %if.then162 ], [ %labelno.0, %if.end132 ]
  %69 = load i32* @defer_addressed_constants_flag, align 4, !tbaa !23
  %tobool173 = icmp eq i32 %69, 0
  br i1 %tobool173, label %if.else188, label %if.then176

if.then176:                                       ; preds = %if.then172
  %call177 = call noalias i8* @xmalloc(i64 24) #6
  %call178 = call fastcc %union.tree_node* @copy_constant(%union.tree_node* %exp)
  %exp179 = getelementptr inbounds i8* %call177, i64 8
  %70 = bitcast i8* %exp179 to %union.tree_node**
  store %union.tree_node* %call178, %union.tree_node** %70, align 8, !tbaa !84
  %reloc180 = getelementptr inbounds i8* %call177, i64 16
  %71 = bitcast i8* %reloc180 to i32*
  store i32 %call, i32* %71, align 4, !tbaa !86
  %labelno181 = getelementptr inbounds i8* %call177, i64 20
  %72 = bitcast i8* %labelno181 to i32*
  store i32 %labelno.1318, i32* %72, align 4, !tbaa !87
  %73 = bitcast i8* %call177 to %struct.deferred_constant*
  %74 = load %struct.deferred_constant** @deferred_constants, align 8, !tbaa !4
  %next186 = bitcast i8* %call177 to %struct.deferred_constant**
  store %struct.deferred_constant* %74, %struct.deferred_constant** %next186, align 8, !tbaa !88
  store %struct.deferred_constant* %73, %struct.deferred_constant** @deferred_constants, align 8, !tbaa !4
  br label %cleanup

if.else188:                                       ; preds = %if.then172
  %75 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool189 = icmp eq i32 %75, 0
  br i1 %tobool189, label %if.then190, label %cleanup

if.then190:                                       ; preds = %if.else188
  %bf.load193 = load i32* %code, align 8
  %bf.clear194 = and i32 %bf.load193, 255
  %notlhs = icmp ne i32 %bf.clear194, 29
  %notrhs = icmp eq i32 %defer, 0
  %or.cond230.not = or i1 %notrhs, %notlhs
  %76 = load i32* @flag_writable_strings, align 4
  %tobool200 = icmp ne i32 %76, 0
  %or.cond231 = or i1 %or.cond230.not, %tobool200
  br i1 %or.cond231, label %if.then209, label %lor.lhs.false201

lor.lhs.false201:                                 ; preds = %if.then190
  %77 = load %struct.htab** @const_str_htab, align 8, !tbaa !4
  %label202 = getelementptr inbounds %struct.constant_descriptor* %desc.1, i64 0, i32 1
  %78 = load i8** %label202, align 8, !tbaa !97
  %79 = ptrtoint i8* %78 to i64
  %shr204308 = lshr i64 %79, 3
  %conv205 = trunc i64 %shr204308 to i32
  %call206 = call i8** @htab_find_slot_with_hash(%struct.htab* %77, i8* %78, i32 %conv205, i32 1) #6
  %cmp207 = icmp eq i8** %call206, null
  br i1 %cmp207, label %if.then209, label %if.else210

if.then209:                                       ; preds = %if.then190, %lor.lhs.false201
  call fastcc void @output_constant_def_contents(%union.tree_node* %exp, i32 %call, i32 %labelno.1318)
  br label %cleanup

if.else210:                                       ; preds = %lor.lhs.false201
  %call212 = call noalias i8* @xmalloc(i64 24) #6
  %call213 = call fastcc %union.tree_node* @copy_constant(%union.tree_node* %exp)
  %exp214 = getelementptr inbounds i8* %call212, i64 8
  %80 = bitcast i8* %exp214 to %union.tree_node**
  store %union.tree_node* %call213, %union.tree_node** %80, align 8, !tbaa !104
  %81 = load i8** %label202, align 8, !tbaa !97
  %label216 = bitcast i8* %call212 to i8**
  store i8* %81, i8** %label216, align 8, !tbaa !105
  %labelno217 = getelementptr inbounds i8* %call212, i64 16
  %82 = bitcast i8* %labelno217 to i32*
  store i32 %labelno.1318, i32* %82, align 4, !tbaa !102
  store i8* %call212, i8** %call206, align 8, !tbaa !4
  %arrayidx219 = getelementptr inbounds %struct.rtx_def* %rtl.0, i64 0, i32 1, i64 0
  %rtx220 = bitcast %union.rtunion_def* %arrayidx219 to %struct.rtx_def**
  %83 = load %struct.rtx_def** %rtx220, align 8, !tbaa !4
  %84 = getelementptr inbounds %struct.rtx_def* %83, i64 0, i32 0
  %bf.load221 = load i32* %84, align 8
  %bf.set223 = or i32 %bf.load221, -2147483648
  store i32 %bf.set223, i32* %84, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.else210, %if.then209, %if.then176, %if.end170, %if.else188, %if.then
  %retval.0 = phi %struct.rtx_def* [ %4, %if.then ], [ %rtl.0, %if.else188 ], [ %rtl.0, %if.end170 ], [ %rtl.0, %if.then176 ], [ %rtl.0, %if.then209 ], [ %rtl.0, %if.else210 ]
  call void @llvm.lifetime.end(i64 256, i8* %0) #6
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @const_hash(%union.tree_node* %exp) #0 {
entry:
  %value55 = alloca %struct.addr_const, align 8
  %code1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 25, label %sw.bb
    i32 26, label %sw.bb3
    i32 29, label %sw.bb5
    i32 27, label %sw.bb7
    i32 46, label %sw.bb10
    i32 121, label %sw.bb53
    i32 124, label %sw.bb53
    i32 59, label %sw.bb99
    i32 60, label %sw.bb99
    i32 115, label %sw.bb110
    i32 114, label %sw.bb110
    i32 116, label %sw.bb110
  ]

sw.bb:                                            ; preds = %entry
  %int_cst2 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %0 = bitcast i32* %int_cst2 to i8*
  br label %for.body121.lr.ph

sw.bb3:                                           ; preds = %entry
  %real_cst4 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %1 = bitcast i32* %real_cst4 to i8*
  br label %for.body121.lr.ph

sw.bb5:                                           ; preds = %entry
  %pointer = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 4
  %2 = load %union.tree_node** %pointer, align 8
  %3 = bitcast %union.tree_node* %2 to i8*
  %4 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %5 = load i32* %4, align 4, !tbaa !28
  br label %sw.epilog

sw.bb7:                                           ; preds = %entry
  %real = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %6 = bitcast i32* %real to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !72
  %call = call fastcc i32 @const_hash(%union.tree_node* %7)
  %mul = mul nsw i32 %call, 5
  %8 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 4
  %9 = load %union.tree_node** %8, align 8, !tbaa !74
  %call9 = call fastcc i32 @const_hash(%union.tree_node* %9)
  %add = add nsw i32 %call9, %mul
  br label %return

sw.bb10:                                          ; preds = %entry
  %type = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %10 = load %union.tree_node** %type, align 8, !tbaa !27
  %code13 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 2
  %bf.load14 = load i32* %code13, align 8
  %bf.clear15 = and i32 %bf.load14, 255
  switch i32 %bf.clear15, label %if.else34 [
    i32 19, label %if.then
    i32 20, label %if.then30
  ]

if.then:                                          ; preds = %sw.bb10
  %call18 = call i64 @int_size_in_bytes(%union.tree_node* %10) #6
  %conv = trunc i64 %call18 to i32
  %sext = shl i64 %call18, 32
  %conv19 = ashr exact i64 %sext, 32
  %11 = alloca i8, i64 %conv19, align 1
  %call20 = call %union.tree_node* @get_set_constructor_bytes(%union.tree_node* %exp, i8* %11, i32 %conv) #6
  br label %sw.epilog

if.then30:                                        ; preds = %sw.bb10
  %12 = ptrtoint %union.tree_node* %10 to i64
  br label %if.end

if.else34:                                        ; preds = %sw.bb10
  %call37 = call i64 @int_size_in_bytes(%union.tree_node* %10) #6
  %add38 = add nsw i64 %call37, 5
  br label %if.end

if.end:                                           ; preds = %if.else34, %if.then30
  %hi.0.in.in.in = phi i64 [ %12, %if.then30 ], [ %add38, %if.else34 ]
  %hi.0.in.in = and i64 %hi.0.in.in.in, 1073741823
  %hi.0.in = urem i64 %hi.0.in.in, 1009
  %hi.0 = trunc i64 %hi.0.in to i32
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %13 = bitcast i32* %arrayidx to %union.tree_node**
  %link.0174 = load %union.tree_node** %13, align 8
  %tobool175 = icmp eq %union.tree_node* %link.0174, null
  br i1 %tobool175, label %return, label %for.body

for.body:                                         ; preds = %if.end, %for.inc
  %link.0177 = phi %union.tree_node* [ %link.0, %for.inc ], [ %link.0174, %if.end ]
  %hi.1176 = phi i32 [ %hi.2, %for.inc ], [ %hi.0, %if.end ]
  %value = getelementptr inbounds %union.tree_node* %link.0177, i64 0, i32 0, i32 2
  %14 = bitcast i32* %value to %union.tree_node**
  %15 = load %union.tree_node** %14, align 8, !tbaa !60
  %tobool43 = icmp eq %union.tree_node* %15, null
  br i1 %tobool43, label %for.inc, label %if.then44

if.then44:                                        ; preds = %for.body
  %mul45 = mul nsw i32 %hi.1176, 603
  %call48 = call fastcc i32 @const_hash(%union.tree_node* %15)
  %add49 = add nsw i32 %call48, %mul45
  %rem50 = srem i32 %add49, 1009
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then44
  %hi.2 = phi i32 [ %rem50, %if.then44 ], [ %hi.1176, %for.body ]
  %chain = getelementptr inbounds %union.tree_node* %link.0177, i64 0, i32 0, i32 0, i32 0
  %link.0 = load %union.tree_node** %chain, align 8
  %tobool = icmp eq %union.tree_node* %link.0, null
  br i1 %tobool, label %return, label %for.body

sw.bb53:                                          ; preds = %entry, %entry
  call fastcc void @decode_addr_const(%union.tree_node* %exp, %struct.addr_const* %value55)
  %base = getelementptr inbounds %struct.addr_const* %value55, i64 0, i32 0
  %16 = load %struct.rtx_def** %base, align 8, !tbaa !106
  %17 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 0
  %bf.load56 = load i32* %17, align 8
  %bf.clear57 = and i32 %bf.load56, 65535
  switch i32 %bf.clear57, label %if.else94 [
    i32 68, label %if.then60
    i32 67, label %if.then83
  ]

if.then60:                                        ; preds = %sw.bb53
  %offset = getelementptr inbounds %struct.addr_const* %value55, i64 0, i32 1
  %18 = load i64* %offset, align 8, !tbaa !108
  %conv61 = trunc i64 %18 to i32
  %arrayidx63 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx63 to i8**
  %19 = load i8** %rtstr, align 8, !tbaa !4
  %20 = load i8* %19, align 1, !tbaa !1
  %cmp67179 = icmp eq i8 %20, 0
  br i1 %cmp67179, label %if.end96, label %for.body69

for.body69:                                       ; preds = %if.then60, %for.body69
  %indvars.iv183 = phi i64 [ %indvars.iv.next184, %for.body69 ], [ 0, %if.then60 ]
  %21 = phi i8 [ %22, %for.body69 ], [ %20, %if.then60 ]
  %hi.3180 = phi i32 [ %add74, %for.body69 ], [ %conv61, %if.then60 ]
  %conv66 = sext i8 %21 to i32
  %mul70 = mul nsw i32 %hi.3180, 613
  %add74 = add i32 %conv66, %mul70
  %indvars.iv.next184 = add nuw nsw i64 %indvars.iv183, 1
  %arrayidx65 = getelementptr inbounds i8* %19, i64 %indvars.iv.next184
  %22 = load i8* %arrayidx65, align 1, !tbaa !1
  %cmp67 = icmp eq i8 %22, 0
  br i1 %cmp67, label %if.end96, label %for.body69

if.then83:                                        ; preds = %sw.bb53
  %offset84 = getelementptr inbounds %struct.addr_const* %value55, i64 0, i32 1
  %23 = load i64* %offset84, align 8, !tbaa !108
  %arrayidx87 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**
  %24 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %arrayidx89 = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 1, i64 5
  %rtint = bitcast %union.rtunion_def* %arrayidx89 to i32*
  %25 = load i32* %rtint, align 4, !tbaa !23
  %mul90 = mul nsw i32 %25, 13
  %conv91170 = zext i32 %mul90 to i64
  %add92 = add nsw i64 %conv91170, %23
  %conv93 = trunc i64 %add92 to i32
  br label %if.end96

if.else94:                                        ; preds = %sw.bb53
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2581, i8* getelementptr inbounds ([11 x i8]* @__FUNCTION__.const_hash, i64 0, i64 0)) #9
  unreachable

if.end96:                                         ; preds = %for.body69, %if.then60, %if.then83
  %hi.4 = phi i32 [ %conv93, %if.then83 ], [ %conv61, %if.then60 ], [ %add74, %for.body69 ]
  %and97 = and i32 %hi.4, 1073741823
  %rem98 = urem i32 %and97, 1009
  br label %return

sw.bb99:                                          ; preds = %entry, %entry
  %operands101 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx102 = bitcast i32* %operands101 to %union.tree_node**
  %26 = load %union.tree_node** %arrayidx102, align 8, !tbaa !4
  %call103 = call fastcc i32 @const_hash(%union.tree_node* %26)
  %mul104 = mul nsw i32 %call103, 9
  %arrayidx107 = getelementptr inbounds i32* %operands101, i64 2
  %27 = bitcast i32* %arrayidx107 to %union.tree_node**
  %28 = load %union.tree_node** %27, align 8, !tbaa !4
  %call108 = call fastcc i32 @const_hash(%union.tree_node* %28)
  %add109 = add nsw i32 %call108, %mul104
  br label %return

sw.bb110:                                         ; preds = %entry, %entry, %entry
  %operands112 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx113 = bitcast i32* %operands112 to %union.tree_node**
  %29 = load %union.tree_node** %arrayidx113, align 8, !tbaa !4
  %call114 = call fastcc i32 @const_hash(%union.tree_node* %29)
  %mul115 = mul nsw i32 %call114, 7
  %add116 = add nsw i32 %mul115, 2
  br label %return

sw.default:                                       ; preds = %entry
  %rem117 = urem i32 %bf.clear, 1009
  br label %return

sw.epilog:                                        ; preds = %if.then, %sw.bb5
  %len.0 = phi i32 [ %conv, %if.then ], [ %5, %sw.bb5 ]
  %p.0 = phi i8* [ %11, %if.then ], [ %3, %sw.bb5 ]
  %cmp119171 = icmp sgt i32 %len.0, 0
  br i1 %cmp119171, label %for.body121.lr.ph, label %for.end129

for.body121.lr.ph:                                ; preds = %sw.bb, %sw.bb3, %sw.epilog
  %p.0187 = phi i8* [ %p.0, %sw.epilog ], [ %1, %sw.bb3 ], [ %0, %sw.bb ]
  %len.0186 = phi i32 [ %len.0, %sw.epilog ], [ 24, %sw.bb3 ], [ 16, %sw.bb ]
  br label %for.body121

for.body121:                                      ; preds = %for.body121, %for.body121.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body121.lr.ph ], [ %indvars.iv.next, %for.body121 ]
  %hi.5172 = phi i32 [ %len.0186, %for.body121.lr.ph ], [ %add126, %for.body121 ]
  %mul122 = mul nsw i32 %hi.5172, 613
  %arrayidx124 = getelementptr inbounds i8* %p.0187, i64 %indvars.iv
  %30 = load i8* %arrayidx124, align 1, !tbaa !1
  %conv125 = sext i8 %30 to i32
  %add126 = add i32 %conv125, %mul122
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %len.0186
  br i1 %exitcond, label %for.end129, label %for.body121

for.end129:                                       ; preds = %for.body121, %sw.epilog
  %hi.5.lcssa = phi i32 [ %len.0, %sw.epilog ], [ %add126, %for.body121 ]
  %and130 = and i32 %hi.5.lcssa, 1073741823
  %rem131 = urem i32 %and130, 1009
  br label %return

return:                                           ; preds = %for.inc, %if.end, %for.end129, %sw.default, %sw.bb110, %sw.bb99, %if.end96, %sw.bb7
  %retval.0 = phi i32 [ %rem117, %sw.default ], [ %add116, %sw.bb110 ], [ %add109, %sw.bb99 ], [ %rem98, %if.end96 ], [ %rem131, %for.end129 ], [ %add, %sw.bb7 ], [ %hi.0, %if.end ], [ %hi.2, %for.inc ]
  ret i32 %retval.0
}

declare void @set_mem_alias_set(%struct.rtx_def*, i64) #3

declare void @htab_clear_slot(%struct.htab*, i8**) #3

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @copy_constant(%union.tree_node* %exp) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 121, label %sw.bb
    i32 25, label %sw.bb18
    i32 26, label %sw.bb18
    i32 29, label %sw.bb18
    i32 27, label %sw.bb20
    i32 59, label %sw.bb27
    i32 60, label %sw.bb27
    i32 115, label %sw.bb43
    i32 114, label %sw.bb43
    i32 116, label %sw.bb43
    i32 46, label %sw.bb55
  ]

sw.bb:                                            ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %0 = load %union.tree_node** %arrayidx, align 8, !tbaa !4
  %code3 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load4 = load i32* %code3, align 8
  %bf.clear5 = and i32 %bf.load4, 255
  %idxprom117 = zext i32 %bf.clear5 to i64
  %arrayidx6 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom117
  %1 = load i8* %arrayidx6, align 1, !tbaa !1
  %cmp = icmp eq i8 %1, 99
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb
  %type = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !27
  %call = tail call fastcc %union.tree_node* @copy_constant(%union.tree_node* %0)
  %call16 = tail call %union.tree_node* @build1(i32 121, %union.tree_node* %2, %union.tree_node* %call) #6
  ret %union.tree_node* %call16

if.else:                                          ; preds = %sw.bb
  %call17 = tail call %union.tree_node* @copy_node(%union.tree_node* %exp) #6
  br label %return

sw.bb18:                                          ; preds = %entry, %entry, %entry
  %call19 = tail call %union.tree_node* @copy_node(%union.tree_node* %exp) #6
  br label %return

sw.bb20:                                          ; preds = %entry
  %type22 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type22, align 8, !tbaa !27
  %real = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %4 = bitcast i32* %real to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !72
  %call23 = tail call fastcc %union.tree_node* @copy_constant(%union.tree_node* %5)
  %6 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 4
  %7 = load %union.tree_node** %6, align 8, !tbaa !74
  %call25 = tail call fastcc %union.tree_node* @copy_constant(%union.tree_node* %7)
  %call26 = tail call %union.tree_node* @build_complex(%union.tree_node* %3, %union.tree_node* %call23, %union.tree_node* %call25) #6
  ret %union.tree_node* %call26

sw.bb27:                                          ; preds = %entry, %entry
  %type33 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %8 = load %union.tree_node** %type33, align 8, !tbaa !27
  %operands35 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx36 = bitcast i32* %operands35 to %union.tree_node**
  %9 = load %union.tree_node** %arrayidx36, align 8, !tbaa !4
  %call37 = tail call fastcc %union.tree_node* @copy_constant(%union.tree_node* %9)
  %arrayidx40 = getelementptr inbounds i32* %operands35, i64 2
  %10 = bitcast i32* %arrayidx40 to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !4
  %call41 = tail call fastcc %union.tree_node* @copy_constant(%union.tree_node* %11)
  %call42 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %bf.clear, %union.tree_node* %8, %union.tree_node* %call37, %union.tree_node* %call41) #6
  ret %union.tree_node* %call42

sw.bb43:                                          ; preds = %entry, %entry, %entry
  %type49 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %12 = load %union.tree_node** %type49, align 8, !tbaa !27
  %operands51 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx52 = bitcast i32* %operands51 to %union.tree_node**
  %13 = load %union.tree_node** %arrayidx52, align 8, !tbaa !4
  %call53 = tail call fastcc %union.tree_node* @copy_constant(%union.tree_node* %13)
  %call54 = tail call %union.tree_node* @build1(i32 %bf.clear, %union.tree_node* %12, %union.tree_node* %call53) #6
  ret %union.tree_node* %call54

sw.bb55:                                          ; preds = %entry
  %call56 = tail call %union.tree_node* @copy_node(%union.tree_node* %exp) #6
  %operands58 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx59 = getelementptr inbounds i32* %operands58, i64 2
  %14 = bitcast i32* %arrayidx59 to %union.tree_node**
  %15 = load %union.tree_node** %14, align 8, !tbaa !4
  %call60 = tail call %union.tree_node* @copy_list(%union.tree_node* %15) #6
  %operands62 = getelementptr inbounds %union.tree_node* %call56, i64 0, i32 0, i32 2
  %arrayidx63 = getelementptr inbounds i32* %operands62, i64 2
  %16 = bitcast i32* %arrayidx63 to %union.tree_node**
  store %union.tree_node* %call60, %union.tree_node** %16, align 8, !tbaa !4
  %tobool120 = icmp eq %union.tree_node* %call60, null
  br i1 %tobool120, label %for.end, label %for.body

for.body:                                         ; preds = %sw.bb55, %for.body
  %tail.0121 = phi %union.tree_node* [ %19, %for.body ], [ %call60, %sw.bb55 ]
  %value = getelementptr inbounds %union.tree_node* %tail.0121, i64 0, i32 0, i32 2
  %17 = bitcast i32* %value to %union.tree_node**
  %18 = load %union.tree_node** %17, align 8, !tbaa !60
  %call65 = tail call fastcc %union.tree_node* @copy_constant(%union.tree_node* %18)
  store %union.tree_node* %call65, %union.tree_node** %17, align 8, !tbaa !60
  %chain = getelementptr inbounds %union.tree_node* %tail.0121, i64 0, i32 0, i32 0, i32 0
  %19 = load %union.tree_node** %chain, align 8, !tbaa !62
  %tobool = icmp eq %union.tree_node* %19, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %sw.bb55
  %type70 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type70, align 8, !tbaa !27
  %code72 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 2
  %bf.load73 = load i32* %code72, align 8
  %bf.clear74 = and i32 %bf.load73, 255
  %cmp75.not = icmp ne i32 %bf.clear74, 19
  %brmerge = or i1 %cmp75.not, %tobool120
  br i1 %brmerge, label %return, label %for.body80

for.body80:                                       ; preds = %for.end, %for.body80
  %tail.1119 = phi %union.tree_node* [ %23, %for.body80 ], [ %call60, %for.end ]
  %purpose = getelementptr inbounds %union.tree_node* %tail.1119, i64 0, i32 0, i32 1
  %21 = load i8** %purpose, align 8
  %22 = bitcast i8* %21 to %union.tree_node*
  %call82 = tail call fastcc %union.tree_node* @copy_constant(%union.tree_node* %22)
  %call82.c = bitcast %union.tree_node* %call82 to i8*
  store i8* %call82.c, i8** %purpose, align 8, !tbaa !109
  %chain87 = getelementptr inbounds %union.tree_node* %tail.1119, i64 0, i32 0, i32 0, i32 0
  %23 = load %union.tree_node** %chain87, align 8, !tbaa !62
  %tobool79 = icmp eq %union.tree_node* %23, null
  br i1 %tobool79, label %return, label %for.body80

sw.default:                                       ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3193, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.copy_constant, i64 0, i64 0)) #9
  unreachable

return:                                           ; preds = %for.body80, %for.end, %sw.bb18, %if.else
  %retval.0 = phi %union.tree_node* [ %call19, %sw.bb18 ], [ %call17, %if.else ], [ %call56, %for.end ], [ %call56, %for.body80 ]
  ret %union.tree_node* %retval.0
}

; Function Attrs: nounwind uwtable
define void @init_varasm_status(%struct.function* nocapture %f) #0 {
entry:
  %call = tail call noalias i8* @xmalloc(i64 48) #6
  %0 = bitcast i8* %call to %struct.varasm_status*
  %varasm = getelementptr inbounds %struct.function* %f, i64 0, i32 4
  store %struct.varasm_status* %0, %struct.varasm_status** %varasm, align 8, !tbaa !46
  %call1 = tail call noalias i8* @xcalloc(i64 61, i64 8) #6
  %1 = bitcast i8* %call1 to %struct.constant_descriptor**
  %x_const_rtx_hash_table = bitcast i8* %call to %struct.constant_descriptor***
  store %struct.constant_descriptor** %1, %struct.constant_descriptor*** %x_const_rtx_hash_table, align 8, !tbaa !110
  %call2 = tail call noalias i8* @xcalloc(i64 61, i64 8) #6
  %2 = bitcast i8* %call2 to %struct.pool_constant**
  %x_const_rtx_sym_hash_table = getelementptr inbounds i8* %call, i64 8
  %3 = bitcast i8* %x_const_rtx_sym_hash_table to %struct.pool_constant***
  store %struct.pool_constant** %2, %struct.pool_constant*** %3, align 8, !tbaa !111
  %x_first_pool = getelementptr inbounds i8* %call, i64 16
  call void @llvm.memset.p0i8.i64(i8* %x_first_pool, i8 0, i64 32, i32 8, i1 false)
  ret void
}

declare noalias i8* @xcalloc(i64, i64) #3

; Function Attrs: nounwind uwtable
define void @mark_varasm_status(%struct.varasm_status* readonly %p) #0 {
entry:
  %cmp = icmp eq %struct.varasm_status* %p, null
  br i1 %cmp, label %do.end, label %if.end

if.end:                                           ; preds = %entry
  %x_first_pool = getelementptr inbounds %struct.varasm_status* %p, i64 0, i32 2
  %0 = load %struct.pool_constant** %x_first_pool, align 8, !tbaa !49
  %tobool26.i = icmp eq %struct.pool_constant* %0, null
  br i1 %tobool26.i, label %mark_pool_constant.exit, label %if.then.i

if.then.i:                                        ; preds = %if.end, %do.end16.i
  %pc.addr.027.i = phi %struct.pool_constant* [ %7, %do.end16.i ], [ %0, %if.end ]
  %1 = bitcast %struct.pool_constant* %pc.addr.027.i to i8*
  %call.i = tail call i32 @ggc_set_mark(i8* %1) #6
  %constant.i = getelementptr inbounds %struct.pool_constant* %pc.addr.027.i, i64 0, i32 3
  %2 = load %struct.rtx_def** %constant.i, align 8, !tbaa !53
  %cmp2.i = icmp eq %struct.rtx_def* %2, null
  br i1 %cmp2.i, label %do.body8.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.then.i
  %3 = bitcast %struct.rtx_def* %2 to i8*
  %call3.i = tail call i32 @ggc_set_mark(i8* %3) #6
  %tobool4.i = icmp eq i32 %call3.i, 0
  br i1 %tobool4.i, label %if.then5.i, label %do.body8.i

if.then5.i:                                       ; preds = %land.lhs.true.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %2) #6
  br label %do.body8.i

do.body8.i:                                       ; preds = %if.then5.i, %land.lhs.true.i, %if.then.i
  %desc.i = getelementptr inbounds %struct.pool_constant* %pc.addr.027.i, i64 0, i32 0
  %4 = load %struct.constant_descriptor** %desc.i, align 8, !tbaa !112
  %rtl.i = getelementptr inbounds %struct.constant_descriptor* %4, i64 0, i32 2
  %5 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !98
  %cmp10.i = icmp eq %struct.rtx_def* %5, null
  br i1 %cmp10.i, label %do.end16.i, label %land.lhs.true11.i

land.lhs.true11.i:                                ; preds = %do.body8.i
  %6 = bitcast %struct.rtx_def* %5 to i8*
  %call12.i = tail call i32 @ggc_set_mark(i8* %6) #6
  %tobool13.i = icmp eq i32 %call12.i, 0
  br i1 %tobool13.i, label %if.then14.i, label %do.end16.i

if.then14.i:                                      ; preds = %land.lhs.true11.i
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %5) #6
  br label %do.end16.i

do.end16.i:                                       ; preds = %if.then14.i, %land.lhs.true11.i, %do.body8.i
  %next.i = getelementptr inbounds %struct.pool_constant* %pc.addr.027.i, i64 0, i32 1
  %7 = load %struct.pool_constant** %next.i, align 8, !tbaa !113
  %tobool.i = icmp eq %struct.pool_constant* %7, null
  br i1 %tobool.i, label %mark_pool_constant.exit, label %if.then.i

mark_pool_constant.exit:                          ; preds = %do.end16.i, %if.end
  %x_const_double_chain = getelementptr inbounds %struct.varasm_status* %p, i64 0, i32 5
  %8 = load %struct.rtx_def** %x_const_double_chain, align 8, !tbaa !82
  %cmp1 = icmp eq %struct.rtx_def* %8, null
  br i1 %cmp1, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %mark_pool_constant.exit
  %9 = bitcast %struct.rtx_def* %8 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %9) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.then2, label %do.end

if.then2:                                         ; preds = %land.lhs.true
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %8) #6
  br label %do.end

do.end:                                           ; preds = %land.lhs.true, %mark_pool_constant.exit, %if.then2, %entry
  ret void
}

declare i32 @ggc_set_mark(i8*) #3

declare void @ggc_mark_rtx_children(%struct.rtx_def*) #3

; Function Attrs: nounwind uwtable
define void @free_varasm_status(%struct.function* nocapture %f) #0 {
entry:
  %varasm = getelementptr inbounds %struct.function* %f, i64 0, i32 4
  %0 = load %struct.varasm_status** %varasm, align 8, !tbaa !46
  %x_const_rtx_hash_table = getelementptr inbounds %struct.varasm_status* %0, i64 0, i32 0
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.inc ]
  %1 = load %struct.constant_descriptor*** %x_const_rtx_hash_table, align 8, !tbaa !110
  %arrayidx = getelementptr inbounds %struct.constant_descriptor** %1, i64 %indvars.iv
  %2 = load %struct.constant_descriptor** %arrayidx, align 8, !tbaa !4
  %tobool12 = icmp eq %struct.constant_descriptor* %2, null
  br i1 %tobool12, label %for.inc, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %cd.013 = phi %struct.constant_descriptor* [ %3, %while.body ], [ %2, %for.body ]
  %next1 = getelementptr inbounds %struct.constant_descriptor* %cd.013, i64 0, i32 0
  %3 = load %struct.constant_descriptor** %next1, align 8, !tbaa !95
  %4 = bitcast %struct.constant_descriptor* %cd.013 to i8*
  tail call void @free(i8* %4)
  %tobool = icmp eq %struct.constant_descriptor* %3, null
  br i1 %tobool, label %for.inc, label %while.body

for.inc:                                          ; preds = %while.body, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 61
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  %5 = load %struct.constant_descriptor*** %x_const_rtx_hash_table, align 8, !tbaa !110
  %6 = bitcast %struct.constant_descriptor** %5 to i8*
  tail call void @free(i8* %6)
  %x_const_rtx_sym_hash_table = getelementptr inbounds %struct.varasm_status* %0, i64 0, i32 1
  %7 = load %struct.pool_constant*** %x_const_rtx_sym_hash_table, align 8, !tbaa !111
  %8 = bitcast %struct.pool_constant** %7 to i8*
  tail call void @free(i8* %8)
  %9 = bitcast %struct.varasm_status* %0 to i8*
  tail call void @free(i8* %9)
  store %struct.varasm_status* null, %struct.varasm_status** %varasm, align 8, !tbaa !46
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @simplify_subtraction(%struct.rtx_def* readonly %x) #0 {
entry:
  %val0 = alloca %struct.rtx_const, align 8
  %val1 = alloca %struct.rtx_const, align 8
  %0 = bitcast %struct.rtx_const* %val0 to i8*
  call void @llvm.lifetime.start(i64 136, i8* %0) #6
  %1 = bitcast %struct.rtx_const* %val1 to i8*
  call void @llvm.lifetime.start(i64 136, i8* %1) #6
  %2 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %fld = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  call fastcc void @decode_rtx_const(i32 %bf.clear, %struct.rtx_def* %3, %struct.rtx_const* %val0)
  %bf.load1 = load i32* %2, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx6, align 8, !tbaa !4
  call fastcc void @decode_rtx_const(i32 %bf.clear3, %struct.rtx_def* %4, %struct.rtx_const* %val1)
  %5 = getelementptr inbounds %struct.rtx_const* %val0, i64 0, i32 0
  %bf.load7 = load i32* %5, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp = icmp ugt i32 %bf.clear8, 1
  br i1 %cmp, label %land.lhs.true, label %cleanup

land.lhs.true:                                    ; preds = %entry
  %6 = getelementptr inbounds %struct.rtx_const* %val1, i64 0, i32 0
  %bf.load11 = load i32* %6, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear8, %bf.clear12
  br i1 %cmp13, label %land.lhs.true14, label %cleanup

land.lhs.true14:                                  ; preds = %land.lhs.true
  %un = getelementptr inbounds %struct.rtx_const* %val0, i64 0, i32 1
  %base = bitcast %union.anon.5* %un to %struct.rtx_def**
  %7 = load %struct.rtx_def** %base, align 8, !tbaa !106
  %un15 = getelementptr inbounds %struct.rtx_const* %val1, i64 0, i32 1
  %base17 = bitcast %union.anon.5* %un15 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %base17, align 8, !tbaa !106
  %cmp18 = icmp eq %struct.rtx_def* %7, %8
  br i1 %cmp18, label %if.then, label %cleanup

if.then:                                          ; preds = %land.lhs.true14
  %9 = getelementptr inbounds %struct.rtx_const* %val0, i64 0, i32 1, i32 0, i64 1
  %10 = load i64* %9, align 8, !tbaa !108
  %11 = getelementptr inbounds %struct.rtx_const* %val1, i64 0, i32 1, i32 0, i64 1
  %12 = load i64* %11, align 8, !tbaa !108
  %sub = sub nsw i64 %10, %12
  %call = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub) #6
  br label %cleanup

cleanup:                                          ; preds = %entry, %land.lhs.true, %land.lhs.true14, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call, %if.then ], [ %x, %land.lhs.true14 ], [ %x, %land.lhs.true ], [ %x, %entry ]
  call void @llvm.lifetime.end(i64 136, i8* %1) #6
  call void @llvm.lifetime.end(i64 136, i8* %0) #6
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @decode_rtx_const(i32 %mode, %struct.rtx_def* %x, %struct.rtx_const* nocapture %value) #0 {
entry:
  %0 = bitcast %struct.rtx_const* %value to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 136, i32 8, i1 false)
  %1 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 0
  %bf.shl = shl i32 %mode, 16
  %bf.set3 = or i32 %bf.shl, 2
  store i32 %bf.set3, i32* %1, align 8
  %2 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load4 = load i32* %2, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  switch i32 %bf.clear5, label %sw.default [
    i32 55, label %sw.bb
    i32 56, label %sw.bb28
    i32 54, label %sw.bb79
    i32 68, label %sw.bb84
    i32 67, label %sw.bb84
    i32 59, label %sw.bb84
    i32 58, label %sw.bb87
  ]

sw.bb:                                            ; preds = %entry
  %bf.set8 = or i32 %bf.shl, 1
  store i32 %bf.set8, i32* %1, align 8
  %bf.load9 = load i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load9, 16
  %bf.clear10 = and i32 %bf.lshr, 255
  %cmp = icmp eq i32 %bf.clear10, 0
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %sw.bb
  %bf.shl16 = shl nuw nsw i32 %bf.clear10, 16
  %bf.set18 = or i32 %bf.shl16, 1
  store i32 %bf.set18, i32* %1, align 8
  %un = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1
  %3 = bitcast %union.anon.5* %un to i8*
  %rtwint = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1, i32 0
  %4 = bitcast i64* %rtwint to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 24, i32 1, i1 false)
  br label %sw.epilog

if.else:                                          ; preds = %sw.bb
  %rtwint21 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1, i32 0
  %5 = load i64* %rtwint21, align 8, !tbaa !81
  %6 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 1
  store i64 %5, i64* %6, align 8, !tbaa !114
  %rtwint25 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 2, i32 0
  %7 = load i64* %rtwint25, align 8, !tbaa !81
  %high = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 0
  store i64 %7, i64* %high, align 8, !tbaa !116
  br label %sw.epilog

sw.bb28:                                          ; preds = %entry
  %arrayidx30 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtvec_def**
  %8 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !4
  %num_elem = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 0
  %9 = load i32* %num_elem, align 4, !tbaa !57
  %bf.set38 = or i32 %bf.shl, 3
  store i32 %bf.set38, i32* %1, align 8
  %cmp39307 = icmp sgt i32 %9, 0
  br i1 %cmp39307, label %for.body.lr.ph, label %sw.epilog

for.body.lr.ph:                                   ; preds = %sw.bb28
  %idxprom44 = sext i32 %mode to i64
  %arrayidx45 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom44
  %10 = load i32* %arrayidx45, align 4, !tbaa !1
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !4
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx43 = getelementptr inbounds %struct.rtvec_def* %.pre, i64 0, i32 1, i64 %indvars.iv
  %11 = load %struct.rtx_def** %arrayidx43, align 8, !tbaa !4
  switch i32 %10, label %if.else76 [
    i32 7, label %if.then47
    i32 8, label %if.then61
  ]

if.then47:                                        ; preds = %for.body
  %arrayidx53 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 %indvars.iv
  store i64 0, i64* %arrayidx53, align 8, !tbaa !81
  br label %for.inc

if.then61:                                        ; preds = %for.body
  %rtwint64 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 1, i32 0
  %12 = load i64* %rtwint64, align 8, !tbaa !81
  %arrayidx68 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 %indvars.iv
  store i64 %12, i64* %arrayidx68, align 8, !tbaa !81
  %rtwint71 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 2, i32 0
  %13 = load i64* %rtwint71, align 8, !tbaa !81
  store i64 %13, i64* %arrayidx68, align 8, !tbaa !81
  br label %for.inc

if.else76:                                        ; preds = %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3595, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.decode_rtx_const, i64 0, i64 0)) #9
  unreachable

for.inc:                                          ; preds = %if.then47, %if.then61
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %14 = trunc i64 %indvars.iv.next to i32
  %cmp39 = icmp slt i32 %14, %9
  br i1 %cmp39, label %for.body, label %for.cond.sw.epilog.loopexit_crit_edge

sw.bb79:                                          ; preds = %entry
  %rtwint82 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0, i32 0
  %15 = load i64* %rtwint82, align 8, !tbaa !81
  %16 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 1
  store i64 %15, i64* %16, align 8, !tbaa !108
  br label %sw.epilog

sw.bb84:                                          ; preds = %entry, %entry, %entry
  %17 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 0
  %x.c = ptrtoint %struct.rtx_def* %x to i64
  store i64 %x.c, i64* %17, align 8, !tbaa !106
  br label %sw.epilog

sw.bb87:                                          ; preds = %entry
  %arrayidx89 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %19 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 0
  %bf.load90 = load i32* %19, align 8
  %bf.clear91 = and i32 %bf.load90, 65535
  switch i32 %bf.clear91, label %if.else142 [
    i32 75, label %land.lhs.true
    i32 76, label %land.lhs.true119
  ]

land.lhs.true:                                    ; preds = %sw.bb87
  %arrayidx94 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 1
  %rtx95 = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**
  %20 = load %struct.rtx_def** %rtx95, align 8, !tbaa !4
  %21 = getelementptr inbounds %struct.rtx_def* %20, i64 0, i32 0
  %bf.load96 = load i32* %21, align 8
  %bf.clear97 = and i32 %bf.load96, 65535
  %cmp98 = icmp eq i32 %bf.clear97, 54
  br i1 %cmp98, label %if.then99, label %if.else142

if.then99:                                        ; preds = %land.lhs.true
  %arrayidx101 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 0
  %rtx102 = bitcast %union.rtunion_def* %arrayidx101 to %struct.rtx_def**
  %22 = load %struct.rtx_def** %rtx102, align 8, !tbaa !4
  %23 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 0
  %.c306 = ptrtoint %struct.rtx_def* %22 to i64
  store i64 %.c306, i64* %23, align 8, !tbaa !106
  %24 = load %struct.rtx_def** %rtx95, align 8, !tbaa !4
  %rtwint111 = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 1, i64 0, i32 0
  %25 = load i64* %rtwint111, align 8, !tbaa !81
  %26 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 1
  store i64 %25, i64* %26, align 8, !tbaa !108
  br label %sw.epilog

land.lhs.true119:                                 ; preds = %sw.bb87
  %arrayidx121 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 1
  %rtx122 = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**
  %27 = load %struct.rtx_def** %rtx122, align 8, !tbaa !4
  %28 = getelementptr inbounds %struct.rtx_def* %27, i64 0, i32 0
  %bf.load123 = load i32* %28, align 8
  %bf.clear124 = and i32 %bf.load123, 65535
  %cmp125 = icmp eq i32 %bf.clear124, 54
  br i1 %cmp125, label %if.then126, label %if.else142

if.then126:                                       ; preds = %land.lhs.true119
  %arrayidx128 = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 0
  %rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**
  %29 = load %struct.rtx_def** %rtx129, align 8, !tbaa !4
  %30 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 0
  %.c305 = ptrtoint %struct.rtx_def* %29 to i64
  store i64 %.c305, i64* %30, align 8, !tbaa !106
  %31 = load %struct.rtx_def** %rtx122, align 8, !tbaa !4
  %rtwint138 = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 1, i64 0, i32 0
  %32 = load i64* %rtwint138, align 8, !tbaa !81
  %sub = sub nsw i64 0, %32
  %33 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 1
  store i64 %sub, i64* %33, align 8, !tbaa !108
  br label %sw.epilog

if.else142:                                       ; preds = %sw.bb87, %land.lhs.true, %land.lhs.true119
  %34 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 0
  %.c = ptrtoint %struct.rtx_def* %18 to i64
  store i64 %.c, i64* %34, align 8, !tbaa !106
  %35 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1, i32 0, i64 1
  store i64 0, i64* %35, align 8, !tbaa !108
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 %bf.shl, i32* %1, align 8
  br label %sw.epilog

for.cond.sw.epilog.loopexit_crit_edge:            ; preds = %for.inc
  %bf.load153.pre.pre = load i32* %1, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb28, %for.cond.sw.epilog.loopexit_crit_edge, %if.then99, %if.else142, %if.then126, %if.then, %if.else, %sw.default, %sw.bb84, %sw.bb79
  %bf.load153 = phi i32 [ %bf.set3, %if.then99 ], [ %bf.set3, %if.else142 ], [ %bf.set3, %if.then126 ], [ %bf.set18, %if.then ], [ %bf.set8, %if.else ], [ %bf.shl, %sw.default ], [ %bf.set3, %sw.bb84 ], [ %bf.set3, %sw.bb79 ], [ %bf.load153.pre.pre, %for.cond.sw.epilog.loopexit_crit_edge ], [ %bf.set38, %sw.bb28 ]
  %bf.clear154 = and i32 %bf.load153, 65535
  %cmp155 = icmp eq i32 %bf.clear154, 2
  br i1 %cmp155, label %land.lhs.true156, label %if.end199

land.lhs.true156:                                 ; preds = %sw.epilog
  %un157 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1
  %base159 = bitcast %union.anon.5* %un157 to %struct.rtx_def**
  %36 = load %struct.rtx_def** %base159, align 8, !tbaa !106
  %cmp160 = icmp eq %struct.rtx_def* %36, null
  br i1 %cmp160, label %if.end199, label %land.lhs.true161

land.lhs.true161:                                 ; preds = %land.lhs.true156
  %37 = getelementptr inbounds %struct.rtx_def* %36, i64 0, i32 0
  %bf.load165 = load i32* %37, align 8
  %bf.clear166 = and i32 %bf.load165, 65535
  %cmp167 = icmp eq i32 %bf.clear166, 42
  br i1 %cmp167, label %if.then168, label %if.end199

if.then168:                                       ; preds = %land.lhs.true161
  %fld172 = getelementptr inbounds %struct.rtx_def* %36, i64 0, i32 1
  %rtvec174 = bitcast [1 x %union.rtunion_def]* %fld172 to %struct.rtvec_def**
  %38 = load %struct.rtvec_def** %rtvec174, align 8, !tbaa !4
  %num_elem175 = getelementptr inbounds %struct.rtvec_def* %38, i64 0, i32 0
  %39 = load i32* %num_elem175, align 4, !tbaa !57
  %cmp176 = icmp eq i32 %39, 1
  br i1 %cmp176, label %if.then177, label %if.end199

if.then177:                                       ; preds = %if.then168
  %arrayidx182 = getelementptr inbounds %struct.rtx_def* %36, i64 0, i32 1, i64 1
  %rtint = bitcast %union.rtunion_def* %arrayidx182 to i32*
  %40 = load i32* %rtint, align 4, !tbaa !23
  %add = add nsw i32 %40, 4
  %bf.value184 = and i32 %add, 65535
  %bf.clear185 = and i32 %bf.load153, -65536
  %bf.set186 = or i32 %bf.value184, %bf.clear185
  store i32 %bf.set186, i32* %1, align 8
  %arrayidx191 = getelementptr inbounds %struct.rtx_def* %36, i64 0, i32 1, i64 0
  %rtvec192 = bitcast %union.rtunion_def* %arrayidx191 to %struct.rtvec_def**
  %41 = load %struct.rtvec_def** %rtvec192, align 8, !tbaa !4
  %arrayidx194 = getelementptr inbounds %struct.rtvec_def* %41, i64 0, i32 1, i64 0
  %42 = load %struct.rtx_def** %arrayidx194, align 8, !tbaa !4
  %43 = getelementptr inbounds %union.anon.5* %un157, i64 0, i32 0, i64 0
  %.c304 = ptrtoint %struct.rtx_def* %42 to i64
  store i64 %.c304, i64* %43, align 8, !tbaa !106
  br label %if.end199

if.end199:                                        ; preds = %land.lhs.true156, %if.then168, %if.then177, %land.lhs.true161, %sw.epilog
  %bf.load200 = phi i32 [ %bf.load153, %land.lhs.true156 ], [ %bf.load153, %if.then168 ], [ %bf.set186, %if.then177 ], [ %bf.load153, %land.lhs.true161 ], [ %bf.load153, %sw.epilog ]
  %bf.clear201 = and i32 %bf.load200, 65534
  %cmp202 = icmp eq i32 %bf.clear201, 0
  br i1 %cmp202, label %if.end235, label %land.lhs.true203

land.lhs.true203:                                 ; preds = %if.end199
  %un204 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 1
  %base206 = bitcast %union.anon.5* %un204 to %struct.rtx_def**
  %44 = load %struct.rtx_def** %base206, align 8, !tbaa !106
  %cmp207 = icmp eq %struct.rtx_def* %44, null
  br i1 %cmp207, label %if.end235, label %if.then208

if.then208:                                       ; preds = %land.lhs.true203
  %45 = getelementptr inbounds %struct.rtx_def* %44, i64 0, i32 0
  %bf.load212 = load i32* %45, align 8
  %bf.clear213 = and i32 %bf.load212, 65535
  switch i32 %bf.clear213, label %if.end235 [
    i32 68, label %sw.bb214
    i32 67, label %sw.bb223
  ]

sw.bb214:                                         ; preds = %if.then208
  %arrayidx219 = getelementptr inbounds %struct.rtx_def* %44, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx219 to i8**
  %46 = load i8** %rtstr, align 8, !tbaa !4
  %47 = getelementptr inbounds %union.anon.5* %un204, i64 0, i32 0, i64 0
  %.c303 = ptrtoint i8* %46 to i64
  store i64 %.c303, i64* %47, align 8, !tbaa !106
  br label %if.end235

sw.bb223:                                         ; preds = %if.then208
  %arrayidx228 = getelementptr inbounds %struct.rtx_def* %44, i64 0, i32 1, i64 0
  %rtx229 = bitcast %union.rtunion_def* %arrayidx228 to %struct.rtx_def**
  %48 = load %struct.rtx_def** %rtx229, align 8, !tbaa !4
  %49 = getelementptr inbounds %union.anon.5* %un204, i64 0, i32 0, i64 0
  %.c302 = ptrtoint %struct.rtx_def* %48 to i64
  store i64 %.c302, i64* %49, align 8, !tbaa !106
  br label %if.end235

if.end235:                                        ; preds = %land.lhs.true203, %if.end199, %sw.bb214, %if.then208, %sw.bb223
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @mem_for_const_double(%struct.rtx_def* %x) #0 {
entry:
  %value.i8 = alloca %struct.rtx_const, align 8
  %value.i = alloca %struct.rtx_const, align 8
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %1 = bitcast %struct.rtx_const* %value.i to i8*
  call void @llvm.lifetime.start(i64 136, i8* %1) #6
  call fastcc void @decode_rtx_const(i32 %bf.clear, %struct.rtx_def* %x, %struct.rtx_const* %value.i) #6
  %2 = getelementptr inbounds %struct.rtx_const* %value.i, i64 0, i32 0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %hi.07.i = phi i32 [ 0, %entry ], [ %add.i, %for.body.i ]
  %i.06.i = phi i64 [ 0, %entry ], [ %inc.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds i32* %2, i64 %i.06.i
  %3 = load i32* %arrayidx.i, align 4, !tbaa !23
  %add.i = add nsw i32 %3, %hi.07.i
  %inc.i = add i64 %i.06.i, 1
  %exitcond.i = icmp eq i64 %inc.i, 34
  br i1 %exitcond.i, label %const_hash_rtx.exit, label %for.body.i

const_hash_rtx.exit:                              ; preds = %for.body.i
  %and.i = and i32 %add.i, 1073741823
  %rem.i = urem i32 %and.i, 61
  call void @llvm.lifetime.end(i64 136, i8* %1) #6
  %idxprom12 = zext i32 %rem.i to i64
  %4 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm = getelementptr inbounds %struct.function* %4, i64 0, i32 4
  %5 = load %struct.varasm_status** %varasm, align 8, !tbaa !46
  %x_const_rtx_hash_table = getelementptr inbounds %struct.varasm_status* %5, i64 0, i32 0
  %6 = load %struct.constant_descriptor*** %x_const_rtx_hash_table, align 8, !tbaa !110
  %arrayidx = getelementptr inbounds %struct.constant_descriptor** %6, i64 %idxprom12
  %desc.014 = load %struct.constant_descriptor** %arrayidx, align 8
  %tobool15 = icmp eq %struct.constant_descriptor* %desc.014, null
  br i1 %tobool15, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %const_hash_rtx.exit
  %7 = bitcast %struct.rtx_const* %value.i8 to i8*
  %8 = getelementptr inbounds %struct.rtx_const* %value.i8, i64 0, i32 0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %desc.016 = phi %struct.constant_descriptor* [ %desc.014, %for.body.lr.ph ], [ %desc.0, %for.inc ]
  %u.i = getelementptr inbounds %struct.constant_descriptor* %desc.016, i64 0, i32 3
  %9 = bitcast %union.anon.4* %u.i to i32*
  call void @llvm.lifetime.start(i64 136, i8* %7) #6
  call fastcc void @decode_rtx_const(i32 %bf.clear, %struct.rtx_def* %x, %struct.rtx_const* %value.i8) #6
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %for.body
  %p.0.i = phi i32* [ %9, %for.body ], [ %incdec.ptr.i, %while.body.i ]
  %strp.0.i = phi i32* [ %8, %for.body ], [ %incdec.ptr1.i, %while.body.i ]
  %len.0.i = phi i32 [ 34, %for.body ], [ %dec.i, %while.body.i ]
  %cmp.i = icmp sgt i32 %len.0.i, 0
  br i1 %cmp.i, label %while.body.i, label %if.then

while.body.i:                                     ; preds = %while.cond.i
  %dec.i = add nsw i32 %len.0.i, -1
  %incdec.ptr.i = getelementptr inbounds i32* %p.0.i, i64 1
  %10 = load i32* %p.0.i, align 4, !tbaa !23
  %incdec.ptr1.i = getelementptr inbounds i32* %strp.0.i, i64 1
  %11 = load i32* %strp.0.i, align 4, !tbaa !23
  %cmp2.i = icmp eq i32 %10, %11
  br i1 %cmp2.i, label %while.cond.i, label %for.inc

if.then:                                          ; preds = %while.cond.i
  call void @llvm.lifetime.end(i64 136, i8* %7) #6
  %rtl = getelementptr inbounds %struct.constant_descriptor* %desc.016, i64 0, i32 2
  %12 = load %struct.rtx_def** %rtl, align 8, !tbaa !98
  br label %return

for.inc:                                          ; preds = %while.body.i
  call void @llvm.lifetime.end(i64 136, i8* %7) #6
  %next = getelementptr inbounds %struct.constant_descriptor* %desc.016, i64 0, i32 0
  %desc.0 = load %struct.constant_descriptor** %next, align 8
  %tobool = icmp eq %struct.constant_descriptor* %desc.0, null
  br i1 %tobool, label %return, label %for.body

return:                                           ; preds = %for.inc, %const_hash_rtx.exit, %if.then
  %retval.0 = phi %struct.rtx_def* [ %12, %if.then ], [ null, %const_hash_rtx.exit ], [ null, %for.inc ]
  ret %struct.rtx_def* %retval.0
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @force_const_mem(i32 %mode, %struct.rtx_def* %x) #0 {
entry:
  %value.i134 = alloca %struct.rtx_const, align 8
  %value.i = alloca %struct.rtx_const, align 8
  %label = alloca [256 x i8], align 16
  %0 = getelementptr inbounds [256 x i8]* %label, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %0) #6
  %1 = bitcast %struct.rtx_const* %value.i to i8*
  call void @llvm.lifetime.start(i64 136, i8* %1) #6
  call fastcc void @decode_rtx_const(i32 %mode, %struct.rtx_def* %x, %struct.rtx_const* %value.i) #6
  %2 = getelementptr inbounds %struct.rtx_const* %value.i, i64 0, i32 0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %hi.07.i = phi i32 [ 0, %entry ], [ %add.i, %for.body.i ]
  %i.06.i = phi i64 [ 0, %entry ], [ %inc.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds i32* %2, i64 %i.06.i
  %3 = load i32* %arrayidx.i, align 4, !tbaa !23
  %add.i = add nsw i32 %3, %hi.07.i
  %inc.i = add i64 %i.06.i, 1
  %exitcond.i = icmp eq i64 %inc.i, 34
  br i1 %exitcond.i, label %const_hash_rtx.exit, label %for.body.i

const_hash_rtx.exit:                              ; preds = %for.body.i
  %and.i = and i32 %add.i, 1073741823
  %rem.i = urem i32 %and.i, 61
  call void @llvm.lifetime.end(i64 136, i8* %1) #6
  %idxprom139 = zext i32 %rem.i to i64
  %4 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm = getelementptr inbounds %struct.function* %4, i64 0, i32 4
  %5 = load %struct.varasm_status** %varasm, align 8, !tbaa !46
  %x_const_rtx_hash_table = getelementptr inbounds %struct.varasm_status* %5, i64 0, i32 0
  %6 = load %struct.constant_descriptor*** %x_const_rtx_hash_table, align 8, !tbaa !110
  %arrayidx = getelementptr inbounds %struct.constant_descriptor** %6, i64 %idxprom139
  %desc.0141 = load %struct.constant_descriptor** %arrayidx, align 8
  %tobool142 = icmp eq %struct.constant_descriptor* %desc.0141, null
  br i1 %tobool142, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %const_hash_rtx.exit
  %7 = bitcast %struct.rtx_const* %value.i134 to i8*
  %8 = getelementptr inbounds %struct.rtx_const* %value.i134, i64 0, i32 0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %desc.0143 = phi %struct.constant_descriptor* [ %desc.0141, %for.body.lr.ph ], [ %desc.0, %for.inc ]
  %u.i = getelementptr inbounds %struct.constant_descriptor* %desc.0143, i64 0, i32 3
  %9 = bitcast %union.anon.4* %u.i to i32*
  call void @llvm.lifetime.start(i64 136, i8* %7) #6
  call fastcc void @decode_rtx_const(i32 %mode, %struct.rtx_def* %x, %struct.rtx_const* %value.i134) #6
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %for.body
  %p.0.i = phi i32* [ %9, %for.body ], [ %incdec.ptr.i, %while.body.i ]
  %strp.0.i = phi i32* [ %8, %for.body ], [ %incdec.ptr1.i, %while.body.i ]
  %len.0.i = phi i32 [ 34, %for.body ], [ %dec.i, %while.body.i ]
  %cmp.i = icmp sgt i32 %len.0.i, 0
  br i1 %cmp.i, label %while.body.i, label %if.then

while.body.i:                                     ; preds = %while.cond.i
  %dec.i = add nsw i32 %len.0.i, -1
  %incdec.ptr.i = getelementptr inbounds i32* %p.0.i, i64 1
  %10 = load i32* %p.0.i, align 4, !tbaa !23
  %incdec.ptr1.i = getelementptr inbounds i32* %strp.0.i, i64 1
  %11 = load i32* %strp.0.i, align 4, !tbaa !23
  %cmp2.i = icmp eq i32 %10, %11
  br i1 %cmp2.i, label %while.cond.i, label %for.inc

if.then:                                          ; preds = %while.cond.i
  call void @llvm.lifetime.end(i64 136, i8* %7) #6
  %rtl = getelementptr inbounds %struct.constant_descriptor* %desc.0143, i64 0, i32 2
  %12 = load %struct.rtx_def** %rtl, align 8, !tbaa !98
  br label %cleanup

for.inc:                                          ; preds = %while.body.i
  call void @llvm.lifetime.end(i64 136, i8* %7) #6
  %next = getelementptr inbounds %struct.constant_descriptor* %desc.0143, i64 0, i32 0
  %desc.0 = load %struct.constant_descriptor** %next, align 8
  %tobool = icmp eq %struct.constant_descriptor* %desc.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %const_hash_rtx.exit
  %call.i = call noalias i8* @xcalloc(i64 1, i64 168) #6
  %13 = bitcast i8* %call.i to %struct.constant_descriptor*
  %u.i135 = getelementptr inbounds i8* %call.i, i64 32
  %14 = bitcast i8* %u.i135 to %struct.rtx_const*
  call fastcc void @decode_rtx_const(i32 %mode, %struct.rtx_def* %x, %struct.rtx_const* %14) #6
  %15 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm5 = getelementptr inbounds %struct.function* %15, i64 0, i32 4
  %16 = load %struct.varasm_status** %varasm5, align 8, !tbaa !46
  %x_const_rtx_hash_table6 = getelementptr inbounds %struct.varasm_status* %16, i64 0, i32 0
  %17 = load %struct.constant_descriptor*** %x_const_rtx_hash_table6, align 8, !tbaa !110
  %arrayidx7 = getelementptr inbounds %struct.constant_descriptor** %17, i64 %idxprom139
  %18 = load %struct.constant_descriptor** %arrayidx7, align 8, !tbaa !4
  %next8 = bitcast i8* %call.i to %struct.constant_descriptor**
  store %struct.constant_descriptor* %18, %struct.constant_descriptor** %next8, align 8, !tbaa !95
  store %struct.constant_descriptor* %13, %struct.constant_descriptor** %arrayidx7, align 8, !tbaa !4
  %cmp = icmp eq i32 %mode, 0
  %19 = load i32* @word_mode, align 4, !tbaa !1
  %cond = select i1 %cmp, i32 %19, i32 %mode
  %call13 = call i32 @get_mode_alignment(i32 %cond) #6
  %call14 = call %union.tree_node* @type_for_mode(i32 %mode, i32 0) #6
  %call15 = call %union.tree_node* @make_tree(%union.tree_node* %call14, %struct.rtx_def* %x) #6
  %call16 = call i32 @ix86_constant_alignment(%union.tree_node* %call15, i32 %call13) #6
  %div = lshr i32 %call16, 3
  %sub = add i32 %div, -1
  %conv = zext i32 %sub to i64
  %20 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm17 = getelementptr inbounds %struct.function* %20, i64 0, i32 4
  %21 = load %struct.varasm_status** %varasm17, align 8, !tbaa !46
  %x_pool_offset = getelementptr inbounds %struct.varasm_status* %21, i64 0, i32 4
  %22 = load i64* %x_pool_offset, align 8, !tbaa !117
  %add = add nsw i64 %22, %conv
  %neg = sub i32 0, %div
  %conv20 = zext i32 %neg to i64
  %and = and i64 %add, %conv20
  store i64 %and, i64* %x_pool_offset, align 8, !tbaa !117
  %23 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %23, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp23 = icmp eq i32 %bf.clear, 67
  br i1 %cmp23, label %if.then25, label %if.end29

if.then25:                                        ; preds = %for.end
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %24 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %25 = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 0
  %bf.load27 = load i32* %25, align 8
  %bf.set = or i32 %bf.load27, 268435456
  store i32 %bf.set, i32* %25, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then25, %for.end
  %call30 = call i8* @ggc_alloc(i64 64) #6
  %26 = bitcast i8* %call30 to %struct.pool_constant*
  %desc31 = bitcast i8* %call30 to %struct.constant_descriptor**
  store %struct.constant_descriptor* %13, %struct.constant_descriptor** %desc31, align 8, !tbaa !112
  %constant = getelementptr inbounds i8* %call30, i64 24
  %27 = bitcast i8* %constant to %struct.rtx_def**
  store %struct.rtx_def* %x, %struct.rtx_def** %27, align 8, !tbaa !53
  %mode32 = getelementptr inbounds i8* %call30, i64 32
  %28 = bitcast i8* %mode32 to i32*
  store i32 %mode, i32* %28, align 4, !tbaa !54
  %29 = load i32* @const_labelno, align 4, !tbaa !23
  %labelno = getelementptr inbounds i8* %call30, i64 36
  %30 = bitcast i8* %labelno to i32*
  store i32 %29, i32* %30, align 4, !tbaa !56
  %align33 = getelementptr inbounds i8* %call30, i64 40
  %31 = bitcast i8* %align33 to i32*
  store i32 %call16, i32* %31, align 4, !tbaa !55
  %32 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm34 = getelementptr inbounds %struct.function* %32, i64 0, i32 4
  %33 = load %struct.varasm_status** %varasm34, align 8, !tbaa !46
  %x_pool_offset35 = getelementptr inbounds %struct.varasm_status* %33, i64 0, i32 4
  %34 = load i64* %x_pool_offset35, align 8, !tbaa !117
  %offset = getelementptr inbounds i8* %call30, i64 48
  %35 = bitcast i8* %offset to i64*
  store i64 %34, i64* %35, align 8, !tbaa !118
  %mark = getelementptr inbounds i8* %call30, i64 56
  %36 = bitcast i8* %mark to i32*
  store i32 1, i32* %36, align 4, !tbaa !51
  %next36 = getelementptr inbounds i8* %call30, i64 8
  %37 = bitcast i8* %next36 to %struct.pool_constant**
  store %struct.pool_constant* null, %struct.pool_constant** %37, align 8, !tbaa !113
  %38 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm37 = getelementptr inbounds %struct.function* %38, i64 0, i32 4
  %39 = load %struct.varasm_status** %varasm37, align 8, !tbaa !46
  %x_last_pool = getelementptr inbounds %struct.varasm_status* %39, i64 0, i32 3
  %40 = load %struct.pool_constant** %x_last_pool, align 8, !tbaa !59
  %cmp38 = icmp eq %struct.pool_constant* %40, null
  br i1 %cmp38, label %if.then40, label %if.else

if.then40:                                        ; preds = %if.end29
  %x_first_pool = getelementptr inbounds %struct.varasm_status* %39, i64 0, i32 2
  store %struct.pool_constant* %26, %struct.pool_constant** %x_first_pool, align 8, !tbaa !49
  br label %if.end45

if.else:                                          ; preds = %if.end29
  %next44 = getelementptr inbounds %struct.pool_constant* %40, i64 0, i32 1
  store %struct.pool_constant* %26, %struct.pool_constant** %next44, align 8, !tbaa !113
  br label %if.end45

if.end45:                                         ; preds = %if.else, %if.then40
  %41 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm46 = getelementptr inbounds %struct.function* %41, i64 0, i32 4
  %42 = load %struct.varasm_status** %varasm46, align 8, !tbaa !46
  %x_last_pool47 = getelementptr inbounds %struct.varasm_status* %42, i64 0, i32 3
  store %struct.pool_constant* %26, %struct.pool_constant** %x_last_pool47, align 8, !tbaa !59
  %idxprom48 = sext i32 %mode to i64
  %arrayidx49 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom48
  %43 = load i8* %arrayidx49, align 1, !tbaa !1
  %conv50 = zext i8 %43 to i64
  %44 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm51 = getelementptr inbounds %struct.function* %44, i64 0, i32 4
  %45 = load %struct.varasm_status** %varasm51, align 8, !tbaa !46
  %x_pool_offset52 = getelementptr inbounds %struct.varasm_status* %45, i64 0, i32 4
  %46 = load i64* %x_pool_offset52, align 8, !tbaa !117
  %add53 = add nsw i64 %46, %conv50
  store i64 %add53, i64* %x_pool_offset52, align 8, !tbaa !117
  %47 = load i32* @const_labelno, align 4, !tbaa !23
  %call54 = call i32 (i8*, i8*, ...)* @sprintf(i8* %0, i8* getelementptr inbounds ([7 x i8]* @.str74, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8]* @.str100, i64 0, i64 0), i32 %47) #6
  %48 = load i32* @const_labelno, align 4, !tbaa !23
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* @const_labelno, align 4, !tbaa !23
  %49 = load i32* @target_flags, align 4, !tbaa !23
  %and55 = lshr i32 %49, 25
  %50 = and i32 %and55, 1
  %51 = or i32 %50, 4
  %call59 = call i8* @ggc_alloc_string(i8* %0, i32 -1) #6
  %call60 = call %struct.rtx_def* @gen_rtx_fmt_s(i32 68, i32 %51, i8* %call59) #6
  %call61 = call %struct.rtx_def* @gen_rtx_MEM(i32 %mode, %struct.rtx_def* %call60) #6
  %52 = load %struct.constant_descriptor** %desc31, align 8, !tbaa !112
  %rtl63 = getelementptr inbounds %struct.constant_descriptor* %52, i64 0, i32 2
  store %struct.rtx_def* %call61, %struct.rtx_def** %rtl63, align 8, !tbaa !98
  %53 = load i64* @const_alias_set, align 8, !tbaa !81
  call void @set_mem_alias_set(%struct.rtx_def* %call61, i64 %53) #6
  %call64 = call %union.tree_node* @type_for_mode(i32 %mode, i32 0) #6
  call void @set_mem_attributes(%struct.rtx_def* %call61, %union.tree_node* %call64, i32 1) #6
  %54 = getelementptr inbounds %struct.rtx_def* %call61, i64 0, i32 0
  %bf.load65 = load i32* %54, align 8
  %bf.set67 = or i32 %bf.load65, 67108864
  store i32 %bf.set67, i32* %54, align 8
  %arrayidx69 = getelementptr inbounds %struct.rtx_def* %call61, i64 0, i32 1, i64 0
  %rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**
  %55 = load %struct.rtx_def** %rtx70, align 8, !tbaa !4
  %arrayidx72 = getelementptr inbounds %struct.rtx_def* %55, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx72 to i8**
  %56 = load i8** %rtstr, align 8, !tbaa !4
  %57 = ptrtoint i8* %56 to i64
  %and73 = and i64 %57, 1073741823
  %rem = urem i64 %and73, 61
  %58 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm76 = getelementptr inbounds %struct.function* %58, i64 0, i32 4
  %59 = load %struct.varasm_status** %varasm76, align 8, !tbaa !46
  %x_const_rtx_sym_hash_table = getelementptr inbounds %struct.varasm_status* %59, i64 0, i32 1
  %60 = load %struct.pool_constant*** %x_const_rtx_sym_hash_table, align 8, !tbaa !111
  %arrayidx77 = getelementptr inbounds %struct.pool_constant** %60, i64 %rem
  %61 = load %struct.pool_constant** %arrayidx77, align 8, !tbaa !4
  %next_sym = getelementptr inbounds i8* %call30, i64 16
  %62 = bitcast i8* %next_sym to %struct.pool_constant**
  store %struct.pool_constant* %61, %struct.pool_constant** %62, align 8, !tbaa !119
  %63 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm79 = getelementptr inbounds %struct.function* %63, i64 0, i32 4
  %64 = load %struct.varasm_status** %varasm79, align 8, !tbaa !46
  %x_const_rtx_sym_hash_table80 = getelementptr inbounds %struct.varasm_status* %64, i64 0, i32 1
  %65 = load %struct.pool_constant*** %x_const_rtx_sym_hash_table80, align 8, !tbaa !111
  %arrayidx81 = getelementptr inbounds %struct.pool_constant** %65, i64 %rem
  store %struct.pool_constant* %26, %struct.pool_constant** %arrayidx81, align 8, !tbaa !4
  %66 = load %struct.rtx_def** %rtx70, align 8, !tbaa !4
  %67 = getelementptr inbounds %struct.rtx_def* %66, i64 0, i32 0
  %bf.load85 = load i32* %67, align 8
  %bf.set87 = or i32 %bf.load85, 67108864
  store i32 %bf.set87, i32* %67, align 8
  %68 = load %struct.function** @cfun, align 8, !tbaa !4
  %uses_const_pool = getelementptr inbounds %struct.function* %68, i64 0, i32 56
  %69 = bitcast i24* %uses_const_pool to i32*
  %bf.load88 = load i32* %69, align 8
  %bf.set90 = or i32 %bf.load88, 1048576
  store i32 %bf.set90, i32* %69, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.end45, %if.then
  %retval.0 = phi %struct.rtx_def* [ %12, %if.then ], [ %call61, %if.end45 ]
  call void @llvm.lifetime.end(i64 256, i8* %0) #6
  ret %struct.rtx_def* %retval.0
}

declare i32 @get_mode_alignment(i32) #3

declare %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #3

declare %union.tree_node* @type_for_mode(i32, i32) #3

declare i8* @ggc_alloc(i64) #3

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_pool_constant(%struct.rtx_def* nocapture readonly %addr) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !4
  %.idx = getelementptr %struct.function* %0, i64 0, i32 4
  %.idx.val = load %struct.varasm_status** %.idx, align 8, !tbaa !46
  %.idx.val.idx = getelementptr %struct.varasm_status* %.idx.val, i64 0, i32 1
  %.idx.val.idx.val = load %struct.pool_constant*** %.idx.val.idx, align 8, !tbaa !111
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %addr, i64 0, i32 1, i64 0
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %1 = load i8** %rtstr.i, align 8, !tbaa !4
  %2 = ptrtoint i8* %1 to i64
  %and.i = and i64 %2, 1073741823
  %rem.i = urem i64 %and.i, 61
  %arrayidx1.i = getelementptr inbounds %struct.pool_constant** %.idx.val.idx.val, i64 %rem.i
  %pool.02.i = load %struct.pool_constant** %arrayidx1.i, align 8
  %tobool3.i = icmp eq %struct.pool_constant* %pool.02.i, null
  br i1 %tobool3.i, label %for.end.i, label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %next_sym.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 2
  %pool.0.i = load %struct.pool_constant** %next_sym.i, align 8
  %tobool.i = icmp eq %struct.pool_constant* %pool.0.i, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %entry, %for.cond.i
  %pool.04.i = phi %struct.pool_constant* [ %pool.0.i, %for.cond.i ], [ %pool.02.i, %entry ]
  %desc.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 0
  %3 = load %struct.constant_descriptor** %desc.i, align 8, !tbaa !112
  %rtl.i = getelementptr inbounds %struct.constant_descriptor* %3, i64 0, i32 2
  %4 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !98
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  %arrayidx5.i = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0
  %rtstr6.i = bitcast %union.rtunion_def* %arrayidx5.i to i8**
  %6 = load i8** %rtstr6.i, align 8, !tbaa !4
  %cmp.i = icmp eq i8* %6, %1
  br i1 %cmp.i, label %find_pool_constant.exit, label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3875, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.find_pool_constant, i64 0, i64 0)) #9
  unreachable

find_pool_constant.exit:                          ; preds = %for.body.i
  %constant = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 3
  %7 = load %struct.rtx_def** %constant, align 8, !tbaa !53
  ret %struct.rtx_def* %7
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_pool_constant_mark(%struct.rtx_def* nocapture readonly %addr, i8* nocapture %pmarked) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !4
  %.idx = getelementptr %struct.function* %0, i64 0, i32 4
  %.idx.val = load %struct.varasm_status** %.idx, align 8, !tbaa !46
  %.idx.val.idx = getelementptr %struct.varasm_status* %.idx.val, i64 0, i32 1
  %.idx.val.idx.val = load %struct.pool_constant*** %.idx.val.idx, align 8, !tbaa !111
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %addr, i64 0, i32 1, i64 0
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %1 = load i8** %rtstr.i, align 8, !tbaa !4
  %2 = ptrtoint i8* %1 to i64
  %and.i = and i64 %2, 1073741823
  %rem.i = urem i64 %and.i, 61
  %arrayidx1.i = getelementptr inbounds %struct.pool_constant** %.idx.val.idx.val, i64 %rem.i
  %pool.02.i = load %struct.pool_constant** %arrayidx1.i, align 8
  %tobool3.i = icmp eq %struct.pool_constant* %pool.02.i, null
  br i1 %tobool3.i, label %for.end.i, label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %next_sym.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 2
  %pool.0.i = load %struct.pool_constant** %next_sym.i, align 8
  %tobool.i = icmp eq %struct.pool_constant* %pool.0.i, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %entry, %for.cond.i
  %pool.04.i = phi %struct.pool_constant* [ %pool.0.i, %for.cond.i ], [ %pool.02.i, %entry ]
  %desc.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 0
  %3 = load %struct.constant_descriptor** %desc.i, align 8, !tbaa !112
  %rtl.i = getelementptr inbounds %struct.constant_descriptor* %3, i64 0, i32 2
  %4 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !98
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  %arrayidx5.i = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0
  %rtstr6.i = bitcast %union.rtunion_def* %arrayidx5.i to i8**
  %6 = load i8** %rtstr6.i, align 8, !tbaa !4
  %cmp.i = icmp eq i8* %6, %1
  br i1 %cmp.i, label %find_pool_constant.exit, label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3875, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.find_pool_constant, i64 0, i64 0)) #9
  unreachable

find_pool_constant.exit:                          ; preds = %for.body.i
  %mark = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 8
  %7 = load i32* %mark, align 4, !tbaa !51
  %cmp = icmp ne i32 %7, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %pmarked, align 1, !tbaa !120
  %constant = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 3
  %8 = load %struct.rtx_def** %constant, align 8, !tbaa !53
  ret %struct.rtx_def* %8
}

; Function Attrs: nounwind uwtable
define %struct.rtx_def* @get_pool_constant_for_function(%struct.function* nocapture readonly %f, %struct.rtx_def* nocapture readonly %addr) #0 {
entry:
  %f.idx = getelementptr %struct.function* %f, i64 0, i32 4
  %f.idx.val = load %struct.varasm_status** %f.idx, align 8, !tbaa !46
  %f.idx.val.idx = getelementptr %struct.varasm_status* %f.idx.val, i64 0, i32 1
  %f.idx.val.idx.val = load %struct.pool_constant*** %f.idx.val.idx, align 8, !tbaa !111
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %addr, i64 0, i32 1, i64 0
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %0 = load i8** %rtstr.i, align 8, !tbaa !4
  %1 = ptrtoint i8* %0 to i64
  %and.i = and i64 %1, 1073741823
  %rem.i = urem i64 %and.i, 61
  %arrayidx1.i = getelementptr inbounds %struct.pool_constant** %f.idx.val.idx.val, i64 %rem.i
  %pool.02.i = load %struct.pool_constant** %arrayidx1.i, align 8
  %tobool3.i = icmp eq %struct.pool_constant* %pool.02.i, null
  br i1 %tobool3.i, label %for.end.i, label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %next_sym.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 2
  %pool.0.i = load %struct.pool_constant** %next_sym.i, align 8
  %tobool.i = icmp eq %struct.pool_constant* %pool.0.i, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %entry, %for.cond.i
  %pool.04.i = phi %struct.pool_constant* [ %pool.0.i, %for.cond.i ], [ %pool.02.i, %entry ]
  %desc.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 0
  %2 = load %struct.constant_descriptor** %desc.i, align 8, !tbaa !112
  %rtl.i = getelementptr inbounds %struct.constant_descriptor* %2, i64 0, i32 2
  %3 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !98
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  %arrayidx5.i = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtstr6.i = bitcast %union.rtunion_def* %arrayidx5.i to i8**
  %5 = load i8** %rtstr6.i, align 8, !tbaa !4
  %cmp.i = icmp eq i8* %5, %0
  br i1 %cmp.i, label %find_pool_constant.exit, label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3875, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.find_pool_constant, i64 0, i64 0)) #9
  unreachable

find_pool_constant.exit:                          ; preds = %for.body.i
  %constant = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 3
  %6 = load %struct.rtx_def** %constant, align 8, !tbaa !53
  ret %struct.rtx_def* %6
}

; Function Attrs: nounwind uwtable
define i32 @get_pool_mode(%struct.rtx_def* nocapture readonly %addr) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !4
  %.idx = getelementptr %struct.function* %0, i64 0, i32 4
  %.idx.val = load %struct.varasm_status** %.idx, align 8, !tbaa !46
  %.idx.val.idx = getelementptr %struct.varasm_status* %.idx.val, i64 0, i32 1
  %.idx.val.idx.val = load %struct.pool_constant*** %.idx.val.idx, align 8, !tbaa !111
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %addr, i64 0, i32 1, i64 0
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %1 = load i8** %rtstr.i, align 8, !tbaa !4
  %2 = ptrtoint i8* %1 to i64
  %and.i = and i64 %2, 1073741823
  %rem.i = urem i64 %and.i, 61
  %arrayidx1.i = getelementptr inbounds %struct.pool_constant** %.idx.val.idx.val, i64 %rem.i
  %pool.02.i = load %struct.pool_constant** %arrayidx1.i, align 8
  %tobool3.i = icmp eq %struct.pool_constant* %pool.02.i, null
  br i1 %tobool3.i, label %for.end.i, label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %next_sym.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 2
  %pool.0.i = load %struct.pool_constant** %next_sym.i, align 8
  %tobool.i = icmp eq %struct.pool_constant* %pool.0.i, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %entry, %for.cond.i
  %pool.04.i = phi %struct.pool_constant* [ %pool.0.i, %for.cond.i ], [ %pool.02.i, %entry ]
  %desc.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 0
  %3 = load %struct.constant_descriptor** %desc.i, align 8, !tbaa !112
  %rtl.i = getelementptr inbounds %struct.constant_descriptor* %3, i64 0, i32 2
  %4 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !98
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  %arrayidx5.i = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0
  %rtstr6.i = bitcast %union.rtunion_def* %arrayidx5.i to i8**
  %6 = load i8** %rtstr6.i, align 8, !tbaa !4
  %cmp.i = icmp eq i8* %6, %1
  br i1 %cmp.i, label %find_pool_constant.exit, label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3875, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.find_pool_constant, i64 0, i64 0)) #9
  unreachable

find_pool_constant.exit:                          ; preds = %for.body.i
  %mode = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 4
  %7 = load i32* %mode, align 4, !tbaa !54
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define i32 @get_pool_mode_for_function(%struct.function* nocapture readonly %f, %struct.rtx_def* nocapture readonly %addr) #0 {
entry:
  %f.idx = getelementptr %struct.function* %f, i64 0, i32 4
  %f.idx.val = load %struct.varasm_status** %f.idx, align 8, !tbaa !46
  %f.idx.val.idx = getelementptr %struct.varasm_status* %f.idx.val, i64 0, i32 1
  %f.idx.val.idx.val = load %struct.pool_constant*** %f.idx.val.idx, align 8, !tbaa !111
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %addr, i64 0, i32 1, i64 0
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %0 = load i8** %rtstr.i, align 8, !tbaa !4
  %1 = ptrtoint i8* %0 to i64
  %and.i = and i64 %1, 1073741823
  %rem.i = urem i64 %and.i, 61
  %arrayidx1.i = getelementptr inbounds %struct.pool_constant** %f.idx.val.idx.val, i64 %rem.i
  %pool.02.i = load %struct.pool_constant** %arrayidx1.i, align 8
  %tobool3.i = icmp eq %struct.pool_constant* %pool.02.i, null
  br i1 %tobool3.i, label %for.end.i, label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %next_sym.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 2
  %pool.0.i = load %struct.pool_constant** %next_sym.i, align 8
  %tobool.i = icmp eq %struct.pool_constant* %pool.0.i, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %entry, %for.cond.i
  %pool.04.i = phi %struct.pool_constant* [ %pool.0.i, %for.cond.i ], [ %pool.02.i, %entry ]
  %desc.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 0
  %2 = load %struct.constant_descriptor** %desc.i, align 8, !tbaa !112
  %rtl.i = getelementptr inbounds %struct.constant_descriptor* %2, i64 0, i32 2
  %3 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !98
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  %arrayidx5.i = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtstr6.i = bitcast %union.rtunion_def* %arrayidx5.i to i8**
  %5 = load i8** %rtstr6.i, align 8, !tbaa !4
  %cmp.i = icmp eq i8* %5, %0
  br i1 %cmp.i, label %find_pool_constant.exit, label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3875, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.find_pool_constant, i64 0, i64 0)) #9
  unreachable

find_pool_constant.exit:                          ; preds = %for.body.i
  %mode = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 4
  %6 = load i32* %mode, align 4, !tbaa !54
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define i32 @get_pool_offset(%struct.rtx_def* nocapture readonly %addr) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !4
  %.idx = getelementptr %struct.function* %0, i64 0, i32 4
  %.idx.val = load %struct.varasm_status** %.idx, align 8, !tbaa !46
  %.idx.val.idx = getelementptr %struct.varasm_status* %.idx.val, i64 0, i32 1
  %.idx.val.idx.val = load %struct.pool_constant*** %.idx.val.idx, align 8, !tbaa !111
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %addr, i64 0, i32 1, i64 0
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %1 = load i8** %rtstr.i, align 8, !tbaa !4
  %2 = ptrtoint i8* %1 to i64
  %and.i = and i64 %2, 1073741823
  %rem.i = urem i64 %and.i, 61
  %arrayidx1.i = getelementptr inbounds %struct.pool_constant** %.idx.val.idx.val, i64 %rem.i
  %pool.02.i = load %struct.pool_constant** %arrayidx1.i, align 8
  %tobool3.i = icmp eq %struct.pool_constant* %pool.02.i, null
  br i1 %tobool3.i, label %for.end.i, label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %next_sym.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 2
  %pool.0.i = load %struct.pool_constant** %next_sym.i, align 8
  %tobool.i = icmp eq %struct.pool_constant* %pool.0.i, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %entry, %for.cond.i
  %pool.04.i = phi %struct.pool_constant* [ %pool.0.i, %for.cond.i ], [ %pool.02.i, %entry ]
  %desc.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 0
  %3 = load %struct.constant_descriptor** %desc.i, align 8, !tbaa !112
  %rtl.i = getelementptr inbounds %struct.constant_descriptor* %3, i64 0, i32 2
  %4 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !98
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  %arrayidx5.i = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0
  %rtstr6.i = bitcast %union.rtunion_def* %arrayidx5.i to i8**
  %6 = load i8** %rtstr6.i, align 8, !tbaa !4
  %cmp.i = icmp eq i8* %6, %1
  br i1 %cmp.i, label %find_pool_constant.exit, label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3875, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.find_pool_constant, i64 0, i64 0)) #9
  unreachable

find_pool_constant.exit:                          ; preds = %for.body.i
  %offset = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 7
  %7 = load i64* %offset, align 8, !tbaa !118
  %conv = trunc i64 %7 to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly uwtable
define i32 @get_pool_size() #2 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !4
  %varasm = getelementptr inbounds %struct.function* %0, i64 0, i32 4
  %1 = load %struct.varasm_status** %varasm, align 8, !tbaa !46
  %x_pool_offset = getelementptr inbounds %struct.varasm_status* %1, i64 0, i32 4
  %2 = load i64* %x_pool_offset, align 8, !tbaa !117
  %conv = trunc i64 %2 to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %value, %union.tree_node* readonly %endtype) #0 {
entry:
  %0 = load %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 9), align 8, !tbaa !67
  br label %tailrecurse

tailrecurse:                                      ; preds = %land.lhs.true138, %land.lhs.true116, %land.lhs.true63, %land.lhs.true63, %if.else, %land.lhs.true391, %land.lhs.true232, %if.then511, %sw.bb42, %if.then, %entry
  %value.tr = phi %union.tree_node* [ %value, %entry ], [ %6, %if.then ], [ %11, %sw.bb42 ], [ %34, %if.then511 ], [ %19, %land.lhs.true232 ], [ %26, %land.lhs.true391 ], [ %32, %if.else ], [ %13, %land.lhs.true63 ], [ %13, %land.lhs.true63 ], [ %16, %land.lhs.true116 ], [ %16, %land.lhs.true138 ]
  %call = tail call %union.tree_node* %0(%union.tree_node* %value.tr) #6
  %code = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.epilog [
    i32 46, label %sw.bb
    i32 25, label %sw.bb28
    i32 28, label %sw.bb28
    i32 26, label %sw.bb28
    i32 29, label %sw.bb28
    i32 27, label %sw.bb28
    i32 121, label %sw.bb29
    i32 124, label %sw.bb29
    i32 117, label %sw.bb42
    i32 116, label %sw.bb42
    i32 114, label %sw.bb47
    i32 115, label %sw.bb47
    i32 59, label %sw.bb517
    i32 60, label %sw.bb565
  ]

sw.bb:                                            ; preds = %tailrecurse
  %type = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !27
  %code3 = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load4 = load i32* %code3, align 8
  %2 = and i32 %bf.load4, 254
  %switch = icmp ne i32 %2, 20
  %bf.clear15 = and i32 %bf.load, 512
  %tobool = icmp eq i32 %bf.clear15, 0
  %or.cond1034 = or i1 %switch, %tobool
  br i1 %or.cond1034, label %if.end, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %sw.bb
  %operands = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %3 = bitcast i32* %arrayidx to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !4
  %tobool17 = icmp eq %union.tree_node* %4, null
  br i1 %tobool17, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true16
  %value21 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 2
  %5 = bitcast i32* %value21 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !60
  br label %tailrecurse

if.end:                                           ; preds = %sw.bb, %land.lhs.true16
  %bf.clear26 = and i32 %bf.load, 262144
  %tobool27 = icmp ne i32 %bf.clear26, 0
  %7 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !4
  %cond = select i1 %tobool27, %union.tree_node* %7, %union.tree_node* null
  br label %return

sw.bb28:                                          ; preds = %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse
  %8 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !4
  br label %return

sw.bb29:                                          ; preds = %tailrecurse, %tailrecurse
  %operands31 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx32 = bitcast i32* %operands31 to %union.tree_node**
  %9 = load %union.tree_node** %arrayidx32, align 8, !tbaa !4
  %call33 = tail call i32 @staticp(%union.tree_node* %9) #6
  %tobool34 = icmp eq i32 %call33, 0
  br i1 %tobool34, label %return, label %cond.true35

cond.true35:                                      ; preds = %sw.bb29
  %10 = load %union.tree_node** %arrayidx32, align 8, !tbaa !4
  br label %return

sw.bb42:                                          ; preds = %tailrecurse, %tailrecurse
  %operands44 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx45 = bitcast i32* %operands44 to %union.tree_node**
  %11 = load %union.tree_node** %arrayidx45, align 8, !tbaa !4
  br label %tailrecurse

sw.bb47:                                          ; preds = %tailrecurse, %tailrecurse
  %type49 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %12 = load %union.tree_node** %type49, align 8, !tbaa !27
  %code51 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %bf.load52 = load i32* %code51, align 8
  %bf.clear53 = and i32 %bf.load52, 255
  switch i32 %bf.clear53, label %if.end503 [
    i32 13, label %land.lhs.true63
    i32 15, label %land.lhs.true63
    i32 7, label %land.lhs.true116
    i32 8, label %land.lhs.true106
    i32 6, label %land.lhs.true188
    i32 10, label %land.lhs.true188
    i32 11, label %land.lhs.true188
    i32 12, label %land.lhs.true188
  ]

land.lhs.true63:                                  ; preds = %sw.bb47, %sw.bb47
  %operands65 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx66 = bitcast i32* %operands65 to %union.tree_node**
  %13 = load %union.tree_node** %arrayidx66, align 8, !tbaa !4
  %type68 = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 1
  %14 = load %union.tree_node** %type68, align 8, !tbaa !27
  %code70 = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 0, i32 2
  %bf.load71 = load i32* %code70, align 8
  %bf.clear72 = and i32 %bf.load71, 255
  switch i32 %bf.clear72, label %if.end90 [
    i32 13, label %tailrecurse
    i32 15, label %tailrecurse
  ]

if.end90:                                         ; preds = %land.lhs.true63
  switch i32 %bf.clear53, label %if.end503 [
    i32 7, label %land.lhs.true116
    i32 8, label %land.lhs.true106
    i32 6, label %land.lhs.true188
    i32 10, label %land.lhs.true188
    i32 11, label %land.lhs.true188
    i32 12, label %land.lhs.true188
    i32 13, label %land.lhs.true429
    i32 15, label %land.lhs.true429
  ]

land.lhs.true106:                                 ; preds = %sw.bb47, %if.end90
  %type110 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 1
  %15 = load %union.tree_node** %type110, align 8, !tbaa !27
  %code112 = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 0, i32 2
  %bf.load113 = load i32* %code112, align 8
  %bf.clear114 = and i32 %bf.load113, 255
  %cmp115 = icmp eq i32 %bf.clear114, 7
  br i1 %cmp115, label %land.lhs.true116, label %if.end503

land.lhs.true116:                                 ; preds = %sw.bb47, %if.end90, %land.lhs.true106
  %operands118 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx119 = bitcast i32* %operands118 to %union.tree_node**
  %16 = load %union.tree_node** %arrayidx119, align 8, !tbaa !4
  %type121 = getelementptr inbounds %union.tree_node* %16, i64 0, i32 0, i32 0, i32 1
  %17 = load %union.tree_node** %type121, align 8, !tbaa !27
  %code123 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 2
  %bf.load124 = load i32* %code123, align 8
  %bf.clear125 = and i32 %bf.load124, 255
  switch i32 %bf.clear125, label %if.end156 [
    i32 7, label %tailrecurse
    i32 8, label %land.lhs.true138
  ]

land.lhs.true138:                                 ; preds = %land.lhs.true116
  %type145 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 1
  %18 = load %union.tree_node** %type145, align 8, !tbaa !27
  %code147 = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 2
  %bf.load148 = load i32* %code147, align 8
  %bf.clear149 = and i32 %bf.load148, 255
  %cmp150 = icmp eq i32 %bf.clear149, 7
  br i1 %cmp150, label %tailrecurse, label %if.end156

if.end156:                                        ; preds = %land.lhs.true116, %land.lhs.true138
  switch i32 %bf.clear53, label %if.end503 [
    i32 6, label %land.lhs.true188
    i32 10, label %land.lhs.true188
    i32 11, label %land.lhs.true188
    i32 12, label %land.lhs.true188
    i32 13, label %land.lhs.true429
    i32 15, label %land.lhs.true429
  ]

land.lhs.true188:                                 ; preds = %sw.bb47, %sw.bb47, %sw.bb47, %sw.bb47, %if.end90, %if.end90, %if.end90, %if.end90, %if.end156, %if.end156, %if.end156, %if.end156
  %.in1135.in = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %.in1135 = bitcast i32* %.in1135.in to %union.tree_node**
  %19 = load %union.tree_node** %.in1135, align 8
  %type193 = getelementptr inbounds %union.tree_node* %19, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type193, align 8, !tbaa !27
  %code195 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 2
  %bf.load196 = load i32* %code195, align 8
  %bf.clear197 = and i32 %bf.load196, 255
  switch i32 %bf.clear197, label %if.end253 [
    i32 6, label %land.lhs.true232
    i32 10, label %land.lhs.true232
    i32 11, label %land.lhs.true232
    i32 12, label %land.lhs.true232
  ]

land.lhs.true232:                                 ; preds = %land.lhs.true188, %land.lhs.true188, %land.lhs.true188, %land.lhs.true188
  %type235 = bitcast %union.tree_node* %12 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type235, i64 0, i32 6
  %bf.load236 = load i32* %precision, align 4
  %type243 = bitcast %union.tree_node* %20 to %struct.tree_type*
  %precision244 = getelementptr inbounds %struct.tree_type* %type243, i64 0, i32 6
  %bf.load245 = load i32* %precision244, align 4
  %21 = xor i32 %bf.load245, %bf.load236
  %22 = and i32 %21, 511
  %cmp247 = icmp eq i32 %22, 0
  br i1 %cmp247, label %tailrecurse, label %if.end253

if.end253:                                        ; preds = %land.lhs.true232, %land.lhs.true188
  switch i32 %bf.clear53, label %if.end503 [
    i32 6, label %land.lhs.true285
    i32 10, label %land.lhs.true285
    i32 11, label %land.lhs.true285
    i32 12, label %land.lhs.true285
    i32 13, label %land.lhs.true429
    i32 15, label %land.lhs.true429
  ]

land.lhs.true285:                                 ; preds = %if.end253, %if.end253, %if.end253, %if.end253
  %.in1136.in = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %.in1136 = bitcast i32* %.in1136.in to %union.tree_node**
  %23 = load %union.tree_node** %.in1136, align 8
  %type290 = getelementptr inbounds %union.tree_node* %23, i64 0, i32 0, i32 0, i32 1
  %24 = load %union.tree_node** %type290, align 8, !tbaa !27
  %code292 = getelementptr inbounds %union.tree_node* %24, i64 0, i32 0, i32 0, i32 2
  %bf.load293 = load i32* %code292, align 8
  %bf.clear294 = and i32 %bf.load293, 255
  switch i32 %bf.clear294, label %if.end337 [
    i32 6, label %if.then329
    i32 10, label %if.then329
    i32 11, label %if.then329
    i32 12, label %if.then329
  ]

if.then329:                                       ; preds = %land.lhs.true285, %land.lhs.true285, %land.lhs.true285, %land.lhs.true285
  %call333 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %23, %union.tree_node* %endtype)
  %25 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !4
  %cmp334 = icmp eq %union.tree_node* %call333, %25
  br i1 %cmp334, label %return, label %sw.epilog

if.end337:                                        ; preds = %land.lhs.true285
  switch i32 %bf.clear53, label %if.end503 [
    i32 6, label %land.lhs.true369
    i32 10, label %land.lhs.true369
    i32 11, label %land.lhs.true369
    i32 12, label %land.lhs.true369
    i32 13, label %land.lhs.true429
    i32 15, label %land.lhs.true429
  ]

land.lhs.true369:                                 ; preds = %if.end337, %if.end337, %if.end337, %if.end337
  %.in1137.in = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %.in1137 = bitcast i32* %.in1137.in to %union.tree_node**
  %26 = load %union.tree_node** %.in1137, align 8
  %type374 = getelementptr inbounds %union.tree_node* %26, i64 0, i32 0, i32 0, i32 1
  %27 = load %union.tree_node** %type374, align 8, !tbaa !27
  %code376 = getelementptr inbounds %union.tree_node* %27, i64 0, i32 0, i32 0, i32 2
  %bf.load377 = load i32* %code376, align 8
  %bf.clear378 = and i32 %bf.load377, 255
  switch i32 %bf.clear378, label %if.end413 [
    i32 13, label %land.lhs.true391
    i32 15, label %land.lhs.true391
  ]

land.lhs.true391:                                 ; preds = %land.lhs.true369, %land.lhs.true369
  %type394.phi.trans.insert.pn = bitcast %union.tree_node* %12 to %struct.tree_type*
  %bf.load396.in = getelementptr inbounds %struct.tree_type* %type394.phi.trans.insert.pn, i64 0, i32 6
  %bf.load396 = load i32* %bf.load396.in, align 4
  %bf.clear397 = and i32 %bf.load396, 511
  %type403 = bitcast %union.tree_node* %27 to %struct.tree_type*
  %precision404 = getelementptr inbounds %struct.tree_type* %type403, i64 0, i32 6
  %bf.load405 = load i32* %precision404, align 4
  %bf.clear406 = and i32 %bf.load405, 511
  %cmp407 = icmp ult i32 %bf.clear397, %bf.clear406
  br i1 %cmp407, label %if.end413, label %tailrecurse

if.end413:                                        ; preds = %land.lhs.true391, %land.lhs.true369
  switch i32 %bf.clear53, label %if.end503 [
    i32 13, label %land.lhs.true429
    i32 15, label %land.lhs.true429
  ]

land.lhs.true429:                                 ; preds = %if.end90, %if.end90, %if.end156, %if.end156, %if.end253, %if.end253, %if.end337, %if.end337, %if.end413, %if.end413
  %.in1138.in = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %.in1138 = bitcast i32* %.in1138.in to %union.tree_node**
  %28 = load %union.tree_node** %.in1138, align 8
  %operands431 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx432 = bitcast i32* %operands431 to %union.tree_node**
  %type434 = getelementptr inbounds %union.tree_node* %28, i64 0, i32 0, i32 0, i32 1
  %29 = load %union.tree_node** %type434, align 8, !tbaa !27
  %code436 = getelementptr inbounds %union.tree_node* %29, i64 0, i32 0, i32 0, i32 2
  %bf.load437 = load i32* %code436, align 8
  %bf.clear438 = and i32 %bf.load437, 255
  switch i32 %bf.clear438, label %if.end503 [
    i32 6, label %if.then473
    i32 10, label %if.then473
    i32 11, label %if.then473
    i32 12, label %if.then473
  ]

if.then473:                                       ; preds = %land.lhs.true429, %land.lhs.true429, %land.lhs.true429, %land.lhs.true429
  %call477 = tail call i32 @integer_zerop(%union.tree_node* %28) #6
  %tobool478 = icmp eq i32 %call477, 0
  br i1 %tobool478, label %if.else, label %if.then479

if.then479:                                       ; preds = %if.then473
  %30 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !4
  br label %return

if.else:                                          ; preds = %if.then473
  %31 = load %union.tree_node** %type49, align 8, !tbaa !27
  %type482 = bitcast %union.tree_node* %31 to %struct.tree_type*
  %precision483 = getelementptr inbounds %struct.tree_type* %type482, i64 0, i32 6
  %bf.load484 = load i32* %precision483, align 4
  %bf.clear485 = and i32 %bf.load484, 511
  %32 = load %union.tree_node** %arrayidx432, align 8, !tbaa !4
  %type490 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 0, i32 1
  %33 = load %union.tree_node** %type490, align 8, !tbaa !27
  %type491 = bitcast %union.tree_node* %33 to %struct.tree_type*
  %precision492 = getelementptr inbounds %struct.tree_type* %type491, i64 0, i32 6
  %bf.load493 = load i32* %precision492, align 4
  %bf.clear494 = and i32 %bf.load493, 511
  %cmp495 = icmp ugt i32 %bf.clear485, %bf.clear494
  br i1 %cmp495, label %if.else.if.end503_crit_edge, label %tailrecurse

if.else.if.end503_crit_edge:                      ; preds = %if.else
  %code507.phi.trans.insert = getelementptr inbounds %union.tree_node* %31, i64 0, i32 0, i32 0, i32 2
  %bf.load508.pre = load i32* %code507.phi.trans.insert, align 8
  br label %if.end503

if.end503:                                        ; preds = %sw.bb47, %if.end90, %if.end156, %if.end253, %if.end337, %land.lhs.true106, %if.else.if.end503_crit_edge, %land.lhs.true429, %if.end413
  %bf.load508 = phi i32 [ %bf.load52, %land.lhs.true429 ], [ %bf.load52, %if.end413 ], [ %bf.load508.pre, %if.else.if.end503_crit_edge ], [ %bf.load52, %land.lhs.true106 ], [ %bf.load52, %if.end337 ], [ %bf.load52, %if.end253 ], [ %bf.load52, %if.end156 ], [ %bf.load52, %if.end90 ], [ %bf.load52, %sw.bb47 ]
  %bf.clear509 = and i32 %bf.load508, 255
  %cmp510 = icmp eq i32 %bf.clear509, 21
  br i1 %cmp510, label %if.then511, label %sw.epilog

if.then511:                                       ; preds = %if.end503
  %operands513 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx514 = bitcast i32* %operands513 to %union.tree_node**
  %34 = load %union.tree_node** %arrayidx514, align 8, !tbaa !4
  br label %tailrecurse

sw.bb517:                                         ; preds = %tailrecurse
  %code519 = getelementptr inbounds %union.tree_node* %endtype, i64 0, i32 0, i32 0, i32 2
  %bf.load520 = load i32* %code519, align 8
  %bf.clear521 = and i32 %bf.load520, 255
  switch i32 %bf.clear521, label %if.then549 [
    i32 6, label %lor.lhs.false541
    i32 10, label %lor.lhs.false541
    i32 11, label %lor.lhs.false541
    i32 12, label %lor.lhs.false541
  ]

lor.lhs.false541:                                 ; preds = %sw.bb517, %sw.bb517, %sw.bb517, %sw.bb517
  %type542 = bitcast %union.tree_node* %endtype to %struct.tree_type*
  %precision543 = getelementptr inbounds %struct.tree_type* %type542, i64 0, i32 6
  %bf.load544 = load i32* %precision543, align 4
  %bf.clear545 = and i32 %bf.load544, 511
  %35 = load i32* @target_flags, align 4, !tbaa !23
  %and = lshr i32 %35, 20
  %36 = and i32 %and, 32
  %37 = add i32 %36, 32
  %cmp548 = icmp ult i32 %bf.clear545, %37
  br i1 %cmp548, label %sw.epilog, label %if.then549

if.then549:                                       ; preds = %sw.bb517, %lor.lhs.false541
  %operands551 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx552 = bitcast i32* %operands551 to %union.tree_node**
  %38 = load %union.tree_node** %arrayidx552, align 8, !tbaa !4
  %call553 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %38, %union.tree_node* %endtype)
  %arrayidx556 = getelementptr inbounds i32* %operands551, i64 2
  %39 = bitcast i32* %arrayidx556 to %union.tree_node**
  %40 = load %union.tree_node** %39, align 8, !tbaa !4
  %call557 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %40, %union.tree_node* %endtype)
  %41 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !4
  %cmp558 = icmp eq %union.tree_node* %call553, %41
  br i1 %cmp558, label %return, label %if.end560

if.end560:                                        ; preds = %if.then549
  %cmp561 = icmp eq %union.tree_node* %call557, %41
  br i1 %cmp561, label %return, label %sw.epilog

sw.bb565:                                         ; preds = %tailrecurse
  %code567 = getelementptr inbounds %union.tree_node* %endtype, i64 0, i32 0, i32 0, i32 2
  %bf.load568 = load i32* %code567, align 8
  %bf.clear569 = and i32 %bf.load568, 255
  switch i32 %bf.clear569, label %if.then598 [
    i32 6, label %lor.lhs.false589
    i32 10, label %lor.lhs.false589
    i32 11, label %lor.lhs.false589
    i32 12, label %lor.lhs.false589
  ]

lor.lhs.false589:                                 ; preds = %sw.bb565, %sw.bb565, %sw.bb565, %sw.bb565
  %type590 = bitcast %union.tree_node* %endtype to %struct.tree_type*
  %precision591 = getelementptr inbounds %struct.tree_type* %type590, i64 0, i32 6
  %bf.load592 = load i32* %precision591, align 4
  %bf.clear593 = and i32 %bf.load592, 511
  %42 = load i32* @target_flags, align 4, !tbaa !23
  %and594 = lshr i32 %42, 20
  %43 = and i32 %and594, 32
  %44 = add i32 %43, 32
  %cmp597 = icmp ult i32 %bf.clear593, %44
  br i1 %cmp597, label %if.end638, label %if.then598

if.then598:                                       ; preds = %sw.bb565, %lor.lhs.false589
  %operands601 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx602 = bitcast i32* %operands601 to %union.tree_node**
  %45 = load %union.tree_node** %arrayidx602, align 8, !tbaa !4
  %call603 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %45, %union.tree_node* %endtype)
  %arrayidx607 = getelementptr inbounds i32* %operands601, i64 2
  %46 = bitcast i32* %arrayidx607 to %union.tree_node**
  %47 = load %union.tree_node** %46, align 8, !tbaa !4
  %call608 = tail call %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %47, %union.tree_node* %endtype)
  %48 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !4
  %cmp609 = icmp eq %union.tree_node* %call608, %48
  br i1 %cmp609, label %return, label %if.end611

if.end611:                                        ; preds = %if.then598
  %cmp612 = icmp eq %union.tree_node* %call603, %call608
  %cmp614 = icmp ne %union.tree_node* %call603, null
  %or.cond = and i1 %cmp612, %cmp614
  br i1 %or.cond, label %return, label %if.end616

if.end616:                                        ; preds = %if.end611
  br i1 %cmp614, label %land.lhs.true618, label %if.end638

land.lhs.true618:                                 ; preds = %if.end616
  %code620 = getelementptr inbounds %union.tree_node* %call603, i64 0, i32 0, i32 0, i32 2
  %bf.load621 = load i32* %code620, align 8
  %bf.clear622 = and i32 %bf.load621, 255
  %cmp623 = icmp eq i32 %bf.clear622, 29
  %tobool625 = icmp ne %union.tree_node* %call608, null
  %or.cond895 = and i1 %cmp623, %tobool625
  br i1 %or.cond895, label %land.lhs.true626, label %if.end638

land.lhs.true626:                                 ; preds = %land.lhs.true618
  %code628 = getelementptr inbounds %union.tree_node* %call608, i64 0, i32 0, i32 0, i32 2
  %bf.load629 = load i32* %code628, align 8
  %bf.clear630 = and i32 %bf.load629, 255
  %cmp631 = icmp eq i32 %bf.clear630, 29
  br i1 %cmp631, label %land.lhs.true632, label %if.end638

land.lhs.true632:                                 ; preds = %land.lhs.true626
  %pointer = getelementptr inbounds %union.tree_node* %call603, i64 0, i32 0, i32 4
  %49 = load %union.tree_node** %pointer, align 8
  %pointer634 = getelementptr inbounds %union.tree_node* %call608, i64 0, i32 0, i32 4
  %50 = load %union.tree_node** %pointer634, align 8
  %cmp635 = icmp eq %union.tree_node* %49, %50
  br i1 %cmp635, label %return, label %if.end638

if.end638:                                        ; preds = %lor.lhs.false589, %if.end616, %land.lhs.true618, %land.lhs.true626, %land.lhs.true632
  %bf.load641 = load i32* %code567, align 8
  %bf.clear642 = and i32 %bf.load641, 255
  switch i32 %bf.clear642, label %sw.epilog [
    i32 6, label %if.then662
    i32 10, label %if.then662
    i32 11, label %if.then662
    i32 12, label %if.then662
  ]

if.then662:                                       ; preds = %if.end638, %if.end638, %if.end638, %if.end638
  %operands664 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %arrayidx665 = bitcast i32* %operands664 to %union.tree_node**
  %51 = load %union.tree_node** %arrayidx665, align 8, !tbaa !4
  %arrayidx668 = getelementptr inbounds i32* %operands664, i64 2
  %52 = bitcast i32* %arrayidx668 to %union.tree_node**
  %53 = load %union.tree_node** %52, align 8, !tbaa !4
  %54 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !4
  br label %while.cond

while.cond:                                       ; preds = %lor.lhs.false732, %if.then662
  %op0.0 = phi %union.tree_node* [ %51, %if.then662 ], [ %55, %lor.lhs.false732 ]
  %code670 = getelementptr inbounds %union.tree_node* %op0.0, i64 0, i32 0, i32 0, i32 2
  %bf.load671 = load i32* %code670, align 8
  %bf.clear672 = and i32 %bf.load671, 255
  %bf.clear672.off = add i32 %bf.clear672, -114
  %switch1032 = icmp ult i32 %bf.clear672.off, 3
  br i1 %switch1032, label %while.body, label %while.cond756

while.body:                                       ; preds = %while.cond
  %operands687 = getelementptr inbounds %union.tree_node* %op0.0, i64 0, i32 0, i32 2
  %arrayidx688 = bitcast i32* %operands687 to %union.tree_node**
  %55 = load %union.tree_node** %arrayidx688, align 8, !tbaa !4
  %cmp689 = icmp eq %union.tree_node* %55, %54
  br i1 %cmp689, label %while.cond756, label %lor.lhs.false690

lor.lhs.false690:                                 ; preds = %while.body
  %type692 = getelementptr inbounds %union.tree_node* %55, i64 0, i32 0, i32 0, i32 1
  %56 = load %union.tree_node** %type692, align 8, !tbaa !27
  %type693 = bitcast %union.tree_node* %56 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type693, i64 0, i32 6
  %bf.load694 = load i32* %mode, align 4
  %bf.lshr695 = lshr i32 %bf.load694, 9
  %bf.clear696 = and i32 %bf.lshr695, 127
  %idxprom1029 = zext i32 %bf.clear696 to i64
  %arrayidx697 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom1029
  %57 = load i32* %arrayidx697, align 4, !tbaa !1
  switch i32 %57, label %while.cond756 [
    i32 1, label %lor.lhs.false732
    i32 3, label %lor.lhs.false732
    i32 5, label %lor.lhs.false732
    i32 7, label %lor.lhs.false732
  ]

lor.lhs.false732:                                 ; preds = %lor.lhs.false690, %lor.lhs.false690, %lor.lhs.false690, %lor.lhs.false690
  %.in1134 = getelementptr inbounds %union.tree_node* %op0.0, i64 0, i32 0, i32 0, i32 1
  %58 = load %union.tree_node** %.in1134, align 8
  %type735 = bitcast %union.tree_node* %58 to %struct.tree_type*
  %mode736 = getelementptr inbounds %struct.tree_type* %type735, i64 0, i32 6
  %bf.load737 = load i32* %mode736, align 4
  %bf.lshr738 = lshr i32 %bf.load737, 9
  %bf.clear739 = and i32 %bf.lshr738, 127
  %idxprom7401030 = zext i32 %bf.clear739 to i64
  %arrayidx741 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom7401030
  %59 = load i8* %arrayidx741, align 1, !tbaa !1
  %arrayidx750 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom1029
  %60 = load i8* %arrayidx750, align 1, !tbaa !1
  %cmp752 = icmp ugt i8 %59, %60
  br i1 %cmp752, label %while.cond756, label %while.cond

while.cond756:                                    ; preds = %while.cond, %lor.lhs.false690, %lor.lhs.false732, %while.body, %lor.lhs.false833
  %op1.0 = phi %union.tree_node* [ %61, %lor.lhs.false833 ], [ %53, %while.body ], [ %53, %lor.lhs.false732 ], [ %53, %lor.lhs.false690 ], [ %53, %while.cond ]
  %code758 = getelementptr inbounds %union.tree_node* %op1.0, i64 0, i32 0, i32 0, i32 2
  %bf.load759 = load i32* %code758, align 8
  %bf.clear760 = and i32 %bf.load759, 255
  %bf.clear760.off = add i32 %bf.clear760, -114
  %switch1033 = icmp ult i32 %bf.clear760.off, 3
  br i1 %switch1033, label %while.body778, label %while.end858

while.body778:                                    ; preds = %while.cond756
  %operands781 = getelementptr inbounds %union.tree_node* %op1.0, i64 0, i32 0, i32 2
  %arrayidx782 = bitcast i32* %operands781 to %union.tree_node**
  %61 = load %union.tree_node** %arrayidx782, align 8, !tbaa !4
  %cmp783 = icmp eq %union.tree_node* %61, %54
  br i1 %cmp783, label %while.end858, label %lor.lhs.false785

lor.lhs.false785:                                 ; preds = %while.body778
  %type787 = getelementptr inbounds %union.tree_node* %61, i64 0, i32 0, i32 0, i32 1
  %62 = load %union.tree_node** %type787, align 8, !tbaa !27
  %type788 = bitcast %union.tree_node* %62 to %struct.tree_type*
  %mode789 = getelementptr inbounds %struct.tree_type* %type788, i64 0, i32 6
  %bf.load790 = load i32* %mode789, align 4
  %bf.lshr791 = lshr i32 %bf.load790, 9
  %bf.clear792 = and i32 %bf.lshr791, 127
  %idxprom7931026 = zext i32 %bf.clear792 to i64
  %arrayidx794 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom7931026
  %63 = load i32* %arrayidx794, align 4, !tbaa !1
  switch i32 %63, label %while.end858 [
    i32 1, label %lor.lhs.false833
    i32 3, label %lor.lhs.false833
    i32 5, label %lor.lhs.false833
    i32 7, label %lor.lhs.false833
  ]

lor.lhs.false833:                                 ; preds = %lor.lhs.false785, %lor.lhs.false785, %lor.lhs.false785, %lor.lhs.false785
  %.in = getelementptr inbounds %union.tree_node* %op1.0, i64 0, i32 0, i32 0, i32 1
  %64 = load %union.tree_node** %.in, align 8
  %type836 = bitcast %union.tree_node* %64 to %struct.tree_type*
  %mode837 = getelementptr inbounds %struct.tree_type* %type836, i64 0, i32 6
  %bf.load838 = load i32* %mode837, align 4
  %bf.lshr839 = lshr i32 %bf.load838, 9
  %bf.clear840 = and i32 %bf.lshr839, 127
  %idxprom8411027 = zext i32 %bf.clear840 to i64
  %arrayidx842 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom8411027
  %65 = load i8* %arrayidx842, align 1, !tbaa !1
  %arrayidx852 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom7931026
  %66 = load i8* %arrayidx852, align 1, !tbaa !1
  %cmp854 = icmp ugt i8 %65, %66
  br i1 %cmp854, label %while.end858, label %while.cond756

while.end858:                                     ; preds = %while.cond756, %lor.lhs.false785, %while.body778, %lor.lhs.false833
  %cmp863 = icmp eq i32 %bf.clear672, 121
  br i1 %cmp863, label %land.lhs.true865, label %sw.epilog

land.lhs.true865:                                 ; preds = %while.end858
  %operands867 = getelementptr inbounds %union.tree_node* %op0.0, i64 0, i32 0, i32 2
  %arrayidx868 = bitcast i32* %operands867 to %union.tree_node**
  %67 = load %union.tree_node** %arrayidx868, align 8, !tbaa !4
  %code870 = getelementptr inbounds %union.tree_node* %67, i64 0, i32 0, i32 0, i32 2
  %bf.load871 = load i32* %code870, align 8
  %bf.clear872 = and i32 %bf.load871, 255
  %cmp873 = icmp eq i32 %bf.clear872, 31
  %cmp880 = icmp eq i32 %bf.clear760, 121
  %or.cond1139 = and i1 %cmp873, %cmp880
  br i1 %or.cond1139, label %land.lhs.true882, label %sw.epilog

land.lhs.true882:                                 ; preds = %land.lhs.true865
  %operands884 = getelementptr inbounds %union.tree_node* %op1.0, i64 0, i32 0, i32 2
  %arrayidx885 = bitcast i32* %operands884 to %union.tree_node**
  %68 = load %union.tree_node** %arrayidx885, align 8, !tbaa !4
  %code887 = getelementptr inbounds %union.tree_node* %68, i64 0, i32 0, i32 0, i32 2
  %bf.load888 = load i32* %code887, align 8
  %bf.clear889 = and i32 %bf.load888, 255
  %cmp890 = icmp eq i32 %bf.clear889, 31
  br i1 %cmp890, label %if.then892, label %sw.epilog

if.then892:                                       ; preds = %land.lhs.true882
  %69 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 8, !tbaa !4
  br label %return

sw.epilog:                                        ; preds = %tailrecurse, %if.end503, %if.end638, %lor.lhs.false541, %land.lhs.true882, %land.lhs.true865, %while.end858, %if.end560, %if.then329
  br label %return

return:                                           ; preds = %land.lhs.true632, %if.end611, %if.then598, %if.end560, %if.then549, %if.then329, %cond.true35, %sw.bb29, %sw.epilog, %if.then892, %if.then479, %sw.bb28, %if.end
  %retval.0 = phi %union.tree_node* [ null, %sw.epilog ], [ %69, %if.then892 ], [ %30, %if.then479 ], [ %8, %sw.bb28 ], [ %cond, %if.end ], [ %10, %cond.true35 ], [ null, %sw.bb29 ], [ %call333, %if.then329 ], [ %call557, %if.then549 ], [ %call553, %if.end560 ], [ %call603, %if.then598 ], [ %48, %if.end611 ], [ %48, %land.lhs.true632 ]
  ret %union.tree_node* %retval.0
}

declare i32 @staticp(%union.tree_node*) #3

declare i32 @integer_zerop(%union.tree_node*) #3

declare %struct.rtx_def* @expand_expr(%union.tree_node*, %struct.rtx_def*, i32, i32) #3

; Function Attrs: nounwind uwtable
define internal fastcc void @output_constructor(%union.tree_node* nocapture readonly %exp, i64 %size, i32 %align) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !27
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.end16 [
    i32 20, label %if.end.thread
    i32 18, label %land.lhs.true
  ]

if.end.thread:                                    ; preds = %entry
  %values = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 1
  %1 = load i8** %values, align 8
  %2 = bitcast i8* %1 to %union.tree_node*
  br label %if.end16

land.lhs.true:                                    ; preds = %entry
  %values10 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 1
  %3 = load i8** %values10, align 8
  %cmp11 = icmp eq i8* %3, null
  br i1 %cmp11, label %if.end16, label %if.then12

if.then12:                                        ; preds = %land.lhs.true
  %minval = getelementptr inbounds i8* %3, i64 104
  %4 = bitcast i8* %minval to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !121
  br label %if.end16

if.end16:                                         ; preds = %entry, %if.end.thread, %land.lhs.true, %if.then12
  %field.0663 = phi %union.tree_node* [ null, %if.then12 ], [ null, %land.lhs.true ], [ %2, %if.end.thread ], [ null, %entry ]
  %min_index.0 = phi %union.tree_node* [ %5, %if.then12 ], [ null, %land.lhs.true ], [ null, %if.end.thread ], [ null, %entry ]
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %6 = bitcast i32* %arrayidx to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !4
  %tobool649 = icmp eq %union.tree_node* %7, null
  br i1 %tobool649, label %if.end357, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end16
  %type103 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.cond.backedge.for.body_crit_edge, %for.body.lr.ph
  %bf.load42 = phi i32 [ %bf.load, %for.body.lr.ph ], [ %bf.load20.pre, %for.cond.backedge.for.body_crit_edge ]
  %link.0654 = phi %union.tree_node* [ %7, %for.body.lr.ph ], [ %85, %for.cond.backedge.for.body_crit_edge ]
  %field.1653 = phi %union.tree_node* [ %field.0663, %for.body.lr.ph ], [ %field.1.be, %for.cond.backedge.for.body_crit_edge ]
  %total_bytes.0652 = phi i64 [ 0, %for.body.lr.ph ], [ %total_bytes.8672, %for.cond.backedge.for.body_crit_edge ]
  %byte_buffer_in_use.0651 = phi i32 [ 0, %for.body.lr.ph ], [ %byte_buffer_in_use.5670, %for.cond.backedge.for.body_crit_edge ]
  %byte.0650 = phi i32 [ 0, %for.body.lr.ph ], [ %byte.3668, %for.cond.backedge.for.body_crit_edge ]
  %value = getelementptr inbounds %union.tree_node* %link.0654, i64 0, i32 0, i32 2
  %8 = bitcast i32* %value to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !60
  %bf.clear21 = and i32 %bf.load42, 255
  %bf.clear21.off = add i32 %bf.clear21, -20
  %switch = icmp ult i32 %bf.clear21.off, 3
  br i1 %switch, label %land.lhs.true34, label %if.else

land.lhs.true34:                                  ; preds = %for.body
  %purpose = getelementptr inbounds %union.tree_node* %link.0654, i64 0, i32 0, i32 1
  %10 = load i8** %purpose, align 8
  %cmp36 = icmp eq i8* %10, null
  br i1 %cmp36, label %if.end49, label %if.then37

if.then37:                                        ; preds = %land.lhs.true34
  %11 = bitcast i8* %10 to %union.tree_node*
  br label %if.end49

if.else:                                          ; preds = %for.body
  %cmp44 = icmp eq i32 %bf.clear21, 18
  br i1 %cmp44, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.else
  %purpose47 = getelementptr inbounds %union.tree_node* %link.0654, i64 0, i32 0, i32 1
  %12 = load i8** %purpose47, align 8
  %13 = bitcast i8* %12 to %union.tree_node*
  br label %if.end49

if.end49:                                         ; preds = %land.lhs.true34, %if.else, %if.then45, %if.then37
  %index.0 = phi %union.tree_node* [ null, %if.then37 ], [ %13, %if.then45 ], [ null, %if.else ], [ null, %land.lhs.true34 ]
  %field.2 = phi %union.tree_node* [ %11, %if.then37 ], [ %field.1653, %if.then45 ], [ %field.1653, %if.else ], [ %field.1653, %land.lhs.true34 ]
  %cmp50 = icmp eq %union.tree_node* %9, null
  br i1 %cmp50, label %if.end93, label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.end49
  %14 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !4
  br label %while.cond

while.cond:                                       ; preds = %while.cond.preheader, %land.rhs
  %val.0 = phi %union.tree_node* [ %15, %land.rhs ], [ %9, %while.cond.preheader ]
  %code53 = getelementptr inbounds %union.tree_node* %val.0, i64 0, i32 0, i32 0, i32 2
  %bf.load54 = load i32* %code53, align 8
  %bf.clear55 = and i32 %bf.load54, 255
  %bf.clear55.off = add i32 %bf.clear55, -114
  %switch482 = icmp ult i32 %bf.clear55.off, 3
  br i1 %switch482, label %land.lhs.true69, label %if.end93

land.lhs.true69:                                  ; preds = %while.cond
  %operands71 = getelementptr inbounds %union.tree_node* %val.0, i64 0, i32 0, i32 2
  %arrayidx72 = bitcast i32* %operands71 to %union.tree_node**
  %15 = load %union.tree_node** %arrayidx72, align 8, !tbaa !4
  %cmp73 = icmp eq %union.tree_node* %15, %14
  br i1 %cmp73, label %if.end93, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true69
  %type75 = getelementptr inbounds %union.tree_node* %val.0, i64 0, i32 0, i32 0, i32 1
  %16 = load %union.tree_node** %type75, align 8, !tbaa !27
  %type76 = bitcast %union.tree_node* %16 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type76, i64 0, i32 6
  %bf.load77 = load i32* %mode, align 4
  %type83 = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 0, i32 1
  %17 = load %union.tree_node** %type83, align 8, !tbaa !27
  %type84 = bitcast %union.tree_node* %17 to %struct.tree_type*
  %mode85 = getelementptr inbounds %struct.tree_type* %type84, i64 0, i32 6
  %bf.load86 = load i32* %mode85, align 4
  %bf.lshr479 = xor i32 %bf.load86, %bf.load77
  %18 = and i32 %bf.lshr479, 65024
  %cmp89 = icmp eq i32 %18, 0
  br i1 %cmp89, label %while.cond, label %if.end93

if.end93:                                         ; preds = %while.cond, %land.lhs.true69, %land.rhs, %if.end49
  %val.1 = phi %union.tree_node* [ null, %if.end49 ], [ %val.0, %land.rhs ], [ %val.0, %land.lhs.true69 ], [ %val.0, %while.cond ]
  %tobool94 = icmp ne %union.tree_node* %index.0, null
  br i1 %tobool94, label %land.lhs.true95, label %if.else124

land.lhs.true95:                                  ; preds = %if.end93
  %code97 = getelementptr inbounds %union.tree_node* %index.0, i64 0, i32 0, i32 0, i32 2
  %bf.load98 = load i32* %code97, align 8
  %bf.clear99 = and i32 %bf.load98, 255
  %cmp100 = icmp eq i32 %bf.clear99, 113
  br i1 %cmp100, label %if.then101, label %if.else124

if.then101:                                       ; preds = %land.lhs.true95
  %19 = load %union.tree_node** %type103, align 8, !tbaa !27
  %call = tail call i64 @int_size_in_bytes(%union.tree_node* %19) #6
  %operands105 = getelementptr inbounds %union.tree_node* %index.0, i64 0, i32 0, i32 2
  %arrayidx106 = bitcast i32* %operands105 to %union.tree_node**
  %20 = load %union.tree_node** %arrayidx106, align 8, !tbaa !4
  %call107 = tail call i64 @tree_low_cst(%union.tree_node* %20, i32 0) #6
  %arrayidx110 = getelementptr inbounds i32* %operands105, i64 2
  %21 = bitcast i32* %arrayidx110 to %union.tree_node**
  %22 = load %union.tree_node** %21, align 8, !tbaa !4
  %call111 = tail call i64 @tree_low_cst(%union.tree_node* %22, i32 0) #6
  %mul = shl i64 %call, 3
  %conv = trunc i64 %mul to i32
  %or.i = or i32 %conv, %align
  %sub.i = sub i32 0, %or.i
  %and.i = and i32 %or.i, %sub.i
  %cmp115621 = icmp sgt i64 %call107, %call111
  br i1 %cmp115621, label %for.inc340, label %for.body117.lr.ph

for.body117.lr.ph:                                ; preds = %if.then101
  %cmp118 = icmp eq %union.tree_node* %val.1, null
  %conv121 = trunc i64 %call to i32
  %cmp12.i = icmp sgt i32 %conv121, 0
  br i1 %cmp118, label %if.then120.us, label %for.body117.lr.ph.for.body117.lr.ph.split_crit_edge

for.body117.lr.ph.for.body117.lr.ph.split_crit_edge: ; preds = %for.body117.lr.ph
  br i1 %cmp12.i, label %if.end123.us643, label %if.end123

if.then120.us:                                    ; preds = %for.body117.lr.ph, %if.end123.us
  %total_bytes.1623.us = phi i64 [ %add.us, %if.end123.us ], [ %total_bytes.0652, %for.body117.lr.ph ]
  %index112.0622.us = phi i64 [ %inc.us, %if.end123.us ], [ %call107, %for.body117.lr.ph ]
  %23 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool.i.us = icmp eq i32 %23, 0
  br i1 %tobool.i.us, label %if.end.i.us, label %if.end123.us

if.end.i.us:                                      ; preds = %if.then120.us
  %24 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i.us = icmp eq i32 %24, 1
  br i1 %cmp.i.i.us, label %for.cond.preheader.i.us, label %if.else.i.us

if.else.i.us:                                     ; preds = %if.end.i.us
  br i1 %cmp12.i, label %if.then5.i.us, label %if.end123.us

if.then5.i.us:                                    ; preds = %if.else.i.us
  %25 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i.us = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %conv121) #6
  br label %if.end123.us

for.cond.preheader.i.us:                          ; preds = %if.end.i.us
  br i1 %cmp12.i, label %for.body.i.us, label %if.end123.us

for.body.i.us:                                    ; preds = %for.cond.preheader.i.us, %for.cond.i.us
  %i.013.i.us = phi i32 [ %inc.i.us, %for.cond.i.us ], [ 0, %for.cond.preheader.i.us ]
  %26 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !4
  %27 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i.i.us = tail call zeroext i1 %27(%struct.rtx_def* %26, i32 1, i32 1) #6
  %inc.i.us = add nsw i32 %i.013.i.us, 1
  br i1 %call.i.i.us, label %for.cond.i.us, label %if.end.i.i

for.cond.i.us:                                    ; preds = %for.body.i.us
  %cmp.i.us = icmp slt i32 %inc.i.us, %conv121
  br i1 %cmp.i.us, label %for.body.i.us, label %if.end123.us

if.end123.us:                                     ; preds = %for.cond.i.us, %for.cond.preheader.i.us, %if.then5.i.us, %if.else.i.us, %if.then120.us
  %add.us = add i64 %total_bytes.1623.us, %call
  %inc.us = add nsw i64 %index112.0622.us, 1
  %cmp115.us = icmp slt i64 %index112.0622.us, %call111
  br i1 %cmp115.us, label %if.then120.us, label %for.inc340

if.end123.us643:                                  ; preds = %for.body117.lr.ph.for.body117.lr.ph.split_crit_edge, %if.end123.us643
  %total_bytes.1623.us626 = phi i64 [ %add.us644, %if.end123.us643 ], [ %total_bytes.0652, %for.body117.lr.ph.for.body117.lr.ph.split_crit_edge ]
  %index112.0622.us627 = phi i64 [ %inc.us645, %if.end123.us643 ], [ %call107, %for.body117.lr.ph.for.body117.lr.ph.split_crit_edge ]
  tail call void @output_constant(%union.tree_node* %val.1, i64 %call, i32 %and.i)
  %add.us644 = add i64 %total_bytes.1623.us626, %call
  %inc.us645 = add nsw i64 %index112.0622.us627, 1
  %cmp115.us646 = icmp slt i64 %index112.0622.us627, %call111
  br i1 %cmp115.us646, label %if.end123.us643, label %for.inc340

if.end.i.i:                                       ; preds = %for.body.i.us
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.end123:                                        ; preds = %for.body117.lr.ph.for.body117.lr.ph.split_crit_edge, %if.end123
  %total_bytes.1623 = phi i64 [ %add, %if.end123 ], [ %total_bytes.0652, %for.body117.lr.ph.for.body117.lr.ph.split_crit_edge ]
  %index112.0622 = phi i64 [ %inc, %if.end123 ], [ %call107, %for.body117.lr.ph.for.body117.lr.ph.split_crit_edge ]
  tail call void @output_constant(%union.tree_node* %val.1, i64 %call, i32 %and.i)
  %add = add i64 %total_bytes.1623, %call
  %inc = add nsw i64 %index112.0622, 1
  %cmp115 = icmp slt i64 %index112.0622, %call111
  br i1 %cmp115, label %if.end123, label %for.inc340

if.else124:                                       ; preds = %land.lhs.true95, %if.end93
  %cmp125 = icmp eq %union.tree_node* %field.2, null
  br i1 %cmp125, label %cond.end, label %lor.lhs.false127

lor.lhs.false127:                                 ; preds = %if.else124
  %bit_field_flag = getelementptr inbounds %union.tree_node* %field.2, i64 0, i32 0, i32 5
  %28 = bitcast i48* %bit_field_flag to i64*
  %bf.load128 = load i64* %28, align 8
  %bf.cast = and i64 %bf.load128, 4096
  %tobool131 = icmp eq i64 %bf.cast, 0
  br i1 %tobool131, label %cond.true, label %if.else231

cond.true:                                        ; preds = %lor.lhs.false127
  %call135 = tail call i64 @int_byte_position(%union.tree_node* %field.2) #6
  br label %cond.end

cond.end:                                         ; preds = %if.else124, %cond.true
  %tobool134570 = phi i1 [ true, %cond.true ], [ false, %if.else124 ]
  %cond = phi i64 [ %call135, %cond.true ], [ 0, %if.else124 ]
  br i1 %tobool94, label %if.then139, label %if.end147

if.then139:                                       ; preds = %cond.end
  %type141 = getelementptr inbounds %union.tree_node* %val.1, i64 0, i32 0, i32 0, i32 1
  %29 = load %union.tree_node** %type141, align 8, !tbaa !27
  %30 = getelementptr inbounds %union.tree_node* %29, i64 0, i32 0, i32 4
  %31 = load %union.tree_node** %30, align 8, !tbaa !122
  %call143 = tail call i64 @tree_low_cst(%union.tree_node* %31, i32 1) #6
  %call144 = tail call i64 @tree_low_cst(%union.tree_node* %index.0, i32 0) #6
  %call145 = tail call i64 @tree_low_cst(%union.tree_node* %min_index.0, i32 0) #6
  %sub = sub nsw i64 %call144, %call145
  %mul146 = mul nsw i64 %sub, %call143
  br label %if.end147

if.end147:                                        ; preds = %if.then139, %cond.end
  %pos.0 = phi i64 [ %mul146, %if.then139 ], [ %cond, %cond.end ]
  %tobool148 = icmp eq i32 %byte_buffer_in_use.0651, 0
  br i1 %tobool148, label %if.end154, label %if.then149

if.then149:                                       ; preds = %if.end147
  %conv150 = sext i32 %byte.0650 to i64
  %call151 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv150) #6
  %32 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i = tail call zeroext i1 %32(%struct.rtx_def* %call151, i32 1, i32 1) #6
  br i1 %call.i, label %assemble_integer.exit, label %if.end.i483

if.end.i483:                                      ; preds = %if.then149
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

assemble_integer.exit:                            ; preds = %if.then149
  %inc153 = add nsw i64 %total_bytes.0652, 1
  br label %if.end154

if.end154:                                        ; preds = %if.end147, %assemble_integer.exit
  %total_bytes.2 = phi i64 [ %inc153, %assemble_integer.exit ], [ %total_bytes.0652, %if.end147 ]
  %or.cond = or i1 %tobool134570, %tobool94
  %or.cond.not = xor i1 %or.cond, true
  %cmp161 = icmp eq i64 %pos.0, %total_bytes.2
  %or.cond480 = or i1 %cmp161, %or.cond.not
  br i1 %or.cond480, label %if.end166, label %if.then163

if.then163:                                       ; preds = %if.end154
  %sub164 = sub nsw i64 %pos.0, %total_bytes.2
  %conv165 = trunc i64 %sub164 to i32
  %33 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool.i484 = icmp eq i32 %33, 0
  br i1 %tobool.i484, label %if.end.i487, label %if.end166

if.end.i487:                                      ; preds = %if.then163
  %34 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i485 = icmp eq i32 %34, 1
  %cmp12.i486 = icmp sgt i32 %conv165, 0
  br i1 %cmp.i.i485, label %for.cond.preheader.i488, label %if.else.i496

for.cond.preheader.i488:                          ; preds = %if.end.i487
  br i1 %cmp12.i486, label %for.body.i494, label %if.end166

for.cond.i490:                                    ; preds = %for.body.i494
  %cmp.i489 = icmp slt i32 %inc.i493, %conv165
  br i1 %cmp.i489, label %for.body.i494, label %if.end166

for.body.i494:                                    ; preds = %for.cond.preheader.i488, %for.cond.i490
  %i.013.i491 = phi i32 [ %inc.i493, %for.cond.i490 ], [ 0, %for.cond.preheader.i488 ]
  %35 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !4
  %36 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i.i492 = tail call zeroext i1 %36(%struct.rtx_def* %35, i32 1, i32 1) #6
  %inc.i493 = add nsw i32 %i.013.i491, 1
  br i1 %call.i.i492, label %for.cond.i490, label %if.end.i.i495

if.end.i.i495:                                    ; preds = %for.body.i494
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.else.i496:                                     ; preds = %if.end.i487
  br i1 %cmp12.i486, label %if.then5.i498, label %if.end166

if.then5.i498:                                    ; preds = %if.else.i496
  %37 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i497 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %conv165) #6
  br label %if.end166

if.end166:                                        ; preds = %for.cond.i490, %if.then5.i498, %if.else.i496, %for.cond.preheader.i488, %if.then163, %if.end154
  %total_bytes.3 = phi i64 [ %total_bytes.2, %if.end154 ], [ %pos.0, %if.then163 ], [ %pos.0, %for.cond.preheader.i488 ], [ %pos.0, %if.else.i496 ], [ %pos.0, %if.then5.i498 ], [ %pos.0, %for.cond.i490 ]
  %mul167 = shl nsw i64 %pos.0, 3
  %conv168 = trunc i64 %mul167 to i32
  %or.i500 = or i32 %conv168, %align
  %sub.i501 = sub i32 0, %or.i500
  %and.i502 = and i32 %or.i500, %sub.i501
  br i1 %tobool134570, label %if.then171, label %if.else219

if.then171:                                       ; preds = %if.end166
  %type173 = getelementptr inbounds %union.tree_node* %field.2, i64 0, i32 0, i32 0, i32 1
  %38 = load %union.tree_node** %type173, align 8, !tbaa !27
  %code175 = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 0, i32 2
  %bf.load176 = load i32* %code175, align 8
  %bf.clear177 = and i32 %bf.load176, 255
  %cmp178 = icmp eq i32 %bf.clear177, 18
  br i1 %cmp178, label %land.lhs.true180, label %if.else203

land.lhs.true180:                                 ; preds = %if.then171
  %values184 = getelementptr inbounds %union.tree_node* %38, i64 0, i32 0, i32 1
  %39 = load i8** %values184, align 8
  %tobool185 = icmp eq i8* %39, null
  br i1 %tobool185, label %if.else203, label %land.lhs.true186

land.lhs.true186:                                 ; preds = %land.lhs.true180
  %maxval = getelementptr inbounds i8* %39, i64 112
  %40 = bitcast i8* %maxval to %union.tree_node**
  %41 = load %union.tree_node** %40, align 8, !tbaa !123
  %tobool192 = icmp eq %union.tree_node* %41, null
  br i1 %tobool192, label %if.then193, label %if.else203

if.then193:                                       ; preds = %land.lhs.true186
  %code.i = getelementptr inbounds %union.tree_node* %val.1, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %code.i, align 8
  %bf.clear.i = and i32 %bf.load.i, 255
  %cmp.i503 = icmp eq i32 %bf.clear.i, 29
  %42 = getelementptr inbounds %union.tree_node* %val.1, i64 0, i32 0, i32 2
  br i1 %cmp.i503, label %if.then.i, label %if.end.i504

if.then.i:                                        ; preds = %if.then193
  %43 = load i32* %42, align 4, !tbaa !28
  %conv.i = sext i32 %43 to i64
  br label %array_size_for_constructor.exit

if.end.i504:                                      ; preds = %if.then193
  %arrayidx.i = getelementptr inbounds i32* %42, i64 2
  %44 = bitcast i32* %arrayidx.i to %union.tree_node**
  %i.052.i = load %union.tree_node** %44, align 8
  %tobool53.i = icmp eq %union.tree_node* %i.052.i, null
  br i1 %tobool53.i, label %if.end223, label %for.body.i505

for.body.i505:                                    ; preds = %if.end.i504, %for.inc.i
  %i.055.i = phi %union.tree_node* [ %i.0.i, %for.inc.i ], [ %i.052.i, %if.end.i504 ]
  %max_index.054.i = phi %union.tree_node* [ %max_index.1.i, %for.inc.i ], [ null, %if.end.i504 ]
  %purpose.i = getelementptr inbounds %union.tree_node* %i.055.i, i64 0, i32 0, i32 1
  %45 = load i8** %purpose.i, align 8
  %46 = bitcast i8* %45 to %union.tree_node*
  %code2.i = getelementptr inbounds i8* %45, i64 16
  %47 = bitcast i8* %code2.i to i32*
  %bf.load3.i = load i32* %47, align 8
  %bf.clear4.i = and i32 %bf.load3.i, 255
  %cmp5.i = icmp eq i32 %bf.clear4.i, 113
  br i1 %cmp5.i, label %if.then7.i, label %if.end11.i

if.then7.i:                                       ; preds = %for.body.i505
  %arrayidx10.i = getelementptr inbounds i8* %45, i64 40
  %48 = bitcast i8* %arrayidx10.i to %union.tree_node**
  %49 = load %union.tree_node** %48, align 8, !tbaa !4
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then7.i, %for.body.i505
  %index.0.i = phi %union.tree_node* [ %49, %if.then7.i ], [ %46, %for.body.i505 ]
  %cmp12.i506 = icmp eq %union.tree_node* %max_index.054.i, null
  br i1 %cmp12.i506, label %if.then15.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %if.end11.i
  %call.i507 = tail call i32 @tree_int_cst_lt(%union.tree_node* %max_index.054.i, %union.tree_node* %index.0.i) #6
  %tobool14.i = icmp eq i32 %call.i507, 0
  br i1 %tobool14.i, label %for.inc.i, label %if.then15.i

if.then15.i:                                      ; preds = %lor.lhs.false.i, %if.end11.i
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then15.i, %lor.lhs.false.i
  %max_index.1.i = phi %union.tree_node* [ %index.0.i, %if.then15.i ], [ %max_index.054.i, %lor.lhs.false.i ]
  %chain.i = getelementptr inbounds %union.tree_node* %i.055.i, i64 0, i32 0, i32 0, i32 0
  %i.0.i = load %union.tree_node** %chain.i, align 8
  %tobool.i508 = icmp eq %union.tree_node* %i.0.i, null
  br i1 %tobool.i508, label %for.end.i, label %for.body.i505

for.end.i:                                        ; preds = %for.inc.i
  %cmp18.i = icmp eq %union.tree_node* %max_index.1.i, null
  br i1 %cmp18.i, label %if.end223, label %if.end21.i

if.end21.i:                                       ; preds = %for.end.i
  %50 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !4
  %call22.i = tail call %union.tree_node* @convert(%union.tree_node* %50, %union.tree_node* %max_index.1.i) #6
  %51 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !4
  %type.i = getelementptr inbounds %union.tree_node* %val.1, i64 0, i32 0, i32 0, i32 1
  %52 = load %union.tree_node** %type.i, align 8, !tbaa !27
  %values.i = getelementptr inbounds %union.tree_node* %52, i64 0, i32 0, i32 1
  %53 = load i8** %values.i, align 8
  %minval.i = getelementptr inbounds i8* %53, i64 104
  %54 = bitcast i8* %minval.i to %union.tree_node**
  %55 = load %union.tree_node** %54, align 8, !tbaa !121
  %call26.i = tail call %union.tree_node* @convert(%union.tree_node* %51, %union.tree_node* %55) #6
  %call27.i = tail call %union.tree_node* @size_binop(i32 60, %union.tree_node* %call22.i, %union.tree_node* %call26.i) #6
  %56 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !4
  %57 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !4
  %call28.i = tail call %union.tree_node* @convert(%union.tree_node* %56, %union.tree_node* %57) #6
  %call29.i = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call27.i, %union.tree_node* %call28.i) #6
  %58 = load %union.tree_node** %type.i, align 8, !tbaa !27
  %type33.i = getelementptr inbounds %union.tree_node* %58, i64 0, i32 0, i32 0, i32 1
  %59 = load %union.tree_node** %type33.i, align 8, !tbaa !27
  %60 = getelementptr inbounds %union.tree_node* %59, i64 0, i32 0, i32 4
  %61 = load %union.tree_node** %60, align 8, !tbaa !122
  %call35.i = tail call %union.tree_node* @size_binop(i32 61, %union.tree_node* %call29.i, %union.tree_node* %61) #6
  %call36.i = tail call i64 @tree_low_cst(%union.tree_node* %call35.i, i32 1) #6
  br label %array_size_for_constructor.exit

array_size_for_constructor.exit:                  ; preds = %if.then.i, %if.end21.i
  %retval.0.i = phi i64 [ %conv.i, %if.then.i ], [ %call36.i, %if.end21.i ]
  %cmp195 = icmp eq i64 %retval.0.i, 0
  br i1 %cmp195, label %if.end223, label %land.lhs.true197

land.lhs.true197:                                 ; preds = %array_size_for_constructor.exit
  %chain = getelementptr inbounds %union.tree_node* %field.2, i64 0, i32 0, i32 0, i32 0
  %62 = load %union.tree_node** %chain, align 8, !tbaa !62
  %cmp199 = icmp eq %union.tree_node* %62, null
  br i1 %cmp199, label %if.end223, label %if.then201

if.then201:                                       ; preds = %land.lhs.true197
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4821, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.output_constructor, i64 0, i64 0)) #9
  unreachable

if.else203:                                       ; preds = %land.lhs.true186, %land.lhs.true180, %if.then171
  %size_unit205 = getelementptr inbounds %union.tree_node* %field.2, i64 0, i32 0, i32 7
  %63 = load %union.tree_node** %size_unit205, align 8, !tbaa !66
  %tobool206 = icmp eq %union.tree_node* %63, null
  br i1 %tobool206, label %if.end223, label %if.then207

if.then207:                                       ; preds = %if.else203
  %call210 = tail call i32 @host_integerp(%union.tree_node* %63, i32 1) #6
  %tobool211 = icmp eq i32 %call210, 0
  br i1 %tobool211, label %if.end223, label %if.then212

if.then212:                                       ; preds = %if.then207
  %64 = load %union.tree_node** %size_unit205, align 8, !tbaa !66
  %call215 = tail call i64 @tree_low_cst(%union.tree_node* %64, i32 1) #6
  br label %if.end223

if.else219:                                       ; preds = %if.end166
  %65 = load %union.tree_node** %type103, align 8, !tbaa !27
  %call222 = tail call i64 @int_size_in_bytes(%union.tree_node* %65) #6
  br label %if.end223

if.end223:                                        ; preds = %if.end.i504, %for.end.i, %land.lhs.true197, %array_size_for_constructor.exit, %if.then207, %if.else203, %if.then212, %if.else219
  %fieldsize133.0 = phi i64 [ %call215, %if.then212 ], [ 0, %if.then207 ], [ 0, %if.else203 ], [ %retval.0.i, %land.lhs.true197 ], [ 0, %array_size_for_constructor.exit ], [ %call222, %if.else219 ], [ 0, %for.end.i ], [ 0, %if.end.i504 ]
  %cmp224 = icmp eq %union.tree_node* %val.1, null
  br i1 %cmp224, label %if.then226, label %if.else228

if.then226:                                       ; preds = %if.end223
  %conv227 = trunc i64 %fieldsize133.0 to i32
  %66 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool.i509 = icmp eq i32 %66, 0
  br i1 %tobool.i509, label %if.end.i512, label %if.end229

if.end.i512:                                      ; preds = %if.then226
  %67 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i510 = icmp eq i32 %67, 1
  %cmp12.i511 = icmp sgt i32 %conv227, 0
  br i1 %cmp.i.i510, label %for.cond.preheader.i513, label %if.else.i521

for.cond.preheader.i513:                          ; preds = %if.end.i512
  br i1 %cmp12.i511, label %for.body.i519, label %if.end229

for.cond.i515:                                    ; preds = %for.body.i519
  %cmp.i514 = icmp slt i32 %inc.i518, %conv227
  br i1 %cmp.i514, label %for.body.i519, label %if.end229

for.body.i519:                                    ; preds = %for.cond.preheader.i513, %for.cond.i515
  %i.013.i516 = phi i32 [ %inc.i518, %for.cond.i515 ], [ 0, %for.cond.preheader.i513 ]
  %68 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !4
  %69 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i.i517 = tail call zeroext i1 %69(%struct.rtx_def* %68, i32 1, i32 1) #6
  %inc.i518 = add nsw i32 %i.013.i516, 1
  br i1 %call.i.i517, label %for.cond.i515, label %if.end.i.i520

if.end.i.i520:                                    ; preds = %for.body.i519
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.else.i521:                                     ; preds = %if.end.i512
  br i1 %cmp12.i511, label %if.then5.i523, label %if.end229

if.then5.i523:                                    ; preds = %if.else.i521
  %70 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i522 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %conv227) #6
  br label %if.end229

if.else228:                                       ; preds = %if.end223
  tail call void @output_constant(%union.tree_node* %val.1, i64 %fieldsize133.0, i32 %and.i502)
  br label %if.end229

if.end229:                                        ; preds = %for.cond.i515, %if.then5.i523, %if.else.i521, %for.cond.preheader.i513, %if.then226, %if.else228
  %add230 = add i64 %fieldsize133.0, %total_bytes.3
  br label %for.inc340

if.else231:                                       ; preds = %lor.lhs.false127
  %cmp232 = icmp eq %union.tree_node* %val.1, null
  br i1 %cmp232, label %if.else243, label %land.lhs.true234

land.lhs.true234:                                 ; preds = %if.else231
  %code236 = getelementptr inbounds %union.tree_node* %val.1, i64 0, i32 0, i32 0, i32 2
  %bf.load237 = load i32* %code236, align 8
  %bf.clear238 = and i32 %bf.load237, 255
  %cmp239 = icmp eq i32 %bf.clear238, 25
  br i1 %cmp239, label %if.else243, label %for.inc340.thread

for.inc340.thread:                                ; preds = %land.lhs.true234
  %name = getelementptr inbounds %union.tree_node* %field.2, i64 0, i32 0, i32 8
  %71 = load %union.tree_node** %name, align 8, !tbaa !40
  %id = getelementptr inbounds %union.tree_node* %71, i64 0, i32 0, i32 1
  %72 = getelementptr inbounds i8** %id, i64 1
  %73 = load i8** %72, align 8, !tbaa !37
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([38 x i8]* @.str127, i64 0, i64 0), i8* %73) #6
  %chain342665 = getelementptr inbounds %union.tree_node* %link.0654, i64 0, i32 0, i32 0, i32 0
  %74 = load %union.tree_node** %chain342665, align 8, !tbaa !62
  br label %cond.true344

if.else243:                                       ; preds = %land.lhs.true234, %if.else231
  %call244 = tail call i64 @int_bit_position(%union.tree_node* %field.2) #6
  %size246 = getelementptr inbounds %union.tree_node* %field.2, i64 0, i32 0, i32 4
  %75 = load %union.tree_node** %size246, align 8, !tbaa !63
  %call247 = tail call i64 @tree_low_cst(%union.tree_node* %75, i32 1) #6
  %add248 = add nsw i64 %call247, %call244
  %76 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !4
  %.val.1 = select i1 %cmp232, %union.tree_node* %76, %union.tree_node* %val.1
  %div = sdiv i64 %call244, 8
  %cmp253 = icmp eq i64 %div, %total_bytes.0652
  br i1 %cmp253, label %if.end272, label %if.then255

if.then255:                                       ; preds = %if.else243
  %tobool256 = icmp eq i32 %byte_buffer_in_use.0651, 0
  br i1 %tobool256, label %if.end262, label %if.then257

if.then257:                                       ; preds = %if.then255
  %conv258 = sext i32 %byte.0650 to i64
  %call259 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv258) #6
  %77 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i525 = tail call zeroext i1 %77(%struct.rtx_def* %call259, i32 1, i32 1) #6
  br i1 %call.i525, label %assemble_integer.exit528, label %if.end.i526

if.end.i526:                                      ; preds = %if.then257
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

assemble_integer.exit528:                         ; preds = %if.then257
  %inc261 = add nsw i64 %total_bytes.0652, 1
  br label %if.end262

if.end262:                                        ; preds = %if.then255, %assemble_integer.exit528
  %total_bytes.4 = phi i64 [ %inc261, %assemble_integer.exit528 ], [ %total_bytes.0652, %if.then255 ]
  %cmp264 = icmp eq i64 %div, %total_bytes.4
  br i1 %cmp264, label %if.end272, label %if.then266

if.then266:                                       ; preds = %if.end262
  %sub268 = sub nsw i64 %div, %total_bytes.4
  %conv269 = trunc i64 %sub268 to i32
  %78 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool.i529 = icmp eq i32 %78, 0
  br i1 %tobool.i529, label %if.end.i532, label %if.end272

if.end.i532:                                      ; preds = %if.then266
  %79 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i530 = icmp eq i32 %79, 1
  %cmp12.i531 = icmp sgt i32 %conv269, 0
  br i1 %cmp.i.i530, label %for.cond.preheader.i533, label %if.else.i541

for.cond.preheader.i533:                          ; preds = %if.end.i532
  br i1 %cmp12.i531, label %for.body.i539, label %if.end272

for.cond.i535:                                    ; preds = %for.body.i539
  %cmp.i534 = icmp slt i32 %inc.i538, %conv269
  br i1 %cmp.i534, label %for.body.i539, label %if.end272

for.body.i539:                                    ; preds = %for.cond.preheader.i533, %for.cond.i535
  %i.013.i536 = phi i32 [ %inc.i538, %for.cond.i535 ], [ 0, %for.cond.preheader.i533 ]
  %80 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !4
  %81 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i.i537 = tail call zeroext i1 %81(%struct.rtx_def* %80, i32 1, i32 1) #6
  %inc.i538 = add nsw i32 %i.013.i536, 1
  br i1 %call.i.i537, label %for.cond.i535, label %if.end.i.i540

if.end.i.i540:                                    ; preds = %for.body.i539
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.else.i541:                                     ; preds = %if.end.i532
  br i1 %cmp12.i531, label %if.then5.i543, label %if.end272

if.then5.i543:                                    ; preds = %if.else.i541
  %82 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i542 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %conv269) #6
  br label %if.end272

if.end272:                                        ; preds = %for.cond.i535, %if.then5.i543, %if.else.i541, %for.cond.preheader.i533, %if.then266, %if.end262, %if.else243
  %byte_buffer_in_use.3 = phi i32 [ 0, %if.end262 ], [ %byte_buffer_in_use.0651, %if.else243 ], [ 0, %if.then266 ], [ 0, %for.cond.preheader.i533 ], [ 0, %if.else.i541 ], [ 0, %if.then5.i543 ], [ 0, %for.cond.i535 ]
  %total_bytes.5 = phi i64 [ %div, %if.end262 ], [ %total_bytes.0652, %if.else243 ], [ %div, %if.then266 ], [ %div, %for.cond.preheader.i533 ], [ %div, %if.else.i541 ], [ %div, %if.then5.i543 ], [ %div, %for.cond.i535 ]
  %tobool273 = icmp eq i32 %byte_buffer_in_use.3, 0
  %.byte.0 = select i1 %tobool273, i32 0, i32 %byte.0650
  %cmp277614 = icmp sgt i64 %call247, 0
  br i1 %cmp277614, label %while.body279.lr.ph, label %for.inc340

while.body279.lr.ph:                              ; preds = %if.end272
  %int_cst317 = getelementptr inbounds %union.tree_node* %.val.1, i64 0, i32 0, i32 2
  %high = getelementptr inbounds i32* %int_cst317, i64 2
  br label %while.body279

while.body279:                                    ; preds = %while.body279.lr.ph, %if.end327
  %next_offset.0617 = phi i64 [ %call244, %while.body279.lr.ph ], [ %add335, %if.end327 ]
  %total_bytes.6616 = phi i64 [ %total_bytes.5, %while.body279.lr.ph ], [ %total_bytes.7.lcssa, %if.end327 ]
  %byte.1615 = phi i32 [ %.byte.0, %while.body279.lr.ph ], [ %conv333, %if.end327 ]
  %div281 = sdiv i64 %next_offset.0617, 8
  %rem = srem i64 %next_offset.0617, 8
  %cmp283610 = icmp eq i64 %div281, %total_bytes.6616
  br i1 %cmp283610, label %while.end290, label %while.body285

while.cond282:                                    ; preds = %while.body285
  %cmp283 = icmp eq i64 %div281, %inc289
  br i1 %cmp283, label %while.end290, label %while.body285

while.body285:                                    ; preds = %while.body279, %while.cond282
  %total_bytes.7612 = phi i64 [ %inc289, %while.cond282 ], [ %total_bytes.6616, %while.body279 ]
  %byte.2611 = phi i32 [ 0, %while.cond282 ], [ %byte.1615, %while.body279 ]
  %conv286 = sext i32 %byte.2611 to i64
  %call287 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv286) #6
  %83 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i545 = tail call zeroext i1 %83(%struct.rtx_def* %call287, i32 1, i32 1) #6
  %inc289 = add nsw i64 %total_bytes.7612, 1
  br i1 %call.i545, label %while.cond282, label %if.end.i546

if.end.i546:                                      ; preds = %while.body285
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

while.end290:                                     ; preds = %while.cond282, %while.body279
  %total_bytes.7.lcssa = phi i64 [ %total_bytes.6616, %while.body279 ], [ %div281, %while.cond282 ]
  %byte.2.lcssa = phi i32 [ %byte.1615, %while.body279 ], [ 0, %while.cond282 ]
  %sub291 = sub nsw i64 %add248, %next_offset.0617
  %sub292 = sub nsw i64 8, %rem
  %cmp293 = icmp slt i64 %sub291, %sub292
  %sub291.sub292 = select i1 %cmp293, i64 %sub291, i64 %sub292
  %conv301 = trunc i64 %sub291.sub292 to i32
  %call302 = tail call i64 @int_bit_position(%union.tree_node* %field.2) #6
  %sub303 = sub nsw i64 %next_offset.0617, %call302
  %conv304 = trunc i64 %sub303 to i32
  %cmp305 = icmp slt i32 %conv304, 64
  %add308 = add nsw i32 %conv304, %conv301
  %cmp309 = icmp sgt i32 %add308, 64
  %or.cond481 = and i1 %cmp305, %cmp309
  %sub312 = sub nsw i32 64, %conv304
  %this_time.0 = select i1 %or.cond481, i32 %sub312, i32 %conv301
  br i1 %cmp305, label %if.end327, label %if.else318

if.else318:                                       ; preds = %while.end290
  %cmp319 = icmp slt i32 %conv304, 128
  br i1 %cmp319, label %if.then321, label %if.else325

if.then321:                                       ; preds = %if.else318
  %sub324 = add i64 %sub303, 4294967232
  br label %if.end327

if.else325:                                       ; preds = %if.else318
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4969, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.output_constructor, i64 0, i64 0)) #9
  unreachable

if.end327:                                        ; preds = %while.end290, %if.then321
  %shift.0 = phi i64 [ %sub324, %if.then321 ], [ %sub303, %while.end290 ]
  %value280.0.in.in = phi i32* [ %high, %if.then321 ], [ %int_cst317, %while.end290 ]
  %value280.0.in = bitcast i32* %value280.0.in.in to i64*
  %value280.0 = load i64* %value280.0.in, align 8
  %sh_prom = and i64 %shift.0, 4294967295
  %shr = ashr i64 %value280.0, %sh_prom
  %sub328 = add nsw i32 %this_time.0, -1
  %sh_prom329 = zext i32 %sub328 to i64
  %shl = shl i64 2, %sh_prom329
  %sub330 = add nsw i64 %shl, -1
  %and = and i64 %shr, %sub330
  %shl331 = shl i64 %and, %rem
  %conv332478 = zext i32 %byte.2.lcssa to i64
  %or = or i64 %shl331, %conv332478
  %conv333 = trunc i64 %or to i32
  %conv334 = sext i32 %this_time.0 to i64
  %add335 = add nsw i64 %conv334, %next_offset.0617
  %cmp277 = icmp sgt i64 %add248, %add335
  br i1 %cmp277, label %while.body279, label %for.inc340

for.inc340:                                       ; preds = %if.end327, %if.end123, %if.end123.us643, %if.end123.us, %if.end272, %if.then101, %if.end229
  %byte.3 = phi i32 [ %byte.0650, %if.end229 ], [ %byte.0650, %if.then101 ], [ %.byte.0, %if.end272 ], [ %byte.0650, %if.end123.us ], [ %byte.0650, %if.end123.us643 ], [ %byte.0650, %if.end123 ], [ %conv333, %if.end327 ]
  %byte_buffer_in_use.5 = phi i32 [ 0, %if.end229 ], [ %byte_buffer_in_use.0651, %if.then101 ], [ %byte_buffer_in_use.3, %if.end272 ], [ %byte_buffer_in_use.0651, %if.end123.us ], [ %byte_buffer_in_use.0651, %if.end123.us643 ], [ %byte_buffer_in_use.0651, %if.end123 ], [ 1, %if.end327 ]
  %total_bytes.8 = phi i64 [ %add230, %if.end229 ], [ %total_bytes.0652, %if.then101 ], [ %total_bytes.5, %if.end272 ], [ %add.us, %if.end123.us ], [ %add.us644, %if.end123.us643 ], [ %add, %if.end123 ], [ %total_bytes.7.lcssa, %if.end327 ]
  %chain342 = getelementptr inbounds %union.tree_node* %link.0654, i64 0, i32 0, i32 0, i32 0
  %84 = load %union.tree_node** %chain342, align 8, !tbaa !62
  %tobool343 = icmp eq %union.tree_node* %field.2, null
  br i1 %tobool343, label %for.cond.backedge, label %cond.true344

for.cond.backedge:                                ; preds = %for.inc340, %cond.true344
  %85 = phi %union.tree_node* [ %84, %for.inc340 ], [ %86, %cond.true344 ]
  %total_bytes.8672 = phi i64 [ %total_bytes.8, %for.inc340 ], [ %total_bytes.8671, %cond.true344 ]
  %byte_buffer_in_use.5670 = phi i32 [ %byte_buffer_in_use.5, %for.inc340 ], [ %byte_buffer_in_use.5669, %cond.true344 ]
  %byte.3668 = phi i32 [ %byte.3, %for.inc340 ], [ %byte.3667, %cond.true344 ]
  %field.1.be = phi %union.tree_node* [ null, %for.inc340 ], [ %87, %cond.true344 ]
  %tobool = icmp eq %union.tree_node* %85, null
  br i1 %tobool, label %for.end350, label %for.cond.backedge.for.body_crit_edge

for.cond.backedge.for.body_crit_edge:             ; preds = %for.cond.backedge
  %bf.load20.pre = load i32* %code, align 8
  br label %for.body

cond.true344:                                     ; preds = %for.inc340.thread, %for.inc340
  %86 = phi %union.tree_node* [ %74, %for.inc340.thread ], [ %84, %for.inc340 ]
  %total_bytes.8671 = phi i64 [ %total_bytes.0652, %for.inc340.thread ], [ %total_bytes.8, %for.inc340 ]
  %byte_buffer_in_use.5669 = phi i32 [ %byte_buffer_in_use.0651, %for.inc340.thread ], [ %byte_buffer_in_use.5, %for.inc340 ]
  %byte.3667 = phi i32 [ %byte.0650, %for.inc340.thread ], [ %byte.3, %for.inc340 ]
  %chain346 = getelementptr inbounds %union.tree_node* %field.2, i64 0, i32 0, i32 0, i32 0
  %87 = load %union.tree_node** %chain346, align 8, !tbaa !62
  br label %for.cond.backedge

for.end350:                                       ; preds = %for.cond.backedge
  %tobool351 = icmp eq i32 %byte_buffer_in_use.5670, 0
  br i1 %tobool351, label %if.end357, label %if.then352

if.then352:                                       ; preds = %for.end350
  %conv353 = sext i32 %byte.3668 to i64
  %call354 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv353) #6
  %88 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i549 = tail call zeroext i1 %88(%struct.rtx_def* %call354, i32 1, i32 1) #6
  br i1 %call.i549, label %assemble_integer.exit552, label %if.end.i550

if.end.i550:                                      ; preds = %if.then352
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

assemble_integer.exit552:                         ; preds = %if.then352
  %inc356 = add nsw i64 %total_bytes.8672, 1
  br label %if.end357

if.end357:                                        ; preds = %if.end16, %for.end350, %assemble_integer.exit552
  %total_bytes.9 = phi i64 [ %inc356, %assemble_integer.exit552 ], [ %total_bytes.8672, %for.end350 ], [ 0, %if.end16 ]
  %cmp358 = icmp slt i64 %total_bytes.9, %size
  br i1 %cmp358, label %if.then360, label %if.end363

if.then360:                                       ; preds = %if.end357
  %sub361 = sub nsw i64 %size, %total_bytes.9
  %conv362 = trunc i64 %sub361 to i32
  %89 = load i32* @flag_syntax_only, align 4, !tbaa !23
  %tobool.i553 = icmp eq i32 %89, 0
  br i1 %tobool.i553, label %if.end.i556, label %if.end363

if.end.i556:                                      ; preds = %if.then360
  %90 = load i32* @in_section, align 4, !tbaa !1
  %cmp.i.i554 = icmp eq i32 %90, 1
  %cmp12.i555 = icmp sgt i32 %conv362, 0
  br i1 %cmp.i.i554, label %for.cond.preheader.i557, label %if.else.i565

for.cond.preheader.i557:                          ; preds = %if.end.i556
  br i1 %cmp12.i555, label %for.body.i563, label %if.end363

for.cond.i559:                                    ; preds = %for.body.i563
  %cmp.i558 = icmp slt i32 %inc.i562, %conv362
  br i1 %cmp.i558, label %for.body.i563, label %if.end363

for.body.i563:                                    ; preds = %for.cond.preheader.i557, %for.cond.i559
  %i.013.i560 = phi i32 [ %inc.i562, %for.cond.i559 ], [ 0, %for.cond.preheader.i557 ]
  %91 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !4
  %92 = load i1 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 5), align 8, !tbaa !43
  %call.i.i561 = tail call zeroext i1 %92(%struct.rtx_def* %91, i32 1, i32 1) #6
  %inc.i562 = add nsw i32 %i.013.i560, 1
  br i1 %call.i.i561, label %for.cond.i559, label %if.end.i.i564

if.end.i.i564:                                    ; preds = %for.body.i563
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2012, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.assemble_integer, i64 0, i64 0)) #9
  unreachable

if.else.i565:                                     ; preds = %if.end.i556
  br i1 %cmp12.i555, label %if.then5.i567, label %if.end363

if.then5.i567:                                    ; preds = %if.else.i565
  %93 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call6.i566 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %93, i8* getelementptr inbounds ([6 x i8]* @.str80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8]* @.str81, i64 0, i64 0), i32 %conv362) #6
  br label %if.end363

if.end363:                                        ; preds = %for.cond.i559, %if.then5.i567, %if.else.i565, %for.cond.preheader.i557, %if.then360, %if.end357
  ret void
}

declare %union.tree_node* @get_set_constructor_bytes(%union.tree_node*, i8*, i32) #3

; Function Attrs: nounwind uwtable
define void @merge_weak(%union.tree_node* %newdecl, %union.tree_node* %olddecl) #0 {
entry:
  %weak_flag = getelementptr inbounds %union.tree_node* %newdecl, i64 0, i32 0, i32 5
  %0 = bitcast i48* %weak_flag to i64*
  %bf.load = load i64* %0, align 8
  %bf.lshr = lshr i64 %bf.load, 23
  %bf.lshr.tr = trunc i64 %bf.lshr to i32
  %bf.cast = and i32 %bf.lshr.tr, 1
  %weak_flag2 = getelementptr inbounds %union.tree_node* %olddecl, i64 0, i32 0, i32 5
  %1 = bitcast i48* %weak_flag2 to i64*
  %bf.load3 = load i64* %1, align 8
  %bf.lshr4 = lshr i64 %bf.load3, 23
  %bf.lshr4.tr = trunc i64 %bf.lshr4 to i32
  %bf.cast6 = and i32 %bf.lshr4.tr, 1
  %cmp = icmp eq i32 %bf.cast, %bf.cast6
  br i1 %cmp, label %if.end44, label %if.end

if.end:                                           ; preds = %entry
  %tobool = icmp eq i32 %bf.cast, 0
  br i1 %tobool, label %if.else43, label %if.then13

if.then13:                                        ; preds = %if.end
  %asm_written_flag = getelementptr inbounds %union.tree_node* %olddecl, i64 0, i32 0, i32 0, i32 2
  %bf.load14 = load i32* %asm_written_flag, align 8
  %bf.clear16 = and i32 %bf.load14, 16384
  %tobool17 = icmp eq i32 %bf.clear16, 0
  br i1 %tobool17, label %if.else, label %if.then18

if.then18:                                        ; preds = %if.then13
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %newdecl, i8* getelementptr inbounds ([49 x i8]* @.str104, i64 0, i64 0)) #6
  br label %for.cond.preheader

if.else:                                          ; preds = %if.then13
  %bf.clear22 = and i32 %bf.load14, 65536
  %tobool23 = icmp eq i32 %bf.clear22, 0
  br i1 %tobool23, label %for.cond.preheader, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %assembler_name = getelementptr inbounds %union.tree_node* %olddecl, i64 0, i32 0, i32 14
  %2 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  %cmp25 = icmp eq %union.tree_node* %2, null
  br i1 %cmp25, label %cond.false, label %cond.end

cond.false:                                       ; preds = %land.lhs.true
  %3 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !4
  tail call void %3(%union.tree_node* %olddecl) #6
  %.pre = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  br label %cond.end

cond.end:                                         ; preds = %land.lhs.true, %cond.false
  %4 = phi %union.tree_node* [ %2, %land.lhs.true ], [ %.pre, %cond.false ]
  %static_flag = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %bf.load29 = load i32* %static_flag, align 8
  %bf.clear31 = and i32 %bf.load29, 262144
  %tobool32 = icmp eq i32 %bf.clear31, 0
  br i1 %tobool32, label %for.cond.preheader, label %if.then33

if.then33:                                        ; preds = %cond.end
  tail call void (%union.tree_node*, i8*, ...)* @warning_with_decl(%union.tree_node* %newdecl, i8* getelementptr inbounds ([73 x i8]* @.str105, i64 0, i64 0)) #6
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %cond.end, %if.else, %if.then33, %if.then18
  %wd.081 = load %union.tree_node** @weak_decls, align 8
  %tobool3682 = icmp eq %union.tree_node* %wd.081, null
  br i1 %tobool3682, label %for.end, label %for.body

for.cond:                                         ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node* %wd.083, i64 0, i32 0, i32 0, i32 0
  %wd.0 = load %union.tree_node** %chain, align 8
  %tobool36 = icmp eq %union.tree_node* %wd.0, null
  br i1 %tobool36, label %for.end, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.cond
  %wd.083 = phi %union.tree_node* [ %wd.0, %for.cond ], [ %wd.081, %for.cond.preheader ]
  %value = getelementptr inbounds %union.tree_node* %wd.083, i64 0, i32 0, i32 2
  %5 = bitcast i32* %value to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !60
  %cmp37 = icmp eq %union.tree_node* %6, %newdecl
  br i1 %cmp37, label %if.then38, label %for.cond

if.then38:                                        ; preds = %for.body
  store %union.tree_node* %olddecl, %union.tree_node** %5, align 8, !tbaa !60
  br label %for.end

for.end:                                          ; preds = %for.cond, %for.cond.preheader, %if.then38
  %bf.load.i = load i64* %1, align 8
  %bf.set.i = or i64 %bf.load.i, 8388608
  store i64 %bf.set.i, i64* %1, align 8
  %rtl.i = getelementptr inbounds %union.tree_node* %olddecl, i64 0, i32 0, i32 17
  %7 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !35
  %cmp.i = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp.i, label %if.end44, label %cond.end.i

cond.end.i:                                       ; preds = %for.end
  %8 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load9.i = load i32* %8, align 8
  %bf.clear10.i = and i32 %bf.load9.i, 65535
  %cmp11.i = icmp eq i32 %bf.clear10.i, 66
  br i1 %cmp11.i, label %cond.end22.i, label %if.end44

cond.end22.i:                                     ; preds = %cond.end.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  %tobool24.i = icmp eq %struct.rtx_def* %9, null
  br i1 %tobool24.i, label %if.end44, label %cond.end35.i

cond.end35.i:                                     ; preds = %cond.end22.i
  %.phi.trans.insert.i = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0
  %bf.load40.pre.i = load i32* %.phi.trans.insert.i, align 8
  %bf.clear41.i = and i32 %bf.load40.pre.i, 65535
  %cmp42.i = icmp eq i32 %bf.clear41.i, 68
  br i1 %cmp42.i, label %cond.end52.i, label %if.end44

cond.end52.i:                                     ; preds = %cond.end35.i
  %bf.set59.i = or i32 %bf.load40.pre.i, 1073741824
  store i32 %bf.set59.i, i32* %.phi.trans.insert.i, align 8
  br label %if.end44

if.else43:                                        ; preds = %if.end
  %bf.set.i62 = or i64 %bf.load, 8388608
  store i64 %bf.set.i62, i64* %0, align 8
  %rtl.i63 = getelementptr inbounds %union.tree_node* %newdecl, i64 0, i32 0, i32 17
  %10 = load %struct.rtx_def** %rtl.i63, align 8, !tbaa !35
  %cmp.i64 = icmp eq %struct.rtx_def* %10, null
  br i1 %cmp.i64, label %if.end44, label %cond.end.i68

cond.end.i68:                                     ; preds = %if.else43
  %11 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 0
  %bf.load9.i65 = load i32* %11, align 8
  %bf.clear10.i66 = and i32 %bf.load9.i65, 65535
  %cmp11.i67 = icmp eq i32 %bf.clear10.i66, 66
  br i1 %cmp11.i67, label %cond.end22.i72, label %if.end44

cond.end22.i72:                                   ; preds = %cond.end.i68
  %arrayidx.i69 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 0
  %rtx.i70 = bitcast %union.rtunion_def* %arrayidx.i69 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx.i70, align 8, !tbaa !4
  %tobool24.i71 = icmp eq %struct.rtx_def* %12, null
  br i1 %tobool24.i71, label %if.end44, label %cond.end35.i77

cond.end35.i77:                                   ; preds = %cond.end22.i72
  %.phi.trans.insert.i73 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 0
  %bf.load40.pre.i74 = load i32* %.phi.trans.insert.i73, align 8
  %bf.clear41.i75 = and i32 %bf.load40.pre.i74, 65535
  %cmp42.i76 = icmp eq i32 %bf.clear41.i75, 68
  br i1 %cmp42.i76, label %cond.end52.i79, label %if.end44

cond.end52.i79:                                   ; preds = %cond.end35.i77
  %bf.set59.i78 = or i32 %bf.load40.pre.i74, 1073741824
  store i32 %bf.set59.i78, i32* %.phi.trans.insert.i73, align 8
  br label %if.end44

if.end44:                                         ; preds = %cond.end52.i79, %cond.end35.i77, %cond.end22.i72, %cond.end.i68, %if.else43, %cond.end52.i, %cond.end35.i, %cond.end22.i, %cond.end.i, %for.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @declare_weak(%union.tree_node* %decl) #0 {
entry:
  %public_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %public_flag, align 8
  %bf.clear = and i32 %bf.load, 524288
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([40 x i8]* @.str106, i64 0, i64 0)) #6
  br label %if.end18

if.else:                                          ; preds = %entry
  %0 = and i32 %bf.load, 16639
  %1 = icmp eq i32 %0, 16414
  br i1 %1, label %if.then9, label %if.else10

if.then9:                                         ; preds = %if.else
  tail call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl, i8* getelementptr inbounds ([49 x i8]* @.str104, i64 0, i64 0)) #6
  br label %if.end18

if.else10:                                        ; preds = %if.else
  %weak_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %2 = bitcast i48* %weak_flag to i64*
  %bf.load12 = load i64* %2, align 8
  %bf.cast = and i64 %bf.load12, 8388608
  %tobool15 = icmp eq i64 %bf.cast, 0
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.else10
  %3 = load %union.tree_node** @weak_decls, align 8, !tbaa !4
  %call = tail call %union.tree_node* @tree_cons(%union.tree_node* null, %union.tree_node* %decl, %union.tree_node* %3) #6
  store %union.tree_node* %call, %union.tree_node** @weak_decls, align 8, !tbaa !4
  br label %if.end18

if.end18:                                         ; preds = %if.else10, %if.then9, %if.then16, %if.then
  %weak_flag.i = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %4 = bitcast i48* %weak_flag.i to i64*
  %bf.load.i = load i64* %4, align 8
  %bf.set.i = or i64 %bf.load.i, 8388608
  store i64 %bf.set.i, i64* %4, align 8
  %rtl.i = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17
  %5 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !35
  %cmp.i = icmp eq %struct.rtx_def* %5, null
  br i1 %cmp.i, label %mark_weak.exit, label %cond.end.i

cond.end.i:                                       ; preds = %if.end18
  %6 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 0
  %bf.load9.i = load i32* %6, align 8
  %bf.clear10.i = and i32 %bf.load9.i, 65535
  %cmp11.i = icmp eq i32 %bf.clear10.i, 66
  br i1 %cmp11.i, label %cond.end22.i, label %mark_weak.exit

cond.end22.i:                                     ; preds = %cond.end.i
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx.i to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  %tobool24.i = icmp eq %struct.rtx_def* %7, null
  br i1 %tobool24.i, label %mark_weak.exit, label %cond.end35.i

cond.end35.i:                                     ; preds = %cond.end22.i
  %.phi.trans.insert.i = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 0
  %bf.load40.pre.i = load i32* %.phi.trans.insert.i, align 8
  %bf.clear41.i = and i32 %bf.load40.pre.i, 65535
  %cmp42.i = icmp eq i32 %bf.clear41.i, 68
  br i1 %cmp42.i, label %cond.end52.i, label %mark_weak.exit

cond.end52.i:                                     ; preds = %cond.end35.i
  %bf.set59.i = or i32 %bf.load40.pre.i, 1073741824
  store i32 %bf.set59.i, i32* %.phi.trans.insert.i, align 8
  br label %mark_weak.exit

mark_weak.exit:                                   ; preds = %if.end18, %cond.end.i, %cond.end22.i, %cond.end35.i, %cond.end52.i
  ret void
}

declare %union.tree_node* @tree_cons(%union.tree_node*, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: nounwind uwtable
define void @weak_finish() #0 {
entry:
  %t.012 = load %union.tree_node** @weak_decls, align 8
  %tobool13 = icmp eq %union.tree_node* %t.012, null
  br i1 %tobool13, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %t.014 = phi %union.tree_node* [ %t.0, %for.inc ], [ %t.012, %entry ]
  %value = getelementptr inbounds %union.tree_node* %t.014, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !60
  %assembler_name = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 14
  %2 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  %cmp = icmp eq %union.tree_node* %2, null
  br i1 %cmp, label %cond.false, label %cond.end

cond.false:                                       ; preds = %for.body
  %3 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !4
  tail call void %3(%union.tree_node* %1) #6
  br label %cond.end

cond.end:                                         ; preds = %for.body, %cond.false
  %used_flag = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %used_flag, align 8
  %bf.clear = and i32 %bf.load, 65536
  %tobool4 = icmp eq i32 %bf.clear, 0
  br i1 %tobool4, label %for.inc, label %do.body

do.body:                                          ; preds = %cond.end
  %4 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  %id = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds i8** %id, i64 1
  %6 = load i8** %5, align 8, !tbaa !37
  %7 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %8 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str107, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %7)
  %9 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %10 = load i8* %6, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %10, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds i8* %6, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %do.body
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %do.body
  %11 = load i8* %6, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %11, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %6, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %9) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %6) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %12 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call5 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %12) #6
  br label %for.inc

for.inc:                                          ; preds = %cond.end, %assemble_name.exit
  %chain = getelementptr inbounds %union.tree_node* %t.014, i64 0, i32 0, i32 0, i32 0
  %t.0 = load %union.tree_node** %chain, align 8
  %tobool = icmp eq %union.tree_node* %t.0, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_alias(%union.tree_node* %decl, %union.tree_node* nocapture readonly %target) #0 {
entry:
  tail call void @make_decl_rtl(%union.tree_node* %decl, i8* null)
  %assembler_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 14
  %0 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  %cmp = icmp eq %union.tree_node* %0, null
  br i1 %cmp, label %cond.false, label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !4
  tail call void %1(%union.tree_node* %decl) #6
  %.pre = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.false
  %2 = phi %union.tree_node* [ %0, %entry ], [ %.pre, %cond.false ]
  %id = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds i8** %id, i64 1
  %4 = load i8** %3, align 8, !tbaa !37
  %public_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %public_flag, align 8
  %bf.clear = and i32 %bf.load, 524288
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %do.body, label %if.then

if.then:                                          ; preds = %cond.end
  tail call fastcc void @globalize_decl(%union.tree_node* %decl)
  br label %do.body

do.body:                                          ; preds = %cond.end, %if.then
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %6 = tail call i64 @fwrite(i8* getelementptr inbounds ([7 x i8]* @.str108, i64 0, i64 0), i64 6, i64 1, %struct._IO_FILE* %5)
  %7 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %8 = load i8* %4, align 1, !tbaa !1
  %cmp.i = icmp eq i8 %8, 42
  %idx.ext.i = zext i1 %cmp.i to i64
  %add.ptr.i = getelementptr inbounds i8* %4, i64 %idx.ext.i
  %call.i = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i) #6
  %tobool.i = icmp eq %union.tree_node* %call.i, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %do.body
  %static_flag.i = getelementptr inbounds %union.tree_node* %call.i, i64 0, i32 0, i32 0, i32 2
  %bf.load.i = load i32* %static_flag.i, align 8
  %bf.set.i = or i32 %bf.load.i, 262144
  store i32 %bf.set.i, i32* %static_flag.i, align 8
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %do.body
  %9 = load i8* %4, align 1, !tbaa !1
  %cmp4.i = icmp eq i8 %9, 42
  br i1 %cmp4.i, label %if.then6.i, label %if.else.i

if.then6.i:                                       ; preds = %if.end.i
  %arrayidx7.i = getelementptr inbounds i8* %4, i64 1
  %call8.i = tail call i32 @fputs(i8* %arrayidx7.i, %struct._IO_FILE* %7) #6
  br label %assemble_name.exit

if.else.i:                                        ; preds = %if.end.i
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %4) #6
  br label %assemble_name.exit

assemble_name.exit:                               ; preds = %if.then6.i, %if.else.i
  %10 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %fputc = tail call i32 @fputc(i32 44, %struct._IO_FILE* %10) #6
  %11 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %id6 = getelementptr inbounds %union.tree_node* %target, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds i8** %id6, i64 1
  %13 = load i8** %12, align 8, !tbaa !37
  %14 = load i8* %13, align 1, !tbaa !1
  %cmp.i42 = icmp eq i8 %14, 42
  %idx.ext.i43 = zext i1 %cmp.i42 to i64
  %add.ptr.i44 = getelementptr inbounds i8* %13, i64 %idx.ext.i43
  %call.i45 = tail call %union.tree_node* @maybe_get_identifier(i8* %add.ptr.i44) #6
  %tobool.i46 = icmp eq %union.tree_node* %call.i45, null
  br i1 %tobool.i46, label %if.end.i52, label %if.then.i50

if.then.i50:                                      ; preds = %assemble_name.exit
  %static_flag.i47 = getelementptr inbounds %union.tree_node* %call.i45, i64 0, i32 0, i32 0, i32 2
  %bf.load.i48 = load i32* %static_flag.i47, align 8
  %bf.set.i49 = or i32 %bf.load.i48, 262144
  store i32 %bf.set.i49, i32* %static_flag.i47, align 8
  br label %if.end.i52

if.end.i52:                                       ; preds = %if.then.i50, %assemble_name.exit
  %15 = load i8* %13, align 1, !tbaa !1
  %cmp4.i51 = icmp eq i8 %15, 42
  br i1 %cmp4.i51, label %if.then6.i55, label %if.else.i56

if.then6.i55:                                     ; preds = %if.end.i52
  %arrayidx7.i53 = getelementptr inbounds i8* %13, i64 1
  %call8.i54 = tail call i32 @fputs(i8* %arrayidx7.i53, %struct._IO_FILE* %11) #6
  br label %assemble_name.exit57

if.else.i56:                                      ; preds = %if.end.i52
  tail call void (%struct._IO_FILE*, i8*, ...)* @asm_fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([5 x i8]* @.str95, i64 0, i64 0), i8* %13) #6
  br label %assemble_name.exit57

assemble_name.exit57:                             ; preds = %if.then6.i55, %if.else.i56
  %16 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %fputc41 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %16) #6
  %bf.load10 = load i32* %public_flag, align 8
  %bf.set15 = or i32 %bf.load10, 81920
  store i32 %bf.set15, i32* %public_flag, align 8
  %17 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  %cmp18 = icmp eq %union.tree_node* %17, null
  br i1 %cmp18, label %cond.false20, label %cond.end21

cond.false20:                                     ; preds = %assemble_name.exit57
  %18 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !4
  tail call void %18(%union.tree_node* %decl) #6
  %.pre58 = load %union.tree_node** %assembler_name, align 8, !tbaa !36
  br label %cond.end21

cond.end21:                                       ; preds = %assemble_name.exit57, %cond.false20
  %19 = phi %union.tree_node* [ %17, %assemble_name.exit57 ], [ %.pre58, %cond.false20 ]
  %asm_written_flag25 = getelementptr inbounds %union.tree_node* %19, i64 0, i32 0, i32 0, i32 2
  %bf.load26 = load i32* %asm_written_flag25, align 8
  %bf.set28 = or i32 %bf.load26, 16384
  store i32 %bf.set28, i32* %asm_written_flag25, align 8
  ret void
}

; Function Attrs: nounwind readnone uwtable
define i32 @supports_one_only() #7 {
entry:
  ret i32 1
}

; Function Attrs: nounwind uwtable
define void @make_decl_one_only(%union.tree_node* nocapture %decl) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.then [
    i32 34, label %if.end
    i32 30, label %if.end
  ]

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 5221, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.make_decl_one_only, i64 0, i64 0)) #9
  unreachable

if.end:                                           ; preds = %entry, %entry
  %bf.set = or i32 %bf.load, 524288
  store i32 %bf.set, i32* %code, align 8
  %cmp13 = icmp eq i32 %bf.clear, 34
  br i1 %cmp13, label %land.lhs.true14, label %if.else

land.lhs.true14:                                  ; preds = %if.end
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %0 = load %union.tree_node** %initial, align 8, !tbaa !24
  %cmp16 = icmp eq %union.tree_node* %0, null
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8
  %cmp19 = icmp eq %union.tree_node* %0, %1
  %or.cond = or i1 %cmp16, %cmp19
  br i1 %or.cond, label %if.then20, label %if.else

if.then20:                                        ; preds = %land.lhs.true14
  %common_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %2 = bitcast i48* %common_flag to i64*
  %bf.load22 = load i64* %2, align 8
  %bf.set24 = or i64 %bf.load22, 131072
  store i64 %bf.set24, i64* %2, align 8
  br label %if.end33

if.else:                                          ; preds = %land.lhs.true14, %if.end
  %weak_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %3 = bitcast i48* %weak_flag to i64*
  %bf.load26 = load i64* %3, align 8
  %bf.set32 = or i64 %bf.load26, 8912896
  store i64 %bf.set32, i64* %3, align 8
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then20
  ret void
}

; Function Attrs: nounwind uwtable
define void @init_varasm_once() #0 {
entry:
  %call = tail call %struct.htab* @htab_create(i64 128, i32 (i8*)* @const_str_htab_hash, i32 (i8*, i8*)* @const_str_htab_eq, void (i8*)* @const_str_htab_del) #6
  store %struct.htab* %call, %struct.htab** @const_str_htab, align 8, !tbaa !4
  %call1 = tail call %struct.htab* @htab_create(i64 31, i32 (i8*)* @in_named_entry_hash, i32 (i8*, i8*)* @in_named_entry_eq, void (i8*)* null) #6
  store %struct.htab* %call1, %struct.htab** @in_named_htab, align 8, !tbaa !4
  tail call void @ggc_add_root(i8* bitcast ([1009 x %struct.constant_descriptor*]* @const_hash_table to i8*), i32 1009, i32 8, void (i8*)* @mark_const_hash_entry) #6
  tail call void @ggc_add_root(i8* bitcast (%struct.htab** @const_str_htab to i8*), i32 1, i32 8, void (i8*)* @mark_const_str_htab) #6
  tail call void @ggc_add_tree_root(%union.tree_node** @weak_decls, i32 1) #6
  %call2 = tail call i64 @new_alias_set() #6
  store i64 %call2, i64* @const_alias_set, align 8, !tbaa !81
  ret void
}

declare %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #3

; Function Attrs: nounwind readonly uwtable
define internal i32 @const_str_htab_hash(i8* nocapture readonly %x) #2 {
entry:
  %label = bitcast i8* %x to i8**
  %0 = load i8** %label, align 8, !tbaa !105
  %1 = ptrtoint i8* %0 to i64
  %shr1 = lshr i64 %1, 3
  %conv = trunc i64 %shr1 to i32
  ret i32 %conv
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @const_str_htab_eq(i8* nocapture readonly %x, i8* readnone %y) #2 {
entry:
  %label = bitcast i8* %x to i8**
  %0 = load i8** %label, align 8, !tbaa !105
  %cmp = icmp eq i8* %0, %y
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal void @const_str_htab_del(i8* nocapture %dfsp) #0 {
entry:
  tail call void @free(i8* %dfsp)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @in_named_entry_hash(i8* nocapture readonly %p) #0 {
entry:
  %name = bitcast i8* %p to i8**
  %0 = load i8** %name, align 8, !tbaa !12
  %call = tail call i32 @htab_hash_string(i8* %0) #6
  ret i32 %call
}

; Function Attrs: nounwind readonly uwtable
define internal i32 @in_named_entry_eq(i8* nocapture readonly %p1, i8* nocapture readonly %p2) #2 {
entry:
  %name = bitcast i8* %p1 to i8**
  %0 = load i8** %name, align 8, !tbaa !12
  %call = tail call i32 @strcmp(i8* %0, i8* %p2) #6
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare void @ggc_add_root(i8*, i32, i32, void (i8*)*) #3

; Function Attrs: nounwind uwtable
define internal void @mark_const_hash_entry(i8* nocapture readonly %ptr) #0 {
entry:
  %0 = bitcast i8* %ptr to %struct.constant_descriptor**
  %desc.06 = load %struct.constant_descriptor** %0, align 8
  %tobool7 = icmp eq %struct.constant_descriptor* %desc.06, null
  br i1 %tobool7, label %while.end, label %do.body

do.body:                                          ; preds = %entry, %do.end
  %desc.08 = phi %struct.constant_descriptor* [ %desc.0, %do.end ], [ %desc.06, %entry ]
  %rtl = getelementptr inbounds %struct.constant_descriptor* %desc.08, i64 0, i32 2
  %1 = load %struct.rtx_def** %rtl, align 8, !tbaa !98
  %cmp = icmp eq %struct.rtx_def* %1, null
  br i1 %cmp, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %do.body
  %2 = bitcast %struct.rtx_def* %1 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %2) #6
  %tobool1 = icmp eq i32 %call, 0
  br i1 %tobool1, label %if.then, label %do.end

if.then:                                          ; preds = %land.lhs.true
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %1) #6
  br label %do.end

do.end:                                           ; preds = %land.lhs.true, %do.body, %if.then
  %next = getelementptr inbounds %struct.constant_descriptor* %desc.08, i64 0, i32 0
  %desc.0 = load %struct.constant_descriptor** %next, align 8
  %tobool = icmp eq %struct.constant_descriptor* %desc.0, null
  br i1 %tobool, label %while.end, label %do.body

while.end:                                        ; preds = %do.end, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @mark_const_str_htab(i8* nocapture readonly %htab) #0 {
entry:
  %0 = bitcast i8* %htab to %struct.htab**
  %1 = load %struct.htab** %0, align 8, !tbaa !4
  tail call void @htab_traverse(%struct.htab* %1, i32 (i8**, i8*)* @mark_const_str_htab_1, i8* null) #6
  ret void
}

declare void @ggc_add_tree_root(%union.tree_node**, i32) #3

declare i64 @new_alias_set() #3

; Function Attrs: nounwind readonly uwtable
define i32 @default_section_type_flags(%union.tree_node* readonly %decl, i8* nocapture readonly %name, i32 %reloc) #2 {
entry:
  %tobool = icmp ne %union.tree_node* %decl, null
  br i1 %tobool, label %land.lhs.true, label %if.else38

land.lhs.true:                                    ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 30
  br i1 %cmp, label %land.lhs.true41, label %land.lhs.true2

land.lhs.true2:                                   ; preds = %land.lhs.true
  %0 = and i32 %bf.load, 6144
  %1 = icmp eq i32 %0, 4096
  br i1 %1, label %land.lhs.true13, label %if.else38

land.lhs.true13:                                  ; preds = %land.lhs.true2
  %initial = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 12
  %2 = load %union.tree_node** %initial, align 8, !tbaa !24
  %tobool15 = icmp eq %union.tree_node* %2, null
  br i1 %tobool15, label %if.else38, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %land.lhs.true13
  %3 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 8, !tbaa !4
  %cmp19 = icmp eq %union.tree_node* %2, %3
  br i1 %cmp19, label %land.lhs.true27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true16
  %constant_flag = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %bf.load23 = load i32* %constant_flag, align 8
  %bf.clear25 = and i32 %bf.load23, 512
  %tobool26 = icmp eq i32 %bf.clear25, 0
  br i1 %tobool26, label %if.else38, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %lor.lhs.false, %land.lhs.true16
  %tobool28 = icmp eq i32 %reloc, 0
  br i1 %tobool28, label %if.end39, label %land.lhs.true29

land.lhs.true29:                                  ; preds = %land.lhs.true27
  %4 = load i32* @flag_pic, align 4, !tbaa !23
  %tobool30 = icmp eq i32 %4, 0
  br i1 %tobool30, label %lor.lhs.false31, label %if.else38

lor.lhs.false31:                                  ; preds = %land.lhs.true29
  %transparent_union = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %5 = bitcast i48* %transparent_union to i64*
  %bf.load33 = load i64* %5, align 8
  %bf.cast = and i64 %bf.load33, 524288
  %tobool36 = icmp eq i64 %bf.cast, 0
  br i1 %tobool36, label %if.end39, label %if.else38

if.else38:                                        ; preds = %entry, %land.lhs.true2, %lor.lhs.false31, %land.lhs.true29, %lor.lhs.false, %land.lhs.true13
  br label %if.end39

if.end39:                                         ; preds = %land.lhs.true27, %lor.lhs.false31, %if.else38
  %flags.0 = phi i32 [ 512, %if.else38 ], [ 0, %lor.lhs.false31 ], [ 0, %land.lhs.true27 ]
  br i1 %tobool, label %land.lhs.true41, label %if.end50

land.lhs.true41:                                  ; preds = %land.lhs.true, %if.end39
  %flags.087 = phi i32 [ %flags.0, %if.end39 ], [ 256, %land.lhs.true ]
  %transparent_union43 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %6 = bitcast i48* %transparent_union43 to i64*
  %bf.load44 = load i64* %6, align 8
  %bf.cast47 = lshr i64 %bf.load44, 8
  %bf.cast47.tr = trunc i64 %bf.cast47 to i32
  %7 = and i32 %bf.cast47.tr, 2048
  %8 = or i32 %7, %flags.087
  br label %if.end50

if.end50:                                         ; preds = %land.lhs.true41, %if.end39
  %flags.1 = phi i32 [ %flags.0, %if.end39 ], [ %8, %land.lhs.true41 ]
  %call = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([5 x i8]* @.str109, i64 0, i64 0)) #6
  %cmp51 = icmp eq i32 %call, 0
  br i1 %cmp51, label %if.then67, label %lor.lhs.false52

lor.lhs.false52:                                  ; preds = %if.end50
  %call53 = tail call i32 @strncmp(i8* %name, i8* getelementptr inbounds ([6 x i8]* @.str110, i64 0, i64 0), i64 5) #6
  %cmp54 = icmp eq i32 %call53, 0
  br i1 %cmp54, label %if.then67, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %lor.lhs.false52
  %call56 = tail call i32 @strncmp(i8* %name, i8* getelementptr inbounds ([17 x i8]* @.str111, i64 0, i64 0), i64 16) #6
  %cmp57 = icmp eq i32 %call56, 0
  br i1 %cmp57, label %if.then67, label %lor.lhs.false58

lor.lhs.false58:                                  ; preds = %lor.lhs.false55
  %call59 = tail call i32 @strcmp(i8* %name, i8* getelementptr inbounds ([6 x i8]* @.str112, i64 0, i64 0)) #6
  %cmp60 = icmp eq i32 %call59, 0
  br i1 %cmp60, label %if.then67, label %lor.lhs.false61

lor.lhs.false61:                                  ; preds = %lor.lhs.false58
  %call62 = tail call i32 @strncmp(i8* %name, i8* getelementptr inbounds ([7 x i8]* @.str113, i64 0, i64 0), i64 6) #6
  %cmp63 = icmp eq i32 %call62, 0
  br i1 %cmp63, label %if.then67, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %lor.lhs.false61
  %call65 = tail call i32 @strncmp(i8* %name, i8* getelementptr inbounds ([18 x i8]* @.str114, i64 0, i64 0), i64 17) #6
  %cmp66 = icmp eq i32 %call65, 0
  br i1 %cmp66, label %if.then67, label %if.end69

if.then67:                                        ; preds = %lor.lhs.false64, %lor.lhs.false61, %lor.lhs.false58, %lor.lhs.false55, %lor.lhs.false52, %if.end50
  %or68 = or i32 %flags.1, 8192
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %lor.lhs.false64
  %flags.2 = phi i32 [ %or68, %if.then67 ], [ %flags.1, %lor.lhs.false64 ]
  ret i32 %flags.2
}

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) #4

; Function Attrs: noreturn nounwind uwtable
define void @default_no_named_section(i8* nocapture readnone %name, i32 %flags) #8 {
entry:
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 5304, i8* getelementptr inbounds ([25 x i8]* @__FUNCTION__.default_no_named_section, i64 0, i64 0)) #9
  unreachable
}

; Function Attrs: nounwind uwtable
define void @default_elf_asm_named_section(i8* %name, i32 %flags) #0 {
entry:
  %flagchars = alloca [10 x i8], align 1
  %arraydecay = getelementptr inbounds [10 x i8]* %flagchars, i64 0, i64 0
  %0 = load %struct.htab** @in_named_htab, align 8, !tbaa !4
  %call.i = call i32 @htab_hash_string(i8* %name) #6
  %call1.i = call i8** @htab_find_slot_with_hash(%struct.htab* %0, i8* %name, i32 %call.i, i32 0) #6
  %1 = load i8** %call1.i, align 8
  %2 = getelementptr inbounds i8* %1, i64 12
  %3 = load i8* %2, align 1, !tbaa !10, !range !11
  %tobool.i = icmp eq i8 %3, 0
  br i1 %tobool.i, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([14 x i8]* @.str115, i64 0, i64 0), i8* %name) #6
  br label %if.end42

if.end:                                           ; preds = %entry
  store i8 1, i8* %2, align 1, !tbaa !10
  %and = and i32 %flags, 1024
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %incdec.ptr = getelementptr inbounds [10 x i8]* %flagchars, i64 0, i64 1
  store i8 97, i8* %arraydecay, align 1, !tbaa !1
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then2
  %f.0 = phi i8* [ %arraydecay, %if.end ], [ %incdec.ptr, %if.then2 ]
  %and4 = and i32 %flags, 512
  %tobool5 = icmp eq i32 %and4, 0
  br i1 %tobool5, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.end3
  %incdec.ptr7 = getelementptr inbounds i8* %f.0, i64 1
  store i8 119, i8* %f.0, align 1, !tbaa !1
  br label %if.end8

if.end8:                                          ; preds = %if.end3, %if.then6
  %f.1 = phi i8* [ %incdec.ptr7, %if.then6 ], [ %f.0, %if.end3 ]
  %and9 = and i32 %flags, 256
  %tobool10 = icmp eq i32 %and9, 0
  br i1 %tobool10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.end8
  %incdec.ptr12 = getelementptr inbounds i8* %f.1, i64 1
  store i8 120, i8* %f.1, align 1, !tbaa !1
  br label %if.end13

if.end13:                                         ; preds = %if.end8, %if.then11
  %f.2 = phi i8* [ %incdec.ptr12, %if.then11 ], [ %f.1, %if.end8 ]
  %and14 = and i32 %flags, 4096
  %tobool15 = icmp eq i32 %and14, 0
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %if.end13
  %incdec.ptr17 = getelementptr inbounds i8* %f.2, i64 1
  store i8 115, i8* %f.2, align 1, !tbaa !1
  br label %if.end18

if.end18:                                         ; preds = %if.end13, %if.then16
  %f.3 = phi i8* [ %incdec.ptr17, %if.then16 ], [ %f.2, %if.end13 ]
  %and19 = and i32 %flags, 32768
  %tobool20 = icmp eq i32 %and19, 0
  br i1 %tobool20, label %if.end23, label %if.then21

if.then21:                                        ; preds = %if.end18
  %incdec.ptr22 = getelementptr inbounds i8* %f.3, i64 1
  store i8 77, i8* %f.3, align 1, !tbaa !1
  br label %if.end23

if.end23:                                         ; preds = %if.end18, %if.then21
  %f.4 = phi i8* [ %incdec.ptr22, %if.then21 ], [ %f.3, %if.end18 ]
  %and24 = and i32 %flags, 65536
  %tobool25 = icmp eq i32 %and24, 0
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end23
  %incdec.ptr27 = getelementptr inbounds i8* %f.4, i64 1
  store i8 83, i8* %f.4, align 1, !tbaa !1
  br label %if.end28

if.end28:                                         ; preds = %if.end23, %if.then26
  %f.5 = phi i8* [ %incdec.ptr27, %if.then26 ], [ %f.4, %if.end23 ]
  store i8 0, i8* %f.5, align 1, !tbaa !1
  %and29 = and i32 %flags, 8192
  %tobool30 = icmp eq i32 %and29, 0
  %. = select i1 %tobool30, i8* getelementptr inbounds ([9 x i8]* @.str117, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str116, i64 0, i64 0)
  %and33 = and i32 %flags, 255
  %tobool34 = icmp eq i32 %and33, 0
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  br i1 %tobool34, label %if.else39, label %if.then35

if.then35:                                        ; preds = %if.end28
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([26 x i8]* @.str118, i64 0, i64 0), i8* %name, i8* %arraydecay, i8* %., i32 %and33) #6
  br label %if.end42

if.else39:                                        ; preds = %if.end28
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([23 x i8]* @.str119, i64 0, i64 0), i8* %name, i8* %arraydecay, i8* %.) #6
  br label %if.end42

if.end42:                                         ; preds = %if.then, %if.else39, %if.then35
  ret void
}

; Function Attrs: nounwind uwtable
define void @default_coff_asm_named_section(i8* %name, i32 %flags) #0 {
entry:
  %flagchars = alloca [8 x i8], align 1
  %arraydecay = getelementptr inbounds [8 x i8]* %flagchars, i64 0, i64 0
  %and = and i32 %flags, 512
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds [8 x i8]* %flagchars, i64 0, i64 1
  store i8 119, i8* %arraydecay, align 1, !tbaa !1
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %f.0 = phi i8* [ %incdec.ptr, %if.then ], [ %arraydecay, %entry ]
  %and1 = and i32 %flags, 256
  %tobool2 = icmp eq i32 %and1, 0
  br i1 %tobool2, label %if.end5, label %if.then3

if.then3:                                         ; preds = %if.end
  %incdec.ptr4 = getelementptr inbounds i8* %f.0, i64 1
  store i8 120, i8* %f.0, align 1, !tbaa !1
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then3
  %f.1 = phi i8* [ %incdec.ptr4, %if.then3 ], [ %f.0, %if.end ]
  store i8 0, i8* %f.1, align 1, !tbaa !1
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([19 x i8]* @.str120, i64 0, i64 0), i8* %name, i8* %arraydecay) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @default_pe_asm_named_section(i8* %name, i32 %flags) #0 {
entry:
  %flagchars.i = alloca [8 x i8], align 1
  %0 = getelementptr inbounds [8 x i8]* %flagchars.i, i64 0, i64 0
  call void @llvm.lifetime.start(i64 8, i8* %0) #6
  %and.i = and i32 %flags, 512
  %tobool.i = icmp eq i32 %and.i, 0
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %incdec.ptr.i = getelementptr inbounds [8 x i8]* %flagchars.i, i64 0, i64 1
  store i8 119, i8* %0, align 1, !tbaa !1
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %f.0.i = phi i8* [ %incdec.ptr.i, %if.then.i ], [ %0, %entry ]
  %and1.i = and i32 %flags, 256
  %tobool2.i = icmp eq i32 %and1.i, 0
  br i1 %tobool2.i, label %default_coff_asm_named_section.exit, label %if.then3.i

if.then3.i:                                       ; preds = %if.end.i
  %incdec.ptr4.i = getelementptr inbounds i8* %f.0.i, i64 1
  store i8 120, i8* %f.0.i, align 1, !tbaa !1
  br label %default_coff_asm_named_section.exit

default_coff_asm_named_section.exit:              ; preds = %if.end.i, %if.then3.i
  %f.1.i = phi i8* [ %incdec.ptr4.i, %if.then3.i ], [ %f.0.i, %if.end.i ]
  store i8 0, i8* %f.1.i, align 1, !tbaa !1
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([19 x i8]* @.str120, i64 0, i64 0), i8* %name, i8* %0) #6
  call void @llvm.lifetime.end(i64 8, i8* %0) #6
  %and = and i32 %flags, 2048
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %default_coff_asm_named_section.exit
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %tobool2 = icmp ne i32 %and1.i, 0
  %cond = select i1 %tobool2, i8* getelementptr inbounds ([8 x i8]* @.str122, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8]* @.str123, i64 0, i64 0)
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([15 x i8]* @.str121, i64 0, i64 0), i8* %cond) #6
  br label %if.end

if.end:                                           ; preds = %default_coff_asm_named_section.exit, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_vtable_entry(%struct.rtx_def* %symbol, i64 %offset) #0 {
entry:
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8]* @.str124, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %0)
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  tail call void @output_addr_const(%struct._IO_FILE* %2, %struct.rtx_def* %symbol) #6
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str125, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %3)
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call2 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([5 x i8]* @.str92, i64 0, i64 0), i64 %offset) #6
  %6 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call3 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %6) #6
  ret void
}

; Function Attrs: nounwind uwtable
define void @assemble_vtable_inherit(%struct.rtx_def* %child, %struct.rtx_def* %parent) #0 {
entry:
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([18 x i8]* @.str126, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %0)
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  tail call void @output_addr_const(%struct._IO_FILE* %2, %struct.rtx_def* %child) #6
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str125, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %3)
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  tail call void @output_addr_const(%struct._IO_FILE* %5, %struct.rtx_def* %parent) #6
  %6 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !4
  %call2 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %6) #6
  ret void
}

declare void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #3

; Function Attrs: nounwind uwtable
define internal i32 @mark_const_str_htab_1(i8** nocapture readonly %x, i8* nocapture readnone %data) #0 {
entry:
  %0 = load i8** %x, align 8, !tbaa !4
  %exp = getelementptr inbounds i8* %0, i64 8
  %1 = bitcast i8* %exp to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !104
  %cmp = icmp eq %union.tree_node* %2, null
  br i1 %cmp, label %do.end9, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %3 = bitcast %union.tree_node* %2 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %3) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %do.body1, label %do.end9

do.body1:                                         ; preds = %land.lhs.true
  %4 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !4
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %4, i64 0, i32 1
  %5 = load i64* %elements_used, align 8, !tbaa !124
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %4, i64 0, i32 0
  %6 = load i64* %num_elements, align 8, !tbaa !126
  %cmp2 = icmp ult i64 %5, %6
  br i1 %cmp2, label %if.end, label %if.then3

if.then3:                                         ; preds = %do.body1
  %mul = shl i64 %6, 1
  %call5 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %4, i64 %mul) #6
  store %struct.varray_head_tag* %call5, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !4
  %elements_used6.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call5, i64 0, i32 1
  %.pre = load i64* %elements_used6.phi.trans.insert, align 8, !tbaa !124
  br label %if.end

if.end:                                           ; preds = %do.body1, %if.then3
  %7 = phi i64 [ %5, %do.body1 ], [ %.pre, %if.then3 ]
  %8 = phi %struct.varray_head_tag* [ %4, %do.body1 ], [ %call5, %if.then3 ]
  %elements_used6 = getelementptr inbounds %struct.varray_head_tag* %8, i64 0, i32 1
  %inc = add i64 %7, 1
  store i64 %inc, i64* %elements_used6, align 8, !tbaa !124
  %data7 = getelementptr inbounds %struct.varray_head_tag* %8, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data7 to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %7
  store %union.tree_node* %2, %union.tree_node** %arrayidx, align 8, !tbaa !4
  br label %do.end9

do.end9:                                          ; preds = %land.lhs.true, %entry, %if.end
  ret i32 1
}

declare %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag*, i64) #3

declare i64 @int_byte_position(%union.tree_node*) #3

declare i64 @int_bit_position(%union.tree_node*) #3

declare i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #3

declare %union.tree_node* @size_binop(i32, %union.tree_node*, %union.tree_node*) #3

declare %union.tree_node* @convert(%union.tree_node*, %union.tree_node*) #3

declare i32 @handled_component_p(%union.tree_node*) #3

declare i64 @htab_elements(%struct.htab*) #3

declare %struct.rtx_def* @get_insns() #3

; Function Attrs: nounwind uwtable
define internal fastcc void @mark_constants(%struct.rtx_def* %x) #0 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8, !tbaa !4
  %cmp = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp, label %for.end52, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 0
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 68
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = call i32 @mark_constant(%struct.rtx_def** %x.addr, i8* null)
  br label %for.end52

if.end3:                                          ; preds = %if.end
  %idxprom60 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom60
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp6 = icmp eq i8 %1, 105
  br i1 %cmp6, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end3
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  tail call fastcc void @mark_constants(%struct.rtx_def* %2)
  br label %for.end52

if.end10:                                         ; preds = %if.end3
  %arrayidx1870 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom60
  %3 = load i8* %arrayidx1870, align 1, !tbaa !1
  %cmp2072 = icmp eq i8 %3, 0
  br i1 %cmp2072, label %for.end52, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end10
  %arrayidx14 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom60
  %4 = load i8** %arrayidx14, align 8, !tbaa !4
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc50
  %indvars.iv75 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next76, %for.inc50 ]
  %format_ptr.074 = phi i8* [ %4, %for.body.lr.ph ], [ %incdec.ptr, %for.inc50 ]
  %incdec.ptr = getelementptr inbounds i8* %format_ptr.074, i64 1
  %5 = load i8* %format_ptr.074, align 1, !tbaa !1
  %conv22 = sext i8 %5 to i32
  switch i32 %conv22, label %sw.default [
    i32 101, label %sw.bb
    i32 69, label %sw.bb27
    i32 83, label %for.inc50
    i32 115, label %for.inc50
    i32 48, label %for.inc50
    i32 105, label %for.inc50
    i32 119, label %for.inc50
    i32 110, label %for.inc50
    i32 117, label %for.inc50
  ]

sw.bb:                                            ; preds = %for.body
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv75
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx26, align 8, !tbaa !4
  tail call fastcc void @mark_constants(%struct.rtx_def* %6)
  br label %for.inc50

sw.bb27:                                          ; preds = %for.body
  %arrayidx30 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv75
  %rtvec = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtvec_def**
  %7 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !4
  %cmp31 = icmp eq %struct.rtvec_def* %7, null
  br i1 %cmp31, label %for.inc50, label %for.cond34.preheader

for.cond34.preheader:                             ; preds = %sw.bb27
  %num_elem64 = getelementptr inbounds %struct.rtvec_def* %7, i64 0, i32 0
  %8 = load i32* %num_elem64, align 4, !tbaa !57
  %cmp3965 = icmp sgt i32 %8, 0
  br i1 %cmp3965, label %for.body41, label %for.inc50

for.body41:                                       ; preds = %for.cond34.preheader, %for.body41
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body41 ], [ 0, %for.cond34.preheader ]
  %9 = phi %struct.rtvec_def* [ %11, %for.body41 ], [ %7, %for.cond34.preheader ]
  %arrayidx47 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 %indvars.iv
  %10 = load %struct.rtx_def** %arrayidx47, align 8, !tbaa !4
  tail call fastcc void @mark_constants(%struct.rtx_def* %10)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %11 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !4
  %num_elem = getelementptr inbounds %struct.rtvec_def* %11, i64 0, i32 0
  %12 = load i32* %num_elem, align 4, !tbaa !57
  %13 = trunc i64 %indvars.iv.next to i32
  %cmp39 = icmp slt i32 %13, %12
  br i1 %cmp39, label %for.body41, label %for.inc50

sw.default:                                       ; preds = %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 4184, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.mark_constants, i64 0, i64 0)) #9
  unreachable

for.inc50:                                        ; preds = %for.body41, %for.cond34.preheader, %sw.bb27, %sw.bb, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  %indvars.iv.next76 = add nuw nsw i64 %indvars.iv75, 1
  %bf.load15 = load i32* %0, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %idxprom1761 = zext i32 %bf.clear16 to i64
  %arrayidx18 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom1761
  %14 = load i8* %arrayidx18, align 1, !tbaa !1
  %conv19 = zext i8 %14 to i32
  %15 = trunc i64 %indvars.iv.next76 to i32
  %cmp20 = icmp slt i32 %15, %conv19
  br i1 %cmp20, label %for.body, label %for.end52

for.end52:                                        ; preds = %for.inc50, %if.end10, %entry, %if.then2, %if.then8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @mark_constant(%struct.rtx_def** nocapture readonly %current_rtx, i8* nocapture readnone %data) #0 {
entry:
  %0 = load %struct.rtx_def** %current_rtx, align 8, !tbaa !4
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %return, label %if.else

if.else:                                          ; preds = %entry
  %1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 0
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 68
  br i1 %cmp1, label %if.then2, label %return

if.then2:                                         ; preds = %if.else
  %bf.clear4 = and i32 %bf.load, 67108864
  %tobool = icmp eq i32 %bf.clear4, 0
  br i1 %tobool, label %if.else11, label %if.then5

if.then5:                                         ; preds = %if.then2
  %2 = load %struct.function** @cfun, align 8, !tbaa !4
  %.idx = getelementptr %struct.function* %2, i64 0, i32 4
  %.idx.val = load %struct.varasm_status** %.idx, align 8, !tbaa !46
  %.idx.val.idx = getelementptr %struct.varasm_status* %.idx.val, i64 0, i32 1
  %.idx.val.idx.val = load %struct.pool_constant*** %.idx.val.idx, align 8, !tbaa !111
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %3 = load i8** %rtstr.i, align 8, !tbaa !4
  %4 = ptrtoint i8* %3 to i64
  %and.i = and i64 %4, 1073741823
  %rem.i = urem i64 %and.i, 61
  %arrayidx1.i = getelementptr inbounds %struct.pool_constant** %.idx.val.idx.val, i64 %rem.i
  %pool.02.i = load %struct.pool_constant** %arrayidx1.i, align 8
  %tobool3.i = icmp eq %struct.pool_constant* %pool.02.i, null
  br i1 %tobool3.i, label %for.end.i, label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %next_sym.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 2
  %pool.0.i = load %struct.pool_constant** %next_sym.i, align 8
  %tobool.i = icmp eq %struct.pool_constant* %pool.0.i, null
  br i1 %tobool.i, label %for.end.i, label %for.body.i

for.body.i:                                       ; preds = %if.then5, %for.cond.i
  %pool.04.i = phi %struct.pool_constant* [ %pool.0.i, %for.cond.i ], [ %pool.02.i, %if.then5 ]
  %desc.i = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 0
  %5 = load %struct.constant_descriptor** %desc.i, align 8, !tbaa !112
  %rtl.i = getelementptr inbounds %struct.constant_descriptor* %5, i64 0, i32 2
  %6 = load %struct.rtx_def** %rtl.i, align 8, !tbaa !98
  %arrayidx3.i = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0
  %rtx.i = bitcast %union.rtunion_def* %arrayidx3.i to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !4
  %arrayidx5.i = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0
  %rtstr6.i = bitcast %union.rtunion_def* %arrayidx5.i to i8**
  %8 = load i8** %rtstr6.i, align 8, !tbaa !4
  %cmp.i = icmp eq i8* %8, %3
  br i1 %cmp.i, label %find_pool_constant.exit, label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i, %if.then5
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3875, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.find_pool_constant, i64 0, i64 0)) #9
  unreachable

find_pool_constant.exit:                          ; preds = %for.body.i
  %mark = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 8
  %9 = load i32* %mark, align 4, !tbaa !51
  %cmp6 = icmp eq i32 %9, 0
  br i1 %cmp6, label %if.then7, label %return

if.then7:                                         ; preds = %find_pool_constant.exit
  store i32 1, i32* %mark, align 4, !tbaa !51
  %constant = getelementptr inbounds %struct.pool_constant* %pool.04.i, i64 0, i32 3
  %call9 = tail call i32 @for_each_rtx(%struct.rtx_def** %constant, i32 (%struct.rtx_def**, i8*)* @mark_constant, i8* null) #6
  br label %return

if.else11:                                        ; preds = %if.then2
  %tobool14 = icmp slt i32 %bf.load, 0
  br i1 %tobool14, label %if.then15, label %return

if.then15:                                        ; preds = %if.else11
  %10 = load %struct.htab** @const_str_htab, align 8, !tbaa !4
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx to i8**
  %11 = load i8** %rtstr, align 8, !tbaa !4
  %12 = ptrtoint i8* %11 to i64
  %shr41 = lshr i64 %12, 3
  %conv = trunc i64 %shr41 to i32
  %call19 = tail call i8** @htab_find_slot_with_hash(%struct.htab* %10, i8* %11, i32 %conv, i32 0) #6
  %tobool20 = icmp eq i8** %call19, null
  br i1 %tobool20, label %return, label %if.then21

if.then21:                                        ; preds = %if.then15
  %13 = load i8** %call19, align 8
  %bf.load22 = load i32* %1, align 8
  %bf.clear23 = and i32 %bf.load22, 2147483647
  store i32 %bf.clear23, i32* %1, align 8
  %exp = getelementptr inbounds i8* %13, i64 8
  %14 = bitcast i8* %exp to %union.tree_node**
  %15 = load %union.tree_node** %14, align 8, !tbaa !104
  %labelno = getelementptr inbounds i8* %13, i64 16
  %16 = bitcast i8* %labelno to i32*
  %17 = load i32* %16, align 4, !tbaa !102
  tail call fastcc void @output_constant_def_contents(%union.tree_node* %15, i32 0, i32 %17)
  %18 = load %struct.htab** @const_str_htab, align 8, !tbaa !4
  tail call void @htab_clear_slot(%struct.htab* %18, i8** %call19) #6
  br label %return

return:                                           ; preds = %if.then7, %if.then21, %if.else11, %if.else, %if.then15, %find_pool_constant.exit, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ -1, %find_pool_constant.exit ], [ 0, %if.then15 ], [ 0, %if.else ], [ 0, %if.else11 ], [ 0, %if.then21 ], [ 0, %if.then7 ]
  ret i32 %retval.0
}

declare i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #3

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #6

declare %union.tree_node* @build1(i32, %union.tree_node*, %union.tree_node*) #3

declare %union.tree_node* @copy_node(%union.tree_node*) #3

declare %union.tree_node* @build_complex(%union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare %union.tree_node* @build(i32, %union.tree_node*, ...) #3

declare %union.tree_node* @copy_list(%union.tree_node*) #3

declare void @_obstack_newchunk(%struct.obstack*, i32) #3

; Function Attrs: nounwind uwtable
define internal fastcc void @record_constant_1(%union.tree_node* %exp) #0 {
entry:
  %value341 = alloca %struct.addr_const, align 8
  %code1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %bf.clear = and i32 %bf.load, 255
  %0 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr = getelementptr inbounds i8* %0, i64 1
  %1 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp = icmp ugt i8* %add.ptr, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 1) #6
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i8* [ %.pre, %if.then ], [ %0, %entry ]
  %conv = trunc i32 %bf.load to i8
  %incdec.ptr = getelementptr inbounds i8* %2, i64 1
  store i8* %incdec.ptr, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  store i8 %conv, i8* %2, align 1, !tbaa !1
  switch i32 %bf.clear, label %sw.default413 [
    i32 25, label %sw.bb
    i32 26, label %sw.bb19
    i32 29, label %sw.bb38
    i32 27, label %sw.bb73
    i32 46, label %sw.bb75
    i32 121, label %sw.bb340
    i32 59, label %sw.bb402
    i32 60, label %sw.bb402
    i32 113, label %sw.bb402
    i32 115, label %sw.bb409
    i32 114, label %sw.bb409
    i32 116, label %sw.bb409
  ]

sw.bb:                                            ; preds = %if.end
  %3 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr5 = getelementptr inbounds i8* %3, i64 1
  %4 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp7 = icmp ugt i8* %add.ptr5, %4
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %sw.bb
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 1) #6
  %.pre604 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %sw.bb
  %5 = phi i8* [ %.pre604, %if.then9 ], [ %3, %sw.bb ]
  %type = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type, align 8, !tbaa !27
  %type12 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type12, i64 0, i32 6
  %bf.load13 = load i32* %precision, align 4
  %conv15 = trunc i32 %bf.load13 to i8
  %incdec.ptr17 = getelementptr inbounds i8* %5, i64 1
  store i8* %incdec.ptr17, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  store i8 %conv15, i8* %5, align 1, !tbaa !1
  %int_cst18 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %7 = bitcast i32* %int_cst18 to i8*
  br label %sw.epilog419

sw.bb19:                                          ; preds = %if.end
  %8 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr22 = getelementptr inbounds i8* %8, i64 1
  %9 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp24 = icmp ugt i8* %add.ptr22, %9
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %sw.bb19
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 1) #6
  %.pre606 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %sw.bb19
  %10 = phi i8* [ %.pre606, %if.then26 ], [ %8, %sw.bb19 ]
  %type29 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %11 = load %union.tree_node** %type29, align 8, !tbaa !27
  %type30 = bitcast %union.tree_node* %11 to %struct.tree_type*
  %precision31 = getelementptr inbounds %struct.tree_type* %type30, i64 0, i32 6
  %bf.load32 = load i32* %precision31, align 4
  %conv34 = trunc i32 %bf.load32 to i8
  %incdec.ptr36 = getelementptr inbounds i8* %10, i64 1
  store i8* %incdec.ptr36, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  store i8 %conv34, i8* %10, align 1, !tbaa !1
  %real_cst37 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %12 = bitcast i32* %real_cst37 to i8*
  br label %sw.epilog419

sw.bb38:                                          ; preds = %if.end
  %13 = load i32* @flag_writable_strings, align 4, !tbaa !23
  %tobool = icmp eq i32 %13, 0
  br i1 %tobool, label %if.end40, label %return

if.end40:                                         ; preds = %sw.bb38
  %14 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr43 = getelementptr inbounds i8* %14, i64 1
  %15 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp45 = icmp ugt i8* %add.ptr43, %15
  br i1 %cmp45, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.end40
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 1) #6
  %.pre607 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %if.end40
  %16 = phi i8* [ %.pre607, %if.then47 ], [ %14, %if.end40 ]
  %type50 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %17 = load %union.tree_node** %type50, align 8, !tbaa !27
  %type51 = bitcast %union.tree_node* %17 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type51, i64 0, i32 6
  %bf.load52 = load i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load52, 9
  %bf.lshr.tr = trunc i32 %bf.lshr to i8
  %conv54 = and i8 %bf.lshr.tr, 127
  %incdec.ptr56 = getelementptr inbounds i8* %16, i64 1
  store i8* %incdec.ptr56, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  store i8 %conv54, i8* %16, align 1, !tbaa !1
  %pointer = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 4
  %18 = load %union.tree_node** %pointer, align 8
  %19 = bitcast %union.tree_node* %18 to i8*
  %20 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %21 = load i32* %20, align 4, !tbaa !28
  %22 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr60 = getelementptr inbounds i8* %22, i64 4
  %23 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp62 = icmp ugt i8* %add.ptr60, %23
  br i1 %cmp62, label %if.then64, label %if.end65

if.then64:                                        ; preds = %if.end48
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 4) #6
  %.pre608 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %.pre609 = load i32* %20, align 1
  br label %if.end65

if.end65:                                         ; preds = %if.then64, %if.end48
  %24 = phi i32 [ %.pre609, %if.then64 ], [ %21, %if.end48 ]
  %25 = phi i8* [ %.pre608, %if.then64 ], [ %22, %if.end48 ]
  %26 = bitcast i8* %25 to i32*
  store i32 %24, i32* %26, align 1
  %27 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr72 = getelementptr inbounds i8* %27, i64 4
  store i8* %add.ptr72, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %sw.epilog419

sw.bb73:                                          ; preds = %if.end
  %real = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %28 = bitcast i32* %real to %union.tree_node**
  %29 = load %union.tree_node** %28, align 8, !tbaa !72
  tail call fastcc void @record_constant_1(%union.tree_node* %29)
  %30 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 4
  %31 = load %union.tree_node** %30, align 8, !tbaa !74
  tail call fastcc void @record_constant_1(%union.tree_node* %31)
  br label %return

sw.bb75:                                          ; preds = %if.end
  %type77 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %32 = load %union.tree_node** %type77, align 8, !tbaa !27
  %code79 = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 0, i32 2
  %bf.load80 = load i32* %code79, align 8
  %bf.clear81 = and i32 %bf.load80, 255
  %cmp82 = icmp eq i32 %bf.clear81, 19
  br i1 %cmp82, label %if.then84, label %if.else

if.then84:                                        ; preds = %sw.bb75
  %call = tail call i64 @int_size_in_bytes(%union.tree_node* %32) #6
  %conv87 = trunc i64 %call to i32
  %33 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr92 = getelementptr inbounds i8* %33, i64 4
  %34 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp94 = icmp ugt i8* %add.ptr92, %34
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %if.then84
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 4) #6
  %.pre610 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end97

if.end97:                                         ; preds = %if.then96, %if.then84
  %35 = phi i8* [ %.pre610, %if.then96 ], [ %33, %if.then84 ]
  %36 = bitcast i8* %35 to i32*
  store i32 %conv87, i32* %36, align 1
  %37 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr102 = getelementptr inbounds i8* %37, i64 4
  store i8* %add.ptr102, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %38 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %sub.ptr.lhs.cast = ptrtoint i8* %38 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr102 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sext597 = shl i64 %call, 32
  %conv107 = ashr exact i64 %sext597, 32
  %cmp108 = icmp slt i64 %sub.ptr.sub, %conv107
  br i1 %cmp108, label %if.then110, label %if.end111

if.then110:                                       ; preds = %if.end97
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 %conv87) #6
  %.pre611 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end111

if.end111:                                        ; preds = %if.then110, %if.end97
  %39 = phi i8* [ %.pre611, %if.then110 ], [ %add.ptr102, %if.end97 ]
  %add.ptr114 = getelementptr inbounds i8* %39, i64 %conv107
  store i8* %add.ptr114, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %call117 = tail call %union.tree_node* @get_set_constructor_bytes(%union.tree_node* %exp, i8* %39, i32 %conv87) #6
  br label %return

if.else:                                          ; preds = %sw.bb75
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %40 = bitcast i32* %arrayidx to %union.tree_node**
  %41 = load %union.tree_node** %40, align 8, !tbaa !4
  %call120 = tail call i32 @list_length(%union.tree_node* %41) #6
  %42 = load %union.tree_node** %type77, align 8, !tbaa !27
  %type124 = bitcast %union.tree_node* %42 to %struct.tree_type*
  %mode125 = getelementptr inbounds %struct.tree_type* %type124, i64 0, i32 6
  %bf.load126 = load i32* %mode125, align 4
  %bf.lshr127 = lshr i32 %bf.load126, 9
  %bf.clear128 = and i32 %bf.lshr127, 127
  %link.0601 = load %union.tree_node** %40, align 8
  %tobool133602 = icmp eq %union.tree_node* %link.0601, null
  br i1 %tobool133602, label %for.end, label %for.body

for.body:                                         ; preds = %if.else, %for.body
  %link.0603 = phi %union.tree_node* [ %link.0, %for.body ], [ %link.0601, %if.else ]
  %43 = phi i32 [ %.596, %for.body ], [ 0, %if.else ]
  %purpose = getelementptr inbounds %union.tree_node* %link.0603, i64 0, i32 0, i32 1
  %44 = load i8** %purpose, align 8
  %tobool134 = icmp eq i8* %44, null
  %.596 = select i1 %tobool134, i32 %43, i32 1
  %chain = getelementptr inbounds %union.tree_node* %link.0603, i64 0, i32 0, i32 0, i32 0
  %link.0 = load %union.tree_node** %chain, align 8
  %tobool133 = icmp eq %union.tree_node* %link.0, null
  br i1 %tobool133, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.else
  %.lcssa = phi i32 [ 0, %if.else ], [ %.596, %for.body ]
  %45 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr142 = getelementptr inbounds i8* %45, i64 4
  %46 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp144 = icmp ugt i8* %add.ptr142, %46
  br i1 %cmp144, label %if.then146, label %if.end147

if.then146:                                       ; preds = %for.end
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 4) #6
  %.pre612 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end147

if.end147:                                        ; preds = %if.then146, %for.end
  %47 = phi i8* [ %.pre612, %if.then146 ], [ %45, %for.end ]
  %48 = bitcast i8* %47 to i32*
  store i32 %call120, i32* %48, align 1
  %49 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr152 = getelementptr inbounds i8* %49, i64 4
  store i8* %add.ptr152, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %50 = load %union.tree_node** %type77, align 8, !tbaa !27
  %code156 = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 0, i32 2
  %bf.load157 = load i32* %code156, align 8
  %bf.clear158 = and i32 %bf.load157, 255
  %cmp159 = icmp eq i32 %bf.clear158, 20
  %51 = ptrtoint %union.tree_node* %50 to i64
  %52 = select i1 %cmp159, i64 %51, i64 0
  %add.ptr170 = getelementptr inbounds i8* %49, i64 12
  %53 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp172 = icmp ugt i8* %add.ptr170, %53
  br i1 %cmp172, label %if.then174, label %if.end175

if.then174:                                       ; preds = %if.end147
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre613 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end175

if.end175:                                        ; preds = %if.then174, %if.end147
  %54 = phi i8* [ %.pre613, %if.then174 ], [ %add.ptr152, %if.end147 ]
  %55 = bitcast i8* %54 to i64*
  store i64 %52, i64* %55, align 1
  %56 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr180 = getelementptr inbounds i8* %56, i64 8
  store i8* %add.ptr180, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %57 = load %union.tree_node** %type77, align 8, !tbaa !27
  %code184 = getelementptr inbounds %union.tree_node* %57, i64 0, i32 0, i32 0, i32 2
  %bf.load185 = load i32* %code184, align 8
  %bf.clear186 = and i32 %bf.load185, 255
  %cmp187 = icmp eq i32 %bf.clear186, 18
  br i1 %cmp187, label %if.then189, label %if.end205

if.then189:                                       ; preds = %if.end175
  %add.ptr194 = getelementptr inbounds i8* %56, i64 12
  %58 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp196 = icmp ugt i8* %add.ptr194, %58
  br i1 %cmp196, label %if.then198, label %if.end199

if.then198:                                       ; preds = %if.then189
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 4) #6
  %.pre614 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end199

if.end199:                                        ; preds = %if.then198, %if.then189
  %59 = phi i8* [ %.pre614, %if.then198 ], [ %add.ptr180, %if.then189 ]
  %60 = bitcast i8* %59 to i32*
  store i32 %bf.clear128, i32* %60, align 1
  %61 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr204 = getelementptr inbounds i8* %61, i64 4
  store i8* %add.ptr204, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end205

if.end205:                                        ; preds = %if.end199, %if.end175
  %62 = phi i8* [ %add.ptr204, %if.end199 ], [ %add.ptr180, %if.end175 ]
  %add.ptr210 = getelementptr inbounds i8* %62, i64 4
  %63 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp212 = icmp ugt i8* %add.ptr210, %63
  br i1 %cmp212, label %if.then214, label %if.end215

if.then214:                                       ; preds = %if.end205
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 4) #6
  %.pre615 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end215

if.end215:                                        ; preds = %if.then214, %if.end205
  %64 = phi i8* [ %.pre615, %if.then214 ], [ %62, %if.end205 ]
  %65 = bitcast i8* %64 to i32*
  store i32 %.lcssa, i32* %65, align 1
  %66 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr220 = getelementptr inbounds i8* %66, i64 4
  store i8* %add.ptr220, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %67 = load %union.tree_node** %type77, align 8, !tbaa !27
  %code224 = getelementptr inbounds %union.tree_node* %67, i64 0, i32 0, i32 0, i32 2
  %bf.load225 = load i32* %code224, align 8
  %bf.clear226 = and i32 %bf.load225, 255
  %cmp227 = icmp eq i32 %bf.clear226, 18
  br i1 %cmp227, label %if.then229, label %for.cond252.preheader

if.then229:                                       ; preds = %if.end215
  %call232 = tail call i64 @int_size_in_bytes(%union.tree_node* %67) #6
  %68 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr237 = getelementptr inbounds i8* %68, i64 8
  %69 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp239 = icmp ugt i8* %add.ptr237, %69
  br i1 %cmp239, label %if.then241, label %if.end242

if.then241:                                       ; preds = %if.then229
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre616 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end242

if.end242:                                        ; preds = %if.then241, %if.then229
  %70 = phi i8* [ %.pre616, %if.then241 ], [ %68, %if.then229 ]
  %71 = bitcast i8* %70 to i64*
  store i64 %call232, i64* %71, align 1
  %72 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr247 = getelementptr inbounds i8* %72, i64 8
  store i8* %add.ptr247, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %for.cond252.preheader

for.cond252.preheader:                            ; preds = %if.end242, %if.end215
  %link.1598 = load %union.tree_node** %40, align 8
  %tobool253599 = icmp eq %union.tree_node* %link.1598, null
  br i1 %tobool253599, label %return, label %for.body254.lr.ph

for.body254.lr.ph:                                ; preds = %for.cond252.preheader
  %tobool314 = icmp eq i32 %.lcssa, 0
  br label %for.body254

for.body254:                                      ; preds = %for.body254.lr.ph, %for.inc335
  %link.1600 = phi %union.tree_node* [ %link.1598, %for.body254.lr.ph ], [ %link.1, %for.inc335 ]
  %value = getelementptr inbounds %union.tree_node* %link.1600, i64 0, i32 0, i32 2
  %73 = bitcast i32* %value to %union.tree_node**
  %74 = load %union.tree_node** %73, align 8, !tbaa !60
  %tobool256 = icmp eq %union.tree_node* %74, null
  br i1 %tobool256, label %if.else260, label %if.then257

if.then257:                                       ; preds = %for.body254
  tail call fastcc void @record_constant_1(%union.tree_node* %74)
  br label %if.end276

if.else260:                                       ; preds = %for.body254
  %75 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr265 = getelementptr inbounds i8* %75, i64 8
  %76 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp267 = icmp ugt i8* %add.ptr265, %76
  br i1 %cmp267, label %if.then269, label %if.end270

if.then269:                                       ; preds = %if.else260
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre617 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end270

if.end270:                                        ; preds = %if.then269, %if.else260
  %77 = phi i8* [ %.pre617, %if.then269 ], [ %75, %if.else260 ]
  %78 = bitcast i8* %77 to i64*
  store i64 0, i64* %78, align 1
  %79 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr275 = getelementptr inbounds i8* %79, i64 8
  store i8* %add.ptr275, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end276

if.end276:                                        ; preds = %if.end270, %if.then257
  %purpose278 = getelementptr inbounds %union.tree_node* %link.1600, i64 0, i32 0, i32 1
  %80 = load i8** %purpose278, align 8
  %tobool279 = icmp eq i8* %80, null
  %81 = ptrtoint i8* %80 to i64
  br i1 %tobool279, label %if.else313, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end276
  %code283 = getelementptr inbounds i8* %80, i64 16
  %82 = bitcast i8* %code283 to i32*
  %bf.load284 = load i32* %82, align 8
  %bf.clear285 = and i32 %bf.load284, 255
  %cmp286 = icmp eq i32 %bf.clear285, 37
  br i1 %cmp286, label %if.then288, label %if.then310

if.then288:                                       ; preds = %land.lhs.true
  %83 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr293 = getelementptr inbounds i8* %83, i64 8
  %84 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp295 = icmp ugt i8* %add.ptr293, %84
  br i1 %cmp295, label %if.then297, label %if.end298

if.then297:                                       ; preds = %if.then288
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre619 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %.phi.trans.insert = bitcast i8** %purpose278 to i64*
  %.pre620 = load i64* %.phi.trans.insert, align 1
  br label %if.end298

if.end298:                                        ; preds = %if.then288, %if.then297
  %85 = phi i64 [ %.pre620, %if.then297 ], [ %81, %if.then288 ]
  %86 = phi i8* [ %.pre619, %if.then297 ], [ %83, %if.then288 ]
  %87 = bitcast i8* %86 to i64*
  store i64 %85, i64* %87, align 1
  %88 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr305 = getelementptr inbounds i8* %88, i64 8
  store i8* %add.ptr305, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %for.inc335

if.then310:                                       ; preds = %land.lhs.true
  %89 = bitcast i8* %80 to %union.tree_node*
  tail call fastcc void @record_constant_1(%union.tree_node* %89)
  br label %for.inc335

if.else313:                                       ; preds = %if.end276
  br i1 %tobool314, label %for.inc335, label %if.then315

if.then315:                                       ; preds = %if.else313
  %90 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr321 = getelementptr inbounds i8* %90, i64 4
  %91 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp323 = icmp ugt i8* %add.ptr321, %91
  br i1 %cmp323, label %if.then325, label %if.end326

if.then325:                                       ; preds = %if.then315
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 4) #6
  %.pre618 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end326

if.end326:                                        ; preds = %if.then325, %if.then315
  %92 = phi i8* [ %.pre618, %if.then325 ], [ %90, %if.then315 ]
  %93 = bitcast i8* %92 to i32*
  store i32 0, i32* %93, align 1
  %94 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr331 = getelementptr inbounds i8* %94, i64 4
  store i8* %add.ptr331, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %for.inc335

for.inc335:                                       ; preds = %if.else313, %if.end298, %if.end326, %if.then310
  %chain337 = getelementptr inbounds %union.tree_node* %link.1600, i64 0, i32 0, i32 0, i32 0
  %link.1 = load %union.tree_node** %chain337, align 8
  %tobool253 = icmp eq %union.tree_node* %link.1, null
  br i1 %tobool253, label %return, label %for.body254

sw.bb340:                                         ; preds = %if.end
  call fastcc void @decode_addr_const(%union.tree_node* %exp, %struct.addr_const* %value341)
  %95 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr346 = getelementptr inbounds i8* %95, i64 8
  %96 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp348 = icmp ugt i8* %add.ptr346, %96
  br i1 %cmp348, label %if.then350, label %if.end351

if.then350:                                       ; preds = %sw.bb340
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre621 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end351

if.end351:                                        ; preds = %if.then350, %sw.bb340
  %97 = phi i8* [ %.pre621, %if.then350 ], [ %95, %sw.bb340 ]
  %offset = getelementptr inbounds %struct.addr_const* %value341, i64 0, i32 1
  %98 = bitcast i8* %97 to i64*
  %99 = load i64* %offset, align 8
  store i64 %99, i64* %98, align 1
  %100 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr356 = getelementptr inbounds i8* %100, i64 8
  store i8* %add.ptr356, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %base = getelementptr inbounds %struct.addr_const* %value341, i64 0, i32 0
  %101 = load %struct.rtx_def** %base, align 8, !tbaa !106
  %102 = getelementptr inbounds %struct.rtx_def* %101, i64 0, i32 0
  %bf.load357 = load i32* %102, align 8
  %bf.clear358 = and i32 %bf.load357, 65535
  switch i32 %bf.clear358, label %sw.default [
    i32 68, label %sw.bb359
    i32 67, label %sw.bb383
  ]

sw.bb359:                                         ; preds = %if.end351
  %arrayidx363 = getelementptr inbounds %struct.rtx_def* %101, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx363 to i8**
  %103 = load i8** %rtstr, align 8, !tbaa !4
  %call364 = tail call i64 @strlen(i8* %103) #6
  %add = add i64 %call364, 1
  %sext = shl i64 %add, 32
  %idx.ext367 = ashr exact i64 %sext, 32
  %add.ptr356.sum = add i64 %idx.ext367, 8
  %add.ptr368 = getelementptr inbounds i8* %100, i64 %add.ptr356.sum
  %104 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp370 = icmp ugt i8* %add.ptr368, %104
  br i1 %cmp370, label %if.then372, label %if.end373

if.then372:                                       ; preds = %sw.bb359
  %conv365 = trunc i64 %add to i32
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 %conv365) #6
  %.pre622 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %.pre623 = load i8** %rtstr, align 8, !tbaa !4
  br label %if.end373

if.end373:                                        ; preds = %if.then372, %sw.bb359
  %105 = phi i8* [ %.pre623, %if.then372 ], [ %103, %sw.bb359 ]
  %106 = phi i8* [ %.pre622, %if.then372 ], [ %add.ptr356, %sw.bb359 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %106, i8* %105, i64 %idx.ext367, i32 1, i1 false)
  %107 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr382 = getelementptr inbounds i8* %107, i64 %idx.ext367
  store i8* %add.ptr382, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %return

sw.bb383:                                         ; preds = %if.end351
  %add.ptr388 = getelementptr inbounds i8* %100, i64 16
  %108 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp390 = icmp ugt i8* %add.ptr388, %108
  br i1 %cmp390, label %if.then392, label %if.end393

if.then392:                                       ; preds = %sw.bb383
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 8) #6
  %.pre624 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end393

if.end393:                                        ; preds = %if.then392, %sw.bb383
  %109 = phi i8* [ %.pre624, %if.then392 ], [ %add.ptr356, %sw.bb383 ]
  %110 = getelementptr inbounds %struct.rtx_def* %101, i64 0, i32 1, i64 0, i32 0
  %111 = bitcast i8* %109 to i64*
  %112 = load i64* %110, align 1
  store i64 %112, i64* %111, align 1
  %113 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr401 = getelementptr inbounds i8* %113, i64 8
  store i8* %add.ptr401, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %return

sw.default:                                       ; preds = %if.end351
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 3034, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.record_constant_1, i64 0, i64 0)) #9
  unreachable

sw.bb402:                                         ; preds = %if.end, %if.end, %if.end
  %operands404 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx405 = bitcast i32* %operands404 to %union.tree_node**
  %114 = load %union.tree_node** %arrayidx405, align 8, !tbaa !4
  tail call fastcc void @record_constant_1(%union.tree_node* %114)
  %arrayidx408 = getelementptr inbounds i32* %operands404, i64 2
  %115 = bitcast i32* %arrayidx408 to %union.tree_node**
  %116 = load %union.tree_node** %115, align 8, !tbaa !4
  tail call fastcc void @record_constant_1(%union.tree_node* %116)
  br label %return

sw.bb409:                                         ; preds = %if.end, %if.end, %if.end
  %operands411 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx412 = bitcast i32* %operands411 to %union.tree_node**
  %117 = load %union.tree_node** %arrayidx412, align 8, !tbaa !4
  tail call fastcc void @record_constant_1(%union.tree_node* %117)
  br label %return

sw.default413:                                    ; preds = %if.end
  %118 = load %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 9), align 8, !tbaa !67
  %call414 = tail call %union.tree_node* %118(%union.tree_node* %exp) #6
  %cmp415 = icmp eq %union.tree_node* %call414, %exp
  br i1 %cmp415, label %return, label %if.then417

if.then417:                                       ; preds = %sw.default413
  tail call fastcc void @record_constant_1(%union.tree_node* %call414)
  br label %return

sw.epilog419:                                     ; preds = %if.end65, %if.end27, %if.end10
  %len.0 = phi i32 [ %21, %if.end65 ], [ 24, %if.end27 ], [ 16, %if.end10 ]
  %strp.0 = phi i8* [ %19, %if.end65 ], [ %12, %if.end27 ], [ %7, %if.end10 ]
  %119 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %idx.ext423 = sext i32 %len.0 to i64
  %add.ptr424 = getelementptr inbounds i8* %119, i64 %idx.ext423
  %120 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 4), align 8, !tbaa !91
  %cmp426 = icmp ugt i8* %add.ptr424, %120
  br i1 %cmp426, label %if.then428, label %if.end429

if.then428:                                       ; preds = %sw.epilog419
  tail call void @_obstack_newchunk(%struct.obstack* @permanent_obstack, i32 %len.0) #6
  %.pre605 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %if.end429

if.end429:                                        ; preds = %if.then428, %sw.epilog419
  %121 = phi i8* [ %.pre605, %if.then428 ], [ %119, %sw.epilog419 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* %strp.0, i64 %idx.ext423, i32 1, i1 false)
  %122 = load i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  %add.ptr434 = getelementptr inbounds i8* %122, i64 %idx.ext423
  store i8* %add.ptr434, i8** getelementptr inbounds (%struct.obstack* @permanent_obstack, i64 0, i32 3), align 8, !tbaa !89
  br label %return

return:                                           ; preds = %for.inc335, %for.cond252.preheader, %sw.default413, %sw.bb38, %if.then417, %if.end373, %if.end393, %if.end429, %sw.bb409, %sw.bb402, %if.end111, %sw.bb73
  ret void
}

declare i32 @list_length(%union.tree_node*) #3

; Function Attrs: nounwind uwtable
define internal fastcc void @decode_addr_const(%union.tree_node* nocapture readonly %exp, %struct.addr_const* nocapture %value) #0 {
entry:
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  br label %while.body

while.body:                                       ; preds = %while.body.backedge, %entry
  %target.0.in = phi %union.tree_node** [ %arrayidx, %entry ], [ %target.0.in.be, %while.body.backedge ]
  %offset.0 = phi i32 [ 0, %entry ], [ %offset.0.be, %while.body.backedge ]
  %target.0 = load %union.tree_node** %target.0.in, align 8
  %code = getelementptr inbounds %union.tree_node* %target.0, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 39
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %operands3 = getelementptr inbounds %union.tree_node* %target.0, i64 0, i32 0, i32 2
  %arrayidx4 = getelementptr inbounds i32* %operands3, i64 2
  %0 = bitcast i32* %arrayidx4 to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !4
  %call = tail call %union.tree_node* @byte_position(%union.tree_node* %1) #6
  %call5 = tail call i32 @host_integerp(%union.tree_node* %call, i32 0) #6
  %tobool = icmp eq i32 %call5, 0
  br i1 %tobool, label %land.lhs.true.if.else_crit_edge, label %if.then

land.lhs.true.if.else_crit_edge:                  ; preds = %land.lhs.true
  %bf.load16.pre = load i32* %code, align 8
  br label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load %union.tree_node** %0, align 8, !tbaa !4
  %call9 = tail call i64 @int_byte_position(%union.tree_node* %2) #6
  %conv89 = zext i32 %offset.0 to i64
  %add = add nsw i64 %call9, %conv89
  br label %while.body.backedge

if.else:                                          ; preds = %land.lhs.true.if.else_crit_edge, %while.body
  %bf.load16 = phi i32 [ %bf.load16.pre, %land.lhs.true.if.else_crit_edge ], [ %bf.load, %while.body ]
  %bf.clear17 = and i32 %bf.load16, 255
  switch i32 %bf.clear17, label %sw.default [
    i32 43, label %if.then26
    i32 44, label %if.then26
    i32 34, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb51
    i32 26, label %sw.bb58
    i32 29, label %sw.bb58
    i32 27, label %sw.bb58
    i32 46, label %sw.bb58
    i32 25, label %sw.bb58
  ]

if.then26:                                        ; preds = %if.else, %if.else
  %type = getelementptr inbounds %union.tree_node* %target.0, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type, align 8, !tbaa !27
  %4 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 4
  %5 = load %union.tree_node** %4, align 8, !tbaa !122
  %call29 = tail call i64 @tree_low_cst(%union.tree_node* %5, i32 1) #6
  %operands31 = getelementptr inbounds %union.tree_node* %target.0, i64 0, i32 0, i32 2
  %arrayidx32 = getelementptr inbounds i32* %operands31, i64 2
  %6 = bitcast i32* %arrayidx32 to %union.tree_node**
  %7 = load %union.tree_node** %6, align 8, !tbaa !4
  %call33 = tail call i64 @tree_low_cst(%union.tree_node* %7, i32 0) #6
  %mul = mul nsw i64 %call33, %call29
  %conv3488 = zext i32 %offset.0 to i64
  %add35 = add nsw i64 %mul, %conv3488
  br label %while.body.backedge

while.body.backedge:                              ; preds = %if.then26, %if.then
  %target.0.in.be.in = phi i32* [ %operands3, %if.then ], [ %operands31, %if.then26 ]
  %offset.0.be.in = phi i64 [ %add, %if.then ], [ %add35, %if.then26 ]
  %offset.0.be = trunc i64 %offset.0.be.in to i32
  %target.0.in.be = bitcast i32* %target.0.in.be.in to %union.tree_node**
  br label %while.body

sw.bb:                                            ; preds = %if.else, %if.else
  %rtl = getelementptr inbounds %union.tree_node* %target.0, i64 0, i32 0, i32 17
  %8 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  %tobool46 = icmp eq %struct.rtx_def* %8, null
  br i1 %tobool46, label %cond.false, label %sw.epilog

cond.false:                                       ; preds = %sw.bb
  tail call void @make_decl_rtl(%union.tree_node* %target.0, i8* null)
  %9 = load %struct.rtx_def** %rtl, align 8, !tbaa !35
  br label %sw.epilog

sw.bb51:                                          ; preds = %if.else
  %10 = load %union.tree_node** %arrayidx, align 8, !tbaa !4
  %call55 = tail call %struct.rtx_def* @label_rtx(%union.tree_node* %10) #6
  %call56 = tail call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %call55) #6
  %call57 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %call56) #6
  br label %sw.epilog

sw.bb58:                                          ; preds = %if.else, %if.else, %if.else, %if.else, %if.else
  %call59 = tail call %struct.rtx_def* @output_constant_def(%union.tree_node* %target.0, i32 1)
  br label %sw.epilog

sw.default:                                       ; preds = %if.else
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2352, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.decode_addr_const, i64 0, i64 0)) #9
  unreachable

sw.epilog:                                        ; preds = %cond.false, %sw.bb, %sw.bb58, %sw.bb51
  %x.0 = phi %struct.rtx_def* [ %call59, %sw.bb58 ], [ %call57, %sw.bb51 ], [ %9, %cond.false ], [ %8, %sw.bb ]
  %11 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 0
  %bf.load60 = load i32* %11, align 8
  %bf.clear61 = and i32 %bf.load60, 65535
  %cmp62 = icmp eq i32 %bf.clear61, 66
  br i1 %cmp62, label %if.end65, label %if.then64

if.then64:                                        ; preds = %sw.epilog
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), i32 2356, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.decode_addr_const, i64 0, i64 0)) #9
  unreachable

if.end65:                                         ; preds = %sw.epilog
  %arrayidx66 = getelementptr inbounds %struct.rtx_def* %x.0, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %base = getelementptr inbounds %struct.addr_const* %value, i64 0, i32 0
  store %struct.rtx_def* %12, %struct.rtx_def** %base, align 8, !tbaa !106
  %conv67 = sext i32 %offset.0 to i64
  %offset68 = getelementptr inbounds %struct.addr_const* %value, i64 0, i32 1
  store i64 %conv67, i64* %offset68, align 8, !tbaa !108
  ret void
}

declare %union.tree_node* @byte_position(%union.tree_node*) #3

declare %struct.rtx_def* @gen_rtx_fmt_u00(i32, i32, %struct.rtx_def*) #3

declare %struct.rtx_def* @label_rtx(%union.tree_node*) #3

; Function Attrs: nounwind uwtable
define internal fastcc i8* @compare_constant_1(%union.tree_node* %exp, i8* readonly %p) #0 {
entry:
  %xlen = alloca i32, align 4
  %length79 = alloca i32, align 4
  %type83 = alloca %union.tree_node*, align 8
  %mode85 = alloca i32, align 4
  %have_purpose = alloca i32, align 4
  %size = alloca i64, align 8
  %zero = alloca %union.tree_node*, align 8
  %zero223 = alloca i32, align 4
  %value238 = alloca %struct.addr_const, align 8
  %code1 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 2
  %bf.load = load i32* %code1, align 8
  %incdec.ptr = getelementptr inbounds i8* %p, i64 1
  %0 = load i8* %p, align 1, !tbaa !1
  %1 = trunc i32 %bf.load to i8
  %cmp = icmp eq i8 %0, %1
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 25, label %sw.bb
    i32 26, label %sw.bb14
    i32 29, label %sw.bb28
    i32 27, label %sw.bb48
    i32 46, label %sw.bb56
    i32 121, label %sw.bb236
    i32 124, label %sw.bb236
    i32 59, label %sw.bb252
    i32 60, label %sw.bb252
    i32 113, label %sw.bb252
    i32 115, label %sw.bb265
    i32 114, label %sw.bb265
    i32 116, label %sw.bb265
  ]

sw.bb:                                            ; preds = %if.end
  %2 = load i8* %incdec.ptr, align 1, !tbaa !1
  %conv4 = zext i8 %2 to i32
  %type = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type, align 8, !tbaa !27
  %type6 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type6, i64 0, i32 6
  %bf.load7 = load i32* %precision, align 4
  %bf.clear8 = and i32 %bf.load7, 511
  %cmp9 = icmp eq i32 %conv4, %bf.clear8
  br i1 %cmp9, label %if.end12, label %return

if.end12:                                         ; preds = %sw.bb
  %incdec.ptr3 = getelementptr inbounds i8* %p, i64 2
  %int_cst13 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %4 = bitcast i32* %int_cst13 to i8*
  br label %while.cond277

sw.bb14:                                          ; preds = %if.end
  %5 = load i8* %incdec.ptr, align 1, !tbaa !1
  %conv16 = zext i8 %5 to i32
  %type18 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type18, align 8, !tbaa !27
  %type19 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %precision20 = getelementptr inbounds %struct.tree_type* %type19, i64 0, i32 6
  %bf.load21 = load i32* %precision20, align 4
  %bf.clear22 = and i32 %bf.load21, 511
  %cmp23 = icmp eq i32 %conv16, %bf.clear22
  br i1 %cmp23, label %if.end26, label %return

if.end26:                                         ; preds = %sw.bb14
  %incdec.ptr15 = getelementptr inbounds i8* %p, i64 2
  %real_cst27 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %7 = bitcast i32* %real_cst27 to i8*
  br label %while.cond277

sw.bb28:                                          ; preds = %if.end
  %8 = load i32* @flag_writable_strings, align 4, !tbaa !23
  %tobool = icmp eq i32 %8, 0
  br i1 %tobool, label %if.end30, label %return

if.end30:                                         ; preds = %sw.bb28
  %9 = load i8* %incdec.ptr, align 1, !tbaa !1
  %conv32 = zext i8 %9 to i32
  %type34 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %10 = load %union.tree_node** %type34, align 8, !tbaa !27
  %type35 = bitcast %union.tree_node* %10 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type35, i64 0, i32 6
  %bf.load36 = load i32* %mode, align 4
  %bf.lshr = lshr i32 %bf.load36, 9
  %bf.clear37 = and i32 %bf.lshr, 127
  %cmp38 = icmp eq i32 %conv32, %bf.clear37
  br i1 %cmp38, label %if.end41, label %return

if.end41:                                         ; preds = %if.end30
  %incdec.ptr31 = getelementptr inbounds i8* %p, i64 2
  %11 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %12 = bitcast i32* %11 to i8*
  %call = call i32 @memcmp(i8* %12, i8* %incdec.ptr31, i64 4) #6
  %tobool45 = icmp eq i32 %call, 0
  br i1 %tobool45, label %if.end47, label %return

if.end47:                                         ; preds = %if.end41
  %pointer = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 4
  %13 = load i32* %11, align 4, !tbaa !28
  %14 = load %union.tree_node** %pointer, align 8
  %15 = bitcast %union.tree_node* %14 to i8*
  %add.ptr = getelementptr inbounds i8* %p, i64 6
  br label %while.cond277

sw.bb48:                                          ; preds = %if.end
  %real = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %16 = bitcast i32* %real to %union.tree_node**
  %17 = load %union.tree_node** %16, align 8, !tbaa !72
  %call49 = call fastcc i8* @compare_constant_1(%union.tree_node* %17, i8* %incdec.ptr)
  %cmp50 = icmp eq i8* %call49, null
  br i1 %cmp50, label %return, label %if.end53

if.end53:                                         ; preds = %sw.bb48
  %18 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 4
  %19 = load %union.tree_node** %18, align 8, !tbaa !74
  %call55 = call fastcc i8* @compare_constant_1(%union.tree_node* %19, i8* %call49)
  br label %return

sw.bb56:                                          ; preds = %if.end
  %type58 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 1
  %20 = load %union.tree_node** %type58, align 8, !tbaa !27
  %code60 = getelementptr inbounds %union.tree_node* %20, i64 0, i32 0, i32 0, i32 2
  %bf.load61 = load i32* %code60, align 8
  %bf.clear62 = and i32 %bf.load61, 255
  %cmp63 = icmp eq i32 %bf.clear62, 19
  br i1 %cmp63, label %if.then65, label %if.else

if.then65:                                        ; preds = %sw.bb56
  %call68 = call i64 @int_size_in_bytes(%union.tree_node* %20) #6
  %conv69 = trunc i64 %call68 to i32
  store i32 %conv69, i32* %xlen, align 4, !tbaa !23
  %sext = shl i64 %call68, 32
  %conv70 = ashr exact i64 %sext, 32
  %21 = alloca i8, i64 %conv70, align 1
  %call71 = call %union.tree_node* @get_set_constructor_bytes(%union.tree_node* %exp, i8* %21, i32 %conv69) #6
  %22 = bitcast i32* %xlen to i8*
  %call72 = call i32 @memcmp(i8* %22, i8* %incdec.ptr, i64 4) #6
  %tobool73 = icmp eq i32 %call72, 0
  br i1 %tobool73, label %if.end75, label %return

if.end75:                                         ; preds = %if.then65
  %add.ptr76 = getelementptr inbounds i8* %p, i64 5
  br label %while.cond277

if.else:                                          ; preds = %sw.bb56
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %23 = bitcast i32* %arrayidx to %union.tree_node**
  %24 = load %union.tree_node** %23, align 8, !tbaa !4
  %call81 = call i32 @list_length(%union.tree_node* %24) #6
  store i32 %call81, i32* %length79, align 4, !tbaa !23
  %25 = load %union.tree_node** %type58, align 8, !tbaa !27
  %type88 = bitcast %union.tree_node* %25 to %struct.tree_type*
  %mode89 = getelementptr inbounds %struct.tree_type* %type88, i64 0, i32 6
  %bf.load90 = load i32* %mode89, align 4
  %bf.lshr91 = lshr i32 %bf.load90, 9
  %bf.clear92 = and i32 %bf.lshr91, 127
  store i32 %bf.clear92, i32* %mode85, align 4, !tbaa !1
  store i32 0, i32* %have_purpose, align 4, !tbaa !23
  %link.0387 = load %union.tree_node** %23, align 8
  %tobool97388 = icmp eq %union.tree_node* %link.0387, null
  br i1 %tobool97388, label %for.end, label %for.body

for.body:                                         ; preds = %if.else, %for.inc
  %26 = phi i32 [ %28, %for.inc ], [ 0, %if.else ]
  %link.0389 = phi %union.tree_node* [ %link.0, %for.inc ], [ %link.0387, %if.else ]
  %purpose = getelementptr inbounds %union.tree_node* %link.0389, i64 0, i32 0, i32 1
  %27 = load i8** %purpose, align 8
  %tobool98 = icmp eq i8* %27, null
  br i1 %tobool98, label %for.inc, label %if.then99

if.then99:                                        ; preds = %for.body
  store i32 1, i32* %have_purpose, align 4, !tbaa !23
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then99
  %28 = phi i32 [ %26, %for.body ], [ 1, %if.then99 ]
  %chain = getelementptr inbounds %union.tree_node* %link.0389, i64 0, i32 0, i32 0, i32 0
  %link.0 = load %union.tree_node** %chain, align 8
  %tobool97 = icmp eq %union.tree_node* %link.0, null
  br i1 %tobool97, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.else
  %29 = phi i32 [ 0, %if.else ], [ %28, %for.inc ]
  %30 = bitcast i32* %length79 to i8*
  %call102 = call i32 @memcmp(i8* %30, i8* %incdec.ptr, i64 4) #6
  %tobool103 = icmp eq i32 %call102, 0
  br i1 %tobool103, label %if.end105, label %return

if.end105:                                        ; preds = %for.end
  %add.ptr106 = getelementptr inbounds i8* %p, i64 5
  %code110 = getelementptr inbounds %union.tree_node* %25, i64 0, i32 0, i32 0, i32 2
  %bf.load111 = load i32* %code110, align 8
  %bf.clear112 = and i32 %bf.load111, 255
  %cmp113 = icmp eq i32 %bf.clear112, 20
  %. = select i1 %cmp113, %union.tree_node* %25, %union.tree_node* null
  store %union.tree_node* %., %union.tree_node** %type83, align 8, !tbaa !4
  %31 = bitcast %union.tree_node** %type83 to i8*
  %call120 = call i32 @memcmp(i8* %31, i8* %add.ptr106, i64 8) #6
  %tobool121 = icmp eq i32 %call120, 0
  br i1 %tobool121, label %if.end123, label %return

if.end123:                                        ; preds = %if.end105
  %cmp130 = icmp eq i32 %bf.clear112, 18
  br i1 %cmp130, label %if.then132, label %if.end138

if.then132:                                       ; preds = %if.end123
  %32 = bitcast i32* %mode85 to i8*
  %call133 = call i32 @memcmp(i8* %32, i8* %add.ptr106, i64 4) #6
  %tobool134 = icmp eq i32 %call133, 0
  br i1 %tobool134, label %if.end136, label %return

if.end136:                                        ; preds = %if.then132
  %add.ptr137 = getelementptr inbounds i8* %p, i64 9
  br label %if.end138

if.end138:                                        ; preds = %if.end136, %if.end123
  %p.addr.0 = phi i8* [ %add.ptr137, %if.end136 ], [ %add.ptr106, %if.end123 ]
  %add.ptr139 = getelementptr inbounds i8* %p.addr.0, i64 8
  %33 = bitcast i32* %have_purpose to i8*
  %call140 = call i32 @memcmp(i8* %33, i8* %add.ptr139, i64 4) #6
  %tobool141 = icmp eq i32 %call140, 0
  br i1 %tobool141, label %if.end143, label %return

if.end143:                                        ; preds = %if.end138
  %add.ptr144 = getelementptr inbounds i8* %p.addr.0, i64 12
  br i1 %cmp130, label %if.then153, label %for.cond167.preheader

if.then153:                                       ; preds = %if.end143
  %call157 = call i64 @int_size_in_bytes(%union.tree_node* %25) #6
  store i64 %call157, i64* %size, align 8, !tbaa !81
  %34 = bitcast i64* %size to i8*
  %call158 = call i32 @memcmp(i8* %34, i8* %add.ptr144, i64 8) #6
  %tobool159 = icmp eq i32 %call158, 0
  br i1 %tobool159, label %if.end161, label %return

if.end161:                                        ; preds = %if.then153
  %add.ptr162 = getelementptr inbounds i8* %p.addr.0, i64 20
  %link.1378.pre = load %union.tree_node** %23, align 8
  br label %for.cond167.preheader

for.cond167.preheader:                            ; preds = %if.end161, %if.end143
  %link.1378 = phi %union.tree_node* [ %link.0387, %if.end143 ], [ %link.1378.pre, %if.end161 ]
  %p.addr.2.ph = phi i8* [ %add.ptr144, %if.end143 ], [ %add.ptr162, %if.end161 ]
  %tobool168379 = icmp eq %union.tree_node* %link.1378, null
  br i1 %tobool168379, label %return, label %for.body169.lr.ph

for.body169.lr.ph:                                ; preds = %for.cond167.preheader
  %35 = bitcast %union.tree_node** %zero to i8*
  %36 = bitcast i32* %zero223 to i8*
  br label %for.body169

for.body169:                                      ; preds = %for.body169.lr.ph, %for.inc232
  %37 = phi i32 [ %29, %for.body169.lr.ph ], [ %44, %for.inc232 ]
  %link.1381 = phi %union.tree_node* [ %link.1378, %for.body169.lr.ph ], [ %link.1, %for.inc232 ]
  %p.addr.2380 = phi i8* [ %p.addr.2.ph, %for.body169.lr.ph ], [ %p.addr.4, %for.inc232 ]
  %value = getelementptr inbounds %union.tree_node* %link.1381, i64 0, i32 0, i32 2
  %38 = bitcast i32* %value to %union.tree_node**
  %39 = load %union.tree_node** %38, align 8, !tbaa !60
  %tobool171 = icmp eq %union.tree_node* %39, null
  br i1 %tobool171, label %if.else180, label %if.then172

if.then172:                                       ; preds = %for.body169
  %call175 = call fastcc i8* @compare_constant_1(%union.tree_node* %39, i8* %p.addr.2380)
  %cmp176 = icmp eq i8* %call175, null
  br i1 %cmp176, label %return, label %if.end187

if.else180:                                       ; preds = %for.body169
  store %union.tree_node* null, %union.tree_node** %zero, align 8, !tbaa !4
  %call182 = call i32 @memcmp(i8* %35, i8* %p.addr.2380, i64 8) #6
  %tobool183 = icmp eq i32 %call182, 0
  br i1 %tobool183, label %if.end185, label %return

if.end185:                                        ; preds = %if.else180
  %add.ptr186 = getelementptr inbounds i8* %p.addr.2380, i64 8
  br label %if.end187

if.end187:                                        ; preds = %if.then172, %if.end185
  %p.addr.3 = phi i8* [ %call175, %if.then172 ], [ %add.ptr186, %if.end185 ]
  %purpose189 = getelementptr inbounds %union.tree_node* %link.1381, i64 0, i32 0, i32 1
  %40 = load i8** %purpose189, align 8
  %tobool190 = icmp eq i8* %40, null
  br i1 %tobool190, label %if.else219, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end187
  %code194 = getelementptr inbounds i8* %40, i64 16
  %41 = bitcast i8* %code194 to i32*
  %bf.load195 = load i32* %41, align 8
  %bf.clear196 = and i32 %bf.load195, 255
  %cmp197 = icmp eq i32 %bf.clear196, 37
  br i1 %cmp197, label %if.then199, label %if.then211

if.then199:                                       ; preds = %land.lhs.true
  %42 = bitcast i8** %purpose189 to i8*
  %call202 = call i32 @memcmp(i8* %42, i8* %p.addr.3, i64 8) #6
  %tobool203 = icmp eq i32 %call202, 0
  br i1 %tobool203, label %if.end205, label %return

if.end205:                                        ; preds = %if.then199
  %add.ptr206 = getelementptr inbounds i8* %p.addr.3, i64 8
  br label %for.inc232

if.then211:                                       ; preds = %land.lhs.true
  %43 = bitcast i8* %40 to %union.tree_node*
  %call214 = call fastcc i8* @compare_constant_1(%union.tree_node* %43, i8* %p.addr.3)
  %cmp215 = icmp eq i8* %call214, null
  br i1 %cmp215, label %return, label %for.inc232

if.else219:                                       ; preds = %if.end187
  %tobool220 = icmp eq i32 %37, 0
  br i1 %tobool220, label %for.inc232, label %if.then221

if.then221:                                       ; preds = %if.else219
  store i32 0, i32* %zero223, align 4, !tbaa !23
  %call224 = call i32 @memcmp(i8* %36, i8* %p.addr.3, i64 4) #6
  %tobool225 = icmp eq i32 %call224, 0
  br i1 %tobool225, label %if.end227, label %return

if.end227:                                        ; preds = %if.then221
  %add.ptr228 = getelementptr inbounds i8* %p.addr.3, i64 4
  br label %for.inc232

for.inc232:                                       ; preds = %if.else219, %if.end205, %if.end227, %if.then211
  %44 = phi i32 [ %37, %if.end205 ], [ %37, %if.then211 ], [ %37, %if.end227 ], [ 0, %if.else219 ]
  %p.addr.4 = phi i8* [ %add.ptr206, %if.end205 ], [ %call214, %if.then211 ], [ %add.ptr228, %if.end227 ], [ %p.addr.3, %if.else219 ]
  %chain234 = getelementptr inbounds %union.tree_node* %link.1381, i64 0, i32 0, i32 0, i32 0
  %link.1 = load %union.tree_node** %chain234, align 8
  %tobool168 = icmp eq %union.tree_node* %link.1, null
  br i1 %tobool168, label %return, label %for.body169

sw.bb236:                                         ; preds = %if.end, %if.end
  call fastcc void @decode_addr_const(%union.tree_node* %exp, %struct.addr_const* %value238)
  %offset = getelementptr inbounds %struct.addr_const* %value238, i64 0, i32 1
  %45 = bitcast i64* %offset to i8*
  br label %while.cond

while.cond:                                       ; preds = %while.body, %sw.bb236
  %len.0 = phi i32 [ 8, %sw.bb236 ], [ %dec, %while.body ]
  %strp.0 = phi i8* [ %45, %sw.bb236 ], [ %incdec.ptr243, %while.body ]
  %p.addr.5 = phi i8* [ %incdec.ptr, %sw.bb236 ], [ %incdec.ptr241, %while.body ]
  %cmp239 = icmp sgt i32 %len.0, 0
  br i1 %cmp239, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %dec = add nsw i32 %len.0, -1
  %incdec.ptr241 = getelementptr inbounds i8* %p.addr.5, i64 1
  %46 = load i8* %p.addr.5, align 1, !tbaa !1
  %incdec.ptr243 = getelementptr inbounds i8* %strp.0, i64 1
  %47 = load i8* %strp.0, align 1, !tbaa !1
  %cmp245 = icmp eq i8 %46, %47
  br i1 %cmp245, label %while.cond, label %return

while.end:                                        ; preds = %while.cond
  %base = getelementptr inbounds %struct.addr_const* %value238, i64 0, i32 0
  %48 = load %struct.rtx_def** %base, align 8, !tbaa !106
  %arrayidx249 = getelementptr inbounds %struct.rtx_def* %48, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx249 to i8**
  %49 = load i8** %rtstr, align 8, !tbaa !4
  %call250 = call i64 @strlen(i8* %49) #6
  %add = add i64 %call250, 1
  %conv251 = trunc i64 %add to i32
  br label %while.cond277

sw.bb252:                                         ; preds = %if.end, %if.end, %if.end
  %operands254 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx255 = bitcast i32* %operands254 to %union.tree_node**
  %50 = load %union.tree_node** %arrayidx255, align 8, !tbaa !4
  %call256 = call fastcc i8* @compare_constant_1(%union.tree_node* %50, i8* %incdec.ptr)
  %cmp257 = icmp eq i8* %call256, null
  br i1 %cmp257, label %return, label %if.end260

if.end260:                                        ; preds = %sw.bb252
  %arrayidx263 = getelementptr inbounds i32* %operands254, i64 2
  %51 = bitcast i32* %arrayidx263 to %union.tree_node**
  %52 = load %union.tree_node** %51, align 8, !tbaa !4
  %call264 = call fastcc i8* @compare_constant_1(%union.tree_node* %52, i8* %call256)
  br label %return

sw.bb265:                                         ; preds = %if.end, %if.end, %if.end
  %operands267 = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx268 = bitcast i32* %operands267 to %union.tree_node**
  %53 = load %union.tree_node** %arrayidx268, align 8, !tbaa !4
  %call269 = call fastcc i8* @compare_constant_1(%union.tree_node* %53, i8* %incdec.ptr)
  br label %return

sw.default:                                       ; preds = %if.end
  %54 = load %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks* @lang_hooks, i64 0, i32 9), align 8, !tbaa !67
  %call271 = call %union.tree_node* %54(%union.tree_node* %exp) #6
  %cmp272 = icmp eq %union.tree_node* %call271, %exp
  br i1 %cmp272, label %return, label %if.then274

if.then274:                                       ; preds = %sw.default
  %call275 = call fastcc i8* @compare_constant_1(%union.tree_node* %call271, i8* %incdec.ptr)
  br label %return

while.cond277:                                    ; preds = %if.end12, %if.end26, %if.end47, %if.end75, %while.end, %while.body281
  %len.1 = phi i32 [ %dec278, %while.body281 ], [ 16, %if.end12 ], [ 24, %if.end26 ], [ %13, %if.end47 ], [ %conv69, %if.end75 ], [ %conv251, %while.end ]
  %strp.1 = phi i8* [ %incdec.ptr284, %while.body281 ], [ %4, %if.end12 ], [ %7, %if.end26 ], [ %15, %if.end47 ], [ %21, %if.end75 ], [ %49, %while.end ]
  %p.addr.6 = phi i8* [ %incdec.ptr282, %while.body281 ], [ %incdec.ptr3, %if.end12 ], [ %incdec.ptr15, %if.end26 ], [ %add.ptr, %if.end47 ], [ %add.ptr76, %if.end75 ], [ %p.addr.5, %while.end ]
  %cmp279 = icmp sgt i32 %len.1, 0
  br i1 %cmp279, label %while.body281, label %return

while.body281:                                    ; preds = %while.cond277
  %dec278 = add nsw i32 %len.1, -1
  %incdec.ptr282 = getelementptr inbounds i8* %p.addr.6, i64 1
  %55 = load i8* %p.addr.6, align 1, !tbaa !1
  %incdec.ptr284 = getelementptr inbounds i8* %strp.1, i64 1
  %56 = load i8* %strp.1, align 1, !tbaa !1
  %cmp286 = icmp eq i8 %55, %56
  br i1 %cmp286, label %while.cond277, label %return

return:                                           ; preds = %while.body, %if.then172, %if.else180, %if.then199, %if.then211, %if.then221, %for.inc232, %while.cond277, %while.body281, %for.cond167.preheader, %sw.default, %sw.bb252, %if.then153, %if.end138, %if.then132, %if.end105, %for.end, %if.then65, %sw.bb48, %if.end41, %if.end30, %sw.bb28, %sw.bb14, %sw.bb, %entry, %if.then274, %sw.bb265, %if.end260, %if.end53
  %retval.0 = phi i8* [ %call275, %if.then274 ], [ %call269, %sw.bb265 ], [ %call264, %if.end260 ], [ %call55, %if.end53 ], [ null, %entry ], [ null, %sw.bb ], [ null, %sw.bb14 ], [ null, %sw.bb28 ], [ null, %if.end30 ], [ null, %if.end41 ], [ null, %sw.bb48 ], [ null, %if.then65 ], [ null, %for.end ], [ null, %if.end105 ], [ null, %if.then132 ], [ null, %if.end138 ], [ null, %if.then153 ], [ null, %sw.bb252 ], [ null, %sw.default ], [ %p.addr.2.ph, %for.cond167.preheader ], [ %p.addr.6, %while.cond277 ], [ null, %while.body281 ], [ null, %if.then172 ], [ null, %if.else180 ], [ null, %if.then199 ], [ null, %if.then211 ], [ null, %if.then221 ], [ %p.addr.4, %for.inc232 ], [ null, %while.body ]
  ret i8* %retval.0
}

declare %union.tree_node* @build_string(i32, i8*) #3

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #6

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind }
attributes #10 = { cold nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"omnipotent char", metadata !3, i64 0}
!3 = metadata !{metadata !"Simple C/C++ TBAA"}
!4 = metadata !{metadata !5, metadata !5, i64 0}
!5 = metadata !{metadata !"any pointer", metadata !2, i64 0}
!6 = metadata !{metadata !7, metadata !8, i64 8}
!7 = metadata !{metadata !"in_named_entry", metadata !5, i64 0, metadata !8, i64 8, metadata !9, i64 12}
!8 = metadata !{metadata !"int", metadata !2, i64 0}
!9 = metadata !{metadata !"_Bool", metadata !2, i64 0}
!10 = metadata !{metadata !7, metadata !9, i64 12}
!11 = metadata !{i8 0, i8 2}
!12 = metadata !{metadata !7, metadata !5, i64 0}
!13 = metadata !{metadata !14, metadata !5, i64 128}
!14 = metadata !{metadata !"gcc_target", metadata !15, i64 0, metadata !17, i64 168, metadata !5, i64 240, metadata !5, i64 248, metadata !5, i64 256, metadata !5, i64 264, metadata !5, i64 272, metadata !5, i64 280, metadata !5, i64 288, metadata !5, i64 296, metadata !5, i64 304, metadata !5, i64 312, metadata !5, i64 320, metadata !9, i64 328, metadata !9, i64 329, metadata !5, i64 336}
!15 = metadata !{metadata !"asm_out", metadata !5, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !16, i64 24, metadata !16, i64 56, metadata !5, i64 88, metadata !5, i64 96, metadata !5, i64 104, metadata !5, i64 112, metadata !5, i64 120, metadata !5, i64 128, metadata !5, i64 136, metadata !5, i64 144, metadata !5, i64 152, metadata !5, i64 160}
!16 = metadata !{metadata !"asm_int_op", metadata !5, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !5, i64 24}
!17 = metadata !{metadata !"sched", metadata !5, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !5, i64 24, metadata !5, i64 32, metadata !5, i64 40, metadata !5, i64 48, metadata !5, i64 56, metadata !5, i64 64}
!18 = metadata !{metadata !19, metadata !5, i64 128}
!19 = metadata !{metadata !"tree_decl", metadata !20, i64 0, metadata !5, i64 24, metadata !8, i64 32, metadata !8, i64 36, metadata !5, i64 40, metadata !2, i64 48, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 49, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 50, metadata !8, i64 51, metadata !8, i64 51, metadata !8, i64 51, metadata !8, i64 51, metadata !8, i64 51, metadata !2, i64 51, metadata !8, i64 51, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 52, metadata !8, i64 53, metadata !8, i64 53, metadata !8, i64 53, metadata !8, i64 53, metadata !8, i64 53, metadata !2, i64 56, metadata !5, i64 64, metadata !5, i64 72, metadata !5, i64 80, metadata !5, i64 88, metadata !5, i64 96, metadata !5, i64 104, metadata !5, i64 112, metadata !5, i64 120, metadata !5, i64 128, metadata !5, i64 136, metadata !5, i64 144, metadata !5, i64 152, metadata !2, i64 160, metadata !5, i64 168, metadata !5, i64 176, metadata !5, i64 184, metadata !21, i64 192, metadata !5, i64 200}
!20 = metadata !{metadata !"tree_common", metadata !5, i64 0, metadata !5, i64 8, metadata !2, i64 16, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 17, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 18, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19, metadata !8, i64 19}
!21 = metadata !{metadata !"long long", metadata !2, i64 0}
!22 = metadata !{metadata !14, metadata !5, i64 320}
!23 = metadata !{metadata !8, metadata !8, i64 0}
!24 = metadata !{metadata !19, metadata !5, i64 104}
!25 = metadata !{metadata !26, metadata !26, i64 0}
!26 = metadata !{metadata !"short", metadata !2, i64 0}
!27 = metadata !{metadata !20, metadata !5, i64 8}
!28 = metadata !{metadata !29, metadata !8, i64 32}
!29 = metadata !{metadata !"tree_string", metadata !20, i64 0, metadata !5, i64 24, metadata !8, i64 32, metadata !5, i64 40}
!30 = metadata !{metadata !14, metadata !9, i64 328}
!31 = metadata !{metadata !32, metadata !5, i64 0}
!32 = metadata !{metadata !"", metadata !5, i64 0, metadata !8, i64 8}
!33 = metadata !{metadata !32, metadata !8, i64 8}
!34 = metadata !{metadata !19, metadata !5, i64 80}
!35 = metadata !{metadata !19, metadata !5, i64 144}
!36 = metadata !{metadata !19, metadata !5, i64 120}
!37 = metadata !{metadata !38, metadata !5, i64 32}
!38 = metadata !{metadata !"tree_identifier", metadata !20, i64 0, metadata !39, i64 24}
!39 = metadata !{metadata !"ht_identifier", metadata !8, i64 0, metadata !5, i64 8}
!40 = metadata !{metadata !19, metadata !5, i64 72}
!41 = metadata !{metadata !42, metadata !8, i64 64}
!42 = metadata !{metadata !"tree_type", metadata !20, i64 0, metadata !5, i64 24, metadata !5, i64 32, metadata !5, i64 40, metadata !5, i64 48, metadata !8, i64 56, metadata !8, i64 60, metadata !2, i64 61, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 62, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 63, metadata !8, i64 64, metadata !5, i64 72, metadata !5, i64 80, metadata !2, i64 88, metadata !5, i64 96, metadata !5, i64 104, metadata !5, i64 112, metadata !5, i64 120, metadata !5, i64 128, metadata !5, i64 136, metadata !5, i64 144, metadata !21, i64 152, metadata !5, i64 160}
!43 = metadata !{metadata !14, metadata !5, i64 88}
!44 = metadata !{metadata !45, metadata !5, i64 104}
!45 = metadata !{metadata !"gcc_debug_hooks", metadata !5, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !5, i64 24, metadata !5, i64 32, metadata !5, i64 40, metadata !5, i64 48, metadata !5, i64 56, metadata !5, i64 64, metadata !5, i64 72, metadata !5, i64 80, metadata !5, i64 88, metadata !5, i64 96, metadata !5, i64 104, metadata !5, i64 112, metadata !5, i64 120, metadata !5, i64 128, metadata !5, i64 136, metadata !5, i64 144, metadata !5, i64 152}
!46 = metadata !{metadata !47, metadata !5, i64 32}
!47 = metadata !{metadata !"function", metadata !5, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !5, i64 24, metadata !5, i64 32, metadata !5, i64 40, metadata !5, i64 48, metadata !5, i64 56, metadata !8, i64 64, metadata !8, i64 68, metadata !8, i64 72, metadata !8, i64 76, metadata !5, i64 80, metadata !48, i64 88, metadata !5, i64 120, metadata !5, i64 128, metadata !5, i64 136, metadata !5, i64 144, metadata !8, i64 152, metadata !5, i64 160, metadata !5, i64 168, metadata !5, i64 176, metadata !5, i64 184, metadata !5, i64 192, metadata !5, i64 200, metadata !5, i64 208, metadata !5, i64 216, metadata !5, i64 224, metadata !5, i64 232, metadata !5, i64 240, metadata !5, i64 248, metadata !5, i64 256, metadata !21, i64 264, metadata !5, i64 272, metadata !5, i64 280, metadata !5, i64 288, metadata !5, i64 296, metadata !8, i64 304, metadata !5, i64 312, metadata !5, i64 320, metadata !8, i64 328, metadata !8, i64 332, metadata !8, i64 336, metadata !5, i64 344, metadata !8, i64 352, metadata !8, i64 356, metadata !5, i64 360, metadata !5, i64 368, metadata !5, i64 376, metadata !8, i64 384, metadata !8, i64 388, metadata !5, i64 392, metadata !8, i64 400, metadata !8, i64 404, metadata !5, i64 408, metadata !5, i64 416, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 424, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 425, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426, metadata !8, i64 426}
!48 = metadata !{metadata !"ix86_args", metadata !8, i64 0, metadata !8, i64 4, metadata !8, i64 8, metadata !8, i64 12, metadata !8, i64 16, metadata !8, i64 20, metadata !8, i64 24}
!49 = metadata !{metadata !50, metadata !5, i64 16}
!50 = metadata !{metadata !"varasm_status", metadata !5, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !5, i64 24, metadata !21, i64 32, metadata !5, i64 40}
!51 = metadata !{metadata !52, metadata !8, i64 56}
!52 = metadata !{metadata !"pool_constant", metadata !5, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !5, i64 24, metadata !2, i64 32, metadata !8, i64 36, metadata !8, i64 40, metadata !21, i64 48, metadata !8, i64 56}
!53 = metadata !{metadata !52, metadata !5, i64 24}
!54 = metadata !{metadata !52, metadata !2, i64 32}
!55 = metadata !{metadata !52, metadata !8, i64 40}
!56 = metadata !{metadata !52, metadata !8, i64 36}
!57 = metadata !{metadata !58, metadata !8, i64 0}
!58 = metadata !{metadata !"rtvec_def", metadata !8, i64 0, metadata !2, i64 8}
!59 = metadata !{metadata !50, metadata !5, i64 24}
!60 = metadata !{metadata !61, metadata !5, i64 32}
!61 = metadata !{metadata !"tree_list", metadata !20, i64 0, metadata !5, i64 24, metadata !5, i64 32}
!62 = metadata !{metadata !20, metadata !5, i64 0}
!63 = metadata !{metadata !19, metadata !5, i64 40}
!64 = metadata !{metadata !19, metadata !5, i64 24}
!65 = metadata !{metadata !19, metadata !8, i64 32}
!66 = metadata !{metadata !19, metadata !5, i64 64}
!67 = metadata !{metadata !68, metadata !5, i64 72}
!68 = metadata !{metadata !"lang_hooks", metadata !5, i64 0, metadata !69, i64 8, metadata !5, i64 16, metadata !5, i64 24, metadata !5, i64 32, metadata !5, i64 40, metadata !5, i64 48, metadata !5, i64 56, metadata !5, i64 64, metadata !5, i64 72, metadata !5, i64 80, metadata !5, i64 88, metadata !9, i64 96, metadata !5, i64 104, metadata !5, i64 112, metadata !5, i64 120, metadata !5, i64 128, metadata !5, i64 136, metadata !5, i64 144, metadata !70, i64 152, metadata !71, i64 240}
!69 = metadata !{metadata !"long", metadata !2, i64 0}
!70 = metadata !{metadata !"lang_hooks_for_tree_inlining", metadata !5, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !5, i64 24, metadata !5, i64 32, metadata !5, i64 40, metadata !5, i64 48, metadata !5, i64 56, metadata !5, i64 64, metadata !5, i64 72, metadata !5, i64 80}
!71 = metadata !{metadata !"lang_hooks_for_tree_dump", metadata !5, i64 0, metadata !5, i64 8}
!72 = metadata !{metadata !73, metadata !5, i64 32}
!73 = metadata !{metadata !"tree_complex", metadata !20, i64 0, metadata !5, i64 24, metadata !5, i64 32, metadata !5, i64 40}
!74 = metadata !{metadata !73, metadata !5, i64 40}
!75 = metadata !{metadata !14, metadata !5, i64 16}
!76 = metadata !{metadata !16, metadata !5, i64 0}
!77 = metadata !{metadata !16, metadata !5, i64 8}
!78 = metadata !{metadata !16, metadata !5, i64 16}
!79 = metadata !{metadata !16, metadata !5, i64 24}
!80 = metadata !{metadata !69, metadata !69, i64 0}
!81 = metadata !{metadata !21, metadata !21, i64 0}
!82 = metadata !{metadata !50, metadata !5, i64 40}
!83 = metadata !{i64 0, i64 24, metadata !1}
!84 = metadata !{metadata !85, metadata !5, i64 8}
!85 = metadata !{metadata !"deferred_constant", metadata !5, i64 0, metadata !5, i64 8, metadata !8, i64 16, metadata !8, i64 20}
!86 = metadata !{metadata !85, metadata !8, i64 16}
!87 = metadata !{metadata !85, metadata !8, i64 20}
!88 = metadata !{metadata !85, metadata !5, i64 0}
!89 = metadata !{metadata !90, metadata !5, i64 24}
!90 = metadata !{metadata !"obstack", metadata !69, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !5, i64 24, metadata !5, i64 32, metadata !69, i64 40, metadata !8, i64 48, metadata !5, i64 56, metadata !5, i64 64, metadata !5, i64 72, metadata !8, i64 80, metadata !8, i64 80, metadata !8, i64 80}
!91 = metadata !{metadata !90, metadata !5, i64 32}
!92 = metadata !{metadata !90, metadata !5, i64 16}
!93 = metadata !{metadata !90, metadata !8, i64 48}
!94 = metadata !{metadata !90, metadata !5, i64 8}
!95 = metadata !{metadata !96, metadata !5, i64 0}
!96 = metadata !{metadata !"constant_descriptor", metadata !5, i64 0, metadata !5, i64 8, metadata !5, i64 16, metadata !2, i64 32}
!97 = metadata !{metadata !96, metadata !5, i64 8}
!98 = metadata !{metadata !96, metadata !5, i64 16}
!99 = metadata !{metadata !100, metadata !5, i64 24}
!100 = metadata !{metadata !"tree_real_cst", metadata !20, i64 0, metadata !5, i64 24, metadata !101, i64 32}
!101 = metadata !{metadata !"", metadata !2, i64 0}
!102 = metadata !{metadata !103, metadata !8, i64 16}
!103 = metadata !{metadata !"deferred_string", metadata !5, i64 0, metadata !5, i64 8, metadata !8, i64 16}
!104 = metadata !{metadata !103, metadata !5, i64 8}
!105 = metadata !{metadata !103, metadata !5, i64 0}
!106 = metadata !{metadata !107, metadata !5, i64 0}
!107 = metadata !{metadata !"addr_const", metadata !5, i64 0, metadata !21, i64 8}
!108 = metadata !{metadata !107, metadata !21, i64 8}
!109 = metadata !{metadata !61, metadata !5, i64 24}
!110 = metadata !{metadata !50, metadata !5, i64 0}
!111 = metadata !{metadata !50, metadata !5, i64 8}
!112 = metadata !{metadata !52, metadata !5, i64 0}
!113 = metadata !{metadata !52, metadata !5, i64 8}
!114 = metadata !{metadata !115, metadata !21, i64 8}
!115 = metadata !{metadata !"", metadata !21, i64 0, metadata !21, i64 8}
!116 = metadata !{metadata !115, metadata !21, i64 0}
!117 = metadata !{metadata !50, metadata !21, i64 32}
!118 = metadata !{metadata !52, metadata !21, i64 48}
!119 = metadata !{metadata !52, metadata !5, i64 16}
!120 = metadata !{metadata !9, metadata !9, i64 0}
!121 = metadata !{metadata !42, metadata !5, i64 104}
!122 = metadata !{metadata !42, metadata !5, i64 40}
!123 = metadata !{metadata !42, metadata !5, i64 112}
!124 = metadata !{metadata !125, metadata !69, i64 8}
!125 = metadata !{metadata !"varray_head_tag", metadata !69, i64 0, metadata !69, i64 8, metadata !69, i64 16, metadata !5, i64 24, metadata !2, i64 32}
!126 = metadata !{metadata !125, metadata !69, i64 0}
