; ModuleID = 'partition.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.partition_def = type { i32, [1 x %struct.partition_elem] }
%struct.partition_elem = type { i32, %struct.partition_elem*, i32 }
%struct._IO_FILE = type opaque

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str1 = private unnamed_addr constant [4 x i8] c" %d\00", align 1

; Function Attrs: nounwind uwtable
define %struct.partition_def* @partition_new(i32 %num_elements) #0 {
entry:
  %sub = add nsw i32 %num_elements, -1
  %conv = sext i32 %sub to i64
  %mul = mul i64 %conv, 24
  %add = add i64 %mul, 32
  %call = tail call noalias i8* @xmalloc(i64 %add) #3
  %0 = bitcast i8* %call to %struct.partition_def*
  %num_elements1 = bitcast i8* %call to i32*
  store i32 %num_elements, i32* %num_elements1, align 4, !tbaa !1
  %cmp25 = icmp sgt i32 %num_elements, 0
  br i1 %cmp25, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %elements = getelementptr inbounds i8* %call, i64 8
  %1 = bitcast i8* %elements to [1 x %struct.partition_elem]*
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds [1 x %struct.partition_elem]* %1, i64 0, i64 %indvars.iv
  %class_element = getelementptr inbounds %struct.partition_elem* %arrayidx, i64 0, i32 0
  %2 = trunc i64 %indvars.iv to i32
  store i32 %2, i32* %class_element, align 4, !tbaa !6
  %next = getelementptr inbounds [1 x %struct.partition_elem]* %1, i64 0, i64 %indvars.iv, i32 1
  store %struct.partition_elem* %arrayidx, %struct.partition_elem** %next, align 8, !tbaa !9
  %class_count = getelementptr inbounds [1 x %struct.partition_elem]* %1, i64 0, i64 %indvars.iv, i32 2
  store i32 1, i32* %class_count, align 4, !tbaa !10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %num_elements
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  ret %struct.partition_def* %0
}

declare noalias i8* @xmalloc(i64) #1

; Function Attrs: nounwind uwtable
define void @partition_delete(%struct.partition_def* nocapture %part) #0 {
entry:
  %0 = bitcast %struct.partition_def* %part to i8*
  tail call void @free(i8* %0)
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #2

; Function Attrs: nounwind uwtable
define i32 @partition_union(%struct.partition_def* %part, i32 %elem1, i32 %elem2) #0 {
entry:
  %idxprom = sext i32 %elem1 to i64
  %class_element2 = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom, i32 0
  %0 = load i32* %class_element2, align 4, !tbaa !6
  %idxprom3 = sext i32 %elem2 to i64
  %class_element5 = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom3, i32 0
  %1 = load i32* %class_element5, align 4, !tbaa !6
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %class_count = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom, i32 2
  %2 = load i32* %class_count, align 4, !tbaa !10
  %class_count10 = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom3, i32 2
  %3 = load i32* %class_count10, align 4, !tbaa !10
  %cmp11 = icmp ult i32 %2, %3
  %elem1.elem2 = select i1 %cmp11, i32 %elem1, i32 %elem2
  %elem2.elem1 = select i1 %cmp11, i32 %elem2, i32 %elem1
  %. = select i1 %cmp11, i32 %1, i32 %0
  %idxprom17 = sext i32 %elem2.elem1 to i64
  %idxprom19 = sext i32 %elem1.elem2 to i64
  %arrayidx20 = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom19
  %class_element21 = getelementptr inbounds %struct.partition_elem* %arrayidx20, i64 0, i32 0
  %4 = load i32* %class_element21, align 4, !tbaa !6
  %idxprom22 = sext i32 %4 to i64
  %class_count24 = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom22, i32 2
  %5 = load i32* %class_count24, align 4, !tbaa !10
  %idxprom25 = sext i32 %. to i64
  %class_count27 = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom25, i32 2
  %6 = load i32* %class_count27, align 4, !tbaa !10
  %add = add i32 %6, %5
  store i32 %add, i32* %class_count27, align 4, !tbaa !10
  store i32 %., i32* %class_element21, align 4, !tbaa !6
  %next = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom19, i32 1
  %p.064 = load %struct.partition_elem** %next, align 8
  %cmp2965 = icmp eq %struct.partition_elem* %p.064, %arrayidx20
  br i1 %cmp2965, label %for.end, label %for.body

for.body:                                         ; preds = %if.end, %for.body
  %p.066 = phi %struct.partition_elem* [ %p.0, %for.body ], [ %p.064, %if.end ]
  %class_element30 = getelementptr inbounds %struct.partition_elem* %p.066, i64 0, i32 0
  store i32 %., i32* %class_element30, align 4, !tbaa !6
  %next31 = getelementptr inbounds %struct.partition_elem* %p.066, i64 0, i32 1
  %p.0 = load %struct.partition_elem** %next31, align 8
  %cmp29 = icmp eq %struct.partition_elem* %p.0, %arrayidx20
  br i1 %cmp29, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %if.end
  %next32 = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom17, i32 1
  %7 = load %struct.partition_elem** %next32, align 8, !tbaa !9
  store %struct.partition_elem* %p.064, %struct.partition_elem** %next32, align 8, !tbaa !9
  store %struct.partition_elem* %7, %struct.partition_elem** %next, align 8, !tbaa !9
  br label %return

return:                                           ; preds = %entry, %for.end
  %retval.0 = phi i32 [ %., %for.end ], [ %0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define void @partition_print(%struct.partition_def* %part, %struct._IO_FILE* nocapture %fp) #0 {
entry:
  %num_elements1 = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 0
  %0 = load i32* %num_elements1, align 4, !tbaa !1
  %conv = sext i32 %0 to i64
  %call = tail call noalias i8* @xmalloc(i64 %conv) #3
  tail call void @llvm.memset.p0i8.i64(i8* %call, i8 0, i64 %conv, i32 1, i1 false)
  %mul = shl nsw i64 %conv, 2
  %call5 = tail call noalias i8* @xmalloc(i64 %mul) #3
  %1 = bitcast i8* %call5 to i32*
  %call6 = tail call i32 @fputc(i32 91, %struct._IO_FILE* %fp) #3
  %cmp75 = icmp sgt i32 %0, 0
  br i1 %cmp75, label %for.body.lr.ph, label %for.end39

for.body.lr.ph:                                   ; preds = %entry
  %arraydecay = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 0
  %sub.ptr.rhs.cast = ptrtoint %struct.partition_elem* %arraydecay to i64
  br label %for.body

for.body:                                         ; preds = %for.inc37, %for.body.lr.ph
  %indvars.iv81 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next82, %for.inc37 ]
  %arrayidx = getelementptr inbounds i8* %call, i64 %indvars.iv81
  %2 = load i8* %arrayidx, align 1, !tbaa !11
  %tobool = icmp eq i8 %2, 0
  br i1 %tobool, label %if.then, label %for.inc37

if.then:                                          ; preds = %for.body
  %class_element = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %indvars.iv81, i32 0
  %3 = load i32* %class_element, align 4, !tbaa !6
  %idxprom10 = sext i32 %3 to i64
  %class_count = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom10, i32 2
  %4 = load i32* %class_count, align 4, !tbaa !10
  %cmp1370 = icmp sgt i32 %4, 0
  br i1 %cmp1370, label %for.body15, label %for.end35.critedge

for.body15:                                       ; preds = %if.then, %for.body15
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body15 ], [ 0, %if.then ]
  %c.071.in = phi i64 [ %sub.ptr.div, %for.body15 ], [ %indvars.iv81, %if.then ]
  %c.071 = trunc i64 %c.071.in to i32
  %arrayidx17 = getelementptr inbounds i32* %1, i64 %indvars.iv
  store i32 %c.071, i32* %arrayidx17, align 4, !tbaa !12
  %sext = shl i64 %c.071.in, 32
  %idxprom18 = ashr exact i64 %sext, 32
  %arrayidx19 = getelementptr inbounds i8* %call, i64 %idxprom18
  store i8 1, i8* %arrayidx19, align 1, !tbaa !11
  %next = getelementptr inbounds %struct.partition_def* %part, i64 0, i32 1, i64 %idxprom18, i32 1
  %5 = load %struct.partition_elem** %next, align 8, !tbaa !9
  %sub.ptr.lhs.cast = ptrtoint %struct.partition_elem* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 24
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %4
  br i1 %exitcond, label %for.end, label %for.body15

for.end:                                          ; preds = %for.body15
  tail call void @specqsort(i8* %call5, i32 %4, i32 4, i32 (...)* bitcast (i32 (i8*, i8*)* @elem_compare to i32 (...)*)) #3
  %call23 = tail call i32 @fputc(i32 40, %struct._IO_FILE* %fp) #3
  br i1 %cmp1370, label %for.body27, label %for.end35

for.body27:                                       ; preds = %for.end, %for.body27
  %indvars.iv77 = phi i64 [ %indvars.iv.next78, %for.body27 ], [ 0, %for.end ]
  %6 = trunc i64 %indvars.iv77 to i32
  %cmp28 = icmp eq i32 %6, 0
  %cond = select i1 %cmp28, i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8]* @.str1, i64 0, i64 0)
  %arrayidx31 = getelementptr inbounds i32* %1, i64 %indvars.iv77
  %7 = load i32* %arrayidx31, align 4, !tbaa !12
  %call32 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %fp, i8* %cond, i32 %7) #3
  %indvars.iv.next78 = add nuw nsw i64 %indvars.iv77, 1
  %lftr.wideiv79 = trunc i64 %indvars.iv.next78 to i32
  %exitcond80 = icmp eq i32 %lftr.wideiv79, %4
  br i1 %exitcond80, label %for.end35, label %for.body27

for.end35.critedge:                               ; preds = %if.then
  tail call void @specqsort(i8* %call5, i32 %4, i32 4, i32 (...)* bitcast (i32 (i8*, i8*)* @elem_compare to i32 (...)*)) #3
  %call23.c = tail call i32 @fputc(i32 40, %struct._IO_FILE* %fp) #3
  br label %for.end35

for.end35:                                        ; preds = %for.body27, %for.end35.critedge, %for.end
  %call36 = tail call i32 @fputc(i32 41, %struct._IO_FILE* %fp) #3
  br label %for.inc37

for.inc37:                                        ; preds = %for.body, %for.end35
  %indvars.iv.next82 = add nuw nsw i64 %indvars.iv81, 1
  %lftr.wideiv83 = trunc i64 %indvars.iv.next82 to i32
  %exitcond84 = icmp eq i32 %lftr.wideiv83, %0
  br i1 %exitcond84, label %for.end39, label %for.body

for.end39:                                        ; preds = %for.inc37, %entry
  %call40 = tail call i32 @fputc(i32 93, %struct._IO_FILE* %fp) #3
  tail call void @free(i8* %call)
  ret void
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

; Function Attrs: nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) #2

declare void @specqsort(i8*, i32, i32, i32 (...)*) #1

; Function Attrs: nounwind readonly uwtable
define internal i32 @elem_compare(i8* nocapture readonly %elem1, i8* nocapture readonly %elem2) #4 {
entry:
  %0 = bitcast i8* %elem1 to i32*
  %1 = load i32* %0, align 4, !tbaa !12
  %2 = bitcast i8* %elem2 to i32*
  %3 = load i32* %2, align 4, !tbaa !12
  %cmp = icmp slt i32 %1, %3
  br i1 %cmp, label %return, label %if.else

if.else:                                          ; preds = %entry
  %cmp1 = icmp sgt i32 %1, %3
  %. = zext i1 %cmp1 to i32
  br label %return

return:                                           ; preds = %if.else, %entry
  %retval.0 = phi i32 [ -1, %entry ], [ %., %if.else ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) #2

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !3, i64 0}
!2 = metadata !{metadata !"partition_def", metadata !3, i64 0, metadata !4, i64 8}
!3 = metadata !{metadata !"int", metadata !4, i64 0}
!4 = metadata !{metadata !"omnipotent char", metadata !5, i64 0}
!5 = metadata !{metadata !"Simple C/C++ TBAA"}
!6 = metadata !{metadata !7, metadata !3, i64 0}
!7 = metadata !{metadata !"partition_elem", metadata !3, i64 0, metadata !8, i64 8, metadata !3, i64 16}
!8 = metadata !{metadata !"any pointer", metadata !4, i64 0}
!9 = metadata !{metadata !7, metadata !8, i64 8}
!10 = metadata !{metadata !7, metadata !3, i64 16}
!11 = metadata !{metadata !4, metadata !4, i64 0}
!12 = metadata !{metadata !3, metadata !3, i64 0}
