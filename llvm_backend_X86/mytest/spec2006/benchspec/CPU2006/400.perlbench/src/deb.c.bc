; ModuleID = 'deb.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, i8*, %struct.hv*, %struct.gv*, i64, i64, i64, %struct.sv*, %struct.sv* }
%struct.op = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8 }
%struct.hv = type { %struct.xpvhv*, i64, i64 }
%struct.xpvhv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i64, %struct.he*, %struct.pmop*, i8* }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, %struct.sv*, i8*, i64 }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i64 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter* }
%struct.av = type { %struct.xpvav*, i64, i64 }
%struct.xpvav = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.sv**, %struct.sv*, i8 }
%struct.interpreter = type { i8 }
%struct.he = type { %struct.he*, %struct.hek*, %struct.sv* }
%struct.hek = type { i64, i64, [1 x i8] }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op*, %struct.op*, %struct.op*, %struct.pmop*, %struct.regexp*, i64, i64, i8, %struct.hv* }
%struct.regexp = type { i64*, i64*, %struct.regnode*, %struct.reg_substr_data*, i8*, %struct.reg_data*, i8*, i64*, i64, i64, i64, i64, i64, i64, i64, i64, [1 x %struct.regnode] }
%struct.regnode = type { i8, i8, i16 }
%struct.reg_substr_data = type opaque
%struct.reg_data = type opaque
%struct.gv = type { %struct.xpvgv*, i64, i64 }
%struct.xpvgv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.gp*, i8*, i64, %struct.hv*, i8 }
%struct.gp = type { %struct.sv*, i64, %struct.io*, %struct.cv*, %struct.av*, %struct.hv*, %struct.gv*, %struct.cv*, i64, i64, i64, i8* }
%struct.io = type { %struct.xpvio*, i64, i64 }
%struct.xpvio = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct._PerlIO**, %struct._PerlIO**, %union.anon, i64, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i16, i8, i8 }
%struct._PerlIO = type opaque
%union.anon = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%struct.cv = type { %struct.xpvcv*, i64, i64 }
%struct.xpvcv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.hv*, %struct.op*, %struct.op*, void (%struct.cv*)*, %union.any, %struct.gv*, i8*, i64, %struct.av*, %struct.cv*, i16, i64 }
%union.any = type { i8* }
%struct.sv = type { i8*, i64, i64 }
%struct.stackinfo = type { %struct.av*, %struct.context*, i64, i64, i64, %struct.stackinfo*, %struct.stackinfo*, i64 }
%struct.context = type { i64, %union.anon.0 }
%union.anon.0 = type { %struct.block }
%struct.block = type { i64, %struct.cop*, i64, i64, i64, %struct.pmop*, i8, %union.anon.1 }
%union.anon.1 = type { %struct.block_loop }
%struct.block_loop = type { i8*, i64, %struct.op*, %struct.op*, %struct.op*, %struct.sv**, %struct.sv*, %struct.sv*, %struct.av*, i64, i64 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@PL_curcop = external global %struct.cop*
@PL_debstash = external global %struct.hv*
@PL_debug = external global i64
@.str = private unnamed_addr constant [9 x i8] c"    =>  \00", align 1
@PL_stack_base = external global %struct.sv**
@PL_stack_sp = external global %struct.sv**
@PL_curstackinfo = external global %struct.stackinfo*
@PL_markstack_ptr = external global i64*
@PL_markstack = external global i64*

; Function Attrs: nounwind readnone uwtable
define void @Perl_deb(i8* nocapture %pat, ...) #0 {
entry:
  ret void
}

; Function Attrs: nounwind readnone uwtable
define void @Perl_vdeb(i8* nocapture %pat, [1 x %struct.__va_list_tag]* nocapture %args) #0 {
entry:
  ret void
}

; Function Attrs: nounwind readnone uwtable
define i64 @Perl_debstackptrs() #0 {
entry:
  ret i64 0
}

; Function Attrs: nounwind uwtable
define i64 @Perl_debstack() #1 {
entry:
  %0 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !1
  %cop_stash = getelementptr inbounds %struct.cop* %0, i64 0, i32 9
  %1 = load %struct.hv** %cop_stash, align 8, !tbaa !5
  %2 = load %struct.hv** @PL_debstash, align 8, !tbaa !1
  %cmp = icmp eq %struct.hv* %1, %2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load volatile i64* @PL_debug, align 8, !tbaa !9
  %and = and i64 %3, 524288
  %tobool = icmp eq i64 %and, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = tail call %struct._PerlIO** @Perl_PerlIO_stderr() #3
  %call1 = tail call i32 (%struct._PerlIO**, i8*, ...)* @PerlIO_printf(%struct._PerlIO** %call, i8* getelementptr inbounds ([9 x i8]* @.str, i64 0, i64 0)) #3
  %4 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !1
  %5 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !1
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 3
  %6 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !1
  %si_markoff = getelementptr inbounds %struct.stackinfo* %6, i64 0, i32 7
  %7 = load i64* %si_markoff, align 8, !tbaa !10
  %8 = load i64** @PL_markstack_ptr, align 8, !tbaa !1
  %9 = load i64** @PL_markstack, align 8, !tbaa !1
  %sub.ptr.lhs.cast2 = ptrtoint i64* %8 to i64
  %sub.ptr.rhs.cast3 = ptrtoint i64* %9 to i64
  %sub.ptr.sub4 = sub i64 %sub.ptr.lhs.cast2, %sub.ptr.rhs.cast3
  %sub.ptr.div5 = ashr exact i64 %sub.ptr.sub4, 3
  %call6 = tail call i32 (%struct.sv**, i32, i64, i64, i64, ...)* bitcast (i32 (...)* @deb_stack_n to i32 (%struct.sv**, i32, i64, i64, i64, ...)*)(%struct.sv** %4, i32 0, i64 %sub.ptr.div, i64 %7, i64 %sub.ptr.div5) #3
  br label %return

return:                                           ; preds = %land.lhs.true, %if.end
  ret i64 0
}

declare i32 @PerlIO_printf(%struct._PerlIO**, i8*, ...) #2

declare %struct._PerlIO** @Perl_PerlIO_stderr() #2

declare i32 @deb_stack_n(...) #2

; Function Attrs: nounwind readnone uwtable
define void @Perl_deb_stack_all() #0 {
entry:
  ret void
}

attributes #0 = { nounwind readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"any pointer", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !6, metadata !2, i64 48}
!6 = metadata !{metadata !"cop", metadata !2, i64 0, metadata !2, i64 8, metadata !2, i64 16, metadata !7, i64 24, metadata !8, i64 32, metadata !8, i64 34, metadata !3, i64 36, metadata !3, i64 37, metadata !2, i64 40, metadata !2, i64 48, metadata !2, i64 56, metadata !7, i64 64, metadata !7, i64 72, metadata !7, i64 80, metadata !2, i64 88, metadata !2, i64 96}
!7 = metadata !{metadata !"long", metadata !3, i64 0}
!8 = metadata !{metadata !"short", metadata !3, i64 0}
!9 = metadata !{metadata !7, metadata !7, i64 0}
!10 = metadata !{metadata !11, metadata !7, i64 56}
!11 = metadata !{metadata !"stackinfo", metadata !2, i64 0, metadata !2, i64 8, metadata !7, i64 16, metadata !7, i64 24, metadata !7, i64 32, metadata !2, i64 40, metadata !2, i64 48, metadata !7, i64 56}
