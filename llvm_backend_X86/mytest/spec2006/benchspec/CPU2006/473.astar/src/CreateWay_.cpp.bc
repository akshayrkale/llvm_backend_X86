; ModuleID = 'CreateWay_.cpp'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.wayobj = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, float, %struct.createwaymnginfot, %struct.createwayinfot, i16*, %struct.waymapcellt*, i32*, i32*, i32, i32, i8, i32, i16, i16 }
%struct.createwaymnginfot = type { float, float, float, float, i32, i32, float, float }
%struct.createwayinfot = type { %class.rvectort, %class.rvectort, i8 }
%class.rvectort = type { float, float, float }
%struct.waymapcellt = type { i16, i16 }
%struct.wayinfot = type { i8, %class.rvectort*, i32, i8 }
%struct.point16t = type { i16, i16 }

@llvm.global_ctors = appending global [0 x { i32, void ()* }] zeroinitializer

; Function Attrs: uwtable
define zeroext i1 @_ZN6wayobj11createwayarEiiR8wayinfot(%class.wayobj* %this, i32 %startindex, i32 %endindex, %struct.wayinfot* nocapture %wayinfo) #0 align 2 {
entry:
  %deltaar = alloca [8 x %struct.point16t], align 16
  %x.i = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 0, i32 0
  store i16 -1, i16* %x.i, align 16, !tbaa !1
  %y.i = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 0, i32 1
  store i16 1, i16* %y.i, align 2, !tbaa !6
  %x.i261 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 1, i32 0
  store i16 0, i16* %x.i261, align 4, !tbaa !1
  %y.i262 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 1, i32 1
  store i16 1, i16* %y.i262, align 2, !tbaa !6
  %x.i259 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 2, i32 0
  store i16 1, i16* %x.i259, align 8, !tbaa !1
  %y.i260 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 2, i32 1
  store i16 1, i16* %y.i260, align 2, !tbaa !6
  %x.i257 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 3, i32 0
  store i16 1, i16* %x.i257, align 4, !tbaa !1
  %y.i258 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 3, i32 1
  store i16 0, i16* %y.i258, align 2, !tbaa !6
  %x.i255 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 4, i32 0
  store i16 1, i16* %x.i255, align 16, !tbaa !1
  %y.i256 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 4, i32 1
  store i16 -1, i16* %y.i256, align 2, !tbaa !6
  %x.i253 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 5, i32 0
  store i16 0, i16* %x.i253, align 4, !tbaa !1
  %y.i254 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 5, i32 1
  %y.i250 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 7, i32 1
  %0 = bitcast i16* %y.i254 to i64*
  store i64 -1, i64* %0, align 2
  store i16 0, i16* %y.i250, align 2, !tbaa !6
  %step = getelementptr inbounds %class.wayobj* %this, i64 0, i32 24
  %1 = load i16* %step, align 2, !tbaa !7
  %conv = sext i16 %1 to i32
  %2 = sext i16 %1 to i64
  %3 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2, i64 12)
  %4 = extractvalue { i64, i1 } %3, 1
  %5 = extractvalue { i64, i1 } %3, 0
  %6 = select i1 %4, i64 -1, i64 %5
  %call = tail call noalias i8* @_Znam(i64 %6) #8
  %7 = bitcast i8* %call to %class.rvectort*
  %waymap8 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 17
  %8 = load %struct.waymapcellt** %waymap8, align 8, !tbaa !16
  %indexxmask.i247 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 21
  %9 = load i32* %indexxmask.i247, align 4, !tbaa !17
  %and.i248 = and i32 %9, %startindex
  %shift.i245 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 2
  %10 = load i32* %shift.i245, align 4, !tbaa !18
  %shr.i246 = ashr i32 %startindex, %10
  %sub = add i32 %conv, -2
  %cmp269 = icmp sgt i32 %sub, 0
  br i1 %cmp269, label %for.body.lr.ph, label %for.end156

for.body.lr.ph:                                   ; preds = %entry
  %fillnum103 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 25
  %11 = sext i32 %sub to i64
  br label %for.body

for.body:                                         ; preds = %for.inc154.for.body_crit_edge, %for.body.lr.ph
  %12 = phi i32 [ %10, %for.body.lr.ph ], [ %.pre280, %for.inc154.for.body_crit_edge ]
  %13 = phi i32 [ %9, %for.body.lr.ph ], [ %.pre, %for.inc154.for.body_crit_edge ]
  %indvars.iv = phi i64 [ %11, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc154.for.body_crit_edge ]
  %index.0272 = phi i32 [ %endindex, %for.body.lr.ph ], [ %index.1, %for.inc154.for.body_crit_edge ]
  %i.0270 = phi i32 [ %sub, %for.body.lr.ph ], [ %dec155, %for.inc154.for.body_crit_edge ]
  %and.i = and i32 %13, %index.0272
  %shr.i = ashr i32 %index.0272, %12
  %sub13 = sub nsw i32 %and.i248, %and.i
  %sub14 = sub nsw i32 %shr.i246, %shr.i
  %cmp15 = icmp sgt i32 %sub13, 0
  br i1 %cmp15, label %if.end18, label %if.else

if.else:                                          ; preds = %for.body
  %cmp16 = icmp sgt i32 %sub13, -1
  %.sub13 = select i1 %cmp16, i32 %sub13, i32 -1
  br label %if.end18

if.end18:                                         ; preds = %if.else, %for.body
  %dpx.0 = phi i32 [ 1, %for.body ], [ %.sub13, %if.else ]
  %cmp19 = icmp sgt i32 %sub14, 0
  br i1 %cmp19, label %if.end25, label %if.else21

if.else21:                                        ; preds = %if.end18
  %cmp22 = icmp sgt i32 %sub14, -1
  %sub14.op = mul i32 %sub14, 100
  %phitmp = select i1 %cmp22, i32 %sub14.op, i32 -100
  br label %if.end25

if.end25:                                         ; preds = %if.else21, %if.end18
  %dpy.0 = phi i32 [ 100, %if.end18 ], [ %phitmp, %if.else21 ]
  %mul26 = mul nsw i32 %dpx.0, 241
  %cmp27 = icmp slt i32 %dpy.0, %mul26
  %. = select i1 %cmp27, i32 -1, i32 1
  %mul32 = mul nsw i32 %dpx.0, 41
  %cmp33 = icmp slt i32 %dpy.0, %mul32
  %mul38 = mul nsw i32 %dpx.0, -40
  %cmp39 = icmp slt i32 %dpy.0, %mul38
  %mul44 = mul nsw i32 %dpx.0, -240
  %cmp45 = icmp slt i32 %dpy.0, %mul44
  %d.0 = select i1 %cmp45, i32 -1, i32 1
  %not.cmp27 = xor i1 %cmp27, true
  %not.cmp45 = xor i1 %cmp45, true
  %or.cond = and i1 %not.cmp27, %not.cmp45
  br i1 %or.cond, label %for.cond88.preheader, label %if.end52

if.end52:                                         ; preds = %if.end25
  %not.cmp33 = xor i1 %cmp33, true
  %or.cond164 = and i1 %cmp27, %not.cmp33
  br i1 %or.cond164, label %for.cond88.preheader, label %if.end57

if.end57:                                         ; preds = %if.end52
  %not.cmp39 = xor i1 %cmp39, true
  %or.cond165 = and i1 %cmp33, %not.cmp39
  br i1 %or.cond165, label %for.cond88.preheader, label %if.end62

if.end62:                                         ; preds = %if.end57
  %or.cond166 = and i1 %cmp39, %not.cmp45
  br i1 %or.cond166, label %for.cond88.preheader, label %if.end67

if.end67:                                         ; preds = %if.end62
  %14 = and i32 %., %d.0
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %for.cond88.preheader, label %if.end72

if.end72:                                         ; preds = %if.end67
  %or.cond168 = and i1 %cmp33, %not.cmp27
  br i1 %or.cond168, label %for.cond88.preheader, label %if.end77

if.end77:                                         ; preds = %if.end72
  %or.cond169 = and i1 %cmp39, %not.cmp33
  br i1 %or.cond169, label %for.cond88.preheader, label %if.end82

if.end82:                                         ; preds = %if.end77
  %or.cond170 = and i1 %cmp45, %not.cmp39
  %.240 = select i1 %or.cond170, i32 0, i32 6
  %phitmp273274 = or i32 %.240, 1
  br label %for.cond88.preheader

for.cond88.preheader:                             ; preds = %if.end82, %if.end77, %if.end72, %if.end67, %if.end62, %if.end57, %if.end52, %if.end25
  %delta1num.0.ph = phi i32 [ 1, %if.end25 ], [ 2, %if.end52 ], [ 3, %if.end57 ], [ 4, %if.end62 ], [ 5, %if.end67 ], [ 6, %if.end72 ], [ 7, %if.end77 ], [ %.240, %if.end82 ]
  %delta2num.0.in.in.ph = phi i32 [ 2, %if.end25 ], [ 3, %if.end52 ], [ 4, %if.end57 ], [ 5, %if.end62 ], [ 6, %if.end67 ], [ 7, %if.end72 ], [ 0, %if.end77 ], [ %phitmp273274, %if.end82 ]
  %16 = load i16* %fillnum103, align 2, !tbaa !19
  br label %for.body90

for.body90:                                       ; preds = %for.cond88.preheader, %if.end148
  %delta2num.0268 = phi i32 [ %delta2num.0.in.in.ph, %for.cond88.preheader ], [ %delta2num.0, %if.end148 ]
  %j.0267 = phi i32 [ 0, %for.cond88.preheader ], [ %inc, %if.end148 ]
  %delta1num.0266 = phi i32 [ %delta1num.0.ph, %for.cond88.preheader ], [ %.dec, %if.end148 ]
  %idxprom = sext i32 %delta1num.0266 to i64
  %x91 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 %idxprom, i32 0
  %17 = load i16* %x91, align 4, !tbaa !1
  %conv92 = sext i16 %17 to i32
  %add93 = add nsw i32 %conv92, %and.i
  %y96 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 %idxprom, i32 1
  %18 = load i16* %y96, align 2, !tbaa !6
  %conv97 = sext i16 %18 to i32
  %add98 = add nsw i32 %conv97, %shr.i
  %shl.i242 = shl i32 %add98, %12
  %or.i243 = or i32 %shl.i242, %add93
  %idxprom100 = sext i32 %or.i243 to i64
  %fillnum = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom100, i32 0
  %19 = load i16* %fillnum, align 2, !tbaa !20
  %cmp105 = icmp eq i16 %19, %16
  br i1 %cmp105, label %if.then106, label %if.end116

if.then106:                                       ; preds = %for.body90
  %num = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom100, i32 1
  %20 = load i16* %num, align 2, !tbaa !22
  %conv109 = zext i16 %20 to i32
  %21 = trunc i64 %indvars.iv to i32
  %cmp110 = icmp eq i32 %conv109, %21
  br i1 %cmp110, label %if.then111, label %if.end116

if.then111:                                       ; preds = %if.then106
  %arrayidx113 = getelementptr inbounds %class.rvectort* %7, i64 %indvars.iv
  %call114 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %or.i243)
  %call114.fca.0.extract = extractvalue { <2 x float>, float } %call114, 0
  %call114.fca.1.extract = extractvalue { <2 x float>, float } %call114, 1
  %ref.tmp.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx113 to <2 x float>*
  store <2 x float> %call114.fca.0.extract, <2 x float>* %ref.tmp.sroa.0.0..sroa_cast, align 4
  %ref.tmp.sroa.2.0..sroa_idx174 = getelementptr inbounds %class.rvectort* %7, i64 %indvars.iv, i32 2
  store float %call114.fca.1.extract, float* %ref.tmp.sroa.2.0..sroa_idx174, align 4
  br label %for.inc154

if.end116:                                        ; preds = %if.then106, %for.body90
  %idxprom117238 = zext i32 %delta2num.0268 to i64
  %x119 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 %idxprom117238, i32 0
  %22 = load i16* %x119, align 4, !tbaa !1
  %conv120 = sext i16 %22 to i32
  %add121 = add nsw i32 %conv120, %and.i
  %y124 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 %idxprom117238, i32 1
  %23 = load i16* %y124, align 2, !tbaa !6
  %conv125 = sext i16 %23 to i32
  %add126 = add nsw i32 %conv125, %shr.i
  %shl.i = shl i32 %add126, %12
  %or.i = or i32 %shl.i, %add121
  %idxprom128 = sext i32 %or.i to i64
  %fillnum130 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom128, i32 0
  %24 = load i16* %fillnum130, align 2, !tbaa !20
  %cmp134 = icmp eq i16 %24, %16
  br i1 %cmp134, label %if.then135, label %if.end148

if.then135:                                       ; preds = %if.end116
  %num138 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom128, i32 1
  %25 = load i16* %num138, align 2, !tbaa !22
  %conv139 = zext i16 %25 to i32
  %26 = trunc i64 %indvars.iv to i32
  %cmp140 = icmp eq i32 %conv139, %26
  br i1 %cmp140, label %if.then141, label %if.end148

if.then141:                                       ; preds = %if.then135
  %arrayidx143 = getelementptr inbounds %class.rvectort* %7, i64 %indvars.iv
  %call145 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %or.i)
  %call145.fca.0.extract = extractvalue { <2 x float>, float } %call145, 0
  %call145.fca.1.extract = extractvalue { <2 x float>, float } %call145, 1
  %ref.tmp144.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx143 to <2 x float>*
  store <2 x float> %call145.fca.0.extract, <2 x float>* %ref.tmp144.sroa.0.0..sroa_cast, align 4
  %ref.tmp144.sroa.2.0..sroa_idx172 = getelementptr inbounds %class.rvectort* %7, i64 %indvars.iv, i32 2
  store float %call145.fca.1.extract, float* %ref.tmp144.sroa.2.0..sroa_idx172, align 4
  br label %for.inc154

if.end148:                                        ; preds = %if.then135, %if.end116
  %dec = add nsw i32 %delta1num.0266, -1
  %cmp149 = icmp slt i32 %delta1num.0266, 1
  %.dec = select i1 %cmp149, i32 7, i32 %dec
  %inc = add nsw i32 %j.0267, 1
  %delta2num.0.in = add nsw i32 %delta2num.0268, 1
  %delta2num.0 = and i32 %delta2num.0.in, 7
  %cmp89 = icmp slt i32 %inc, 4
  br i1 %cmp89, label %for.body90, label %delete.notnull

delete.notnull:                                   ; preds = %if.end148
  tail call void @_ZdaPv(i8* %call) #9
  br label %return

for.inc154:                                       ; preds = %if.then111, %if.then141
  %index.1 = phi i32 [ %or.i243, %if.then111 ], [ %or.i, %if.then141 ]
  %dec155 = add nsw i32 %i.0270, -1
  %cmp = icmp sgt i32 %dec155, 0
  br i1 %cmp, label %for.inc154.for.body_crit_edge, label %for.end156

for.inc154.for.body_crit_edge:                    ; preds = %for.inc154
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %.pre = load i32* %indexxmask.i247, align 4, !tbaa !17
  %.pre280 = load i32* %shift.i245, align 4, !tbaa !18
  br label %for.body

for.end156:                                       ; preds = %for.inc154, %entry
  %createwayinfo = getelementptr inbounds %class.wayobj* %this, i64 0, i32 15
  %27 = bitcast %struct.createwayinfot* %createwayinfo to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call, i8* %27, i64 12, i32 4, i1 false), !tbaa.struct !23
  %sub158 = add nsw i32 %conv, -1
  %idxprom159 = sext i32 %sub158 to i64
  %arrayidx160 = getelementptr inbounds %class.rvectort* %7, i64 %idxprom159
  %finishp = getelementptr inbounds %class.wayobj* %this, i64 0, i32 15, i32 1
  %28 = bitcast %class.rvectort* %arrayidx160 to i8*
  %29 = bitcast %class.rvectort* %finishp to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 12, i32 4, i1 false), !tbaa.struct !23
  %flexist = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 0
  store i8 1, i8* %flexist, align 1, !tbaa !25
  %wayarp162 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 1
  store %class.rvectort* %7, %class.rvectort** %wayarp162, align 8, !tbaa !27
  %wayarsize = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 2
  store i32 %conv, i32* %wayarsize, align 4, !tbaa !28
  %flcorrect = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 3
  store i8 0, i8* %flcorrect, align 1, !tbaa !29
  br label %return

return:                                           ; preds = %for.end156, %delete.notnull
  %retval.0 = phi i1 [ false, %delete.notnull ], [ true, %for.end156 ]
  ret i1 %retval.0
}

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #1

; Function Attrs: nobuiltin
declare noalias i8* @_Znam(i64) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) #3

declare { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj*, i32) #4

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: nounwind uwtable
define zeroext i1 @_ZN6wayobj11createwayarEiiRP8point16tRi(%class.wayobj* nocapture readonly %this, i32 %startindex, i32 %endindex, %struct.point16t** nocapture %wayar, i32* nocapture %waylength) #6 align 2 {
entry:
  %deltaar = alloca [8 x %struct.point16t], align 16
  %x.i = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 0, i32 0
  store i16 -1, i16* %x.i, align 16, !tbaa !1
  %y.i = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 0, i32 1
  store i16 1, i16* %y.i, align 2, !tbaa !6
  %x.i293 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 1, i32 0
  store i16 0, i16* %x.i293, align 4, !tbaa !1
  %y.i294 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 1, i32 1
  store i16 1, i16* %y.i294, align 2, !tbaa !6
  %x.i291 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 2, i32 0
  store i16 1, i16* %x.i291, align 8, !tbaa !1
  %y.i292 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 2, i32 1
  store i16 1, i16* %y.i292, align 2, !tbaa !6
  %x.i289 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 3, i32 0
  store i16 1, i16* %x.i289, align 4, !tbaa !1
  %y.i290 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 3, i32 1
  store i16 0, i16* %y.i290, align 2, !tbaa !6
  %x.i287 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 4, i32 0
  store i16 1, i16* %x.i287, align 16, !tbaa !1
  %y.i288 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 4, i32 1
  store i16 -1, i16* %y.i288, align 2, !tbaa !6
  %x.i285 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 5, i32 0
  store i16 0, i16* %x.i285, align 4, !tbaa !1
  %y.i286 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 5, i32 1
  %y.i282 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 7, i32 1
  %0 = bitcast i16* %y.i286 to i64*
  store i64 -1, i64* %0, align 2
  store i16 0, i16* %y.i282, align 2, !tbaa !6
  %step = getelementptr inbounds %class.wayobj* %this, i64 0, i32 24
  %1 = load i16* %step, align 2, !tbaa !7
  %conv = sext i16 %1 to i32
  %conv8 = sext i16 %1 to i64
  %mul = shl nsw i64 %conv8, 2
  %call = tail call i8* @malloc(i64 %mul)
  %2 = bitcast i8* %call to %struct.point16t*
  store %struct.point16t* %2, %struct.point16t** %wayar, align 8, !tbaa !30
  %waymap9 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 17
  %3 = load %struct.waymapcellt** %waymap9, align 8, !tbaa !16
  %indexxmask.i279 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 21
  %4 = load i32* %indexxmask.i279, align 4, !tbaa !17
  %and.i280 = and i32 %4, %startindex
  %shift.i277 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 2
  %5 = load i32* %shift.i277, align 4, !tbaa !18
  %shr.i278 = ashr i32 %startindex, %5
  %sub = add i32 %conv, -2
  %cmp303 = icmp sgt i32 %sub, 0
  br i1 %cmp303, label %for.body.lr.ph, label %for.end166

for.body.lr.ph:                                   ; preds = %entry
  %fillnum105 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 25
  %6 = load i16* %fillnum105, align 2, !tbaa !19
  %7 = sext i32 %sub to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc164
  %indvars.iv = phi i64 [ %7, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc164 ]
  %i.0305 = phi i32 [ %sub, %for.body.lr.ph ], [ %dec165, %for.inc164 ]
  %index.0304 = phi i32 [ %endindex, %for.body.lr.ph ], [ %index.1, %for.inc164 ]
  %and.i276 = and i32 %4, %index.0304
  %shr.i274 = ashr i32 %index.0304, %5
  %sub14 = sub nsw i32 %and.i280, %and.i276
  %sub15 = sub nsw i32 %shr.i278, %shr.i274
  %cmp16 = icmp sgt i32 %sub14, 0
  br i1 %cmp16, label %if.end19, label %if.else

if.else:                                          ; preds = %for.body
  %cmp17 = icmp sgt i32 %sub14, -1
  %.sub14 = select i1 %cmp17, i32 %sub14, i32 -1
  br label %if.end19

if.end19:                                         ; preds = %if.else, %for.body
  %dpx.0 = phi i32 [ 1, %for.body ], [ %.sub14, %if.else ]
  %cmp20 = icmp sgt i32 %sub15, 0
  br i1 %cmp20, label %if.end26, label %if.else22

if.else22:                                        ; preds = %if.end19
  %cmp23 = icmp sgt i32 %sub15, -1
  %sub15.op = mul i32 %sub15, 100
  %phitmp = select i1 %cmp23, i32 %sub15.op, i32 -100
  br label %if.end26

if.end26:                                         ; preds = %if.else22, %if.end19
  %dpy.0 = phi i32 [ 100, %if.end19 ], [ %phitmp, %if.else22 ]
  %mul28 = mul nsw i32 %dpx.0, 241
  %cmp29 = icmp slt i32 %dpy.0, %mul28
  %. = select i1 %cmp29, i32 -1, i32 1
  %mul34 = mul nsw i32 %dpx.0, 41
  %cmp35 = icmp slt i32 %dpy.0, %mul34
  %mul40 = mul nsw i32 %dpx.0, -40
  %cmp41 = icmp slt i32 %dpy.0, %mul40
  %mul46 = mul nsw i32 %dpx.0, -240
  %cmp47 = icmp slt i32 %dpy.0, %mul46
  %d.0 = select i1 %cmp47, i32 -1, i32 1
  %not.cmp29 = xor i1 %cmp29, true
  %not.cmp47 = xor i1 %cmp47, true
  %or.cond = and i1 %not.cmp29, %not.cmp47
  br i1 %or.cond, label %for.body92, label %if.end54

if.end54:                                         ; preds = %if.end26
  %not.cmp35 = xor i1 %cmp35, true
  %or.cond180 = and i1 %cmp29, %not.cmp35
  br i1 %or.cond180, label %for.body92, label %if.end59

if.end59:                                         ; preds = %if.end54
  %not.cmp41 = xor i1 %cmp41, true
  %or.cond181 = and i1 %cmp35, %not.cmp41
  br i1 %or.cond181, label %for.body92, label %if.end64

if.end64:                                         ; preds = %if.end59
  %or.cond182 = and i1 %cmp41, %not.cmp47
  br i1 %or.cond182, label %for.body92, label %if.end69

if.end69:                                         ; preds = %if.end64
  %8 = and i32 %., %d.0
  %9 = icmp eq i32 %8, -1
  br i1 %9, label %for.body92, label %if.end74

if.end74:                                         ; preds = %if.end69
  %or.cond184 = and i1 %cmp35, %not.cmp29
  br i1 %or.cond184, label %for.body92, label %if.end79

if.end79:                                         ; preds = %if.end74
  %or.cond185 = and i1 %cmp41, %not.cmp35
  br i1 %or.cond185, label %for.body92, label %if.end84

if.end84:                                         ; preds = %if.end79
  %or.cond186 = and i1 %cmp47, %not.cmp41
  %.260 = select i1 %or.cond186, i32 0, i32 6
  %phitmp307308 = or i32 %.260, 1
  br label %for.body92

for.body92:                                       ; preds = %if.end26, %if.end54, %if.end59, %if.end64, %if.end69, %if.end74, %if.end79, %if.end84, %if.end158
  %delta2num.0302 = phi i32 [ %delta2num.0, %if.end158 ], [ 2, %if.end26 ], [ 3, %if.end54 ], [ 4, %if.end59 ], [ 5, %if.end64 ], [ 6, %if.end69 ], [ 7, %if.end74 ], [ 0, %if.end79 ], [ %phitmp307308, %if.end84 ]
  %j.0301 = phi i32 [ %inc, %if.end158 ], [ 0, %if.end84 ], [ 0, %if.end79 ], [ 0, %if.end74 ], [ 0, %if.end69 ], [ 0, %if.end64 ], [ 0, %if.end59 ], [ 0, %if.end54 ], [ 0, %if.end26 ]
  %delta1num.0300 = phi i32 [ %.dec, %if.end158 ], [ 1, %if.end26 ], [ 2, %if.end54 ], [ 3, %if.end59 ], [ 4, %if.end64 ], [ 5, %if.end69 ], [ 6, %if.end74 ], [ 7, %if.end79 ], [ %.260, %if.end84 ]
  %idxprom = sext i32 %delta1num.0300 to i64
  %x93 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 %idxprom, i32 0
  %10 = load i16* %x93, align 4, !tbaa !1
  %conv94 = sext i16 %10 to i32
  %add95 = add nsw i32 %conv94, %and.i276
  %y98 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 %idxprom, i32 1
  %11 = load i16* %y98, align 2, !tbaa !6
  %conv99 = sext i16 %11 to i32
  %add100 = add nsw i32 %conv99, %shr.i274
  %shl.i271 = shl i32 %add100, %5
  %or.i272 = or i32 %shl.i271, %add95
  %idxprom102 = sext i32 %or.i272 to i64
  %fillnum = getelementptr inbounds %struct.waymapcellt* %3, i64 %idxprom102, i32 0
  %12 = load i16* %fillnum, align 2, !tbaa !20
  %cmp107 = icmp eq i16 %12, %6
  br i1 %cmp107, label %if.then108, label %if.end123

if.then108:                                       ; preds = %for.body92
  %num = getelementptr inbounds %struct.waymapcellt* %3, i64 %idxprom102, i32 1
  %13 = load i16* %num, align 2, !tbaa !22
  %conv111 = zext i16 %13 to i32
  %14 = trunc i64 %indvars.iv to i32
  %cmp112 = icmp eq i32 %conv111, %14
  br i1 %cmp112, label %if.then113, label %if.end123

if.then113:                                       ; preds = %if.then108
  %conv114 = trunc i32 %add95 to i16
  %x117 = getelementptr inbounds %struct.point16t* %2, i64 %indvars.iv, i32 0
  store i16 %conv114, i16* %x117, align 2, !tbaa !1
  %conv118 = trunc i32 %add100 to i16
  %y121 = getelementptr inbounds %struct.point16t* %2, i64 %indvars.iv, i32 1
  store i16 %conv118, i16* %y121, align 2, !tbaa !6
  br label %for.inc164

if.end123:                                        ; preds = %if.then108, %for.body92
  %idxprom124258 = zext i32 %delta2num.0302 to i64
  %x126 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 %idxprom124258, i32 0
  %15 = load i16* %x126, align 4, !tbaa !1
  %conv127 = sext i16 %15 to i32
  %add128 = add nsw i32 %conv127, %and.i276
  %y131 = getelementptr inbounds [8 x %struct.point16t]* %deltaar, i64 0, i64 %idxprom124258, i32 1
  %16 = load i16* %y131, align 2, !tbaa !6
  %conv132 = sext i16 %16 to i32
  %add133 = add nsw i32 %conv132, %shr.i274
  %shl.i = shl i32 %add133, %5
  %or.i = or i32 %shl.i, %add128
  %idxprom135 = sext i32 %or.i to i64
  %fillnum137 = getelementptr inbounds %struct.waymapcellt* %3, i64 %idxprom135, i32 0
  %17 = load i16* %fillnum137, align 2, !tbaa !20
  %cmp141 = icmp eq i16 %17, %6
  br i1 %cmp141, label %if.then142, label %if.end158

if.then142:                                       ; preds = %if.end123
  %num145 = getelementptr inbounds %struct.waymapcellt* %3, i64 %idxprom135, i32 1
  %18 = load i16* %num145, align 2, !tbaa !22
  %conv146 = zext i16 %18 to i32
  %19 = trunc i64 %indvars.iv to i32
  %cmp147 = icmp eq i32 %conv146, %19
  br i1 %cmp147, label %if.then148, label %if.end158

if.then148:                                       ; preds = %if.then142
  %conv149 = trunc i32 %add128 to i16
  %x152 = getelementptr inbounds %struct.point16t* %2, i64 %indvars.iv, i32 0
  store i16 %conv149, i16* %x152, align 2, !tbaa !1
  %conv153 = trunc i32 %add133 to i16
  %y156 = getelementptr inbounds %struct.point16t* %2, i64 %indvars.iv, i32 1
  store i16 %conv153, i16* %y156, align 2, !tbaa !6
  br label %for.inc164

if.end158:                                        ; preds = %if.then142, %if.end123
  %dec = add nsw i32 %delta1num.0300, -1
  %cmp159 = icmp slt i32 %delta1num.0300, 1
  %.dec = select i1 %cmp159, i32 7, i32 %dec
  %inc = add nsw i32 %j.0301, 1
  %delta2num.0.in = add nsw i32 %delta2num.0302, 1
  %delta2num.0 = and i32 %delta2num.0.in, 7
  %cmp91 = icmp slt i32 %inc, 4
  br i1 %cmp91, label %for.body92, label %for.end

for.end:                                          ; preds = %if.end158
  tail call void @free(i8* %call)
  br label %return

for.inc164:                                       ; preds = %if.then113, %if.then148
  %index.1 = phi i32 [ %or.i272, %if.then113 ], [ %or.i, %if.then148 ]
  %dec165 = add nsw i32 %i.0305, -1
  %cmp = icmp sgt i32 %dec165, 0
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  br i1 %cmp, label %for.body, label %for.end166

for.end166:                                       ; preds = %for.inc164, %entry
  %20 = bitcast i8* %call to i32*
  %ref.tmp.sroa.2.0.insert.shift = shl i32 %shr.i278, 16
  %and.i268 = and i32 %startindex, 65535
  %ref.tmp.sroa.0.0.insert.ext = and i32 %and.i268, %4
  %ref.tmp.sroa.0.0.insert.insert = or i32 %ref.tmp.sroa.2.0.insert.shift, %ref.tmp.sroa.0.0.insert.ext
  store i32 %ref.tmp.sroa.0.0.insert.insert, i32* %20, align 2
  %sub172 = add nsw i32 %conv, -1
  %idxprom173 = sext i32 %sub172 to i64
  %21 = load %struct.point16t** %wayar, align 8, !tbaa !30
  %arrayidx174 = getelementptr inbounds %struct.point16t* %21, i64 %idxprom173
  %22 = load i32* %indexxmask.i279, align 4, !tbaa !17
  %23 = load i32* %shift.i277, align 4, !tbaa !18
  %shr.i = ashr i32 %endindex, %23
  %24 = bitcast %struct.point16t* %arrayidx174 to i32*
  %ref.tmp175.sroa.2.0.insert.shift = shl i32 %shr.i, 16
  %and.i = and i32 %endindex, 65535
  %ref.tmp175.sroa.0.0.insert.ext = and i32 %and.i, %22
  %ref.tmp175.sroa.0.0.insert.insert = or i32 %ref.tmp175.sroa.2.0.insert.shift, %ref.tmp175.sroa.0.0.insert.ext
  store i32 %ref.tmp175.sroa.0.0.insert.insert, i32* %24, align 2
  store i32 %conv, i32* %waylength, align 4, !tbaa !31
  br label %return

return:                                           ; preds = %for.end166, %for.end
  %retval.0 = phi i1 [ false, %for.end ], [ true, %for.end166 ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) #7

; Function Attrs: uwtable
define zeroext i1 @_ZN6wayobj12createwayar2EiiR8wayinfot(%class.wayobj* %this, i32 %startindex, i32 %endindex, %struct.wayinfot* nocapture %wayinfo) #0 align 2 {
entry:
  %step = getelementptr inbounds %class.wayobj* %this, i64 0, i32 24
  %0 = load i16* %step, align 2, !tbaa !7
  %conv = sext i16 %0 to i32
  %1 = sext i16 %0 to i64
  %2 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1, i64 12)
  %3 = extractvalue { i64, i1 } %2, 1
  %4 = extractvalue { i64, i1 } %2, 0
  %5 = select i1 %3, i64 -1, i64 %4
  %call = tail call noalias i8* @_Znam(i64 %5) #8
  %6 = bitcast i8* %call to %class.rvectort*
  %maply = getelementptr inbounds %class.wayobj* %this, i64 0, i32 8
  %7 = load i32* %maply, align 4, !tbaa !32
  %waymap2 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 17
  %8 = load %struct.waymapcellt** %waymap2, align 8, !tbaa !16
  %indexxmask.i439 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 21
  %9 = load i32* %indexxmask.i439, align 4, !tbaa !17
  %and.i440 = and i32 %9, %startindex
  %shift.i437 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 2
  %10 = load i32* %shift.i437, align 4, !tbaa !18
  %shr.i438 = ashr i32 %startindex, %10
  %sub = add i32 %conv, -2
  %cmp441 = icmp sgt i32 %sub, 0
  br i1 %cmp441, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %fillnum85 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 25
  %11 = sext i32 %sub to i64
  br label %for.body

for.body:                                         ; preds = %for.inc.for.body_crit_edge, %for.body.lr.ph
  %12 = phi i32 [ %10, %for.body.lr.ph ], [ %.pre446, %for.inc.for.body_crit_edge ]
  %13 = phi i32 [ %9, %for.body.lr.ph ], [ %.pre, %for.inc.for.body_crit_edge ]
  %indvars.iv = phi i64 [ %11, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc.for.body_crit_edge ]
  %index.0444 = phi i32 [ %endindex, %for.body.lr.ph ], [ %index.1, %for.inc.for.body_crit_edge ]
  %i.0442 = phi i32 [ %sub, %for.body.lr.ph ], [ %dec, %for.inc.for.body_crit_edge ]
  %and.i = and i32 %13, %index.0444
  %shr.i = ashr i32 %index.0444, %12
  %sub7 = sub nsw i32 %and.i440, %and.i
  %sub8 = sub nsw i32 %shr.i438, %shr.i
  %cmp9 = icmp sgt i32 %sub7, 0
  br i1 %cmp9, label %if.end12, label %if.else

if.else:                                          ; preds = %for.body
  %cmp10 = icmp sgt i32 %sub7, -1
  %.sub7 = select i1 %cmp10, i32 %sub7, i32 -1
  br label %if.end12

if.end12:                                         ; preds = %if.else, %for.body
  %dpx.0 = phi i32 [ 1, %for.body ], [ %.sub7, %if.else ]
  %cmp13 = icmp sgt i32 %sub8, 0
  br i1 %cmp13, label %if.end19, label %if.else15

if.else15:                                        ; preds = %if.end12
  %cmp16 = icmp sgt i32 %sub8, -1
  %sub8.op = mul i32 %sub8, 100
  %phitmp = select i1 %cmp16, i32 %sub8.op, i32 -100
  br label %if.end19

if.end19:                                         ; preds = %if.else15, %if.end12
  %dpy.0 = phi i32 [ 100, %if.end12 ], [ %phitmp, %if.else15 ]
  %mul20 = mul nsw i32 %dpx.0, 241
  %cmp21 = icmp slt i32 %dpy.0, %mul20
  %. = select i1 %cmp21, i32 -1, i32 1
  %mul26 = mul nsw i32 %dpx.0, 41
  %cmp27 = icmp slt i32 %dpy.0, %mul26
  %mul32 = mul nsw i32 %dpx.0, -40
  %cmp33 = icmp slt i32 %dpy.0, %mul32
  %mul38 = mul nsw i32 %dpx.0, -240
  %cmp39 = icmp slt i32 %dpy.0, %mul38
  %d.0 = select i1 %cmp39, i32 -1, i32 1
  %not.cmp21 = xor i1 %cmp21, true
  %not.cmp39 = xor i1 %cmp39, true
  %or.cond = and i1 %not.cmp21, %not.cmp39
  br i1 %or.cond, label %getsector, label %if.end46

if.end46:                                         ; preds = %if.end19
  %not.cmp27 = xor i1 %cmp27, true
  %or.cond283 = and i1 %cmp21, %not.cmp27
  br i1 %or.cond283, label %getsector, label %if.end51

if.end51:                                         ; preds = %if.end46
  %not.cmp33 = xor i1 %cmp33, true
  %or.cond284 = and i1 %cmp27, %not.cmp33
  br i1 %or.cond284, label %getsector, label %if.end56

if.end56:                                         ; preds = %if.end51
  %or.cond285 = and i1 %cmp33, %not.cmp39
  br i1 %or.cond285, label %getsector, label %if.end61

if.end61:                                         ; preds = %if.end56
  %14 = and i32 %., %d.0
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %getsector, label %if.end66

if.end66:                                         ; preds = %if.end61
  %or.cond287 = and i1 %cmp27, %not.cmp21
  br i1 %or.cond287, label %getsector, label %if.end71

if.end71:                                         ; preds = %if.end66
  %or.cond288 = and i1 %cmp33, %not.cmp27
  br i1 %or.cond288, label %getsector, label %if.end76

if.end76:                                         ; preds = %if.end71
  %or.cond289 = and i1 %cmp39, %not.cmp33
  %.435 = select i1 %or.cond289, i32 1, i32 -1
  br label %getsector

getsector:                                        ; preds = %if.end76, %if.end71, %if.end66, %if.end61, %if.end56, %if.end51, %if.end46, %if.end19
  %dy.0 = phi i32 [ 1, %if.end19 ], [ 1, %if.end46 ], [ 0, %if.end51 ], [ -1, %if.end56 ], [ -1, %if.end61 ], [ -1, %if.end66 ], [ 0, %if.end71 ], [ %.435, %if.end76 ]
  %dx.0 = phi i32 [ 0, %if.end19 ], [ 1, %if.end46 ], [ 1, %if.end51 ], [ 1, %if.end56 ], [ 0, %if.end61 ], [ -1, %if.end66 ], [ -1, %if.end71 ], [ -1, %if.end76 ]
  %add = add nsw i32 %dx.0, %and.i
  %add82 = add nsw i32 %dy.0, %shr.i
  %shl.i = shl i32 %add82, %12
  %or.i = or i32 %shl.i, %add
  %idxprom = sext i32 %or.i to i64
  %fillnum = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom, i32 0
  %16 = load i16* %fillnum, align 2, !tbaa !20
  %17 = load i16* %fillnum85, align 2, !tbaa !19
  %cmp87 = icmp eq i16 %16, %17
  br i1 %cmp87, label %if.then88, label %if.end98

if.then88:                                        ; preds = %getsector
  %num = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom, i32 1
  %18 = load i16* %num, align 2, !tbaa !22
  %conv91 = zext i16 %18 to i32
  %19 = trunc i64 %indvars.iv to i32
  %cmp92 = icmp eq i32 %conv91, %19
  br i1 %cmp92, label %if.then93, label %if.end98

if.then93:                                        ; preds = %if.then88
  %arrayidx95 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv
  %call96 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %or.i)
  %call96.fca.0.extract = extractvalue { <2 x float>, float } %call96, 0
  %call96.fca.1.extract = extractvalue { <2 x float>, float } %call96, 1
  %ref.tmp.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx95 to <2 x float>*
  store <2 x float> %call96.fca.0.extract, <2 x float>* %ref.tmp.sroa.0.0..sroa_cast, align 4
  %ref.tmp.sroa.2.0..sroa_idx307 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv, i32 2
  store float %call96.fca.1.extract, float* %ref.tmp.sroa.2.0..sroa_idx307, align 4
  br label %for.inc

if.end98:                                         ; preds = %if.then88, %getsector
  %sub99 = sub nsw i32 %index.0444, %7
  %sub100 = add nsw i32 %sub99, -1
  %idxprom101 = sext i32 %sub100 to i64
  %fillnum103 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom101, i32 0
  %20 = load i16* %fillnum103, align 2, !tbaa !20
  %cmp107 = icmp eq i16 %20, %17
  br i1 %cmp107, label %if.then108, label %if.end121

if.then108:                                       ; preds = %if.end98
  %num111 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom101, i32 1
  %21 = load i16* %num111, align 2, !tbaa !22
  %conv112 = zext i16 %21 to i32
  %22 = trunc i64 %indvars.iv to i32
  %cmp113 = icmp eq i32 %conv112, %22
  br i1 %cmp113, label %if.then114, label %if.end121

if.then114:                                       ; preds = %if.then108
  %arrayidx116 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv
  %call118 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %sub100)
  %call118.fca.0.extract = extractvalue { <2 x float>, float } %call118, 0
  %call118.fca.1.extract = extractvalue { <2 x float>, float } %call118, 1
  %ref.tmp117.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx116 to <2 x float>*
  store <2 x float> %call118.fca.0.extract, <2 x float>* %ref.tmp117.sroa.0.0..sroa_cast, align 4
  %ref.tmp117.sroa.2.0..sroa_idx305 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv, i32 2
  store float %call118.fca.1.extract, float* %ref.tmp117.sroa.2.0..sroa_idx305, align 4
  br label %for.inc

if.end121:                                        ; preds = %if.then108, %if.end98
  %idxprom122 = sext i32 %sub99 to i64
  %fillnum124 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom122, i32 0
  %23 = load i16* %fillnum124, align 2, !tbaa !20
  %cmp128 = icmp eq i16 %23, %17
  br i1 %cmp128, label %if.then129, label %if.end142

if.then129:                                       ; preds = %if.end121
  %num132 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom122, i32 1
  %24 = load i16* %num132, align 2, !tbaa !22
  %conv133 = zext i16 %24 to i32
  %25 = trunc i64 %indvars.iv to i32
  %cmp134 = icmp eq i32 %conv133, %25
  br i1 %cmp134, label %if.then135, label %if.end142

if.then135:                                       ; preds = %if.then129
  %arrayidx137 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv
  %call139 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %sub99)
  %call139.fca.0.extract = extractvalue { <2 x float>, float } %call139, 0
  %call139.fca.1.extract = extractvalue { <2 x float>, float } %call139, 1
  %ref.tmp138.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx137 to <2 x float>*
  store <2 x float> %call139.fca.0.extract, <2 x float>* %ref.tmp138.sroa.0.0..sroa_cast, align 4
  %ref.tmp138.sroa.2.0..sroa_idx303 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv, i32 2
  store float %call139.fca.1.extract, float* %ref.tmp138.sroa.2.0..sroa_idx303, align 4
  br label %for.inc

if.end142:                                        ; preds = %if.then129, %if.end121
  %inc143 = add nsw i32 %sub99, 1
  %idxprom144 = sext i32 %inc143 to i64
  %fillnum146 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom144, i32 0
  %26 = load i16* %fillnum146, align 2, !tbaa !20
  %cmp150 = icmp eq i16 %26, %17
  br i1 %cmp150, label %if.then151, label %if.end164

if.then151:                                       ; preds = %if.end142
  %num154 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom144, i32 1
  %27 = load i16* %num154, align 2, !tbaa !22
  %conv155 = zext i16 %27 to i32
  %28 = trunc i64 %indvars.iv to i32
  %cmp156 = icmp eq i32 %conv155, %28
  br i1 %cmp156, label %if.then157, label %if.end164

if.then157:                                       ; preds = %if.then151
  %arrayidx159 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv
  %call161 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %inc143)
  %call161.fca.0.extract = extractvalue { <2 x float>, float } %call161, 0
  %call161.fca.1.extract = extractvalue { <2 x float>, float } %call161, 1
  %ref.tmp160.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx159 to <2 x float>*
  store <2 x float> %call161.fca.0.extract, <2 x float>* %ref.tmp160.sroa.0.0..sroa_cast, align 4
  %ref.tmp160.sroa.2.0..sroa_idx301 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv, i32 2
  store float %call161.fca.1.extract, float* %ref.tmp160.sroa.2.0..sroa_idx301, align 4
  br label %for.inc

if.end164:                                        ; preds = %if.then151, %if.end142
  %sub165 = add nsw i32 %index.0444, -1
  %idxprom166 = sext i32 %sub165 to i64
  %fillnum168 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom166, i32 0
  %29 = load i16* %fillnum168, align 2, !tbaa !20
  %cmp172 = icmp eq i16 %29, %17
  br i1 %cmp172, label %if.then173, label %if.end186

if.then173:                                       ; preds = %if.end164
  %num176 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom166, i32 1
  %30 = load i16* %num176, align 2, !tbaa !22
  %conv177 = zext i16 %30 to i32
  %31 = trunc i64 %indvars.iv to i32
  %cmp178 = icmp eq i32 %conv177, %31
  br i1 %cmp178, label %if.then179, label %if.end186

if.then179:                                       ; preds = %if.then173
  %arrayidx181 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv
  %call183 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %sub165)
  %call183.fca.0.extract = extractvalue { <2 x float>, float } %call183, 0
  %call183.fca.1.extract = extractvalue { <2 x float>, float } %call183, 1
  %ref.tmp182.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx181 to <2 x float>*
  store <2 x float> %call183.fca.0.extract, <2 x float>* %ref.tmp182.sroa.0.0..sroa_cast, align 4
  %ref.tmp182.sroa.2.0..sroa_idx299 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv, i32 2
  store float %call183.fca.1.extract, float* %ref.tmp182.sroa.2.0..sroa_idx299, align 4
  br label %for.inc

if.end186:                                        ; preds = %if.then173, %if.end164
  %add187 = add nsw i32 %index.0444, 1
  %idxprom188 = sext i32 %add187 to i64
  %fillnum190 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom188, i32 0
  %32 = load i16* %fillnum190, align 2, !tbaa !20
  %cmp194 = icmp eq i16 %32, %17
  br i1 %cmp194, label %if.then195, label %if.end208

if.then195:                                       ; preds = %if.end186
  %num198 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom188, i32 1
  %33 = load i16* %num198, align 2, !tbaa !22
  %conv199 = zext i16 %33 to i32
  %34 = trunc i64 %indvars.iv to i32
  %cmp200 = icmp eq i32 %conv199, %34
  br i1 %cmp200, label %if.then201, label %if.end208

if.then201:                                       ; preds = %if.then195
  %arrayidx203 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv
  %call205 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %add187)
  %call205.fca.0.extract = extractvalue { <2 x float>, float } %call205, 0
  %call205.fca.1.extract = extractvalue { <2 x float>, float } %call205, 1
  %ref.tmp204.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx203 to <2 x float>*
  store <2 x float> %call205.fca.0.extract, <2 x float>* %ref.tmp204.sroa.0.0..sroa_cast, align 4
  %ref.tmp204.sroa.2.0..sroa_idx297 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv, i32 2
  store float %call205.fca.1.extract, float* %ref.tmp204.sroa.2.0..sroa_idx297, align 4
  br label %for.inc

if.end208:                                        ; preds = %if.then195, %if.end186
  %add209 = add nsw i32 %index.0444, %7
  %sub210 = add nsw i32 %add209, -1
  %idxprom211 = sext i32 %sub210 to i64
  %fillnum213 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom211, i32 0
  %35 = load i16* %fillnum213, align 2, !tbaa !20
  %cmp217 = icmp eq i16 %35, %17
  br i1 %cmp217, label %if.then218, label %if.end231

if.then218:                                       ; preds = %if.end208
  %num221 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom211, i32 1
  %36 = load i16* %num221, align 2, !tbaa !22
  %conv222 = zext i16 %36 to i32
  %37 = trunc i64 %indvars.iv to i32
  %cmp223 = icmp eq i32 %conv222, %37
  br i1 %cmp223, label %if.then224, label %if.end231

if.then224:                                       ; preds = %if.then218
  %arrayidx226 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv
  %call228 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %sub210)
  %call228.fca.0.extract = extractvalue { <2 x float>, float } %call228, 0
  %call228.fca.1.extract = extractvalue { <2 x float>, float } %call228, 1
  %ref.tmp227.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx226 to <2 x float>*
  store <2 x float> %call228.fca.0.extract, <2 x float>* %ref.tmp227.sroa.0.0..sroa_cast, align 4
  %ref.tmp227.sroa.2.0..sroa_idx295 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv, i32 2
  store float %call228.fca.1.extract, float* %ref.tmp227.sroa.2.0..sroa_idx295, align 4
  br label %for.inc

if.end231:                                        ; preds = %if.then218, %if.end208
  %idxprom233 = sext i32 %add209 to i64
  %fillnum235 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom233, i32 0
  %38 = load i16* %fillnum235, align 2, !tbaa !20
  %cmp239 = icmp eq i16 %38, %17
  br i1 %cmp239, label %if.then240, label %if.end253

if.then240:                                       ; preds = %if.end231
  %num243 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom233, i32 1
  %39 = load i16* %num243, align 2, !tbaa !22
  %conv244 = zext i16 %39 to i32
  %40 = trunc i64 %indvars.iv to i32
  %cmp245 = icmp eq i32 %conv244, %40
  br i1 %cmp245, label %if.then246, label %if.end253

if.then246:                                       ; preds = %if.then240
  %arrayidx248 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv
  %call250 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %add209)
  %call250.fca.0.extract = extractvalue { <2 x float>, float } %call250, 0
  %call250.fca.1.extract = extractvalue { <2 x float>, float } %call250, 1
  %ref.tmp249.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx248 to <2 x float>*
  store <2 x float> %call250.fca.0.extract, <2 x float>* %ref.tmp249.sroa.0.0..sroa_cast, align 4
  %ref.tmp249.sroa.2.0..sroa_idx293 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv, i32 2
  store float %call250.fca.1.extract, float* %ref.tmp249.sroa.2.0..sroa_idx293, align 4
  br label %for.inc

if.end253:                                        ; preds = %if.then240, %if.end231
  %inc254 = add nsw i32 %add209, 1
  %idxprom255 = sext i32 %inc254 to i64
  %fillnum257 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom255, i32 0
  %41 = load i16* %fillnum257, align 2, !tbaa !20
  %cmp261 = icmp eq i16 %41, %17
  br i1 %cmp261, label %if.then262, label %delete.notnull

if.then262:                                       ; preds = %if.end253
  %num265 = getelementptr inbounds %struct.waymapcellt* %8, i64 %idxprom255, i32 1
  %42 = load i16* %num265, align 2, !tbaa !22
  %conv266 = zext i16 %42 to i32
  %43 = trunc i64 %indvars.iv to i32
  %cmp267 = icmp eq i32 %conv266, %43
  br i1 %cmp267, label %if.then268, label %delete.notnull

if.then268:                                       ; preds = %if.then262
  %arrayidx270 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv
  %call272 = tail call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %inc254)
  %call272.fca.0.extract = extractvalue { <2 x float>, float } %call272, 0
  %call272.fca.1.extract = extractvalue { <2 x float>, float } %call272, 1
  %ref.tmp271.sroa.0.0..sroa_cast = bitcast %class.rvectort* %arrayidx270 to <2 x float>*
  store <2 x float> %call272.fca.0.extract, <2 x float>* %ref.tmp271.sroa.0.0..sroa_cast, align 4
  %ref.tmp271.sroa.2.0..sroa_idx291 = getelementptr inbounds %class.rvectort* %6, i64 %indvars.iv, i32 2
  store float %call272.fca.1.extract, float* %ref.tmp271.sroa.2.0..sroa_idx291, align 4
  br label %for.inc

delete.notnull:                                   ; preds = %if.end253, %if.then262
  tail call void @_ZdaPv(i8* %call) #9
  br label %return

for.inc:                                          ; preds = %if.then268, %if.then246, %if.then224, %if.then201, %if.then179, %if.then157, %if.then135, %if.then114, %if.then93
  %index.1 = phi i32 [ %or.i, %if.then93 ], [ %sub100, %if.then114 ], [ %sub99, %if.then135 ], [ %inc143, %if.then157 ], [ %sub165, %if.then179 ], [ %add187, %if.then201 ], [ %sub210, %if.then224 ], [ %add209, %if.then246 ], [ %inc254, %if.then268 ]
  %dec = add nsw i32 %i.0442, -1
  %cmp = icmp sgt i32 %dec, 0
  br i1 %cmp, label %for.inc.for.body_crit_edge, label %for.end

for.inc.for.body_crit_edge:                       ; preds = %for.inc
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %.pre = load i32* %indexxmask.i439, align 4, !tbaa !17
  %.pre446 = load i32* %shift.i437, align 4, !tbaa !18
  br label %for.body

for.end:                                          ; preds = %for.inc, %entry
  %createwayinfo = getelementptr inbounds %class.wayobj* %this, i64 0, i32 15
  %44 = bitcast %struct.createwayinfot* %createwayinfo to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call, i8* %44, i64 12, i32 4, i1 false), !tbaa.struct !23
  %sub277 = add nsw i32 %conv, -1
  %idxprom278 = sext i32 %sub277 to i64
  %arrayidx279 = getelementptr inbounds %class.rvectort* %6, i64 %idxprom278
  %finishp = getelementptr inbounds %class.wayobj* %this, i64 0, i32 15, i32 1
  %45 = bitcast %class.rvectort* %arrayidx279 to i8*
  %46 = bitcast %class.rvectort* %finishp to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %46, i64 12, i32 4, i1 false), !tbaa.struct !23
  %flexist = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 0
  store i8 1, i8* %flexist, align 1, !tbaa !25
  %wayarp281 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 1
  store %class.rvectort* %6, %class.rvectort** %wayarp281, align 8, !tbaa !27
  %wayarsize = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 2
  store i32 %conv, i32* %wayarsize, align 4, !tbaa !28
  %flcorrect = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 3
  store i8 0, i8* %flcorrect, align 1, !tbaa !29
  br label %return

return:                                           ; preds = %for.end, %delete.notnull
  %retval.0 = phi i1 [ false, %delete.notnull ], [ true, %for.end ]
  ret i1 %retval.0
}

; Function Attrs: uwtable
define zeroext i1 @_ZN6wayobj8wayexistEiiii(%class.wayobj* %this, i32 %startx, i32 %starty, i32 %endx, i32 %endy) #0 align 2 {
entry:
  %call = tail call zeroext i1 @_ZN6wayobj5ismapEii(%class.wayobj* %this, i32 %startx, i32 %starty)
  br i1 %call, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %entry
  %call2 = tail call zeroext i1 @_ZN6wayobj5ismapEii(%class.wayobj* %this, i32 %endx, i32 %endy)
  br i1 %call2, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false
  %shift.i = getelementptr inbounds %class.wayobj* %this, i64 0, i32 2
  %0 = load i32* %shift.i, align 4, !tbaa !18
  %shl.i = shl i32 %endy, %0
  %or.i = or i32 %shl.i, %endx
  %idxprom.i = sext i32 %or.i to i64
  %maparp.i = getelementptr inbounds %class.wayobj* %this, i64 0, i32 16
  %1 = load i16** %maparp.i, align 8, !tbaa !33
  %arrayidx.i = getelementptr inbounds i16* %1, i64 %idxprom.i
  %2 = load i16* %arrayidx.i, align 2, !tbaa !34
  %cmp = icmp eq i16 %2, 0
  br i1 %cmp, label %if.end5, label %return

if.end5:                                          ; preds = %if.end
  %cmp6 = icmp eq i32 %startx, %endx
  %cmp7 = icmp eq i32 %starty, %endy
  %or.cond = and i1 %cmp6, %cmp7
  br i1 %or.cond, label %return, label %if.end9

if.end9:                                          ; preds = %if.end5
  %call10 = tail call zeroext i1 @_ZN6wayobj4fillEiiii(%class.wayobj* %this, i32 %startx, i32 %starty, i32 %endx, i32 %endy)
  br label %return

return:                                           ; preds = %if.end5, %if.end, %entry, %lor.lhs.false, %if.end9
  %retval.0 = phi i1 [ %call10, %if.end9 ], [ false, %lor.lhs.false ], [ false, %entry ], [ false, %if.end ], [ true, %if.end5 ]
  ret i1 %retval.0
}

declare zeroext i1 @_ZN6wayobj5ismapEii(%class.wayobj*, i32, i32) #4

declare zeroext i1 @_ZN6wayobj4fillEiiii(%class.wayobj*, i32, i32, i32, i32) #4

; Function Attrs: uwtable
define zeroext i1 @_ZN6wayobj9createwayERK8rvectortS2_bR8wayinfot(%class.wayobj* %this, %class.rvectort* nocapture readonly %startp, %class.rvectort* nocapture readonly %finishp, i1 zeroext %flcorrect, %struct.wayinfot* %wayinfo) #0 align 2 {
entry:
  %endx = alloca i32, align 4
  %endy = alloca i32, align 4
  %createwayinfo = getelementptr inbounds %class.wayobj* %this, i64 0, i32 15
  %0 = bitcast %struct.createwayinfot* %createwayinfo to i8*
  %1 = bitcast %class.rvectort* %startp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 12, i32 4, i1 false), !tbaa.struct !23
  %finishp4 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 15, i32 1
  %2 = bitcast %class.rvectort* %finishp4 to i8*
  %3 = bitcast %class.rvectort* %finishp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 12, i32 4, i1 false), !tbaa.struct !23
  %flcorrect6 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 15, i32 2
  %frombool7 = zext i1 %flcorrect to i8
  store i8 %frombool7, i8* %flcorrect6, align 1, !tbaa !35
  %x = getelementptr inbounds %class.rvectort* %startp, i64 0, i32 0
  %4 = load float* %x, align 4, !tbaa !36
  %xcoef1.i = getelementptr inbounds %class.wayobj* %this, i64 0, i32 9
  %5 = load float* %xcoef1.i, align 4, !tbaa !37
  %mul.i = fmul float %4, %5
  %xcoef2.i = getelementptr inbounds %class.wayobj* %this, i64 0, i32 10
  %6 = load float* %xcoef2.i, align 4, !tbaa !38
  %add.i = fadd float %mul.i, %6
  %conv.i = fptosi float %add.i to i32
  %z = getelementptr inbounds %class.rvectort* %startp, i64 0, i32 2
  %7 = load float* %z, align 4, !tbaa !39
  %ycoef1.i = getelementptr inbounds %class.wayobj* %this, i64 0, i32 11
  %8 = load float* %ycoef1.i, align 4, !tbaa !40
  %mul.i134 = fmul float %7, %8
  %ycoef2.i = getelementptr inbounds %class.wayobj* %this, i64 0, i32 12
  %9 = load float* %ycoef2.i, align 4, !tbaa !41
  %add.i135 = fadd float %mul.i134, %9
  %conv.i136 = fptosi float %add.i135 to i32
  %x9 = getelementptr inbounds %class.rvectort* %finishp, i64 0, i32 0
  %10 = load float* %x9, align 4, !tbaa !36
  %mul.i149 = fmul float %5, %10
  %add.i151 = fadd float %6, %mul.i149
  %conv.i152 = fptosi float %add.i151 to i32
  store i32 %conv.i152, i32* %endx, align 4, !tbaa !31
  %z11 = getelementptr inbounds %class.rvectort* %finishp, i64 0, i32 2
  %11 = load float* %z11, align 4, !tbaa !39
  %mul.i144 = fmul float %11, %8
  %add.i146 = fadd float %mul.i144, %9
  %conv.i147 = fptosi float %add.i146 to i32
  store i32 %conv.i147, i32* %endy, align 4, !tbaa !31
  %call13 = call zeroext i1 @_ZN6wayobj5ismapEii(%class.wayobj* %this, i32 %conv.i, i32 %conv.i136)
  br i1 %call13, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %call14 = call zeroext i1 @_ZN6wayobj5ismapEii(%class.wayobj* %this, i32 %conv.i152, i32 %conv.i147)
  br i1 %call14, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %flexist = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 0
  store i8 0, i8* %flexist, align 1, !tbaa !25
  %wayarp = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 1
  store %class.rvectort* null, %class.rvectort** %wayarp, align 8, !tbaa !27
  %wayarsize = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 2
  store i32 0, i32* %wayarsize, align 4, !tbaa !28
  %flcorrect16 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 3
  store i8 0, i8* %flcorrect16, align 1, !tbaa !29
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %shift.i140 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 2
  %12 = load i32* %shift.i140, align 4, !tbaa !18
  %shl.i141 = shl i32 %conv.i147, %12
  %or.i142 = or i32 %shl.i141, %conv.i152
  %idxprom.i = sext i32 %or.i142 to i64
  %maparp.i = getelementptr inbounds %class.wayobj* %this, i64 0, i32 16
  %13 = load i16** %maparp.i, align 8, !tbaa !33
  %arrayidx.i = getelementptr inbounds i16* %13, i64 %idxprom.i
  %14 = load i16* %arrayidx.i, align 2, !tbaa !34
  %cmp = icmp eq i16 %14, 0
  br i1 %cmp, label %if.end47, label %if.then19

if.then19:                                        ; preds = %if.end
  br i1 %flcorrect, label %if.else, label %if.then23

if.then23:                                        ; preds = %if.then19
  %flexist24 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 0
  store i8 0, i8* %flexist24, align 1, !tbaa !25
  %wayarp25 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 1
  store %class.rvectort* null, %class.rvectort** %wayarp25, align 8, !tbaa !27
  %wayarsize26 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 2
  store i32 0, i32* %wayarsize26, align 4, !tbaa !28
  %flcorrect28 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 3
  store i8 0, i8* %flcorrect28, align 1, !tbaa !29
  br label %return

if.else:                                          ; preds = %if.then19
  %call30 = call zeroext i1 @_ZN6wayobj13findfreepointEiiRiS0_(%class.wayobj* %this, i32 %conv.i152, i32 %conv.i147, i32* %endx, i32* %endy)
  br i1 %call30, label %if.else40, label %if.then33

if.then33:                                        ; preds = %if.else
  %flexist34 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 0
  store i8 0, i8* %flexist34, align 1, !tbaa !25
  %wayarp35 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 1
  store %class.rvectort* null, %class.rvectort** %wayarp35, align 8, !tbaa !27
  %wayarsize36 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 2
  store i32 0, i32* %wayarsize36, align 4, !tbaa !28
  %flcorrect38 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 3
  store i8 0, i8* %flcorrect38, align 1, !tbaa !29
  br label %return

if.else40:                                        ; preds = %if.else
  %15 = load i32* %endx, align 4, !tbaa !31
  %16 = load i32* %endy, align 4, !tbaa !31
  %17 = load i32* %shift.i140, align 4, !tbaa !18
  %shl.i138 = shl i32 %16, %17
  %or.i139 = or i32 %shl.i138, %15
  %call44 = call { <2 x float>, float } @_ZN6wayobj8getpointEi(%class.wayobj* %this, i32 %or.i139)
  %call44.fca.0.extract = extractvalue { <2 x float>, float } %call44, 0
  %call44.fca.1.extract = extractvalue { <2 x float>, float } %call44, 1
  %ref.tmp.sroa.0.0..sroa_cast = bitcast %class.rvectort* %finishp4 to <2 x float>*
  store <2 x float> %call44.fca.0.extract, <2 x float>* %ref.tmp.sroa.0.0..sroa_cast, align 4
  %ref.tmp.sroa.2.0..sroa_idx88 = getelementptr inbounds %class.wayobj* %this, i64 0, i32 15, i32 1, i32 2
  store float %call44.fca.1.extract, float* %ref.tmp.sroa.2.0..sroa_idx88, align 4
  %.pre = load i32* %endx, align 4, !tbaa !31
  %.pre153 = load i32* %endy, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.end, %if.else40
  %18 = phi i32 [ %.pre153, %if.else40 ], [ %conv.i147, %if.end ]
  %19 = phi i32 [ %.pre, %if.else40 ], [ %conv.i152, %if.end ]
  %flcorrectend.0 = phi i1 [ true, %if.else40 ], [ false, %if.end ]
  %cmp48 = icmp eq i32 %conv.i, %19
  %cmp49 = icmp eq i32 %conv.i136, %18
  %or.cond = and i1 %cmp48, %cmp49
  br i1 %or.cond, label %if.then50, label %if.end63

if.then50:                                        ; preds = %if.end47
  %flexist51 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 0
  store i8 1, i8* %flexist51, align 1, !tbaa !25
  %call52 = call noalias i8* @_Znam(i64 24) #8
  %20 = bitcast i8* %call52 to %class.rvectort*
  %wayarp53 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 1
  store %class.rvectort* %20, %class.rvectort** %wayarp53, align 8, !tbaa !27
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %call52, i8* %1, i64 12, i32 4, i1 false), !tbaa.struct !23
  %arrayidx56 = getelementptr inbounds i8* %call52, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arrayidx56, i8* %2, i64 12, i32 4, i1 false), !tbaa.struct !23
  %wayarsize59 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 2
  store i32 2, i32* %wayarsize59, align 4, !tbaa !28
  %flcorrect61 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 3
  %frombool62 = zext i1 %flcorrectend.0 to i8
  store i8 %frombool62, i8* %flcorrect61, align 1, !tbaa !29
  br label %return

if.end63:                                         ; preds = %if.end47
  %call64 = call zeroext i1 @_ZN6wayobj4fillEiiii(%class.wayobj* %this, i32 %conv.i, i32 %conv.i136, i32 %19, i32 %18)
  br i1 %call64, label %if.end72, label %if.then65

if.then65:                                        ; preds = %if.end63
  %flexist66 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 0
  store i8 0, i8* %flexist66, align 1, !tbaa !25
  %wayarp67 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 1
  store %class.rvectort* null, %class.rvectort** %wayarp67, align 8, !tbaa !27
  %wayarsize68 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 2
  store i32 0, i32* %wayarsize68, align 4, !tbaa !28
  %flcorrect70 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 3
  %frombool71 = zext i1 %flcorrectend.0 to i8
  store i8 %frombool71, i8* %flcorrect70, align 1, !tbaa !29
  br label %return

if.end72:                                         ; preds = %if.end63
  %flcorrect74 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 3
  %frombool75 = zext i1 %flcorrectend.0 to i8
  store i8 %frombool75, i8* %flcorrect74, align 1, !tbaa !29
  %21 = load i32* %shift.i140, align 4, !tbaa !18
  %shl.i = shl i32 %conv.i136, %21
  %or.i = or i32 %shl.i, %conv.i
  %endindex = getelementptr inbounds %class.wayobj* %this, i64 0, i32 23
  %22 = load i32* %endindex, align 4, !tbaa !42
  %call77 = call zeroext i1 @_ZN6wayobj11createwayarEiiR8wayinfot(%class.wayobj* %this, i32 %or.i, i32 %22, %struct.wayinfot* %wayinfo)
  br i1 %call77, label %return, label %if.then78

if.then78:                                        ; preds = %if.end72
  %flexist79 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 0
  store i8 0, i8* %flexist79, align 1, !tbaa !25
  %wayarp80 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 1
  store %class.rvectort* null, %class.rvectort** %wayarp80, align 8, !tbaa !27
  %wayarsize81 = getelementptr inbounds %struct.wayinfot* %wayinfo, i64 0, i32 2
  store i32 0, i32* %wayarsize81, align 4, !tbaa !28
  store i8 %frombool75, i8* %flcorrect74, align 1, !tbaa !29
  br label %return

return:                                           ; preds = %if.end72, %if.then78, %if.then65, %if.then50, %if.then33, %if.then23, %if.then
  %retval.0 = phi i1 [ false, %if.then23 ], [ false, %if.then33 ], [ true, %if.then50 ], [ false, %if.then78 ], [ false, %if.then65 ], [ false, %if.then ], [ true, %if.end72 ]
  ret i1 %retval.0
}

declare zeroext i1 @_ZN6wayobj13findfreepointEiiRiS0_(%class.wayobj*, i32, i32, i32*, i32*) #4

; Function Attrs: uwtable
define zeroext i1 @_ZN6wayobj9createwayERK14createwayinfotR8wayinfot(%class.wayobj* %this, %struct.createwayinfot* nocapture readonly %createinfo, %struct.wayinfot* %wayinfo) #0 align 2 {
entry:
  %startp = getelementptr inbounds %struct.createwayinfot* %createinfo, i64 0, i32 0
  %finishp = getelementptr inbounds %struct.createwayinfot* %createinfo, i64 0, i32 1
  %flcorrect = getelementptr inbounds %struct.createwayinfot* %createinfo, i64 0, i32 2
  %0 = load i8* %flcorrect, align 1, !tbaa !43, !range !44
  %tobool = icmp ne i8 %0, 0
  %call = tail call zeroext i1 @_ZN6wayobj9createwayERK8rvectortS2_bR8wayinfot(%class.wayobj* %this, %class.rvectort* %startp, %class.rvectort* %finishp, i1 zeroext %tobool, %struct.wayinfot* %wayinfo)
  ret i1 %call
}

; Function Attrs: uwtable
define zeroext i1 @_ZN6wayobj9createwayEiiiiRP8point16tRi(%class.wayobj* %this, i32 %startx, i32 %starty, i32 %endx, i32 %endy, %struct.point16t** nocapture %wayar, i32* nocapture %waylength) #0 align 2 {
entry:
  %call = tail call zeroext i1 @_ZN6wayobj5ismapEii(%class.wayobj* %this, i32 %startx, i32 %starty)
  br i1 %call, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %call2 = tail call zeroext i1 @_ZN6wayobj5ismapEii(%class.wayobj* %this, i32 %endx, i32 %endy)
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.point16t* null, %struct.point16t** %wayar, align 8, !tbaa !30
  store i32 0, i32* %waylength, align 4, !tbaa !31
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %shift.i = getelementptr inbounds %class.wayobj* %this, i64 0, i32 2
  %0 = load i32* %shift.i, align 4, !tbaa !18
  %shl.i = shl i32 %endy, %0
  %or.i = or i32 %shl.i, %endx
  %idxprom.i = sext i32 %or.i to i64
  %maparp.i = getelementptr inbounds %class.wayobj* %this, i64 0, i32 16
  %1 = load i16** %maparp.i, align 8, !tbaa !33
  %arrayidx.i = getelementptr inbounds i16* %1, i64 %idxprom.i
  %2 = load i16* %arrayidx.i, align 2, !tbaa !34
  %cmp = icmp eq i16 %2, 0
  br i1 %cmp, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  store %struct.point16t* null, %struct.point16t** %wayar, align 8, !tbaa !30
  store i32 0, i32* %waylength, align 4, !tbaa !31
  br label %return

if.end5:                                          ; preds = %if.end
  %cmp6 = icmp eq i32 %startx, %endx
  %cmp7 = icmp eq i32 %starty, %endy
  %or.cond = and i1 %cmp6, %cmp7
  br i1 %or.cond, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end5
  %call9 = tail call i8* @malloc(i64 4)
  %3 = bitcast i8* %call9 to %struct.point16t*
  store %struct.point16t* %3, %struct.point16t** %wayar, align 8, !tbaa !30
  store i32 1, i32* %waylength, align 4, !tbaa !31
  br label %return

if.end10:                                         ; preds = %if.end5
  %call11 = tail call zeroext i1 @_ZN6wayobj4fillEiiii(%class.wayobj* %this, i32 %startx, i32 %starty, i32 %endx, i32 %endy)
  br i1 %call11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.end10
  store %struct.point16t* null, %struct.point16t** %wayar, align 8, !tbaa !30
  store i32 0, i32* %waylength, align 4, !tbaa !31
  br label %return

if.end13:                                         ; preds = %if.end10
  %4 = load i32* %shift.i, align 4, !tbaa !18
  %shl.i41 = shl i32 %starty, %4
  %or.i42 = or i32 %shl.i41, %startx
  %endindex = getelementptr inbounds %class.wayobj* %this, i64 0, i32 23
  %5 = load i32* %endindex, align 4, !tbaa !42
  %call15 = tail call zeroext i1 @_ZN6wayobj11createwayarEiiRP8point16tRi(%class.wayobj* %this, i32 %or.i42, i32 %5, %struct.point16t** %wayar, i32* %waylength)
  br i1 %call15, label %return, label %if.then16

if.then16:                                        ; preds = %if.end13
  store %struct.point16t* null, %struct.point16t** %wayar, align 8, !tbaa !30
  store i32 0, i32* %waylength, align 4, !tbaa !31
  br label %return

return:                                           ; preds = %if.end13, %if.then16, %if.then12, %if.then8, %if.then4, %if.then
  %retval.0 = phi i1 [ false, %if.then4 ], [ true, %if.then8 ], [ false, %if.then16 ], [ false, %if.then12 ], [ false, %if.then ], [ true, %if.end13 ]
  ret i1 %retval.0
}

attributes #0 = { uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nobuiltin "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin }
attributes #9 = { builtin nounwind }

!llvm.ident = !{!0}

!0 = metadata !{metadata !"clang version 3.5 (trunk)"}
!1 = metadata !{metadata !2, metadata !3, i64 0}
!2 = metadata !{metadata !"_ZTS8point16t", metadata !3, i64 0, metadata !3, i64 2}
!3 = metadata !{metadata !"short", metadata !4, i64 0}
!4 = metadata !{metadata !"omnipotent char", metadata !5, i64 0}
!5 = metadata !{metadata !"Simple C/C++ TBAA"}
!6 = metadata !{metadata !2, metadata !3, i64 2}
!7 = metadata !{metadata !8, metadata !3, i64 168}
!8 = metadata !{metadata !"_ZTS6wayobj", metadata !9, i64 0, metadata !9, i64 4, metadata !9, i64 8, metadata !9, i64 12, metadata !9, i64 16, metadata !9, i64 20, metadata !9, i64 24, metadata !9, i64 28, metadata !9, i64 32, metadata !10, i64 36, metadata !10, i64 40, metadata !10, i64 44, metadata !10, i64 48, metadata !10, i64 52, metadata !11, i64 56, metadata !12, i64 88, metadata !15, i64 120, metadata !15, i64 128, metadata !15, i64 136, metadata !15, i64 144, metadata !9, i64 152, metadata !9, i64 156, metadata !14, i64 160, metadata !9, i64 164, metadata !3, i64 168, metadata !3, i64 170}
!9 = metadata !{metadata !"int", metadata !4, i64 0}
!10 = metadata !{metadata !"float", metadata !4, i64 0}
!11 = metadata !{metadata !"_ZTS17createwaymnginfot", metadata !10, i64 0, metadata !10, i64 4, metadata !10, i64 8, metadata !10, i64 12, metadata !9, i64 16, metadata !9, i64 20, metadata !10, i64 24, metadata !10, i64 28}
!12 = metadata !{metadata !"_ZTS14createwayinfot", metadata !13, i64 0, metadata !13, i64 12, metadata !14, i64 24}
!13 = metadata !{metadata !"_ZTS8rvectort", metadata !10, i64 0, metadata !10, i64 4, metadata !10, i64 8}
!14 = metadata !{metadata !"bool", metadata !4, i64 0}
!15 = metadata !{metadata !"any pointer", metadata !4, i64 0}
!16 = metadata !{metadata !8, metadata !15, i64 128}
!17 = metadata !{metadata !8, metadata !9, i64 156}
!18 = metadata !{metadata !8, metadata !9, i64 8}
!19 = metadata !{metadata !8, metadata !3, i64 170}
!20 = metadata !{metadata !21, metadata !3, i64 0}
!21 = metadata !{metadata !"_ZTS11waymapcellt", metadata !3, i64 0, metadata !3, i64 2}
!22 = metadata !{metadata !21, metadata !3, i64 2}
!23 = metadata !{i64 0, i64 4, metadata !24, i64 4, i64 4, metadata !24, i64 8, i64 4, metadata !24}
!24 = metadata !{metadata !10, metadata !10, i64 0}
!25 = metadata !{metadata !26, metadata !14, i64 0}
!26 = metadata !{metadata !"_ZTS8wayinfot", metadata !14, i64 0, metadata !15, i64 8, metadata !9, i64 16, metadata !14, i64 20}
!27 = metadata !{metadata !26, metadata !15, i64 8}
!28 = metadata !{metadata !26, metadata !9, i64 16}
!29 = metadata !{metadata !26, metadata !14, i64 20}
!30 = metadata !{metadata !15, metadata !15, i64 0}
!31 = metadata !{metadata !9, metadata !9, i64 0}
!32 = metadata !{metadata !8, metadata !9, i64 32}
!33 = metadata !{metadata !8, metadata !15, i64 120}
!34 = metadata !{metadata !3, metadata !3, i64 0}
!35 = metadata !{metadata !8, metadata !14, i64 112}
!36 = metadata !{metadata !13, metadata !10, i64 0}
!37 = metadata !{metadata !8, metadata !10, i64 36}
!38 = metadata !{metadata !8, metadata !10, i64 40}
!39 = metadata !{metadata !13, metadata !10, i64 8}
!40 = metadata !{metadata !8, metadata !10, i64 44}
!41 = metadata !{metadata !8, metadata !10, i64 48}
!42 = metadata !{metadata !8, metadata !9, i64 164}
!43 = metadata !{metadata !12, metadata !14, i64 24}
!44 = metadata !{i8 0, i8 2}
